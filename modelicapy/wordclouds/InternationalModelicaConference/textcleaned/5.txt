2006
Proceedings of the
5 International Modelica Conference
th

September 4th5th, 2006
arsenal research
Vienna, Austria
Dr. Christian Kral (Conference Chair)
Anton Haumer (Program Chair)

Volume 2

organized by
The Modelica Association
and arsenal research

All papers of this conference can be downloaded from
http://www.modelica.org/events/modelica2006

Proceedings of Modelica2006
arsenal research
Vienna, Austria, September 4th-5th, 2006
Conference Chair: Dr. Christian Kral
Program Chair:
Anton Haumer
Published by:
The Modelica Association (http://www.modelica.org/) and
arsenal research (http://www.arsenal.ac.at/)

The Modelica Association

ii

Modelica 2006, September 4th  5th

Preface

Preface
The first International Modelica Conference took place October 2000, in Lund, Sweden. Since then,
Modelica has increasingly become the preferred modeling language for complex multi-domain systems.
During this time, the community of Modelica users has grown continuously. This is also reflected in the
great response to the Call for Papers of the 5th International Modelica Conference. This years conference
will be held on September 4th-5th, 2006 in Vienna. From the excellent papers submitted to the program
committee, it was finally decided to include 66 oral and 15 poster presentations in the technical program. The
technical papers cover thermodynamic and automotive applications, mechanical and electrical systems and
the latest developments in modelling and simulation products. Before the conference, there will be five
parallel tutorials. These tutorials include an introduction to Modelica, mathematical aspects of modeling, as
well as the modeling of electric drives, vehicle and thermodynamic systems.
Due to the special features of the Modelica language, such as object-oriented modeling and the ability to
reuse and exchange models, Modelica strongly supports an integrated engineering design process. This fact
is emphasized by the keynote of Dominique Florack, Executive Vice President R&D of Dassault Systemes,
About the strategic decision of Dassault Systemes to select Modelica to be at the core of Dassault Systemes'
open strategy for CATIA Systems. In various fields Modelica is being used as a standard platform for
model exchange between suppliers and OEMs.
A key issue for the success of Modelica is the continuous development of the Modelica language as well as
the Modelica Standard Library by the Modelica Association under strict observance of backward
compatibility with previous versions. The broad base of private and institutional members of the Modelica
Association as a non-profit organization ensures language stability and security in software investments.
The 5th International Modelica Conference was organized by the Modelica Association and arsenal research,
Vienna, Austria. We would like to thank the local organizing committee, the technical program committee
and the reviewers for offering their time and expertise throughout the organization of the conference. We
would also like to wish all participants an excellent and interesting conference and hope you will have a
memorable experience in Vienna.

Vienna, September 1st, 2006

Dr. Christian Kral
Conference Chair

The Modelica Association

Anton Haumer
Program Chair

iii

Modelica 2006, September 4th  5th

Program Committee


Conference Chair: Dr. Christian Kral, arsenal research, Vienna, Austria



Program Chair:

Anton Haumer, arsenal research, Vienna, Austria



Program Board:

Prof. Martin Otter, DLR, Oberpfaffenhofen, Germany



Program Board:

Prof. Peter Fritzson, Linkping University, Sweden



Program Board:

Dr. Hilding Elmqvist, Dynasim AB, Lund, Sweden



Program Board:

Dr. Michael Tiller, Emmeskay Inc., Michigan, USA



Prof. Bernhard Bachmann, University of Applied Sciences Bielefeld, Germany



Dr. Ingrid Bausch-Gall, Bausch-Gall GmbH, Munich, Germany



Daniel Bouskela, Electricite de France, Chatou Cedex, France



Prof. Felix Breitenecker, Technical University Vienna, Austria



Dr. Francesco Casella, Politecnico di Milano, Cremona, Italy



Thomas Christ / Marco Bross, BMW, Munich, Germany



Dr. Ruediger Franke, ABB, Heidelberg, Germany



Dirk Limperich, DaimlerChrysler AG, Sindelfingen, Germany



Prof. Karin Lunde, University of Applied Sciences Ulm, Germany



Ludwig Marvan, DRIVEScom, Vienna, Austria



Dr. Jakob Mauss, DaimlerChrysler AG, Berlin, Germany



Gert Pascoli, arsenal research, Vienna, Austria



Franz Pirker, arsenal research, Vienna, Austria



Markus Plainer, arsenal research, Vienna, Austria



Prof. Gerhard Schmitz, Technical University Hamburg-Harburg, Germany



Dr. Hubertus Tummescheit, Modelon AB, Lund, Sweden

Local Organizing Committee


Anton Haumer



Dr. Christian Kral



Franz Pirker



Veronika Roscher



Silke Schrdl



WEBSTRACTS on-line Conference Management



procon Conference, Incentive & Event Management GmbH

The Modelica Association

iv

Modelica 2006, September 4th  5th

Table of Contents

Table of Contents
Volume 1
Session 1a: Thermodynamic Systems for Power Plant Applications 1 .............................................................1
Fast Start-up of a Combined-Cycle Power Plant: A Simulation Study with Modelica ............................3
F. Casella[1], F. Pretolani[2]
[1]
Politecnico di Milano, Italy, [2]CESI S.p.A., Italy
Modelling of a Water/Steam Cycle of the Combined Cycle Power Plant Rio Bravo 2
with Modelica ...............................................................................................................................11
B. El Hefni, D. Bouskela
EDF R&D, France
Modeling and Dynamic Analysis of CO2-Emission Free Power Processes in Modelica
using the CombiPlant Library .......................................................................................................17
J. Eborn[1], F. Selimovic[2], B. Sundn[2]
[1]
Modelon AB, Sweden, [2]Lund Institute of Technology, Sweden
Session 1b: Automotive Applications 1...........................................................................................................23
Simulation of Hybrid Electric Vehicles..................................................................................................25
D. Simic, H. Giuliani, C. Kral, J.V. Gragger
arsenal research, Austria
Coordinated Automotive Libraries for Vehicle System Modelling........................................................33
M. Dempsey[1], M. Gfvert[2], P. Harman[3], C. Kral[4], M. Otter[5], P. Treffinger[6]
[1]
Claytex Services Ltd., UK, [2]Modelon AB, Sweden, [3]Ricardo UK Ltd., UK,
[4]
arsenal research, Austria, [5]DLR Oberpfaffenhofen, Germany, [6]DLR Stuttgart, Germany
The VehicleDynamics Library - Overview and Applications ................................................................43
J. Andreasson, M. Gfvert
Modelon AB, Sweden
Session 1c: Language, Tools and Algorithms 1...............................................................................................53
Modelica CVD - A Tool for Visualizing the Structure of Modelica Libraries.......................................55
M. Loeffler[1], M. Huhn[1], C.C. Richter[1], R. Kossel[2]
[1]
TU Braunschweig, Germany, [2]TLK-Thermo GmbH, Germany
Advanced Modeling and Simulation Techniques in MOSILAB:
A System Development Case Study .............................................................................................63
C. Nytsch-Geusen[1], T. Ernst[1], A. Nordwig[1], P. Schwarz[2], P. Schneider[2], M. Vetter[3],
C. Wittwer[3], A. Holm[4], T. Nouidui[4], J. Leopold[5], G. Schmidt[5], A. Mattes[6]
[1]
Fraunhofer FIRST, Germany, [2]Fraunhofer IIS/EAS, Germany, [3]Fraunhofer ISE, Germany,
[4]
Fraunhofer IBP, Germany, [5]Fraunhofer IWU, Germany, [6]Fraunhofer IPK, Germany
Quantised State System Simulation in Dymola/Modelica Using the DEVS Formalism........................73
T. Beltrame[1], F.E. Cellier[2]
[1]
VTT, Finland, [2]ETH Zurich, Switzerland

The Modelica Association

v

Modelica 2006, September 4th  5th

Table of Contents

Session 1d: Mechanical Systems and Applications 1 ......................................................................................83
The DLR FlexibleBodies Library to Model Large Motions of Beams and of
Flexible Bodies Exported from Finite Element Programs ............................................................85
A. Heckmann[1], M. Otter[1], S. Dietz[2], J.D. Lopez[3]
[1]
German Aerospace Center (DLR), Germany, [2]INTEC GmbH, Germany,
[3]
Dynasim AB, Sweden
3D Flexible Multibody Thin Beams Simulation in Modelica with the Finite Element Method.............97
X. Murua, F. Martinez, A. Pujana, J. Basurko, J.M. Pagalday
IKERLAN Research Centre, Spain
A Modelica Library for Space Flight Dynamics ..................................................................................107
T. Pulecchi, F. Casella, M. Lovera
Politecnico di Milano, Italy
Session 2a: Thermodynamic Systems for Power Plant Applications 2 .........................................................117
Simulation of Components of a Thermal Power Plant .........................................................................119
R. Schimon, D. Simic, A. Haumer, C. Kral, M. Plainer
arsenal research, Austria
Pressurized Water Reactor Modelling with Modelica ..........................................................................127
A. Souyri[1], D. Bouskela[1], B. Pentori[2], N. Kerkar[2]
[1]
Electricit de France EDF/R&D, France, [2]Electricit de France EDF/SEPTEN, France
Simulation of the Start-Up Procedure of a Parabolic Trough Collector Field
with Direct Solar Steam Generation ...........................................................................................135
T. Hirsch, M. Eck
German Aerospace Center, Institute of Technical Thermodynamics, Germany
Session 2b: Automotive Applications 2.........................................................................................................145
Modeling the Dynamics of Vehicle Fuel Systems................................................................................147
J.J. Batteh, P.J. Kenny
Ford Motor Company, USA
Motorcycle Dynamics Library in Modelica..........................................................................................157
F. Donida , G. Ferretti, S.M. Savaresi, F. Schiavo, M. Tanelli
Politecnico di Milano, Italy
Development and Verification of a Series Car Modelica/Dymola Multi-body Model
to Investigate Vehicle Dynamics Systems ..................................................................................167
C. Knobel[1], G. Janin[2], A. Woodruff[3]
[1]
BMW Group Research and Technology, Germany,
[2]
cole Nationale Suprieure de Techniques Avances, France, [3]Modelon AB, Sweden
Session 2c: Language, Tools and Algorithms 2.............................................................................................175
Modeling and Simulation of Differential Equations in Scicos .............................................................177
M. Najafi, R. Nikoukhah
INRIA-Rocquencourt, France
How to Dissolve Complex Dynamic Systems for Wanted Unknowns with Dymola / Modelica.........187
J. Koehler
ZF Friedrichshafen AG, Germany

The Modelica Association

vi

Modelica 2006, September 4th  5th

Table of Contents
Using Modelica Models for Complex Virtual Experimentation with the Tornado Kernel ..................193
F.H.A. Claeys[1], P. Fritzson[2], P.A. Vanrolleghem[3]
[1]
BIOMATH, Ghent University, Belgium, [2]PELAB, Linkping University, Sweden,
[3]
modelEAU, Universit Laval, Canada
Session 2d: Mechanical Systems and Applications 2 ....................................................................................203
Leaf Spring Modeling...........................................................................................................................205
N. Philipson
Modelon AB, Sweden
Multibody Systems Dynamics: Modelica Implementation and Bond Graph Representation ..............213
I.I. Kosenko[1], M.S. Loginova[2], YA.P. Obraztsov[2], M.S. Stavrovskaya[1]
[1]
Moscow State University of Service, Russian Federation,
[2]
Moscow State Academy of Instrument Making and Computer Science, Russian Federation
NowaitTransit Concept Assessment. Modeling of Trains on Complex Track Geometry ....................225
J. Tuszynski[1], N. Philipson[2], J. Andreasson[2], M. Gfvert[2]
[1]
Nowaittransit AB, Sweden, [2]Modelon AB, Sweden
Session 3a: Thermodynamic Systems for Energy Storage and Conversion ..................................................233
Analysis of Steam Storage Systems using Modelica............................................................................235
J. Buschle, W.D. Steinmann, R. Tamme
German Aerospace Center (DLR), Germany
An Enhanced Discretisation Method for Storage Tank Models within Energy Systems .....................243
S. Wischhusen
XRG Simulation GmbH, Germany
HydroPlant  a Modelica Library for Dynamic Simulation of Hydro Power Plants ............................251
K. Tuszynski[1], J. Tuszynski[2], K. Slttorp[3]
[1]
Modelon AB, Sweden, [2]Datavoice HB, Sweden, [3]Tactel AB, Sweden
Session 3b: Hardware in the Loop .................................................................................................................259
Interacting Modelica using a Named Pipe for Hardware-in-the-loop Simulation ................................261
A. Ebner, A. Haumer, D. Simic, F. Pirker
arsenal research, Austria
Parameterisation of Modelica Models on PC and Real Time Platforms ..............................................267
M. Kellner[1], M. Neumann[1], A. Banerjee[1], P. Doshi[2]
[1]
ZF Friedrichshafen AG, Germany, [2]Universitt Duisburg-Essen, Germany
Synchronising a Modelica Real-Time Simulation Model with a Highly Dynamic
Engine Test-Bench System .........................................................................................................275
D. Winkler, C. Ghmann
Technische Universitt Berlin, Germany
Session 3c: Language, Tools and Algorithms 3.............................................................................................283
A Numeric Library for Use in Modelica Simulations with Lapack, SuperLU, Interpolation,
and MatrixIO...............................................................................................................................285
A. Sandholm[1,2], P. Bunus[1], P. Fritzson[1]
[1]
Linkping University, Sweden, [2]Kalmar University, Sweden
Online Application of Modelica Models in the Industrial IT Extended Automation System 800xA...293
R. Franke[1], J. Doppelhamer[2]
[1]
ABB AG, Power Technology Systems, Germany, [2]ABB Corporate Research, Germany
The Modelica Association

vii

Modelica 2006, September 4th  5th

Table of Contents
Types in the Modelica Language..........................................................................................................303
D. Broman[1], P. Fritzson[1], S. Furic[2]
[1]
Linkping University, Sweden, [2]Imagine, France
Session 3d: Electric Systems and Applications 1 ..........................................................................................317
Modeling and Simulation of Generator Circuit Breaker Performance .................................................319
O. Fritz[1], M. Lakner[2]
[1]
ABB Switzerland Ltd., Corporate Research, Switzerland,
[2]
ABB Switzerland Ltd., High-Current Systems, Switzerland
Parallel Simulation with Transmission Lines in Modelica ...................................................................325
K. Nystrm, P. Fritzson
Linkping University, Sweden

Volume 2
Session 4: Poster Session ...............................................................................................................................333
GAPILib - A Modelica Library for Model Parameter Identification Using Genetic Algorithms ........335
M.A. Rubio[1], A. Urquia[2], L. Gonzlez[1], D. Guina[1], S. Dormido[2]
[1]
Instituto de Automtica Industrial (IAI), CSIC, Spain,
[2]
ETS de Ingeniera Informtica, UNED, Spain
Ascola: A Tool for Importing Dymola Code into Ascet.......................................................................343
C. Schlegel[1], R. Finsterwalder[2]
[1]
Schlegel Simulation GmbH, Germany,
[2]
University of the FederalArmed Forces Munich, Germany
An Analyzer for Declarative Equation Based Models..........................................................................349
J.-W. Ding[1], L.-P. Chen[1], F.-L. Zhou[1], Y.-Z. Wu[1], G.B. Wang[2]
[1]
Huazhong University of Science and Technology, China,
[2]
National Natural Science Foundation of China, China
Engineering Design Tool Standards and Interfacing Possibilities to Modelica Simulation Tools .......359
O. Johansson, A. Pop, P. Fritzson
Linkping University, Sweden
On the Noise Modelling and Simulation ..............................................................................................369
D. Aiordachioaie, V. Nicolau, M. Munteanu, G. Sirbu
Dunarea de Jos Galati University, Romaina
Acausal Modelling of Helicopter Dynamics for Automatic Flight Control Applications ....................377
L. Vigan, G. Magnani
Politecnico di Milano, Italy
Dynamic Modeling and Control of a 6 DOF Parallel Kinematics........................................................385
M. Krabbes, Ch. Meissner
Leipzig University of Applied Sciences, Germany
Modelling of Alternative Propulsion Concepts of Railway Vehicles...................................................391
H. Dittus, J. Ungethm
German Aerospace Center, Institute of Vehicle Concepts, Germany
Modelling Automotive Hydraulic Systems using the Modelica ActuationHydraulics Library............399
P.A. Harman
Ricardo UK Ltd., UK

The Modelica Association

viii

Modelica 2006, September 4th  5th

Table of Contents
Vehicle Model for Transient Simulation of a Waste-Heat-Utilisation-Unit
Containing Extended PowerTrain and Fluid Library Components.............................................405
M. Eschenbach, J. Ungethm, P. Treffinger
German Aerospace Center, Germany
Modeling, Calibration and Control of a Paper Machine Dryer Section................................................411
J. kesson[1], O. Slttke[2]
[1]
Lund University, Sweden, [2]ABB Ltd., Ireland
System and Component Design of Directly Driven Reciprocating Compressors with Modelica ........421
T. Bdrich
Dresden University of Technology, Germany
Multizone Airflow Model in Modelica.................................................................................................431
M. Wetter
United Technologies Research Center, USA
Modelling of a Solar Thermal Reactor for Hydrogen Generation ........................................................441
J. Dersch, A. Mathijssen, M. Roeb, C. Sattler
Deutsches Zentrum fr Luft- und Raumfahrt e.V. (DLR), Germany
Object Oriented Modelling of DISS Solar Thermal Power Plant.........................................................449
L.J. Yebra[1], M. Berenguel[2], E. Zarza[1], S. Dormido[3]
[1]
C.I.E.M.A.T., Spain, [2]Universidad de Almera, Spain, [3]U.N.E.D., Spain
Session 5a: Language, Tools and Algorithms 4.............................................................................................457
OpenModelica Development Environment with Eclipse Integration for Browsing, Modeling,
and Debugging ............................................................................................................................459
A. Pop, P. Fritzson, A. Remar, E. Jagudin, D. Akhvlediani
Linkping University, Sweden
A Modelica Based Format for Flexible Modelica Code Generation and
Causal Model Transformations...................................................................................................467
J. Larsson, P. Fritzson
Linkping University, Sweden
Dymola interface to Java - A Case Study: Distributed Simulations .....................................................477
J.D. Lopez, H. Olsson
Dynasim AB, Sweden
Simulation of Complex Systems using Modelica and Tool Coupling..................................................485
R. Kossel, W. Tegethoff, M. Bodmann, N. Lemke
TLK-Thermo GmbH, Germany
Session 5b: Thermodynamic Systems for Cooling Applications...................................................................491
Optimization of a Cooling Circuit with a Parameterized Water Pump Model .....................................493
D. Simic, C. Kral, H. Lacher
arsenal research, Austria
Using Modelica as a Design Tool for an Ejector Test Bench...............................................................501
C.C. Richter, C. Tischendorf, R. Fiorenzano, P. Cavalcante, W. Tegethoff, J. Khler
TU Braunschweig, Germany
Modeling of Frost Growth on Heat Exchanger Surfaces......................................................................509
K. Proelss, G. Schmitz
Hamburg University of Technology, Germany

The Modelica Association

ix

Modelica 2006, September 4th  5th

Table of Contents
Multizone Building Model for Thermal Building Simulation in Modelica..........................................517
M. Wetter
United Technologies Research Center, USA
Session 5c: Free and Commercial Libraries 1................................................................................................527
The LinearSystems Library for Continuous and Discrete Control Systems.........................................529
M. Otter
German Aerospace Center (DLR), Germany
ARENALib: A Modelica Library for Discrete-Event System Simulation ...........................................539
V.S. Prat, A. Urquia, S. Dormido
ETS de Ingeniera Informtica, UNED, Spain
Neural Network Library in Modelica ...................................................................................................549
F. Codec, F. Casella
Politecnico di Milano, Italy
The Modelica Multi-bond Graph Library.............................................................................................559
D. Zimmer, F.E. Cellier
ETH Zrich, Switzerland
Session 5d: Electric Systems and Applications 2 ..........................................................................................569
The SmartElectricDrives Library - Powerful Models for Fast Simulations of Electric Drives ............571
J.V. Gragger, H. Giuliani, C. Kral, T. Buml, H. Kapeller, F. Pirker
arsenal research, Austria
Quasi-stationary AC Analysis Using Phasor Description With Modelica ...........................................579
O. Enge[1], C. Clau[1], P. Schneider[1], P. Schwarz[1], M. Vetter[2], S. Schwunk[2]
[1]
Fraunhofer Institute Integrated Circuits, Germany,
[2]
Fraunhofer Institute Solar Energy Systems, Germany
Identification and Controls of Electrically Excited Synchronous Machines ........................................589
H. Kapeller, A. Haumer, C. Kral, F. Pirker, G. Pascoli
arsenal research, Austria
Session 6a Language, Tools and Algorithms 5 ..............................................................................................597
Dynamic Optimization of Energy Supply Systems with Modelica Models .........................................599
C. Hoffmann, H. Puta
Technische Universitaet Ilmenau, Germany
Robust Initialization of Differential Algebraic Equations ....................................................................607
B. Bachmann[1], P. Aronsson[2], P. Fritzson[2]
[1]
University of Applied Sciences, Germany, [2]Linkping University, Sweden
Calibration of Static Models using Dymola .........................................................................................615
H. Olsson[1], J. Eborn[2], S.E. Mattsson[1], H. Elmqvist[1]
[1]
Dynasim AB, Sweden, [2]Modelon AB, Sweden
Automatic Fixed-point Code Generation for Modelica using Dymola ................................................621
U. Nordstrm[1,2], J. D. Lopez [1], H. Elmqvist[1]
[1]
Dynasim AB, Sweden, [2]Lund Institute of Technology, Sweden

The Modelica Association

x

Modelica 2006, September 4th  5th

Table of Contents

Session 6b: Thermodynamic Systems and Applications ...............................................................................629
The Modelica Fluid and Media Library for Modeling of Incompressible and Compressible
Thermo-Fluid Pipe Networks .....................................................................................................631
F. Casella[1], M. Otter[2], K. Proelss[3], C. Richter[4], H. Tummescheit[5]
[1]
Politecnico di Milano, Italy, [2]German Aerospace Center (DLR), Germany,
[3]
Technical University Hamburg-Harburg, Germany,
[4]
Technical University Braunschweig, Germany, [5]Modelon AB, Sweden
Shock Wave Modeling for Modelica.Fluid Library using Oscillation-free
Logarithmic Reconstruction........................................................................................................641
J. D. Lopez
Dynasim AB, Sweden
Modelling of an Experimental Batch Plant with Modelica ..................................................................651
K. Poschlad[1], M.A.P. Remelhe[1], M. Otter[2]
[1]
University of Dortmund, Germany, [2]German Aerospace Center (DLR), Germany
Integral Analysis for Thermo-Fluid Applications with Modelica ........................................................661
J.J. Batteh
Ford Motor Company, Research and Advanced Engineering, USA
Session 6c: Free and Commercial Libraries 2................................................................................................669
Integration of CATIA with Modelica ...................................................................................................671
P. Bhattacharya[1], N. Suyam Welakwe[2], R. Makanaboyina[1], A. Chimalakonda[1]
[1]
DaimlerChrysler Research and Technology, India,
[2]
DaimlerChrysler Research and Technology, Germany
A Modelica Library for Simulation of Household Refrigeration Appliances Features and Experiences............................................................................................................677
C. Heinrich, K. Berthold
Institute for Air Conditioning and Refrigeration, Germany
A New Energy Building Simulation Library ........................................................................................685
J.I. Videla, B. Lie
Telemark University College, Norway
UnitTesting: A Library for Modelica Unit Testing ..............................................................................695
M.M. Tiller, B. Kittirungsi
Emmeskay, Inc., USA
Session 6d: Multidomain Systems .................................................................................................................705
If We Only had Used XML ..................................................................................................................707
U. Reisenbichler, H. Kapeller, A. Haumer, C. Kral, F. Pirker, G. Pascoli
arsenal research, Austria
Coupled Simulation of Building Structure and Building Services Installations with Modelica...........717
P. Matthes, T. Haase, A. Hoh, T. Tschirner, D. Mller
TU Berlin, Germany
MWorks: a Modern IDE for Modeling and Simulation of Multi-domain Physical Systems
Based on Modelica......................................................................................................................725
F.-L. Zhou, L.-P. Chen, Y.-Z. Wu, J.-W. Ding, J.-J. Zhao, Y.-Q. Zhang
Huazhong University of Science and Technology, China

The Modelica Association

xi

Modelica 2006, September 4th  5th

Table of Contents
Domain Library Preprocessing in MWorks - A Platform for Modeling and Simulation of
Multi-domain Physical Systems Based on Modelica..................................................................733
Y.-Z. Wu, F.-L. Zhou, L.-P. Chen, J.-W. Ding, J.-J. Zhao
Huazhong University of Science and Technology, China

The Modelica Association

xii

Modelica 2006, September 4th  5th

Index of Authors

Index of Authors
Aiordachioaie, D.
On the Noise Modelling and Simulation ..............................................................................................369
kesson, J.
Modeling, Calibration and Control of a Paper Machine Dryer Section................................................411
Akhvlediani, D.
OpenModelica Development Environment with Eclipse Integration for Browsing, Modeling,
and Debugging......................................................................................................................................459
Andreasson, J.
NowaitTransit Concept Assessment. Modeling of Trains on Complex Track Geometry ....................225
The VehicleDynamics Library - Overview and Applications ................................................................43
Aronsson, P.
Robust Initialization of Differential Algebraic Equations ....................................................................607
Bachmann, B.
Robust Initialization of Differential Algebraic Equations ....................................................................607
Banerjee, A.
Parameterisation of Modelica Models on PC and Real Time Platforms ..............................................267
Basurko, J.
3D Flexible Multibody Thin Beams Simulation in Modelica with the Finite Element Method.............97
Batteh, J.J.
Integral Analysis for Thermo-Fluid Applications with Modelica ........................................................661
Modeling the Dynamics of Vehicle Fuel Systems................................................................................147
Buml, T.
The SmartElectricDrives Library - Powerful Models for Fast Simulations of Electric Drives ............571
Beltrame, T.
Quantised State System Simulation in Dymola/Modelica Using the DEVS Formalism........................73
Berenguel, M
Object Oriented Modelling of DISS Solar Thermal Power Plant.........................................................449
Berthold, K
A Modelica Library for Simulation of Household Refrigeration Appliances Features and Experiences .....................................................................................................................677
Bhattacharya, P.
Integration of CATIA with Modelica ...................................................................................................671
Bodmann, M
Simulation of Complex Systems using Modelica and Tool Coupling..................................................485
Bdrich, T.
System and Component Design of Directly Driven Reciprocating Compressors with Modelica ........421
Bouskela, D.
Modelling of a Water/Steam Cycle of the Combined Cycle Power Plant Rio Bravo 2
with Modelica .........................................................................................................................................11
Pressurized Water Reactor Modelling with Modelica ..........................................................................127
Broman, D.
Types in the Modelica Language..........................................................................................................303

The Modelica Association

xiii

Modelica 2006, September 4th  5th

Index of Authors
Bunus, P.
A Numeric Library for Use in Modelica Simulations with Lapack, SuperLU, Interpolation,
and MatrixIO ........................................................................................................................................285
Buschle, J.
Analysis of Steam Storage Systems using Modelica............................................................................235
Casella, F.
A Modelica Library for Space Flight Dynamics...................................................................................107
Fast Start-up of a Combined-Cycle Power Plant: A Simulation Study with Modelica ............................3
Neural Network Library in Modelica ...................................................................................................549
The Modelica Fluid and Media Library for Modeling of Incompressible and Compressible
Thermo-Fluid Pipe Networks ...............................................................................................................631
Cavalcante, P.
Using Modelica as a Design Tool for an Ejector Test Bench...............................................................501
Cellier, F.E.
Quantised State System Simulation in Dymola/Modelica Using the DEVS Formalism........................73
The Modelica Multi-bond Graph Library .............................................................................................559
Chen, L.-P.
An Analyzer for Declarative Equation Based Models..........................................................................349
Domain Library Preprocessing in MWorks - A Platform for Modeling and Simulation of
Multi-domain Physical Systems Based on Modelica............................................................................733
MWorks: a Modern IDE for Modeling and Simulation of Multi-domain Physical Systems
Based on Modelica ...............................................................................................................................725
Chimalakonda, A.
Integration of CATIA with Modelica ...................................................................................................671
Claeys, F.H.A.
Using Modelica Models for Complex Virtual Experimentation with the Tornado Kernel ..................193
Clau, C.
Quasi-stationary AC Analysis Using Phasor Description With Modelica ...........................................579
Codec, F.
Neural Network Library in Modelica ...................................................................................................549
Dempsey, M.
Coordinated Automotive Libraries for Vehicle System Modelling........................................................33
Dersch, J.
Modelling of a Solar Thermal Reactor for Hydrogen Generation ........................................................441
Dietz, S.
The DLR FlexibleBodies Library to Model Large Motions of Beams
and of Flexible Bodies Exported from Finite Element Programs...........................................................85
Ding, J.-W.
An Analyzer for Declarative Equation Based Models..........................................................................349
Domain Library Preprocessing in MWorks - A Platform for Modeling and Simulation of
Multi-domain Physical Systems Based on Modelica............................................................................733
MWorks: a Modern IDE for Modeling and Simulation of Multi-domain Physical Systems
Based on Modelica ...............................................................................................................................725
Dittus, H.
Modelling of Alternative Propulsion Concepts of Railway Vehicles...................................................391
Donida , F
Motorcycle Dynamics Library in Modelica..........................................................................................157

The Modelica Association

xiv

Modelica 2006, September 4th  5th

Index of Authors
Doppelhamer, J.
Online Application of Modelica Models in the Industrial IT Extended Automation System 800xA...293
Dormido, S.
ARENALib: A Modelica Library for Discrete-Event System Simulation ...........................................539
GAPILib - A Modelica Library for Model Parameter Identification
Using Genetic Algorithms ....................................................................................................................335
Object Oriented Modelling of DISS Solar Thermal Power Plant.........................................................449
Doshi, P.
Parameterisation of Modelica Models on PC and Real Time Platforms ..............................................267
Ebner, A.
Interacting Modelica using a Named Pipe for Hardware-in-the-loop Simulation ................................261
Eborn, J.
Calibration of Static Models using Dymola .........................................................................................615
Modeling and Dynamic Analysis of CO2-Emission Free Power Processes in Modelica
using the CombiPlant Library.................................................................................................................17
Eck, M.
Simulation of the Start-Up Procedure of a Parabolic Trough Collector Field with Direct Solar
Steam Generation..................................................................................................................................135
El Hefni, B.
Modelling of a Water/Steam Cycle of the Combined Cycle Power Plant
Rio Bravo 2 with Modelica .................................................................................................................11
Elmqvist, H.
Automatic Fixed-point Code Generation for Modelica using Dymola.................................................621
Calibration of Static Models using Dymola .........................................................................................615
Enge, O.
Quasi-stationary AC Analysis Using Phasor Description With Modelica ...........................................579
Ernst, T.
Advanced Modeling and Simulation Techniques in MOSILAB:
A System Development Case Study .......................................................................................................63
Eschenbach, M.
Vehicle Model for Transient Simulation of a Waste-Heat-Utilisation-Unit Containing Extended
PowerTrain and Fluid Library Components .........................................................................................405
Ferretti, G.
Motorcycle Dynamics Library in Modelica..........................................................................................157
Finsterwalder, R.
Ascola: A Tool for Importing Dymola Code into Ascet.......................................................................343
Fiorenzano, R.
Using Modelica as a Design Tool for an Ejector Test Bench...............................................................501
Franke, R.
Online Application of Modelica Models in the Industrial IT Extended Automation System 800xA...293
Fritz, O.
Modeling and Simulation of Generator Circuit Breaker Performance .................................................319

The Modelica Association

xv

Modelica 2006, September 4th  5th

Index of Authors
Fritzson, P.
A Modelica Based Format for Flexible Modelica Code Generation and Causal Model
Transformations....................................................................................................................................467
A Numeric Library for Use in Modelica Simulations with Lapack, SuperLU, Interpolation,
and MatrixIO ........................................................................................................................................285
Engineering Design Tool Standards and Interfacing Possibilities to Modelica Simulation Tools .......359
OpenModelica Development Environment with Eclipse Integration for Browsing, Modeling,
and Debugging......................................................................................................................................459
Parallel Simulation with Transmission Lines in Modelica ...................................................................325
Robust Initialization of Differential Algebraic Equations ....................................................................607
Types in the Modelica Language..........................................................................................................303
Using Modelica Models for Complex Virtual Experimentation with the Tornado Kernel ..................193
Furic, S.
Types in the Modelica Language..........................................................................................................303
Gfvert, M.
Coordinated Automotive Libraries for Vehicle System Modelling........................................................33
NowaitTransit Concept Assessment. Modeling of Trains on Complex Track Geometry ....................225
The VehicleDynamics Library - Overview and Applications ................................................................43
Giuliani, H.
Simulation of Hybrid Electric Vehicles..................................................................................................25
The SmartElectricDrives Library - Powerful Models for Fast Simulations of Electric Drives ............571
Gonzlez, L.
GAPILib - A Modelica Library for Model Parameter Identification Using Genetic Algorithms ........335
Gragger, J.V.
Simulation of Hybrid Electric Vehicles..................................................................................................25
The SmartElectricDrives Library - Powerful Models for Fast Simulations of Electric Drives ............571
Ghmann, C.
Synchronising a Modelica Real-Time Simulation Model with a Highly Dynamic
Engine Test-Bench System...................................................................................................................275
Guina, D.
GAPILib - A Modelica Library for Model Parameter Identification Using Genetic Algorithms ........335
Haase, T.
Coupled Simulation of Building Structure and Building Services Installations with Modelica...........717
Harman, P.
Coordinated Automotive Libraries for Vehicle System Modelling........................................................33
Modelling Automotive Hydraulic Systems using the Modelica ActuationHydraulics Library............399
Haumer, A.
Identification and Controls of Electrically Excited Synchronous Machines ........................................589
If We Only had Used XML... ...............................................................................................................707
Interacting Modelica using a Named Pipe for Hardware-in-the-loop Simulation ................................261
Simulation of Components of a Thermal Power Plant .........................................................................119
Heckmann, A.
The DLR FlexibleBodies Library to Model Large Motions of Beams and of Flexible Bodies
Exported from Finite Element Programs ................................................................................................85
Heinrich, C.
A Modelica Library for Simulation of Household Refrigeration Appliances Features and Experiences .....................................................................................................................677

The Modelica Association

xvi

Modelica 2006, September 4th  5th

Index of Authors
Hirsch, T.
Simulation of the Start-Up Procedure of a Parabolic Trough Collector Field with Direct Solar
Steam Generation..................................................................................................................................135
Hoffmann, C.
Dynamic Optimization of Energy Supply Systems with Modelica Models .........................................599
Hoh, A.
Coupled Simulation of Building Structure and Building Services Installations with Modelica...........717
Holm, A.
Advanced Modeling and Simulation Techniques in MOSILAB:
A System Development Case Study .......................................................................................................63
Huhn, M.
Modelica CVD - A Tool for Visualizing the Structure of Modelica Libraries.......................................55
Jagudin, E.
OpenModelica Development Environment with Eclipse Integration for Browsing, Modeling,
and Debugging......................................................................................................................................459
Janin, G.
Development and Verification of a Series Car Modelica/Dymola Multi-body Model to Investigate
Vehicle Dynamics Systems ..................................................................................................................167
Johansson, O.
Engineering Design Tool Standards and Interfacing Possibilities to Modelica Simulation Tools .......359
Kapeller, H.
Identification and Controls of Electrically Excited Synchronous Machines ........................................589
If We Only had Used XML... ...............................................................................................................707
The SmartElectricDrives Library - Powerful Models for Fast Simulations of Electric Drives ............571
Kellner , M.
Parameterisation of Modelica Models on PC and Real Time Platforms ..............................................267
Kenny, P.J.
Modeling the Dynamics of Vehicle Fuel Systems................................................................................147
Kerkar, N.
Pressurized Water Reactor Modelling with Modelica ..........................................................................127
Kittirungsi, B.
UnitTesting: A Library for Modelica Unit Testing ..............................................................................695
Knobel, C.
Development and Verification of a Series Car Modelica/Dymola Multi-body Model to Investigate
Vehicle Dynamics Systems ..................................................................................................................167
Koehler, J.
How to Dissolve Complex Dynamic Systems for Wanted Unknowns with Dymola / Modelica.........187
Khler, J.
Using Modelica as a Design Tool for an Ejector Test Bench...............................................................501
Kosenko, I.I.
Multibody Systems Dynamics: Modelica Implementation and Bond Graph Representation ..............213
Kossel, R.
Modelica CVD - A Tool for Visualizing the Structure of Modelica Libraries.......................................55
Simulation of Complex Systems using Modelica and Tool Coupling..................................................485
Krabbes, M.
Dynamic Modeling and Control of a 6 DOF Parallel Kinematics........................................................385
The Modelica Association

xvii

Modelica 2006, September 4th  5th

Index of Authors
Kral, C.
Coordinated Automotive Libraries for Vehicle System Modelling........................................................33
Identification and Controls of Electrically Excited Synchronous Machines ........................................589
If We Only had Used XML... ...............................................................................................................707
Optimization of a Cooling Circuit with a Parameterized Water Pump Model .....................................493
Simulation of Components of a Thermal Power Plant .........................................................................119
Simulation of Hybrid Electric Vehicles..................................................................................................25
The SmartElectricDrives Library - Powerful Models for Fast Simulations of Electric Drives ............571
Lacher, H.
Optimization of a Cooling Circuit with a Parameterized Water Pump Model .....................................493
Lakner, M.
Modeling and Simulation of Generator Circuit Breaker Performance .................................................319
Larsson, J.
A Modelica Based Format for Flexible Modelica Code Generation and Causal
Model Transformations ........................................................................................................................467
Lemke, N.
Simulation of Complex Systems using Modelica and Tool Coupling..................................................485
Leopold, J.
Advanced Modeling and Simulation Techniques in MOSILAB:
A System Development Case Study .......................................................................................................63
Lie, B.
A New Energy Building Simulation Library ........................................................................................685
Loeffler, M.
Modelica CVD - A Tool for Visualizing the Structure of Modelica Libraries.......................................55
Loginova, M.S.
Multibody Systems Dynamics: Modelica Implementation and Bond Graph Representation ..............213
Lopez, J.D.
Automatic Fixed-point Code Generation for Modelica using Dymola.................................................621
Dymola interface to Java - A Case Study: Distributed Simulations ....................................................477
Shock Wave Modeling for Modelica.Fluid Library using Oscillation-free
Logarithmic Reconstruction .................................................................................................................641
The DLR FlexibleBodies Library to Model Large Motions of Beams and of Flexible Bodies
Exported from Finite Element Programs ................................................................................................85
Lovera, M.
A Modelica Library for Space Flight Dynamics...................................................................................107
Magnani, G.
Acausal Modelling of Helicopter Dynamics for Automatic Flight Control Applications ....................377
Makanaboyina, R.
Integration of CATIA with Modelica ...................................................................................................671
Martinez, F.
3D Flexible Multibody Thin Beams Simulation in Modelica with
the Finite Element Method .....................................................................................................................97
Mathijssen, A.
Modelling of a Solar Thermal Reactor for Hydrogen Generation ........................................................441
Mattes, A.
Advanced Modeling and Simulation Techniques in MOSILAB:
A System Development Case Study .......................................................................................................63

The Modelica Association

xviii

Modelica 2006, September 4th  5th

Index of Authors
Matthes, P.
Coupled Simulation of Building Structure and Building Services Installations with Modelica...........717
Mattsson, S.E.
Calibration of Static Models using Dymola .........................................................................................615
Meissner, Ch.
Dynamic Modeling and Control of a 6 DOF Parallel Kinematics........................................................385
Mller, D.
Coupled Simulation of Building Structure and Building Services Installations with Modelica...........717
Munteanu, M.
On the Noise Modelling and Simulation ..............................................................................................369
Murua, X.
3D Flexible Multibody Thin Beams Simulation in Modelica with the Finite Element Method.............97
Najafi, M.
Modeling and Simulation of Differential Equations in Scicos .............................................................177
Neumann, M.
Parameterisation of Modelica Models on PC and Real Time Platforms ..............................................267
Nicolau, V.
On the Noise Modelling and Simulation ..............................................................................................369
Nikoukhah, R.
Modeling and Simulation of Differential Equations in Scicos .............................................................177
Nordstrm, U.
Automatic Fixed-point Code Generation for Modelica using Dymola.................................................621
Nordwig, A.
Advanced Modeling and Simulation Techniques in MOSILAB:
A System Development Case Study .......................................................................................................63
Nouidui, T.
Advanced Modeling and Simulation Techniques in MOSILAB:
A System Development Case Study .......................................................................................................63
Nystrm, K.
Parallel Simulation with Transmission Lines in Modelica ...................................................................325
Nytsch-Geusen, C.
Advanced Modeling and Simulation Techniques in MOSILAB:
A System Development Case Study .......................................................................................................63
Obraztsov, YA.P.
Multibody Systems Dynamics: Modelica Implementation and Bond Graph Representation ..............213
Olsson, H.
Calibration of Static Models using Dymola .........................................................................................615
Dymola interface to Java - A Case Study: Distributed Simulations .....................................................477
Otter, M.
Coordinated Automotive Libraries for Vehicle System Modelling........................................................33
Modelling of an Experimental Batch Plant with Modelica ..................................................................651
The DLR FlexibleBodies Library to Model Large Motions of Beams and of Flexible Bodies
Exported from Finite Element Programs ................................................................................................85
The LinearSystems Library for Continuous and Discrete Control Systems.........................................529
The Modelica Fluid and Media Library for Modeling of Incompressible and Compressible
Thermo-Fluid Pipe Networks ...............................................................................................................631

The Modelica Association

xix

Modelica 2006, September 4th  5th

Index of Authors
Pagalday, J.M.
3D Flexible Multibody Thin Beams Simulation in Modelica with the Finite Element Method.............97
Pascoli, G.
Identification and Controls of Electrically Excited Synchronous Machines ........................................589
If We Only had Used XML... ...............................................................................................................707
Pentori, B.
Pressurized Water Reactor Modelling with Modelica ..........................................................................127
Philipson, N.
Leaf Spring Modeling...........................................................................................................................205
NowaitTransit Concept Assessment. Modeling of Trains on Complex Track Geometry ....................225
Pirker, F.
Identification and Controls of Electrically Excited Synchronous Machines ........................................589
If We Only had Used XML... ...............................................................................................................707
Interacting Modelica using a Named Pipe for Hardware-in-the-loop Simulation ................................261
The SmartElectricDrives Library - Powerful Models for Fast Simulations of Electric Drives ............571
Plainer, M.
Simulation of Components of a Thermal Power Plant .........................................................................119
Pop, A.
Engineering Design Tool Standards and Interfacing Possibilities to Modelica Simulation Tools .......359
OpenModelica Development Environment with Eclipse Integration for Browsing, Modeling,
and Debugging......................................................................................................................................459
Poschlad, K.
Modelling of an Experimental Batch Plant with Modelica ..................................................................651
Prat, V.S.
ARENALib: A Modelica Library for Discrete-Event System Simulation ...........................................539
Pretolani, F.
Fast Start-up of a Combined-Cycle Power Plant: A Simulation Study with Modelica ............................3
Proelss, K.
Modeling of Frost Growth on Heat Exchanger Surfaces......................................................................509
The Modelica Fluid and Media Library for Modeling of Incompressible and Compressible
Thermo-Fluid Pipe Networks ...............................................................................................................631
Pujana, A.
3D Flexible Multibody Thin Beams Simulation in Modelica with the Finite Element Method.............97
Pulecchi, T.
A Modelica Library for Space Flight Dynamics...................................................................................107
Puta, H.
Dynamic Optimization of Energy Supply Systems with Modelica Models .........................................599
Reisenbichler, U.
If We Only had Used XML... ...............................................................................................................707
Remar, A.
OpenModelica Development Environment with Eclipse Integration for Browsing, Modeling,
and Debugging......................................................................................................................................459
Remelhe, M.A.P.
Modelling of an Experimental Batch Plant with Modelica ..................................................................651

The Modelica Association

xx

Modelica 2006, September 4th  5th

Index of Authors
Richter, C.C.
Modelica CVD - A Tool for Visualizing the Structure of Modelica Libraries.......................................55
The Modelica Fluid and Media Library for Modeling of Incompressible and Compressible
Thermo-Fluid Pipe Networks ...............................................................................................................631
Using Modelica as a Design Tool for an Ejector Test Bench...............................................................501
Roeb, M.
Modelling of a Solar Thermal Reactor for Hydrogen Generation ........................................................441
Rubio, M.A.
GAPILib - A Modelica Library for Model Parameter Identification Using Genetic Algorithms ........335
Sandholm, A.
A Numeric Library for Use in Modelica Simulations with Lapack, SuperLU, Interpolation,
and MatrixIO ........................................................................................................................................285
Sattler, C.
Modelling of a Solar Thermal Reactor for Hydrogen Generation ........................................................441
Savaresi, S.M.
Motorcycle Dynamics Library in Modelica..........................................................................................157
Schiavo, F.
Motorcycle Dynamics Library in Modelica..........................................................................................157
Schimon, R.
Simulation of Components of a Thermal Power Plant .........................................................................119
Schlegel, C.
Ascola: A Tool for Importing Dymola Code into Ascet.......................................................................343
Schmidt, G.
Advanced Modeling and Simulation Techniques in MOSILAB:
A System Development Case Study .......................................................................................................63
Schmitz, G.
Modeling of Frost Growth on Heat Exchanger Surfaces......................................................................509
Schneider, P.
Advanced Modeling and Simulation Techniques in MOSILAB:
A System Development Case Study .......................................................................................................63
Quasi-stationary AC Analysis Using Phasor Description With Modelica ...........................................579
Schwarz, P.
Advanced Modeling and Simulation Techniques in MOSILAB:
A System Development Case Study .......................................................................................................63
Quasi-stationary AC Analysis Using Phasor Description With Modelica ...........................................579
Schwunk, S.
Quasi-stationary AC Analysis Using Phasor Description With Modelica ...........................................579
Selimovic, F.
Modeling and Dynamic Analysis of CO2-Emission Free Power Processes in Modelica
using the CombiPlant Library.................................................................................................................17
Simic, D.
Interacting Modelica using a Named Pipe for Hardware-in-the-loop Simulation ................................261
Optimization of a Cooling Circuit with a Parameterized Water Pump Model .....................................493
Simulation of Hybrid Electric Vehicles..................................................................................................25
Simulation of Components of a Thermal Power Plant .........................................................................119
Sirbu, G.
On the Noise Modelling and Simulation ..............................................................................................369
The Modelica Association

xxi

Modelica 2006, September 4th  5th

Index of Authors
Slttke, O.
Modeling, Calibration and Control of a Paper Machine Dryer Section................................................411
Slttorp, K.
HydroPlant  a Modelica Library for Dynamic Simulation of Hydro Power Plants ............................251
Souyri, A.
Pressurized Water Reactor Modelling with Modelica ..........................................................................127
Stavrovskaya, M.S.
Multibody Systems Dynamics: Modelica Implementation and Bond Graph Representation ..............213
Steinmann, W.D.
Analysis of Steam Storage Systems using Modelica............................................................................235
Sundn, B.
Modeling and Dynamic Analysis of CO2-Emission Free Power Processes in Modelica
using the CombiPlant Library.................................................................................................................17
Suyam Welakwe, N.
Integration of CATIA with Modelica ...................................................................................................671
Tamme, R.
Analysis of Steam Storage Systems using Modelica............................................................................235
Tanelli, M.
Motorcycle Dynamics Library in Modelica..........................................................................................157
Tegethoff, W.
Simulation of Complex Systems using Modelica and Tool Coupling..................................................485
Using Modelica as a Design Tool for an Ejector Test Bench...............................................................501
Tiller, M.M.
UnitTesting: A Library for Modelica Unit Testing ..............................................................................695
Tischendorf, C.
Using Modelica as a Design Tool for an Ejector Test Bench...............................................................501
Treffinger, P.
Coordinated Automotive Libraries for Vehicle System Modelling........................................................33
Vehicle Model for Transient Simulation of a Waste-Heat-Utilisation-Unit Containing Extended
PowerTrain and Fluid Library Components .........................................................................................405
Tschirner, T.
Coupled Simulation of Building Structure and Building Services Installations with Modelica...........717
Tummescheit, H.
The Modelica Fluid and Media Library for Modeling of Incompressible and Compressible
Thermo-Fluid Pipe Networks ...............................................................................................................631
Tuszynski, J.
HydroPlant  a Modelica Library for Dynamic Simulation of Hydro Power Plants ............................251
NowaitTransit Concept Assessment. Modeling of Trains on Complex Track Geometry ....................225
Tuszynski, K.
HydroPlant  a Modelica Library for Dynamic Simulation of Hydro Power Plants ............................251
Ungethm, J.
Modelling of Alternative Propulsion Concepts of Railway Vehicles...................................................391
Vehicle Model for Transient Simulation of a Waste-Heat-Utilisation-Unit Containing Extended
PowerTrain and Fluid Library Components .........................................................................................405

The Modelica Association

xxii

Modelica 2006, September 4th  5th

Index of Authors
Urquia, A.
ARENALib: A Modelica Library for Discrete-Event System Simulation ...........................................539
GAPILib - A Modelica Library for Model Parameter Identification Using Genetic Algorithms ........335
Vanrolleghem, P.A.
Using Modelica Models for Complex Virtual Experimentation with the Tornado Kernel ..................193
Vetter, M.
Advanced Modeling and Simulation Techniques in MOSILAB:
A System Development Case Study .......................................................................................................63
Quasi-stationary AC Analysis Using Phasor Description With Modelica ...........................................579
Videla, J.I.
A New Energy Building Simulation Library ........................................................................................685
Vigan, L.
Acausal Modelling of Helicopter Dynamics for Automatic Flight Control Applications ....................377
Wang, G.B.
An Analyzer for Declarative Equation Based Models..........................................................................349
Wetter, M.
Multizone Airflow Model in Modelica.................................................................................................431
Multizone Building Model for Thermal Building Simulation in Modelica..........................................517
Winkler, D.
Synchronising a Modelica Real-Time Simulation Model with a Highly Dynamic
Engine Test-Bench System...................................................................................................................275
Wischhusen, S.
An Enhanced Discretisation Method for Storage Tank Models within Energy Systems ....................243
Wittwer, C.
Advanced Modeling and Simulation Techniques in MOSILAB:
A System Development Case Study .......................................................................................................63
Woodruff, A.
Development and Verification of a Series Car Modelica/Dymola Multi-body Model to Investigate
Vehicle Dynamics Systems ..................................................................................................................167
Wu, Y.-Z.
An Analyzer for Declarative Equation Based Models..........................................................................349
Domain Library Preprocessing in MWorks - A Platform for Modeling and Simulation of
Multi-domain Physical Systems Based on Modelica............................................................................733
MWorks: a Modern IDE for Modeling and Simulation of Multi-domain Physical Systems
Based on Modelica ...............................................................................................................................725
Yebra, L.J.
Object Oriented Modelling of DISS Solar Thermal Power Plant.........................................................449
Zarza, E.
Object Oriented Modelling of DISS Solar Thermal Power Plant.........................................................449
Zhang, Y.-Q.
MWorks: a Modern IDE for Modeling and Simulation of Multi-domain
Physical Systems Based on Modelica...................................................................................................725
Zhao, J.-J.
Domain Library Preprocessing in MWorks - A Platform for Modeling and Simulation of
Multi-domain Physical Systems Based on Modelica............................................................................733
MWorks: a Modern IDE for Modeling and Simulation of Multi-domain Physical Systems
Based on Modelica ...............................................................................................................................725
The Modelica Association

xxiii

Modelica 2006, September 4th  5th

Index of Authors
Zhou, F.-L.
An Analyzer for Declarative Equation Based Models..........................................................................349
Domain Library Preprocessing in MWorks - A Platform for Modeling and Simulation of
Multi-domain Physical Systems Based on Modelica............................................................................733
MWorks: a Modern IDE for Modeling and Simulation of Multi-domain Physical Systems
Based on Modelica ...............................................................................................................................725
Zimmer, D.
The Modelica Multi-bond Graph Library .............................................................................................559

The Modelica Association

xxiv

Modelica 2006, September 4th  5th

Session 4

Session 4
Poster Session

The Modelica Association

333

Modelica 2006, September 4th  5th

Session 4

The Modelica Association

334

Modelica 2006, September 4th  5th

GAPILib - A Modelica Library for Model Parameter Identification Using Genetic Algorithms

GAPILib - A Modelica Library for Model Parameter Identification
Using Genetic Algorithms
Miguel A. Rubio+, Alfonso Urquia*, Leandro Gonzalez+, Domingo Guinea+, Sebastian Dormido*
+

Instituto de Automtica Industrial (IAI), CSIC
Ctra. Campo Real, Km. 0,200  La Poveda, 28500 Arganda del Rey, Madrid, Spain
E-mail: {marubio, leandrog, domingo}@iai.csic.es
* Departamento de Informtica y Automtica, ETS de Ingeniera Informtica, UNED
Juan del Rosal 16, 28040 Madrid, Spain
E-mail: {aurquia, sdormido}@dia.uned.es

The use of GA for parameter estimation in Modelica models has been previously proposed by
Hongesombut et al. [1]. However, these authors
programmed and ran the GA using Matlab/Simulink. As a consequence, these authors
approach requires the combined use of Modelica/Dymola and Matlab/Simulink.

Abstract
The design, implementation and use of GAPILib
is discussed in this manuscript. GAPILib is a new
Modelica library for parameter identification in
Modelica models, using genetic algorithms (GA).
GAPILib can be used for parameter estimation in
any Modelica model and the estimation process
does not require to perform model modifications.
This new library supports simple- and multiobjective optimization. GAPILib library is composed of a set of functions that can be easily used,
modified and extended. The use of GAPILib is
illustrated by means of a case study: the estimation of electrochemical parameters in fuel cell
models, which have been composed by using FuelCellLib library. GAPILib is completely written
in Modelica language and it will be freely available soon.

The lack of a freely-available Modelica library
implementing GA, suited for parameter estimation
in Modelica models, has motivated the implementation of GAPILib library.
The fundamentals of the GA supported by
GAPILib library are briefly explained in Section 2
and the library structure is discussed in Section 3.
Finally, the use of GAPILib is illustrated by
means of a case study: the estimation of electrochemical parameters in fuel cell models. This case
study is described in Section 4.

Keywords: Genetic Algorithm, Fuel cell, parameter identification

1

2

The GA supported by GAPILib library is schematically represented in Figure 1. The algorithm
consists of the steps described next.
The GA starts with an initial population, which is
randomly selected from the search space. Each
individual of the population is formed by a group
of chromosomes, which represents a solution to
the problem.
This initial population is evaluated by using a cost
function. This function is used to calculate the
validity of the population members, which are
ordered according to this criterion. The most valid
member is selected for the crossover process,
which generates a new population. This new
population is evaluated and recombined to obtain

Introduction

Frequently, the modelling process includes the
estimation of model parameters from experimental data. The use of genetic algorithms (GA) to
perform this task is broadly accepted.
GA are numerical optimisation algorithms inspired by the natural selection processes that take
place among the live beings. Individuals evolve
thought adaptation to their external environment.
Most capable individuals pass on their genetic
information to later generations. As a consequence, the population evolution after a number of
generations allows to obtain optimum results.
The Modelica Association

GA supported by GAPILib

335

Modelica 2006, September 4th  5th

M.A. Rubio, A. Urquia, L. Gonzlez, D. Guina, S. Dormido

a new generation, and so on. These steps of the
algorithm are repeated until the stop condition is
satisfied (see Figure 1).

(see Figure 2b). The overall library structure is
schematically represented in Figure 2.
The GA execution starts by running the script file
GAPILib.mos. This file only contains the sentences required to execute the following two script
files: GAPILIb_INI.mos and GAPILib_CYCLE (see
Figure 2a). The purpose of these files can be
summarized as follows:


The script file GAPILIb_INI.mos carries out
the initialization of the GAPILib parameters
and generates the initial population.



The script file GAPILib_CYCLE performs the
operations required to obtain the next generations. Its execution finishes when the
stop condition is satisfied. The stop condition shown in Figure 2a is of the type:
N_Cycle generations have been obtained.
Other stop conditions are possible, e.g., the
calculated fitness value is smaller than a
given value.
Further details about these two script files are provided next.
3.1 Script file GAPILIb_INI.mos

Figure 1: GA supported by GAPILib
The GA supported by GAPILib includes several
processes intended to improve the algorithm performance, such as:
1. Elitism. Most valid individuals are passed
on to the next generation without being altered by genetic operators. Using elitism ensures that the best solution is never lost
from one generation to the next.
2. Mutation. It is a genetic operator that introduces random changes on the individuals,
maintaining genetic diversity from one generation of the population of chromosomes to
the next. The purpose of mutation is to allow the algorithm to avoid local minima.
A candidate problem solution is a value selection
of the parameters under estimation. These parameter values are included in the model and this
is simulated. A fitness function is applied to the
obtained model response in order to evaluate the
candidate solution. The next candidate solution is
obtained by applying different genetic operators.
The new values of the parameters are included in
the model, which is simulated, and so on.

3

The script file GAPILIb_INI.mos contains the required function calls to perform the following
tasks (see Figure 2a):
1. To define the directory path and the name of
the Modelica models. This is the only place
where the user has to provide this information.
2. To set the value of the GA parameters,
which are listed in Table 1.
Table 1: GAPILibs GA parameters
N_Population
N_Parameters
N_Parents
N_Elitism

N_Cross_Point
N_Cycle

GAPILib structure

F_Mut

GAPILib has been programmed by combining the
use of the scripting Modelica language (see Figure
2a) and of functions written in Modelica language

The Modelica Association

336

Number of individuals in the population.
Number of parameters to identify
in the model (i.e., in Model.mo).
Number of parents of the population selected to cross.
Number of elite individuals. If
N_Elitism=0, then the Elitism
function is no applied.
Number of crossing points.
Number of generations calculated.
This value sets the stop condition.
Probability of random modification of an individual due to mutation.

Modelica 2006, September 4th  5th

GAPILib - A Modelica Library for Model Parameter Identification Using Genetic Algorithms

a)

b)
Figure 2: Schematic representation of GAPILib library architecture

3. To carry out the random selection of the
crossing points used for the crossover process. The function Ram_Gen_ARENA is used to
generate the pseudo-random numbers. This
function implements the pseudo-random
number generator used by Arena 7.0 simulation environment.
4. To select the initial population, which is
composed of random elements. Again, the
Ram_Gen_ARENA function is used for pseudorandom number generation. The user is allowed to select the range of each parameter
under estimation. This capability allows to
reduce the search space.
5. To read the experimental values used as a
reference to fit the model. The
Exp_Adq_SISO function is used to perform
this task.
3.2 Script file GAPILIb_CYCLE.mos

data. The Eval and Fit functions are used.
All the population individuals are evaluated.
2. To sort the population individuals according
to the fitness values previously calculated.
The Fit_Order function is used.
3. To pass on the elite individuals to the next
generation. These individuals are not altered
by crossover and mutation.

The script file GAPILIb_CYCLE.mos contains the
required function calls to perform the following
tasks (see Figure 2a):
1. To
execute
the
script
file
GAPILib_SIM_SISO, that performs the simulation of the model Model.mo with the parameter values corresponding to each of the
individuals of the population. The model is
simulated as many times as individuals are
in the population. The simulation results are
stored and compared with the experimental
The Modelica Association

Figure 3: New generation obtained by crossover

337

Modelica 2006, September 4th  5th

M.A. Rubio, A. Urquia, L. Gonzlez, D. Guina, S. Dormido

Table 2: Input and output variables of GAPILib functions
Function name
Ram_Gen_ARENA

Input variables




Exp_Adq_SISO






Eval

Fit

Fit_Order

Cross















Mutation




Output variables

Seed [1,6]: seed of ARENA algorithm
N_Ram: number of pseudo-random num-

bers to generate
namefile: name of .mat file where the
experimental data is stored
Xmatrixname: name of X variable matrix
Ymatrixname: name of Y variable matrix

SimuPath: path of the model Model.mo
SimuCaseStudyName: name of the model

to simulate
Xexp: Array of experimental X data
New_Generation: complete set of population values
DATASim_Int: interpolated values with
Xexp of model simulate result
Yexp: array of experimental Y data
Pop: population to be ordered
Fit: fitness of all population
Population: number of population individuals
Parents: number of population parents
Elitism: number of elitism individual
Parents: number of population parents
Elitism: number of elitism individual.
OldGeneration: old generation of population ordered by fitness
Nparameters: complete population parameters of NewGeneration_Cross
F_Mut: mutation factor
RamMut: pseudo-random number generated
using Ram_Gen_ARENA. This number is
used to decide whether a parameter is mutated and its value

Ram_list:[1,N_Ram]: Array of
N_Ram pseudo-random numbers



State_Exp_Adq: state of experi-

mental data


SizeMatrix [2]: size of the Xmatrixname and Ymatrixname ma-





trixes
Xexp: array of experimental X data
Yexp: array of experimental Y data
DATASim_Int: interpolated values
with Xexp of model simulate result



Eval_Mod: fitness evaluation result



Pop_Ordered: population sorted by

fitness value



NewGeneration_Cross: popula-

tion obtained from elitism and crossover


NewGeneration_Mut: population

obtained after elitism, crossover and
mutation

The input and output variables of GAPILib functions are shown in Table 2. These functions are
stored within the GAPILib.Basics package (see
Figure 2b).

4. To cross the selected parents (the most capable individuals), using the crossing point
calculated from GAPILIb_INI. The Cross
function is used. The algorithm implemented is shown in Figure 3.
5. To apply the Mutation function. The mutation factor is the probability used to mutate
any parameter of an individual.
6. The new population is completed with random elements. The Ram_Gen_ARENA function is used.

The Modelica Association



338

Modelica 2006, September 4th  5th

GAPILib - A Modelica Library for Model Parameter Identification Using Genetic Algorithms

4

Case study

GAPILib has been successfully applied to the estimation of electrochemical parameters in fuel cell
models composed by using FuelCellLib. The
packages and models of FuelCellLib are shown in
Figure 4. Further information about this free
Modelica library can be found in [2].

Figure 5: Fuel-cell polarization curve: (o) experimental; (--) simulated using FuelCellLib

Figure 4: Packages and models of FuelCellLib
The obtained models can be used to simulate the
steady-state and the dynamic behavior [3,4,5] of
the fuel cells along their complete range of operation. For instance:


The experimental and simulated polarization curve (I-V) of a fuel cell is shown in
Figure 5.



The experimental and simulated fuel cell
voltage, obtained in response to step
changes in the load, is shown in Figure 6a.



The simulated vs. experimental data of the
water long-term effect is shown in Figure
6b. The simulation reproduces: (1) the slow
voltage rise due to the membrane hydrate;
and (2) the voltage fall due to the water
flooding of the cathode.

a)

Next, the these three fitness processes are discussed.

b)
Figure 6: Experimental (__) and simulated using
FuelCellLib (- -). Time [s], X axis. Voltage [V], Y
axis. a) Fuel cell voltage in response to step
changes in the load. b) Long-term effect of the
water, with constant load.

The experimental data used in this work have
been obtained in the laboratory of renewable energy of the IAI, CSIC.

The Modelica Association

339

Modelica 2006, September 4th  5th

M.A. Rubio, A. Urquia, L. Gonzlez, D. Guina, S. Dormido

4.2 Fitness of the fuel cell voltage in response
to step changes in the load
It is this case, GAPILib is used to estimate the
values of the four parameters shown in Table 5.
The GA parameters are set to the following values:
 The stop condition is satisfied after 200
generations.

4.1 Fitness of the polarization curve
In order to obtain the polarization curve, the
model has to be simulated, for each of the operation points composing the curve, until the steadystate is reached.
The parameters identified to fit the polarization
curve are shown in Table 3. In all experiments,
one crossing point was used. The fitness function
is defined as the sum of the quadratic differences
between the experimental and the simulated values of the variable. I.e.:

Fit = (Yi-i)2

(1)

The GA parameters are set to the following values:
 The stop condition is satisfied after 5000
generations.




150 individuals were used in each population.



A factor of mutation of 0.25 was applied.



100 parents were used in each generation.



One elite element was used.

The obtained values of the parameters are shown
in the Table 6.
Table 5: Parameters to estimate

Each population was composed of 100 individuals.

Parameter



The mutation factor was 0.25.

Rinf

Down resistance value



70 parents and one elite element were used
in each generation.

Rsup

High resistance value

Cdl

Doble layer capacitance

ks

Electrical conductivity od the solid

The values of a parameter obtained with best fitness value are shown in the Table 4.

Table 6: Results of the fitness

Table 3: Parameters to estimate
Parameter
A

Tafel slope

In

Inner current density

Parameter

Value

R inf ( m-2 )

0.03315

R sup ( m-2)

5.1

Io

Exchange current density

Cdl (F m )

10.12

B

Mass transfer slope

ks (S m-1)

0.01

R

Inner area specific resistance

Ilim

Limiting transport current density

-2

4.3 Fitness of the long term effect of water on
the fuel cell voltage with constant resistance load
To carry out this experiment, the fuel cell model
was modified in order to reproduce the variation
of the membrane conductivity. The parameters
used to fit the model are shown in Table 7.
The GA parameters are set to the following values:
 The stop condition is satisfied after 700
generations.

Table 4: Result of the fitness
Parameter

Value

A (V)

0.0390

In (A cm-2)

1.4 x 10-3

Io (A cm-2)

1.5856 x 10-6

B (V)

0.0918

R ( cm2)

7.2860 x 10-4

Ilim (A cm-2)

0.2265

The Modelica Association

340



70 individuals were used in each population.



A factor of mutation of 0.15 was applied.
Modelica 2006, September 4th  5th

GAPILib - A Modelica Library for Model Parameter Identification Using Genetic Algorithms



50 parents were used in each generation.



One elite element was used.

which have been composed by using FuelCellLib
library.

The obtained values of the parameters are shown
in Table 8.

References
[1]

Table 7: Parameters to estimate
Parameter
da(Act_Layer)

Width of active layer

Xs

Percentage of pore volume of solid

D12

Binary difusion coefficient

da(Mem_Layer)

Width of membrane layer

Rmem

Resistance of membrane layer

[2]

Table 8: Result of the fitness
Parameter
da(Act_Layer) (m)

6 x 10-8

Xs

0.05

D12 (m /s)

5.01 x 10-9

da(Mem_Layer) (m)

1.6 x 10-5

2

Rmem ( m-2 )

5

[3]

Value

[4]

[5]

1.419 x 10-3

Hongesombut K, Mitani Y, Tsuji K. An
Incorporated Use of Genetic Algorithm
and a Modelica Library for Simultaneous
Tuning of Power System Stabilizers. In:
Proceedings of the 2nd International Modelica Conference, 2002, pp. 89-98.
Rubio M.A, Urquia A, Gonzalez L,
Guinea D, Dormido S. FuelCellLib- A
Modelica Library for Modeling of Fuel
Cells. In: Proceedings of the 4th International Modelica Conference, 2005, pp. 7582.
Larminie J, Dicks A. Fuel Cell Systems
Explained, Wiley 2000.
Bevers D, Whr M, Yasuda K, Oguro K.
Simulation of polymer electrolyte fuel cell
electrode. J. Appl. Electrochem. 27
(1997).
Broka K, Ekdunge P. Modelling the PEM
fuel cell cathode, J. Appl. Electrochem.
27 (1997).

Future work

Next version of GAPILib will support the solution
of multi-objective problems. Also, it will include
additional fitness functions and the user will be
allowed to select among them the fitness function
best suited to each particular problem.
In addition, a complete guide of GAPILib use will
be developed.

6

Conclusions

The design, implementation and use of GAPILib
has been discussed. GAPILib library is an effective tool for parameter identification in Modelica
models using GA. It is completely written in
Modelica language, which facilitates its use,
modification and extension. GAPILib can be used
for parameter identification in any Modelica
model and the estimation process does not require
to perform model modifications. GAPILib has
been successfully applied to the estimation of
electrochemical parameters in fuel cell models,

The Modelica Association

341

Modelica 2006, September 4th  5th

M.A. Rubio, A. Urquia, L. Gonzlez, D. Guina, S. Dormido

The Modelica Association

342

Modelica 2006, September 4th  5th

Ascola: A Tool for Importing Dymola Code into Ascet

Ascola: A Tool for Importing Dymola Code into Ascet
Clemens Schlegel
Schlegel Simulation GmbH
Meichelbeckstr. 8b
D-85356 Freising
cs@schlegel-simulation.de

Reinhard Finsterwalder
University of the Federal
Armed Forces Munich
D-85577 Neubiberg
reinhard.finsterwalder@unibw.de

Abstract
A new tool, Ascola, is presented for import of
Dymola generated C-code of a Modelica simulation
model into Ascet-MD. All variable names, types,
default values, units and comments of the original
Modelica model along with the naming structure are
retained during import.
The main focus of Ascola is on delivering a userfriendly tool to aid embedded control system design
using Ascet and Modelica. An example will be discussed to illustrate the import process and the use of
imported models in Ascet.

1. Motivation
The tools of the Ascet product family [1] support the
development of embedded software by model-based
design of control and diagnostic functions, simulation, rapid prototyping, and automatic code generation. Ascet-MD provides functions to support the
modeling and (offline-) simulation tasks in a structured, object oriented way. Functions like the visualization of the interdependencies in a model or the
possibility to edit all implementation details of a
variable help the user to focus on the main algorithms. Ascet tools are widely used in the automotive
sector.
To check whether the software and the control algorithms under development fulfill all functional requirements of a design project is a core task in all
stages of the development process. In the first stages
this is mostly done by testing the control algorithms
and the control software against a simulation model
of the device to be controlled (model-in-te-loop and
software-in-the-loop). In later stages hardware-inThe Modelica Association

the-loop simulations come in. For the Ascet environment Ascet-MIP (Matlab Integration Package) [1]
facilitates the import of Simulink [2] models to perform such functional tests. It requires the component
Realtime Workshop [2] to generate C-code of the
Simulink model, which is then imported in Ascet.
Due to its unique features (most outstanding the object oriented, acausal approach) Modelica [3] is used
more and more as a modeling language for mechatronic devices which are typically controlled by an
embedded controller. Naturally, developers of embedded control software wish to use also Modelica
models in Ascet for functional testing. Using Dymola [4] for processing a Modelica model this can be
done with some tweaking via export of the Modelica
/ Dymola model to Simulink and import of the resulting S-function block in Ascet via MIP [5]. However, this requires a long chain of tools, what makes
the development process less robust and more expensive. In this paper we introduce Ascola as a tool
for direct import of Dymola generated C-code of a
Modelica model into Ascet.

2. Basic Structure of Ascet
A controller is specified (modeled) in Ascet by a set
of interdependent elements, modules, classes, processes, tasks, and messages. The algorithms and the
configuration of the operating system used are maintained in a project. Projects consist of modules and
tasks. Modules contain several processes which are
specified within the module and scheduled for
execution in the tasks. Modules encapsulate several
class instances as objects. Each instance belongs to a
single class which contains the related methods.
Each module occurs only once in a project, whereas
classes may have several instances. Methods differ

343

Modelica 2006, September 4th  5th

C. Schlegel, R. Finsterwalder

from processes by containing arguments and return
values. Inter-process communication is done using
messages. Messages from different modules are
globally available, they are automatically routed according to matching names. All elements are kept in
a database to facilitate consistent handling and reuse.
Both classes and modules may be specified graphically using a block diagram editor or textually using
the built-in language ESDL (Embedded Software
Description Language), or using ANSI-C. All elements of Ascet contain implementation information
in order to handle target- or project-specific variants.
The implementation consists of the respective data
types, default values, ranges and quantization of values and memory-location information (RAM, ROM,
flash, etc.). Therefore C-classes and C-modules are
always implementation specific and treated accordingly in Ascet. The implementation information is
used for the automatic code generation. Its indispensable especially for generating code for specialized
embedded targets with fixed-point arithmetic.
An important part of the controller specification is
the interface definition of the controllers classes and
modules. The interface of a class consists of its public methods, their arguments and return values. The
interface of a module consists of its processes. Processes determine the activation of the modules functionalities, but unlike C-classes they do not define
inputs, outputs or parameters. Modules communicate
and interact via messages and global elements which
have to be specified explicitly.
In Ascets project editor the different processes,
tasks and the runtime environment (the built in realtime operating system Ercosek) can be configured.
There is also an experiment environment to run,
stimulate, calibrate and monitor the generated controller code. The control algorithm may run offline
on a PC, in real-time on a dedicated experiment
hardware and on several target processors used in
todays automotive control units.

3. Ascola
3.1 Overview

functionality, is based on full scale floating point
arithmetic (whats a target specific implementation
detail from Ascets point of view), and needs a specific task structure and a specific sampling rate,
which are defined in a project, not in a module.
Started in an Ascet project editor Ascola first reads
in the model specific C code generated by Dymola
(dsmodel.c), parses the variable definitions (input,
output, parameters, and initial states), and prepares
corresponding elements according to the Ascet conventions (data type, unit, comment, etc.). It then displays the basic model properties (number and type of
parameters, etc.), and asks the user for model and
parameter-update sampling rates and the integration
algorithm to choose (if not included in the model [6]
).
From this information an Ascet C-module with body,
header, and interface definition is automatically generated and inserted in the actual project. In addition
the necessary make information (compiler settings,
symbol definition, linking of model independent
utilities, etc.) is generated. The C-module is organized in four processes (initialization, simulation, parameter update and termination) which are assigned
to four dedicated tasks. Now the imported Dymola
model code can be used like any other module in an
Ascet experiment environment.
After having generated C-code from a Modelica
model Dymola is not needed any more neither for
the import procedure nor at runtime of the corresponding Ascet module, whats a major advantage
compared with cosimulation approaches. More over,
Dymola generated code can easily be passed to an
Ascet user without disclosure of model details because that code is very hard to read. If the Dymola
code is used in an offline experiment in Ascet even a
variable step integrator including event detection
may be used in that module, avoiding the necessity
to tune the simulation model for fixed step integration, what may be a major task if the model is stiff,
contains nonlinearities, state events, and / or causality changes (e.g. stick slip, hard stop, etc). This technique of encapsulating the integration algorithm
along with the simulation model (as a separate or an
inlined algorithm) is beneficial also in other simulation environments like Simulink (see e.g. [7] ).

According to the described structure of Ascet an imported C-code simulation model matches the properties of a C-module inserted in a project (not in a library), because it is unique, has an encapsulated
The Modelica Association

344

Modelica 2006, September 4th  5th

Ascola: A Tool for Importing Dymola Code into Ascet

3.2 Mapping of Modelica Models to Ascet

3.3 Implementation Aspects

Mapping of Modelica model properties to Ascet
comprises mainly two aspects: handling of data types
and plugging into the operating system environment.

Ascola is implemented in C++. In the current version
only the PC target is supported which is based on the
Borland C++-compiler.

Modelicas predefined data types (real, integer, boolean) containing values, units and comments fit quite
well to according Ascets data types (Ascet is limited
to scalars and arrays in one and two dimensions).
Therefore Ascola preserves the Modelica names,
units and comments. Ascets tabulated data types
(1D and 2D, several interpolation methods) containing axis and dependent values have no corresponding
data type built in Modelica (version 2.2.1, [3]). A
user defined Modelica data type would not help, because its structure cant be traced down in the Ccode generated by Dymola.

The complete model specific Dymola code is stored
in the Ascet database in order to avoid consistency
problems. Ascola supports several Dymola versions
(6.0 and higher) by providing version-specific header
files and corresponding function libraries.

Input and output are implemented as messages in
Ascet. Modelica variables with fixed causality are
mapped correspondingly. Because Ascet messages
are limited to scalars, fixed causality arrays in Modelica have to be serialized.
Since Ascet does not provide integrators which can
be used for C-modules they have to be added by Ascola, if not already included in the model (inline integration [4]). Despite the fixed I/O schedule (performed at a user defined rate) a variable step solver
may be used as mentioned in paragraph 3.1. In the
current version Ascola provides Euler and DASSL
(stiff solver, variable step [8]) as integrators.
Apart form initial and terminal sections Modelica
doesnt provide any keyword influencing the execution sequence of the generated code. Therefore there
are code parts executed once and other parts executed in a fixed schedule imposed by the controller
under test. This scheduling requirements end up with
the following task scheme:





initial task: model initialization (single shot)
step task: input, output, model evaluation (high
sampling rate)
parameter update (low sampling rate)
terminal task: model terminal section (single
shot)

The Modelica Association

4 Example
Figure 1 shows a simple vehicle model which is suitable for checking e.g. cruise control algorithms. Ascola is invoked from an Ascet project editor (menu
Dymola / Import C-code, see figure 2). After having
chosen the file to import Ascola shows the main
model properties (number and type of parameters,
inputs, and outputs) and import defaults (task names
and task timings for model code and parameter update) which may be overwritten by the user (figure
3). The different steps of the import procedure are
logged in Ascets monitor window (figure 4). After
the code import Ascets main window shows the interface elements of the generated C-code module:
names of the Modelica variables (with prefixes in_,
out_, and p_ for inputs, outputs and parameters) and
the corresponding Ascet properties (type, scope,
kind, dependency, etc.), see figure 5. In the OS tab of
the project editor the generated task configuration
settings are shown (figure 6). From the project editor
a simulation experiment may be invoked, figue 7
shows simulation results.

5 Future
For a future version its intended to support also Ascets rapid prototyping targets (based on PowerPC
[1]). This will facilitate model based control and
realtime simulations using Modelica models. Based
on user demand its further planned to make Dymola
generated C-code import also available for Intecrio,
Etas universal simulation tool [1].

345

Modelica 2006, September 4th  5th

C. Schlegel, R. Finsterwalder

[6]

6 References
[1]
[2]
[3]
[4]
[5]

[7]

www.etasgroup.com
www.mathworks.com
www.modelica.org
www.dynasim.se
C. Schlegel, Kopplung Dymola  Ascet, Technical report for BMW AG. Munich, 2003

[8]

Dymola 5.3 Users Manual, Dynasim AB,
Lund, Sweden. 2004
J. Khler, A. Banerjee, Usage of Modelica for
Transmission simulation in ZF. Proceedings
Modelica 2005, pp. 587-592
Brown, Hindmarsh, Petzold, BDF methods
with direct and preconditioned Krylov linear
solvers. SIAM J. Sci. Comp.: 15, 6, 1467
(1994) and 19, 5, 1495 (1998)

Figure 1: Simple vehicle model for checking cruise control algorithms

Figure 2: Invoking Ascola from an Ascet project editor
The Modelica Association

346

Modelica 2006, September 4th  5th

Ascola: A Tool for Importing Dymola Code into Ascet

Figure 3: Graphical user interface of Ascola

Figure 5: Ascet main window after model import

The Modelica Association

347

Modelica 2006, September 4th  5th

C. Schlegel, R. Finsterwalder

Figure 4: Ascola import messages in Ascet monitor

Figure 6: Operating system configuration for imported model

Figure 7: Vehicle acceleration simulation in Ascet (upper: engine and impeller speed, lower: vehicle speed
and actual gear)
The Modelica Association

348

Modelica 2006, September 4th  5th

An Analyzer for Declarative Equation Based Models

An Analyzer for Declarative Equation Based Models
JIAN-WAN Ding1 LI-PING Chen1 FAN-LI Zhou1 YI-ZHONG Wu1 GUO-BIAO Wang2
National CAD Support Software Engineering Research Center, Huazhong University of Science
and Technology, Wuhan 430074, China
2
National Natural Science Foundation of China, Beijing 100085, China

1

may in turn be connected to other models. For continuous time modeling, by assembling the declarative
Along with its benefits, object-oriented modeling equations of component models, this form of model
with Modelica language also brings the risk of miss- representation gives rise to a larger scale system of
ing or redundant equations, thus leads to an under- differential algebraic equations (DAEs).
constrained problem or an over-constrained problem. Along with its benefits, object-oriented modeling
This paper aims at facilitating debugging of structur- with Modelica language often unconsciously leads to
ally singular model through an analyzer in terms of an under-constrained problem or an over-constrained
reducing the number of tests to correct the model. problem. In such situations, numerical solvers fail to
When checking for singularities of a component, the find correct solutions to the underlying system of
analyzer first uses some fictitious equations to re- equations. Due to the high-level abstraction of equaplace the constraint equations generated by the out- tion based models, it is extremely hard to find and
side connections of the component, and then identi- localize model singularities. Moreover, especially for
fies whether the singularities derive from the com- complex physical systems, the underlying system of
ponent or not by structural analysis. The checking equations is of very large dimension. Even if a modprocedure is done recursively. The proposed ana- eler suspects a redundant equation, it is very timelyzer can automatically identify faulty components consuming to identify the equation in a large scale
that are responsible for the singularities.
system of equations. Therefore, it is a key problem to
Keywords: Modelica; debugging; structural analysis; check for the singularity of the model before using it
for analysis or design purposes, or before generating
structural singularity
the simulation code.
To address the aforementioned problem, Bunus and
Fritzson[1,2] have developed a debugging framework
1 Introduction
for Modelica models and have adapted traditional
The need for mathematical modeling and simulation debugging techniques and algorithms to it. Equations
in engineering is continuously rising since technical and variables that probably cause the irregularities
systems become increasingly complex and physical are isolated by applying graph decomposition techprototyping becomes too expensive. Modelica is an niques and reduced by using structural information
object-oriented equation based language for efficient and semantic information. The developed algorithms
modeling and simulation of complex, heterogeneous, and methods help to statically detect and repair a
multi-domain physical systems described by ordi- broad range of errors without having to execute the
nary differential and algebraic equations. Modelica simulation model.
allows describing simulation models in a declarative This paper focuses on checking for structural singuobject-oriented manner, so that a model can be used larities of equation based models. Our goal is to deto solve various problems and model components velop an analyzer, called Model Singularity Analyzer
easily can be modified to describe similar systems. (MSA), to help the modeler to localize model singuFollowing object-oriented modeling methodology, a larities more quickly and more efficiently.
Modelica model is structured as closely as possible The paper is organized as follows: Section 2 disto the corresponding physical system. In particular, cusses the three main steps of the MSA. The exammodels are defined in acausal form, independently of ples are demonstrated in Section 3. Section 4 gives a
the context in which it is used. Complex models can comparison of the MSA to existing methods. Section
be realized by aggregating more submodels and their 5 presents our conclusions.
connections within a composite larger model, which

Abstract

The Modelica Association

349

Modelica 2006, September 4th  5th

J.-W. Ding, L.-P. Chen, F.-L. Zhou, Y.-Z. Wu, G.B. Wang

2
2.1

turally singular, we check if the algebraic system
F ( x, x, t ) = 0 is structurally singular with respect to x.

Structural analysis
Detecting structural singularities

2.2

Before solving a Modelica model, the Modelica
source code is first translated into a so called flat
model, which is a flat set of equations, constants,
parameters and variables. For continuous time modeling, the flat model can be described by a system of
differential algebraic equations of the form
F ( x , x& , u, p, t ) = 0
(1)

where x is the variable vector, u is the input vector, p
is the parameter vector and t is time.
The system of equations resulting from a Modelica
model can naturally be represented as a bipartite
graph G = {V1 ,V2 , E} where V1 denotes the set of
equations, V2 denotes the set of variables, and there
is an edge e  E between a variable v  V2 and an
equation u  V1 if variable v appears in equation u.

When using a model for simulation, it is a basic requirement that there are as many equations as variables, and that we can determine a mapping between
equations and variables in such a way that each
equation is related one and only one variable. If the
requirement is satisfied, we call the model structural
nonsingularity. Otherwise, the mode is structurally
singular.
Therefore, a crucial step of checking for structural
singularities is to assign each variable vi to a unique
equation ej such that vi appears in ej. If it is impossible to pair variables and equations in this way then
the model is structurally singular. This assignment
procedure can be realized by calculating a perfect
matching in the bipartite graph associated with the
system of equations. If the perfect matching does not
exist then the corresponding system of equations is
structurally singular.
For a structurally singular model, we can isolate the
over-determined and under-determined subsets of
equations by the DM decomposition[4]. However,
when applied to a large system of equations, the DM
decomposition finds a large under-determined or
over-determined block, which is less helpful for localizing the structural singularities, so methods to
help are necessary.
To check for structural singularities of DAE systems,
we should not distinguish between the appearance of
x and the appearances of its derivative, the appearances of x& are considered as appearances of x. Thus
to check if the DAE system F ( x, x& , t ) = 0 is struc-

The Modelica Association

Generating fictitious equations

A complete Modelica model is always made up of
components, which maybe consist of other subcomponents. For a composite model, the structural
singularities may be caused by improper use of components, or come from structurally singular components. So if a composite model is structurally singular, we should check for structural singularities of its
components to determine whether the singularities
comes from its components or not.
However, a component of a model always has outside connections to communicate with the rest of the
model. If we isolate a component from the environment where it is used, and check for structural singularities of the component, we can not determine
which connection equations generated by outside
connections should be included into the system of
equations resulting from the component. The reason
is connections between components are often acausal,
i.e., the data flow in connection is not explicitly
specified.
The object-oriented modeling methodology uses energy flow for modeling[5,6]. It is necessary for the
modeler, when designing model interfaces, to guarantee that connecting such models in an arbitrary
fashion will always ensure that power, momentum,
and mass are balanced at the interfaces. This means
that the sum of incoming energy flows must equal
the sum of outgoing energy flows at connection
points. Hence, acausal connections in Modelica
models in fact are a kind of connection based on energy flow.
Therefore, when checking for structural singularities
of components, we disregard the connection equations generated by outside connections, and use some
fictitious equations to compensate the lost constraints
in the following way.
1. We generate a fictitious equation for each flow
variable and make the equation contain all variables
appearing in the same connector with the flow variable.
2. We generate for each input variable a fictitious
equation which assigns a value to the corresponding
input variable.
3. Potential variables may be more than flow variables in a connector. In such case, we assume some
outside constraints on these redundant potential variables. To construct the most general constraint, we
generate a fictitious equation for each redundant po-

350

Modelica 2006, September 4th  5th

An Analyzer for Declarative Equation Based Models

tential variable, and make these equations contain all
potential variables of all the connectors. Let C denote a model component, k be the number of the fictitious equations added for the redundant potential
variables, r be the number of connectors of C, mi be
the number of potential variables in the ith connector,
ni be the number of flow variables in the ith connector, p be the number of variables of C, and q be the
number of equations of C. There is the following
dependence:
r

k = 0 , if p  (q +  ni ) < 0 ;
i =1

r

k = p  (q +  ni ) , if
i =1
r

r

i =1

i =1

0  p  (q +  ni )   (mi  ni ) ;
r

2.3

r

r

i =1

i =1

k =  ( mi  ni ) , if p  ( q +  ni )   (mi  ni ) .
i =1

Where

r

n

i

is the number of fictitious equations

i =1

added for flow variables.
The aim of case 1 is to construct a general energy
flow constraint equation. To explain the idea, we
first define a generic physical connector class as follows:
connector generic
Real e;
//potential variable
flow Real f; //flow variable
end generic;
We assume c1 and c2 are two instances of the connector class generic. According to Modelica semantics, the connection connect(c1, c2) produces two
equations, namely: c1.e=c2.e and c1.f+c2.f=0. From
this two connection equations, we can get c1.e*c1.f+
c2.e*c2.f =0. We further assume c1.e*c1.f=C, where
C is a constant, then c2.e*c2.f=C. Since we only
focus on which variables appear in each equation
rather than how they appear when checking for structural singularities, we can use the general form equations f1(c1.e, c1.f)=0 to express c1.e*c1.f=C, and
f2(c2.e,c2.f)=0 to express c2.e*c2.f=C. However,
there are sometimes more than one matched flow
variable and potential variable in a connector. Hence,
without loss of generality, we generate for each flow
variable a general form equation which contains all
flow and potential variables of a connector, i.e.,
g(e1,e2,,f1,f2,)=0, where fi(i=1,2,) is flow
variable, ei(i=1,2,) is potential variable.

The Modelica Association

The fictitious equations generated for flow variables
can be regarded as constraint equations about power,
momentum, and mass which passes connectors. This
is because that, in any physical system, the power
can be written as the product of two adjugate variables, called the potential and the flow in Modelica
language. For example, in electrical systems the
power P=v*i where v denotes the voltage and i denotes the current, and in translational mechanical
systems the momentum P=v*f where v denotes the
velocity and f denotes the force.
By generating fictitious equations, we can obtain the
system of equations resulting from a component. By
checking for structural singularities of the system of
equations, we can determine that the component is
structurally singular or not.
Locating faulty components

A connector can be connected, and also be not connected. When checking for singularities of a component, two possibilities are considered. It is noticed
that, once a connector is assumed to be not connected, all other connectors of the same component
are considered to be connected. If a connector is assumed to be not connected, the fictitious equations
for flow variables of the connector are not generated,
instead flow variables are set to zero.
If a structurally singular component is make up of
subcomponents, the checking procedure can be done
recursively, until the fault component is a primitive
component, or each subcomponent of the fault component is structurally nonsingular.
For that, we introduce the following definition.
Definition 1. Let C be a structurally singular component. C is a minimal structurally singular (MSS)
component if either of the following two conditions
is satisfied:
1. C is a primitive component described in terms of
equations;
2. C is a composite component consisting of other
connected subcomponents, and none of its subcomponents is structurally singular.
We therefore propose the following strategy for locating structural singularities in Modelica models.
Our aim is to locate all the MSS components of a
structurally singular model. First, we check whether
a perfect matching exists or not in the bipartite graph
associated with a whole model. This can be done by
solving the maximum matching problem[7,8]. If a perfect matching does not exist, we apply the DM decomposition to isolate the over-determined and under-determined subsets of equations. Then we check

351

Modelica 2006, September 4th  5th

J.-W. Ding, L.-P. Chen, F.-L. Zhou, Y.-Z. Wu, G.B. Wang

if C is composite then
begin
let K be a component set;
set K :=P(C);
if K=  then
add C to S;
else
add each element of K to the end
of L;
end
else
add C to S;
end

for structural singularities of each component in turn
to determine whether the singularities derive from
the component or not. So it is very natural to consider the following subproblem procedure.
Procedure P(C)
Input: a structurally singular component C
Output: the structurally singular subcomponent set
T
begin
set T :=  ;
let Q be a subcomponent set; set Q :=  ;
add the subcomponents of C to Q;
for each C' Q do
begin
generate fictitious equations for C';
obtain the system of equations E of C';
construct the bipartite graph G for E;
determine a maximum matching W in G;
if W is not perfect then
add C' to T;
end
end
By performing the above subproblem procedure, we
can obtain all the singular subcomponents of a singular component, if they exist. For each singular subcomponent, we further perform the above procedure
to obtain its singular subcomponents. This procedure
is performed iteratively until the singular subcomponent is a MSS component. Clearly, the recursive application of the above procedure can construct a tree
of subproblems. By using the depth first rule, we
obtain our algorithm which outputs all the MSS
components of a structurally singular model. The
algorithm is described as follows:
Algorithm 1: Obtaining the MSS components
Input: a structurally singular component M
Output: the MSS components set S
begin
set S :=  ;
if M is composite then
begin
let L be the list of components;
set L :=P(M);
while L is not empty do
begin
let C be the last component in L;
remove C from L;
The Modelica Association

end
else
add M to S;
end
Finally, for each MSS component it is desirable to
give the user some hints what is wrong. If a MSS
component is a composite component, we inform the
user that some subcomponents of the MSS component may be improperly used. If a MSS component is
a primitive component, we produce some hints by
locating critical parts of the component that are responsible for singularities. For an over-constrained
problem, the redundant equations must appear in
both the over-determined subset and the MSS component. Similarly, for an under-constrained problem,
the free variables must appear in both the underdetermined subset and the MSS component.

3

Examples

The first example is an oscillator model depicted in
figure 1. A mass Ma is hanging in a spring Sa which
is connected to a fixed housing Fa. The mass Ma is
subject to the gravitational force and the force from
the spring. It is given an initial position s = 0.5,
which is offset from the equilibrium position and
therefore starts an oscillating movement up-anddown. The positive coordinate direction is upward in
the figure, which applies to both positions and forces.
The Modelica description of the oscillator is presented as follows:
model Oscillator
Mass Ma(L=1, s(start=-0.5));
Spring Sa(s_rel0=2, c=10000);
Fixed Fa(s0=1.0);
equation

352

Modelica 2006, September 4th  5th

An Analyzer for Declarative Equation Based Models

connect(Sa.flange_b, Fa.flange_b);
connect(Ma.flange_b, Sa.flange_a);
end Oscillator;

e11: Fa.flange_b.s=Fa.s0
e12: Ma.flange_b.s=Sa.flange_a.s
e13: Ma.flange_b.f+Sa.flange_a.f=0
e14: Fa.flange_b.s=Sa.flange_b.s
e15: Fa.flange_b.f+Sa.flange_b.f=0
e16: Ma.flange_a.f=0

v13: Sa.flange_b.f
v14: Fa.flange_b.s
v15: Fa.flange_b.f

Performing the DM decomposition, the overconstrained subgraph is found and represented
graphically in figure 2, where the covered edges by
the maximum matching are marked by thick lines.
e1 e2 e3 e4 e6 e7 e8 e9 e11 e12 e13 e14

Figure 1. The oscillator Model
The component model Spring and Fixed are available in Modelica class libraries. The definition of the
component model Mass is presented as follows:
model Mass
extends Rigid;
parameter Real m =1;
constant Real g =9.81;
Real v;
Real a;
equation
v = der(s);
a = der(v);
flange_b.f = m*a  m*g;
v = 6;
//an additional equation
end Mass;
In order to obtain an over-constrained problem, we
introduce an additional equation (v=6) in the model
Mass. The set of equations generated from the Oscillator model is presented in table 1.
Table 1. The set of equations and variables corresponding to the Oscillator model
e1: Ma.v = der(Ma.s)
e2: Ma.a = der(Ma.v)
e3: Ma.flange_b.f=Ma.m*Ma.a
-Ma.m *Ma.g
e4: Ma.v=6
e5: Ma.flange_a.s=Ma.s-Ma.L/2
e6: Ma.flange_b.s=Ma.s+Ma.L/2
e7: Sa.f=Sa.c*(Sa.s_rel-Sa.s_rel0)
e8: Sa.s_rel=Sa.flange_b.s
-Sa.flange_a.s
e9: Sa.flange_a.f=-Sa.f
e10: Sa.flange_b.f=Sa.f

The Modelica Association

v1: Ma.s
v2: Ma.v
v3: Ma.a
v4: Ma.flange_a.s
v5: Ma.flange_a.f
v6: Ma.flange_b.s
v7: Ma.flange_b.f
v8: Sa.s_rel
v9: Sa.f
v10: Sa.flange_a.s
v11: Sa.flange_a.f
v12: Sa.flange_b.s

v1 v2 v3 v6 v7 v8 v9 v10 v11 v12 v14
Figure 2. The over-constrained subgraph

When check for structural singularities of the component Ma, we first assume that both the connectors
flange_a and flange_b are connected, and generate
e1': f(Ma.flange_a.f, Ma.flange_a.s)=0 for the flow
variable Ma.flange_a.f and e2': f(Ma.flange_b.f, Ma.
flange_b.s)=0 for the flow variable Ma.flange_b.f.
The corresponding bipartite graph to the component
Ma is shown in figure 3, where a maximum matching is marked by thick lines.
e1

e2

e3

e4

e5

e6

e1'

v1

v2

v3

v4

v5

v6

v7

e2'

Figure 3. The bipartite graph corresponding to the
component Ma with a maximum matching

In figure 3, e3 is a free vertex, so the component Ma
is structurally singular, and there exists one redundant equation. It means the primitive component Ma
is a MSS component. The equations that appear in
both the over-constrained subgraph and the component Ma are e1, e2, e3, e4 and e6, one of which is
redundant. Similarly, by generating fictitious, we can
determine the components Sa and Fa are structurally

353

Modelica 2006, September 4th  5th

J.-W. Ding, L.-P. Chen, F.-L. Zhou, Y.-Z. Wu, G.B. Wang

nonsingular. In this case, the following message is
presented to the modeler.

Ground G1;
equation
connect(Vs.p, Ra.p);
Error: The model Oscillator is structurally singular.
The singularity comes from the component Ma.
connect(Ra.n, La.p);
There is 1 redundant equation in the equations:
connect(La.n, Emf.p);
v = der(s);
connect(Emf.flange_b, Jm.flange_a);
connect(Emf.n, G1.p);
a = der(v);
connect(Vs.n, G1.p);
flange_b.f = m*a- m*g;
end ACMotor;
v = 6;
The component models Inductor, EMF, Inertia and
flange_b.s = s+L/2;
Ground are available in Modelica class libraries. In
order to make the ACMotor singular, the following
Figure 4. The error message for the model Oscillator
Resistor model is defined.
The second example is an AC motor model depicted
in figure 5. This model contains components from model Resistor
extends OnePort;
the two domains: mechanical domain and electrical
parameter Real R=1;
domain.
Real s;
equation
R*i = v+s;
p.v=12;
end Resistor;
The complete set of equations (shown in Table 2)
generated from the ACMotor class consists of 37
differential algebraic equations and 37 variables.
This is a structurally singular problem where underconstrained and over-constrained situations appear
simultaneously. The DM decomposition will find the
Figure 5. The AC motor model
over-constrained, well-constrained and under conThe Modelica description of the ACMotor model strained subgraphs. The over-constrained subgraph
appears as follows:
contains equations e1, e4, e9, e20, e29, e30 and e37,
model ACMotor
and variables v1, v3, v5, v7, v25 and v29. The wellconstrained subgraph contains equation e33 and
SineVoltage Vs(V=220,freqHz=50);
variable v34. All other equations and variables are
Resistor Ra(R=0.5);
contained in the under-constrained subgraph. BeInductor La(L=0.1);
cause of space limitation, the over-constrained and
EMF Emf;
under-constrained subgraphs are not depicted here.
Inertia Jm(J=0.001);
Table 2. The set of equations and variables corresponding to the AC motor model
e1:Vs.v = Vs.p.v-Vs.n.v
e2: 0 = Vs.p.i+Vs.n.i
e3: Vs.i = Vs.p.i
e4: Vs.v = Vs.V*sin(2*Vs.PI*Vs.freqHz *time)
e5: Ra.v = Ra.p.v-Ra.n.v
e6: 0 = Ra.p.i+Ra.n.i
e7: Ra.i = Ra.p.i
e8: Ra.R*Ra.i = Ra.v+Ra.s
e9: Ra.p.v = 12
e10: La.v = La.p.v-La.n.v
e11: 0 = La.p.i+La.n.i
e12: La.i = La.p.i
e13: La.L*der(La.i) = La.v

The Modelica Association

354

v1: Vs.p.v
v2: Vs.p.i
v3: Vs.n.v
v4: Vs.n.i
v5: Vs.v
v6: Vs.i
v7: Ra.p.v
v8: Ra.p.i
v9: Ra.n.v
v10: Ra.n.i
v11: Ra.v
v12: Ra.i
v13: Ra.s

Modelica 2006, September 4th  5th

An Analyzer for Declarative Equation Based Models

e14: Emf.v = Emf.p.v-Emf.n.v
e15: 0 = Emf.p.i+Emf.n.i
e16: Emf.i = Emf.p.i
e17: Emf.w =der(Emf.flange_b.phi)
e18: Emf.k*Emf.w = Emf.v
e19: Emf.flange_b.tau = -Emf.k*Emf.i
e20: G1.p.v = 0
e21: Jm.w = der(Jm.phi)
e22: Jm.a = der(Jm.w)
e23: Jm.J*Jm.a = Jm.flange_a.tau+Jm.flange_b.tau
e24: Jm.flange_a.phi = Jm.phi
e25: Jm.flange_b.phi = Jm.phi
e26:Jm.flange_a.phi=Emf.flange_b.phi
e27: Emf.flange_b.tau+Jm.flange_a.tau = 0
e28: Emf.n.i+G1.p.i+Vs.n.i = 0
e29: G1.p.v = Emf.n.v
e30: Vs.n.v = Emf.n.v
e31: Emf.p.i+La.n.i = 0
e32: La.n.v = Emf.p.v
e33: Jm.flange_b.tau = 0
e34: La.p.i+Ra.n.i = 0
e35: Ra.n.v = La.p.v
e36: Ra.p.i+Vs.p.i = 0
e37: Vs.p.v = Ra.p.v

When check for structural singularities of the component Ra, if we assume the connector p is connected and the connector n is not connected, we can
determine that Ra is structurally singular. The bipartite graph corresponding to Ra is presented in figure
6, where e1':f(Ra.p.v, Ra.p.i)=0 is the fictitious equation generated for flow variable Ra.p.i, and e2':
Ra.n.i=0 is used to set flow variable Ra.n.i to zero.
e5

e6

e7

e8

e9

v7

v8

v9 v10 v11 v12 v13

In this case, only the equation e9 appears in both the
over-constrained subgraph and the component Ra.
The variables that appear in both the underconstrained subgraph and the component Ra are v8,
v9, v10, v11, v12 and v13. For this model, the error
message is presented in figure 7.
Error: The model ACMotor is structurally singular.
The singularity comes from the component Ra.
There is 1 redundant equation in the equations:
p.v=12;
1 equation is missing for the variables:
p.i;
n.v;
n.i;
v;
i;
s;

e1' e2'

Figure 6. The bipartite graph corresponding to the
component Ra with a maximum matching

Figure 7. The error message for the model ACMotor

In figure 6, e6 and v11 are free vertices, so the primitive component Ra is a MSS component. All other
components of the model ACMotor are structurally
nonsingular.

The Modelica Association

v14: La.p.v
v15: La.p.i
v16: La.n.v
v17: La.n.i
v18: La.v
v19: La.i
v20: Emf.v
v21: Emf.i
v22: Emf.w
v23: Emf.p.v
v24: Emf.p.i
v25: Emf.n.v
v26: Emf.n.i
v27: Emf.flange_b.phi
v28: Emf.flange_b.tau
v29: G1.p.v
v30: G1.p.i
v31: Jm.flange_a.phi
v32: Jm.flange_a.tau
v33: Jm.flange_b.phi
v34: Jm.flange_b.tau
v35: Jm.phi
v36: Jm.w
v37: Jm.a

The third example is a modified AC motor depicted
in figure 8, where the motor contains two ground
points instead of one. The Modelica description of
the modified motor model appears as follows:
model ModifiedMotor

355

Modelica 2006, September 4th  5th

J.-W. Ding, L.-P. Chen, F.-L. Zhou, Y.-Z. Wu, G.B. Wang

SineVoltage Vs(V=220,freqHz=50);
Resistor Ra(R=0.5);
Inductor La(L=0.1);
EMF Emf;
Inertia Jm(J=0.001);
Ground G1;
equation
connect(Vs.p, G2.p);
connect(Ra.p, G2.p);
connect(Ra.n, La.p);
connect(La.n, Emf.p);
connect(Emf.flange_b, Jm.flange_a);
connect(Emf.n, G1.p);
connect(Vs.n, G1.p);
end ModifiedMotor;
All the component models of the model ModifiedMotor are available in Modelica class libraries.

Figure 8. The AC motor with two ground points
The modified motor model also leads to a structurally singular problem where under-constrained and
over-constrained situations appear simultaneously.
When checking for structural singularities, all the
components are determined to be structurally nonsingular. So the top model ModifiedMotor is the
MSS component.
In this case, the singularities are caused by improper
use of components. To correct the model, one should
remove the redundant ground point G2 instead of
some equations and variables. Hence, for this model
the following message is presented.
Error: The model ModifiedMotor is structurally
singular.
The singularity may be caused by improper use

of the components.
Please check whether the components are used
properly or not.
Figure 9. The error message for the modified motor

The Modelica Association

4

Comparison

The three examples presented in Section 3 illustrate
that the MSA can automatically identify fault components and localize model singularities. It is very
useful for the modeler to correct singular models.
For a complex singular model, it is advisable to localize model singularities in such a way.
Currently, there are only a few methods that can help
the modeler to debug singular equation-based models.
For the first and the second examples, the method
proposed in [1,2] is helpful, and can present efficient
messages. However, for the third example where the
singularities are not caused by equations and variables, the method can not deal with it. Moreover, it
may be less efficient to debug complex models only
by using structural information and semantic information.
If a structurally singular problem is caused by an
over-constrained or under-constrained component,
Dymola can identify such singular components. For
the first example, Dymola can find the faulty component Ma and give the modeler efficient message.
For the second example, Dymola does not find the
faulty component Ra and considers the singularity is
at the top level, and only informs the modeler that
there is 1 one equation too many in a set of 7 equations and that 1 equation is missing for a set of 33
variables. For the third example, Dymola also consider the singularity is at the top level, and inform
the modeler that there is 1 one equation too many
and that 1 equation is missing, so the presented message is less helpful.

5

Conclusions

In this paper we have discussed an analyzer for declarative equation-based models. The examples presented in Section 3 are all quite trivial. However,
they illustrate that it is possible to identify faulty
components of a structurally singular model. From
the modelers point of view, the MSA is very beneficial because it can make correcting structurally singular models more quickly by automatically identifying faulty components and providing efficient error
messages to show what is wrong.
The proposed techniques and strategies are also suitable for other object-oriented equation based modeling languages and not only for Modelica.

356

Modelica 2006, September 4th  5th

An Analyzer for Declarative Equation Based Models

Acknowledgement
This work was supported by the National Natural
Science Foundation of China (Grant No. 60574053),
the National High-Tech Development 863 Program
of China (Grant No. 2003AA001031), and the National Basic Research 973 Program of China (Grant
No. 2003CB716207).

References
[1]

[2]

[3]

[4]

[5]

[6]

[7]

[8]

Bunus P, Fritzson P. Automated static analysis of equation-based components. Simulation: Transactions of the Society for Modeling and Simulation International, 2004,
80(8):321-345
Bunus P. An empirical study on debugging
equation-based simulation models. In Proceedings of 4th International Modelica Conference, Hamburg, Germany, 2005
Asratian A S, Denley T, Hggkvist R. Bipartite Graphs and their Applications, Cambridge University Press, 1998
Dulmage A L, Mendelsohn N S. Coverings
of bipartite graphs. Canadian Journal of
Mathematics, 1963, 10:517-534
Cellier FE, Elmqvist H, Otter M. Modeling
from Physical Principles. The Control Handbook, CRC Press, pp.99-108
Fritzson P. Principles of object-oriented
modeling and simulation with Modelica 2.1,
IEEE Press, 2003
Hopcroft J E, Karp R M. An n5/2 algorithm
for maximum matchings in bipartite graphs.
SIAM Journal of Computing, 1973, 2(4):
225-231
Uno T. Algorithms for enumerating all perfect, maximum and maximal matchings in
bipartite graphs. In Lecture Note in Computer Science 1350, Springer-Verlag, 1997,
pp. 92-101

The Modelica Association

357

Modelica 2006, September 4th  5th

J.-W. Ding, L.-P. Chen, F.-L. Zhou, Y.-Z. Wu, G.B. Wang

The Modelica Association

358

Modelica 2006, September 4th  5th

Engineering Design Tool Standards and Interfacing Possibilities to Modelica Simulation Tools

Engineering Design Tool Standards and Interfacing Possibilities to
Modelica Simulation Tools
Olof Johansson, Adrian Pop, Peter Fritzson
PELAB  Programming Environment Lab, Dept. Computer Science
Linkping University, S-581 83 Linkping, Sweden
{olojo,adrpo,petfr}@ida.liu.se

Abstract
This paper briefly describes some international standards used for engineering design tools that precede
simulation in the product development process. Very
much information in such design tools can be reused
when developing Modelica simulation models. Examples are product structures, component parameters, and
component connection information.
The Modelica Standard Library (MSL) with the latest version 2.2.1 has grown significantly the last years.
An analysis of the contents of MSL is provided, and a
classification method described to ease the work of
mapping structures, component parameters and connections in engineering design tools such that their information content can be reused for development of Modelica simulation models.
ModelicaXML has been upgraded to support Modelica 2.2, and is briefly described as one of the most
promising intermediate formats for exchange of models
between engineering design tools and Modelica simulation tools.

1 Introduction
Modelica is currently the most promising language for
developing integrated simulation models of power
plants that cover the process-, electrical- and control
system aspects. Today such integrated simulation models of a whole power plant are in practice not possible
to develop at reasonable costs, because of the lack of
compatible interoperating standards.
Currently plant industry struggles with classification
standards for electronic data exchange of plant models.
When this struggle has settled on a reasonable set of
working standardized solutions, one coming large standards struggle will be in exchange of simulation models
for power plants, subsystems, and components provided by the supply chain. Integrated simulation mod-

The Modelica Association

els can provide significant added value to the current
engineering systems during the whole life cycle of a
power plant.
This paper outlines a path to bridge the gap between
different standardized engineering languages supported
by commercial engineering tools and Modelica simulation tools.

2 Contents of International Standards
for Engineering Design Tools
ISO, IEC, DIN and VGB provide standards for the
power plant industry, which are supported by commercial engineering tools for power plant system design.
These standards apply to:
1)
2)
3)
4)
5)

Structures and designation systems
Symbols on graphical diagrams
Document classification
Component classification
Electronic information exchange
Figure 1.

Standardized Plant Model Features

The systems engineering [2] of a power plant is usually
divided into:
1) Process Engineering
2) Electrical Engineering
3) Control Systems Engineering
Figure 2.

Engineering Disciplines

Each of these engineering disciplines has their special
views on a product model of a power plant, which often
follow an international standard.
A designation system standard specifies how to
name an object in the plant, and how to refer to it with
relative names on printed documentation like diagrams
and data listings. Power plant designation system stan-

359

Modelica 2006, September 4th  5th

O. Johansson, A. Pop, P. Fritzson

dards like KKS [27] and IEC 61346 [13] provide three
major aspects:
1) Function aspect  the function and functional organization of a modeled system
2) Location aspect  the physical locations of
subsystems and components
3) Product aspect  the assembly structure of
the system implementation
Figure 3.

Major aspects

3.1

Process Diagrams

A Process and Instrumentation Diagram (P&ID) shows
what function the pump has in the lubrication oil system. The P&ID is developed by process engineers, and
is part of the function aspect of the plant. The symbols
on the P&ID are standardized (e.g. acc to DIN 2481 or
ISO 14617), and the P&ID belongs to a standardized
document class (acc to IEC 61355). The designations
of objects on the P&ID are standardized according to
KKS.

The same modeled object (e.g. a pump, or electrical
motor) participates in all these aspects, but provides
different types of component related information in
each of them. Each aspect has its own structure, so it is
possible to navigate to an object using a functional
structure, then change to the location aspect and find
out where it is located in the plant.
The functional aspect contains most relevant information for Modelica simulation models. However, the
location aspect, together with geometric layout drawings, provide additional parameter information like the
length of pipes, positions with regards to height,
lengths of electrical cables to calculate losses due to
resistance, etc.

3 Illustration Example
This section illustrates the contents of standardization
listed in Figure 1 to Figure 3.

Figure 5.

Figure 4.

Aspects on a lubrication oil pump

Figure 4 shows a pump object in a plant product model
database, and how this objects information is made
available in various standardized document views in an
engineering design system. More specifically it is a
centrifugal oil pump immersed in the oil tank. This
pump is driven by an electrical motor on the top of the
oil tank.

The Modelica Association

Detail from P&ID

Figure 5 shows a part of the P&ID in detail. The KKS
standard for the structure and designation system decides the name of the different objects on the P&ID.
The designation of the pump is MBV21 AP005. This
standardized designation tells that the pump is a part of
a lubrication system (KKS Function Key MBV), and
that it is a pump (KKS Equipment Unit Key AP). When
the designation is printed on a Process List with adjacent parameter data, a user can directly infer from its
name that it is a pump within a lubrication system.
The complete KKS designation of the electrical motor is MBV21 AP005 M01, which tells that it is an
electrical motor (KKS Component Key M), which is
mounted on the pump equipment unit.
Similarly, the standardized graphical shape of the

360

Modelica 2006, September 4th  5th

Engineering Design Tool Standards and Interfacing Possibilities to Modelica Simulation Tools

symbols and their KKS designations provide information like: MBV21 CP005 represents a pressure measurement instrument, MBV21 BP005 a flow restrictor,
MBV21 AA010 a non-return valve, MBV21 BR005 a
pipe where the flag is oriented in the direction of the
flow. The symbols are all according to DIN 2481,
which is mostly compatible with the more modern and
extendable process symbol standard ISO 14617.

3.2

Process Lists and Data Sheets

Back to Figure 4, different types of process lists provide selected parameter data from all components
within the lubrication system. These are used for various process engineering purposes. A component class
specific data sheet collects all parameter data for the
pump object in one document. The data sheet may be
used as information supply by several engineering disciplines.
A pump belongs to a certain class (e.g. the KKS
Equipment Unit Key AP), which tells what class specific attributes should be available to fill in on data
sheets or display on listings. Different component classification standards (e.g. IEC 61346-2) may organize
the classification of objects in other ways. For historical reasons different tool vendors and engineering
companies have had to invent their own component
classification standards, to provide the necessary functionality for entering parameter data. This is what the
big struggle towards common classification standards is
all about.

3.3

3.4

A complete plant installation contains several thousands of objects, and there is a large number of P&IDs,
circuit diagrams, lists and data sheets. These documents
must be organized into structures to be easy to find. A
document classification standard is used for identification and searching for different kinds of document
types. More specifically each document class has a
document kind classification code (DCC), whose lettering and format is determined by IEC 61355.

4

International Standards for Engineering Design Tools

In the following a number of standards will be described according to the structuring introduced in section 2, and brief comments given.

4.1

Structures and Designation Systems

Process and Electrical design

Electrical Diagrams, Lists, and Data Sheets

To proceed with another engineering discipline, with its
own aspects in Figure 4, the circuit diagram shows how
the power to the electrical motor is connected through
protection devices, and how a built-in termistor for
temperature measurement is connected through various
terminal boxes. Other circuit diagrams show how the
wires, identified by their reference designations finally
end up at an IO card in the control system. Circuit diagrams are developed by electrical engineers and follows IEC 61082 which provides general guidelines of
what information to present in electrical documents. A
specific standard IEC 60617 specifies the graphical
appearance of the symbols.
Various electrical lists, for example cable tables,
connection tables for wires etc., provide connection
information. Other electrical lists provide subsets of
parameter data from different electrical devices. The
overall course classification of electrical devices, which
in turn determines what attributes should be available
follows IEC 61346-2, or now obsolete standards like
IEC 750.
The Modelica Association

Document Classification

361

 KKS  "Kraftwerk Kennzeichen System" [22]-[28]
is divided into two parts. 1) KKS Rules [25],[27]
and 2) KKS Application Commentaries [26],[28]. 2)
shows examples of how to designate (give a name
to) engineering objects in different disciplines like
Process, Electrical and Control systems engineering.
1) describes how the designation system is organized, and provides 3 listings of classification keys
and their descriptions.
 Function Keys  3 letter hierarchical classification
of system functions within a plant. Examples:
Level 1: M Main machine sets, Level 2: MB Gas
turbine plant, Level 3: MBV Lubricant supply
system. There are about 800 standardized keys
with many letter code series on level 3 left open
for company- or project specific standardization.
 Equipment Unit Keys  2 letter hierarchical classification of equipment unit functions. Examples:
Level 1: A Mechanical equipment; C Direct
measuring circuits. Level 2: AP Pump units; AC
Heat exchangers, heat transfer surfaces; CP
Pressure. About 130 standardized keys.
 Component Keys  2-letter hierarchical classification of component functions. Examples: Level 1:
- Electrical components; K Mechanical components. Level 2: -M Motors; KA Gate valves,
globe valves, dampers, cocks, rupture disks, orifices. About 90 standardized keys.
 IEC 61346 - Industrial systems, installations and
Modelica 2006, September 4th  5th

O. Johansson, A. Pop, P. Fritzson

equipment and industrial products  Structuring
principles and reference designations [13]-[17].
Provides a framework for a designation system with
similar functionality as KKS. IEC 61346-2 [15]
standardizes a 1 letter functional classification system for components that can be extended with appended letters for more specific subclasses according to industrial branch, company or project specific
standards. Examples: Level 1: M Drive, act; Q
Open, close, vary; R Restrict flow or motion; W
Guide; X Connect. The classification letters can be
used in the component designations to indicate the
class of the object.
 IEC 61082 - Preparation of documents used in electro technology [31]-[35] provides very general rules
and guidelines for electrical documents like circuit
diagrams, electrical tables and lists. It establishes a
kind of minimum criteria for documents suitable for
electrical engineering purposes and gives much
freedom to tool developers.

4.2

Symbols on Graphical Diagrams

Process design:
 DIN 2481 Thermal Power Generating Plants,
graphical symbols [29]  provides a library of
graphical symbols with description, identification
code and short application examples. Contains
commonly used process design symbols.
 DIN 1219 Fluid Power systems and components
[30]  provides a library of graphical symbols of
which a subset complements DIN 2481 for process
design, with regards to hydraulically operated valve
arrangements for steam inlets etc.
 ISO 14617 Graphical symbols for diagrams - Part 115 [52]-[67] - The best engineered graphical symbols standard available today for process design. A
major benefit compared to other standards is its
consistency and extensibility. By reusing existing
standardized graphical symbols and following the
standardized application rules, new symbols can be
assembled that still conform to the standard.
Electrical design:
 IEC 60617 Graphical Symbols for Diagrams online database [50]  The most comprehensive
standard library of electrical symbols. Symbols are
built from standard primitive symbols. They are annotated with a function class according to IEC
61346-2. The on-line database succeeds the original
document release of IEC 617 [36].
 ISO 14617  See above. Sometimes it is necessary
to draw symbols of process equipment on circuit
diagrams to adequately specify the circuit function.
The Modelica Association

Control system design
 IEC 61131-3 Programmable controllers - Part 3:
Programming languages [51]  provides a textual
and graphical language that consists of programs,
function blocks and configuration elements. Configuration elements are configurations, resources,
tasks, global variables, access paths, and instancespecific initializations, which support the installation of PLC programs into programmable controller
systems. The function block diagram (FBD) is a
graphic language for PLC programming which is
consistent, as far as possible, with IEC 60617-12
Binary logic elements [48].
4.3

Document Classification

All engineering disciplines:
IEC 61355 Classification and designation of documents for plants, systems, and equipment  provides
document kind classification codes (DCCs) which is
based only on the content of information in the document. It also provides a document designation system
that starts with the designation of the object that the
document describes (e.g. a KKS or IEC 61346 designation), adds a "&" and the DCC to create the unique
document designation.
DCC Examples: FB103 Piping and instrument diagram (P&ID); FS101 Circuit diagram.
The general DCC format is A1 A2 A3 NNN, where
the code letter A1 is an optional identifier for the technical area1, A2 and A3 hierarchical classification codes,
and NNN a document kind counting number for company or project specific standardization.
The code letter A2 may be:
A Documentation-describing documents
B Management documents
C Contractual and non-technical documents
D General technical information documents
E Technical requirement and dimensioning documents
F Function-describing documents
L Location documents
M Connection-describing documents
P Product listings
Q Quality management documents; safetydescribing documents
T Geometry-related documents
W Operation records

1

362

E.g. A1 = P Process engineering, E Electrotechnology
Modelica 2006, September 4th  5th

Engineering Design Tool Standards and Interfacing Possibilities to Modelica Simulation Tools

The code letter A3 provides a subclass to A2.

4.4

Component Classification

Process design:
 KKS Equipment Unit and Component keys  see
Section 4.1
Electrical design:
 IEC 61346-2 see section 4.1.

4.5

Such a framework stays stable and working for a large
fleet of integrated continuously operating e-business
systems, which must remain operational over successive upgrades of the standard library. Such issues must
be taken into consideration already in the standard,
since it may take several years before all integrated
systems have upgraded to a new standard library release.

5

Information Exchange

The following international classification standards are
primarily developed for conducting e-business. However, a signification fraction of these standards are applicable to simulation models.

An analysis of Modelica Standard Libraries (MSL) version 1.5, 2.1, 2.2 and 2.2.1 gives the following results:
MSL Version:
Source files
Imports
Definitions
Components
Equations
Algorithms

 IEC 61360 Standard data element types with associated classification scheme for electric components
[19]  The first sustainable engineered international
standard for information exchange.
 ecl@ss [21]  a non-profit organization of German
origin who together with its ~30 German and European member companies provide the probably largest classification system in the world today. The
dictionary version 5.1.1 contains ~27 000 classes,
~7000 attributes that are reused on the classes ~440
000 times, and ~4500 value codes (enumeration literals) for enumeration attributes. It is free for
download after registration.
 RosettaNet technical Dictionary (RNTD) [23]  RosettaNet is a non-profit consortium of more than 500
organizations working to create, implement and
promote open e-business standards and services.
RNTD version 4.1.1 contains 966 classes, 888 sets
of attributes that are reused on many different
classes and 4147 attributes which are reused in the
sets of attributes.

Connectequations
Componentreferences
Expressionlists
Real literals

Annotations
Stringliterals
Integerliterals
Other
Total
elements:

1) A basic terminology framework for describing
classes, attributes and value codes.
2) An electronic exchange format for a dictionary
of classes, attributes and value codes.

4) A standard library with a large number of
classes, attributes and value codes.
The above examples lack many technical attributes for
parameters used during design and simulation. They are
however extendable, and build on the IEC 61360
framework for an international classification system.
The Modelica Association

1_5
36
93
910
1628
1055
99

2_1
87
286
1447
4636
2768
633

2_2
106
411
3823
10182
3841
3067

2_2_1
111
488
4209
11444
4269
3351

370

903

1574

1801

30304

60838

123217

136900

14736
4413

23715
5833

38535
38418

41795
38251

1720

4755

9052

10482

1322

3722

8805

10282

1326

3120

6377

7633

3503

7218

17575

20579

33187
88621

59604
156857

88609
310638

98174
339147

183323

336422

664230

728916

Comments
StringComments

A classification system standard defines:

3) Maintenance procedures for updating the dictionary

Analysis of Modelica Standard Libraries

Figure 6.

Analysis of MSL versions

The number columns show the Modelica language
element count from different releases of the Modelica
standard libraries. MSL 1_5 was downloaded from the
public library page [5]. MSL 2_1 were obtained from
the Modelica CVS repository 2004-11-15. MSL 2.2
and 2.2.1 were accessed from the Modelica SVN repository.

363

Modelica 2006, September 4th  5th

O. Johansson, A. Pop, P. Fritzson

The source code directory contents of these libraries
was converted to a single xml file for each library release by ModelicaXML [9], which then were preprocessed for import into ModelicaDB [11].
The Imports row is an indicator of reuse. The Component-references row gives the count of the uses of
component variables in expressions. Connect-equations
give the number of connections amongst components
within the libraries.
The Comment row is a higher level parse node for
String_comments and Annotations .
String literals and Integer literals are heavily used
within annotations, especially for graphical object annotations in Modelica diagrams.
The above analysis shows that the sizes of the standard library versions are substantial. Commercial Modelica development tools like [1],[3] provide user interfaces with tree views of the package hierarchy, connection diagrams, and string based text searches, for quick
navigation in the libraries.

6

Method for Classification of MSL
Components

Commercial design tools for process and electrical engineering usually contain a classification system for
organizing and implementing their component library
catalogues. Classification trees allow a user to with a
few clicks down the tree to find a set of relevant component models. The classification tree itself is an aid
for remembering where to find certain components.
Many tools use an existing standard like IEC 61346-2
or KKS to organize the upper hierarchical levels and
have tool specific customizable classification structures
at lower levels. Users familiar with the standard can
thus easily find the tree branch that may contain the
component searched for.
These section briefly describes a successful approach to add classification information to a large class
library, how to implement a mapping between different
classification system standards, and some suggestions
how to apply this method for classifying MSL components according to different standards.

6.1

level ecl@ss (see section 4.5) classification structure to
quickly find a class of interest, its attributes, their units,
or value codes (if it was an enumeration attribute).

The ecl@ss and its Mapping to KKS and
IEC 61346-2

Within a larger project at Siemens Industrial Turbo
machinery AB in Finspng, Sweden, a method and tool
support was developed for mapping different classification systems.
Figure 7 shows an example of a navigator for a classification tree that enables users familiar with the 4The Modelica Association

Figure 7.

ecl@ss navigator

Siemens uses KKS as a designation system for their
power plants. There was a need to map the KKS classification to ecl@ss. A mapping tool was implemented
that enables product experts familiar with KKS to map
KKS classes to ec@ss classes. This tool provides interactive associative navigation and search facilities
through several different categorization/classification
standards like KKS, ISO 31 [20] and IEC 61360 [19].
Once the experts had become familiar with ecl@ss
and categorized a business relevant set of ecl@ss
classes according to KKS by assigning KKS keys, the
result was browsable in a navigator that enables users
familiar with KKS to quickly find the relevant ecl@ss
classes, their attributes and value codes.
Figure 8 shows parts of the resulting navigation tree
for KKS Equipment Units to ecl@ss classes.
The same approach may be used for mapping international classification standards like KKS and IEC
61346-2 to Modelica components in MSL.
The versions of the Modelica Standard Library
(MSL) already have a standard classification structure
in their package hierarchies. However, secondary categorization trees organized according to different standards can be implemented as an add-on feature to the
Modelica Standard Library, given some tool support for
reading the classification tree from a file, indexing the
Modelica components according to the classification

364

Modelica 2006, September 4th  5th

Engineering Design Tool Standards and Interfacing Possibilities to Modelica Simulation Tools

key, and display the tree in a navigator.

index. An annotation example for a Motor model:
annotation (category1="IEC61346-2=M");
annotation (category2="KKS_Component=-M");

There are many alternative ways to implement this using Modelica annotations. Investigations and practical
evaluations are needed to find the best long-term sustainable approach.
+ The library developer has control over the classification.
- The library developer has to learn the classification standard and do the classification work.
At the moment of this writing, the interactive performance of the ModelicaDB implementation is still not
adequate for launching a classification effort of MSL.
The current object-oriented information model of ModelicaDB [11] contains 73 classes, 69 relationships and
170 attributes, which is more complicated than the one
of the ecl@ss navigator which contains 13 tables, 5
relationships and 135 attributes. An efficient MSL classification effort for relevant international standards will
probably also require fast interactive inspection of
Modelica diagrams, which is currently not supported by
the ModelicaDB front-end.

7

Figure 8. Classification navigator for a
mapping between KKS Equipment Unit
keys and ecl@ss classes

The one-time library effort required is for an expert
familiar with the classification standard and the to-beclassified part of MSL to assign a classification key to
each MSL component. The assignment can be implemented in several ways:
1) As an external mapping table, where the mapping
key is the classification key from the standard and the
mapping value is a fully qualified MSL component
name, including the path in the Modelica package hierarchy.
+ Nothing has to change in MSL.
- The table has to be maintained when new versions
of MSL appear, where the classes have moved or have
been renamed.
2) As an annotation that specifies the kind of category, (i.e. IEC 61346-2, KKS Equipment Unit, KKS
Component) and the classification key that applies to
the particular Modelica component, for building the
The Modelica Association

Using ModelicaXML as Exchange
Format between Engineering Design Systems and Modelica Tools

ModelicaXML is a program that converts Modelica
source code into XML-files [9]. A whole Modelica Library stored in a directory structure can be converted
into one XML-file. Recent additions allows ModelicaXML to parse Modelica 2.2 source code [4]. The
sizes of the created files for MSL version 1.5, 2.1, 2.2
and 2.2.1 are 16MB, 39 MB, 58 MB and 62 MB respectively. Their collected Modelica .mo source code
files contained 1.0 MB, 2.9 MB, 4.8 MB and 5.3 MB.
ModelicaXML files were used as input for the
analysis presented in Figure 6, and for loading the libraries into ModelicaDB for further analysises with
SQL queries. The experiences with ModelicaXML are
promising, and it could serve as a standardized vehicle
to speed up development of working integrations between engineering design tools and Modelica simulation tools. Some benefits with the XML approach are:

365

 Easier to generate XML structures than syntactically
correct Modelica source code.
 Easier to parse XML structures than Modelica
source code.
 Commercial and open source software available for
processing XML structures. See also [12].
Modelica 2006, September 4th  5th

O. Johansson, A. Pop, P. Fritzson

 The Modelica community could share a lot of troublesome development effort if using ModelicaXML
as a standard intermediate exchange format.
 ModelicaXML could serve as clipboard format for
copy/paste, drag/drop of models between different
tools. One drawback may be the size of the clipboard format when copying large models.

8

Summary and Conclusion

An investigation of international standards relevant for
interfacing Modelica simulation modeling tools with
engineering design tools that precede simulation modeling has been done and has briefly been described.
An analysis of the Modelica Standard Library contents has been conducted with aid of an upgraded version of ModelicaXML that supports Modelica 2.2.
A tool supported method for classification of MSL
components has been developed and shown promising
results for a simpler classification domain. Classification of components speed up mapping efforts significantly, since they efficiently narrow the search space.
The overall experience from this effort indicates
that providing navigational access to Modelica components through classification trees organized according
to well established international standards may significantly improve the take-up rate and learning curve for
an expanding Modelica user community.

Acknowledgements
This work was supported by the Swedish Foundation
for Strategic Research, ProViking project Systems Engineering and Computational Design (SECD), Swedish
Governmental Agency for Innovation Systems (VINNOVA) in the project Semantic Web for Products
(SWEBPROD), and Siemens Industrial Turbomachinery.

References

eling and Simulation with Modelica 2.1, WileyIEEE
Press,
2003,
http://www.mathcore.com/drmodelica.
[7] Peter Fritzson, Peter Aronsson, Peter Bunus, Vadim
Engelson, Levon Saldamli, Henrik Johansson and
Andreas Karstm, "The Open Source Modelica Project", in Proceedings of The 2th International Modelica Conference,March 18-19, 2002, Munich,
Germany.
[8] Peter Fritzson, Peter Aronsson, Hkan Lundvall,
Kaj Nystrm, Adrian Pop, Levon Saldamli, and
David Broman. The OpenModelica Modeling,
Simulation, and Software Development Environment. In Simulation News Europe, 44/45, December
2005.
See
also:
http://www.ida.liu.se/projects/OpenModelica
[9] Adrian Pop, Peter Fritzson. "ModelicaXML: A
Modelica XML representation with Applications",
in International Modelica Conference,3-4 November,
2003,
Linkping,
Sweden,
http://www.ida.liu.se/~adrpo/modelica/
[10] Olof Johansson, Adrian Pop, Peter Fritzson, "A
functionality Coverage Analysis of Industrially used
Ontology Languages", in Model Driven Architecture: Foundations and Applications (MDAFA),
2004, 10-11 June, 2004, Linkping, Sweden.
[11] Olof Johansson, Adrian Pop, Peter Fritzson, "ModelicaDB - A Tool for Searching, Analysing, Crossreferencing and Checking of Modelica Libraries",
in Proc of 4th International Modelica Conference,
8-10
March,
2005,
Hamburg,
Germany,
http://www.modelica.org/events/Conference2005
[12] Michael Tiller, "Implementation of a Generic Data
Retrieval API for Modelica", in Proc of 4th International Modelica Conference, 8-10 March, 2005,
Hamburg,
Germany,
http://www.modelica.org/events/Conference2005.
[13] IEC, "IEC 61346: Industrial systems, installations
and equipment and industrial products  Structuring
principles and reference designations", 1996,
http://webstore.iec.ch

[1] Dynasim, "Dymola", http://www.dynasim.se/.

[14] IEC, "IEC 61346-1: Part 1: Basic rules", First Edition 1996-03

[2] INCOSE, "International Council on System Engineering", http://www.incose.org.

[15] IEC, "IEC 61346-2: Part 2: Classification of objects
and codes for classes". First Edition 2000-04

[3] MathCore, "MathModelica",
http://www.mathcore.se/.

[16] IEC, "IEC 61346-3: Part 3: Application guidelines",
First Edition 2001-01

[4] Modelica Association, "Modelica: A Unified Object-Oriented Language for Physical Systems Modeling, - Language Specification version 2.2", February 2, 2005 , http://www.modelica.org

[17] IEC, "IEC 61346-4: Part 4: Discussion of concepts", First Edition 1998-01

[5] Modelica Association, "Modelica Libraries",
http://www.modelica.org/library/
[6] Peter Fritzson. Principles of Object-Oriented ModThe Modelica Association

366

[18] IEC, "IEC 61355 Classification and designation of
documents for plants, systems and equipment", First
edition 1997-04
[19] IEC, "IEC 61360 Standard data element types with
associated classification scheme for electric compoModelica 2006, September 4th  5th

Engineering Design Tool Standards and Interfacing Possibilities to Modelica Simulation Tools

lamps and signalling devices

nents", http://webstore.iec.ch
[20] ISO, "ISO 31 Quantities and Units, Part 0-13",
http://www.iso.org

[45]

IEC, "IEC 617 - Part 9: Telecommunications:
Switching and peripheral equipment

[21] ecl@ss, "ecl@ss Organization", www.eclass.de

[46]

IEC, "IEC 617 - Part 10: Telecommunications:
Transmission

[47]

IEC, "IEC 617 - Part 11: Architectural and topographical installation plans and diagram

[48]

IEC, "IEC 617 - Part 12: Binary logic elements
(issued 1991)

[49]

IEC, "IEC 617 - Part 13: Analogue elements (issued 1993)

[22] RosettaNet, http://www.rosettanet.org
[23] RosettaNet, RosettaNet Technical Dictionanry,
http://www.rosettanet.org/technicaldictionary
[24] VGB, "Verband der Grokessel-Besitzer",
http://www.vgb.org
[25] VGB, "B105 KKS Kraftwerk-Kennzeichensystem;
Richtlinie zur Anwendung und Schlsselteil"
[26] VGB, "B106 KKS Anwendungs-Erluterungen"
[27] VGB, "B105e KKS Power Plant Classification
System  Guidelines for Application and Key Part"
[28] VGB, "B106e KKS Application Explanations"
[29] DIN, "DIN 2481 Thermal Power Generating Plants,
graphical symbols" , Jun 1979
[30] DIN, "DIN 1219 Fluid Power systems and components - Part 1: Graphic symbols for conventional
use and data processing applications"

[50] IEC, "IEC 60617 Graphical Symbols for Diagrams online database", ~ 1850 symbols and 350 application
notes
in
an
on-line
database
(http://dom2.iec.ch/iec60617)
[51] IEC, "IEC 61131-3 Programmable controllers - Part
3: Programming languages", Second edition 200301
[52] ISO, "ISO 14617 Graphical symbols for diagrams Part 1-15", First edition 2002-09-01
[53]

[31] IEC, "IEC 61082 Preparation of documents used in
electrotechnology"

ISO, "ISO 14617-1 Part 1: General information
and indexes", Second edition 2005-07-15

[54]

[32] IEC, "IEC 61082 - Part 1: General requirements",
First edition 1991-12

ISO, "ISO 14617-2 Part 2: Symbols having general application"

[55]

[33] IEC, "IEC 61082 - Part 2: Function-oriented diagrams ", First edition 1993-12

ISO, "ISO 14617-3 Part 3: Connections and related devices"

[56]

[34] IEC, "IEC 61082 - Part 3: Connection diagrams, tables and lists", First edition 1993-12

ISO, "ISO 14617-4 Part 4: Actuators and related
devices"

[57]

[35] IEC, "IEC 61082 - Part 4: Location and installation
documents", First edition 1996-02

ISO, "ISO 14617-5 Part 5: Measurement and control components"

[58]

[36] IEC, "IEC 617, Graphical symbols for diagrams part 1 to 13", issued 1983

ISO, "ISO 14617-6 Part 6: Measurement and control functions"

[59]

ISO, "ISO 14617-7 Part 7: Basic mechanical
components"

[60]

ISO, "ISO 14617-8 Part 8: Valves and dampers",
Corrected version 2003-12-01

[61]

ISO, "ISO 14617-9 Part 9: Pumps, compressors
and fans"

[37]

IEC, "IEC 617 - Part 1: Conventions concerning
electric and magnetic circuits. (issued 1985)

[38]

IEC, "IEC 617 - Part 2: Symbol elements, qualifying symbols and other symbols having general
application

[39]

IEC, "IEC 617 - Part 3: Conductors and connecting devices

[62]

ISO, "ISO 14617-10 Part 10: Fluid power converters"

[40]

IEC, "IEC 617 - Part 4: Passive components

[63]

[41]

IEC, "IEC 617 - Part 5: Semiconductors and
electron tubes

ISO, "ISO 14617-11 Part 11: Devices for heat
transfer and heat engines"

[64]

[42]

IEC, "IEC 617 - Part 6: Production and conversion of electrical energy

ISO, "ISO 14617-12 Part 12: Devices for separating, purification and mixing"

[65]

[43]

IEC, "IEC 617 - Part 7: Switchgear, contolgear
and protective devices

ISO, "ISO 14617-13 Part 13: Devices for material
processing", First edition 2004-11-15

[66]

[44]

IEC, "IEC 617 - Part 8: Measuring instruments,

ISO, "ISO 14617-14 Part 14: Devices for transport and handling of material", First edition 200411-15

The Modelica Association

367

Modelica 2006, September 4th  5th

O. Johansson, A. Pop, P. Fritzson

[67] ISO, "ISO 14617-15 Part 15: Symbols for use on
installation diagrams and network maps", First
edition 2002-11-01

The Modelica Association

368

Modelica 2006, September 4th  5th

On the Noise Modelling and Simulation

On the Noise Modelling and Simulation
Dorel Aiordachioaie Viorel Nicolau Mihai Munteanu Gabriel Sirbu
Dunarea de Jos University of Galati, Electrical and Electronics Engineering Faculty
Domneasca-47, Galati  800008, ROMANIA
Emails: {Dorel.Aiordachioaie, Viorel.Nicolau, Mihai.Munteanu, Gabriel.Sirbu}@gal.ro

Abstract
Physical modeling is referred to as the first
representation of a process model and is represented
as a set of differential and algebraic equations. Noise
added to the model can improve the estimated
behavior of the process and it is more close to
reality. The work defines the metamodelling models
in order to build tools for the management of the
noise, i.e. generation and properly use of it. Some
models for random sequences and signals are
considered also, under various distribution functions.
Thw way of adding noise to dynamic model of the
simulated process depends on the structural model of
the considered process, i.e. with noise at the output
or with noise at the input of the model.
Keywords: Process Modeling, Noise Modeling,
Metamodelling.

By applying the first modeling principles, a set of
equations are obtained, which could be organized in
two subsets: a subset of differential equations
describing the dynamics of the process and a subset
of algebraic equations describing the outputs and the
constraints of the behavior of the considered process.
In the context of real experiments and/or simulations
of physical systems, where measurements should be
considered as well for the purpose of identification
and parameter estimation, the model is improved
with noise information.
The reason to introduce noise in processs model is
mainly related to un-modeled dynamics and
disturbances acting on the process. Considering
noise, the state-equations of the model of the process
could have the form

1 Introduction
Physical based and object-oriented modeling
languages offer an interesting and useful approach in
process modeling and simulation, very appreciated
and useful in the world of engineers and scientists.
Examples of such software-based environments are
Omola, Dymola or MathModelica. All these
environments are connected with basic features of
the Modelica modeling language, as a neutral
representation of physical processes. More, based on
object-matching features, it is used as the standard
representation formalism over the distributed
simulation platforms.
Perhaps the first reference that emphasizes a strong
call to new modeling principles is of [1], which
clearly shows the constraints of pure mathematical
models. Other examples could be of [2] and [3], the
last one - a project under the resources of Foundation
for Strategic Research of Sweden.
The Modelica Association

E  x ( t ) + F  x( t ) = B u  u( t ) + B w  w( t )

(1.a)

y( t ) = C  x( t ) + e( t )

(1.b)

where a noise component, w(t), is added for state
variables and a noise component e(t) is added for the
output variables. The type of the noise regarding the
power and the probability density function depends
on the process. Usually, white noise is considered
with variance connected with the dynamics of the
process.
Noise modeling is an important task in process
modeling. There are unmodelled phenomena and
unknown parameters. A noise model should describe
how the unmeasured inputs and the unmodeled
dynamics could change the behavior of the
considered system. Noise modeling also stands for
the addition of one or more noise components to
state variables, in order to model disturbances and/or
some random or unknown behavior. Naturally, the
physics of the process should indicate which

369

Modelica 2006, September 4th  5th

D. Aiordachioaie, V. Nicolau, M. Munteanu, G. Sirbu

variables should have noise and which one not, that
could be done manually for simple processes. The
problem has two aspects: first, there is a complex
process, difficult to manage and, second, a software
tool that is more efficient and comfortable for any
modeler.
Adding noise to all equations can lead to derivates of
white noise and  as results  to non-causal process,
as infinite values of some variables.
Details on how the non-causality with respect to the
input signal, u( t ) , can be handled are in [4] and [5].
The problem itself is considered and solved, however
[6], where a band limited noise to avoid the problem
suggest it.
The present work is looking to noise modeling and
appropriate tools to generate different noise models.
The reason of the subject is coming from the fact that
Modelica, as far we know, does not have any
considerations on noise models. The noise modeling
tools are considered at the level of the metamodel,
i.e. models of the methodology of noise modeling.
The object of the section 2 is related to methods of
noise modeling. Section 3 contains the basic
theoretical models to generate noise, looking to
define the problem, to understand the method and to
propose solutions related to the noise modeling.
Section 4 is dedicated to a set of noise models, in
Modelica language implementation. Simulation
results are presented and discussed in section 5.

2 Noise metamodelling
Fig. 1 and 2 are looking to present the methodology
of noise modeling in the context of physical
modeling, i.e. the integration on noise models into
physical process models.
The class diagram in Fig. 1 shows the hierarchy of
different models, which is used in the building of the
system model with physical constraints and 
possible  under different representation formalisms.
A model is an abstract representation and a
generalization of a process model. A process model
is an aggregation of one or more models based on
equations. An equation-based model is an
aggregation of some models, part with noise and part
without noise. A noise model should be compliant
with the laws of physics and the variables involved
in the model should have a physical meaning.
Symbolic tools are used to decide where and how to
The Modelica Association

add noise to the model of the process, in order to
have a valid representation of the reality.
As Fig. 2 shows, a noise model is generalized as a
model. A noise model is an aggregation of some
model noises, e.g., of white noise model and bandlimited noise, i.e. colored noise. The last one has
constraints from a physical model concerning the
parameters, e.g. the power of the noise and the
frequency bandwidth.
Fig. 3 presents the point of view of the signal
domain, which is the output of the noise models. The
figure describes a hierarchy on classes, as the objecttechnology is supposed to have, starting with the
class signal as generalization of the class noise. In
turn, the class noise is an aggregation of three
different noise classes, considering probability
distribution function, starting with Wiener
distribution and going to white noise and finally to
colored noise. Each class has specific methods and
attributes, e.g, the power of the white noise and the
time constant or, equivalently, the frequency
bandwidth, as parameter in the transfer function from
white noise to colored noise signals. What is not
considered here is the type of the signal, discrete or
continuous. This is more complicated, mainly
because it requires the interactions with a solver and
is out of the papers horizon.

3 Random variables
Random process generation is usually made in two
steps: first, generating imitations of independent and
identically distributed random variables having the
uniform distribution over the interval (0,1) and,
second, applying transformations to these variables
in order to generate random vectors with arbitrary
distributions. These two steps are independent.

The next subsections sketch the theoretical
background in order to sustain the declarative
models for the generation of various types of the
noise. Methods for generating a sequence of
random numbers have been extensively studied
and are well understood. Widely accepted is the
method of the linear congruential generators.
These numbers have the general form
U ( k + 1) = (a  U ( k ) + c ) mod m

(2)

where U (k ) is the k-th element of the sequence
and U (0), a, c and m are parameters.

370

Modelica 2006, September 4th  5th

On the Noise Modelling and Simulation
Model

Process_Model
1

1..*

Equation_Based_Model

1

1

1..*

0..*

Free_Noise_Model

has

Physical_Model

Noise_Model
1

1..*

Figure 1: Different types of models
Model

1

Noise_Model

1

imposes

Physical_Model
1..*

1..*

generates

White_Noise_Model

Coloured_Noise_Model

1..*

1

Figure 2: Connections among different types of noise models

Figure 3: Class diagram of the noise signals

The Modelica Association

371

Modelica 2006, September 4th  5th

D. Aiordachioaie, V. Nicolau, M. Munteanu, G. Sirbu

The second variable of the modulus function, m, A colored noise, ( t ) , may be calculated from a
is a large integer which must be prime; the stochastic equation as
multiplier a is an integer in the range (2, 3, , md( t )
1

1); the additive constant c is an integer, often
(6)

equal to zero. These are chosen to make the sequence
look as random as possible. This generator has
period m-1. Common choices for these values are
a = 16807 ,
U (0) = any positive integer,

dt

=   ( t ) +  N ( t )



where N ( t ) is a Gaussian white noise, with unit
variance and zero mean.

m = 2 31  1 , c = 0 . Other common choices and
optimum algorithms are presented and described,
e.g., in [13],[14],[15], [16] and [17].

5 Modelica implementation

A Box-Muller method [18] could be used in order to
obtain a unit normal random, say X. Two uniform
random variables U1 and U2 are necessary and the
relation

Based on mathematical considerations of above
section and on metamodel of Fig. 3, declarative
models based on Modelica modeling language will
be presented.

X (k ) =  2  log(U 1 (k ) )  sin( 2    U 2 (k ) (3)

Real type numbers makes the interface
communication over different models. The Modelica
code for interfaces can by as

Given a uniform random variable U(k), a Rayleigh
random variable R(k) can be obtained by:

R (k ) = 2   2  ln (1 1  U (k ) )

connector PortNumber
Real n;
end PortNumber;

(4)

where  2 is the variance of the Rayleigh random
variable.

The uniform random number generator needs a
function mod defined as
function mod
input Real x, y;
output Real z;
algorithm
z := x - div(x, y) * y;
end mod;

4 Noise models
Considering an interval I = [0,T ], a standard
Wiener process is a random variable W(t) which
satisfies the properties:
1). W ( 0 ) = 0
with
W ( t 2 )  W ( t1 )  t 2  t1  N ( 0 ,1 ),
t 2  t1 , t1 ,t 2  I . N ( 0 ,1 ) is a random number
under normal distribution with zero mean and unit
variance.
3). For
t1  t 2  t 3  t 4  I , the samples
2).

where the assignation in the algorithm section
imposes the causality of input and output variables.
A separate model describes global simulation
parameters

W ( t 2  t1 ) and W ( t 4  t 3 ) are independent.
White noise N ( t ) , with unit variance, is the formal
derivative of a Wiener process W ( t ) , as
N( t ) =

dW ( t )
dt

(5)

It may be possible that the noise in a physical system
has correlations that are not satisfied by white noise.

The Modelica Association

372

model parameters
// the numbers of random values:
parameter Integer n=100;
// sample period:
parameter Real dt = 1;
// start time moment:
parameter Real start = 1;
// the index of arrays used in simulation:
Integer j;
algorithm
j := integer(time/dt) + 1;
end parameters;

Modelica 2006, September 4th  5th

On the Noise Modelling and Simulation

The uniform random generator over the interval
(0,1] is described by
model UNG //uniform_number_generator
extends parameters;
constant Integer m = 2^31 - 1;
constant Integer a= 7^5;
constant Integer c=10;
Real xmax, x[n];
Integer j;
PortNumber OUT;
algorithm
x[1] := 1.0;
for k in 1:n - 1 loop
x[k + 1] := mod(a*x[k] + c, m);
end for;
xmax := max(x);
for k in 1:n loop // normalization
x[k] := x[k] / xmax;
end for;
OUT.n := x[j];
end UNG;

xr:=sqrt(2*sigma^2*log(1/(1e-5+1-ung.OUT.n)));
OUT.n := xr;
end RRG;
The normal white noise model needs a normal
random numbers. The model is described by
model white_noise
extends parameters;
parameter Real sigma = 1;
Real xw[n], xa[n];
PortNumber OUT;
NNG nng;
algorithm
xw[j] := sqrt(dt)* nng.OUT.n;
xa[j] := sigma*(xw[j] - xw[j-1]) / dt;
OUT.n := xa[j];
end white_noise;
There are two random variables, one is Wiener and
another one is of white type.
The colored noise is described by the sequence
model colored_noise
extends parameters;
PortNumber IN, OUT;
parameter Real tau = 1;
parameter Real sigma = 1;
Real xc;
algorithm
OUT.n := xc;
equation
when sample(start, dt) then
der(xc) = -xc/tau + sigma*IN.n/tau;
end when;
end colored_noise;

The model defines the basic bricks of the noise
modeling and generations tools and has two outputs,
related to two consecutive random numbers over a
set of n preimposed values. All variables are part of
the generator and the causalities are assigned in the
algorithm section.
The normal distribution needs two uniform
generators that could be developed by using two
independent uniform generators or only one
generator but with multiple independent outputs.
With the last assumption the model of the normal
random generator is as
model NNG // normal_number_generator
extends UNG_MULTI;
PortNumber OUT;
Real x[n];
algorithm
x[j] := OUT.n;
OUT.n:=sqrt(-2*log(OUT1.n))*sin(6.28*OUT2.n);
end NNG;

and has two parameters with the names tau and
sigma. The function sample(start,interval) returns
true and triggers time events at time instants (start +
i*interval).
The final simulation model, in order to generate a
colored noise with the imposed parameters, is
model sim
colored_noise cn;
white_noise wn;
equation
connect(wn.OUT, cn.IN);
end sim;

The model for a Rayleigh distribution is
model RRG // Rayleigh random generator
extends parameters;
parameter Real sigma=1;
Real xr;
PortNumber OUT;
UNG ung;
algorithm

The Modelica Association

In addition, the links between the used models are
graphically presented in Fig. 4.

373

Modelica 2006, September 4th  5th

D. Aiordachioaie, V. Nicolau, M. Munteanu, G. Sirbu

and discrete time random processes and to built a set
of models ready to use in noise modelling.

Figure 4: The model for colored white noise

6 Simulation results
For discrete sequences, simulations where conducted
for different lengths. Figure 5 presents the result for

m = 2 31  1, a = 7 5 , c = 10 , x( 0 ) = 1 as parameters
of the uniform number generator. The parameter of
the obtained random sequence are 0.4277 for mean
and 0.0833 the variance. Rising the length to n=100
the distributions parameters are improved to 0.4350
for the mean and 0.0995 for the variance. It is
remembered that the ideal values are 0.5 for mean
and 1/12.

Figure 5: Uniform random number sequence

Figure 6 shows a normal random sequence. The
parameters for the second uniform number generator
were m = 2 31  1, a = 7 3 , c = 0 , x( 0 ) = 2 .
For a
length of 50 a sequence of 0.0939 and 1.0741 is
obtained, as values for mean and variance. With
n=100 the parameters are -0.0191 and 0.9885.
Figure 6: Normal random sequence

Fig. 7 shows samples of the simulation results from
the outputs of the continous noise models, i.e. white
and coloured. It seems that the results are
satisfactory over the behavior of the signals.
More statistic tests will be developed in order to
improve the structure of generators and to check the
distances between the real and the imposed behavior.

7 Conclusions
The objective of the work was to define noise
models, with different density distribution functions,
at the level of metamodels and to implement these in
a neutral declarative modeling language, here
Modelica.
The study is on the beginning and - as a first trial the obtained models are compliant with the reference
behavior. In the future more study will be done in
order to make distinction between continuous time

The Modelica Association

Figure 7: White and colored noise signal
( dt = 1,  2 = 1,  = 2 )

Acknowledgements
The authors would like to thank the Romanian
National University Research Council for supporting
part of the work, under the research grant 1350.

374

Modelica 2006, September 4th  5th

On the Noise Modelling and Simulation

References
[1] Cellier, F.E., Continuous System Modeling,
Springer Verlag, New York, 1991.
[2] strm, K.A., Hilding Elmqvist, Sven Erik
Mattsson, Evolution Of Continuous-Time
Modeling And Simulation, 1998.
[3] VISIMOD - A project funded by the Swedish
Foundation
for
Strategic
Research,
http://www.visimod.org/.
[4] Schein O., and G. Denk, Numerical solution of
stochastic differential-algebraic equations with
applications to transient noise simulation of
microelectronic
circuits,
Journal
of
Computational and Applied Mathematics, 100,
1998, pp. 77-92.
[5] Schon, T., Markus Gerdin, Torkel Glad and
Fredrik Gustafsson, A Modeling and Filtering
Framework for Linear Differential-Algebraic
Equations, In Proc.of the 42nd Conf. on
Decision and Control, Maui, Hawaii, USA,
December 2003.

[10] Elmqvist, H., S.E.Mattsson and M. Otter,
Modelica-A Language for Physical System
Modeling, Visualization and Interaction, Proc.
of the 1999 IEEE Symp. on Computer-Aided
Control System Design, Hawaii, Aug., 1999.
[11] The
Global
CAPE-OPEN
Consortium,
http://www.global-cape-open.org, 2000.
[12] Braunschweig, B.L., Pantelidis, C.C., Britt,
H.I., Sama S., Open Software Architecture for
Process Modeling: Current Status and Future
Perspectives. Proc. of the FOCAPD99 Conf.,
Breckenridge, Colorado, USA,1999.
[13] LEcuyer, P., Random number generation. In
Banks, J., editor, Handbook of Simulation,
Wiley, 1998, pp. 93-137.
[14] LEcuyer, P., Simard, R., Chen, E. J., and
Kelton, W. D. An object oriented randomnumber package with many long streams and
substreams, Operations Research, 50(6), 2002.

[6] Campbell, S.L., Descriptor systems in the 90s.
Proceedings of the 29th Conf. on Decision and
Control, Honolulu, Hawaii, USA, Dec., 1990.

[15] Knuth, D. E. The Art of Computer
Programming, Volume 2: Seminumerical
Algorithms. Addison-Wesley, Reading, Mass.,
3rd Ed., 1998

[7] Tiller, M., Introduction to Physical Modeling
with Modelica, Kluwer Academic Publisher,
2001.

[16] Kahaner, D., Numerical Methods and Software,
Prentice Hall Series in Computational
Mathematics, 1977.

[8] Fritzson, P., Principles of Object-Oriented
Modeling and Simulation with Modelica 2.1,
Wiley-IEEE Press, New York, 2004.

[17] Stephen K. Park, Keith W. Miller, Random
Number Generators: Good Ones are Hard to
Find, Comm. of the ACM, 31-10, 1988.

[9] Modelica and Modelica Association, Modelica
Rationale, http://www.modelica.org/, 2004.

[18] Sheldon M. Ross, A First Course
Probability, Prentice Hall College, 1997.

The Modelica Association

375

in

Modelica 2006, September 4th  5th

D. Aiordachioaie, V. Nicolau, M. Munteanu, G. Sirbu

The Modelica Association

376

Modelica 2006, September 4th  5th

Acausal Modelling of Helicopter Dynamics for Automatic Flight Control Applications

Acausal Modelling of Helicopter Dynamics
for Automatic Flight Control Applications
Luca Vigano and Gianantonio Magnani
Politecnico di Milano
Dipartimento di Elettronica ed Informazione (DEI)
Via Ponzio 34/5, 20133 Milano, Italy
e-mail: vigano,magnani@elet.polimi.it

Abstract
In the preliminary design stages of helicopter autopilots computationally affordable and mathematically
simple dynamic models are needed to perform approximated performance assessments. In this paper, the
structure of a modular, acausal and reconfigurable helicopter simulator is described, showing how the innovative characteristics of Modelica language can be
employed in order to simplify the implementation of
the single components and to allow the optimization
of the simulator architecture. The overall model makes
use of the existing Modelica MultiBody and Mechanics.Rotational libraries.
Keywords: helicopter; flight mechanics; simulation;
AFCS

1 Introduction
The mathematical modelling of rotorcraft dynamics is
a very difficult task that has represented a challenge for
many researchers since age 60s. The availability of
performant computers and a deeper theoretical knowledge in the late 80s dramatically improved the results
achieved in this field. Nowadays, this research area is
extremely wide, as it entails advanced studies in computational fluid dynamics (CFD) and flexible multibody dynamics as well. However, Heffley et al. [11]
and successively Padfield [3] underlined how, for handling analysis and for the design of common mid-low
bandwidth automatic flight control systems (AFCS),
the needed mathematical model of the plant shouldnt
be too much complex (at least in the early stages of the
project), because the experimental validation turns out
to be much simpler with a reduced number of uncertain parameters and because the fundamental aerome corresponding

author

The Modelica Association

chanical phenomena can be reasonably matched with
simplified, first principle based, models. Furthermore,
this kind of model is generally easier to use (requiring
a relatively small set of parameters), computationally
less expensive and then its more suitable for real-time
applications. This is the reason why a consistent number of researchers have devoted themselves in the last
twenty years to the development of so-called minimum
complexity helicopter math models (see [8], [11] for
more details), which are able to correctly predict the
prevailing phenomena involved in helicopter handling
and control. The most recent result, in that sense, is
given in Padfields book [3], where the definition of
Level 1 helicopter dynamic model is given.
In this paper, a Modelica implementation of a Level 1
helicopter dynamics model is presented, showing how
the peculiar characteristics of Modelica language may
be profitably used in order to make the implementation as natural as possible. The paper is organized as
follows: in section 2 a brief overview of main rotor
modelling techniques is given; in section 3 the Modelica implementation of the proposed helicopter model
is described, followed in section 4 by simulation studies; at the end of the paper, concluding remarks and
future developments are outlined.

2

Overview of basic main rotor dynamic modelling

In this paragraph, a synthetic description of a main rotor dynamic model suitable for flight mechanics simulation is provided, according to Level 1 model definition. The resulting mathematical model may be
used not only for control synthesis purposes, but also
for preliminary performance calculations. Main rotor
model is without any doubt the most important and
complex helicopter subsystem, being a fundamental

377

Modelica 2006, September 4th  5th

L. Vigan, G. Magnani

 The possible different blade flap retention arrangements (teetering, articulated and hingeless
rotor) are described with the unifying centrespring equivalent rotor theory.
 Fast lead-lag dynamics is neglected.
 The blades are considered rigid (in case of
hingeless rotors, flexibility is concentrated in the
centre-spring).
 Aerodynamic loads are computed using simple
blade element theory.

Figure 1: Helicopter reference frames [8]

source of lift and controllability for the aircraft, transferring prevailingly aerodynamic forces and moments
from the rotating parts (blades) to the non-rotating
frame (that is the fuselage); pilot and AFCS have direct control of main rotor thrust amplitude through collective blade pitch and indirect control of thrust direction by means of cyclic blade pitch (because the flapping rotating blades act together as a gyroscope). The
pitch of each blade is varied with particular mechanical devices (typically swashplate or spider assemblies, [1]). Since control-oriented helicopter simulators usually describe main rotor making use of analytically integrated loads, in order to provide deep understanding of the underlying physics and a significant
simplicity, its evident that a so-called Level 1 main rotor model is more suitable for a general, modular and
reconfigurable simulator than a complex CFD-based
numerical model, where the aerodynamic loads are
obtained integrating the pressure distribution upon
each blade and, in the same way, the inertial loads
are computed using complex codes for flexible multibody systems [14]. This last approach becomes necessary when high bandwidth control actions (for example HHC - high-harmonic-control - techniques for
the active control of vibrations [5]) or detailed analyses must be performed, as underlined in [15]. In the
following, we shall provide a simplified description of
the main rotor mathematical model used in our simulator: the interested reader can find much more details
in the specialized literature [13], [17]. Lets assume
the following hypotheses:

Introducing the MBC (Multi-Blade Coordinates)
transformation, one can describe flapping dynamics
(which is fundamental in helicopter handling and control) with reference to the non-rotating frame. Representing with bi the flapping angle of i-eth blade, with
Nb the blades number and with y = Wt the rotor azimuth angle in wind-axes system (rotor angular velocity W is assumed constant), MBC transformation is defined as:
b0

=

b0d

=

b jc

=

b js

=

1 Nb
bi
Nb i=1

(1)

1 Nb
bi (1)i
Nb i=1


2 Nb
2p
bi cos j y +
(i  1)
Nb i=1
Nb


2 Nb
2p
bi sin j y +
(i  1)
Nb i=1
Nb

Neglecting periodic terms, which influences only vibrations, and the differential coning b0d , which is reactionless and, in any case, null for Nb odd, the whole
rotor disc configuration can be described using only
the so-called coning mode b0 and the first two cyclic
modes b1c , b1s (representing longitudinal and lateral
disc tilt angles, respectively) according to the following expression:
b(y,t) = b0 (t) + b1c (t) cos(y) + b1s (t) sin(y)

(2)

Using the vector representation b = {b0 , b1c , b1s }, the
flapping equations for the dynamics of a generic Nb  Compressibility, stall and reverse flow effects are
bladed rotor1 can be expressed in the form [3],[12]:
neglected.
1 For

The Modelica Association

378

a two bladed teetering rotor, b0 =const must be assumed

Modelica 2006, September 4th  5th

Acausal Modelling of Helicopter Dynamics for Automatic Flight Control Applications

b +C f b + D f b = H f

(3)

The matrix C f , D f and the vector H f are complex
function of rotor system parameters (in particular,
blade Lock number g, representing the ratio between
blade aerodynamic and inertial load, and equivalent
spring stiffness Kb ), flight conditions (mainly , advance ratio, representing the air velocity lying in rotor
disc plane adimensionalized with respect to blade tip
speed), blade pitch angle and aerodynamic inflow distribution. These last two contributions deserve more
attention; in particular, blade pitch can be expressed in
a way similar to (2)
q(y,t) = q0 (t) + q1c (t) cos(y) + q1s (t) sin(y)

(4)

The coefficients (CT ,CL ,CM ) represent the adimensionalized resultant aerodynamic thrust, rolling moment and pitching moment, respectively, in nonrotating frame. The expressions for the mass-apparent
matrix M and the matrix L can be found, for example,
in [9],[10]. In order to solve this complex mathematical problem, the expressions for the resultant forces
and moments transmitted by the rotor to the fuselage
need to be computed. Integrating analytically the aerodynamic and inertial loads acting on each blade and
summing over all the blades, closed-form expressions
for the rotor forces and moments Xw ,Yw , T, Lw , Mw , N
can be derived; these formulas (here non reported for
brevity, see [3],[8] for more detail) included vibratory
terms, which are usually neglected in flight mechanics analyses, and quasi-steady terms, which are, on
the contrary, of chief interest. The prefix w stands
for wind, in order to remember that these components need to be transformed from the hub-wind system (aligned with relative air velocity) to the shaftaxes system taking into account the sideslip angle bw ,
before assembling the overall system dynamics. From
this analysis its clear that also the implementation
of a basic complexity main rotor model in a traditional simulation environment may result a very difficult and time-consuming task, involving the solution of a fully coupled mathematical problem. In the
next section, a Modelica implementation of a controloriented helicopter dynamic model is described, showing the remarkable simplification allowed by the modelling paradigms offered by Modelica language.

where the three system inputs q0 , q1c and q1s are, respectively, the collective blade pitch, the lateral cyclic
pitch and the longitudinal cyclic pitch. The prediction of the aerodynamic inflow (that is the flowfield
induced by the rotor at the rotor disc) is a really complex task, as it involves the dynamic description of a
completely three-dimensional aerodynamic field. In
flight mechanics applications, anyway, simple mathematical model are often used for this task, varying
from the simple theoretical static uniform momentum
theory to more complex dynamic wake models. In particular, all the dynamic models derived from the original work of Pitt and Peters [10] represent a good compromise between simplicity, physical consistency and
correspondence with experimental flight data and they 3 A Modelica comprehensive control
are suitable for flight mechanics and control applicaoriented helicopter simulator
tions. These models typically describe dynamic inflow
with a three states approximation, in order to correctly
predict the first harmonic distribution of induced ve- In this section, a control-oriented helicopter dynamic
model developed with Modelica language is presented.
locity on the rotor disc in maneuvered flight:
This model has been implemented employing the
well-known analytical results published in [3],[8],[11]
r
r
l(r, y,t) = l0 (t) + l1c (t) cos(y) + l1s (t) sin(y) (5) which constituted the starting point for a significant
R
R
number of helicopter flight simulators, in military and
research fields. The overall helicopter model takes adwhere R is the rotor radius and the pair (r, y) uniquely vantage of the unique object-oriented features of Modrepresents the position of a point on the rotor disc. The elica language and it includes the following submodequations for the inflow dynamics are commonly ex- els:
pressed in adimensional form as:
 Atmosphere model



 

[M]

 l0 
 l0   CT 
l1s
CL
+ [L]1
=
l1s



 

l1c
CM
l1c

(6)

 Main rotor dynamics
 Tail rotor dynamics

The Modelica Association

379

Modelica 2006, September 4th  5th

L. Vigan, G. Magnani

 Airframe rigid mechanics

and tail rotor inflow) have been included introducing
a dedicated inflow connector, which is declared as
following:

 Fuselage and empennages aerodynamics
 Turboshaft engine simplified dynamics

connector Inflow in
"External velocity field with harmonic
The Atmosphere model is declared with outer keydistribution"
word, in order to make it accessible from all the heinput Modelica.SIunits.Velocity v0
licopter components; it implements a U.S. Standard
"Average inflow component";
Atmosphere model for the variation of air pressure,
input Modelica.SIunits.Velocity vs
density and temperature with altitude, and it allows to
"Sinusoidal inflow component";
define a uniform wind disturbance. The model can be
input Modelica.SIunits.Velocity vc
extended in order to include also a stochastic turbu"Cosinusoidal inflow component";
lence model (for example based on Drydens turbuend Inflow in;

lence spectrum [4]). Since all the helicopter aerodynamic components need the updated value of the density r and since the small variations of density from a
point to another of the aircraft do not justify a local
evaluation of this quantity with a function, we have
decided to compute it once for the whole helicopter,
making reference to the altitude of its center of mass.
A significant advantage found using Modelica for this
application regarded the computation of local airspeed
at different points of the helicopter; as pointed out by
Looye and Moorman [2] speaking about their FlightDynamics library, the local airspeed is given not only
by the inertial velocity of the center of mass and by the
wind components, but its also influenced by aircraft
angular velocities. Local airspeed at a generic point p
of the helicopter can be expressed as:

The same holds for the dual connector inflow out,
but the inflow components are declared as output.
The causal nature if this connector is obviously made
necessary by the simple mathematical modelling of
downwash effects carried out in flight mechanics.
Thanks to the innovative features of Modelica language, rotor dynamics can be implemented in the most
natural way, declaring the equations as found in technical reports and specialized books (as those summarized in the preceding section) without requiring any
error-prone and time consuming by hand manipulation of the analytical expressions. For example, lets
consider the tail rotor dynamics: tail rotor is simpler
to describe than main rotor, because it has no cyclic
inputs but only a collective pitch input; moreover, its
~a (p) = ~V (p)  ~Vw (p)  ~Vdw (p)
V
(7) high rotating speed makes the flapping and inflow dynamics so fast that they are usually neglected. Static
inflow theory is therefore suitable for the computation
~a is the local airspeed, ~V is the local inertial of tail rotor induced velocity and thrust:
where V
velocity, ~Vw is the local windspeed (in our case its
assumed to be uniform) and ~Vdw represents the velocVi
CT
li =
= r
(8)
ity of the airflow determined by downwash effects.

2
Wtr Rtr
2 +  v l
2

i
Employing the FixedTranslation components of the
Wtr Rtr
MultiBody library [7], this problem is easily solved,
CT = CT (li , , qtr )
since ~V , derived from the MultiBody frame relative to
the considered aerodynamic component, takes automatically into account the velocity transport effect due where Vi ,CT ,Wtr ,Rtr , ,v represent, respectively, tail
to rigid rotations. On the other side, this procedure rotor induced velocity, thrust coefficient (adimensionavoids user to manually specify (possibly introducing alized thrust), rotating speed, radius, advance ratio and
implementation bugs) the transport laws of forces and transversal airspeed (directed as the helicopter y-axis);
moments from aerodynamic components (for example furthermore, qtr symbolizes the tail rotor pitch input.
from the center of pressure of the different lifting The expression (8) is an implicit equation, because the
surfaces or from the hub reference system of main and inflow depends on the thrust and the thrust depends on
tail rotor) to the center of mass reference system, as the inflow; using traditional, causal, simulation tools
commonly happens in flight simulators implemented or low level languages, the user should solve this equawith low-level languages (such as Fortran or C). tion implementing by hand the code for a Newtons
Eventual downwash effects (as those due to main iterative scheme or (as suggested in [11]) introducing
The Modelica Association

380

Modelica 2006, September 4th  5th

Acausal Modelling of Helicopter Dynamics for Automatic Flight Control Applications

Figure 2: Helicopter simulator layout
unphysical algebraic loop by means of common I/O
blocks. With Modelica language, this is no more necessary, since Dymola provides analytical manipulation
of these expressions, and the user can introduce the expressions like (8) (much common in aerodynamic context) without any modification.
Aerodynamic forces and moments generated by empennages and fuselage are computed employing lookup-tables (Modelica CombiTable blocks) and taking
into account downwash effects due to main and tail
rotor with inflow connectors. In the case of tail rotor,
uniform inflow implies that v0 = Vi and vs = vc = 0. An
important effect to predict, both for trim and dynamic
analysis, happens when the impingement of main rotor wake on horizontal tail is realized. For this reason,
horizontal tail model checks continuously the value of
wake skew angle, which is defined as:
c = tan

1




w
l0  WR


(9)

The aerodynamic coefficients used in fuselage model
have been derived from the technical document [16],
which reports wind tunnel data for different fuselage
shapes.
Helicopter rigid mechanics is implemented using a
standard Body component of MultiBody library and
specifying aircraft inertial properties. The rigid body
is connected to the different components of the airframe with rigid translations, as said before.
The Modelica Association

Helicopter main and tail rotors are designed for providing optimal performances at a constant, nominal,
blades angular velocity; for this reason, engine automatic regulation is used in order to guarantee the
right value of RPM, no matter how required power
is. The Mechanics.Rotational library has been profitably used for the implementation of a simplified turboshaft engine dynamics model, connected to the main
rotor block and to the tail rotor system through an ideal
gearbox model. The torque absorbed at engine shaft is
given by:

Q = Qmr + Imr W  r + kT Qtr + Qacc

(10)

where Qmr is the torque due to rotor aerodynamic inplane components (computed in main rotor block), Imr
is the rotor moment of inertia about shaft axis, r is the
helicopter yaw rate, kT the gear-box reduction ratio,
Qtr the torque required at tail rotor shaft and, finally,
Qacc represents the torque due to accessories. Observe
that the torque balance (10) is realized in Modelica in
a very physical way connecting rotational flanges. Engine dynamic response from fuel flow to shaft power
has been modelled as a simple first order lag, according to [8], while the RPM governor has been implemented with an analog PID block. Figure 2 shows
the Dymola graphical layout of the helicopter simulator. On the left the four helicopter inputs (m.r. collective pitch, m.r. longitudinal cyclic pitch, m.r. lateral

381

Modelica 2006, September 4th  5th

L. Vigan, G. Magnani

cyclic pitch and t.r. collective pitch) are visible, while
on the right the output signals correspond to measured
Euler/Cardan angles, pitch rates and airspeeds. Light
thick connections represent aerodynamic interferences
(downwash effects). Eventual primary mixer (for the
decoupling of pitch and roll control channels) and interlink subsystems can be easily added to this basic
simulator. Furthermore, specialized graphical shapes
have been employed for the 3D visualization of the
helicopter trajectories (Figure 3).

Figure 4: Longitudinal flight - trim data

Figure 3: A109 helicopter performing a steady coordinated turn

4 Simulation study
As a case study, the technical data of an Agusta
A109mkII helicopter have been considered [11]. The
complete helicopter system is fully specified in our
simulator inserting only 69 parameters (excepting the
coefficients of look-up-tables). In the following, the
results deriving from two different simulation studies
are reported.

4.1

Figure 5: Lateral flight - trim data

Trim analysis

In this test, the helicopter model has been trimmed for
different values of airspeed in both longitudinal and
lateral flight conditions. Figures 4,5 report plots showing trim data values for angular attitudes, command inputs and required power for different trim conditions.
These results have been compared with the real flight
data of the same helicopter model [6],[11], observing
generally a very good agreement. Only a little overestimation of tail rotor authority has been observed for
high speed flight, due probably to complex aerodynamic interactions between main rotor wake and tail
rotor flowfield.
The Modelica Association

382

Figure 6: Helicopter attitudes
Modelica 2006, September 4th  5th

Acausal Modelling of Helicopter Dynamics for Automatic Flight Control Applications

4.2

Piloted flight

Introducing a very simple AFCS control structure [3],
we could easily reproduce the presence of a standard
autostabilisation equipment plus a pilot (or an autopilot alone), in order to perform realistic transients. As
an illustrative example, a simulation of a flight transient is reported: the helicopter starts hovering, then,
for t = 30 sec the helicopter begins a longitudinal flight
(sideslip bw = 0) accelerating up to 100 knots (51.4
m/s, Figure 7). At t = 230 sec the helicopter starts a
climb and it increases its altitude of 60m in 20 sec. The
time history of three attitude angles is reported in Figure 6; the velocity increase from hover to 100 knots is
achieved putting the helicopter nose down (the angle
q decreases) by means of a forward longitudinal stick
displacement, as shown in Figure 8, where the longitudinal cyclic pitch reaches its steady-state trim value
for 100 kts.

Figure 8: Helicopter inputs

Figure 9: Main rotor inflow - harmonic components

Figure 7: Helicopter velocities in earth-fixed frame

Correspondingly, the virtual pilot uses pedals (tail rotor pitch) in order to hold heading during the transient, compensating main rotor torque. At t = 230
sec the collective is pulled up in order to impress a
positive climb rate of about 3 m/s to the helicopter,
until the new altitude is reached. Figure 9 reports
the time history of the dimensional inflow states: as
speed increases, the main rotor wake passes from a
configuration where the inflow is approximately uniform (vs = vc = 0) to a harmonic distribution consistent with high speed forward flight. Finally, Figure 10
shows the required engine power during the transient.
The Modelica Association

383

Figure 10: Required power
Modelica 2006, September 4th  5th

L. Vigan, G. Magnani

5 Conclusions and future work

[7] M. Otter, H. Elmqvist, and S.E. Mattsson. The
New Modelica MultiBody Library. In 3rd Modelica Conference, Linkoping, Sweden, November
3-4, 2003.

In this paper, a simple parametric and reconfigurable
helicopter dynamic model has been proposed, underlining the great advantages in terms of code readability
and reusability deriving from the use of Modelica lan- [8]
guage paradigms and Dymola environment. As next
work, the model validation will be performed. The validated model will be integrated with detailed electrohydraulics actuator models (under development) and
realistic redundant FCC (Flight Control Computer) architectures. The resulting simulator will be used for [9]
the assessment of performance degradation in case of
actuators failures and for the support in analysis and
design of new specific linear and nonlinear control al[10]
gorithms.

W.A.Decker P.D.Talbot, B.E.Tinling and
R.T.N.Chen.
A mathematical model of a
single main rotor helicopter for piloted simulation. Technical memorandum NASA 84281,
NASA Ames Research Center, Moffett Field,
California, September 1982.
D.M. Pitt and N. HaQuang. Dynamic Inflow for
Practical Applications. Journal of the American
Helicopter Society, 33:6468, 1988.
D.M. Pitt and D.A. Peters. Theoretical prediction
of dynamic-inflow derivatives. Vertica, 5(1):21
34, 1981.

References

[11] R.K.Heffley and M.A.Mnich.
Minimumcomplexity
helicopter
simulation
math
model.
[1] D. Balmford A.R.S. Bramwell, G. Done.
Contractor report NASA 177476, AeroflightdyBramwells Helicopter Dynamics. Butterworth
namics Directorate, U.S. Army Research and
- Heinemann, 2001.
Tecnology Activity (AVSCOM), April 1988.
[2] D.Moorman and G.Looye. The Modelica Flight [12] R.T.N.Chen. Effect of primary rotor parameters
Dynamics Library. In 2nd Modelica Conference,
on flapping dynamics. Technical paper NASA
DLR, Oberpfaffenhofen, Germany, March 181431, NASA Ames Research Center, Moffett
19, 2002.
Field, California, January 1980.
[3] G.D.Padfield. Helicopter flight dynamics : the [13] R.W.Prouty. Helicopter Performance, Stability,
theory and application of flying qualities and
and Control. Malabar, FL: Krieger Publishing,
simulation modelling. Oxford : Blackwell, 1996.
1990.
[4] J.D.McMinn. Extension of a Kolmogorov atmo- [14] C. Theodore and R. Celi. Helicopter Flight Dynamic Simulation with Refined Aerodynamics
spheric turbolence model for time-based simulaand Flexible Blade Modelling. Journal of Airtion implementation. In AIAA Guidance, Navcraft, 39(4):577586, 2002.
igation, and Control Conference, New Orleans,
USA, August 1997.
[15] M.B. Tischler. Digital Control of Highly Augmented Combat Rotorcraft. Technical report 87[5] P. Colaneri M. Lovera and R. Celi. Periodic
A-5, Aeroflightdynamics Directorate, U.S. Army
analysis of Higher Harmonic Control techniques
Research and Tecnology Activity (AVSCOM,
for helicopter vibration attenuation. In AmeriMay 1987.
can Control Conference, Denver, Colorado, June
2003.
[16] J.C. Wilson and R.E. Mineck. Wind-tunnel investigation on helicopter-rotor wake effects on
[6] G. Bonaita M.M. Eshow, D. Orlandi and S. Barthree helicopter fuselage models. Technical
bieri. Results of an A109 Simulation Validamemorandum NASA TM X-3185, NASA Lantion and Handling Qualities Study. Technical
gley, Hampton, Virginia, March 1975.
Report USAAVSCOM 88-A-002, Aeroflightdynamics Directorate (U.S. Army Research and [17] W.Johnson. Helicopter Theory. Dover Publications, New York, 1994.
Tecnology Activity), Agusta SpA and Italian Air
Force/D.A.S.R.S.-R.S.V. , May 1989.

The Modelica Association

384

Modelica 2006, September 4th  5th

Dynamic Modeling and Control of a 6 DOF Parallel Kinematics

Dynamic modeling and control of a 6 DOF parallel kinematics
M. Krabbes Ch. Meiner
Leipzig University of Applied Sciences
Institute of Process Information Technology and Control Systems
Wachterstrae 13, 04107 Leipzig, Germany

Abstract
An object-oriented modeling structure as utilized by
Modelica is well suitable for the simulation of the dynamic behavior of parallel kinematic structures. Especially application of the simulation system DYMOLA
based on this language enables an easy dynamics simulation of parallel kinematics up to creation of inverse
models in the purpose of control. Based on the inverted simulation of closed loop behavior in connecFigure 1: Parallel kinematic machine Black Beetle
tion with a real-time implementation new concepts of
multi-axis control become feasibly. Keywords: model
inversion; inverse disturbance observer; motion con- drive position sensor by an appropriate static and/or
dynamic model. Drive position sensors and based on
trol, parallel kinematic machine
it short control loops remain indispensable for highdynamic performance. Only thus the electrical servo
controllers can be dimensioned sufficiently rigidly,
1 Introduction
which are decentralized in subordinated SISO strucSerial and parallel kinematic structures has been tures.
one of the first and best examples to explain the The model of kinematics connected to the control
new quality of modeling and simulation, which is loops is assumed in particular with PKM normally as
possible by means of the object oriented modeling rigid and decoupled, so it considers only the correlanguage MODELICA and corresponding simulation sponding static behavior. This simplifies substantially
tools like DYMOLA. The non explicitly solved descrip- the necessary steps to its structural design, inverting
tion scheme simplifies the handling of such complex and integration into the control system. Only the exsystems dramatically. However, the philosophy and ar- perimental identification of a machine-individual kinechitecture of Dymola permits also a change of the sig- matics model with the necessary accuracy is further
nal direction through complete closed loop systems. subject of scientific work and is referred as calibration.
So in connection with its real-time abilities, Dymola In contrast to this, development need exists for every
extends his purpose from an analyzing tool by po- of the mentioned steps concerning the dynamic effects
tentials in control design and code generation. This of the open chain: starting at the model design over
can be shown very impressively at an example of a its inverting and control integration up to the experiso called Parallel Kinematics Machine (PKM). This mental identification. Beyond that, the subordinated
hexapod is a 6 DOF movable mechanical system for SISO drive control is to be maintained in face of exhandling or other machining with high structural stiff- tensions by centralized multi-axis controllers. Current
ness and small dead load, because all drives are fixed publications are going to solve these problems by the
mainstream concepts of multivariable control [3, 2].
with the machine frame (Fig. 1).
For the control of almost any multi-dimensionally Utilization of the simulation system Dymola repreactuated production machine the appropriate control sents a promising approach for a more tool based soluarchitecture replaces within the control loop the part tion of these tasks by means of object oriented modelof the kinematic chain behind the respectively last ing based on Modelica. First results of investigations
The Modelica Association

385

Modelica 2006, September 4th  5th

M. Krabbes, Ch. Meissner

to that effect are presented by this contribution.

2

Inverse Models for PKM control

The integration of a dynamic model into the control system of a PKM (as well as any other multiaxis kinematic structure) can be decomposed into two
fundamental problem fields: on the one hand nonideal and load-sensitive tracking behavior Gdrive =
meas /re f = f ({F; }ext ) of the drive positions meas
does arise.
The non-orthonormal action of the
drives expresses itself in unavoidable, but directly
measurable contouring errors. On the other hand
also the elastic dynamics of the structure Gelast =
{Xmeas ; Imeas } / {meas ; {F; }ext } lead to Cartesian position errors of the tool center point (TCP) Xmeas .
These error portions are only model-based assessable
and require imperatively the consideration of external
perturbing loads {F; }ext .
This contribution suggests a compensation of these effects in the described decomposition, whereby common structures and model prototypes are used. Appropriate inverse models of the closed loop system are
used by means of the so called Inverse Disturbance
Observer (IDOB), in order to produce a new reference
signal with an error minimizing pilot control component [1, 7].

inside loop ideal tracking of the drives is effectuated
by an inverting of the position controlled drives. By
implementation of in this case rigidly assumed kinematics all changing inertia effects can be considered
as well as influences of the coupling of the struts and
external perturbing load. Hence, this model is quite accurately and permits a feedback filter Q of high bandwidth for good performance.
For the tracking of the Cartesian position, the overall
system is enclosed by a further IDOB. The ideal coordinates transformation is used here for the inverse
model according to the rigid geometrical model. In order to close the control loop, a measuring signal of the
TCP position is required, which is not actually present
however. Therefore a further, partially inverted model
is used for its estimation, which supplies apart from
the TCP position also the external perturbing force and
torque based on the measurable values of drive position drive and drive load Imeas . In this structure the
outside loop is subject to various restrictions. On the
one hand strong deviations between rigid model G1
rigid
and position controlled plant are possible. Therefore
the outside filter can be dimensioned possibly only
with small bandwidth. One the other hand the overall
system works with the errors of the flexible model, because the structure depends on an approximated control variable.
Also the additional estimated signals are required for
a safe total behavior, since theoretical stiffness values
can be impressed, which would make excessive demands of the machine structure. Therefore reference
inputs with defined, homogeneous compliance are to
be produced by means of this load estimation.

3
Figure 2: IDOB control scheme
The fundamental structure as pictured in figure 2 is
based on a (nominal) inverse plant model and a feedback structure, which approaches within the bandwidth of the (unity gain low pass) filter Q the total
behavior of the series connection of plant G and inverse model G1
N to 1. In the case of IDOB an up 1 produces accurate tracking,
stream model-inverse G
N
because the inverted model behavior is matched to the
real plant. This correction effect makes it possible
to work also at unstable plants with a stable approximated model-inverse [1].
According to the decomposition as introduced above,
IDOB is used cascaded into two structures as in figure
3 based on inverted model components [4]. Within an
The Modelica Association

Modeling of a DOF 6 Laboratory
Machine

The novel PKM named Black Beetle, developed at
HTWK  Leipzig University of Applied Sciences in
cooperation with Fraunhofer Institute IWU [6], offers
the possibility to test quickly new concepts in calibration, control or machining. It is build with six in
one plane pairwise arranged linear drives, which are
respectively joined with the tool mounting by struts
of same length (Fig. 1 and 4). With this mounting a
therein fixed tool or spindle can moved in 6 directions
(DOF 6).
The extreme lightweight construction and the high
process speed causes not negligible tracking errors
and elastic deformations, which enforces a dynamic
treatment in controller design. Realtime-simulations

386

Modelica 2006, September 4th  5th

Dynamic Modeling and Control of a 6 DOF Parallel Kinematics

IDOB TCP position tracking

X refE

X ref

X refQ

1
Grigid

QX

Cartesian
elasticity

{F; }ext

IDOB drive position tracking

 measref

 measQ

QT

1
G drive
{F ;  }ext

 ref

Gdrive  Gelast
Imeas

meas

-

E

position & load
estimation

 meas

GE

X meas

1
G elast

{F ;  }ext

X meas

-

X meas

{F ;  }ext

Figure 3: Cascaded control scheme of a PKM

Figure 4: PKM model visualization.
Figure 5: PKM overall model.
of such a system by means of Dymola offers now an
easy way to do that. The overall model Gdrive  Gelast
(Fig. 5) is able to simulate the six linear drives including their friction effects and integrated controllers as
well as the physical layout in a simplified structure
of struts, which are represented as one-dimensional
spring-damper-systems with mass-point. For this,
many standard models of the Modelica library and a
few own special models are used. Input signals of
this element are the reference trajectories of the drive
controllers and the perturbing load, output signals are
the measurable drive position and force and the actual
cartesian TCP position. The control structure has now
to be completed with inverted and semi-inverted versions of the overall model.
The Modelica Association

4

Derivation of Inverse and SemiInverse Models

As described above the overall model has to be
inverted in different variations. For this, we only have
added some TwoInputs / TwoOuputs - blocks to
the input and output connectors of the overall model,
but nothing else (Fig. 6) The Modelica translator
derives signal directions on its own [4, 5].
In some cases these changes lead to problems
because often derivatives of some expressions are
necessary, which cant be differentiated e.g. in
case of the direction dependent static friction. In
respect of velocity v there is a not derivable discon-

387

Modelica 2006, September 4th  5th

M. Krabbes, Ch. Meissner

measure TCP position signal. A secondary advantage
is that this model can be used as source to apply
homogeneous compliance at the TCP, which relies on
this force / torque measurements. As consequence we
can establish a respective sensitive tool.

5
Figure 6: Inversion example of the overall model.
tinuity of Coulomb friction at v = 0 m/s which is
problematic during model inversion. The solution
is to filter the friction force signal. This filter is
implemented as series of n first order filters with
a overall characteristic of critical damping. Thus
the force-signal can be differentiated n times (see
Modelica.Blocks.Continuous.Critical
Damping-Block). Of course the signal is being
smoothed and is shaped like a hysteresis, but this
can be neglected with a adequately high cut-off filter
frequency.
Three variants of the inverted model (Fig. 2) are
utilized as follows. For use in outer IDOB a rigid
version G1
rigid is generated, which only transforms the
coordinates from Cartesian space to axis configurations space. This system is based on a PKM model,
where simply no dynamic effects will be mentioned.
The inner IDOB loop uses a more detailed inverse
 1 which is intended for drive position
model G
drive
tracking. As described later, the whole drive internal
controller structure, its friction effects and additional
the coupling between the drives and therewith upcoming position dependent loads are mentioned.
Last but not least the TCP position and load estima 1 has been derived. Measured drive
tion model G
elast
positions and currents enable this variant to estimate
a actual TCP position and perturbing loads (force /
torque). Unfortunately using current as drive load
indicator is not appropriately. If the static (Coulomb)
friction force is higher than the required drives force
in hold-up position, the model is not able to determine
the machine load, because the drive will not try to
move in this case and no current is necessary to keep
position. So its recommended to use a more sensible
measuring signal (of virtual sensors), but the concept
remains the same. This inversion variant is primary
used to register the elastic effects of the machine
structure and to provide an in reality not or not easy to
The Modelica Association

IDOB drive position tracking

During the development of the complete DYMOLA
implementation, realization of executable systems has
shown to be a remarkable challenge. In a first step
of development the inner IDOB loop had to be realized. As mentioned, the linear drives are working with
decentralized encapsulated control by means of cascaded PI-velocity and P-position tracking. Caused by
the drive couplings and a changing load, there is no
optimal control configuration as for a single axis with
fixed load. Hence, the aim is to improve the tracking performance, but only by varying the input signal
of the drive controllers using a feedforward element.
This is done as in the IDOB architecture by means of
an inverse model. Because the model will never match
the real linear drives behavior, a feedback loop generates an error minimizing signal.
While all models and their inverse derivatives could
be realized quite easily, the multidimensional connection to the intended control structure in one Dymolamodel overextended all available compilers. Only in
single axis configurations the structure could be verified completely. In this example the performance was
improved by multiple decades with a filter cut-off frequency of 1000 Hz. In this case the plant model and
the inverted nominal model had very different friction
parameters.
The connection of all IDOB elements succeeded only
within Simulink by multiple import elements (Fig. 7).
However, the performance of this implementation is
affected by the required simple fixed step solver and
the necessary input filters in all Dymola import elements in order to get the input signals with sufficient
order of differentiability. With this environment the inner IDOB was tested by a spacial test trajetory (Fig. 8)
and compared with the original control structure and
only feedforward control by the inverse model (Fig.
9). As it can be seen from the absolute error values of
one axis in figure 9 the tracking errors are reduced with
the feedforward model up to 50 %, but with complete
IDOB control the errors are lower than 10 % than before. However, on the other side there are considerable
spikes, which are resulting from chattering of the non

388

Modelica 2006, September 4th  5th

Dynamic Modeling and Control of a 6 DOF Parallel Kinematics

No perturbative load
Perturbative load: 4 kg

Original system
100 %
101 %

Feedforward control
75 %
70 %

IDOB control
12 %
11 %

Table 1: Relative mean error values.

6

Figure 7: Simulink implementation of the inner IDOB
loop.

0.06
0.04

z [m]

0.02
0
0.02
0.04
0.06
0.1

0.05

0

0.05

0.1

0.1

0.05

y [m]

0

0.05

0.1

x [m]

Figure 8: Spacial test trajectory.

ideal friction model in the plant model at velocity zerocrossing . They are also the reason for a quite limited
cut-off frequency of the feedback filter at 50 Hz. Table 1 gives the relation of the summarized mean error
values of all axes over the test trajectory with respect
to the original system. Obviously, the control structure
shows also robust behavior in case of added parameter
differences between plant and inverse nominal model.

Real-time Environment

To control the laboratory machine by this approach,
we need to involve the derived models in a real-time
environment. In this case MATLAB-xPC-Target is
chosen, because it is more easy to integrate a Dymola model into Simulink with xPC-Target real-time
extension. In a capable model, which can be downloaded on a xPC-Target machine, the overall plant
model Gdrive  Gelast is replaced by connections to
the drive controllers of the machine by a SERCOSinterface (signals on left and bottom side). To be able
to use the SERCOS bus from xPC-Target, a appropriate Simulink block was created [6]. The integration
of a Dymola model in a Simulink model is possible
with the interface block provided by Dymola itself.
With some options one is able to compile and link the
Simulink model with the Dymola model translated by
the Dymola translator for a PC-based target.
In order to calculate the complex cascaded control
structure with its different models it is necessary to use
a high performance target machine. Because of realtime purposes also here the model must be calculated
with a fixed step solver. Hence with Dymola one have
to chose the Euler algorithm (if necessary with inline
integration). This fact implies that the calculation does
not converge as good as a variable step solver would
do. However, complete test of cascaded IDOB architecture is still in future work, where the potentials of
real-time optimization have to be developed.

4

x 10
10

7

IDOB control
feedforward control
original

8

Conclusion

6

error [m]

4
2
0
2
4
6
8
0

500

1000

1500

2000
t [ms]

2500

3000

3500

Figure 9: Comparison of tracking errors.

The Modelica Association

4000

This paper presents first practical results of controlling
a laboratory PKM by the approach of IDOB control.
It could be shown, that on the way of generating realtime simulations Dymola is not only an analysis tool
but moreover can be used for powerful control design
and target code generation. While the main domain of
such processing is multi-axis control, further improvements are required in the solution process of tasks with
such high complexity.

389

Modelica 2006, September 4th  5th

M. Krabbes, Ch. Meissner

References
[1] N. Bajcinca and T. Bunte: A novel control structure for dynamic inversion and tracking. IFAC
World Congress 2005.
[2] C. Breche, T. Ostermann, D.A. Friedrich: Control concept for PKM considering the mechanical
coupling between Actors. 5th Chemnitz Parallel
Kinematics Seminar 2006.
[3] B. Denkena and C. Holz: Advanced position and
force control concepts for the Linear driven hexapod PaLiDA. 5th Chemnitz Parallel Kinematics
Seminar 2006.
[4] G. Looye, M. Thummel, M. Kurze, M. Otter,
J. Bals: Nonlinear inverse model for control.
4rd Int. Modelica Conference Hamburg-Harburg
2005.
[5] M. Krabbes, Ch. Meiner: Dynamic modeling of
a 6 DOF parallel kinematics by means of Modelica. 5th Chemnitz Parallel Kinematics Seminar
2006.
[6] Th. Schroder, T. Otto-Adamczak, J. Muller M.
Krabbes: A laboratory 6-DOF parallel kinematic
for evaluation of new methods. 5th Chemnitz
Parallel Kinematics Seminar 2006.
[7] T. Umenco and Y. Hori: Robust speed control of
DC servomotors using modern two degrees-offreedom controller design IEEE Trans. Ind. Electron. 38(5), 363-368, 1991.

The Modelica Association

390

Modelica 2006, September 4th  5th

Modelling of Alternative Propulsion Concepts of Railway Vehicles

Modelling of Alternative Propulsion Concepts of Railway Vehicles
Holger Dittus
Jrg Ungethm
Deutsches Zentrum fr Luft- und Raumfahrt
Pfaffenwaldring 38-40, 70569 Stuttgart
holger.dittus@dlr.de joerg.ungethuem@dlr.de

scope of this work. However, the electric components might also be used to model those vehicles.

Abstract
Hybrid power trains as increasingly used in road vehicles become more and more interesting for railroad
vehicles. Short-distance passenger traffic on nonelectrified lines is a domain where brake energy recuperation might reduce the total energy consumption significantly. In this paper a simulation model of
a light diesel-powered railcar is presented. Model
components are adapted from standard Modelica and
Powertrain library. The potential improvement of
fuel economy regarding different application settings
is evaluated.
Keywords: model, simulation, railroad, power train,
hybrid, energy consumption, drive strategy

1

Introduction

In contrast to road vehicles there were no compulsory emission limits for railroad vehicles in the past.
In the domain of diesel driven railway vehicles there
is only a voluntary emission limitation for nitric oxide and particles by the International Union of Railway (UIC), which is obligatory for its members.
With the beginning of the year 2006 new tightened
up restrictions by the European Union for new and
repowered railcars take effect. Further decrease of
emissions is settled for the year 2012. In this context
effort is also spent on increasing the fuel efficiency
of railcars.
In this work a model for dynamic simulation of diesel driven railroad vehicles is developed. This contains models for driving resistance, longitudinal section of the track, combustion engine, electric motor
and generator, as well as gearboxes. Energy storages
like flywheels and ultracapacitors are implemented
for the simulation of hybrid vehicles.
The component models are combined to exemplary
railcar power train configurations for local and regional traffic. The effect of different power train
configurations and different driving strategies is
demonstrated. Pure electric vehicles are not in the
The Modelica Association

2
2.1

State of the Art
Railway vehicle power trains

In diesel railcars and locomotives hydromechanic or
electric power transmissions are used. For light railcars most often the hydromechanic power transmission is used. The automatic transmission and the diesel engine are frequently adapted from road vehicle
mass products. The electric power transmission consists of the diesel engine, which is rigidly coupled
with an electric generator, and the electric traction
motors. It is most often used in high speed railcars
and heavy diesel locomotives. However, the electric
power train can easily be transformed into a serial
hybrid power train by adding an electric storage
which makes it attractive even for short-distance
railcars.
2.2

Comparison of commercial and rail vehicles

In commercial and public transport vehicles hybrid
power trains are primarily used in two different applications. A significant number of busses for local
urban traffic and light delivery vans, used in post and
express service, are featured with alternative or hybrid power trains, predominantly in the USA. In
most cases, serial or power split hybrid power trains
are in use. In some cases also fuel cells or battery
powered electric drives are in trial and in regular use.
Up to now, hybrid power trains in railroad vehicles
are rare. However, some railroad manufacturer conducted experiments to use energy storages in railroad
vehicles for braking energy recuperation. A current
mass product is the GreenGoat which is a dieselelectric shunt locomotive built by the Canadian
manufacturer Railpower Technology Corp. This lo-

391

Modelica 2006, September 4th  5th

H. Dittus, J. Ungethm

comotive has a traction power of 2000kW and is featured with a 1200Ah lead battery.
Electric brakes for electric and diesel-electric railroad vehicles are well known. Braking energy is either converted into heat by brake resistors or it is fed
back into the contact wire. Electric brakes are used
as service brake because they are wear-free and nonexhaustible.
In the domain of short-distance passenger traffic on
non-electrified lines light railcars with a tare weight
between 23t (e.g. DWA LVT/S) and 120t (e.g.
ALSTOM Corodia LIREX) are in use. A typical example is the RegioShuttle RS1 (former Adtranz, now
Stadler) which has a maximum total weight of 56t.
This railcar is the most commonly used diesel powered railcar in Germany. The power train of this railcar is based on a conventional road bus power train.
2.3

Driving cycles and driving styles

In a typical driving cycle a railroad vehicle is accelerated with the maximum tractive force up to the
admissible maximum speed (acceleration phase).
This speed is kept until short before the next halt
(constant speed phase), where the vehicle is braked
with the maximum service deceleration (deceleration
phase). Changes of the admissible maximum speed
are also realized with maximum acceleration or deceleration. This driving style leads to the shortest
possible travelling time which is possible for a given
vehicle.
The energy saving driving style uses the recovery
margin of the timetable. The recovery margin is
about 5 to 10% of the minimum travelling time and
is considered in timetables to recover delays. It can
be used to reduce the maximum speed or to join a
roll out phase between constant speed and deceleration phase.
2.4

Driving strategies of serial hybrid power
trains

The driving strategy of a serial hybrid power train
determines how each component of the power train
is driven. One category of driving strategies lets the
power of the diesel engine follow the actual power of
the electric traction motor. There is still a variation in
the diesel engine rotating speed possible, which can
be optimized to reduce total fuel consumption. In the
classical diesel-electric power train without any energy storage this is the only possible driving strategy.
Another category of driving strategies decouples the
power of the diesel engine from the actual power of
the traction motor. Obviously, an energy storage is
required in this case. As the working conditions of
The Modelica Association

the diesel engine can be shifted towards its optimum
a lower fuel consumption can be expected.
2.5

Energy storages

Railroad vehicles are commonly built for a lifetime
of 25 to 30 years. The time between two general
overhauls is 8 to 10 years. The huge number of
charge/discharge cycles within this period would
lead to high battery masses to obtain sufficient battery life-time, which makes batteries not yet suitable
for railcar hybrid power trains.
Flywheels are used in railroad applications as stationary energy storage to buffer peak loads of contact
wires. As flywheels are proved to be usable in mobile applications, e.g. road busses, they can also be
used in railroad vehicles. Flywheels are nowadays
built from fibre composite which enables very high
rotation speed and reduces the impact in case of
burst. Flywheels are best for energy storage in the
time-range of several minutes.
Ultracapacitors are known for high power density
and huge number of charge/discharge cycles. They
are already applied in railroad applications for brake
energy recovery (Bombardier MITRAC Energy
Safer).

3
3.1

Modelling of the components
Driving resistance

The driving resistance of a railroad vehicle consists
of the rolling resistance, climbing resistance, drag
resistance, curved track resistance, and acceleration
resistance.

FW = FRoll + FSlope + FDrag + FCurve + Fa
The rolling resistance of a railroad vehicle is small
compared to road vehicles. It is calculated from the
total weight of the vehicle using the rolling resistance coefficient.

r
FRoll = m Vehicle  g  f R  cos(  Slope )

f R = 0.0015K 0.0040
The climbing resistance is calculated from the mass
of the vehicle and the ascent angle. For longer trains
the mass of the train must be described as mass strap,
where the ascent might vary between different parts
of the train. In this work, only short railcars are considered, so the train is treated as a single mass point.
It is common to specify the ascent in tenth of percent.

392

Modelica 2006, September 4th  5th

Modelling of Alternative Propulsion Concepts of Railway Vehicles
railBus

0.7
mu_k
0.6

J=J_TA
brake

friction coefficien mu_k

flange_b

inertia

f lange_a

Schlupf

Figure 1: Model of the driven axle

FSlope

0.2

E

0

1

2

3

4

5

slip velocity v_s in m/s

1
2
  Air  c W  A  v Vehicle
2

The curved track rolling resistance is commonly calculated by an empiric formula. However, there are a
number of different approaches. In this work, a simple formula, which is valid in average cases, is used:

Figure 2: Approximation of friction coefficient
as a function of slip velocity

3.3

Friction and slip between track and wheel

The small friction coefficient between track and steel
wheel makes it necessary to calculate the slip, as acceleration and deceleration might be limited by the
transmittable force in the contact point. Neglecting
track gradient and vertical acceleration of the chassis, the perpendicular force is constant. The maximum friction coefficient is a function of vehicle
speed and track condition. For the acceleration
phase, the approach

r
0,75  m Vehicle  g
=
R Curve

 T, max = k 1 +

The translatory acceleration resistance is calculated
by Newtons law.

Fa = m Vehicle  a Vehicle
The longitudinal section of the track including gradient, curvature data and admissible maximum speed is
read from a data file.

3.2

0.3

0

The drag resistance is assumed to be proportional to
the square of the driving velocity. For longer trains
(esp. freight trains) the lateral air resistance of the
wagons is dominant. For short railcars which are the
focus of this work, the lateral air resistance is not
calculated separately.

FCurve

W

B

0.4

0.1

r
= m Vehicle  g  sin( Slope )
r
= m Vehicle  g  sin(tan 1 (p))

FDrag =

mu_g
C

0.5

k2
k 3 + v Fzg

is commonly used. The values of the constants were
empirically investigated by Curtius and Kniffler.
Even though modern vehicles do achieve higher friction coefficients, these values are still used in vehicle
design to ensure sufficient friction even under worse
conditions.
k1

k2

k3

0,161

2,083 m/s

12,222 m/s

Axles

The models of the axles are one of the main components. They are connected to the model of the chassis. There are models for driven and non-driven axles
which are very similar. The models might be used
for bogies, too. The model of the driven axle is
shown in Figure 1. Its connectors are the abstractions
of the driving shaft and the axle box which transmits
the driving force to the model of the driving resistance. The component Schlupf calculates friction
and slip between the track and the wheel in the contact point. The actual slip is fed as input signal for
the wheel sliding protection and the wheel skid protection.
The Modelica Association

The actual value of the friction coefficient is a function of the actual slip velocity.

v slip = R wheel   wheel  v vehicle
The function K(vslip) is built from a combination of a
2nd order polynomial and an exponential function
(Figure 2). This curve is an approximation of three
different friction mechanisms. In the range 0 to B the
so-called microslip dominates. The friction coefficient is nearly linear to the slip velocity. Between B
and the maximum friction coefficient at C a rapid
alternation of minimal slipping and sticking (slipstick-movement) dominates. For higher values of

393

Modelica 2006, September 4th  5th

H. Dittus, J. Ungethm
IPin

Ri

power

Pmax

Ileak
UPin
P ch

ge
ar

IC

RP

C

UC

operating range

Pdischarge
nb

nmin

speed

nmax

Figure 4: Equivalent electric circuit of the
ultracapacitor

Figure 3: Flywheel operating characteristic
slip velocity, the friction coefficient decreases dramatically leading to a significant heating of the material in the contact point followed by further decrease
of the friction coefficient. In most cases, measured
values for B and W are not available. A reasonable
approach is [1]:


v slip  v slip 
  v slip  v W
 1 
2   C 
K = 
v C  2v C 
 D  exp(-   v ) + 
 v slip > v W

slip


=

T
W - 

T=

2 C
vC

 vW 

1 
v C 


D = ( W -   )  exp(-   v W )
=

   0.1
As input for the wheel sliding and wheel skid protection a variable slip is defined as the ratio:

3.4

v slip
vC

The Modelica Association

Flywheel

While the capacity of a flywheel is determined by
the inertia and the maximum rotation speed of the
wheel, the power is determined by the electric drive.
As a result, a typical characteristic of a flywheel is
shown in Figure 3. Major components of the model
are a map-based electric motor and a standard Modelica inertia. Losses of the flywheel due to air friction,
cooling and the vacuum pump are considered in sum
as function of the rotating speed. To determinate the
status of the flywheel, a state of energy is defined:

Wheel skid and wheel slide protection

In this model, the actual slip is available as input
signal for the skid and slide protection. This enables
the implementation of a perfect slip and slide protection. In reality, in most cases only the wheel rotating
speed is available. However, the internals of the skid
and slide protection are beyond the scope of this
work. For the aim of energy consumption prediction
the approach of a perfect controlled system is sufficient. The skid protection reduces the driving power
if the slip exceeds 0.8 until zero at slip 1.0. The slide
protection works analogue in reducing the brake
force.

Internal combustion engine

The model of the internal combustion engine is a
modified map-based model from the Modelica PowerTrain library. Apart from the stationary characteristic map the fuel consumption at idle speed is
needed. As there is no specific data available an empirical formula is used. As a rule of thumb, a diesel
engine needs in idle conditions 4mg of fuel per work
cycle per 500 cm displacement. The engine friction
is determined using a Willans curve methodology
[3].
3.6

W
 0.95
C

slip =

3.5

SoE =

3.7

n  n min 
n max   n min 

Ultracapacitors

The model of the ultracapacitors is an implementation of the model by van Mierlo et al in [4]. The ultracapacitor is reduced to the equivalent circuit
shown in Figure 4, which can easily be modelled
using standard components. Corresponding to the
flywheel a state of energy is defined:

394

Modelica 2006, September 4th  5th

Modelling of Alternative Propulsion Concepts of Railway Vehicles

SoE =

4

4.2

U C   U min 
U max   U min 

Control Strategies

The control strategy of the vehicle is divided into
three layers. The first layer controls the higher-level
functions of the vehicle independently from the
power train components. It controls the velocity of
the vehicle and communicates the desired acceleration or deceleration to the second and third control
layers. The second layer manages the distribution of
power and energy among the different power train
and storage components. The third layer acts on the
level of single components and controls their operation status depending on the desired power.
4.1

First control layer

The first control layer defines the way of driving implemented in the control strategy. The general aim of
the control strategy is to achieve the shortest driving
time. This means maximum acceleration until the
speed limit is reached followed by a section driven
with constant speed. Each change in the speed limit
leads to maximum operational acceleration or deceleration. When approaching the next stop the vehicle
is decelerated with the maximum operational braking
force.
The first control layer uses three different states during an operational cycle. The first state is the driving
state, which is used during acceleration and normal
driving. In this state, the desired velocity given in the
track description is controlled by a PI-Controller.
When the vehicle reaches a certain distance to the
next stop the state controller switches to the second
state and the deceleration phase starts. This distance
is dynamically calculated by means of the maximum
operational deceleration and the current velocity of
the vehicle. A PI-controller controls the braking signals for the power train components and, if needed,
for the wheel set brakes. When the velocity reaches
zero at the stopping point given in the track description the state controller switches to the third state.
After a predefined stop-time the next operational
cycle starts and the state controller automatically
switches to the driving state.
The current state is provided to the other control systems via the signal bus of the vehicle. Therefore
three Boolean signals are used which are called driving, braking and halt.

The Modelica Association

Second control layer

The second control layer determines the current electrical power of each component of the electrical
drive train and storage system. In the dieselhydraulic power train there is no choice which component has to deliver the required power. In this case
the second control layer is not necessary; the power
demand is transmitted directly to the controller of the
internal combustion engine (DH).
In the case of the diesel-electric power train two operating strategies for the energy management are discussed. The first one (DE1) is based on the assumption that the internal combustion engine operates intermittently in its most efficient operating point [8].
If the SoE of the storage is greater 70 %, the ICE is
switched off. As soon as the SoE-level falls short of
25 % the ICE is switched on again. The electrical
energy is stored in the flywheel or delivered directly
to the driving motors. The operation in this manner
requires an energy storage with high power performance to ensure the delivery of the requested power
when the ICE is stopped. On the other hand the
power capability helps reducing fuel consumption
due to the fact, that great amounts of braking energy
can be recuperated.
The second strategy (DE2) assumes that the ICE runs
permanently on a characteristic curve with low fuel
consumption. In this case, the operating point of the
engine depends on the current power demand of the
first control layer. Whenever high power is needed,
the engine runs faster and the generator demands
more torque. In times of low power demand, engine
speed decreases. The energy storage is primarily
used to buffer braking energy; as a secondary effect
it helps levelling out the engine dynamics.
4.3

Third control layer

The third control layer is implemented in each component. It controls the way how the requested power
is distributed or stored, i.e. for the ICE the point or
characteristic curve of operation. As this is very specific for the different components, it is not discussed
any further here.

5

Simulation results

In the simulation three power train variants are compared. The first one is the model of the dieselhydraulic (DH) power train. The others are dieselelectric power trains with identical component parameters. There is only a difference is in the control

395

Modelica 2006, September 4th  5th

H. Dittus, J. Ungethm

strategy. The main parameters of the railcars are
given in the table below.
Vehicle mass
Engine power

DE

DH

54.2t

51.3t

celeration, this force is temporarily up to ten times of
the sum of the other forces.

2 x 257kW

Flywheel usable capacity

4.5kWh

-

Flywheel max. power

500kW

-

Figure 5 shows the structure of the DE-Model with
two diesel-electric generators and two electrically
driven axles which are mechanically connected to
the driving resistance model. The DC voltage link
connects the electrical components like flywheel,
braking resistance and auxiliary equipment. The controllers manage the flow of energy within the electrical and mechanical system.

Figure 6: Resistance forces simulated with the
DH-model

Figure 7: Acceleration force of the DH-model:

Figure 5: Model of the diesel-electric power train
The three different power train systems are simulated
on a test track, which is a short sequence of a mountainous track with relatively low speed levels. The
admissible maximum speed is 80km/h, the slope is
up to 25. There are three stops within the route.
Figure 6 shows the track related resistance forces for
the diesel-hydraulic railcar. The rolling resistance
F_Roll is almost constant, while the drag resistance
F_Drag is obviously varying with vehicle velocity.
The slope resistance is the most significant force and
is by far the dominant resistance force on parts of the
track. Compared to the other resistance forces, the
force F_Curve due to the curvature of the track is
relatively small. Figure 7 shows the acceleration
force F_a. As the railcar travels with maximum ac-

The Modelica Association

Figure 8 compares the vehicle speeds of the two diesel-electric variants and the diesel-hydraulic railcar.
There are slight differences in the time needed to
reach the last stop. The DH is the fastest, while the
DE1-variant needs about 12 seconds longer to accomplish the track. At t = 600 s the velocity of the
three variants differs significantly. Although the two
DE-railcars are driven by electric motors with the
same power, they dont achieve the same velocity.
This is the result of the different control strategies. In
the DE2 variant the power of the driving motors is
limited by the controller of the energy management.
This is done because the amount of energy in the
flywheel is depleting even though the ICEs are running at full power. Eventually this reduction of motor power leads to the longer driving duration of this
variant.

396

Modelica 2006, September 4th  5th

Modelling of Alternative Propulsion Concepts of Railway Vehicles

Differences between the DE-variants are also in the
amount of power the flywheel must be capable of.
Figure 10 shows the power curves for both variants.

Figure 8: Comparison of the vehicle velocities
Figure 9 illustrates the state of energy SoE of the
flywheel. Obviously the utilisation of the storage is
much higher with the DE1-strategy. This leads to
greater amounts of energy stored in and recovered
from the flywheel. The capacity of the storage seems
to be a good choice for the DE1 variant, while the
DE2 variant does not necessarily need such a big
storage. In this variant at least 25 % of the capacity is
unused. While it is easily possible to determine a
well-sized capacity for the DE2-variant, it is difficult
to find the correct capacity of the DE1-variant. In the
end, the capacity is responsible for the on/off-timing
of the ICE. Especially if the ICE runs while the traction motors need power, the energy efficiency of the
system rises. Instead of storing the electric energy in
the flywheel with conversion losses, it is instantly
used by the traction motors with higher overall efficiency. An optimisation of the storage capacity
strongly depends on the driving cycle, the SoE at
start and the on/off-timing of the ICE.

Figure 10: Power at the flywheel
While the DE1 variant needs a flywheel with power
up to 500 kW, the DE2 variant could be equipped
with a flywheel with less power. The DE2 strategy
covers a great amount of the demanded power by the
ICEs, the DE1 variant prefers the storage to cover
the vehicles power requirements.
The energy flow within the electrical system of the
DE-models is shown in Figure 11 and Figure 12. The
energy flows of the generators and the traction motors are slightly different, but in the same dimension.
The differences in the flywheels energy are remarkable. As already discussed with the state of energy
curve, the DE1 variant stores plenty of energy in the
flywheel. The figure shows that not only the recuperated braking energy is stored but also a great
amount of the electrical energy produced by the diesel-generators.

Generator

33,8 kWh

16,7 kWh

20,6 kWh

Flywheel

DC voltage
link

Flywheel
auxiliaries
0,8

h
kW

27,0 kWh

h
kW

The Modelica Association

,9

Figure 9: State of Energy of the flywheel

Brake
resistors

10

1,1 kWh

10,0 kWh

Traction
motors

Auxiliary
equipment

Figure 11: Electrical energy flow of DE1

397

Modelica 2006, September 4th  5th

H. Dittus, J. Ungethm

The DE2 variant does not even store all the recuperated energy. Partly the braking energy is consumed
by the auxiliary equipment, and some parts are transformed to heat in the brake resistors.

9,0 kWh

7,0 kWh

Flywheel

Generator

31,8 kWh

DC voltage
link

6

Flywheel
auxiliaries
0,8

h
kW

28,4 kWh

Traction
motors

,8
10
h
kW

0,3 kWh

10,6 kWh

Brake
resistors

teristics and vehicle parameters. Especially the
dominance of the slope resistance requires customizing the control strategy by needs of the line topology.

Auxiliary
equipment

Figure 12: Electrical energy flow of DE2
The fuel consumption of the three variants is shown
in Figure 13. The best energy efficiency is obtained
with the diesel-electric variant DE1, which uses the
intermittent control strategy for the ICE. The fuel
consumptions of DE2 and DH are close together at
the last stop. During driving there are partly strong
differences between all strategies.

Conclusions

The model presented in this work is a starting point
of hybrid railcar simulation in Modelica. It turns out,
that a number of models that were primary developed for automotive simulations can be adapted to
railroad vehicles. Therefore the effort to set up the
simulation is moderate. The simulation gives an idea
of the energy saving potential of hybrid power trains
even in railroad vehicles. However the shown serial
hybrid is the most simple hybrid power train, parallel
or power-split hybrids should be investigated in further. As the simulations with the different control
strategies demonstrated, there is a strong influence of
the control strategy on the achievable fuel consumption of a predefined vehicle.

References
[1]

[2]
[3]

[4]

[5]
Figure 13: Fuel consumption of one dieselengine
[6]
The comparison of the fuel consumption and the energy flows in the DC voltage link shows that DE1
consumes less fuel than DE2. This is especially remarkable because the amount of electrical energy
produced by the generator is greater with DE1 than
with DE2. This result proves the enhanced efficiency
of the ICE as a consequence of the usage in its most
efficient operating point. It has to be stated that these
conclusions are specific for the chosen line characThe Modelica Association

398

Wende, D. Fahrdynamik des Schienenverkehrs. B.G. Teubner Verlag/GWV Fachverlage GmBH, Wiesbaden, 2003
Filopovic, Z. Elektrische Bahnen. Springer
Verlag, Berlin, Heidelberg, New York, 1992
Kuhlmann, P. Grundlagen der Verbrennungsmotoren, lecture notes Unversitt der
Bundeswehr, Hamburg, 1990
van Mierlo, J., van den Bossche, P.,
Maggetto, G. Models of energy sources for
EV and HEV: fuel cells, batteries, ultracapacitors, flywheels and engine-generators.
Elsevier Journal of Power Sources No. 128,
2004
Wallentowitz, H. Lngsdynamik von Kraftfahrzeugen Schriftenreihe Automobiltechnik
Forschungsgesellschaft Kraftfahrwesen Aachen mbH, 2002
Ghring, M. Betriebsstrategien fr serielle
Hybridantriebe Dissertation, RWTH Aachen,
1997

Modelica 2006, September 4th  5th

Modelling Automotive Hydraulic Systems using the Modelica ActuationHydraulics Library

Modelling Automotive Hydraulic Systems using the Modelica
ActuationHydraulics Library
Peter Harman
Ricardo UK Ltd.
Leamington Spa, UK
Peter.Harman@ricardo.com

Abstract

2.1

This paper describes applications in the automotive
industry which require modelling and simulation of
hydraulic systems and introduces a new library developed specifically for use in these applications.
Issues encountered whilst modelling hydraulic systems are discussed, from the numerical issues of
simulating mixed hydraulic-mechanical systems to
the more practical aspects such as the availability of
parameter data for valve models.

Power Assisted Steering

Power steering is standard on virtually every road
car, racing car and off-highway vehicle, and in the
majority of cases is a hydraulic system. A spool
valve, either translational or rotational, translates the
deflection of the steering wheel relative to the steering rack into a hydraulic flow into a piston to provide
additional steering force. The dynamics of the hydraulic system affect the response of the vehicle to
the driver input and therefore simulation is used to
predict the effect of parameter changes such as the
spool geometry.

A selection of case studies are described.
Keywords: hydraulics, automotive, power steering,
transmission actuation, lubrication, braking systems,
active 4wd

1

Introduction

An increasing number of automotive systems use
some form of electro-hydraulic control, and with
increasing levels of complexity in these devices
simulation is an important part of the development
process. Modelica provides an ideal environment for
such simulation as it is necessary to include mechanical, electrical and hydraulic components in the
same system, utilising Modelicas multi-domain capabilities.

2

Applications of Hydraulics Simulation in Automotive Industry

Key applications of hydraulics within automotive
engineering are in the power steering, transmission,
driveline and braking systems.
The Modelica Association

Figure 1: Power steering spool valve model
Figure 1 shows a Modelica model of a spool valve
within a power steering system model. The spool
model is built up of submodels, each representing
one flow path through the valve. These SpoolPort
models interface with translational mechanics components from the Modelica standard library, and the
flow through each is a function of the spool displacement, the pressure drop and the port geometry.

399

Modelica 2006, September 4th  5th

P.A. Harman

This makes it easy to quickly build complex spool
arrangements for this type of application.

2.2

Transmission Actuation and Lubrication

The trend in transmission technology is towards actuated transmissions such as Automated Manual
Transmissions (AMT) and Dual-Clutch Transmissions (DCT or DSG), and these plus the continuation
of development of conventional Automatic Transmissions and Continuously Variable Transmissions
(CVT) lead to an overall growth in hydraulically actuated systems. Development of valve-blocks and the
control system requires combined simulation of the
hydraulics and the transmission dynamics [1]. These
transmissions often also have lubrication systems
combined for which simulation is required to determine flows at each outlet.

2.3

Likewise the effect of antilock braking systems and
brake force distribution on vehicle dynamics can be
studied.

Data Availability

The ideal source of data is a disassembled component as in figure 2, as specifying orifice areas for
valves is not necessarily compatible with the data
made available by manufacturers. Data for hydraulic
components is available in a wide range of forms,
such as flow areas, lookup tables of flow against
pressure or special forms such as the Lohm unit devised by Lee Hydraulics. The ActuationHydraulics
library uses replaceable flow-models for orifice
flows, each compatible class defines flow as a function of pressure drop and parameters according to the
data available.

Figure 2: Typical hydraulic spool
For some components a pressure drop across the
component is the only data available. With some
modelling tools it would be necessary to reverseengineer an orifice size and flow coefficient to
achieve this pressure drop. However the ActuationHydraulics library exploits the acausal capabilities of
Modelica and allows the choice of a flow-model
where pressure drop is specified as a function of
flow.

Issues with Hydraulic Simulation

A library previously developed [3] in Simulink has
been successfully used for a number of projects, but
requires an expert user. Lessons learnt from this
work which have been applied in the ActuationHydraulics library include accounting for numerical
issues and the availability of parameter data.

3.1

3.2

Driveline Control and Braking Systems

Active four wheel drive systems and Torque Vectoring systems for the enhancement of vehicle dynamics are increasingly popular. Development of these
systems requires combined simulation of driveline
components and vehicle dynamics, [2], and further
extending this with models of the hydraulic system
allows the effect of hydraulic dynamics on the vehicle behaviour to be studied.

3

terconnected components with non-return valves and
shuttle valves. These characteristics exploit well the
capabilities of Modelica.

4

ActuationHydraulics Library

The modelling library was developed specifically for
the applications described and with the aim of overcoming the issues described. Although hydraulics
libraries in Modelica already existed [5,6,7], these
were either unavailable or did not fulfil all the needs
of the target applications.

Numerical Issues

Numerical issues in hydraulic simulation are well
discussed in [4], small volumes around valves lead to
numerically stiff systems and non-linear systems of
equations containing discontinuities arise due to inThe Modelica Association

The library components are isothermal, the effects of
temperature can be studied by running the models
with different fluid parameters, but thermodynamic
effects within the fluid are not taken into account.

400

Modelica 2006, September 4th  5th

Modelling Automotive Hydraulic Systems using the Modelica ActuationHydraulics Library

All components in the library extend from a base
class, PartialHydraulicComponent, which defines an
outer instance of HydraulicsGlobal. This allows
the fluid used in the model to be selected in one location and works in a similar manner to the World
component within the Modelica MultiBody library.
A wide range of components are included in the library, including valves, pipes, accumulators, pumps
and actuators.

4.1

Valves

As described earlier, complex spool arrangements
can be modelled, with variation of parameters as illustrated in figure 3. Flow through spools utilise the
improved flow formula described in [8].
Port overlap / underlap

Effect of spool geometry
on valve dynamics

Spring rates

Figure 4: Diagram and Icon of Variable Swashplate
Pump model

Pilot area

Figure 3: Modifiable parameters for spool modelling
Simple valves are modelled using the data available
as described earlier. A range of simple valve types
such as non-return valves are included.

4.2

Pipes and Accumulators

Models of pipe flow including inertia, compressibility and friction effects, including pipe wall expansion
[9], are included. Lumped or distributed models can
be used depending on the level of detail required.
Gas-charged and spring-charged accumulator models
are also included.

4.3

Flow ripple due to the number of pistons, teeth or
lobes in the pump can be included, this can be useful
for analysing noise and vibration aspects of hydraulic systems and ensuring volumes around pumps
provide enough damping of these vibrations. Figure
5 shows the different magnitudes and frequencies of
ripple for different pump configurations.

Figure 5: Pump flow ripple against angle for range of
pumps with different numbers of pistons / lobes

Pumps

The pump and motor models include volumetric
losses due to leakages and compressibility, and mechanical losses due to friction and inertia. Variable
swashplate models are included, as shown in figure
4.
The Modelica Association

4.4

Actuators

Translational and rotary actuators with inertia, friction, fluid compressibility and leakage effects are
included.

401

Modelica 2006, September 4th  5th

P.A. Harman

Actuator, pump and spool components all interface
with the Modelica standard library mechanics components, allowing connection to mechanical models
from other libraries. Current signals to valves are
applied using interfaces from the Blocks package
within the standard library.

5

Case Studies

Increased Range

These case studies are recent typical uses of the library.
5.1

Reduced Hysteresis

Continuously Variable Transmission

The most common form of Continuously Variable
Transmission (CVT) utilises hydraulic actuators on
conic variators to control the radius of a belt on
either variator.
Figure 6: Increased controllability of CVT
A CVT of this design was simulated using the ActuationHydraulics library in order to identify solutions to improve the poor controllability of the pressure at the primary variator. The relationship between current duty ratio at the solenoid valve and the
pressure at the variator was validated against test
data.
A parameter study was performed for spring rates
and port overlaps in the main spool valve, resulting
in a 100% increase in duty ratio range over which
pressure is controlled and 25% reduction in hysteresis.

5.2

Dual Clutch Transmission

Simulation using the ActuationHydraulics library
was performed on the actuation and lubrication systems for the 750Nm 7 Speed Dual Clutch Transmission developed for the Chrysler ME4-12 vehicle.

Figure 7: Chrysler ME4-12 with Ricardo DCT
A key aim during design of the transmission was to
minimise complexity and cost of the hydraulic system in order show a transmission suitable for mass
production. One result of this was the use of a shared
pump between the lubrication system and the gearshift actuation system. The sizing of the pump and
The Modelica Association

402

Modelica 2006, September 4th  5th

Modelling Automotive Hydraulic Systems using the Modelica ActuationHydraulics Library

accumulator needed to be sufficient to allow the vehicle to change gear sequentially from 7th through to
1st whilst undergoing maximum deceleration at the
minimum engine speed and hence minimum pump
flow. It also had to provide enough lubrication flow
to each of the bearings in the transmission.

References
[1]

[2]
1LubeCircuit1.SprayBar4.flows[1]
2LubeCircuit1.SprayBar4.flows[2]
3LubeCircuit1.SprayBar4.flows[3]
4LubeCircuit1.SprayBar4.flows[4]
5LubeCircuit1.DiffHousing.flows[1]
6LubeCircuit1.DiffHousing.flows[2]
7LubeCircuit1.ReverseIdlerMesh.flows[1]
8LubeCircuit1.SprayBar2.flows[3]
9LubeCircuit1.SprayBar2.flows[2]
10LubeCircuit1.SprayBar2.flows[1]
11LubeCircuit1.ReverseIdlerShaft.flows[1]
12LubeCircuit1.SprayBar1.flows[2]
13LubeCircuit1.SprayBar1.flows[1]
14LubeCircuit1.OutputShaftCentreBearings.flows[2]
15LubeCircuit1.OutputShaftCentreBearings.flows[1]
16LubeCircuit1.TaperBearings.flows[2]
17LubeCircuit1.TaperBearings.flows[1]
18LubeCircuit1.DiffSupportBearings.flows[2]
19LubeCircuit1.DiffSupportBearings.flows[1]
20LubeCircuit1.SprayBar3.flows[1]
21LubeCircuit1.SprayBar3.flows[2]
22LubeCircuit1.SprayBar3.flows[3]
23LubeCircuit1.SprayBar3.flows[4]
24LubeCircuit1.SprayBar3.flows[5]
25LubeCircuit1.SprayBar3.flows[6]
26LubeCircuit1.SprayBar3.flows[7]
27LubeCircuit1.OutputShaft.flows[1]
28LubeCircuit1.OutputShaft.flows[2]
29LubeCircuit1.InputShaft.flows[1]
30LubeCircuit1.InputShaft.flows[2]
31LubeCircuit1.SpiralBevel.flows[1]
32LubeCircuit1.SpiralBevel.flows[2]
33LubeCircuit1.SprayBar4.flows[5]
34LubeCircuit1.SprayBar4.flows[6]
35LubeCircuit1.SprayBar4.flows[7]

2.8
2.6
2.4

Pressure / bar

2.2
2
1.8
1.6
1.4
1.2
1
6000
5000

[4]

35
4000

30
25

3000

20
2000

15
10

1000
Engine Speed / rpm

5
0

0

Figure 8: Lubrication flow against shaft speed at
each bearing
The simulation was used, together with optimisation
techniques, to define the pump and accumulator sizes
and the sizes of each hole in the lubrication spray
bars.

5.3

Formula 1 Hydraulics

[5]

[6]

[7]

Calculation of component sizes for F1 hydraulics is
not a straightforward task as the pump and accumulator provide fluid for the gearshift, clutch, throttle,
differential, power steering and fuel flap. A solution
for this and control system testing and development
has been provided by using Modelica simulation
models which can either connect to race simulations
or be driven by replays of test data, allowing engineers to study the effects of parameter changes.

6

[3]

[8]

[9]

Brandao, F., Harman, P., An Integrated Approach: Ricardo Transmission and Driveline Simulation Library, IMechE IPDS 2006
Brandao, F., Barnbrook, R., Shuttlewood, D., An Integrated Approach
Using IPG CarMaker amd Dymola
for Transmission and Driveline
Modelling, IPG User Conference
2006
Harman, P., Dynamic Analysis of
Transmission Hydraulic Systems,
2004, Ricardo Technical Support
Agreement (TSA) presentation
IMAGINE SA Technical Bulletin
114: Numerical Challenges posed by
Modeling Hydraulic Systems, 2000
Beater, P., Otter, M., Multi-Domain
Simulation: Mechanics and Hydraulics of an Excavator, Proceedings of
the 3rd International Modelica Conference 2003
Tiller, M., Development of a Simplified Transmission Hydraulics Library based on Modelica.Fluid,
Proceedings of the 4th International
Modelica Conference 2005
Beater, P., Modeling and Digital
Simulation of Hydraulic Systems in
Design and Engineering Education
using Modelica and HyLib, Modelica Workshop 2000
Ellman, A., Piche, R., A Modified
Orifice Flow Formula for Numerical
Simulation of Fluid Power Systems,
Watton, J., Fluid Power Systems,
Prentice Hall, 1989

Conclusions

The ActuationHydraulics library provides a solution
for all automotive hydraulics applications, with connectivity to other Modelica packages. Successful use
of the library has been shown for a number of applications.

The Modelica Association

403

Modelica 2006, September 4th  5th

P.A. Harman

The Modelica Association

404

Modelica 2006, September 4th  5th

Vehicle Model for Transient Simulation of a Waste-Heat-Utilisation-Unit Containing Extended PowerTrain and Fluid
Library Components

Vehicle model for transient simulation of a waste-heat-utilisation-unit
containing extended PowerTrain and Fluid library components
Max Eschenbach
Jrg Ungethm
Dr. Peter Treffinger
German Aerospace Center; Institute of Vehicle Concepts
Postfach 800320, 70503 Stuttgart
max.eschenbach@dlr.de joerg.ungethuem@dlr.de peter.treffinger@dlr.de

Abstract
DLR Institute of Vehicle Concepts uses MODELICA for vehicle simulation. One major application
is the power train analysis with regard to fuel consumption, emission and performance. The multidomain approach of MODELICA has already been a
benefit when describing alternative vehicle concepts
like fuel cell vehicles and hybrid vehicles.
This paper describes the first approach modelling
another concept of low-emission vehicles, i.e. a vehicle powered by an internal combustion engine
(ICE), where a waste-heat-utilisationunit in the exhaust system is applied. The recovery and conversion
of waste heat in the exhaust system of ICE-powered
vehicles is very attractive, because as a rule of thumb
about one third of the fuel energy is emitted with the
exhaust to the ambient. There are several approaches
to convert exhaust energy into useful energy, e. g.
applying a thermal engine, which is powered by the
exhaust. Another possibility are thermoelectric devices, which convert heat into electricity. However,
in almost all concepts for waste heat utilisation a
heat exchanger in the exhaust system has to be integrated and additionally a heat sink has to be provided
to run the complete process.
As an example for a waste-heat-utilisation-unit a
thermoelectric device is considered in this paper. To
predict the performance of such a thermoelectric device in vehicle operation the PowerTrain library [1]
has been extended with elements of the Fluid library
for representation of the exhaust system. Most important a special heat exchanger model has been developed which describes the thermoelectric device.
The paper gives an overview over the modelling approach of the complete system and the component
models respectively. Finally, first results of simulation runs are given.
Keywords: model, dynamic simulation, waste heat
recovery, thermal management

The Modelica Association

1

Modelling approach

The vehicle model has been based on components of
the PowerTrain library. Figure 1 shows the object
diagram of the vehicle model.

Figure 1: Object diagram of the PowerTrain vehicle
model

It consists of the following main parts:
1. the vehicle model, including driver, engine,
drivetrain, axle, and vehicle resistance as known
from the PowerTrain examples.
2. the engine HeatModel, which determines the
heat flow to the exhaust system and the cooling
system (see heat flow connection to the respective sub systems). It also provides mass flow rate
of the exhaust.
3. the cooling system, with its connection to the
cooling system as a thermal heat flux.
4. the exhaust system, whereby actually no direct
fluid connection to the engine has been realized.
Instead the exhaust flow is generated in an exhaust gas generator as a first component of the
exhaust line by using the heat flow, air and fuel
mass flow provided by the engine.
Several signals from the bus are used as well in the
physical models, e.g. the vehicle speed is taken into

405

Modelica 2006, September 4th-5th,2006

M. Eschenbach, J. Ungethm, P. Treffinger

account when calculating heat transfer from the exhaust pipes to the ambient.

1.1

Engine Model

As already indicated above the engine model must
provide the heat flow to the exhaust system and the
cooling system. Having in mind that the waste-heatutilisationunit is installed in the exhaust stream also
the flow dynamics of the exhaust stream could be of
interest. However, at the current stage of the development it was decided to concentrate on the thermal
aspects. Precise determination of the heat flows in
internal combustion engines by simulation requires
CFD-Modelling of the coolant flow through the engine when the boundary conditions of the combustion are known to determine local velocities and heat
transfer coefficients. This is mainly done during engine development and out of the scope of this work.
To obtain thermal engine models for thermomanagement issues still semi-empirical approaches
are used. These are based on simplified distributed
mass models of the engine.

total heat release into the cooling system, which was
already implemented, did not fulfil the special requirements of this application. The HeatModel was
therefore refined regarding the distribution of the
different thermal flows.
For instance the engine temperature is now considered when determining the heat flow into the engine
coolant. A simplified engine heat up is thereby considered in the heat model. In [2] it is stated that a
temperature rise of the cylinder wall temperature
from room temperature up to 150C reduces the heat
flux through the walls by approximately a third.
Convective heat flux over the engine surface has
been neglacted so far. This holds, when low power
cycles, e.g. the New European Drive Cycle (NEDC)
are investigated. The new approach ensures that the
fuel energy is either converted into mechanical
energy, a heat flux into the coolant system (by
friction or conduction) or released as sensible heat
with the exhaust gas.
1.2

Exhaust system model

Figure 3: Scheme of exhaust system

Figure 2: Thermal engine model with 4 masses

Figure 2 shows as an example the scheme of a thermal engine model with 4 masses. Road and roller
dynamometer testing are used to determine the different thermal mass allocations by dynamic testing.
Measurements on engine test benches can be used to
quantify specific heat sources, e.g. by a successive
component strip down, to identify the component
friction as a heat source into the oil. As a result the
energy transferred in cooling system and engine oil
can be described depending on engine rotational
speed and load. The engine-speed depending HeatModel included in the PowerTrain library has been
extended to consider these dependencies. Thereby it
turned out that the quadratic approximation of the

The Modelica Association

Figure 3 shows a schematic representation of an exhaust system with a waste-heat-utilization-unit integrated. First element is the exhaust flow from the
internal combustion engine into the manifold. The
behavior of the exhaust system regarding thermal
and flow characteristic is accounted for by combining components like pipes and catalysts. The position
of the waste-heat-utilization-unit within the exhaust
line is important, because the temperature of the exhaust decreases along the exhaust line due to heat
release to the ambient.
Due to the requirement to reach the operation temperature of the catalyst quickly, such a device will be
most likely placed behind the catalyst. The heat
transfer from the exhaust line to the ambient depends
on the geometry of the exhaust line, the geometry of
the air ducts around the exhaust line, the ambient
temperature, the velocity of the vehicle and many
more parameters. It was out of the scope of this
study to implement a complex model, which takes all
these effects in account.

406

Modelica 2006, September 4th-5th,2006

Vehicle Model for Transient Simulation of a Waste-Heat-Utilisation-Unit Containing Extended PowerTrain and Fluid
Library Components

A correlation derived from experiments [3], which
gives the heat release of exhaust line components to
the ambient as function of the vehicle velocity has
been applied to the components of the fluid library
(e.g. pipe).
1.3

Waste-heat-utilization-unit

Figure 4 shows a scheme of the waste-heatutilisation-unit. It is basically a heat exchanger,
where heat is transferred from the hot exhaust gas to
the engine coolant, whereby a temperature difference
over the thermoelectric material accurs, which is
placed between the walls of the exhaust gas channel
and the cooling channel.

ever, the basic DistributedPipe_thermal-model of
the Fluid library considers only a constant heat transfer coefficient. Therefore a heat transfer correlation
was implemented, which gives the heat transfer coefficient as function of Reynolds- and Prandtl-number,
namely the Gnielinski-correlation [7].

2

Simulation results

The complete simulation model has been tested applying the NEDC, which is equipped with an 80 kWGasoline engine. The parameters of the vehicle
model have been estimated mainly from experimental investigations, which are taken from the literature
[8]. The parameters of the waste-heat-utilisation-unit
have been estimated by analyzing similar devices,
which have been built for automotive application [9].
140

velocity / (km/h)

120

Figure 4: Scheme of the waste-heat-utilization-unit.

100
80
60
40
20

Depending on the Seebeck-coefficient and the
temperature difference a voltage is generated.
Uth  (n + p) (Th  Tc) with
n/p abs. of neg./pos. Seebeck-coefficient, V/K
Th/Tc hot/cold side temperature of thermoelectric
material, K
Peltier-Effect and the heat release caused by electric
resistances in the thermoelectric material are taken
into account as proposed in [4]. Basics about
thermoelectrics can be found e.g. in [5]. Traditional
thermoelectric materials are PbTe, Bi2Te3, SiGe,
BiSb or FeSi2. Thermoelectric devices based on
these materials allow efficiencies  i.e. electrical
power divided by the heat flow dragged through the
thermoelectric material - of around 5 %, whereby
temperature differences around 200 K are required.
Due to recent innovations in thermoelectric materials, which promise higher efficiencies  higher than
10 % - their application for waste heat conversion is
gaining more interest [6].
As indicated in figure 4 the waste-heat-utilisationunit is modelled as a distributed exhaust heat
exchanger, which contains thermal masses and
considers heat conduction between the different
layers and along the layers as well. Due to the varying engine loads during the cycle a wide range of
flow velocities on the hot side were observed. HowThe Modelica Association

0
0

200

400

600

800

1000

1200

time / s

Figure 5: New European Drive Cycle (NEDC).

Figure 5 shows the velocity profile of the NEDC,
which is a relative low power cycle. This leads to a
slow warm up phase.
Most simulations or testing procedures of wasteheat-applications are performed under steady state
conditions at higher engine loads and vehicle speeds,
defining the optimum operation point. This simulation is focused on the dynamic power output under
disadvantageous
conditions
for
waste-heatapplications regarding the lower thermal energy supply to the exhaust system. Under these driving conditions noticeably gradients in cooling and exhaust
temperature lead to a dynamic power output of the
device.
As can be seen in figure 6, which shows the development of the hot (red) and cold side temperature
(blue) over the NEDC, starting from ambient temperature the heat up of the waste heat utilization unit
takes considerable time. A temperature difference
near 100 K is only reached after around 1100s,
where the highest load of the cycle occurs.

407

Modelica 2006, September 4th-5th,2006

M. Eschenbach, J. Ungethm, P. Treffinger

Figure 6: Hot and cold side temperature of the thermoelectric device over the NEDC.

only improve the response time, but also yield to
higher temperature differences.
The effect of a 50 % mass reduction of the wasteheat-utilization-unit on the temperature difference
over the NEDC is shown in figure 8 (top). The
smaller response time is indicated by sharper temperature drops in the periods, when no load is applied in the NEDC. However, also the temperature
difference is considerable higher compared to the
reference waste-heat-utilization-unit with 100 %
mass. Consequently the electrical power output during the complete cycle is higher for the device with
50 % mass (see figure 8, bottom).

The hot side temperature increases almost steadily
over the cycle. The cold side temperature seems to
approach a maximum, which means that the cooling
system comes near to its operation temperature. As
indicated above a temperature difference of around
200 K would be necessary to achieve a good performance of the thermoelectric device, which has
been assumed in this work. The thermoelectric device delivers therefore only a fraction of its specified
electrical power output under nominal conditions.
Figure 7 shows the efficiency of the conversion of
the thermal energy into electricity by the thermoelectric device over the NEDC, i.e. when the temperature
difference shown in figure 6 is applied.

Figure 7: Efficiency of thermoelectric material over
the NEDC (see also figure 6).

The efficiency is negative in the beginning, caused
by a reverse heat flow through the heat exchanger. It
reaches 1,6 % at the maximum, when the highest
temperature differences of that cycle are present.
However, the temperature difference should be even
higher to approach the nominal value of the design
point for this type of device. As we have seen in figure 6, the hot side temperature is almost steadily increasing over the NEDC. Therefore reducing the
mass of the waste-heat-utilisation-unit should not

The Modelica Association

Figure 8: Top: Temperature difference between hot
and cold side of the thermoelectric device with 50%
(red) and 100% (blue) mass over the NEDC;
bottom: Relative electrical power output of the thermoelectric device with 50% mass (red) and 100% mass
(blue) over the NEDC.

The electrical output of the waste-heat-utilizationunit is reduced by the auxiliary power required to
drive the coolant pump and possibly the cooling fan.
An experimental investigation of a vehicle on a roller
dynamometer equipped with a prototype waste-heatutilization-unit showed even negative net power at
low loads, i.e. low vehicle velocities [10].

408

Modelica 2006, September 4th-5th,2006

Vehicle Model for Transient Simulation of a Waste-Heat-Utilisation-Unit Containing Extended PowerTrain and Fluid
Library Components

The reason is the power demand of the cooling
pump, which has been operated continuously over all
load conditions. This coolant mass flow is covered
for an optimal power output at high temperatures.
Considering the following constraints:
1. Maximum temperature of the thermoelectric
modules
2. Boiling temperature of the coolant fluid
a flow controller and an electrical cooling pump
were implemented in the cooling system model. This
allows decreasing the flow rate of the cooling fluid
to a minimum value at low engine loads to avoid
unintentional heat flux into the cooling system at
operation points with negative net power.
Figure 9 shows a comparison of the electrical power
output of the 100 % mass waste-heat- utilization-unit
w/o and with a flow controller. After approx. 750 s
the controller switches from a minimum flow rate to
the maximum flow rate due to rising coolant temperatures.
The electrical power output of the configuration with
controller is behind the configuration w/o controller
for the first 750 s. After applying the optimum flow
rate the electrical power output rises quickly and
reaches even higher values than the configuration
w/o controller, which is due to the conversion of
thermal energy stored in the unit.

3

Conclusions

A model of a vehicle with a waste-heat-utilizationdevice in the exhaust system has been built based on
the PowerTrain library. Therefore some components
of the PowerTrain library have been extended with
respect to the modelling of their thermal behaviour.
Components of the Fluid library have been taken and
improved to describe the exhaust system. Thereby it
was possible to set up a simplified vehicle model.
However, looking on the capabilities of specialised
automotive tools for the simulation e.g. of the exhaust system or the cooling system, the additional
effort to realize more detailed models becomes apparent. Nevertheless the multi-domain approach of
MODELICA allows simulation with one environment and avoids co-simulation.
The usage of the model has been underlined by some
simulation results, whereby the investigation of control strategies with respect to optimised net power
output has been indicated. From the given examples
it can be seen, that a suitable control strategy and
optimized design supports the electric power output .
As already mentioned above the model should be
refined, especially the representations of the exhaust
system and the cooling system are expandable. Having in mind the unsteady electrical power output of
the waste-heat-utilization-unit also the electrical system of the vehicle should be added in order to investigate, whether the power supply fits to the power
demand.

References

Figure 9: Relative electric power of the 100% mass
waste-heat-utilization-unit: a) w/o flow controller (blue
line), b) w flow controller (red line).

Over the complete NEDC the electrical output of the
unit with flow controller is 2% than the one of the
configuration w/o flow controller. However, this is
overcompensated by the reduction of the power consumption of the cooling pump and yields to a higher
net efficiency.

The Modelica Association

[1] Otter, M., Dempsey, M., Schlegel, C.; Package
PowerTrain. A Modelica Library for Modeling and
Simulation of Vehicle Power Trains. Proceedings of
the 1st Modelica Workshop, Lund, Sweden, October
2000, Modelica Association, pp. 2332.
[2] Guzzella, L., Onder, C.; Introduction to
Modelling and Control of Internal Combustion
Engine Systems. Springer-Verlag Berlin Heidelberg,
2004.
[3] Kandylas, I., Stamatelos, A.; Berechnung des
Wrmebergangs
in
Motorabgassystemen.
Motortechnische Zeitschrift (MTZ), Ausgabe
1998-08.
[4] Mller, E.; Thermoelectric materials for waste
heat recovery, linerized thermal sensors and Peltier
cooling. German Aerospace Center (DLR), Institute
of Materials Research, at Steinfurter Keramiktage,
Dezember 2002.

409

Modelica 2006, September 4th-5th,2006

M. Eschenbach, J. Ungethm, P. Treffinger

[5] Nolas, G.S., Sharp, J., Goldsmid, J.;
Thermoelectrics: basic principles and new material
developments. Springer-Verlag Berlin Heidelberg,
2001.
[6] Venkatasubramanian, R., Sivola, E., Colpitts, T.;
Thin-film thermoelectric devices with high roomtemperature figures of merit., Nature Magazin, 2001
Volume 413, pp. 596-602.
[7] VDI-Wrmeatlas, 7.Auflage, 1994, Abschnitt Gb
[8] Poruba, C., Seider, G., Krner, M.;
Energiebilanierung im Entwicklungsprozess von
Motoren. Wrmemanagement des Kraftfahrzeuges
V, Haus der Technik Fachbuch, Dsseldorf 2006, pp.
54-80.
[9] Vzquez, J., Sanz-Bobi, M.A., Palacios, R., Arenas; A.: State of the Art of Thermoelectric Generators Based on Heat Recovered from the Exhaust
Gases of Automobiles. Universidad Pontificia
Comillas Escuela Tcnica Superior de Ingeniera.
Instituto de Investigacin Tecnolgica, Madrid,
Spain.
[10] Thacher, E.F., Helenbrook, B.T., Karri, M.A.,
Richter, C.J.; Testing an automobile exhaust
thermoelectric generator in a light truck. Clarkson
University, Potsdam, New York, USA, Department
of Mechanical and Aeronautical Engineering, Delphi
Corporation, Lockport, New York, USA, 2005.

The Modelica Association

410

Modelica 2006, September 4th-5th,2006

Modeling, Calibration and Control of a Paper Machine Dryer Section

Modeling, Calibration and Control of a
Paper Machine Dryer Section
Johan Akesson1 Ola Slatteke2
1 Department of Automatic Control, Faculty of Engineering, Lund University, Sweden
(jakesson@control.lth.se)
2 ABB Ltd., Finnabair Industrial Park, Dundalk, Co. Louth, Ireland
(ola.slatteke@se.abb.com)

Abstract
Following increased efforts during the last decade to
formulate mathematical models for the paper drying process, this paper presents a Modelica library,
DryLib, which enables users to rapidly develop complex models of paper machine dryer sections. In addition, parameter optimization, model reduction and
moisture control by means of Non-Linear Model Predictive Control is treated. These applications have in
common that they are based on numerical optimization
schemes. Since the nature of the particular optimization problem dictates the requirements of the numerical code, the paper also serves as an illustration of the
need for flexibility in terms of i) means for the user to
express optimization problems, ii) and choice of numerical algorithms.
Keywords: paper machine, paper drying, parameter
optimization, model reduction, non-linear MPC

1

Introduction

the physical phenomena involved in the drying process, as well as convenient components and connectors which enables rapid development of dryer section models. An important feature of DryLib is its
ability to express models which are scalable, in the
sense that the complexity of the models can be easily
changed. This feature is quite useful, since the need
for granularity depends on the application  a high fidelity model may be suitable for simulation, whereas
a course model capturing the main behavior may be
appropriate for control design.
The present paper gives three main contributions.
Firstly, the Modelica library DryLib is presented.
Secondly, important issues such as parameter optimization, model reduction and optimization based
control schemes (Non-linear Model Predictive Control
(NMPC)), are treated. Some of these topics have a
general character, while others are dealing specifically
with dryer section issues. Thirdly, the applications of
the paper serves as examples of the wide range of relevant optimization problems that naturally follow the
availability of high-fidelity models.
The paper is organized as follows. In Section 2 the
structure and implementational details of DryLib are
treated. The Sections 3, 4 and 5 treats parameter optimization, model reduction and moisture control by
means of non-linear MPC. In Section 6, the software
used to solve the optimization problems presented in
the paper is described. The paper ends with with conclusions and future work in Section 7.
The current paper is a condensed version of [2],
where additional details can be found.

The topic of this paper is modeling, model reduction,
parameter optimization and control of a paper machine
drying section. The dryer section is the last part of
the paper machine and consists of a large number of
rotating steam heated cast iron cylinders. The moist
paper is led around these cylinders and the latent heat
of vaporization in the steam is used to evaporate the
water from the web. The cylinders are divided into
separate dryer groups where the steam pressure can be
individually controlled in each group. By adjusting
the steam pressure in the dryer groups, and thereby the
heat flow to the paper, the moisture in the paper web is 2 DryLib
controlled.
Based on the work [11], a Modelica library, The model library, DryLib, that is developed and
DryLib, has been developed. DryLib implements used in this paper is built upon physical relations in
The Modelica Association

411

Modelica 2006, September 4th  5th

J. kesson, O. Slttke

terms of mass and energy balances, in combination
with constitutive equations for the mass and heat transfer. The objective is to obtain a non-linear model that
captures the key dynamical properties for a wide operating range. The core of the model is based on [16]
and [12], and it is also given in [11]. The model for
the paper web is based on [16] whereas the model for
the cylinder, and steam system is taken from [12]. The
mathematical model used as a basis for DryLib is
identical to the model described in the references, except that convective heat transfer from the paper web
has been added.
The objective of building the Modelica library
DryLib has been to create a user friendly and extensible platform for modeling of paper machine dryer
sections. In particular, the aim has been to design the
library so that, at the user level, the appropriate level
of model detail can be easily selected. The current implementation of DryLib contains a few examples of
components where the level of detail can be specified
by the user. More importantly, the library classes are
designed to enable advanced users to add new behavior
to key components in order to extend the functionality
of the library. An important concept in the design process has been that of model scalability, which means
that the granularity of the model behavior should be
easy to change, without the need to re-build the model.

2.1

Hierarchical Structuring

Having formulated a mathematical model for the paper machine dryer section, the issues of structuring the
equations into Modelica classes and definition of interface classes (connectors) need attention. A paper
machine dryer section model can be assembled using
very few basic component types. In essence, there are
only two fundamental entities, namely a steam heated
cylinder and a sheet of paper. These two component
types may then be combined, in large numbers, into
a complete dryer section model. However, it is convenient to introduce additional hierarchical levels. As
discussed above, the cylinders of a typical dryer section are organized into steam groups, in which a number of cylinders are operated at the same pressure. The
introduction of steam groups into the library provides
a convenient hierarchical level for the user, since many
decisions regarding e.g. operating points and control
design and evaluation are made at the steam group
level. For basic usage of DryLib, it is also sufficient
to utilize only classes defined at the steam group level
in order to create a fully working dryer section model.
In order to increase the flexibility of the library, the
The Modelica Association

boundary conditions of the physical entities have been
factored out and modeled as separate classes. As an instructive example we consider a paper sheet, where the
boundary conditions of the surfaces defining the sheet
depends on the environment. For example, different
boundary conditions are imposed on the surface if the
paper is in contact with the air or a cylinder shell. The
key to building a flexible Modelica libraries using this
principle of separation is the design of generic connector classes. This topic will be discussed in detail
below.
From a users perspective, DryLib is intended
to enable easy modeling of a dryer section. However, the user should remain in control of the implementational details of key components, e.g. paper sheets and cylinders. Also, advanced users
should have the possibility to introduce new behavior of existing components. Two key features of
Modelica have been used to satisfy these requirements. In the first case, extensive use of parametrized
types (replaceable/redeclare) has been used
to propagate type information downwards in the component hierarchy from the main user level (which is
the steam group level) to lower level components. This
strategy enables the user to easily select the appropriate level of detail for e.g. the cylinder dynamics. In the
second case, inheritance has been used in order to simplify introduction of new component behavior. For the
basic components such as cylinders and paper sheets,
generic base classes have been introduced, which in
turn serve as super classes for particular implementations. DryLib currently provides a few alternative
implementations for key components, and additional
behavior is easily added using the pre-defined base
classes.
2.1.1

Connectors and Variable bindings

The interface structure in DryLib is based on three
connector classes. While the connectors for heat flow
and mass flow (for connecting components with steam
flow) are straight forward, the connector class for a paper surface deserves to be discussed. The paper web
is modeled by separate mass balances for water and
fiber, and an energy balance, as described above. Natural flow variables are thus mass flow of water and
fiber, qw [kg/s] and q f [kg/s], and energy flow Q [W].
As for the potential variables, there are several feasible choices. However, since DryLib is likely to
be used by domain experts in the field of paper drying, it was decided to use the standard variables within
this domain. The natural choices are then moisture ra-

412

Modelica 2006, September 4th  5th

Modeling, Calibration and Control of a Paper Machine Dryer Section

tio, u [kg water/kg dry substance], dry basis weight,
g [kg/m2 ] and temperature T [ C].
A particular feature of Modelica that has been used
to simplify the propagation of parameters and variables between components in DryLib is name lookup in the instance hierarchy (inner/outer). For example, the machine speed is used in various components, but is common for the entire dryer section. Implementation using inner/outer constructs is thus
convenient. Examples of variables that may be assumed to be shared by the components of a steam
group are ambient temperature and air moisture, which
are also implemented using inner/outer.
2.1.2

Cylinder Models

attention to classes which are mainly used as structuring entities in the sense that they introduce new hierarchical levels, and that they contain instances of behavior classes. Basic usage of DryLib may involve only
classes introduced at this level.
In order to efficiently explore the strong
repetitive character of a typical dryer section, the class CylinderUnit was introduced. This class combines a steam cylinder
and a paper sheet which is attached to an evaporation component. While different cylinders may
have different physical parameters, the structure of
CylinderUnit is valid in most cases.
The actual control system typically consisting of a valve, a pressure sensor and
a PID controller is encapsulated in the
class SteamGroup, which also contains an array of
CylinderUnit components. The SteamGroup
class has four connectors corresponding to incoming
and outgoing paper, the steam header and an input
signal representing the reference value of the pressure
controller.

The (partial) cylinder base class
CylinderBase
contains
mainly
connector components and serves as
a unifying class for particular implementations of
dynamic behavior. The cylinder base class has two
mass flow connectors corresponding to steam inlet and
outlet, and one heat flow connector. Two particular
implementations of the cylinder dynamics is included
2.1.6 Miscellaneous
in DryLib.
Apart from the classes presented above, DryLib also
contains classes which is used to drive a dryer section
2.1.3 Paper Models
model, referred to as sources and sinks. In addition
The paper web base class contains essen- there are some miscellaneous classes for e.g. valves
tially four paper connectors correspond- and sensors.
ing to the cross section areas and the upper and lower
surfaces. This design enables separation of the actual 2.2 PM7, Husum, Sweden
paper web behavior, and the physical phenomena deTo demonstrate the capabilities of DryLib, a dryer
fined by the boundary conditions of the paper.
section model corresponding to that of PM7 located
at the M-real mill, Husum, Sweden, has been devel2.1.4 Interfaces
oped. The PM7 paper machine is a multi-cylinder maHaving defined the connector structure and the chine producing copy paper. The dryer section of the
basic cylinder and paper classes, modeling of machine is divided into a pre-dryer and an after dryer
the interfaces between components is straight for- section with the surface sizing in the middle. The obward. The PaperPaperInterface class mod- jective of the after-dryer section is only to dry the mixels the interface between two paper cross section ture added by the surface sizing and it cannot take care
areas perpendicular to the machine direction. In of moisture problems from the pre-dryer section. Only
CylinderPaperInterface, the heat transfer be- the pre-dryer is modeled here. The PM7 drying cylintween a cylinder and a paper in contact is modeled. Fi- ders are divided into six groups, consisting of one, two,
nally, the evaporation of water from the paper surface two, three, ten and twelve cylinders respectively. For
a detailed description of the plant, see [5].
is modeled in the class Evaporation.
In Figure 1, the top level of the PM7 dryer section
model is shown, including six steam groups, a paper
2.1.5 Steam Group Models
source, a paper sink, a mass flow source representing
The classes described above have the character of the steam header and a set point distribution for calcuspecifying physical behavior. We shall now turn our lation of pressure set points for the groups. The final
The Modelica Association

413

Modelica 2006, September 4th  5th

J. kesson, O. Slttke

Figure 1: The top level of a complete dryer section
model.

model consists of 7453 equations and 312 dynamical
states when translated with Dymola.

2.3

Extensions

Possible extensions of DryLib can be sorted mainly
into two categories. Firstly, the library may be
extended by adding components modeling process
equipment or physical phenomena not covered by the
current implementation. For example, modeling of
systems in direct connection with the dryer section,
such as the condensate system, the steam production
and the ventilation system would enable simulation of
a larger part of the process. Also, adding this functionality would simplify connection of the dryer section model to models of other important parts of the
paper machine, e.g. the press section, the wire section
or other process units utilizing the same steam header.
Secondly, DryLib may be extended by introducing components which enables simulation of the drying process at an increased level of detail. The current design of DryLib is based on a particular choice
of discretization of the underlying PDE:s (describing
mass and energy transport), which yields a model with
a reasonable level of detail, while maintaining acceptable simulation times. While this choice of discretization is suitable for analysis of moisture, temperature
and pressure profiles in the machine direction, other
applications may require different levels of detail.

3

response is obtained. This procedure of tuning parameters while leaving the structure of the model unchanged is referred to as gray-box identification, see
[4]. Parameter tuning may in simple cases be done by
hand, but more complex problems requires structured
methods for finding the parameter set which yields the
best result. One such method is parameter optimization, which, in addition to selection of parameters to
optimize, also includes definition of a performance criterion to minimize.
When selecting parameters to optimize, parameters
which are uncertain are attractive choices. However, it
should be kept in mind, that the parameter optimization procedure does not necessarily produce the physically correct parameter values. Rather, the selected
parameters are used to compensate for all types of
model-data mismatch given a particular performance
criterion. This implies that the actual parameter values obtained from optimization should not be interpreted as the true physical values, but rather those
that achieves the best model-data match. On the other
hand, it is usually desirable to ensure that parameters
have physically feasible values.

3.1 Problem Definition
Setting up a parameter optimization problem requires
insight into which aspects of the model are most important. In this case, both the dynamic and static
model response is of importance. However, in a first
step, only the static behavior has been considered.
Specifically, cylinder and paper temperatures of the
paper machine, as well as the output moisture, have
been measured during stationary operation conditions.
The aim of the optimization has been to improve the
stationary response of the model in the sense that the
difference between simulated temperatures and moisture and measured temperatures and moisture, should
be minimized.
A reasonable cost function to minimize is then
Ncyl
m
s 2
J =Tm  (Tm,i
 Tm,i
) +
i=1
Ncyl

m
s 2
2 2
Tp  (Tp,i
 Tp,i
) + u (um
out  uout )

Parameter Optimization

i=1

It is desirable that the behavior of the model is similar to that of the real plant, in order for results obtained from using the model to be applicable on the
plant. A common method to minimize the plant-model
mis-match is to select one or more parameters of the
model, and then tune these until a satisfactory model
The Modelica Association

(1)

where Ncyl is the number of cylinders, super-script m
indicates measured quantities, super-script s indicates
simulated quantities and Tm , Tp and u are weights.
While the measurement method used to determine
cylinder temperatures is reliable, the measurements of
paper temperatures should be regarded as uncertain.

414

Modelica 2006, September 4th  5th

Modeling, Calibration and Control of a Paper Machine Dryer Section

In particular, the paper temperature is varying considerably in the machine direction depending on the position, relative to a cylinder contact area, at which the
measurement is done, [11]. Therefore, the weight Tp
was set to a small value. The moisture, on the other
hand, is an important quality variable that should be
matched with high accuracy. Accordingly, u was set
to high value.

Cylinder Temperature
140

[ C]

120
100
nom cyl temp
meas cyl temp
sim cyl temp

80
60

0

5

10

15

20

25

30

35

40

Paper Temperature
150

[ C]

100

Four parameters were selected for optimization 
three heat transfer coefficients and one mass transfer
coefficient.

nom paper temp
meas paper temp
sim paper temp

50

0

0

5

10

15

20

25

30

35

40

Moisture Ratio
[kg/kg]

1.5

3.2

nom u
sim u
1

0.5

Solving the Problem

0

0

5

10

15

20
Cylinder number

25

30

35

40

The minimization of (1) should be performed subject
to the constraint constituted by the DAE representation
of the model. Since the minimization is performed in Figure 2: Stationary temperature and moisture prostationarity, all derivatives may be set to zero, and the files. The x-axis shows cylinder numbers.
model is then represented by a purely algebraic constraint, F(x, y, p) = 0, where x is the state vector, y
represents the algebraic variables and p are the param- 4 Model Reduction
eters.
The problem was solved by a custom made application coded in C, which is based on the dsblock interface for accessing the model description generated
by Dymola, and the NLP code IPOPT, see [14], which
is dedicated to solving large scale algebraic optimization problems. The software is described in detail in
Section 6.

3.3

Parameter Optimization Results

Minimizing (1) yields an optimal cost of 277, compared to the cost 61869 for the nominal parameter values. The optimal temperature profiles are shown in
Figure 2. For comparison, the nominal profiles are
plotted. As can be seen, there is a significantly improved fit between simulated and measured responses.
In particular, the output moisture in the nominal case is
unrealistically low too early in the dryer section. It can
also be noted that the fit of the cylinder temperature
profile is better than that of the paper temperature profile. This phenomenon is expected, since the weight of
the paper temperature errors was set to a low value.

Dryer section models built using DryLib results in
large scale models, even though a sparse discretization scheme for mass and energy balances has been
applied. For control design and evaluation purposes,
however, a model describing the dynamic relationship
between the inputs and the quality variables at the last
free draw is usually sufficient. In practice, low order
models (e.g. KLT-models with a gain, a time delay and
a time constant) valid at a specific operating point are
commonly used for dryer section control. In this section, a reduced model targeted towards moisture control design is developed. Since the moisture measurement signal available for feedback control is usually
obtained at the end of the dryer section, the aim of
the reduction scheme is to develop a simpler model,
which captures the non-linear dynamical behavior relating the steam pressure reference signal, input moisture, input temperature and dry basis weight (from the
press section) to output moisture. Accordingly, accurate simulation of the paper temperature and the moisture profile can be compromised in order to obtain a
lower order model, describing only the phenomenon of
interest, i.e. the behavior of the moisture, accurately.

The matching of the profiles can be improved fur4.1 The Equivalent Dryer
ther by introducing additional optimization parameters. This strategy is explored in [1] for a slightly dif- In this paper, the structure of the dryer section will be
ferent parameter optimization problem.
exploited, in order to obtain a model of lower order.
The Modelica Association

415

Modelica 2006, September 4th  5th

J. kesson, O. Slttke

A previously reported concept is that of the equivalent
dryer, which is described in [10]. Instead of modeling
each cylinder as a separate unit, the equivalent dryer
concept suggests that one, larger cylinder can be used
to approximate an entire steam group. This approach
has several attractive features. i) It preserves the structure of the dryer section, since each steam group is replaced by its corresponding equivalent dryer, ii) each
equivalent dryer has an intuitive physical interpretation iii) and the reduction potential is large, especially
for large steam groups.

4.2

The Reduction Problem

At the steam group level, the reduction problem can
be stated as Find the dimensions of one steam cylinder, including associated incoming and outgoing free
draws and contact paper, which approximates as well
as possible, the behavior of a given steam group.
Given our experiences from simulation of dryer section models, we suggest that the dynamic and stationary response of the equivalent dryer cylinder may be
treated separately. As for the dynamics, we assume
that the mass and volume of the equivalent cylinder
can be set to Ncyl times those of an individual cylinder
in the steam group, where Ncyl is the number of cylinders. Now, simulation experiments reveal that the time
constant of an equivalent cylinder, constructed based
on this assumption, corresponds well to the time constant of the full steam group. However, the same result
does not seem to hold for the stationary gains, where
there is a significant mismatch. Intuitive ways to set
the lengths of the free draw and contact papers, using
the same reasoning as for mass and volume, does not
produce acceptable results. A more sophisticated way
of finding the physical dimensions and parameters is
thus necessary.

4.3

Reduction of One Steam Group

the moisture in the outgoing free draw of the equivalent cylinder. In addition, as a secondary objective, it
was decided to minimize the deviation in steam consumption. This objective was added since it may be
desirable to limit the steam consumption during moisture control. Performing this minimization for a single operating point is not sufficient, however. In order
to obtain a good fit over a wider operating range, a
set of operating cases was introduced, over which the
optimization was performed. Each case consists of a
specification of the operating point in terms of steam
pressure, input moisture, input temperature and basis
weight.
It remains to define the optimization parameters,
over which the minimization is performed. Six parameters of the equivalent dryer were selected for optimization, namely the length of the free draws, the
length of the contact paper, and in addition two heat
transfer coefficients and one mass transfer coefficient.
The number of variables that are actually needed to
obtain a good fit is not unambiguous, however. For
small steam groups, or if few cases are used, some
of the suggested optimization variables may well be
fixed, without any increase in the approximation error. In fact, it is desirable to find an appropriate
trade-off between the number of optimization variables and optimization performance, in order to avoid
over-parametrization.

4.4 Reduction of a Dryer Section
A straight forward approach for deriving a reduced order dryer section would be to simply apply the method
described in the previous section for each individual
steam group. Recalling our main objective, which is to
predict the moisture in the last free draw, this approach
would not explore the full potential of the method. Instead, a larger optimization problem, incorporating all
groups, may be formulated where most attention is
given to minimizing the deviation of the last group.
This means that all groups are reduced at the same
time, and that the full reduction potential is used according to the main objective, which is to predict the
final moisture. It may, however, be advantageous to include the deviations, with small weights, of all groups
in the optimization criterion, in order to avoid a physically unrealistic model.

A static model for a paper sheet in contact with a steam
cylinder, can be formulated using algebraic versions of
the dynamic mass and energy balances of the mathematical dryer section model. The algebraic systems of
equations for each cylinder and paper web may then be
duplicated and put together to formulate a static model
for a steam group.
As stated in the introduction of this section, the most
important quality variable, at least for moisture con4.5 Solving the Optimization Problem
trol, is paper moisture. Therefore, a reasonable objective is to minimize the deviation between the mois- The resulting algebraic optimization problem is chalture in the last free draw of the cylinder group, and lenging, both due to its size and its non-linear charThe Modelica Association

416

Modelica 2006, September 4th  5th

Modeling, Calibration and Control of a Paper Machine Dryer Section

acter. The final problem consists of 9536 free variables and 9504 equality constraints, of which 8568 are
non-linear. Efficient solution of large scale NLP problems of this type require state of the art numerical algorithms, exploring the sparse structure of the problem as
well as analytical Jacobian and Hessian information.
The problem definition was programmed in AMPL,
which is a language for mathematical programming,
[6]. AMPL enables encoding of linear and non-linear
algebraic optimization problems, using optimization
oriented language constructs. The problem description, i.e. the AMPL code, is then executed within the
AMPL tool, which in turn interfaces several numerical
solvers. In this application, the NLP code KNITRO,
[15], has been used. The combination of AMPL and
KNITRO is extremely powerful, since the AMPL interface to numerical solvers offers analytic evaluation
of Jacobians and Hessians as well as sparsity information. This enables KNITRO to operate in its most
efficient mode, resulting in acceptable execution times
also for large systems. The reduction problem formulated in the previous section is solved in about 2-5 minutes, depending on initial starting point.
The proposed method has the distinct drawback of
requiring complete re-encoding of the the model description. This was necessary, however, in order to enable utilization of the appropriate symbolical and numerical algorithms.
It is important to note, however, that the problem
is non-convex, and that only local optimality can be
expected. However, in this case, the solution to the
reduction problem seemed to be robust with respect to
different starting points. Also, the obtained solution is
reasonable in the sense that the optimized parameter
values lies within physically feasible limits.

4.6

Model Reduction Results

As mentioned above, a set of operating conditions
need to be specified, in order to complete the problem formulation. Clearly, the operating range over
which the reduced model is valid, is influenced by this
choice. As the nominal case, values for steam pressures, input moisture, input temperature and dry basis
weight corresponding to a typical grade were chosen.
Based on the nominal case, additional 35 cases were
defined by varying the nominal parameters.
The result of the reduction procedure was evaluated
by means of step responses in input moisture, dry basis weight and pressure set point, see Figure 3. As can
be seen, there is a good match between the stationary
responses of the original and reduced models. Also,
The Modelica Association

u []

qs [kg/s]

0.045

7.6

0.04

7.4

0.035
0

500

1000

1500

2000

0.045

7.2

500

1000

1500

2000

0

500

1000

1500

2000

0

500

1000

1500

2000

7.6

0.04

7.4

0.035
0

500

1000

1500

2000

7.2

0.036

20

0.034

15

0.032
0.03

0

10
0

500

1000

t [s]

1500

2000

t [s]

Figure 3: Step responses for moisture (left) and steam
flow rate (right) of the original (dashed) and the reduced (solid) models. The responses corresponds to,
from above, steps in input moisture, input dry basis
weight and pressure reference, applied at 200 s.

the (slow) dominating time constant is captured well
by the reduced system. A detailed study of the initial part of the step response reveals that the reduced
model does not fully capture the transport delay of the
original model. This is, however, to be expected. The
original model consists of a large number of paper
components, which together forms a high dimension
compartment system. The reduced model consists of
significantly fewer segments, and cannot approximate
the time delay with the same accuracy
The original motivation for performing the model
reduction was to obtain a model of lower complexity.
Indeed, the reduced model has fewer dynamical states,
namely 85, as compared to 318 for the original model.
Also, the simulation time for a typical scenario was
approximately 85% shorter for the reduced model.

5 NMPC of Output Moisture
Paper moisture is usually controlled using a cascade
structure, where the inner loop controls the steam pressures and the outer loop controls the actual moisture.
The controllers of the inner loop are commonly PIDcontrollers, whereas the outer loop is controlled by a
Model Based Control (MBC) scheme, e.g. IMC (Internal Model Control), a Dahlin controller, or linear MPC
(Model Predictive Control).
The MBC controller is usually based on a low order
linear model of the dryer section. While a well tuned
controller works well at a given set-point, the non-

417

Modelica 2006, September 4th  5th

J. kesson, O. Slttke

linear character of the dryer section dynamics results
in degraded performance if the set-point is changed.
Since the plant is operated at several different setpoints, corresponding to different grades, a traditional
control system maintains several parameter sets for the
MBC controller. Switching of controller parameters is
then done after a grade change.
In this paper, we consider a different approach to
moisture control. Based on the reduced non-linear
dryer section model derived in Section 4, a basic NonLinear Model Predictive Control (NMPC) scheme is
implemented. The main benefit of using a non-linear
model in the control design is that the operating range
of the controller may be increased. Also, successful
implementation of a controller which achieves good
performance in a wide operating range may serve as
a unifying strategy for stationary and transition (grade
change) control, whereas common practice today is to
use separate controllers for these two control modes.
A realistic implementation of an MPC controller
consists of tree main parts  reference target calculation, state estimation and solution of the optimal control problem. In this paper, the problem of solving
the optimal control problem is addressed. The resulting controller is evaluated under the assumption of full
state information.

5.1

Model Predictive Control

addressed by dynamic programming, or the maximum
principle. During the last two decades, however, a new
family of methods, referred to as direct methods have
emerged. These methods are based on discretization
of the original optimization formulation, transforming
the infinite dimensional problem into a finite dimensional one. The discretized problem is then solved by
means of algebraic non-linear programming, see [13]
and [3] for two examples of direct methods.
Optimization of Dymola models has previously
been considered in the work [7], where the Simulink
interface provided with Dymola was used to access
the model. The main difference between the approach
used in [7] and this work lies in the methods of accessing the model, where the dsblock interface has
the advantage of offering evaluation of an analytical
Jacobian.
The algorithm used to solve the dynamic optimization problem described in this section is a straight forward implementation of a sequential single shooting
algorithm, see [13].

5.3 The Optimal Control Problem
An integral part of an NMPC controller is the formulation of the open loop optimal control problem to be
solved in each sample. Since the aim of the control
scheme in this application is to control the moisture
ratio, it is natural to penalize deviations from the target moisture. The control trajectory in the optimization problem is parametrized by a piece-wise constant
function with Nu segments. In order to avoid violent
control moves, which may introduce disturbances in
the steam system, a term penalizing the deviation between two successive control moves is introduced in
the cost function. In addition, there are hard limits acting on the control variable. This yields the following
optimization problem

MPC refers to a family of controllers which are based
on the receding horizon principle. At each sample, a
finite horizon open loop optimal control problem is
solved, and the first part (corresponding to the first
sample) of the resulting optimal control profile is applied to the plant. At the next sample, the procedure is
repeated and a new optimal control problem with the
horizon shifted one sample is solved. Two of the most
important advantages of using MPC is that it works
well for MIMO plants and that it takes state and conZ Tf
Nu 1
trol bounds into account explicitly. However, an MPC
sp
2
min

(u

u
(t))
dt
+
u
out
out
  p( pspi )2
controller, including the on-line solution of an optipsp
0
i
i=0
mization problem (at least in the case of a non-linear
(2)
subject to
model), is computationally demanding, which makes
F(x, x, y, psp ) = 0 (DAEdynamics)
application to processes with fast dynamics trouble466 kPa  psp  596 kPa (control constraint)
some. During the last decade, MPC has emerged as a
major control strategy, mainly in the process industry,
sp
where T f is the prediction horizon, uout is the tarsee [9] for an overview.
get moisture, uout (t) is the predicted moisture profile,
psp
i is the predicted pressure set point trajectory and
5.2 Dynamic Optimization
sp
sp
 psp
i = pi  pi1 . u and  p are weights. In the
Traditionally, optimization problems incorporating simulation, the parameters were set to u = 10000,
constraints imposed by dynamic systems have been  p = 0.01, Nu = 4 and the sampling interval to 5 s.
The Modelica Association

418

Modelica 2006, September 4th  5th

Modeling, Calibration and Control of a Paper Machine Dryer Section

u[]

0.04

0.035

0.03
0

200

400

600

800

1000

1200

psp [kPa]

500

450

Figure 5: Software application structure.
400
0

200

400

600

800

1000

1200

t[s]

Figure 4: Step response of the NMPC controller.

5.4

Results

A simulation where the NMPC controller is applied to
the reduced dryer section model derived in Section 4 is
shown in Figure 4. In the simulation, a reference step,
sp
sp
from uout = 0.038 to uout = 0.03 is applied at t = 200 s.
As can be seen, the moisture reaches the desired setpoint, while the control signal respects the specified
constraints.
An important, and often limiting, factor when using MPC controllers, is the execution time for solving
the on-line optimization problem. In this case, execution times ranged from 10 s to 80 s, with a mean of
13.5 s. Typically, execution times are longer when reference changes and disturbances occur, while shorter
and more predictable execution times are obtained during stationary operation. Assuming a sampling interval of h = 5 s, it is clear that the execution times must
be decreased. There are several approaches to reducing execution times, e.g. modifying the lengths of
the control and prediction horizons, reducing the complexity of the model or using a more efficient optimization algorithm. This is, however, beyond the scope of
this paper.
In addition, the problems of reference target calculation and state estimation needs to be solved in order
for the control scheme to be useful in practice.

6

Software Tools

lized the C-code representing the model generated by
Dymola. The results were then fed back to Dymola
and verified on the original simulation model.
The software packages used in the development of
the custom applications are: i) A C programming interface which enables access to routines generated by
Dymola, dsblock. Using this interface, custom applications can be developed for e.g. simulation or like
in this case, optimization. The interface provides basic routines for acquiring information about model parameters and initial state, evaluation of the right side of
the resulting ODE (DAE) and the associated Jacobian.
ii) A DAE-solver, DASPK 3.1 [8]. This code solves
DAE:s as well as calculates sensitivities required for
optimization. The code is written in Fortran and was
translated to C using f2c. iii) An NLP-code, IPOPT
[14]. This code implements a primal-dual interior
point method and was used to solve the NLP resulting from the parameter optimization and NMPC problems. iv) A package for managing the communication
between the Dymola C interface and DASPK, which
was developed in order to enable convenient development of optimization applications based on models
generated by Dymola. This package, referred to as ssDASPK, provides e.g. simulation and sensitivity calculation for use in custom applications.
These packages were compiled and linked with the
code representing the model generated by Dymola,
into applications which was used to set up and solve
the particular optimization problems. The structure of
the applications is shown in Figure 5.
In addition, AMPL and KNITRO was used to solve
the model reduction problem, as described above.

The dryer section model has been implemented, as 7 Summary and Conclusions
mentioned above, in Modelica and Dymola. The parameter optimization problem and the NMPC prob- In this paper, modeling, model reduction, parameter
lem, however, were solved by integrating several soft- optimization and NMPC control design for a paper
ware packages into custom applications, which uti- machine dryer section has been considered. It has been
The Modelica Association

419

Modelica 2006, September 4th  5th

J. kesson, O. Slttke

demonstrated how Modelica models of high complex- [6] R. Fourer, D. Gay, and B. Kernighan. AMPL  A
ity can be used for purposes other than simulation. The
Modeling Language for Mathematical Programresulting optimization problems are challenging and
ming. Brooks/Cole  Thomson Learning, 2003.
require state of the art numerical solvers. In particular, solution of the model reduction problem, which [7] R. Franke, M. Rode, and K. Kruger. On-line
optimization of drum boiler startup. In Proceedhas more than 9000 free variables, is dependent on alings of Modelica2003 conference, 2003.
gorithms exploring the problem structure. Our experience from this project is that there is no single tool or [8] T. Maly and L. R. Petzold. Numerical methsoftware that can address all problems arising in simuods and software for sensitivity analysis of
lation and optimization. Rather, in order to solve probdifferential-algebraic systems. Applied Numerlems effectively, it is essential that Modelica tools are
ical Mathematics, 20:1-2, pp. 5782, 1996.
designed to be interfaced with software for solution
of optimization problems. In general, it is highly de- [9] S. J. Qin and T. A. Badgwell. A survey of industrial model predictive control technology. Consirable that software for complex systems is provided
trol Engineering Practice, 11, pp. 733764, 2003.
with interfaces so that they can be combined.
There are several possible extensions of the paper.
The DryLib library may be extended as outlined [10] M. Rao, Q. Xia, and Y. Ying. Modeling and
Advanced Control for Process Industries  Apin Section 2, and the parameter optimization scheme
plications to Paper Making Processes. Springerwould benefit from including also time series data. ReVerlag, New York, 1994.
garding the model reduction scheme, it may be desirable to derive models with further reduced complexity [11] O. Slatteke. Modeling and Control of the Pavalid over a wide operating range. Finally, the NMPC
per Machine Drying Section. PhD thesis ISRN
scheme outline in Section 5 needs to be further elaboLUTFD2/TFRT--1075--SE, Department of Aurated in order to be applicable to the real plant.
tomatic Control, Lund Institute of Technology,
Sweden, January 2006.

References

[12] O. Slatteke and K. J. Astrom. Modeling of a
steam heated rotating cylinder - a grey-box ap[1] J. Akesson and J. Ekvall. Parameter optimizaproach. In Proc. 2005 American Control Contion of a paper machine model. In Proceedings
ference, Portland, Oregon, USA, June 2005.
of Reglermote 2006, Stockholm, Sweden, May
2006.
[13] V. Vassiliadis.
Computational solution of
dynamic optimization problem with general
[2] J. Akesson and O. Slatteke. Drylib - a modeldiffernetial-algebraic constraints. PhD thesis,
ica library for paper machine dryer section modImperial Collage, London, UK, 1993.
eling, and some applications of dynamic optimization. Technical Report, Department of Au- [14] A. Wachter and L. T. Biegler. On the implementomatic Control, Lund University, 2006.
tation of an interior-point filter line-search algorithm for large-scale nonlinear programming.
[3] L. Biegler, A. Cervantes, and A. Wachter. AdMathematical Programming, 106:1, pp. 2558,
vances in simultaneous strategies for dynamic
2006.
optimization. Chemical Engineering Science,
57, pp. 575593, 2002.

[15] R. Waltz. KNITRO Users Manual, Version 4.0.
Zienna Optimization Inc., 2005.
[4] T. Bohlin and A. J. Isaksson. Grey-box model
calibrator and validator. In 13th IFAC Sympo- [16] B. Wilhelmsson. An experimental and theoretsium on System Identification, Rotterdam, The
ical study of multi-cylinder paper drying. PhD
Netherlands, August 2003.
thesis, Department of Chemical Engineering,
[5] J. Ekvall.
Dryer section control in paper
machines during web breaks. Licentiate thesis
ISRN LUTFD2/TFRT--3236--SE, Department
of Automatic Control, Lund Institute of Technology, Sweden, November 2004.
The Modelica Association

420

Lund Institute of Technology, Lund, Sweden,
1995.

Modelica 2006, September 4th  5th

System and Component Design of Directly Driven Reciprocating Compressors with Modelica

System and Component Design of Directly Driven
Reciprocating Compressors with Modelica
Thomas Bdrich
Dresden University of Technology, Institute of Electromechanical and Electronic Design
01062 Dresden, Germany
Thomas.Boedrich@mailbox.tu-dresden.de

Abstract

1

Directly driven reciprocating compressors have the
potential to be used at large scale for refrigerant
compression in domestic refrigerators and freezers
and to improve the energy efficiency of these cooling
devices considerably. Compared to their wellestablished conventional counterparts with rotational
motor and rotation/translation transducer they offer
advantages such as (I) higher efficiency due to the
absence of gear friction losses, (II) broad-range
modulation of the compressors mass flow rate, e.g.
by control of the piston stroke and (III) a simpler
mechanical structure.
With typical strokes of approximately 1520 mm
and piston peak forces up to approximately 150 N,
electrodynamic and electromagnetic linear motors
are predestined to be used as direct drives for those
compressors when operated under resonance conditions with one or more springs. Appropriate motor
and system configurations are currently developed
and evaluated at Dresden University of Technology.
Highly nonlinear compression forces, strong interactions between multiple physical domains and a large
number of design parameters to be chosen properly
are challenges during system and component design
that call for the usage of appropriate models and efficient simulation approaches within the design process. With its multi-domain paradigm, Modelica is
excellently suited for the model-based design of directly driven refrigerant compressors, their power
supply and control prior to detailed design, manufacture and test of prototypes.
This paper is intended (I) to present an overview of
the above compressor technology, (II) to enlighten
the beneficial use of Modelica for the design of heterogenous systems such as the above compressors
and (III) to illustrate the design of electro-magnetomechanical converters by means of lumped magnetic
network models and the Modelica Magnetic library.
Keywords: linear compressor; system design; magnetic network; electrodynamic actuator
The Modelica Association

Directly driven reciprocating compressors for refrigeration

1.1

Principle structure and operation

The piston of a directly driven reciprocating compressor is connected to the armature of its driving
linear motor without any additional motion transducer or gear element (Fig. 1). This results in greatly
reduced friction compared to conventional reciprocating compressors with rotational motor and rotation/translation transducer and hence in a higher
overall efficiency of the compressor. In conventional
compressors of domestic refrigerators, the motion
transducer accounts for approximately 60 % of the
total friction losses of the compressor.
Piston

Linear motor

Spring

Fp

xUDP

x0

xLDP

x

p
pd

3

2

W
ps

4

~m

1

V

Fig. 1

Principle structure of a directly driven reciprocating compressor (not scaled) and idealised indicator diagram p(V)

For reasons of efficiency and size of the linear motor, directly driven reciprocating compressors are
normally operated at or close to their mechanical
resonance frequency. The mass of the arma-

421

Modelica 2006, September 4th  5th

T. Bdrich

ture/piston assembly in conjunction with at least one
helical or diaphragm spring forms a mechanical
resonant system. If diaphragm springs are used, they
also guide the armature in radial direction. It must be
noted that the compressor load, i.e. the suction pressure ps and discharge pressure pd for a particular piston stroke h = xLDP  xUDP influences the resulting net
resonance frequency due to its properties of a
nonlinear gas spring and hence the overall efficiency
at operating frequency. The influence of this gas
spring must be taken into account during system design (section 2).
As for conventional reciprocating compressors, an
idealised compression cycle of one stage of a compressor consists of four phases (numbers according
to idealised indicator diagram of Fig. 1):
12
23
34
41

isentropic compression,
isobaric discharge,
isentropic re-expansion of the residual gas,
isobaric suction of gas for the next cycle.

In reality, the compression process differs from the
above idealised thermodynamic changes of states
due to (I) complex heat exchange between the gas
and the cylinder assembly, (II) pressure drop and
pressure pulsations in the valve assemblies and pipes
and (III) deviations of the properties of refrigerants
(real gas behaviour) from those of ideal gas as assumed in the above listing of compression cycle
phases [1]. The area within the closed pressurevolume curve p(V) of Fig. 1 represents the work per
cycle that is exerted on the gaseous refrigerant.
Whereas the stroke of a conventional compressor is
constant due to its crankshaft mechanism, the stroke
of a directly driven reciprocating compressor can be
varied. Thus it is possible to adapt the mass flow rate
m& of directly driven reciprocating compressors in
refrigerators to varying thermal operation conditions
of the cooling device: m& is directly proportional to
the suction length lsuc = xLDP - x4.
1.2

Usage for refrigeration

A successful attempt to utilise an oscillating electromagnetic motor for the direct propulsion of a reciprocating compressors piston is already reported
for the year 1908 [2]. Those attempts continued
throughout the last century and resulted in a number
of different designs of directly driven reciprocating
compressors for different applications [2]. While
some of these compressors are experimental prototypes up to now, others are already commercially
utilised, e.g. in small air compressors, in small mo-

The Modelica Association

bile refrigerators for medical and recreational use [3]
and in Stirling and pulse tube cryo-coolers.
For refrigerant compressors of domestic refrigerators
and freezers however, problems with collisions between the free moving piston and the cylinder head
and valve assemblies at varying suction and discharge pressures prevented from the broad utilisation
of this concept in the past (beside durability of
springs used for resonance operation). To a great
extent, these collision problems were due to premature controller realisations. However, situation
changed during the last years due to the broad availability of low-cost microcontrollers and power electronic components. This enables now for the realisation of powerful yet cost-effective nonlinear controllers for stroke control and hence for save compressor
operation at varying compression loads. For that reason, increased research and design efforts have been
made during the last years for the industrial utilisation of directly driven refrigerant compressors. As a
result, the Korean manufacturer LG Electronics, Inc.
offers domestic refrigerators with directly driven
compressors sized for the Korean market since 2004
[4] [5]. The linear motor of these compressors is
based on a design of the US company Sunpower,
Inc. [6].
1.3

Research objectives and sample application

The current research on directly driven reciprocating
compressors for refrigerators at Dresden University
of Technology focuses on:
1. analysis of the state of the art of motors for directly driven reciprocating refrigerant compressors and their control,
2. development and evaluation of principle motor
designs for a chosen sample application,
3. conceptual control design for compressor operation under varying thermal loads (i.e. cooling
powers) for the sample application,
4. establishment of a design methodology for directly driven reciprocating compressors based
on modelling and simulation,
5. detailed design, prototype manufacture and test
of the linear motor found as optimum under 2.
for the sample application.
This sample application is specified as follows:
 domestic one-compartment refrigerator,
 refrigerant: R600 (n-Butane),
 continuous compressor operation, i.e. no intermittent operation for temperature control as in
conventional refrigerators,

422

Modelica 2006, September 4th  5th

System and Component Design of Directly Driven Reciprocating Compressors with Modelica

 specified cooling power for minimum/ nominal/ maximum thermal load: Q& 0 = 5 / 25 / 50 W
with accordingly specified evaporator and condenser temperatures and refrigerant superheat,
 one-stage, one-sided compressor design, i.e.
only one compression chamber at one side of
the piston,
 compressor operation at mains frequency, i.e. at
50 Hz or 60 Hz,
 adaption to varying cooling power requirements
by means of control of the pistons suction
length (due to projected continuous operation at
constant frequency).

2
2.1

Simulation-based system design
Compressor specification

One of the most important tasks during initial system
design is the specification of the compressors main
parameters stroke and compression force versus position from given specifications of the refrigerators
vapour compression process to be realised. This is
done by calculation of refrigerant mass flow rates,
enthalpy differences and compression work per cycle
for specified thermal load scenarios by means of the
pressure-enthalpy diagram of the used refrigerant.
For the sample design process described in this paper, refrigerant data from an external software package [7] has been used so far for this task. In the future, however, Modelica [8] libraries that are related
to thermo-dynamic systems and refrigerant properties such as the commercial AirConditioning LibraryTM [9] and the free Modelica.Media library can
be used advantageously, assumed that these libraries
are available and contain data for the required refrigerants, respectively. Doing so would incorporate yet
another physical domain and model components
from its respective Modelica libraries into the resulting system model and would make model-based design of directly driven reciprocating compressors for
refrigerators with Modelica even more seamless.
2.2

Compared to modelling and design methods based
on mechanical and electrical impedances (e.g. [10]),
the approach based on transient simulation enables
for consideration of all important nonlinear effects in
the p(V) relationship and the derived piston force
versus position relationship FP(x). Whereas description of the compression process with an equivalent,
stroke dependent spring constant cgas(h) and an
equivalent damping coefficient dgas(h) might work
for double-sided compressors with one compression
chamber at either side of the piston, this approach
can not be used for modelling of one-sided compressors as is the case for the chosen sample application.
This is due to the shift of the pistons average position xavg away from its rest position x0 in presence of
unbalanced, one-sided compression forces (Fig. 4).
This shift of average piston position in turn influences the required stroke that is necessary to realise a
desired suction length. Thus it must be considered
carefully during conceptual design.
Fig. 2 shows the graphical representation of a Modelica model that is used for analysis of fundamental
system behaviour and for prediction and evaluation
of motor performance to be expected for particular
motor designs.
calculation of floating rms values, instantaneous and average
powers and efficiency

Dynamic system simulation

Currently, both different principle operating and control concepts and principle motor designs are established and evaluated and the interactions between the
major subsystems controller, power supply, linear
drive and compression load are designed for the chosen sample application. The elaborated design
method is strongly based on dynamic simulations
and analysis of the results at steady-state oscillations.
The Modelica Association

open loop voltage supply
with soft start

Fig. 2

nonlinear compression force

Graphical representation of the Modelica
system model that is used for analysis of
fundamental system and motor behaviour

In this model, a sinusoidal voltage is fed to the motor
model to be evaluated. This voltage will evoke a cur-

423

Modelica 2006, September 4th  5th

T. Bdrich

rent i through the motor that causes a motor force FM
to be developed. This force acts against the inertia of
the armature/piston assemblys mass m, against the
spring(s) used for resonance operation (spring stiffness c) and against the compression force that acts
upon the piston FP with the above mentioned four
idealised phases per cycle according to the force
equilibrium

It must be pointed out that the above initially used
model of a moving coil type linear motor is not the
optimum motor design with respect to efficiency,
related power and other criteria to be expected. Neither is the used model a detailed one: Assumption of
a constant motor constant cm throughout the complete stroke range is a rather coarse approximation.
Also, the motors magnetic subsystem is not incorporated into the above model as must be done for de0 = FM (i ) + m &x& + c( x  x0 ) + FP ( x, x0 , ps , pd , n) (1) sign of a motors magnetic components. However,
the above simple model is well suited for initial
In the above equation, x denotes the piston position,
analyses due to its simplicity and linearity. More dex0 its rest position in non-energised state (no pressure
tailed motor models for additional principle motor
difference acting on piston, no supply voltage), ps
designs will be described in section 3.
and pd the suction and discharge pressure, respectively, and n the isentropic exponent used for model- Using Kirchhoffs voltage law, the differential equaling of idealised compression and re-expansion tion of the electrodynamic motors electrical subsysforces according to the isentropic condition tem can be written as
pxn = const.
usrc = L i& + R i + cm x&
(3)
For initial analyses of system behaviour, a simple
model of a coarsely dimensioned electrodynamic with usrc being the supply voltage. Equations 1 and 3
linear motor was used in the system model depicted make up the system of nonlinear ordinary differential
in Fig. 2. This motor is of moving coil type. The equations that describes the compressors dynamic
electro-magneto-mechanical energy conversion behaviour. Transient simulation of this system will
process is based on Lorentz forces and is described reveal its behaviour with respect to time and enables
by
for derivation of (mostly integral) quantities appropriate for performance evaluation of directly driven
(2a)
FM = B l i
reciprocating compressors and their linear motors.
(2b) For the herewith presented project, Dymola is used
ui = B l x&
as simulation environment [11].
with FM being the motor force, ui the induced counter
electromotive force (back-emf), B the flux density Fig. 4 shows exemplary results of a dynamic simulaimposed to the coil, l the total length of the coil wire tion for a particular motor design and compression
and i and x& current and armature velocity, respec- load. These results have been obtained with the system model of Fig. 2. A slow initial increase of the
tively. In the graphical Modelica representation of
supply voltage usrc prevents from strong overshoot of
the above motor equations shown in Fig. 3, B and l
the piston oscillation at start-up and hence from pisare combined into the motor constant cm. Besides its
ton collisions with the cylinder head and valve asback-emf, the electrical subsystem of the motor is
semblies. The fact that the motor voltage usrc, the
made up of its coil resistance R and its inductance L.
motors internal back-emf ui (induced at armature
motion) and the voltage drop across the coil resistance uR = Ri are nearly in phase at steady-state oscillation indicates that the piston oscillates close to
its resonance frequency for this particular compression load.
The diagram in the middle of Fig. 4 shows instantaneous and floating root mean square (rms) values of
the compression force FP (index P for piston) and the
motor force FM, respectively. From an energetic
point of view it is interesting to note that the motor
force FM rms is smaller than the piston force FP rms although both motor armature and piston move with
Fig. 3 Graphical Modelica representation of the
the same velocity due to its direct coupling. A desimple model of a electrodynamic linear
tailed investigation shows that this is due to the fact
motor
that at piston force maximum (discharge phase) the
piston velocity becomes zero (upper dead point posiThe Modelica Association

424

Modelica 2006, September 4th  5th

System and Component Design of Directly Driven Reciprocating Compressors with Modelica

voltage [V]

60
20
0

uR

-20
-40
-60
0.0

ui
0.1

0.2

0.3

0.4

0.5

60

FP

force [N]

40

FP rms

20

FM rms

0
-20
0.0

FM
0.1

0.2

0.3

0.4

0.5

0.020

lsuc
xavg

0.010

x0
x

0.005
0.000
-0.005
0.0

Dx

position [m]

0.015

0.1

0.2

0.3

0.4

0.5

time [s]

Fig. 4

Selected simulated voltages, forces and positions of an exemplary motor design and
compression load

In Fig. 5, the piston force versus position FP(x) for
the simulated compressor start-up shown in Fig. 4 is
depicted. Note that the pistons upper and lower dead
point positions and suction lengths are different for
each cycle prior to achievement of steady-state oscillations.

The Modelica Association

50

building-up of piston oscillation
after turn on of supply voltage

40

outer cycles:
steady-state piston oscillation

30

20

10

0
0.000

0.002

0.004

0.006

0.008 0.010
piston.x

rest position

Fig. 5

2.3

usrc

40

60

compression force [N]

tion). Thinking of the system as being linear with
harmonic oscillations would result in a phase angle
between piston force and velocity close to 90 and
hence in reactive components of the mechanical
load. The analysis of both compression power and
electrical input power with the presented nonlinear
model though shows that the differences in the rms
values of motor force and piston force are in accordance with proper physical behaviour (see efficiency
calculation, equation 4).
From the bottom diagram of Fig. 4 can be seen that
build-up of the piston oscillation from its rest position x0 in presence of one-sided, i.e. unbalanced
compression forces results in a shift of the pistons
average position xavg away from this rest position as
discussed earlier. In the diagram, the resulting suction length lsuc for each cycle is shown, too.

0.012

0.014

0.016

0.018

piston position [mm]

Simulated piston force vs. position for the
compressor start-up shown in Fig. 4
Performance evaluation

The most important aspects of system behaviour and
motor performance that are analysed with the above
system model are:
 effect of varying compression loads (suction
and discharge pressure, stroke) on net resonance frequency and mechanical and electrical
phase relations,
 influence of electrical subsystem on net resonance frequency,
 overall efficiency,
 electrical power factor,
 quality factor of motor (section 3.3).
The above mentioned dependency of the systems
mechanical resonance frequency on the motors electrical parameters coil inductance L and resistance R
can be shown with an analysis of the corresponding,
but simplified linear 3rd order system in the frequency domain, too. However, the important impact
of nonlinear compression forces on system behaviour
can not be considered with such an analysis.
The Overall efficiency  of the compressor can conveniently be calculated from floating average values
per cycle of compression power and electrical input
power:

425

t

=

Pc avg
Pel avg

=

1
FP ( ) v( ) d
T t T
t

(4)

1
i ( ) u ( ) d
T t T

Modelica 2006, September 4th  5th

T. Bdrich

2.4

Control concepts

Modulation of the compressor capacity, i.e. adaption
of the refrigerant mass flow rate to the requested
cooling power of the refrigerator, is possible by one
or more of the following means:
 variation of suction length and associated
stroke,
 variation of operating frequency and
 intermittent operation with varying duty cycle
(as for conventional compressors with crankshaft mechanism and constant speed).
Since continuous operation at constant frequency is
projected for the chosen sample application, only
suction length control is applicable. Suction length
can not directly be measured without large effort,
therefore measures are taken to estimate the suction
length of each cycle from the piston stroke and to
realise a stroke control instead.
By now, different control concepts and appropriate
controllers have been developed, implemented in
Modelica and successfully tested with dynamic
simulations at system level. The following control
concepts are currently under closer investigation:
 stroke control only without control of top dead
center position (guarantees optimum motor efficiency since no DC bias voltage is superimposed on the controlled AC supply voltage),
 combined stroke control and control of top dead
center position (guarantees minimum clearance
volume and related thermo-dynamic losses but
increases ohmic losses in the motor due to a DC

The Modelica Association

bias voltage to be superimposed on the controlled AC supply voltage),
 various additional control concepts that do not
require measured or estimated information of
the piston stroke, but information on top dead
center position only (e.g. obtained from a proximity sensor).
The performance of the above control concepts with
respect to overall and motor efficiency, electrical
power factor and phase relations is currently investigated with the developed system models. The stroke
controllers are mostly of proportional and integral
type (PI). For the test of principle voltage supply
concepts, different models have been developed and
are currently tested (e.g. thyristor and triac control
for simple and cost-effective mains operation).
2.5

Simulation-based design

The above mentioned controller models for stroke
control are not only used for simulation and test of
concepts for capacity modulation of the compressor,
but also for simulation-based selection of fundamental design parameters. This is because stable piston
oscillations with constant stroke can be guaranteed
during dynamic simulation with closed loop stroke
control, but not during dynamic simulation of large
strokes with open loop voltage supply only due to
the nonlinear compression forces.
A good example for the simulation-based selection
of a design parameter is the stiffness of the spring(s)
needed for resonant piston oscillation (Fig. 6).
1
0.95
0.9
0.85

Efficiency

with T being the period of one cycle, FP the compression force acting on the piston, v piston velocity
and i and u motor current and voltage, respectively.
At present, only ohmic losses of the coil are considered for calculation of efficiencies. Hence, the efficiency values shown below are too high compared to
reality. Additional losses such as mechanical friction,
friction due to gas leakage and ferromagnetic losses
in the motor are not yet considered in the above
model. This was done intentionally in order to keep
the model behaviour straightforward during initial
analyses. However, model components for consideration of the above loss mechanisms are currently
added to the developed system and motor models
and their suitability for system and motor design is
tested.
Characteristic values for evaluation of the principle
motor designs currently under development are
briefly discussed in section 3.3.

0.8
0.75
0.7
0.65
0.6

optimum spring stiffness

0.55

maximum load
nominal load
minimum load

0.5
7.000 7.500 8.000 8.500 9.000 9.500 10.000 10.500 11.000 11.500 12.000

Spring stiffness [N/m]

Fig. 6

Simulation-based selection of optimum
spring stiffness obtained with parameter
sweeps for this design parameter (only ohmic losses in the motor coil considered for
efficiency calculation, see text)

The optimal required spring stiffness cspring for a particular design can not be obtained otherwise with the
same certainty. This is because of the properties of
the compressed gas that resemble that of a strongly

426

Modelica 2006, September 4th  5th

System and Component Design of Directly Driven Reciprocating Compressors with Modelica

nonlinear gas spring (section 2.2). Its stroke-, position-, and pressure-dependent stiffness cgas adds to
the mechanical spring stiffness and affects the net
resonance frequency fres of the mechanical subsystem
with the moving mass m:
f res =

1
2

cspring + cgas
m

(5)

Each efficiency value shown in Fig. 8 was obtained
from a steady-state efficiency calculation at the end
of respective dynamic simulations during parameter
sweeps for the spring stiffness cspring. Stroke control
was implemented in the Modelica model during
these simulations, so the desired stroke length for
each particular compression load was assured.
Notice that the calculated efficiency values are too
high compared to reality since only ohmic losses in
the motor coil were considered during these simulations as described in section 2.3.

3
3.1

Magnetic converter design
Design Methodology

An appropriate approach for the motor design for
directly driven reciprocating compressors can
roughly be outlined as follows:
1. Specification of mechanical motor parameters (stroke, rms force, average power) from
compression data (idealised indicator diagram, compression work per cycle) for
specified compression load scenarios (nominal and maximum load),
2. Specification of additional motor parameters, e.g. max. ambient temperature within
compressor capsule, volume, refrigerator
supply voltage and frequency,
3. Selection of promising principle motor designs, coarse dimensioning of these principle
solutions (geometry and material of magnetic components, coil and wire data) by
means of lumped magnetic networks,
4. evaluation of the found principle solutions
by means of characteristic factors (section
3.3) and dynamic simulation at system level
(sections 2.2, 2.3), selection of the optimum
solution,
5. fine dimensioning of the selected motors
magnetic design with Finite Element Analysis (FEA),
6. detailed design, manufacture and test of prototypes.
The Modelica Association

Whereas the use of FEA is valuable for optimisation
of a particular motors magnetic design, it is in most
cases not suited for efficient coarse dimensioning of
principle motor designs and for usage in extensive
dynamic simulations due to the high time effort for
model pre-processing and due to its high computational effort, respectively. Instead, lumped magnetic
networks should be used for initial coarse designs.
For the motor design within this project, the Modelica Magnetic library developed by the author is used
for the implementation of magnetic network models
of the motors [12]. Through its usage within this design project, the library is extended, e.g. with models
for electrodynamic linear actuators, and its model
components are enhanced. It is planned to submit a
revised version of this library as soon as possible.
3.2

Principle motor designs

Different principle motor designs are already known
for directly driven reciprocating compressors. They
are a subset of the broad spectrum of different types
and designs of electrodynamic and electromagnetic
linear drives. In general, numerous classification criteria are popular for classification of electromagneto-mechanical converters. For example, based
on the underlying physical principle one can distinguish between:
 electrodynamic linear drives based on Lorentz
forces [13],
 electromagnetic or reluctance drives based on
surface forces between ferromagnetic component(s) and adjacent air gap(s) [14] and
 linear drives that utilise both of the above working principles for force generation.
Depending on the moving component, classification
between the following motor categories is popular:
 moving coil (mostly for electrodynamic drives),
 moving magnet (electrodynamic and/or reluctance forces) and
 moving iron (reluctance drives).
Location of stator and armature components is a
classification criterion, too.
At present, known motor designs are analysed and
additional principle solutions (a promising subset of
motors from the above categories) are developed. All
found solutions are evaluated. The required coarse
dimensioning for the sample application is mostly
done with the above mentioned lumped magnetic
network models. Despite this efficient design approach, coarse dimensioning of motors based on different working principles is a rather time-consuming

427

Modelica 2006, September 4th  5th

T. Bdrich

process. Nevertheless, it is a prerequisite for optimum motor design for a particular application.
Although the above mentioned evaluation is not yet
completed, it currently appears that the motor concept realised by Sunpower, Inc. [6] and already utilised in a commercial domestic refrigerator of LG
Electronics, Inc. [4] [5] is an advantageous one. The
principle structure of this motor is shown in Fig. 7
together with the magnetic field lines of the permanent magnetic flux in neutral position. Latter were
obtained from FEA for the shown exemplary design.
Operation of this motor is based on the superposition
of permanent magnetic flux and electromagnetic coil
flux in the respective air gap sections and results in a
constant thrust over the complete stroke range. This
thrust is proportional to the current. Hence motor
operation can be described with equations 2a and 2b
as for a purely electrodynamic linear motor. Based
on that perception, the creators of this motor promote
the treatment of the permanent magnets magnetomotive force as equivalent currents at the two end
planes of the permanent magnets hollow cylinder
[15]. Whereas this design approach enables for easy
calculation of motor forces, it does not account for
the permanent magnetic flux through the stator at
off-center armature positions and for related saturation effects in the ferromagnetic stator components
properly.
inner
stator

concentric
coil

Fig. 7

outer
stator

N

Line of symmetry

S

permanent
magnet
= armature

Stroke range of
permanent magnet

Structure of a moving magnet motor based
on [6] and permanent magnetic flux without
stator current obtained by FEA

Unlike with the above modelling approach, the stator
flux due to the permanent magnet at off-center armature positions is treated properly with the lumped
magnetic network model shown in Fig. 8. It was created with model components from the Modelica
Magnetic library [12]. The depicted reluctance eleThe Modelica Association

ments represent the respective air gap and permanent
magnet regions at either of the two pole regions. The
motor force FM is developed according to

FM = 

1 nlinear 2 dRm i
 i dx
2 i =1

(6)

with nlinear denoting the number of linear reluctance
elements, i the magnetic flux through each respective reluctance and Rm i/dx the derivative of each reluctance with respect to armature position x [14].

Fig. 8

Simple lumped magnetic network model of
the moving magnet motor created with elements from the Magnetic library [12]

In the linear model of Fig. 8, nonlinear ferromagnetic
reluctance elements of inner and outer stator components are omitted for reasons of initial simplicity.
Also, the depicted model is only a stationary one. It
was used for initial analyses of magnetic flux distributions at different armature positions and motor
currents. The electro-magnetic energy conversion
that is important for dynamic operation is not considered in this model. However, both nonlinear ferromagnetic reluctance elements and a dynamic
model of the stator coil that describes the coupling
between the motors electrical and its magnetic domain can easily be added to the motor model from
standard components of the Modelica Magnetic library (see examples in this library). Latter enhancement simply requires replacement of the coils stationary magnetomotive force EM of Fig. 8 with a
dynamic model of a coil. The resulting dynamic motor model can then directly be used for dynamic system simulation, e.g. with the model shown in Fig. 2.
This has already been done for magnetic network
models of different moving coil motor designs and
will be done for the additional motor designs currently under development, too.

428

Modelica 2006, September 4th  5th

System and Component Design of Directly Driven Reciprocating Compressors with Modelica

3.3

Motor evaluation

For comparison of the found principle motor designs,
the performance to be expected is currently evaluated by means of the developed motor models.
Quantitative factors for this motor evaluation are:
 motor efficiency for specified minimum/ nominal/ maximum compression load,
 quality factor E = FM/ Pel as important measure
for the sensitivity of electro-magneto-mechanical converters (FM motor force, Pel electrical input power) [16],
 mass of selected components (permanent magnet, copper, iron) as measure for the material
cost to be expected,
 related power, i.e. power per volume and
 motor constant cm for calculation of thrust from
motor current.
Additional qualitative criteria like the presence of
parasitic radial magnetic forces or durability of the
design (e.g. important for flexible wires to moving
coils) shall be considered in this evaluation, too. This
evaluation will be based on guidelines provided
in [17].

4

ciple motor designs for the chosen sample application will be completed prior to the intended test of
first experimental motor prototypes.
Evaluation of the suitability of different motor principles for the chosen sample application requires the
coarse dimensioning of respective motors. The usage
of lumped magnetic network models built with the
Modelica Magnetic library is an efficient means for
this rather laborious design task.
It is worth to note that the developed model-based
design approach for directly driven reciprocating
compressors is not restricted to refrigerant compressors but can be adapted to different fields of applications, too.

References
[1]

[2]

Summary and outlook

The proper design of directly driven reciprocating
compressors and their respective electrodynamic and
electromagnetic motors is challenging due to nonlinear compression forces, strong interactions between
the different subsystems and complex phase relations
and resonance phenomena at varying compression
loads. Modelica is excellently suited for consistent
modelling of those heterogenous systems and the
developed models can advantageously be used for
simulation-based system and component design.
Development of compressor operation and control
principles as well as of appropriate motor designs is
currently done for a chosen sample application,
namely for a refrigerant compressor of a domestic
refrigerator. The elaborated design approach based
on dynamic system simulation and analysis of integral quantities at steady-state piston oscillations
proved to be well-suited for the rather complex system design. Although the time effort for initial model
development is relatively high, the results obtained
from dynamic simulations are extremely valuable for
the search of appropriate system and component configurations and for understanding of the complex
dynamic behaviour of directly driven reciprocating
compressors. With the developed models, the ongoing simulation-based evaluation of different prinThe Modelica Association

429

[3]

[4]

[5]

[6]

[7]

[8]

Frenkel, M.I.: Kolbenverdichter: Theorie,
Konstruktion und Projektierung. Berlin:
Verlag Technik 1969
Kudarauskas, S.; Didziokas, R.; Simanyniene, L.: Innovative Free-piston Compressor Based on Generalized Conception of
Compressors Driven by an Oscillating Electrical Motor. Proc. of International Compressor Engineering Conference at Purdue,
West Lafayette, USA, July 17-20, 2006
Sawafuji Electronic Co., Ltd.: Home page
Engel Swing Compressor.
http://www.sawafuji.co.jp/engel/inde_e.htm,
(18.05.2006)
Park, K.; Hong, E.; Lee, H.-K.: Linear Motor
for Linear Compressor. Proc. of International Compressor Engineering Conference
at Purdue, West Lafayette, USA,
16.-19.07.2002, pp. 337-342
LG Electronics, Inc.: Product home page refrigerator.
http://www.lge.com/products/category/list/ho
me%20appliances_refrigerator.jhtml,
(18.05.2006)
Redlich, R.W. (Sunpower, Inc.): Electromechanical transducer particularly suitable for a
linear alternator driven by a free-piston Stirling engine. US 4,602,174, 1986
CoolPack (ver. 1.46): Technical University
of Denmark, Department of Mechanical Engineering, 2001, www.et.du.dk/CoolPack
Modelica Association: Modelica home page.
http://www.modelica.org, (24.07.2006)

Modelica 2006, September 4th  5th

T. Bdrich

[9]

[10]

[11]
[12]

[13]

[14]

[15]

[16]

[17]

Modelon AB: AirConditioning Library.
http://www.modelon.se/prod.htm,
(13.07.2006)
Kudarauskas, S.; Simanyniene, L.; Guseinoviene, E.: Analysis of Operation of Piston
Compressor Driven by Oscillating Electrical
Motor. Proc. of International Compressor
Engineering Conference at Purdue, West Lafayette, USA, July 16-19, 2002, pp. 869-876
Dymola (ver. 6): Dynasim AB, 2006,
http://www.dynasim.se
Bdrich, T.; Roschke, T.: A Magnetic Library for Modelica. Proc. of 4th International
Modelica Conference, Hamburg, Germany,
March 7-8, 2005, pp. 559-565
Stlting, H.-D.; Kallenbach, E. (Ed.): Handbuch Elektrische Kleinantriebe. 2nd ed.,
Mnchen, Wien: Hanser 2002
Kallenbach, E.; Eick, R.; Quendt, P. et. al.:
Elektromagnete: Grundlagen, Berechnung,
Entwurf und Anwendung. 2nd ed., Wiesbaden: B.G. Teubner 2003
Redlich, R.; Unger, R.; Van der Walt, N.:
Linear Compressors: Motor Configurations,
Modulation and Systems. Proc. of International Compressor Engineering Conference
at Purdue, West Lafayette, USA, July 23-26,
1996
Lenk, A.; Pfeifer, G.; Werthschtzky, R.:
Elektromechanische Systeme - Mechanische
und akustische Netzwerke, deren Wechselwirkungen und Anwendungen. Berlin,
Heidelberg: Springer 2001
VDI 2225 Blatt 3 (1998): Konstruktionsmethodik - Technisch-wirtschaftliches Konstruieren - Technisch-wirtschaftliche Bewertung. Dsseldorf: Beuth-Verlag

The Modelica Association

430

Modelica 2006, September 4th  5th

Multizone Airflow Model in Modelica

Multizone Airflow Model in Modelica
Michael Wetter
United Technologies Research Center
411 Silver Lane
East Hartford, CT 06108

Abstract

The flow elements are airflow paths such as open doors
and windows, construction cracks, stair cases, elevator
We present the implementation of a library of multi- shafts, ducts and fans.
zone airflow models in Modelica and a comparative
Multizone airflow models are typically used for time
model validation with CONTAM. Our models have a
domain simulation of convective energy and contamsimilar level of detail as the models in CONTAM and
inant transport between thermal zones of a building
COMIS. The multizone airflow models allow modeland to quantify stack effects in high rise buildings.
ing the flow between rooms through doors, staircases
For thermal building simulation, the closed door and
or construction cracks. The flow can be caused by
user-estimated airflows that are common practice in
buoyancy effects, such as stack effects in high rise
most multizone simulations are a poor representation
buildings or air temperature imbalance between adof reality [8, 18]. Assessing the convective energy
joining rooms, by flow imbalance of a ventilation sysand species transport can also be important for contem, or by wind pressure on the building envelope.
trols analysis, since the convective transport through
The here presented library can be used with a Modopen doors can couple one local control loop with anelica library for thermal building and HVAC system
other. This situation may occur, for example, if two
simulation to compute interzonal air flow rates. The
rooms have their own local VAV damper control loop
combined use facilitates the integrated design of buildthat causes pressure or temperature imbalance if one
ing systems, which is typically required for analyzing
damper closes. To model such phenomenas, the here
the interaction of room control loops in variable air
presented airflow models can be used to define flow
volume flow systems through open doors, the flow in
paths that connect different thermal zones of a building
naturally ventilated buildings and the pressure in elethat may be presented by the model described in [23].
vator shafts caused by stack effects.
Multizone airflow models represent the room volumes
Keywords: Multizone Airflow, Contaminant Transport,
assuming uniform distribution of temperature, presStack Effect
sure and species concentration throughout the room
as opposed to the spatially more refined resolution of
zonal models [10] or computational fluid dynamics
1 Introduction
models. The reduced number of state variables of multizone airflow models makes it computationally feasiWe present the implementation of a library of multible to perform annual simulations of heat and species
zone airflow models in Modelica and a comparative
transport in buildings.
model validation in which we computed the buoyancy
driven air flow rates in CONTAM and in Modelica In [7], Feustel and Dieris present an extensive literfor a two storey building. The implemented models ature review and questionnary survey of more than
have a similar level of detail as the models in the state- 50 multizone airflow models and list the main equaof-the-art multizone airflow programs CONTAM [4] tions used in those models. Today, two multizone
and COMIS [6]. Multizone airflow models consist of airflow models are well established: CONTAM, denodes that are connected by flow elements. The nodes veloped by the National Institute of Standards and
may represent room air volumes, the exterior environ- Technology (NIST) and COMIS, developed in 1988ment or connections in a duct system and contain state 89 in an international context within IEA Annex 23 at
variables, typically pressure, temperature and concen- the Lawrence Berkeley National Laboratory (LBNL).
trations such as water vapor, CO2 , smoke or pollutants. COMIS has been interfaced with the thermal build-

The Modelica Association

431

Modelica 2006, September 4th  5th

M. Wetter

ing energy simulation program EnergyPlus [9]. EnergyPlus uses airflow rates that were computed by
COMIS in the previous time step. This coupling
with time lagging, however, can cause instability if
the time step is too large [18]. COMIS and CONTAM have both been implemented in TRNSYS in the
form of a TRNSYS TYPE (i.e., a component model)
that can be interfaced with TRNSYS multizone thermal building model TYPE 56 [15]. In subsequent
work, COMIS has also been integrated directly into
TYPE 56 due to convergence problems and to improve
the user interface [22]. The thermal building simulation programs IDA [19] and ESP-r [3, 8] have models for interzonal air exchange for bi-directional flow
through open doors. The basic flow resistances used
in COMIS, CONTAM, IDA and ESP-r are powerlaw
equations that compute the steady-state flow as a function of the static pressure difference.
Lorenzetti [12] reports that some flow models in
COMIS and CONTAM can give non-repeatable results due to memory in the calculation routines. For
example, the crack model in COMIS finds the density of the air in the crack using the flow calculated
in the last evaluation of the crack in question. This
can cause the solver to fail converging to a solution.
Another concern is that COMIS does not solve the
mechanical energy balance and the friction models simultaneously which can yield to errors of around 30%
for flows through passive vertical shafts for stairways,
elevators or natural ventilation. Lorenzetti concludes
that due to the decoupling of the mechanical energy
balance and the friction models, COMIS cannot implement any meaningful model for bi-directional flow
between floors of a building.

2

Physical Model Description

We use a powerlaw relationship to model the volume flow rate through an aperture as a function of the
static pressure difference DP between two rooms. Let
DP0,e  1 be a user specified parameter. The governing equations are
(
for DP  3/2 DP0,e ,
k DPm ,
(1a)
V =
m
k (DP) , for DP  3/2 DP0,e ,

as DP  0, which can cause problems for numerical
solvers. Thus, we use for small pressure differences
the linear function
m1
DP,
V = k DP0,e

DP  [DP0,e /2, DP0,e /2]. (1b)

The transition between equation (1a) and (1b) is done
in the intervals DP  (3/2 DP0,e , 1/2 DP0,e ) and
DP  (1/2 DP0,e , 3/2 DP0,e ) using the built-in Dymola
function spliceFunction, which defines V () as a
function that is once continuously differentiable in DP.
Linearization around zero is also used in [4, 2].
We observed good numerical experiments by setting
DP0,e = 0.1 Pa. Using DP0,e = 0.001 Pa caused the time
integration solver in some examples to jam at state
events caused by a buoyancy driven flow reversal.
We will now discuss the implemented models, which
all compute the flow based on (1).

2.1 Orifice
The flow through an orifice with cross section area
A can be deduced from the Bernoulli equation and is
given by
p
V = Cd A 2/r DPm ,
(2)

where Cd  (0, 1) is a dimensionless discharge coefficient and r is the density of the medium that flows
through the orifice. Large openings are characterized
by m very close to 0.5, while values near 0.65 have
been found for small crack-like openings [21, 4].
In [20], van der Mass et al. present a brief literature
review about discharge coefficients and conducted
own experiments on a 1:10 and a full scale model.
They concluded that Cd can confidently be chosen in the range of 0.6 to 0.75, provided that the
temperature stratification in the rooms is taken into
account (andR hence V is obtained using the integration V = (dV /dh) dh over the aperture height.)
They report that Cd = 0.61 is widely used, and that
Mahajan [14, 13] found values as low as 0.33 for
isothermal rooms.1 Van der Mass et al. also report
that Riffat [17] found for the transport through both
a door and a staircase a value of Cd = 0.6 for an
interzonal air temperature difference of DT = 1 K,
decreasing to Cd = 0.25 for DT = 10 K, which is in
contrast to Kiel and Wilson [11], which obtained in
full scale experiments Cd = 0.40 + 0.0045 DT .

where V is the volume flow rate, k is a flow characteristics, DP is the static pressure difference over the
aperture and m  [0.5, 1] is a flow exponent, with
1 Two rooms are said to be isothermal if the temperature differm = 0.5 for turbulent flow and m = 1 for laminar flow. ence between the rooms is much larger than the vertical temperaFor m < 1, the derivative dV /dDP tends to infinity, ture difference between floor and ceiling in each room.
The Modelica Association

432

Modelica 2006, September 4th  5th

Multizone Airflow Model in Modelica
1.04

We convert the effective air leakage area to the orifice
equation (2) as follows. Let L denote the effective air
leakage area with units m2 . The area A in the orifice
equation (2) is obtained by equating (2) with
p
(5)
V = Cd,r L 2 DPr /r,

n=0.5
n=1

1.03

1.01

a

K []

1.02

1

from which follows that

0.99

A=

0.98

0.97
10

15

20
temperature [ C]

25

30

Cd
L DPr0.5m .
Cd,r

(6)

If no value of m is reported with the test results, then
Dols and Walton [4] recommend m = 0.6 to m = 0.7.

Figure 1: Correction factor used in CONTAM for
change of volume flow rate as a function of temper- 2.3 Large Vertical Open Aperture
ature.
We will now present a model for bi-directional airTo account for the temperature dependency of the air flow at steady state conditions through a large aperture.
density r and the kinematic viscosity n, CONTAM The model can be used to compute the bi-directional
multiplies the right hand side of the orifice equation (2) airflow through open doors or windows. We assume
in this section that the aperture is always open. In
by the correction factor
Sec. 2.4, we extend the model in such a way that the
n 
2 n1

r0
n0
aperture can also be closed.
, (3)
Ka (P, T ) =
r(P, T )
n(P, T )
with r0 = 1.2041 kg/m3 , n0 = 1.5083  105 m2 /s,
r(P, T ) = P/(287.055 T ), (T ) = 3.7143 106 +
4.9286  108 T and n(P, T ) = (T )/r(P, T ). Fig. 1
shows Ka (P, T ) for the limiting cases n = 0.5 and n = 1
with P = 101325 Pa. Since Ka is close to one for the
expected temperature range, we will use Ka = 1 for
all temperatures. Furthermore, the air density in (2)
should be evaluated at the temperature and pressure of
the medium that flows through the orifice. However,
if the air temperature is different on either side of the
orifice, then the derivative dV /dDP of (1b) is discontinuous at DP = 0. We prevent this discontinuity by
setting e
r = 1.2 kg/m3 in the orifice equation (2), independent of the temperature and pressure. Thus, we
implemented (2) in Modelica using the powerlaw (1)
with
q
r.
(4)
k = Cd A 2/e

2.2

2.3.1

Governing Equations

To deduce the model, we consider an aperture with
height h and width w that separates two air volumes
(see also Fig. 2). Let z denote the height coordinate,
defined so that z = 0 at the bottom of the aperture. Let
PA and PB denote the static pressures, let TA and TB
denote the temperature and let rA and rB denote the
air density in the two air volumes at height zA and zB .
Let TA , dTA (z)/dz and TB , dTB (z)/dz denote the
vertical temperature gradient in each volume which is
assumed to be independent of z. We approximate the
local air density in volume A at a height z above the
bottom of the aperture as


(z  zA ) TA
.
(7)
rA (z) = rA 1 
TA
The static pressure at height z in volume A is

Effective Air Leakage Area

Z zA

Z z

rA (s) ds  g
rA (s) ds, (8)
PA (z) = PA + g
0
0
ASHRAE Fundamentals [1, p. 25.18] and Clarke [3]
list effective air leakage areas for various building con- where g = 9.81 m/s2 is the earth acceleration. Substistruction elements, such as doors, windows and vents. tuting (7) in (8) and evaluating the integrals yields
The effective air leakage area tabulated in [1] are based
on a reference pressure difference DPr = 4 Pa and a

TA
(z)
=
P
+g
r
(z
z)+g
r
z2  2 z zA + z2A .
P
A
A
A
A
A
discharge coefficient Cd,r = 1, but other data sets use
2 TA
(9)
DPr = 10 Pa and Cd,r = 0.6 [4].
The Modelica Association

433

Modelica 2006, September 4th  5th

M. Wetter

z
PB (z)

PA (z)

h
z
zAB

PA , rA
neutral
height

Room A

0

PB , rB

Room B

P(z)

Room cross section

Pressure distribution

Figure 2: Schematics of two rooms with different heights that are connected by a large vertical opening of
height h. The left-hand graphics shows schematically the static pressures PA () and PB () as a function of the
height z for the situation where PA < PB , rA < rB and without vertical temperature gradient in the rooms. The
neutral height is at the point where PA (z) = PB (z).
An identical deviation can be done for the static pres- and (12). Furthermore, in computing the pressure difsure PB (z). Thus, the static pressure difference at ference across the opening, CONTAM assumes the
height z is
vertical temperature profile to be constant [4, p. 152],
which facilitates in view of the denominator of (13)
DPAB(z) , PA (z)  PB (z)
the numerical solution if rA and rB are close to each
= PA  PB + g (rA (zA  z)  rB (zB  z)) other. In COMIS [6], however, the opening is dis
cretized along the height coordinate to eliminate the
T
+g rA A z2  2 z zA + z2A
need for solving the pressure difference equation (10)
2 TA

for the neutral height. The total flow is then obtained

T
(10) by summation of the flows for the whole opening.
g rB B z2  2 z zB + z2B .
2 TB
Equation 10 is a quadratic equation in z. Its solutions
z  [0, h] that satisfy DPAB (z ) = 0, if they exist, are
called the neutral heights. At the neutral heights, there
is no flow through the aperture.
The volume flow rate from A to B through
m (z) > 0,
the height element
dz is for PAB
p
m (z) w dz
or else
VAB (z)/dz = Cdp 2/rA (z) DPAB
VAB (z)/dz = Cd 2/rB (z) (DPAB(z))m w dz.
The net flow from A to B is
VAB =

Z h

max(0, dVAB (z)/dz) dz

(11)

Z h

min(0, dVAB (z)/dz) dz.

(12)

0

and similarly
VBA =

0

2.3.2

Model Discretization

As in COMIS, we also select a discretized model to
implement an approximate solution of (11) and (12)
since we expect the discretized model to be numerically more robust than an implementation of the analytical solution of (11) and (12) which requires solving (10) for the neutral height which may have zero,
one or two solutions in [0, h].
For a fixed n  N, we discretize the height h of the
door into n compartments of equal height Dh = h/n.
For i  {1, . . . , n}, we define zin , h (i  1/2)/n. We
use the orifice equation (2) to compute the flow in each
compartment. For sufficiently large positive pressure
differences, the orifice equation in each compartment
is
s
2
h
i
(14)
DPm (zi ),
VAB,n
= Cd w
n rA (zin ) AB n

The exact evaluation of the integrals in (11) and in (12)
requires the knowledge of the neutral heights. In the
absence of vertical temperature gradients, i.e., if TA =
where DPAB(zin ) is defined in (10). We implement the
TB = 0, the neutral height is
orifice equation using the powerlaw relation (1) with
s
PA  PB + g (rA zA  rB zB )
z =
.
(13)
h 2
g (rA  rB )
,
(15)
k = Cd w
n b
r
CONTAM and IDA neglect vertical temperature grar , (rA + rB )/2. In (15), we used the average
dients and evaluate symbolically the integrals (11) where b
The Modelica Association

434

Modelica 2006, September 4th  5th

Multizone Airflow Model in Modelica

of the density at the two reference points A and B to
approximate the density in dz. As mentioned earlier,
the density in dz depends on the flow direction, but using the density of the inflowing medium would cause
the volume flow rate to be non-differentiable with rem (z) = 0. In this
spect to the pressure difference at DPAB
model, we know the density on both sides of the aperture and hence use their average value rather than a
constant density. In the current implementation, we
neglect the vertical temperature gradient in volume A
and B and set TA = TB = 0. The model could be extended with little effort to take into account a temperature gradient by adding the quadratic terms in the implementation of the pressure difference equation (10).
Extending the model may be important if a room has
a displacement ventilation, since vertical temperature
gradients can have a major influence on the heat exchange by interzonal airflows [8].
In order to formulate a once continuously differentiable approximation to the max(, ) and min(, )
functions in (11) and in (12), we compute the average
velocity in each compartment as

m of each model. In particular, in view of (6) and (4),
we set for the closed aperture
Cd
1
L DPr0.5m
kclo = Cd
n Cd,r

s

2
b
r

(18)

where n is the number of compartments and b
r , (rA +
rB )/2, and we set for the open aperture
1
kope = Cd w h
n

s

2
.
b
r

(19)

In both models, the flow exponent m is a user-specified
parameter which we denote by mclo and mope . The
effective flow constant and flow exponent is computed
as
k = y kope + (1  y) kclo ,

(20)

m = y mope + (1  y) mclo .

(21)

We do not claim that this model is able to describe accurately the flow through a half opened door by setting
.
(16) y = 1/2. However, for numerical reasons, to change
vin ,
w h/n
the aperture from open to closed, it may be better to
The net flow from A to B and from B to A through vary the input signal y continuously in time as opposed
each element is computed as
to using a step function.
i
VAB,n

~V i = V i H(v
e in ; ve ),
AB,n
AB,n
~V i = V i + ~V i ,
BA,n

AB,n

AB,n

(17a)
(17b) 2.5

Pressure of a Medium Column

e ve ) is a once continuously differ- This model can be used to model the static pressure of
where H(;
a medium column. The model computes the difference
entiable approximation to the Heaviside function,
between the static pressure at the bottom Pb and the top
implemented using the Dymola built-in function
P of a vertical medium column of height h as
spliceFunction, parametrized by a user specified t
smoothing parameter ve . Good numerical performance
Pb = Pt + h r g,
(22)
has been obtained with ve = 0.001 m/s.

2.4

Large Vertical Operable Aperture

We will now combine the model for the effective air
leakage area, presented in Sec. 2.2, and the model for
large vertical open apertures, presented in Sec. 2.3, to
construct a model for a large aperture that can be open
or closed, depending on an input signal. As in the
model for the open aperture, we discretize the opening in n horizontal segments, and compute the pressure
difference DPAB(z) in each compartment using (10).
Let y  [0, 1] be an input signal, defined such that the
aperture is closed if y = 0 and open if y = 1.
We combine the two models by using a linear combination of the flow constants k and the flow exponents
The Modelica Association

where the density r is a user input and g = 9.81 m/s2
is the earth acceleration.

3 Implementation in Modelica
We implemented the models using Modelica 2.2 [16]
and Modelica Fluid [5]. All models use one or several
instances of a model that implements the power law (1)
to define the relationship between flow and pressure
difference. Fig. 3 and Fig. 4 show the class hierarchy
of the models with one- and two-directional flow, and
how the different models relate to the physical description described in the previous sections.
435

Modelica 2006, September 4th  5th

M. Wetter

Modelica Fluid.Interfaces.PartialTwoPortTransport
Base class for one-directional flow elements

PowerLawResistance
Implements an instance of power law (1)

MediumColumn
Implements pressure (22)

Orifice
Implements an instance of orifice (4)

EffectiveAirLeakageArea
Implements effective leakage area (6)

Figure 3: Class hierarchy of models with one-directional flow. The dashed models are partial models.

TwoWayFlowElement
Base class for
two-directional flow elements
TwoWayFlowElementBuoyancy
Defines height parameters and
input signal for rA and rB
DoorDiscretized
Implements n instances of power law (1) and
implements equations (10), (14), (16) and (17)
DoorDiscretizedOpen
Assigns m and k using (15)

DoorDiscretizedClosed
Defines input signal y and
assigns m and k using (18) to (21)

Figure 4: Class hierarchy of models with two-directional flow. The dashed models are partial models.

The Modelica Association

436

Modelica 2006, September 4th  5th

Multizone Airflow Model in Modelica

Table 1: Parameters of the flow elements.

5 Conclusions

Using an object-oriented equation-based modeling
language allowed a rapid implementation of a library
Discharge coefficient CD
with multizone air flow models that can be connected
Flow coefficient m
to thermal building models. A comparative model valTransition to linear pressure
idation of the buoyancy driven steady-state mass flow
0.1
0.1
law DP0,e in Pa
rates in a two storey building between our models and
2
0.01
2.2
Area A in m
CONTAM showed agreement of the mass flow rates
Width w in m
1
within 2%. This deviation is significantly smaller than
Height h in m
2.2
the uncertainty associated with selecting model pa10
Number of compartments ncom rameters. Large uncertainty in model parameters exist
0.001
Minimum velocity ve in m/s
in the selection of the discharge coefficient, the flow
exponent and the equivalent leakage area of cracks in
the building envelope.
Table 2: Mass flow rates in kg/s computed by CON- From a computational point of view, smoothing the
equations to convert them into once continuously difTAM and by Modelica.
ferentiable equations was critical. Without smoothing,
the solver failed in some examples to solve the system
Flow element
CONTAM Modelica
of equations.
door West to East 0.4103
0.4184
door East to West 0.4146
0.4228
opening WT
0.0044
0.0044
6 Acknowledgments
opening ET
0.0044
0.0044
opening OB
0.0080
0.0080
This research was supported by the U.S. Department
opening OT
0.0080
0.0079
of Commerce, National Institute of Standards and
Orifice
0.65
0.5

Door
0.78
0.78

Technology, Advanced Technology Program under the
agreement number 70NANB4H3024.

4

Comparative Model Validation

7 Nomenclature

We will now compare the buoyancy driven air flow 7.1 Conventions
rates through orifices and open doors that were com1. Vectors elements are denoted by superscripts.
puted in Modelica using Dymola 5.3b with the ones
computed in CONTAMW 2.1. The computations were
2. f () denotes a function where () stands for the
done on a Windows 2000 computer.
undesignated variables. f (x) denotes the value of
Fig. 5 shows a side view of the three rooms used in
f () for the argument x.
the validation, Fig. 6 shows the implementation in
Dymola and Tab. 1 shows the parameters used to de7.2 Symbols
scribe the flow paths. In the Modelica computations,
the parameter DP0,e used in the smoothing described
aA
a is an element of A
in (1) was set to 0.1 Pa and we used e
r = 1.2 kg/m3 in N
{1, 2, 3, . . .}
the orifice equation (2).
,
equal by definition
Tab. 2 lists the mass flow rates computed by CONTAMW and by Modelica. The door model has the
biggest difference in mass flow rate. However, the
difference is only 2%, and hence the CONTAM and
Modelica model agree within the accuracy expected
by the model simplification, such as the assumption of
constant density in the flow path and the discretization
of the door height.
The Modelica Association

437

Modelica 2006, September 4th  5th

M. Wetter

Room Top
TT = 20 C
1.5 m

b

WT

ET

1.5 m

OT
TW = 25 C

TE = 20 C

1.5 m

b

b

b

door
Room West

Room East

Outside
Tout = 10 C
pout = 101325 Pa

OB

Figure 5: Side view of the three rooms used in the validation study.

Figure 6: Implementation of the three room problem that was used for the comparative program validation. The
green flow paths are orifice models that implement the model of Section 2.1, the red bars are medium column
models that implement the model of Section 2.5, and the gray rectangle is the door model of Section 2.3 and 2.4.

The Modelica Association

438

Modelica 2006, September 4th  5th

Multizone Airflow Model in Modelica

References

[10] Christian Inard, Hassan Bouia, and Pascal Dalicieux. Prediction of air temperature distribution
[1] ASHRAE. Fundamentals. American Society of
in buildings with a zonal model. Energy and
Heating, Refrigeration and Air-Conditioning EnBuildings, 24(2):125132, July 1996.
gineers, 1997.
[11] D. E. Kiel and D. J. Wilson. Gravity driven flows
through open doors. In 7th AIVC Conference,
[2] Axel Bring and Per Sahlin. Modelling air flows
Stratford on Avon, UK, September 1986. Air Inand buildings with NMF and IDA. In Proc. of the
filtration and Ventilation Centre.
3-rd IBPSA Conference, pages 463469, Adelaide, Australia, August 1993.

[12] David M. Lorenzetti. Assessing multizone airflow software. Technical Report LBNL-47653,
[3] Joe A. Clarke. Energy Simulation in Building
Lawrence Berkeley National Laboratory, BerkeDesign. Butterworth-Heinemann, Oxford, UK,
ley, CA, USA, December 2001.
2nd edition, 2001.
[13] B. M. Mahajan. Measurement of interzonal heat
[4] W. Stuart Dols and George N. Walton. CONTAM
and mass transfer by natural convection. Solar
2.0 user manual, multizone airflow and contamiEnergy, 38:437446, 1987.
nant transport analysis software. Technical Report NISTIR 6921, National Institute of Stan- [14] B. M. Mahajan and D. D. Hill. Interzonal natural convection for various aperture configuradards and Technology, November 2002.
tions. In ASME Winter Annual Meeting, Anaheim, CA, 1986. American Society of Mechani[5] Hilding Elmqvist, Hubertus Tummescheit, and
cal Engineers.
Martin Otter.
Object-oriented modeling of
thermo-fluid systems. In Peter Fritzson, edi[15] Timothy P. McDowell, Steven Emmerich, Jeff W.
tor, Proceedings of the 3rd Modelica conference,
Thornton, and George N. Walton. Integration of
pages 269286, Linkoping, Sweden, November
airflow and energy simulation using CONTAM
2003. Modelica Association and Institutionen for
and TRNSYS. ASHRAE Transaction, 109(1):1
datavetenskap, Linkopings universitet.
14, 2003.
[6] Helmut E. Feustel.
COMIS - an interna- [16] Modelica Association. Modelica  A Unified
tional multizone air-flow and contaminant transObject-Oriented Language for Physical Systems
port model. Technical Report LBNL-42182,
Modeling, Language Specification, Version 2.2,
Lawrence Berkeley National Laboratory, BerkeFebruary 2005.
ley, CA, USA, August 1998.
[17] S. B. Riffat. A study of heat and mass transfer through a doorway in a conventional house.
[7] Helmut E. Feustel and Juergen Dieris. A survey
Technical Report AIVC 2454, Research in Buildof airflow models for multizone structures. Ening Group, Polytechnic Central London, January
ergy and Buildings, 18:79100, 1992.
1988.
[8] J. L. M. Hensen, J. van der Maas, and A. Roos.
Air and heat flow through large vertical openings. [18] Per Sahlin. On the effects of decoupling airflow
and heat balance in building simulation models.
In Proc. of the 3-rd IBPSA Conference, pages
ASHRAE Transaction, 109(2):788800, 2003.
479485, Adelaide, Australia, August 1993.
[19] Per Sahlin and Axel Bring. IDA solver  A
[9] Joe Huang, Frederick C. Winkelmann, Fredertool for building and energy systems simulation.
ick F. Buhl, Curtis O. Pedersen, Daniel E. Fisher,
In J. A. Clarke, J. W. Mitchell, and R. C. Van
Richard J. Liesen, Russell D. Taylor, Richard K.
de Perre, editors, Proc. of the IBPSA Conference,
Strand, Drury B. Crawley, and Linda K. Lawrie.
Nice, France, August 1991.
Linking the COMIS multi-zone airflow model
with the EnergyPlus building energy simulation [20] J. van der Mass, C. A. Roulet, and J. A. Hertig.
program. In Proc. of the 6-th IBPSA ConferSome aspects of gravity driven air flow through
ence, volume II, pages 10651070, Kyoto, Japan,
large apertures in buildings. ASHRAE TransacSeptember 1999.
tions, 95(2):573583, 1989.
The Modelica Association

439

Modelica 2006, September 4th  5th

M. Wetter

[21] George N. Walton. Airflow network models
for element based building airflow modeling.
ASHRAE Transactions, 95(2):611620, 1989.
[22] Andreas Weber, Markus Koschenz, Viktor Dorer,
Marion Hiller, and Stefan Holst. TRNFLOW, a
new tool for the modeling of heat, air and pollutant transport in buildings within TRNSYS. In
R. Lamberts, C. O. R. Negrao, and J. Hensen,
editors, Proc. of the 7-th IBPSA Conference,
volume III, pages 13631368, Rio de Janeiro,
Brazil, August 2001.
[23] Michael Wetter. Multizone building model for
thermal building simulation in modelica. In Submitted to: Modelica conference 2006, Vienna,
Austria, September 2006. Modelica Association.

The Modelica Association

440

Modelica 2006, September 4th  5th

Modelling of a Solar Thermal Reactor for Hydrogen Generation

Modelling of a Solar Thermal Reactor for Hydrogen Generation
Jrgen Dersch
Andreas Mathijssen Martin Roeb Christian Sattler
Deutsches Zentrum fr Luft- und Raumfahrt e.V. (DLR)
Institute of Technical Thermodynamics, Solar Research
51170 Kln, Germany
juergen.dersch@dlr.de andreas@mathijssen.de martin.roeb@dlr.de christian.sattler@dlr.de

Abstract
The transient thermal behavior of a solar thermal
reactor for hydrogen generation has been modeled
using Modelica/Dymola. The model is used to predict temperatures and reaction rates inside the reactor
which is operated alternating between two temperature levels. The purpose of this reactor is the production of hydrogen as a future carbon free fuel using
exclusively regenerative energy resources.
First results are promising and the model may be
used to explain experimental observations from the
operation as well as for theoretical studies.
Keywords: solar, hydrogen, chemical reaction, heat
conduction

1

Introduction

Hydrogen generated from renewable energy sources
has the potential to become an important energy carrier for the future, particularly for mobile applications. Beside the well known path of using electrical
energy from renewables for electrolysis, the solar
heat may be used directly for water splitting without
the additional step of electricity generation. Whereas
direct thermal water splitting needs temperatures
above 2500 K, several multi-step thermo-chemical
processes are known, enabling the hydrogen generation at temperatures which are controllable by todays technical equipment. One of these thermochemical processes is currently under investigation
in the HYDROSOL-2 project funded by the EC [1].
A two-step water splitting process has been developed using mixed iron-oxides on a porous ceramic
structure in a reactor heated directly by solar radiation. The reactor is operated with alternating reaction
conditions, in particular with two alternating temperature levels of about 1073 K and 1350 K respectively. Experimental results from a small scale lab
reactor are available which prove the general feasiThe Modelica Association

bility of the process and the cycleability of the redox materials. A scale-up of the technology aiming
at the demonstration in a 100kW-scale is in progress.
From this short description and the fact that solar
radiation varies with daytime and cloud coverage, it
is evident that the operation of this reactor is highly
dynamical. Therefore a mathematical tool is necessary in order to model the reactor for theoretical
studies and scale-up.

2

Description of the process and the
experimental setup

The experimental and theoretical work is focused on
a thermo-chemical cycle using materials that can act
as effective water splitters at moderate temperatures
in a two-step reaction scheme. The overall reaction
may be described by the following steps which are
conducted successively at different temperature levels:

MOreduced + H 2O  MOoxidized + H 2

(1)

MOoxidized  MOreduced + O2

(2)

The metal oxides (MO) used in this particular reaction are ion oxides doped with other divalent metals
(Zn, Ni, Mn). The basic idea is to employ an innovative monolithic solar reactor for the production of
hydrogen from the splitting of steam using solar energy, by combining a refractory ceramic thin-wall,
multi-channeled (honeycomb) support structure optimized to absorb solar radiation and develop sufficiently high temperatures, with a redox pair system
suitable for the performance of water dissociation
and at the same time suitable for regeneration at
these temperatures. With this concept complete operation of the whole process (water splitting and redox material regeneration) can be achieved by a single solar energy converter.
Figure 1 shows a cross section of the experimental
reactor used for the first experiments in the solar fur-

441

Modelica 2006, September 4th  5th

J. Dersch, A. Mathijssen, M. Roeb, C. Sattler

nace at DLR, Cologne. The outer diameter of the
housing is 0.43 m and the diameter of the porous
silicon carbide structure carrying the ion oxides is
0.144 m. The front side is covered by a quartz glass
window for the concentrated sunlight admission. The
concentrated sunlight is provided by a mirror system
capable for concentrations up to 5000 suns.
inlet of process gas
housing (stainless steel)
to mass spectrometer

honey comb
structure (SiC)
quartz window

product gas probe
SiSiC funnel

T6

to offgas
treatment

T1
concentrated
solar radiation

2. Steam admission and production of hydrogen
at 1073 K.
3. Increasing the solar thermal input in order to
reach the higher temperature level of 1350 K.
4. Regeneration period at this temperature level.
During this period the reactor is flushed with
nitrogen.
5. Reduction of the solar thermal input to come
down to the low temperature level of 1073 K
Steps 2-5 are repeated consecutively until the end of
the experiment. Experimental setup with two reactors of this type, each one in a different step, has also
been tested in order to get a continuous hydrogen
production.

tube (stainless steel)
SiSiC cylinder

ceramic blender
diluting gas
inlet

3

insulation

Figure 1: Cross section of the laboratory scale reactor for solar thermal hydrogen production
Typical input power for this experimental setup was
between 2000 and 3000W. The input gases (N2 and
H2O) are fed via four small tubes radially distributed
over the reactor circumference. The entrance for
these gases is on the right hand side of Figure 1 and
the flow direction is form right to left. Behind the
SiC structure, a ceramic blender is used, to achieve
an optimal mixing and then the gases are leaving the
reactor to the product gas analysis and off-gas treatment.

Figure 2: Photo of the laboratory scale reactor for
solar thermal hydrogen production
The typical operation of this reactor may be described by the following steps:
1. Preheating of the cold reactor with concentrated solar radiation up to 1073 K.

The Modelica Association

Model approach

An overall model has been set up for this reactor in
Dymola using partial models from the standard library Modelica 2.2 in combination with the Modelica_Fluid library and additional adapted or newly
developed models. The main purpose of this first
model approach is the simulation of the thermal behavior of the reactor. Reaction kinetics are considered by simple preliminary approaches since quantitative experimental data on reaction velocities are
not yet available.
Figure 3 shows a screenshot of the overall model.
The model is 2-dimensional due to the rotational
symmetry of the reactor. From this figure, it becomes
obvious, that most of the icons used here are from
the Modelica 2.2 library. This is also valid for most
of the associated models, but some of them have
been modified in order to meet the special requirements. The only model used without any modifications is the Modelica.Blocks.Sources.CombiTimeTable for input data of ambient temperature and solar
power input. These values are available from measurements in the solar furnace and they are used as
input data for the simulations.
The input model MassFlowSource is a descendant of
CombiTimeTable too, but with some additional code
to allow for input flows with different units (like kg/s
or l/h) and multiple output flows in SI units. PrescribedTemperature,
Convection,
FeedPump,
IdealMixer and Sink are made from standard Modelica models with the extensions of distributed connectors and multi-component mass flows. The reactor, the insulation and the solar heat input distribution are new models and further details are given
below.

442

Modelica 2006, September 4th  5th

Modelling of a Solar Thermal Reactor for Hydrogen Generation

are set up using the finite volume method as described in [2].
horizontal cut

vertical cut

mean approximation

40

aperture

30

2

flux density [W/cm ]

35

25
20
15
10
5

Figure 3: Screenshot of the overall model used for
the simulation of the laboratory scale reactor for solar hydrogen generation
The spatial distribution of solar radiation input is not
constant throughout the aperture, it shows a Gaussian-like shape with a peak in the centre and considerably lower values towards the rim. Measurements
of the flux distribution at the reactor entrance are
available as well as the integral value of the solar
power input during the experiments. The object
called GaussDistribution in Figure 3 is used to distribute the total input power among the individual
rings of the reactor front surface. The shape of the
power distribution is approximated by the equation:


  r  2 
a0
P (r ) = Ptotal  y0 +
exp  2  
  w  
w
0
.
5





-80

-60

-40

-20

0

20

40

60

80

100

radius [mm]

Figure 4: Measured and approximated flux density
at the reactor entrance.
Pressure gradients are neglected in this model. They
are low enough to neglect an influence on the chemical reactions but the authors are well aware that there
may occur instabilities influencing the local gas flow
and thereby the temperature distribution within the
ceramic monolith [3]. Therefore these local pressure
drops may be incorporated into a more advanced
future model.

(3)
slice of the monolith

Measured values of the input flux distribution at
nominal power are shown in Figure 4 in comparison
to this approximation. Although the measured distribution is not exactly symmetrical, this assumption
was made for the model in order to use a 2dimensional model and restrict the number of equations.
The object IrradiationLosses in Figure 3 is used to
model the thermal losses due to absorption and reradiation through the quartz glass window at the
front side of the reactor. The result is a net power
input to the reactor depending on the actual surface
temperature.
The ceramic monolith inside the reactor as well as
the insulation and the housing are modeled as concentric circular rings build up from several slices in
axial direction (Figure 5). Mass and energy balances

The Modelica Association

0
-100

ring of the slice
SiC monolith

Figure 5: Balance volumes used for the model of the
solid SiC monolith
The cylindrical ceramic monolith as the main component of the solar hydrogen reactor is modeled by
three major objects:
1. the solid-object representing the SiC matrix
with the task of absorbing the radiation at the
front surface and providing an even temperature
distribution by heat conduction,
2. the fluid-object representing the gas channels
with square cross sections to allow a gas flow
through the reactor,

443

Modelica 2006, September 4th  5th

J. Dersch, A. Mathijssen, M. Roeb, C. Sattler

3. and the coating-object for the reactive layer,
which is located at the inner surface of the SiC
matrix.
The latter object may be considered as intermediate
layer between the solid and the fluid object. Its mass
balance accounts for accumulation or release of oxygen depending on the operating conditions. The fluid
object does not consider any mass accumulation and
concentrations of the gaseous species are assumed to
be constant within each control volume. Transport
resistance between fluid and coating is neglected as
well. Since the coating itself has a very small mass
and heat capacity, the thermal inertia is represented
solely by the SiC matrix.
The solid object is based on the differential equation
for 2-dimensional heat transfer in cylinder coordinates:

According to [4] the overall reaction rate for the water splitting is:

vS = v2  v1 = k 2  0.95 pH0.245O  k1 p1H.12

(7)

with

 63.8 
k1 = 5.345e  12 exp 

 RT 

(8)

and

 25.5 
k 2 = 0.03634 exp 

 RT 

(9)

For the reverse regeneration reaction
v3

(3 +  )Fe3O4  3 Fe3+ O4 + 2  O2

(10)

The velocity is calculated from

c

T 1   T    T 
=
 r
 + 
 +
t r r  r  z  z 

v3 = k3

(4)

A central difference scheme was applied to approximate the spatial partial derivatives. The effective
thermal conductivity of the SiC honeycomb structure
is not the same for the radial and the longitudinal
direction since the solid walls show different thickness. The effective values are calculated according to
cross section fraction covered by the solid material.
For the radial direction the equation reads:

r =

Ar ,solid

Ar ,total

(5)

The fluid object contains an instance of Modelica.Media.IdealGases.Common.MixtureGasNasa representing a mixture of N2, H2O, H2 and O2. This
Modelica package provides all fluid properties
needed for the simulation.
At present, the knowledge about reaction kinetics is
only marginal and therefore the reaction rate is calculated by a preliminary equation based on investigations of Tsuji et al. [4]. The experimental investigation of reaction rates of Tsuji et al. have been carried out in the temperature range between 250 and
350C, which is much lower than the operating temperature range of the solar reactor.

(3 +  )Fe3O4 + 4  H 2

v1




v2

3Fe3+ O4 + 4  H 2O
(6)

The Modelica Association

mO2 ,stored

(11)

Vreact

 225 
k3 = 2.1e8 exp 

 RT 

(12)

Activation energy and frequency factor in Eq. (10)
are estimated from the experimental observations
that a considerable reaction rate does not take place
beyond 1200 K and the time period needed for a
complete regeneration is about 20 minutes. It should
be emphasized, that these reaction rates are only first
estimates and further investigations are necessary in
order to get more reliable data about these reactions.
The solar reactor is not suitable for this kind of experiments because the number of uncertain parameters is quite high. They should be carried out under
well defined and almost constant conditions, e.g. in a
differential reactor.
The temperature distribution inside the reactor, the
total product mass flow rate, and the efficiency of the
reactor are important results from this model.

4

Simulation results

The first experiments with the solar reactor were performed without any hydrogen production in order to
investigate the thermal behavior of the plant. Figure
6 shows simulation results in comparison to measured data from one of these first experiments. Inside
the ceramic monolith only one thermocouple is
mounted for temperature measurement. It is located
at the center near the front side where the feed gases

444

Modelica 2006, September 4th  5th

Modelling of a Solar Thermal Reactor for Hydrogen Generation

1700

3500

1500

3000

1300

2500

1100

2000

900

1500
T1 simulation

700

T1 experiment
power input

500
300
0

2000

4000

6000

8000

1000

1400
T_solid (l=0.10m, 8 elements)
T_solid (l=0.10m, 4 elements)
T_solid (l=0.05m, 4 elements)
T_gas (l=0.10m, 4 elements)
T_gas (l=0.05m, 4 elements)

temperature in K

1350

1300

1250

0

0.1

0.2

0.3

0.4

0.5

0.6

0.7

0.8

0.9

dimensionless length

500
0
10000

time in s

Figure 6: Comparison of measured and calculated
temperature in the center of the reactor for a start-up.
The model was also used to investigate the sensitivity with regard to the reactor length. Figure 7 shows
the results of this study. Here two different lengths of
the ceramic reactor element have been simulated: 5
cm (the actual length used in the laboratory reactor)
and 10 cm. Beside the length and the number of axial
balance volumes all input parameters are identical. In
Figure 7 the temperature along the center axis is
drawn for steady state conditions. The temperature
curve for the 10 cm monolith is not affected by the
number of discrete elements (4 or 8). The shorter
monolith shows a lower temperature towards the gas
exit (right hand side). This result was unexpected
because the heat input is at l=0 and with increasing
distance the temperature should decrease from a first
feeling. Heat transfer and temperature compensation
between solid and gas are the main reason for the
temperature decrease along the axis. The gas feed is
cold compared to the temperature of the SiC and the
temperature balancing needs about 4 cm independently of the reactor length.
The remaining temperature decrease of gas and solid
is due to losses caused by radial heat conduction.
Due to the extended heat transfer area between gas
and solid for the longer monolith, the radial losses
are smaller than for the shorter type. This behavior is
supported by the different effective solid heat conductivity in axial and in radial direction. Due to the
macroscopic structure the conductivity in axial direcThe Modelica Association

tion is 1.72 times of the conductivity in radial direction.

1200

solar power input in W

temperature in K

and the solar radiation are entering the monolith (see
Figure 1).
The matching of simulated and measured temperatures is fairly good, a conclusion which is also valid
for other experiments. The remaining differences are
due to model simplifications and also due to uncertainties in the available physical properties, e.g. the
thermal conductivity of SiC at elevated temperatures,
which is not exactly known since it depends on the
material and also on the processing of the monolith.

Figure 7: Study on the dependency of reactor length
and number of axial discrete volume elements
(steady state conditions)
Since the temperature difference at the exit for both
lengths is not very large (about 8 K) its impact on the
reaction rate may be neglected compared to other
model uncertainties. From Figure 7 it is also obvious,
that the gas and solid temperatures are equalized at
the exit of the monolith for both lengths. Nevertheless, a doubling of the monolith length means also a
doubling of the reactive surface, which could be an
advantage for the chemical reaction because the
available reactive coating is twice as for the short
monolith.
The solar reactor shown in Figure 1 has been redesigned and currently a dual reactor concept is used for
continuous hydrogen production. This type has two
reaction chambers; one can be operated in production mode while the other one is in regeneration
mode (Figure 8). After a certain time period the
power input and the gas feed are shifted and the operation mode is inverted. The shape and the dimensions of the SiC monolith are the same as for the
original reactor. Experimental data with hydrogen
production are available from this setup.

Figure 8: Drawing of the dual reactor for solar hydrogen production

445

Modelica 2006, September 4th  5th

1

J. Dersch, A. Mathijssen, M. Roeb, C. Sattler

temperature in K

1500

3000

1300

2500

1100

2000

900

1500

700

1000
power input
T6

500

500

T1
300
0

2000

4000

6000

8000

10000

0
12000

time in s

Figure 9: Solar power input and calculated temperatures of a reactor startup and 3 cycles of hydrogen
production and regeneration. (see Figure 1 for the
position of T1 and T6)
The first hour was used to heat up the whole installation by solar radiation and the steam admission starts
at t=3600s. At the same time the hydrogen production starts with a peak mass flow rate, which is decreasing during the next 1200s of the experiment
(Figure 10). At t=4800s the steam input is stopped,
the solar power input is increased immediately to
heat up the reactor and the regeneration period starts.
At t=6000s the hydrogen production starts again, but
The Modelica Association

with a lower initial rate than the first time. This periodic operation is repeated two more times. From
Figure 9 it is obvious, that the temperature difference
between T1 and T6 is about 100  170K, which concurrently represents the largest temperature difference inside the monolith.
An acceptable matching between experiment and
simulation was reached by adjusting the reaction rate
parameters k1 and k2, although the reaction rates are
highly temperature dependent and more reliable kinetic data is urgently desired.
0.002
calculated
H2 production rate in kg/s

The main difference between both reactors from the
model point of view is the rectangular shape of the
insulation and the outer shell. This would break the
rotational symmetry and account for a 3-dimensional
model. Nevertheless the 2-dimensional approach has
been used for the simulation in order to limit the calculation time. Since the rectangular geometry is only
used for the outer shell, this approximation seems to
be still acceptable. Furthermore the current knowledge about the chemical reaction allows only a qualitative comparison of simulation and experiment concerning the hydrogen production rate. Consequently
the main purpose of the model is not the prediction
of hydrogen production rate but the dynamical thermal analysis of the reactor since the spatial and temporal temperature distribution inside the ceramic
monolith is of great importance for the reactor performance.
For this qualitative comparison the input data was
simplified and smoothened because particularly the
solar power shows many fluctuations and the experimental dataset has a temporal resolution of 5 seconds. According to the Modelica concept, this would
lead to many events and thus to unacceptable simulation times. Figure 9 shows the simplified power input and two calculated temperatures. T1 is the temperature in the center of the monolith near the front
side and T6 at the outer rim of the monolith near the
back side.

0.0016

measured

0.0012

0.0008

0.0004

0
0

2000

4000

6000

8000

10000

12000

time in s

Figure 10: Comparison of calculated and measured
hydrogen production rates
The temperature difference between T1 and T6 in
Figure 9 may be used to explain the decreasing initial hydrogen production rate, which is presumably
caused by large temperature gradients inside the ceramic structure. These temperature gradients are preventing a complete regeneration of the reactive layer
since a certain temperature level is necessary for this
step.
Figure 11 shows the absolute mass of available ferrite, which is the figure determining the potential of
hydrogen production since the oxygen is captured by
these ferrite molecules. Three curves are shown, the
total amount of ferrite, the amount in the center and
at the outer rim of the monolith.
The amount of available ferrite for the new monolith
starts at a high initial level, decreases during the first
hydrogen production period (3600  4800s) and increases again during the regeneration period (4800 
6000s). The regeneration is incomplete and the next
cycle starts at a lower initial peak ferrite concentration compared to the first cycle. The simulation results are demonstrating that the regeneration reaches
an almost constant peak level at the second regeneration cycle (8400s) because the same value (0.06 mol)
is achieved for the following cycle. From Figure 11
it is also obvious, that the incomplete regeneration is
caused mainly by the outer areas of the monolith,
which are not hot enough for regeneration. This
lower temperature is caused by the lower solar power

446

Modelica 2006, September 4th  5th

Modelling of a Solar Thermal Reactor for Hydrogen Generation

input towards the rim and the radial heat losses at
this area.

The authors would like to thank the European Commission for partial funding of this work within the
Project HYDROSOL-2 Solar Hydrogen via Water
Splitting in Advanced Monolithic Reactors for Future Solar Power Plants (SES6-CT-2005-020030),
under the Sixth Framework Programme of the European Community (2002-2006).

0.1
center
rim

available ferrite in mol

0.08

Acknowledgement

total

0.06

0.04

0.02

Symbols

0
0

2000

4000

6000

8000

10000

12000

time in s

Figure 11: Calculated values of available ferrite for
the center part, the outer part and the whole monolith
during the periodic operation

5

Conclusions

The Modelica language has been used to set up a
model for a solar heated hydrogen generation reactor
and to simulate the dynamic behavior of the reactor.
First results are promising and the model may be
used to explain the decreasing reaction rates, which
have been observed during the experiments. The
main purpose of the model is the prediction of the
thermal dynamics of this reactor rather than the prediction of the hydrogen production rate. Nevertheless
heat production and heat consumption are combined
with the reactions and therefore the proper calculation of the reaction rates is important for the heat
balances.
Model developments as well as experimental investigations are continued, in order to get a deeper insight into this interesting path of solar energy utilization. Next steps are model refinements as well as the
set up of a structured library and simulations of an
up-scaled plant.
This project was the first experience of the authors
using Modelica/Dymola though they have been using
other modeling languages (Smile [5]) in the past.
The initial orientation period in Dymola/Modelica
was rather short and successful working was possible
after an acceptable time. Due to the complex matter,
general knowledge about dynamical models and the
continuous working with the software is an advantage for the person performing the work.

The Modelica Association

A

area

a0

coefficient of the solar power
input distribution

c

specific heat capacity

k1

reaction rate constant for water
recombination
mol/(dm s Pa1.1)

k2

reaction rate constant for
water splitting
mol/(dm s Pa0.45)

k3

reaction rate constant for
regeneration

P

power input

W

p

partial pressure

Pa

R

gas constant

r

radius, coordinate in radial direction

m

T

temperature

K

t

time

v

reaction velocity

w

standard deviation of the power
distribution

-

y0

coefficient of the solar power
input distribution

-

z

coordinate in axial direction

m



amount of excess cations



internal heat source



thermal conductivity



density

447

m
J/(kg K)

mol/(kg s)

kJ/(mol K)

s
mol/(dms)

W/m
W/(m K)
kg/m

Modelica 2006, September 4th  5th

J. Dersch, A. Mathijssen, M. Roeb, C. Sattler

References
[1]

[2]

[3]

[4]

[5]

Roeb, M., Monnerie, N., Schmitz, M., Sattler, C., Konstandopoulos, A., Agrafiotis, C.,
Zaspalis, V.T., Nalbandian, L., Steele, A.,
Stobbe, P.: Thermo-chemical production of
Hydrogen from Water by Metal Oxides
Fixed on Ceramic Substrates, Proceedings of
the 16th World Hydrogen Energy Conference, Lyon, France, June 13-16, 2006.
Elmqvist H., Tummescheit H., Otter M.: Object-Oriented Modeling of Thermo-Fluid
Systems, Modelica 2003, Sweden, November
3-4, 2003.
Buck R., Massenstrom-Instabilitten bei volumetrischen Receiver-Reaktoren, VDIVerlag, Dsseldorf, 2000.
Tsuji M., Togawa T., Wada Y., Sano T.,
Tamaura, Y., Kinetic Study of the Formation
of Cation-excess Magnetite, J. Chem. Soc.
Faraday Trans. 1995 , 91(10), 1533-1538.
Jochum P. , Kloas M. The Dynamic Simulation Environment Smile. In Tsatsaronis Ed.,
Second Biennal European Conference on
System Design & Analysis (1994), pp. 5356. ASME

The Modelica Association

448

Modelica 2006, September 4th  5th

Object Oriented Modelling of DISS Solar Thermal Power Plant

Object Oriented Modelling of
DISS Solar Thermal Power Plant
L.J. Yebra,

M. Berenguel

E. Zarza

S. Dormido

 PSA-CIEMAT.

Ctra. de Senes s/n. Tabernas.
E04200 Almera. Spain. E-mail:{luis.yebra, eduardo.zarza}@psa.es
 Universidad

de Almera. Dpto. de Lenguajes y Computacion. Ctra. de Sacramento s/n.
La Canada. E04120 Almera. Spain. E-mail: beren@ual.es

 U.N.E.D.

Escuela Tecnica Superior de Ingeniera Informatica. Dpto. Informatica y Automatica.
C/ Juan del Rosal, 16. E28040 Madrid. Spain. E-mail: sdormido@dia.uned.es

Abstract

lar energy plants to be used in the design of automatic
control systems aimed at optimizing overall perforThe design of advanced control systems to optimize mance.
the overall performance of Parabolic Trough Collectors solar plants with Direct Steam Generation is currently a priority research line at PSA-CIEMAT. The
development of dynamic models for use in simulation
and control of this type of solar power plant is presented in this article, focused on the DISS experimental solar plant. The developed model is based in the
thermohydraulic modelling framework ThermoFluid,
within the Modelica modelling language. The DISS
facility is presented and main modelled components
are presented as well as the respective modelling assumptions. A complete model of the facility is presented, developed with the exposed modelling as- Figure 1: DISS facility at Plataforma Solar de
sumptions and component models interconnected. A Almera, in Almera (Spain).
simulation of this complete model is performed with
the boundary conditions defined by a real experiment, The system used as test-bed plant is the DISS faciland the predicted model output variables are compared ity, see figure 1. Actually, it is a row arrangement
with their respective experimental measurements.
formed by eleven PTCs with a combined length of 500
Keywords: object oriented modeling; solar energy; m, working as a 1 MWt solar power plant belonging
simulation; evaporator; thermofluid; water-steam; to CIEMAT (Centro de Investigaciones Energeticas,
Medioambientales y Tecnologicas - Research Centwo-phase
tre for Energy, Environment and Technology), Research Centre owned by the Spanish Ministry of Science and Education. This solar plant is located at
1 Introduction
the Plataforma Solar de Almera (PSA), SoutheastThis paper presents the current status of the research ern Spain. A joint project between CIEMAT-PSA, the
performed within the framework of modelling and University of Almera (UAL), the National University
simulation of Parabolic Trough Collectors (PTC) in of Distance Education (UNED) and the University of
the scope of Solar Power Plants. The work is mainly Seville (US) is being carried out in order to develop
oriented to the development of dynamic models of so- models and control systems to automatically control
The Modelica Association

449

Modelica 2006, September 4th  5th

L.J. Yebra, M. Berenguel, E. Zarza, S. Dormido

 Injectors. Are actuators to control temperature by
injection of subcooled water from the injection
line.

these type of plant. The model presented in this paper will be used in the design of hybrid model predictive control and intelligent control schemes to optimize
plant performance, even under start-up and shutdown
situations and in spite of highly variable load disturbances due to the daily cycle of solar radiation and
passing clouds.

2

 Valves. Let the system be configured in any of
the three main operational modes and for control
purposes.
 Power Block. It is a component representing
any possible load process consuming the regulated outlet of thermal power from the plant. In
this case, for water conservation during the experiments, the current implementation returns the
thermodynamical state of the outlet superheated
steam to subcooled liquid to be pumped by feedwater pump.

The Parabolic Trough Collectors
Facility DISS

In this section, an overview of the basic components
and operating procedures for the DISS plant is presented. A schematic diagram is shown in figure 2, in
which the most important components are depicted.

Figure 3 shows the three main operational modes, with
their pros and cons:
L

M

L

M

Q
P

R
S

X
V

V
Z

N

6

O

N

N

T

U

W

Y

[

\

U

8

7

7

9

:

;

9

<

J

K

@

=

J

>

J
?

@

7

G

@

>

H






















	

































A













:





















>




















!




B

"








!





#













$





C

6

8

7

7

9

:

;

9
<

J

K

@

=

J

>

J
?

@

7

G

@

>

H

"

%



&



#




$







D

7

'

(



*

)



















+

+

A














#








:


E

F

D






!








?

7

G

@

>

H


>

%

Figure 2: Schematic diagram of DISS facility at PSA



#



















,




/


-

.






B

"

0



















C

6

8
<

J

K

J

J
?

"

7

7

9

:

;

9
@

=

>

@

7

G

@

>

H

1



2



.






!
3











!










D

7

4







*

)



There are three main different operational configurations of DISS facility. In all of them, the operation
is based on the concentration of incoming direct solar
radiation onto the absorber tube located in the geometrical focal line of a cylindric-parabolic mirror. As the
sun position changes during the day, each PTC of the
facility has to change its orientation as the solar radiation vector does. The absorber tube in each PTC
acts as an energy exchanger, receiving solar energy
and transferring it to a thermo-hydraulic circuit with
a heat transfer fluid (HTF) as the medium. Traditionally in PTCs the HTF used has been thermal oil, which
presents major drawbacks with respect to the watersteam medium used in the DISS facility, as explained
in [16]. In addition of the PTCs, the facility is composed by the following components:







5


















%







&









#














:














#








>








!








B

"

0



















C

I

C

7

G

J

>

G

:

?

=

C

@

D

9

:

;

9

"

<

1



1



2








?

.
7

9

=

>

=

@



!



>

3






!








D

"

7

2

.

























Figure 3: DISS plant operational modes
 Once-Through. Lowest investment costs and engineering complexity, although great controllability problems and instabilities during operation.
The systems works as a distributed once-through
boiler fed with subcooled water and superheated
steam at outlet, at nominal operating conditions.

 Water-steam separator. Only used in recirculation operational mode.

 Injection. Highest investment costs, although better controllability and less instabilities. The system works as a once-through evaporator in which,
at certain points in space, an injectors arrangement help to control spatial temperature distribution along the whole row.

 Pumps: feedwater and recirculation. The former
pumps subcooled water into the row and the latter drains saturated liquid water from water-steam
generator.

 Recirculation. Second highest investment costs,
with a good controllability. In this mode, the
water-steam separator placed in the row decouples two effective once-through evaporators: the

The Modelica Association

450

+

A

Modelica 2006, September 4th  5th



+

Object Oriented Modelling of DISS Solar Thermal Power Plant

first one is a flooded evaporator and the second is
a dry-expansion one.
In all cases, the flow temperature at the outlet superheated steam must be controlled. Control of the facility has been one of the main efforts that CIEMAT
has developed, see ([12]), although the lack of robust
dynamic models for control is a major obstacle in the
control system development.
CIEMAT is currently interested in these two configurations:
1. Recirculation. It offers the trade-off between investment costs and plant controllability. This
configuration will be preferred for experimental
applications.
2. Once-through. Spurred by the lowest investment
costs, theoretical work must solve controllability
and instabilities through the development of integral control systems for this configuration.
The modelling work presented in this paper will focus on once-through configuration for two reasons.
First, the process is not observable by means of the
actual sensors in the facility; it is not possible to measure/estimate specific enthalpy or mass fractions in
transient experiments in the two-phase sections, which
in some operational points achieve 50% of the whole
length. Second, it is supposed the greatest disagreement between the model and experimental data should
appear in this configuration. So any other configuration modelled with components validated in oncethough, should show a closer agreement with experimental measurements.
In once-though operation mode the DISS acts as a
once-through evaporator of 500 m length with subcooled water at the inlet and superheated steam at
the outlet, in nominal operating conditions. A cascade local control loop for the feedwater pump and
an outlet controlled valve define boundary conditions
for the system. The final objective of the model is to
predict the transient behavior of the thermodynamic
variables associated with the thermo-hydraulic output
power of the evaporator (temperature, pressure, specific enthalpy, etc.), when the external disturbances
(mainly concentrated solar radiation, ambient temperature, inlet subcooled water temperature and inlet subcooled injector water temperature) and controllable inputs (inlet subcooled mass flow rate, inlet final injector
mass flow rate and outlet superheated steam pressure)
change.
The Modelica Association

3 Object Oriented Modelling of DISS
In this paper we will concentrate in the modelling
of the thermo-hydraulic part of the system, skipping
the rest the remaining subsystems (pneumatic, mechatronic, etc.) needed to maintain the proper instantaneous orientation of the PTC group, and assuming a
known input radiation power in the absorber pipe, as a
consequence of the radiation reflected in the cylindricparabolic mirrors. For a detailed explanation of this
subsystems read [16] and [15].
Due to the fact that the main phenomena of interest
is the thermofluid dynamics, the object oriented Modelica language ([1]) has been used to develop these
models with the Dymola tool ([5]). Within this modelling language the ThermoFluid library ([11],[6]) is a
framework over which develop own libraries and final
component models ready to be instantiated as components for simulations. The authors believe this library is an important reference in the framework of
object oriented modelling of thermofluid systems with
Modelica and its existence makes it unnecessary, in
most cases, to develop thermo-hydraulic models from
scratch. Instead, the models can be designed by inheritance and aggregation from base classes in the ThermoFluid framework.
The work analyzes each of the components of the
thermo-hydraulic water-steam circuit and explains the
modelling assumptions, trying to justify each one as
they are oriented to get - by means of the symbolic
manipulations that Dymola tool performs - a not high
index DAE system for the complete model, in which
the number of nonlinear algebraic loops is minimized.
For this purpose, all the components are classified, following the modelling methodology derived from the
Finite Volume Method (FVM) [9], in Control Volumes
(CV in ThermoFluid nomenclature) and Flow Models
(FM in ThermoFluid nomenclature).
In some cases information about the future control system architecture to be implemented is introduced in
the modelling phase. This methodology, from a strict
point view, breaks the sequencing work of first model
and then design the control system based in this model.
But it helps to simplify the design of the models and
enhances the numerical behavior of the whole modelled system in the simulation execution phase, without a significant loss of accuracy.
Due to the existence of components whose internal implementation may vary depending on the modelling
hypotheses, the polymorphism and the Modelica language constructs for classes and components parameterization has been extensively used and specifically

451

Modelica 2006, September 4th  5th

L.J. Yebra, M. Berenguel, E. Zarza, S. Dormido

where mre f is the setpoint of the local pump/injector
applied in PTCs models.
Figure 4 shows the developed Modelica model of the control loop and it is assigned in a connector to the
model, as can be seen in figure 4. From an energy
DISS facility working in once-through.
point of view are supposed to behave as isenthalpic
model, i.e., hinlet = houtlet .
3.1 ThermoFluid usage
The dynamic behavior expected to be predicted by the
models is mainly the thermal one, so the steady state
formulation for the momentum balance is selected for
the utilized ThermoFluid base classes. The selected
time scales for the thermal dynamics are for control
design and simulation purposes.
The thermo-hydraulic interface for all the models is
formed by connectors from the Interface package, for
single component media and steady-state momentum
balance statement.
The modelling methodology adopted from the beginning for the design of the classes was: if there exists
any class in ThermoFluid that implements the physical
phenomenon to model, use it with the corresponding
parameterization. If not, design the classes using inheritance from the high level partial classes from ThermoFluid; in other cases then use proper ThermoFluid
interfaces and base classes and develop the class with
the lacking behavior expressed in differential and algebraic equations from first principles.

3.2

3.2.2

Parabolic Trough Colectors

The PTC is the most important component in the facility. Its aim is to carry most of the part of the solar
direct incident irradiance in the mirror to the absorber
tube. To achieve this aim, the manufacturing process
uses advanced material sciences and technologies to
minimize the power loss in direction to absorber tube.
In [7] and [16], an analysis of the energy flows into
the absorber from the sun is developed. The figure 5
shows a front view of a DISS PTC.

Designed Classes

In the next subsections the most important components Figure 5: Front view of one collector from DISS facilmodels will be detailed and the modelling hypotheses ity.
will be explained and justified.
The figure 6 shows the schematic diagram of the PTCs
Modelica model. The main components of a PTC are
3.2.1 Pumps and Injectors
shown:

The Modelica Association

452

radsolardir

In this kind of active FM [11], the authors decided to make a simplifying assumption based on
the gained experience in control of Parabolic Trough
Fields with thermal oil as medium, case of Acurex
field of CIEMAT-PSA [3], [4], and water-steam as
medium in DISS facility [16], [12]. This assumption consists that the water pumps are controlled in a
cascade scheme [2] with a local control loop whose
dynamics is much faster than the rest of the thermohydraulic system. This assumption has been experimentally validated in blowers and water pumps, and
helps simplify these components models until the possibility of modelling them as steady-state quasi-ideal
mass flow rate generators. This approximation avoids
the time-consuming work of fitting the nonlinear multivariate curves of the pumps and injectors. So, the
algebraic equation for these components is m = mre f ,

HeatTransfer

Mirror

tube

base
class
pipe
geo

init

char

Figure 6: PTC Modelica model.
 Cylindric-Parabolic mirror surface. It reflects the
Modelica 2006, September 4th  5th

Object Oriented Modelling of DISS Solar Thermal Power Plant
pin
Cont...
T...

Tamb

Contr...
T[n]

pout

Tout
K(...)

Rad

K(...)

K(...)

mdotout

K(...)

Tmout
is_liquid
Wate...
p0...
cl...
b...
T
p

Contr...

CCP_diss

CCP_diss

CCP_diss

CCP_diss

K(...

InletTe...
CCP_diss

CCP_diss

CCP_diss

InletPre...
CCP_diss
CCP_diss

CCP_diss

Contr...

mdot_ws

Wate...
p0...
cl...
b...
p
T

CCP_diss

Outlet...

OutPutTe...

InletTemp_inj

InletPressure...

mdot_inj_...

Wate...
p0...
cl...
b...
T

p

k=300

Figure 4: Modelica model of DISS plant in once-trough configuration.
incoming direct solar radiation to the focal line of could be in any of the three states: liquid water, twothe mirror.
phase mix of saturated liquid and vapor, or superheated steam. This depends on the position of the PTC
 Absorber metal pipe. It absorbs the major part of in the row, in addition to the incident solar radiation in
the energy reflected by the mirror.
the row.
 Energy loss to the environment by conduction- Thus the dynamic behavior of each PTC will vary
along the DISS row depending on the thermodynamic
convection and radiation.
and transport state of the water/steam in each PTC.
 Medium model, that is, the HTF. In the case of With the configuration shown in figure 6, the PTC is
this work, water-steam is the selected medium.
fully discretized in n CVs in the major length direction, in which mass, energy, and momentum balances
 Distributed CV, with a discretization level of n in
are stated. Momentum conservation is stated in stagwhich mass, energy and momentum is conserved.
gered CVs with respect to those ones in which mass
For modelling effects, this component could be con- and energy balance is stated; see [9], [13] and [11].
sidered as a heat exchanger composed of one pipe with The number of CVs, n, is a trade off between accuracy
water and/or steam as media fluid, and a circular wall and computing cost, so the final choice is the minallowing thermal interaction with the fluid. This hex imum n that models dominant dynamics for control
is fed by solar energy through the external perimeter purposes. Currently we are working with values in the
of the circular wall and, at the same time, some en- interval [2, 5] per PTC. The wall is discretized with the
ergy flow is leaving through this external perimeter by same discretization level.
conduction-convection and radiation processes.
To solve the PDE system stated from balThe length of the water/steam pipe is 50 m. and un- ance equations,
ThermoFluid provides parder normal operating conditions the inlet/outlet flow tial classes [11] in which the discretization
The Modelica Association

453

Modelica 2006, September 4th  5th

L.J. Yebra, M. Berenguel, E. Zarza, S. Dormido

with the Finite Volume Method (FVM) ([9])
is applied.
One of these classes is ThermoFluid.PartialComponents...Volume2PortDS pT,
which implements this mass, energy and static
momentum conservation equations in a staggered
grid formed by n subvolumes. For the solid media, there exists final use classes that implement
energy conservation in distributed solids, ThermoFluid.Components.HeatFlow.Walls.

With the help of replaceable/redeclare constructs and
the choices annotations ([1], [5]), switching between
fully discretized and mixed MBM-discretized models
at instantiation time simplifies the modelling work.
The Modelica Association

Contr...
Q...

Contr...
Q...

Dyn...

Dyn...

Dyn...

W...
WaterR...
p0, ...
cl...
ba...

p

Sub...
Two...
Subcooled Two...
Momentum Ba...
WaterSteam Me...

Contr...

Squar...

base
cla...

base
cla...

base
cla...

PipeDS1

PipeDS2

PipeDS3

WaterRe...
p0, ...
cla...
base

p

T

Contr...

T

Ra...

Ra...

T
ContrT...

Ra...

Ra...

Ra...

T

Although the mixed model lowers the likelihood of
finding chattering in the integration process, it is theoretically less accurate; and experimentally it is harder
to find consistent DAE initial conditions and the validity range of the model is more limited than that of the
fully discretized one.

Tw...

Contr...
Q...

p

In the development of experimental correlations
classes for the heat transfer coefficients sliding modes
have appeared with some frequency around the phase
boundaries of water/steam CVs. Those phenomena
are manifested with more frequency when CVs pass
from subcooled (region 1 in IAPWS-IF97 standard for
water/steam properties, [14]) to saturated (region 4 in
IAPWS-IF97), due to two reasons: first, is the existence of discontinuities in the heat transfer coefficients
in the limit boundary between water and walls; second,
is the opposite gradients in the state velocity vectors
present around the phase change boundaries. To avoid
those cases in which chattering causes troubles in the
simulation, another polymorphic evaporator model has
been developed, in which the subcooled and saturated
regions of water/steam pipe are replaced by an equivalent Moving Boundary Model (MBM) [8]. Figure 7
shows this mixed discretized and MBM model for the
complete DISS plant, where the MBM component has
been designed with ThermoFluid interfaces to be connected with the rest of components.

Sub...

Co...
Q

base
cla...
p0, ...
WaterRe...

To close the system of equations, it is mandatory to introduce the heat transfer coefficient between the watersteam flow and the solid media. This coefficient depends of heat transfer correlations using adimensional
fluid numbers (Reynold, Prandtl, Pecklet,...), geometry of the contact surface and thermodynamic and
transport properties of the fluid (i.e. water-steam ).
Some of the correlation parameters strongly depend on
the experimentation and parameter adjusting phase of
the modelling work. See [10].

Co...
Q

T[n]
ContrT...

Figure 7: Mixed Moving Boundary and Discretized
model of the DISS facility.
3.2.3

Thermo-Hydraulic boundary conditions

When the FVM is applied in thermo-hydraulic modelling, components to define boundary conditions
(b.c.) to the original PDE formulated are necessary
to close the system of equations. This boundary conditions are implemented in ThermoFluid library by
means of reservoirs components, in package ThermoFluid.PartialComponents.Reservoirs.
The boundary conditions are defined by reservoirs
components that represent pressure, specific enthalpy
and temperature b.c. In cases of one-phase fluid (pressure,temperature) pair is selected, and in two-phase
fluid the (pressure, specific enthalpy) pair is selected.

4 Simulation and Experimental Validation
In this section the results of a simulation are shown and
compared with the corresponding experimental values
for some of the variables measured in the actual plant.
The experiment was conducted on 1 of April of 2001,
starting 9:00 AM and lasting 6 hours and 40 minutes
(24000 s.). At which point the DISS plant was forced
to the next boundary conditions shown in the top two
graphs, shown in figure 8.
In the top graph, the boundary conditions for inlet
mass flow rates for the row (mdot in) and for the
injector for the PTC number 11 (mdot inj C11) are
represented. In the next graph, the boundary condition direct solar irradiance (Solar Radiation) is shown.
From the third to fifth graphs, the measured (MeasuredToutCXX) and simulated (SimulatedToutCXX)
outlet temperatures from PTCs nine, ten and eleven are
shown. The measured variables are depicted in dashed
lines as the simulated in continuous lines.

454

Modelica 2006, September 4th  5th

Object Oriented Modelling of DISS Solar Thermal Power Plant

mdot_in [Kg/s]

mdot_inj_C11 [Kg/s]

2
1
0
0.0E0

5.0E3

1.0E4

1.5E4

2.0E4

1.0E4

1.5E4

2.0E4

1.5E4

2.0E4

1.5E4

2.0E4

1.5E4

2.0E4

Solar_Radiation [W/m^2]
1000
500
0
0.0E0

5.0E3
SimulatedToutC9 [K]

MeasuredToutC9 [K]

600
400
200
0.0E0

5.0E3
SimulatedToutC10 [K]

1.0E4
MeasuredToutC10 [K]

600
400
200
0.0E0

5.0E3
SimulatedToutC11 [K]

1.0E4
MeasuredToutC11 [K]

600
400
0.0E0

5.0E3

1.0E4

Figure 8: Simulation results for the experiment realized the day 01 of April of 2001. The model is forced to the
boundary conditions measured from the experiments.
It can be observed that there is a visible difference like Model Calibration package, which beta release
in the PTC 9 outlet between the experimental and has helped in the calibration work presented in this arsimulated data when superheating appears. This dis- ticle.
agreement is augmented due to the fact that a minimum energy difference for the fluid in the twophasesuperheating boundary is reflected in a major temper- 5 Concluding remarks and Ongoing
work
ature differences.
In the case of outlet temperature in PTC 10 and 11,
a better agreement between experimental and simulated values can be observed. Although in the time
intervals in which superheating appears at the outlet of
both PTCs a major difference between simulation and
experiment can be observed, the dynamic response is
similar in both cases. Then, for control purposes the
models can be regarded as valid, although a better calibration would be wellcome. For simulation purposes,
the calibration work must be refined in the future with
the help of the new features introduced in Dymola 6.0,
The Modelica Association

This article shows the development of a dynamic
model for the CIEMATs DISS facility using object
oriented modelling methodology. The major part of
the components are based in the ThermoFluid framework for thermo-hydraulic modelling. The DISS components and main operation principles have been described. For the main components, the modelling hypotheses and the composition Modelica diagrams developed with the Dymola tool have been presented.
References to the underlying physical phenomena
have been made in these composition diagrams, with-

455

Modelica 2006, September 4th  5th

L.J. Yebra, M. Berenguel, E. Zarza, S. Dormido

out entering into detail of quantitatively describing
them through differential and algebraic equations; instead, the basic bibliography and the ThermoFluid
classes that implements them have been referenced.
Finally, a simulation of the system is executed with the
boundary conditions of a experiment. Some temperature results of the model simulation are represented
with the corresponding experimental measured values.
The graphs show that the differences between the experiments results and predicted values from the model
are relatively small.
The ongoing work to develop consists in refining the
main models parameter calibration based on the experimental results of the actual plant. In this work,
the validation of empirical correlations for heat transfer and pressure loss will be an important issue.
The final aim is to develop control and automatic operation systems that would help this type of plants operate in the most autonomous way and in spite of large
disturbances. Automatic start-up and shutdowns of the
plants is one of the main objectives in this direction.
Acknowledgements
This work has been financed by CICYT-FEDER funds
(projects DPI2002-04375-C03, DPI2004-07444-C04-04
and DPI2004-01804) and by the Consejera de Innovacion,
Ciencia y Empresa de la Junta de Andaluca. This work
has been also performed within the scope of the specific collaboration agreement between the Plataforma Solar de Almera and the Automatic Control, Electronics and
Robotics (TEP197) research group of the Universidad de
Almera titled Development of Control Systems and Tools
for Thermosolar Plants.
Authors would like to acknowledge Dynasim SE for providing the beta release of Model Calibration package to
CIEMAT for testing and calibration purposes. In special,
to Dr. Sven Erik Mattsson and Dr. Hilding Elmqvist for the
support provided in the calibration process.

[4] E.F. Camacho, M. Berenguel, and F.R. Rubio. Advanced Control of Solar Plants. Springer, 1997.
[5] A.B. Dynasim. Dymola 5.3 User Manual. Dynasim,
A.B., http://www.dynasim.se, 2004.
[6] J. Eborn. On Model Libraries for Thermo-hydraulic
Applications. PhD thesis, Department of Automatic Control, Lund Institute of Technology, Sweden,
March 2001.
[7] L. Gonzalez, E. Zarza, and L. J. Yebra. Determinacion
del modificador por Angulo de incidencia de un colector solar ls-3, incluyendo las perdidas geometricas por
final de colector. Technical Report DISS-SC-SF-29,
CIEMAT-PSA. Almera. Espana, Agosto 2001.
[8] J.M. Jensen and H. Tummescheit. Moving boundary
models for dynamic simulations of two-phase flows.
In Martin Otter, editor, Proc. of the 2nd Int. Modelica Conference, pages 235244, Oberpfaffhenhofen.
Germary, March 2002.
[9] S.V. Patankar. Numerical Heat Transfer and Fluid
Flow. Series in Computational and Physical Processes in Mechanics and Thermal Sciences. Taylor
& Francis, 1980.
[10] W.M. Rohsenow, J.P. Hartnett, and Y.I. Cho. Handbook of Heat Transfer. McGraw-Hill, 1998.
[11] H. Tummescheit. Design and Implementation of
Object-Oriented Model Libraries using Modelica.
PhD thesis, Department of Automatic Control, Lund
Institute of Technology, Sweden, August 2002.
[12] L. Valenzuela, E. Zarza, M. Berenguel, and E.F. Camacho. Direct steam generation in solar boilers. IEEE
Control Systems Magazine, 24:1529, April 2004.
[13] H.K. Versteeg and W. Malalasekera. An Introduction
to Computational Fluid Dynamics. Addison Wesley
Longman Limited, 1995.
[14] W. Wagner and A. Kruse. Properties of water and
steam. Springer-Verlag, Berlin, 1998.
[15] E. Zarza. Aplicaciones industriales de los colectores
cilindro-parabolicos. Technical Report R09/01EZ,
CIEMAT-PSA, Crta. Senes s/n. 04200 Tabernas.
Almera. Espana, 2001.

References

[1] Modelica Association. Modelica, a unified object ori- [16] E. Zarza. La Generacion Directa de Vapor con Colectores Cilindro-Parabolicos. El Proyecto DISS. PhD
ented language for physical systems modeling. lanthesis,
ESII Sevilla, Espana, Noviembre 2003.
guage specification 2.2. Technical report, Modelica Association, http://www.modelica.org,
2005.
[2] K.J. Astrom and B. Wittenmark.
ComputerControlled Systems. Prentice Hall, 1997.
[3] M. Berenguel. Contribuciones al control de colectores solares distribuidos. PhD thesis, Escuela Superior de Ingenieros Industriales de Sevilla, Espana,
Marzo 1996.

The Modelica Association

456

Modelica 2006, September 4th  5th

Session 5a

Session 5a
Language, Tools and Algorithms 4

The Modelica Association

457

Modelica 2006, September 4th  5th

Session 5a

The Modelica Association

458

Modelica 2006, September 4th  5th

OpenModelica Development Environment with Eclipse Integration for Browsing, Modeling, and Debugging

OpenModelica Development Environment with Eclipse Integration
for Browsing, Modeling, and Debugging
Adrian Pop, Peter Fritzson, Andreas Remar, Elmir Jagudin, David Akhvlediani
PELAB  Programming Environment Lab, Dept. Computer Science
Linkping University, S-581 83 Linkping, Sweden
{adrpo, petfr}@ida.liu.se

Abstract
The OpenModelica (MDT) Eclipse Plugin integrates
the OpenModelica compiler and debugger with the
Eclipse Integrated Development Environment Framework.. MDT, together with the OpenModelica compiler
and debugger, provides an environment for Modelica
development projects. This includes browsing, code
completion through menus or popups, automatic indentation even of syntactically incorrect models, and
model debugging. Simulation and plotting is also possible from a special command window. To our knowledge, this is the first Eclipse plugin for an equationbased language.

1

mental if it gives quick feedback, e.g. without recomputing everything from scratch, and maintains a dialogue with the user, including preserving the state of
previous interactions with the user. Interactive environments are typically both more productive and more
fun to use.
There are many things that one wants a programming environment to do for the programmer, particularly if it is interactive. What functionality should be
included? Comprehensive software development environments are expected to provide support for the major
development phases, such as:





Introduction

The goal of our work with the Eclipse framework integration in the OpenModelica modeling and development environment is to achieve a more comprehensive
and more powerful environment. It can be useful to
first take a general look at this area including some
background.

1.1 Integrated Interactive Programming Environments
An integrated interactive modeling and simulation environment is a special case of programming environments with applications in modeling and simulation.
Thus, it should fulfill the requirements both from general integrated environments and from the application
area of modeling and simulation mentioned in the previous section.
The main idea of an integrated programming environment in general is that a number of programming
support functions should be available within the same
tool in a well-integrated way. This means that the functions should operate on the same data and program representations, exchange information when necessary,
resulting in an environment that is both powerful and
easy to use. An environment is interactive and increThe Modelica Association

Requirements analysis.
Design.
Implementation.
Maintenance.

A programming environment can be somewhat more
restrictive and need not necessarily support early
phases such as requirements analysis, but it is an advantage if such facilities are also included. The main
point is to provide as much computer support as possible for different aspects of software development, to
free the developer from mundane tasks, so that more
time and effort can be spent on the essential issues. The
following is a partial list of integrated programming
environment facilities, some of which are already mentioned in (Sandewall 1978 [11]), that should be provided for the programmer:

459

 Administration and configuration management of
program modules and classes, and different versions
of these.
 Administration and maintenance of test examples
and their correct results.
 Administration and maintenance of formal or informal documentation of program parts, and automatic generation of documentation from programs.
 Support for a given programming methodology, e.g.
top-down or bottom-up. For example, if a top-down
approach should be encouraged, it is natural for the
interactive environment to maintain successive
Modelica 2006, September 4th  5th

A. Pop, P. Fritzson, A. Remar, E. Jagudin, D. Akhvlediani










composition steps and mutual references between
those.
Support for the interactive session. For example,
previous interactions should be saved in an appropriate way so that the user can refer to previous
commands or results, go back and edit those, and
possibly re-execute.
Enhanced editing support, performed by an editor
that knows about the syntactic structure of the language. It is an advantage if the system allows editing of the program in different views. For example,
editing of the overall system structure can be done
in the graphical view, whereas editing of detailed
properties can be done in the textual view.
Cross-referencing and query facilities, to help the
user understand interdependences between parts of
large systems.
Flexibility and extensibility, e.g. mechanisms to extend the syntax and semantics of the programming
language representation and the functionality built
into the environment.
Accessible internal representation of programs. This
is often a prerequisite to the extensibility requirement. An accessible internal representation means
that there is a well-defined representation of programs that are represented in data structures of the
programming language itself, so that user-written
programs may inspect the structure and generate
new programs. This property is also known as the
principle of program-data equivalence.

Early work in interactive integrated programming environments supporting a specific language was done in
the InterLisp system for the Lisp language: (Teitelman
1974 [12]), common principles and experience of early
interactive Lisp environments are described in (Sandewall 1978 [11]), interactive and incremental Pascal
with the DICE system: (Fritzson 1983 [3]), the integrated Mjlner environment, (Lindskov, Knudsen,
Lehrmann-Madsen, and Magnusson 1993 [9]).

1.2 The Eclipse Framework
Eclipse [1] is an open source framework for creating
extensible integrated development environments
(IDEs). (For the history of Eclipse, see Section 6). One
of the goals of the Eclipse platform is to avoid duplicating common code that is needed to implement a powerful integrated environment for development of software. By allowing third parties to easily extend the
platform via the plugin concept, the amount of new
code that needs to be written is decreased.

The Modelica Association

1.3 Eclipse Platform Architecture
By itself, Eclipse does not provide much end-user functionality. The important contributions to Eclipse are
based on its plugins. The smallest architectural unit of
the Eclipse platform is the plugin.
At the core of Eclipse is the Eclipse Platform Runtime. The Runtime in itself mostly provides the loading
of external plugins. The Java Development Tooling
(JDT) is for example a collection of plugins that are
loaded into Eclipse when they are requested. The fact
that Eclipse is in itself written in Java and comes with
the Java Development Tooling as default often leads
newcomers to believe that Eclipse is a Java IDE with
plugin capabilities. It is in fact the other way around,
with Eclipse being just a base for plugins, and the Java
Development Tooling plugging into this base.
To extend Eclipse, a set of new plugins must be created. A plugin is created by extending a certain extension point in Eclipse. There are several predefined extension points in Eclipse, and plugins can provide their
own extension points. This means that you can plug in
plugins into other plugins.
An extension point can have several plugins attached, and the plugin that will be used is determined
by a property file. For example, the Modelica Editor is
loaded at the same time as the Java Editor is loaded.
When a user opens a Java file, the Java Editor will be
used, based on a property in the Java Editor extension.
In this case, it is the file name extension that selects
what editor should be used.
As the number of plugins in Eclipse can be very
large, a plugin is not actually loaded into memory before its contribution is directly requested by the user.
This design makes the memory impact reasonably low
while running Eclipse.
A user-friendly aspect of Eclipse is the Eclipse Update Manager which allows the user to install new
plugins just by pointing Eclipse to a certain website.
This website is provided by the developers of the
plugin that the user may wish to install. An update site
at the OpenModelica [13] web site is for example provided for easy installation of the latest version of MDT.

1.4 OpenModelica MDT Plugin into Eclipse
The MDT Eclipse plugin provides file and class hierarchy browsing and text editing capabilities. Syntax highlighting facilities and a compilation manager are also
included in MDT, as well as integration of the debugger for the algorithmic Modelica code.

460

Modelica 2006, September 4th  5th

OpenModelica Development Environment with Eclipse Integration for Browsing, Modeling, and Debugging

OpenModelica is structured as several communicating processes in client-server architecture, primarily
exchanging information through a Corba interface, see
Figure 3. The OpenModelica compiler/interpreter
(OMC) is the server, communicating with clients. The
Eclipse MDT plugin is one of the clients.
Parse
Server: Main Program
Including Compiler,
Interpreter, etc.

SCode

Client: Graphic
Model Editor
Corba
Client: OMShell
Interactive
Session Handler

Interactive

Client: Eclipse
Plugin

Untyped API

Inst
system
Ceval

Typed Checked Command API

plot
etc.

Figure 3. The client-server architecture of the
OpenModelica environment.

Figure 1. The architecture of Eclipse, with possible plugin
positions marked.

The Eclipse framework (Figure 1) has the advantage of
making it easy to add future extensions.

2

OpenModelica Environment Architecture

The MDT Eclipse plugin is integrated in the OpenModelica environment which consists of several interconnected subsystems, as depicted in Figure 2 below.

DrModelica
NoteBook
Model Editor

3

Interactive
session handler




Textual
Model Editor





Modelica
Compiler

Execution



Modelica
Debugger



Figure 2. The architecture of the OpenModelica
environment.

Arrows denote data and control flow. Several subsystems provide different forms of browsing and textual
editing of the Modelica code.

The Modelica Association

Modelica Development
(MDT) Eclipse Plugin

Tooling

As mentioned, the Modelica Development Tooling
(MDT) Eclipse Plugin provides an environment for
working with Modelica development projects.
The following features are available:

Graphical Model
Editor/Browser

Eclipse Plugin
Editor/Browser
Emacs
Editor/Browser

Messages from the Corba interface are of two kinds.
The first group consists of expressions or user commands which are evaluated by the Ceval module. The
second group includes declarations of classes, variables, etc., assignments, and client-server API calls that
are handled via the Interactive module, which also
stores information about interactively declared/assigned
items at the top-level in an environment structure

461



Browsing support for Modelica projects, packages, and classes.
Wizards for creating Modelica projects,
packages, and classes.
Syntax color highlighting.
Syntax checking.
Code completion when writing code to
reference a class.
Code completion/signature information when
writing function calls.
Browsing of the Modelica Standard Library and
other Modelica package hierarchies.
Support for MetaModelica extensions to
standard Modelica.

Modelica 2006, September 4th  5th

A. Pop, P. Fritzson, A. Remar, E. Jagudin, D. Akhvlediani

3.1 Using the Modelica Perspective
The most convenient way to work with Modelica projects is to use to the Modelica perspective. To switch to
the Modelica perspective, choose the Window menu
item, select Open Perspective followed by
Other... Select the Modelica option from the dialog
presented and click OK.

3.2 Creating a Project
To start a new project, use the New Modelica Project Wizard. It is accessible through File->New->
Modelica Project or by right-clicking in the Modelica Projects view and selecting New->Modelica
Project.

Figure 5. Creating a new class.

3.5 Syntax Checking
Whenever a Modelica (.mo) file is saved by the Modelica Editor, it is checked for syntactical errors. Any errors found are added to the Problems view and also
marked in the source code editor.

Figure 4. Creating a new package.

3.3 Creating a Package
To create a new package inside a Modelica project,
select File->New->Modelica Package. Enter the
desired name of the package and a description of what
it contains.

3.4 Creating a Class
To create a new Modelica class, select where in the
hierarchy that you want to add your new class and select File->New->Modelica Class. When creating a
Modelica class you can add different restrictions on
what the class can contain. These can for example be
model, connector, block, record, or function.
When you have selected your desired class type,
you can select modifiers that add code blocks to the
generated code. Include initial code block will
for example add the line initial equation to the
class.

The Modelica Association

Figure 6. Syntax checking.

Errors are marked in the editor as a red circle with a
white cross, a squiggly red line under the problematic
construct, and as a red marker in the right-hand side of
the editor. To reach the problem, one can either click
the item in the Problems view or select the red box in
the right-hand side of the editor.

3.6 Code Completion
MDT supports Code Completion in two variants. The
first variant, code completion when typing a dot after a
class (package) name, shows alternatives in a menu:

462

Modelica 2006, September 4th  5th

OpenModelica Development Environment with Eclipse Integration for Browsing, Modeling, and Debugging

Figure 7. Code completion using a popup menu after a dot

The second variant is useful when typing a call to a
function. It shows the function signature (formal parameter names and types) in a popup when typing the
parenthesis after the function name, here the signature
Real sin(SI.Angle u) of the sin function:

scopes which are hard to recognize using just a scanner
and some logic behind it. In languages like C/C++ and
Java finding enclosing scopes is very easy as one character tokens are used for the scope opening and closing:
"{" and "}". In Modelica you need at least two tokens
and much more case analysis to find where a scope
starts and ends. Complications also arise when mixing
if-statements with if-expressions (which was further
complicated by the introduction of conditional declarations in the Modelica language). In this particular case
we implemented a parser emulator that recognizes these
constructs based on scanner tokens delivered backwards.

Figure 8. Code completion showing a popup function
signature after typing a left parenthesis.

3.7 Automatic Indentation
MDT has recently obtained support for automatic indentation. When typing the Return (Enter) key, the next
line is indented correctly. You can also correct indentation of the current line or a range selection using
CTRL+I or Correct Indentation action on the toolbar
or in the Edit menu.
Indentation can be applied to incomplete code as a
heuristic Modelica scanner is used and the indentation
is based only on the tokens generated by this scanner.
The indenter indents one line at a time. For example,
consider that line four (4) in Figure 10 should be indented. The indenter asks the heuristic scanner to give
tokens from the starting token in backwards direction to
the start of the file until a scope introducer is recognized, which for this particular file is model MoonAndEarth. The reference position of the start of the
scope introducer is computed and line four (4) is indented from this reference position one indent unit. The
indentation result is presented in Figure 10.
Indenting Modelica code is far from trivial when incomplete (possibly incorrect) code should be indented
correctly. Most of the difficulty comes from Modelica

The Modelica Association

Figure 9. Example of code before indentation.

Figure 10. Example of code after automatic indentation.

The indenter works in almost all cases, but there are
cases in which is impossible to find the correct indentation. For example when the indentation of a line con-

463

Modelica 2006, September 4th  5th

A. Pop, P. Fritzson, A. Remar, E. Jagudin, D. Akhvlediani

sisting of "end Name;" is requested and the scope
introducer for Name is not found (that is identifier Name
followed backwards by class, model, package,
block, record, connector etc.) then the indenter
fails and returns the indentation of the previous line.

4

The OpenModelica Debugger Integrated in Eclipse

We have integrated our debugger for algorithmic Modelica code (Adrian Pop and Peter Fritzson, 2005 [10])
within the Eclipse debugging framework.
The communication protocol between MDT and the
debugger (which is included in the compiled executable
built for simulation) is based on a client-server architecture and is implemented via sockets. The debugger
is the server and MDT is the client.
When the debugged model is simulated, the debugger receives from MDT all the breakpoints set within
the algorithmic code. Then the debugger resumes the
application program. When a breakpoint condition becomes true the debugger stops the program and listens
to commands it may receive from MDT. The commands accepted by the MDT client are classic: variable
value printing, stack trace printing, stepping, running,
etc. MDT sends appropriate commands to the debugger, parses the information received and displays it
within the MDT debugging views to be inspected by
the programmer.
Because algorithmic code can be executed millions
of times within a simulation, it is very important to be
able to specify breakpoints based on variable values
and/or the number of times a function executes. These
types of breakpoints were recently added to the debugging framework previously described in (Adrian Pop
and Peter Fritzson, 2005 [10]) and are now available,
also in MDT within Eclipse.

5

Simulation and Plotting from MDT

Simulation and plotting is possible from a special
command window, where commands are sent to omc.
For example:
Simulation:
>> simulate(Influenza,startTime=0.0,
stopTime=3.0)
record
resultFile = "Influenza_res.plt"
end record

The simulated population is plotted (Figure 11).
>> plot({Infected_Popul.p})
true

The Modelica Association

Figure 11. Plot of the Influenza model.

6

Eclipse History

In the mid 1990s software developments tools were
primarily dominated by systems built around two technologies. Many of the tools were focused on a runtime
environment developed and controlled by the Microsoft
Corporation. The other was built around the Java platform. The Java platform is less dominated by a single
company and more open to industry and community
input. IBM felt it was important to contribute to the
growth of the more open Java platform to become independent of Microsoft.
By creating a common platform for development
tools built on top of the Java platform, IBM hoped to
attract more developers from competing environments.
In late 1998, the software division at the IBM Corporation began working on the software project that is today
known as Eclipse. The original work was based on resources developed by Object Technology International
labs. In the beginning, the work on a new Java IDE was
performed at the IBM laboratories. At the same time
additional teams were setup by IBM to build other
products on top of the platform.
In order to increase the rate of adaptation of the
platform and to instill confidence in the Eclipse platform, IBM decided to release the code base under an
open source license, and to build a community around
the project.
In 2001, IBM together with eight other organizations created the Eclipse consortium. A website at
eclipse.org was started in order to create and coordinate a community around Eclipse. The goal was that
source code would be controlled and developed by the
open source community and the consortium would
handle the marketing and business side of the project.
At that point, IBM was the largest contributor to
both the open source community and the consortium.
Two years later the first major public release of the
Eclipse platform was made. The release got a lot of
attention from developers and was well received. How-

464

Modelica 2006, September 4th  5th

OpenModelica Development Environment with Eclipse Integration for Browsing, Modeling, and Debugging

ever, industry analysts suggested that many still perceived Eclipse as an IBM-controlled technology. Many
key players in the industry did not want to make commitments to a project controlled by the International
Business Machines Corporation.
After discussions within the consortium it was decided that a new organization was needed to make the
status of Eclipse as an open and community driven project clear. At the EclipseCon 2004 gathering an announcement was made that the Eclipse Foundation was
formed. The foundation is an independent not-for-profit
organization. It has its own full time paid professional
staff, supported by foundation members.
The new organization has proven itself a success. At
this point the foundation have released version 3.0 and
3.1 of Eclipse since its birth. These releases have
gained more adoption and recognition than any earlier
versions. Today (2005) the foundation has more than
90 full-time developers on the pay roll and receives
more than $2 millions in funding each year.
Currently there are more than eighty member companies in the foundation of which at least sixty-nine are
providing add-on products to Eclipse. Today there exists hundreds of proprietary and an even greater number
of free plugin products. Eclipse has gained a strong
foothold in the industry and is one of the major open
source software development platforms [2].

7

Conclusion

The OpenModelica integrated development environment for Modelica has been augmented with a plugin to
the Eclipse framework. The plugin, called MDT (Modelica Development Tooling) [13], an earlier version is
described in [14], is primarily aimed at development of
large models. It has support for browsing, editing, code
completion, automatic indentation, building executables, and debugging. It also allows simulation and plotting from a special command window. To summarize,
it provides a rather complete integrated development
environment, and it is also the first available Eclipse
plugin for an equation-based language.

8

Acknowledgements

This work was supported by Vinnova in the SWEBProd project, by the CUGS graduate school, and by
MathCore Engineering AB.

The Modelica Association

References
[1] Eclipse website. http://www.eclipse.org.
[2] Eclipse history. A brief history of eclipse.
http://www-128.ibm.com/developerworks/rational/
library/nov05/cernosek/
[3] Peter Fritzson. Symbolic Debugging through Incremental Compilation in an Integrated Environment, Journal of Systems and Software, 3, pp.
285294, 1983.
[4] Peter Fritzson, Peter Aronsson, Hkan Lundvall,
Kaj Nystrm, Adrian Pop, Levon Saldamli, David
Broman. The OpenModelica Modeling, Simulation, and Development Environment. In Proceedings of the 46th Conference on Simulation and
Modelling of the Scandinavian Simulation Society
(SIMS2005), Trondheim, Norway, October 13-14,
2005.
http://www.ida.liu.se/projects/OpenModelica
[5] Peter Fritzson. Principles of Object-Oriented
Modeling and Simulation with Modelica 2.1, 940
pp., ISBN 0-471-471631, Wiley-IEEE Press, 2004.
[6] The Modelica Association. The Modelica Language Specification Version 2.2, March 2005.
http://www.modelica.org.
[7] Peter Fritzson et al. The OpenModelica Users
Guide, version 0.7, May 2006.
http://www.ida.liu.se/projects/OpenModelica.
[8] Peter Fritzson et al. The OpenModelica System
Documentation, version 0.7, May 2006.
http://www.ida.liu.se/projects/OpenModelica.
[9] J. Lindskov, M. Knudsen, O. Lfgren, Ole Lehrmann-Madsen, and Boris Magnusson (Eds.). Object-Oriented Environments - The Mjlner Approach. Prentice Hall, 1993.
[10] Adrian Pop and Peter Fritzson. A Portable Debugger for Algorithmic Modelica Code, the 4th International Modelica Conference (Modelica2005),
March 7-9, 2005, Hamburg, Germany.
[11] Erik Sandewall. Programming in an Interactive
Environment: The LISP Experience, Computing
Surveys, 10:1, Mar. 1978.
[12] Warren Teitelman. INTERLISP Reference Manual.
Xerox Palo Alto Research Center, Palo Alto, CA,
1974.
[13] PELAB, Modelica Development Tooling (MDT).
http://www.ida.liu.se/labs/pelab/modelica/OpenM
odelica/MDT
[14] Andreas Remar and Elmir Jagudin. Modelica Development Tooling for Eclipse. Master Thesis
LITH-IDA-EX06/024SE, April 10, 2006.

465

Modelica 2006, September 4th  5th

A. Pop, P. Fritzson, A. Remar, E. Jagudin, D. Akhvlediani

The Modelica Association

466

Modelica 2006, September 4th  5th

A Modelica Based Format for Flexible Modelica Code Generation and Causal Model Transformations

A Modelica-based Format for Flexible Modelica Code Generation
and Causal Model Transformations
Jonas Larsson+
+

Peter Fritzson*

Fluid- and Mechanical Engineering Systems, Dept. Mechanical Engineering
*
PELAB  Programming Environments Lab, Dept. Computer Science
Linkping University, S-581 83 Linkping, Sweden
+
jonla@ikp.liu.se * petfr@ida.liu.se

Abstract
The equation-based modeling language Modelica
offers the possibility to extract a differential algebraic equation system (DAE). The DAE in turn can
be used in numerical simulation, optimization, sensitivity analysis, diagnosis and more. For each of these
categories, there exist software tools that all require
slightly different input data, sometimes in symbolic
form. Through examples, this paper briefly outlines a
Modelica based format which can be used as input to
the final code generation. This could yield a modular
Modelica compiler in which the creation of diverse
code generators is encouraged, which in turn widens
the application area for Modelica. However, no formal definition of the format is presented here..
The paper also briefly addresses the issue of possible
model causal adaptation needed at the equation level
to make the model fit into target application with a
causal usage context and how to automate the inclusion of these changes for seamless translation.
Keywords: Modelica, DAE, numerical solver, code
generation, DSblock

1

Introduction

Modelica [1][8] is one of several equation-based
modeling languages for describing continuous dynamic behavior and discrete events in the context of
technical systems. A Modelica model can be flattened from its object-oriented form to a hybrid DAE,
i.e., a DAE containing both continuous and discrete
variables. One example of a model resulting in a hybrid DAE is that of a chemical process in a plant including a software-based controller and actuated
on/off valves. The hybrid DAE is normally optimized such that numerical time-domain solutions
will converge rapidly at a low computational cost.

The Modelica Association

Finally, code generation takes place where the actual
programming code is created for the application at
hand, for example a simulation, optimization, sensitivity analysis, or diagnosis.
This compiling process is complex and among other
things includes an extensive flattening procedure,
efficient symbolic manipulations and sorting algorithms for a large number of equations. The creation
demands a deep knowledge in the Modelica semantics as well as in the area of solving DAEs. As an
example, the OpenModelica compiler [2], programmed in a Modelica-like syntax [3] contains
some 100 000 lines of code.
In order to facilitate and encourage a widened cooperation in Modelica compiler construction, this paper
discusses a Modelica based format for the information available between the optimization and code
generation steps, called MOO from now on. The information is essentially several equation sets for initialization, numerical integration, re-initialization at
discrete events, and finally output. Today there already exist a Modelica format between flattening and
optimization that is a subset of Modelica since the
object-oriented syntax is not needed at that stage.
The equation-based MOO format exemplified in this
paper enables a discussion between compiler designers and the simulation tool developers at the other
end on the interface information needed This can
lead to widened support for Modelica in simulation
tools and to new solvers, etc. due to a more modular
development of code generators.
The second but smaller subject of the paper is on
adapting Modelica models in terms of interface variables and the equation set to fit a target application
with a specific causality context, such as a model
library with conventions for the exchanged variables
among models in terms of computational causality,
signs, and names. Through the algorithms described,

467

Modelica 2006, September 4th  5th

J. Larsson, P. Fritzson

a model can be fitted with new interface variables
and equations if needed.

2

Related Work

The file based approach MOO has its disadvantages,
such as low performance in comparison to a monolithic compiler since the internal data structure needs
to be converted to and from the Modelica syntax. On
the other hand, a programmer does not need to get
acquainted with the rest of the compiler code and
could save time this way. Moreover, flattened Modelica of the OpenModelica compiler is already used
today as input to third party compilers.
Another alternative would be to keep the current
situation where the generated C code is utilized
through function calls to get access to derivatives,
output values etc, as is performed in DSblock [4] and
SimStruct [5]. However, this C code can be generated from MOO, so the MOO file is an inclusive option. Also, the advantage with introducing MOO is
that the equation sets produced are available on symbolic form, which is important in order to create new
types of applications where the equations need to be
processed further through symbolic mathematics and
other operations. One example is optimization,
where the Hessian (matrix of second-order partial
derivatives) is of interest. Many mathematical operations can be performed numerically, such as creating
the Hessian, but often a mixed symbolic-numeric
approach results in higher accuracy and better performance.
The paper [6] describes the syntax and semantics of
an interchange format for hybrid models in general
and is thus at a higher, more abstract level than
MOO. MOO is however specified with [6] in mind
not at least since compatibility between the two
means that the code generators implemented for
Modelica can be applied for other hybrid modeling
languages as well with minor effort.

3

Limitations

Algorithms, arrays, and function calls of the Modelica language are not the main concern of this paper
but are at times commented in terms of implementation.

The Modelica Association

4

Hybrid Modeling in Modelica

In this chapter the basics of hybrid modelling in
Modelica is described as well as the example model
used throughout the text. In the following two sections, the resulting typical information from the flattening and optimization steps is described as well as
the information needed for code generation with different applications in mind.
A bouncing ball is a good example of a hybrid system. The motion of the ball is characterized by the
height h and the vertical velocity v. The ball moves
continuously between bounces, whereas discrete
changes occur at bounce times, as depicted in Figure
1 below. When the ball bounces against the ground
its velocity is reversed. An ideal ball would have an
elasticity coefficient e of 1 and would not lose any
energy at a bounce. A more realistic ball, as the one
modelled below, has an elasticity coefficient of 0.9,
making it keep 90 percent of its speed after the
bounce.

Figure 1. A bouncing ball

The bouncing ball model contains the two basic
equations of motion relating height and velocity as
well as the acceleration caused by the gravitational
force. At the bounce instant where the boolean impact variable switches value, the velocity is suddenly reversed and slightly decreased, i.e., v(after
bounce) = -e*v(before bounce), which is
accomplished by the special syntactic form of instantaneous equation: reinit(v,-e*pre(v)). The
pre operator returns the value of the variable argument just before the latest event, in this case the velocity just before impact. The edge operator used in
the example is simply defined as: var and not
pre(var) and thus indicates a change in the discrete variable var.
model BouncingBall
parameter Real e=0.7 "bounce coeff";
parameter Real g=9.81 "gravity acc.";
Real h(start=1) "height of ball";
Real v "velocity of ball";
Boolean flying(start=true);
Boolean impact;
Real v_new;
equation
impact = h <= 0.0;
der(v) = if flying then -g else 0;
der(h) =v;

468

Modelica 2006, September 4th  5th

A Modelica Based Format for Flexible Modelica Code Generation and Causal Model Transformations
when {h <= 0.0 and v <= 0.0,impact} then
v_new = if edge(impact) then
-e*pre(v)
else
0;
flying = v_new > 0;
reinit(v, v_new);
end when;
end BouncingBall;

The equations within the when-equation are executed whenever any of the given boolean expressions
changes values. Thus, if the ball is on the ground and
has a negative velocity but the impact variable has
not changed the velocity will be reset to zero and the
boolean variable flying is set to false. The derivative of the velocity in the equation section is then
also set to zero due to the if-expression.

Equation 2 is the presumed resulting equation set
from the optimization phase of the model compiling
process.
Apart from the equations in (2), there exist assignments of discrete variables in normal equations as
well as in the instantaneous when equations which
are active only at events. These assignments can be
written
 x (t e ), x(te ), u (t e ), y f (t e ), y g (te ), te , q(t e ), 

q(te ) := f q 
 q pre (te ), p, c(t e )




The boolean conditions vector is stated [8] as follows:

(

)

c(te ) := f e q B (te ), q Bpre (t e ), p B (t e ), rel (v(t e ))

5

Model Translation to Solvable
Mathematical Representation

A Modelica model is first flattened from its object
oriented form to a set of hybrid differential and algebraic equations on the hybrid DAE implicit form [8]

(

)

F x (t ), x(t ), u (t ), y (t ), t , q(te ), q pre (te ), p, c(te ) = 0

(
)
g (x(t ), u (t ), y f (t ), y g (t ), t , q (t e ), q pre (te ), p, c(t e )) = 0

(2a)

The function fe takes as arguments the subset of discrete variables and parameters of boolean type and
the boolean vector rel contains all elementary relations of the model. Two possible relations are {a > b,
c < a} which yields a possible c(te) as {a>b and
not(c<a), a>b or c<a}.

6

Modelica Representation for Input
to Code Generation

A simulation comprises initialization in order to
reach consistent start values for dependent variables,
numerical integration between events, event detection during integration by detecting changes in the
boolean relations rel, solving both continuous and
discrete variables at events, and termination. The
MOO file contains information needed for all these
operations and is described in this section. The information in the MOO file is based on how the present OpenModelica compiler is implemented and on
[5] and [8] - [11].
Since Modelica algorithms demand that all variables
on the right hand side are defined, a Modelica model
is more suitable than a function since the model can
contain equations as well. The model below is filled
with some of the Modelica statements discussed
from now on.

(2b)

where f / x , f / y f and g / y g are nonsingular
but most often nonlinear. The derivatives x and algebraic variables yf are found by solving Eq. 2a after
which 2b is used for computing yg, which are output
variables. Equation 2 is supplied to an ODE or DAE
solver in order to compute x and y in between events.
The Modelica Association

(4)

(1)

The vector q(te) is discrete-time variables and the
corresponding predecessor variable vector qpre(te) is
denoted pre(q) in Modelica. The time te used instead of t for these variables indicate that such variables may only change value at event time points te.
The time t and constant vector p of parameters and
constants are made explicit in the equation. The vector c(te) is the conditional expressions from for example if and when constructs, evaluated at the most
recent event.
Equation (1) can contain explicit or implicit algebraic relations among the states x which leads to difficulties in DAE solvers since numerical differentiation is needed. Index reduction [7][8] is therefore
applied, which means that certain equations of the
DAE are differentiated symbolically wrt time. The
result can be brought to the form
f x (t ), x(t ), u (t ), y f (t ), t , q(t e ), q pre (te ), p, c(t e ) = 0

(3)

model PreCodeInfo
// Parameter, constant and
// variable declarations
equation
// Equations
end PreCodeInfo;

469

Modelica 2006, September 4th  5th

J. Larsson, P. Fritzson

6.1

Constants and Parameters

The parameter and constant declarations from the
flattened Modelica model are replicated. Attributes
such as minimum and maximum values and units are
important information since they can be used for error control in the generated code. Parameters such as
notset below with no fixed values are computed in
the initialization described later. This is also true for
bound parameters, i.e., computed from other parameters.
parameter Real e=0.7;
parameter Real g=9.81;
parameter Real other=e*g(min=);
parameter Real notset(fixed=false);

6.2

Variable Declarations

Variables have start values and at times a prefix stating whether the variable is discrete, input, or output.
States are found by searching equations for the der
operator applied to the variable in question in some
equation. The variable declarations for the bouncing
ball model are:
discrete Real v_new;
discrete Boolean impact;
discrete Boolean flying(start=true);
Real v;
Real h;

6.3

Initialization

Before simulation, the initial values for all variables,
including states and nonfixed parameters, need to be
computed. A similar procedure takes place after an
event has occurred. Initial equations (from the initial equation construct in Modelica) are part of
the total initial system of equations to be solved as
well as when-equations with the initial() condition and equations formed from initial values of variables with the fixed attribute set to true.
An equation list is formed containing all model equations, excluding those within when-clauses without
an initial() condition. Also, for continuous variables v with start=startExp and fixed=true,
equations on the form v=startExp are added. For
discrete variables under the same conditions, equations are added in which pre(v) = startExp. If
fixed=false then startExp is only used as start
value for the initialization, as is the case here. The
when equation reinit(v,v_new) is treated as
v=v_new in an initial equation if the when-condition
contains initial(). For all when-equations with
no initial() in the when-conditions, v=pre(v) is
added for all v := expr.
The Modelica Association

It may very well be that the initialization is not a
well posed problem, i.e., that the number of equations differs from the number of dependent variables.
In the bouncing ball model case, the start value of h
needs to be made fixed and v has no start value altogether. The discrete variables v_new and flying
are initialized as well using default value 0 and start
value true.
The resulting set of equations is shown below where
both start values of discrete and continuous variables
are computed. Two algorithms for finding a zero free
diagonal [12] and then transforming into a block
lower triangular form [13] have been applied. This
results in a sequence of equation systems that can be
solved more efficiently than the complete implicit
equation system. The first index in the equations below is the block and the other the equation number.
Where possible, the variables have been solved for
and are given as the first element in the list, followed
by the equation right hand side and then a string
commenting on whether the second argument is the
right hand side of an assignment or the residual.
iEq[1,1]
iEq[2,2]
iEq[3,3]
iEq[4,4]
iEq[5,5]
iEq[6,6]
iEq[7,7]
iEq[8,8]
iEq[9,9]

= {pre(v_new),0,"ass"};
= {v_new,pre(v_new),"ass"};
= {pre(flying),true,"ass"};
= {flying,pre(flying),"ass"};
= {h,1,"ass"};
= {v,0,"ass"};
= {der(h),v,"ass"};
= {impact,h<=0.0,"ass"};
= {der(v),if flying then g else
0, "ass"};

For equations that cannot be solved explicitly, such
as nonlinear(v)=expression, the equation is
simply written in the residual form, shown below.
Any other residual is formed by subtracting the second argument of the equation expressions above
from the solved variable, such as pre(flying)true in the third equation.
iEq[1] = {v,nonlinear(v)-expression,"res"};

In the bouncing ball model case, the variables can be
computed sequentially. For each block however, if
containing several equations, the mixed set of equations containing both discrete (Eq. (3)) and continuous variables (Eq. (2)) needs to be solved either
through fixed point iteration over the discrete variables followed by normal solving of remaining variables or through other means such as optimization of
the complete equation set in the block.

470

Modelica 2006, September 4th  5th

A Modelica Based Format for Flexible Modelica Code Generation and Causal Model Transformations

Jacobians
Jacobians can be defined only for the continuous
equation subsets of each block since the discrete
variables are discontinuous. Newton-Raphson iteration or other techniques can then be utilized for both
linear and nonlinear equation blocks in order to provide a consistent and simple code generation. The
Jacobian elements can in the case of a linear block
alternatively be made input to a linear solver such as
those contained in LAPACK [14] . Whether a block
is linear or nonlinear is easily found by analyzing
and searching the Jacobian for non-constant elements.
The Jacobians usually increase performance but demand symbolic manipulations and are therefore
valuable to relieve the code generation software
from. Consider the nonlinear equation system below:
iEq[1,1] = {a,sin(a)-userf(b),res};
iEq[1,2] = {b,cos(a)-abs(b),res};

The equations form a block of two equations and the
Jacobian becomes :
iJac[1] = {{1,cos(a)},{2,-der_userf(b))}};
iJac[2] = {{1,-sin(a)},{2,-(if b<= 0 then 1 else 1)}};

where only non-zero elements are included. In this
case, the partial derivative function der_userf has
been defined by the modeler as below:
function userf
input Real x;
output Real y;
algorithm
// . . .
end userf;
der_userf = der(userf,x);

When such a partial derivative definition exists,
automatic differentiation as in [15] can be utilized in
many cases, at least if the derivative function is not
defined as external. For external functions, only numerical differentiation remains in the general case.
6.4

Numerical Integration

After the initialization, numerical integration of the
derivatives can take place in simulation in order to
compute the states. For this purpose the ODE of Eq.
(2) is supplied on the form previously described
where the equations after the last differential equation are separated (2b) and computed in the output
section together with simple equations that have
been removed during optimization. In the ball model
The Modelica Association

case the derivative equations can be extracted from
the complete set of equations below
Eq[1,1] = {der(h),v,"ass"};
Eq[2,2] = {der(v),if flying then g else
0,"ass"};
Jac[1] = {{1,1}};
Jac[2] = {{1,1}};

6.5

Reinitalization

When an event has occurred, certain when conditions will change and thus a certain new set of when
equations will be active. The equation system will
therefore change between events. This can be exploited by preparing efficient code for each combination of events. The number of combinations easily
becomes large however and that is why the Modelica
compiler Dymola [9] performs an offline simulation
in order to see which combinations are likely to occur. A general solution works as well but with lower
performance and is the one sketched here.
The equation set is created for the case where all
when-equations are active. After an event, the effective equation system is gathered from this list using
information on which when-equations are active.
The states are considered known unless they are part
of any active reinit equations in which case the
reinits are treated as state assignments. In the example below, the complete equation set is shown together with the Jacobian. Here, the complete set is
the same as the one formed when one of the whenconditions becomes true.
riEq[1,1] = {impact,h<=0.0,ass};
riEq[2,2] = {v_new,if edge(impact) then 
e*pre(v) else 0,inst};
riEq[3,3] = {v, v_new,inst};
riEq[4,4] = {flying, v_new>0,inst};
riEq[5,5] = {der(h),v,ass};
riEq[6,6] = {der(v),if flying then g else
0,ass};
riJac[5] = {{5,1}};
riJac[6] = {{6,1}};

The equation system above has been sorted and partitioned, which is too demanding during simulation.
The Jacobian can however be used at all times since
it only is defined for the continuous equations and is
not affected by causality.
6.6

Event Detection and Location

Any discontinuity in the ODE equation set during
simulation can be captured through zero crossing
functions that switch sign at the discontinuity. One
function is created for each unique relation in rel.

471

Modelica 2006, September 4th  5th

J. Larsson, P. Fritzson

These functions are provided to the numerical integrator in order for the integrator to identify the time
point of the discontinuity and restart the simulation
at that point with new values for the states. The zero
crossing functions below are given together with
which equations they either are part of (can be both
in Eq. (2) and (3)) or can make active by being part
of when conditions.
z = {0.0-h,{1,2,3,4}}; 0.0-v,{2,3,4}};

Zero crossing functions reflect changes in relations
that affect boolean variables that are part of whenconditions. To determine the current active set of
when-equations it is necessary to know which whenequations a boolean equation triggers. In this case,
the impact equation triggers the second whencondition and therefore could make equations 2, 3
and 4 active.
c = {1,{2,3,4}};

6.7

Code Generation

Given the complete Modelica model and naming
conventions described above code can be generated
for usage in a simulation environment, for example.
Since it is Modelica syntax, the Modelica parser can
be reused as well as parts of existing Modelica compilers for generating C code for individual Modelica
expressions.
By translating the Modelica code to ModelicaXML
[16], an XML implementation, a standard XML
parser can be used instead together with widely used
XML tools for traversing the XML structure and extracting and transforming information.

7

Model Adaptation for Causal External Usage

Imagine the scenario where a Modelica model is to
be used within several causal models, for example
within the simulation environments EASY5 and
Simulink. One example could be a Modelica model
of an engine, or even a complete standard Modelica
library of driveline components that modelers of different enterprises have the interest of making part of
their complete vehicle simulations performed in domain specific simulation tools with no support for
equation-based models. A recent case is the CAPSim
simulation centre [17] for hybrid vehicle simulation
that has a model library open for usage and where
the intention is to make the models usable for many
simulation environments.
The Modelica Association

A flexible compiler supports straightforward code
generation suited for these different environments,
but the models themselves need to be adapted at the
equation level as well, as is described in this section.
Consider a mechanical inertia model with outside
connectors containing position and force. The connector class is specified in Modelica as shown below. The flow keyword tells the compiler to sum
corresponding variables in a connection with other
connectors. The non-flow variables are set equal.
The mentioned inertia model connectors are part of
the external interface and it is through those the communication of connector variables to and from other
models takes place.
connector flange_pos
Real pos(unit="m") "Pos into";
flow Real force(unit="N") "Pos out";
end flange_pos;

Now consider a model where the outside connectors
contain speed and force instead. Connecting the two
models could be performed through a model that
contains an equation for the relation between speed
and position. This could even be automated by identifying differential variables and corresponding derivatives through unit checking.
model intermediate
flange_speed fs;
flange_pos fp;
equation
fs.speed=der(fp.pos);
fs.force=fp.force;
end intermediate;
connector flange_speed
Real speed(unit="m/s");
flow Real force(unit="N");
end flange_speed;

But in a causal target environment, the connectors
are causal. The next example demonstrates a wrapper
that assigns causalities to an acausal fource source
model to make it suitable for insertion into a specific
causal target model.
model force_source
flange_pos flange_p;
equation
flange_p.force = 0.2*cos(time);
end force_source;
model wrapper
flange_pos flange_p;
input Real speed;
output Real force;
equation
speed=der(flange_p.pos);
force=flange_p.force;
end wrapper;

The causal model is created as below by connecting
the wrapper to the force source. A Modelica com-

472

Modelica 2006, September 4th  5th

A Modelica Based Format for Flexible Modelica Code Generation and Causal Model Transformations

piler is able to create code for this model and saves
information about the connectors in the comments of
the input and output variables.
model causal
wrapper w;
force_source fs;
input Real speed "($Conn:flange_p)";
output Real force "($Conn:flange_p)";
equation
connect(w.flange_p,fs.flange_p);
w.speed=speed;
force=w.force;
end causal;

7.1

Automatic Adaptation

The content of the wrapper model depends on both
source and target model connector variables. New
variables may need to be created, as the speed in this
case, unit conversions may need to be applied as well
as sign changes. All in all, a large number of combinations exist for which wrappers need to be created
to support the usage of the model in arbitrary causal
models. But the standards for exchanging variables
among causal models in a certain simulation environment can be declared in template connectors,
where also sign conventions are declared. In the
force source example, the connector template could
look like
model template_connector
input Real speed(unit="m/s") "Pos out";
output Real force(unit="N") "Pos into";
end template_connector;

From the template connector, a compiler can create
the wrapper and causal model automatically as is
described from now on. By comparing the connector
class flange_pos with template_connector, it
can be seen that two variables have the same units;
the forces. The variables pos and speed have different units, but here it can be seen that speed is the
derivative of pos by analyzing the units. The wrapper model is now complete, the forces are set equal
and the derivative relation is established. If the speed
of template_connector would have had the unit
mm/s instead, a factor 1000 would have been
needed in the wrapper equation.
There is no sign convention information in the Modelica models apart from comments. This information
can be used as a starting point, looking for keywords
such as out of and into and similar. But of
course more explicit information would be valuable.
In this case the sign conventions differ and the wrapper equations will both contain negations.
Here follows yet another template connector that
could be used instead of the one defined earlier. The
resulting causal model is compatible with the use of
so called bilateral delay lines [18], which provide
The Modelica Association

means for robust coupled simulation in which every
component model solves its own equations and
communicates at discrete time points with surrounding models. The variable C is in this case a force
wave that passes back and forth in the delay line, as
is the case in metal rods, for example. The end result
is an overall numerical solution that mimics the time
delay existing in physical interactions in nature. The
variable Z is a kind of impedance. Without going
further into the details of delay lines, the example
shows how new equations can be automatically
added to existing models in a mathematically sound
way in order to adjust the models towards various
boundary conditions.
model template_connector
input Real C(unit="N");
input Real Z(unit="N.s/m");
output Real speed(unit="m/s");
output Real force(unit="N");
equation
force = C + Z*speed;
end template_connector;

7.2

Causality Combinations

It could be that the force source model cannot be
solved with the specified input-output causality in
the target connector. Since in causal environments,
every second model has inverted causalities for
compatibility in variable exchange, this can be tested
for the target connector to see if that works better.
The force source model can be solved with speed as
input and force as output, but not the other way
around. The test can be performed through maximum
matching algorithms [12] present in standard Modelica compilers.
What has not been mentioned so far is how to find a
matching target connector for a certain outside connector of the Modelica model. For a match to exist
there must be a one to one match between an outside
connector variable and a causal target connector
variable in terms of units. The units may be of differentiated/integrated form in the target connector.
The target connector may have more variables if they
are output variables and are part of supplied equations.
If the model has a number of connectors of different
classes, such as both mechanical, electrical and other
types, the testing becomes tedious and the testing can
be handed over to the compiler to either generate all
solvable combinations of inverted and non-inverted
target connector causalities or generate the best
solution. One measure for how good a solution is to
see how high index the adapted model has. One example is feeding a mass with a position rather than

473

Modelica 2006, September 4th  5th

J. Larsson, P. Fritzson

force and thus removing its inertia effect. The user
interface could be implemented such that there is a
choice to enforce the default target boundary conditions or to give priority to low index.
The model adaptation method where low index is
prioritized described in this section has been implemented and tested in a Modelica compiler [19] supporting only continuous equations without arrays.
The model adaptation takes place after flattening
where the outside connectors of the flattened model
have not been flattened so that they can still be identified. The algorithms have been proven useful since
the compiler automatically produces numerically
sound code for a given set of target connector templates and a source Modelica model.

8

Conclusions

References

[2]

[3]

[4]

[7]

[8]

[10]

[11]

[12]

[13]

[14]

Modelica Association (2005): Modelica  A Unified Object-Oriented Language for Physical
Systems Modeling  Language Specification.
Version 2.2
P Fritzson, et al (2002): The Open Source Modelica Project. In Proceedings of The 2nd International Modelica Conference, 18-19 March, 2002,
Munich, Germany. See www.ida.liu.se/projects/
OpenModelica
P. Fritzson, A. Pop and P. Aronsson (2005): Towards Comprehensive Meta-Modeling and
Meta-Programming Capabilities in Modelica.
Proceedings of the 4th International Modelica
Conference, Hamburg, pp. 519-525
M. Otter and H. Elmqvist (1995): The DSblock
model interface for exchanging model compo-

The Modelica Association

[6]

[9]

A partial implementation of the Modelica intermediate code format has been done in the OpenModelica
compiler to be used as input to external code generators. The intent is that this information can be produced and is complete for generating simulation
code from hybrid Modelica models.
The model adaptation functionality for using Modelica models in an external causal context needs to be
implemented in a compiler supporting the complete
Modelica language, e.g. soon OpenModelica. This
can pose problems, not at least due to the increasingly complex definition of connectors in Modelica.
Nonetheless the model adaptation can be made less
automatic if needed, for example by defining explicit
transformations among different connector definitions.

[1]

[5]

474

[15]

[16]

[17]

nents. In Proceedings of the 1995 EUROSIM
Conference, Elsevier Science Publishers, pp. 505510
P. J. Mosterman and J. E. Ciolfi (2002): Embedded Code Generation for Efficient Reinitialization. Proceedings of 2002 IFAC 15th Triennial
World Congress, Barcelona, Spain.
A. Pinto, L. P. Carloni, R. Passerone and A. Sangiovanni-Vincentelli (2006): Interchange Semantics for Hybrid System Models. Proceddings 5th MATHMOD Vienna
C. Pantelides (1988). The Consistent Initialization of Differential Algebraic Systems. SIAM
Journal on Scientific and Statistical Computing,
Vol. 9
P. Fritzson (2004): Principles of ObjectOriented Modeling and Simulation with Modelica 2.1. Wiley-IEEE Press, ISBN 0-471-47163-1
S.E. Mattsson, M. Otter, M, and H. Elmqvist
(1999): Modelica Hybrid Modeling and Efficient Simulation, the 38th IEEE Conference on
Decision and Control, CDC'99, Phoenix, Arizona,
USA
T. Park, P.I. Barton (1996): State Event Location in Differential-Algebraic Models. ACM
Transactions on Modeling and Computer Simulation, Vol. 6, No. 2, pp. 137-165
P. I. Barton and C. K. Lee (2002): Modeling,
Simulation, Sensitivity Analysis and Optimization of Hybrid Systems. ACM Transactions on
Modeling and Computer Simulation, Vol. 12, No.
4, pp. 256-289
I. S. Duff and J. K. Reid (1981): Algorithm 575
Permutations for a zero-free diagonal. ACM
Transactions on Mathematical Software, Vol. 7,
pp. 387-390
I. S. Duff and J. K. Reid (1978) An implementation of Tarjans algorithm for the block triangularization of a matrix. ACM Transactions on
Mathematical Software, Vol. 4, pp. 137-147
E. Anderson, Z. Bai, C. Bischof, J. Demmel, J.
Dongarra, J. Du Croz, A. Greenbaum, S. Hammarling, A. McKenney, S. Ostrouchov, and D.
Sorensen (1995):
LAPACK Users' Guide.
SIAM Philadelphia, Pennsylvania, 2 edition
H. Olsson, H. Tummescheit, and H. Elmqvist
(2005): Using Automatic Differentiation for
Partial Derivatives of Functions in Modelica.
Proceedings of the 4th International Modelica
Conference, Hamburg, pp. 105-112
A. Pop and P. Fritzson (2003): ModelicaXML: A
Modelica XML Representation with Applications, Proceedings of the 3rd International Modelica Conference, Linkping, November 3-4, pp.
419-430
J. Fredriksson, J. Larsson, J. Sjberg and P. Krus
(2006): Evaluating Hybrid Electric and Fuel
Modelica 2006, September 4th  5th

A Modelica Based Format for Flexible Modelica Code Generation and Causal Model Transformations

Cell Vehicles using the CAPSim Simulation
Environment. The 22nd International Battery,
Hybrid and Fuel Cell Electric Vehicle Symposium & Exposition, October 23-28
[18] D. M. Auslander D.M (1968): Distributed System Simulation with Bilateral Delay-Line
Models. Journal of Basic Engineering, Transactions of ASME, pp. 195-200
[19] J. Larsson (2007): A Framework for Implementation-Independent Simulation Models. Accepted for publication in Simulation: Transactions
of the Society for Modeling and Simulation International

The Modelica Association

475

Modelica 2006, September 4th  5th

J. Larsson, P. Fritzson

The Modelica Association

476

Modelica 2006, September 4th  5th

Dymola interface to Java - A Case Study: Distributed Simulations

Dymola interface to Java - A Case Study: Distributed Simulations
Jos Daz Lpez
Hans Olsson
Dynasim AB
Research Park Ideon, S-223 70 Lund, Sweden
{jose.diaz, hans.olsson}@dynasim.com

Abstract
Running multiple simulations for the same model is
useful for studying the influence of parameters, calibrating parameters from measurement series, and
optimizing designs to be robust with respect to operating conditions. Dymolas [1] Design-package allows a user to specify such experiments for experimenting, calibrating and optimizing simulation studies [2].
Many of the simulations are independent allowing
them to be run in parallel, i.e. coarse-grained parallelism. This paper describes the extension that distributes the simulations to multiple CPUs, while
keeping the original setup for the simulation study.
This makes the distributed nature transparent for the
user, and the only difference is that the studies are
done faster.
The implementation is implemented in Java using a
Modelica external interface, but in contrast to [3]
with direct interface inside Dymola. Implementing
the distributed simulations in Java makes it possible
to leverage the multi-threading, graphical, and communication capabilities of Java; while using Modelicas strengths for modeling, setup of simulations,
and numeric algorithms.
Keywords: dynamic simulation, distributed simulations, Java, Modelica

1

Introduction

Dymola broadens the external interface possibilities
to Java.1 A case study is distributed simulations for
model experimentation.
1

Java and any other Sun trademarks that are referred
to or displayed in the document are trademarks or
registered trademarks of Sun Microsystems, Inc. in
the U.S. or other countries.
Dymola is a tradermark of Dynasim AB, and a registered trademark of Dynasim AB in Sweden.
The Modelica Association

There are several needs for interfaces between Dymola/Modelica and other tools/languages that can be
met in different ways. In this case we need to call
external functions inside Dymola and in those functions have access to Dymolas API in a safe way.
Java with Javas Native Interface allows this in a
natural fashion, and Dymola allows a user to directly
call external functions written in Java from the
scripting environment. In those functions written in
Java it is also possible to access all of Dymolas API
functions and normal Modelica functions.
This tight coupling requires that Dymola internally
runs a Java Virtual Machine, where Dymola adds
implementations of native functions to allow access
to Dymolas API.

2
2.1

Dymola Interface to Java
Comparison with previous work

Previous implementation of interfaces to Java (based
on top of the external C-interface) did not allow
functions written in Java to call Modelica functions
as seamlessly, but sufficed for calling functions written in Java inside models. The new implementation
also allows this and ensures consistency since one
external declaration in Modelica can be used for calling the function both in the scripting environment
and inside models.
This implies that models using functions written in
Java will include a special header and automatically
link with the Java Virtual Machine.
Previous implementation of access to Dymolas API
functions e.g. via DDE [3] only allows the external
tool to control Dymola, but not Dymola to call the
external tool.

Modelica is a registered trademark of the Modelica
Association.

477

Modelica 2006, September 4th  5th

J.D. Lpez, H. Olsson

The new implementation allows calls from Modelica
functions to Java, and allows this function in Java to
call Dymola/Modelica.
2.2

Mapping of functions

The interface in Modelica to functions written in
Java is limited to static member functions of classes.
The declarations in Modelica are of the kind:
function foo
input Real in1;
input String in2;
output Boolean out;
external "Java" out=P.C.S(in1,in2);
end foo;

In this example P is a package, C a class and S a
static function in this class.
This is according to the Modelica specification (including the use of quoted identifiers for the name of
the function) except that Java is not one of allowed
external language in the specification. The packagename can be a hierarchical name, with dot-notation.
For the future it might be possible to extend Modelicas external objects to also handle objects in Java.
Calls of Modelica functions (and Dymolas APIfunctions callable as Modelica functions) from Java
go through one generic function accessible in Java as
com.dynasim.dymola.interpretMainStatic. For other
Modelica functions a wrapper in Java can be constructed in a mechanical way that maps arguments,
calls this bridge function, and maps the result.
Having one entry point to Modelica from Java makes
it straightforward to transparently redirect all calls to
a remote instance of Dymola, i.e. remote method
invocation.
This interface is only intended for accessing one instance of Dymola. Distributed simulations require
access to multiple instances of Dymola, and thus require additional efforts as will be explained later.
Asserts and other errors in Modelica are mapped to
exceptions to in Java and vice versa. Specific exceptions are thrown for errors specific to calling Modelica functions from Java (illegal types for arguments,
unknown Modelica function, etc).
2.3

Mapping of data-structures

Simple types in Modelica (e.g. Real) are normally
mapped to corresponding simple types in Java.
Strings are non-simple in Java, the mapping is still
The Modelica Association

direct, and is made simpler by the fact that JVM and
Dymola internally use the same UCS-8 implementation of Unicode strings.
Note: The UCS-8 mapping is the result of applying
the UTF-8 mapping to UTF-16 strings, and the recommendation is that even though it can be used internally in programs it should not be used for interfaces. In this case we make an exception in order to
be compatible with the pre-existing C-interface of
JVM.
Arrays in Modelica correspond to (possibly nested)
arrays in Java. Special care is needed to detect heterogeneous arrays in Java, and convert zero-sized
matrices from Java.
Records in Modelica are mapped to a class implementing a map interface in Java. This ensures that
the semantics of Modelica records (named based
type equivalence) is preserved.
To summarize we first present how arguments are
mapped when calling a function written in Java from
Modelica.
Modelica
External Java
Real
double
Integer
int
Boolean
boolean
String
java.lang.String
Record
com.dynasim.record
Real[]
double[]
Integer[]
int[]
Boolean
boolean[]
String[]
java.lang.String[]
Record[]
com.dynasim.record[]
The mapping when a function in Java calls interpretMainStatic is similar, but has special handling of
simple types as presented below. This is necessary
since the simple types such as double are not objects
and thus cannot be part of the generic argument list
of interpretMainStatic.
Modelica
interpretMainStatic
Real
java.lang.Double
Integer
java.lang.Integer
Boolean
java.lang.Boolean
String
java.lang.String
Record
com.dynasim.record
Real[]
double[]
Integer[]
int[]
Boolean
boolean[]
String[]
java.lang.String[]

478

Modelica 2006, September 4th  5th

Dymola interface to Java - A Case Study: Distributed Simulations

Record[]
com.dynasim.record[]
The record class, com.dynasim.record implements
the map-interface, and the contents is mapped as for
interpretMainStatic (also when calling a function
written in Java from Modelica). The reason is the
same as for interpretMainStatic. However, for easy
access to simple variables there are also special functions, getDouble, getInt, and getBoolean.
The map for records is straightforward to use and by
being name-based avoid issues with declaration order and future extensions of the records in Modelica.
2.4

Setup

The command setup is of distributed Experimentation package is identical to the one described in [5].

Mapping of errors

Exceptions thrown from Java called from Modelica
are automatically mapped to assertions, which is the
normal error handling primitive in Modelica. Currently an assertion stop Dymolas interpreter are
there is no way of catching the error inside Modelica.
When an assertion (or other error) is trigged in Modelica originating from a call to interpretMainStatic
this is mapped to an exception in Java as follows:
 com.dynasim.DymolaException base-class
of the other exception  introduced in order
to make it easy to catch all exceptions.
 com.dynasim.DymolaNoSuchFunction(<na
me of function>) when the function is not
found by interpretMainStatic.
 com.dynasim.DymolaIllegalArgumentExcep
tion for problems with transforming results
or argument between Java and Dymola, and
incorrect type of arguments to function.
 com.dynasim.DymolaEvaluationException
when evaluation fails  e.g. assertions and
division by zero.
These exception classes all inherit from java.lang.
RunTimeException, this ensures that no throws
clause is needed for routines calling Dymolafunctions.
This corresponds to the Modelica environment where
no assert-clause is needed.

3

3.1

Distributed simulations with Java

The new facilities accessible from Java for calling a
Dymola instance, allows the use of transparent RMI
[4] for distributed tasks. Since Dymola simulations
for parameter experimentation are independent, long
simulation times can be shortened by using several
processors. A version of the Experimentation package [5] has been adapted to distributed simulations.
The Modelica Association

The main architecture implemented in Java is depicted in the previous figure.
The architecture of the Java code is simple:
 A master dispatcher with three lists working
as queues: Task Queue, ResultQueue and
AddressList
 Independent threads for each server. The
thread starts, monitors and reports results to
the static lists in the dispatcher.
 External Java functions in Modelica to access the different Queues.
Single signals of whole trajectory files can be sent
back to the master computer if requested, for animation purposes.
Having all this functionalities at hand, the Distributed Experimentation package was written, and we
describe it in the following.
3.2

Distributed Experimentation package

The structure of the Distributed Experimentation
package is very similar to the Experimentation package. The functionalities are the same, as shown below.

479

Modelica 2006, September 4th  5th

J.D. Lpez, H. Olsson

In the view above it is included the set up for trajectory file transferring. Check transferResults if
transfer files to the dispatcher computer is to be
done. The variable transferServer is the network
name of the client computer and the transferFolder
is the network name of the shared folder.
The flag showInformation makes Dymola show a
window with the registered servers for debugging
purposes.

The main difference to the experimentation package
is the distribution of tasks from client to server. The
GUI and setup are the same, and the function
startMasterDispatcher has to be run before any simulation is performed. The information of the servers
and their lookup names is reported to the dispatcher
with this function. See the figure below.

The functionalities of perturbParameter, sweepParameter, sweepOneParameter, SweepTwoParameters and MonteCarloAnalysis are described in more
detail in Dymola Additions document, and can be
used directly here. We will focus here on the setup
and running of the examples. We consider coupledClutches as a reference case study.
The subpackage VDDemo has two functions: vehicleSweepParameter and animateResultFile, used for
demonstration purposes.
3.2.1

Progress Monitoring

The task dealer presents in this window which task
was sent to which server, as well as the overall progress. The progress bar indicates the percentage of
work done and received by the client.

The names 192.168.1.2, 192.168.1.3 and so on
are IP numbers of the server hosts. DNS name resolving is also supported, and therefore possible to
use names instead. The name localhost represents
the address 127.0.0.1 as usual. Use it to include the
own computer which also runs a server.

If any task could not be performed by a server, it will
be back to the task queue and the respective server
will be disabled (marked with red background). YelThe Modelica Association

480

Modelica 2006, September 4th  5th

Dymola interface to Java - A Case Study: Distributed Simulations

low background denotes ongoing simulation on
server. Green background denotes free server.
3.2.2

For this example we used four servers. The dispatcher log evolves as depicted in the figure below.

Collecting results

During simulation time, Dymola inspects the result
queue in the master dispatcher waiting for results
with a simple Modelica Function call. For instance,
results are presented directly in sweepParameter as
the results are arriving. It is up to the Modelica function whether to present the incoming results or not.
In the figure below, the results of sweepParameter on
CoupledClutches example are depicted, after three
results are arrived.

Running a sweep with Payloads-example can be
done by clicking on Commands/Roof load (11
cases) with weights from 0 to 200 Kg, and then
execute. The model is depicted below.

Dymola shows the following view when all 11 cases
are completed. The visualisation is performed by a
special visualizer written for this example. In the
figure below, we observe a rectangle defined by the
position of the four wheels and the identifier of the
case.

We observe with his experiment that the car is stable
with regard to a payload from 0 to 200 Kg.
The Modelica Association

481

Modelica 2006, September 4th  5th

J.D. Lpez, H. Olsson

The final log window has the following information
and statistics. The first simulation was ready after
86.5 seconds (translation, compilation with Visual
Studio 2003 and running). We analyse now two runs
of sweepParameter.

We analyse this log in the next section.

3.3

To interpret the results, we consider the total time
against the best time. Using the best computer, the
total time for eleven simulations would be 411 seconds. As a result of the distributed simulation, the
whole task needed only 202.5 seconds. This means
that the speedup factor was of 2,036. We observe
also that the localhost and the first server are slowing
down the simulation.
For a second run, we make the same sweep but for
one hundred simulations. In this way, we get rid of
initialisation overhead. Observe the final dispatcher
log.

The Modelica Association

Asymptotic resulting speed up

Confirmation of theoretical Speed up factor (approx.
number of servers) has been observed using long
simulation times using VehicleDynamics 1.0.2.
The effective time used per simulation for the second
sweep is of 12 seconds. The fastest simulation was
36.07 seconds. If we just only used the fastest computer, the total elapsed time would have been 3607
seconds. The total elapsed time with these two servers was 1239 seconds. The resulting speedup factor
is 2.911 compared to the most optimistic scenario.
It is our experience that localhost behaves slower
than its equivalent server, since the dispatcher runs
also in the same computer. We added a computer
double so slow than the other two. Equivalently, we
were running with three equally fast servers in total,
reflected in the example.

482

Modelica 2006, September 4th  5th

Dymola interface to Java - A Case Study: Distributed Simulations

4

Conclusions

A new interface between Modelica and Java has
been implemented. This enables Modelica and Dymola to take advantage of all Java features, making
possible the incorporation of java objects in Modelica.
As such an example of Java applications with Dymola, distributed simulations with Dymola where
implemented using the transparent RMI Java package. High speed up factors were observed with low
overhead. The main advantage is that RMI handles
directly all concerning network communication,
while Dymola handled all simulation aspects.

References
[1]
[2]

[3]

[4]

[5]

Dymola Users Manual, www.dynasim.com
Elmqvist H., Olsson H., Mattsson S.E.,
Brck D., Schweiger C., Joos D., Otter M.,
Optimization for Design and Parameter Estimation, Proceedings of the 4th International
Modelica Conference, Hamburg-Haburg,
Germany, 2005.
Olsson H., External Interface to Modelica in
Dymola, Proceedings of the 4th International
Modelica Conference, Hamburg-Haburg,
Germany, 2005.
Gur-Ari, G. Empower RMI with TRMI.
http://www.javaworld.com/javaworld/jw-082002/jw-0809-trmi.html
Dymola Users Manual  Dymola 6.0 Additions, shipped together with Dymola distribution.

The Modelica Association

483

Modelica 2006, September 4th  5th

J.D. Lpez, H. Olsson

The Modelica Association

484

Modelica 2006, September 4th  5th

Simulation of Complex Systems using Modelica and Tool Coupling

Simulation of complex systems using
Modelica and tool coupling
Roland Kossel, Wilhelm Tegethoff, Michael Bodmann, Nicholas Lemke
TLK-Thermo GmbH
Hans-Sommer-Strae 5, 38106 Braunschweig, Germany
r.kossel@tlk-thermo.de

Abstract
Basically there are two approaches of modeling and
simulating complex systems composed of subsystems. Approach A is based on established simulation
tools of the respective domain in order to conduct a
co-simulation by tool-coupling. Approach B consists
of modeling the whole system in only one suitable
language like Modelica. Using approach A the existing software and the in-house and external expert
know-how can be applied. Approach B has significant advantages because of the description of the
complete system in one standardized and open language like Modelica and employing an efficient
simulation environment such as Dymola. When
simulation environments which support approach B
are coupled with existing software based on approach A, the advantages of both approaches can be
utilized. Considering for example the simulation of a
passenger compartment, the feasibility of a coupling
of Modelica/Dymola, Flowmaster2, Simulink and
THESEUS-FE as well as different utility programs is
demonstrated in this presentation.
Keywords: co-simulation; tool coupling; middleware; TISC

1 Simulation of thermal systems in an
automotive environment
When simulating a vehicle, its thermodynamic subsystems like engine, engine-cooling system, oil cooling, air conditioning cycle, HVAC unit and passenger compartment are connected with each other especially by fluid- and heat-flows. In order to describe
the thermodynamic behavior of the complete system,
the models of the subsystems have to be coupled using the variables heat flow rate, mass flow rate, temperature and pressure and if necessary other, nonthermal variables like motor rotation speed. It makes
The Modelica Association

sense to choose the bested suited simulation tool for
each subsystem. The following list gives a fragmentary overview of tools that may be used for the respective problems:
Air conditioning cycle
HVAC unit
Passenger compartment
Cooling cycle
Oil cooling

Modelica-Dymola
CFD / Simulink
CFD / THESEUS-FE
Flowmaster2 / KULI
Flowmaster2 / KULI

In the literature, several different approaches are presented for describing the complete system. The approaches range from simple couplings of simulation
tools over a co-simulation with different simulation
programs to modeling the whole system in one software environment [1], [2].
Figure 1 shows the typical current state of simulation
tool coupling in the area of automotive thermal systems. For transferring CFD-information to a 1dsimulation program files are used in most cases [3].
In case of a bidirectional coupling this approach has
limitations especially concerning synchronization.
When only two programs are coupled, different
techniques for tool integration like DLLs or communication channels through COM or CORBA can be
employed. As Figure 1 shows, using pair-oriented
software coupling quickly meets its limitations. The
number of pair-oriented interfaces increases greatly
with every integrated tool. Without a standardization
and control of the tool-coupling, this technique will
be difficult to use. An appropriate synchronization
seems to be hard to introduce. Additionally, the implementation and maintenance of the numerous interfaces involves high costs (see [4]).

485

Modelica 2006, September 4th  5th

R. Kossel, W. Tegethoff, M. Bodmann, N. Lemke

DLL, COM,
CORBA, etc.

Files

Simulink

Experiment

CFD

KULI

Flowmaster2

Dymola

Figure 1: Exemplary current state of tool coupling of
simulation programs and HIL-applications

It follows from the above, that the coupling technique for simulation programs must be standardized.
The following chapter describes a possible way for
this. Afterwards an alternative way describing the
thermal behavior of a vehicle holistically is presented.

2 Coupling of simulation tools
As pointed out in Chapter 1, special coupling software (middleware) should be employed when simultaneously coupling more than two programs (see
Figure 2). The middleware provides the systematic
coupling of the different simulation programs and
takes care of the synchronized data communication.
In difference to the pair-oriented technique from
Chapter 1, only one interface is needed for every
program when using a middleware concept.

cle electronics. EXITEs data exchange is based on
CORBA for normal and MPI for HIL applications.
In the field of thermal management Puntigam [1]
describes the middleware of the VIF in Graz. This
software relies on CORBA and has numerical means
for coupling the differential equations of the coupled
programs. The MPI based middleware MpCCI [6]
provides a solution for coupling 3D programs.
MpCCI aims at mesh-mesh-coupling. At the present
date MpCCI support only the coupling of two applications at one time.
The configuration displayed in Figure 2 is currently
not realizable with any of the described middleware.
Due to the need of a short-term availability and special demands concerning the data synchronization
and platform independent data exchange, the middleware TISC was developed.
TISC allows platform independent exchange of commands (strings), floating point numbers (double) and
integers as scalar values as well as vectors and
matrices. The data exchange is realized through
sockets. As Figure 3 shows, TISC consists of a
server and the respective clients, which are integrated into the coupled programs. For this integration, interfaces are available in C, C++, C# and
FORTRAN. A connection over COM is also supported and used for example for Flowmaster2 and
KULI.
Sockets (Windows, Linux, Unix) for transferring commands, integer, doubles as scalar-,
vector- or matrix-values
Flowmaster2

Dymola

Fluent

TISC-Client

TISC-Client

TISC-Client

TISC-Server

CORBA, MPI,
Sockets, etc.
Flowmaster2

Dymola

Fluent

TISC-Client

TISC-Client

TISC-Client

LabVIEW

Simulink

KULI

Figure 3: Coupling of simulation tools and data acquisition software with TISC

Middleware
LabVIEW

Simulink

KULI

Figure 2: Coupling of simulation tools and data acquisition software through a middleware

A typical middleware is for example the program
EXITE [5], which is widely used in the field of vehiThe Modelica Association

TISC-integrations are currently available for the following programs:
 Flowmaster2
 Modelica/Dymola
 Fluent
 StarCD
 KULI
 THESEUS-FE
 LabVIEW
 Trnsys
 Matlab/Simulink

486

Modelica 2006, September 4th  5th

Simulation of Complex Systems using Modelica and Tool Coupling

The following interfaces are currently under development:
 Ansys
 Excel
 CFX
 COM
Furthermore utility programs exist for visualizing the
exchanged data. TIM  the TISC Information Monitor  receives and saves all data sent by the coupled
programs. The StateViewer displays a pressureenthalpy-diagram at run time of the co-simulation or
the measurement. A special client for controlling the
next time increment (if the coupled programs allow
this) and for coupling the variables numerically efficient is in development (see [1]).
2.1 Advantages of coupling simulation tools
When coupling simulation tools with a middleware,
several advantages arise besides from the saving of
time. Employing a middleware for the simulation of
the complete system allows the utilization of present
expert knowledge which is bound to existing software. Using this knowledge can speed up integrating
the examination of the complete vehicle into the product development process. Beyond this, the best tool
can be chosen for describing each subsystem. By
using a standardized definition of the interface
variables, the single simulation tools can be easily
exchanged (compare Figure 4). Even if the approach
of using a unified language for building the models
is used, it can make sense to couple sub models with
a middleware to decouple the time Steps of the solver.
2.2 Arising problems
Besides the mentioned advantages, there are also
drawbacks to consider. Since events have to be triggered to exchange the data between the simulation
tools, the solvers of those programs have to be
stopped and restarted at every exchange time. Since
the received variables show a discrete behavior, this
restart can become difficult. Further on numerical
oscillations can occur, when the interdependence of
the coupled variables is very high. To reduce these
effects, interpolation methods are currently explored
in order to convert the discrete behavior of the received variables into a continuous one or to achieve
a pseudo multistep integration method.

3 Unified simulation with Modelica
An alternative way to the coupling of simulation
tools is describing the complete system including all
The Modelica Association

subsystems in one unified programming language
and mathematics. In the following it is assumed that
the subsystems and therefore the complete system
can be described by hybrid systems of differential
equation (ADE-systems). A hybrid ADE-systems
consists of the following three equation types:
1. Ordinary differential equations (ODE) with the
respective differential variables whose derivatives explicitly appear in the system of equations.
2. Linear and non-linear ordinary algebraic equations (OAE) with the respective algebraic variables.
3. Event equations with the respective discrete
variables whose values can only be changed at
an event. The corresponding simulation technique is highly developed in digital electronics.
Because of the combination with the continuous
ADE-system it is referred to as hybrid ADEsystem.
By assembling the sub models to the complete thermal system, a big hybrid ADE-system is created
which can be solved with appropriate numerical
techniques. Methods for coupling partial differential
equations like FEM or finite volume methods form a
separate technique. From the authors point of view
this technique can not be integrated into the ADEsystems by a standardized description with a unified
programming language at this time. Coupling using
co-simulation seems to make sense in this case.
The thermal models for engine, engine cooling cycle,
oil cooling, air conditioning cycle, HVAC unit and
passenger compartment can be described using hybrid ADE-systems. Highly developed computer languages have been developed for this purpose. Besides VHDL-AMS [7] which is mainly used in the
field of electronics, the language Modelica [8, 9] is
currently widely propagated. The language Modelica
is developed by the non-profit Modelica Association
with the goal to describe hybrid ADE-systems from
diverse physical and engineering domains. Already
numerous commercial and non-commercial libraries
are available. For example the AirConditioning library [10] is being used by the A.K.2.4.3 of the
German OEMs with participation of Audi, BMW,
DaimlerChrysler and Volkswagen for unified steady
state and transient simulation of air conditioning cycles. In this context the OEMs require the suppliers
previous to the project assignment to build the respective component models in the language Modelica [11].
The physical equations are set up in the component
models. The transformation of the equations as well

487

Modelica 2006, September 4th  5th

R. Kossel, W. Tegethoff, M. Bodmann, N. Lemke

as the numerical solution is left to the used working
environment. With means of object-oriented modeling, component libraries can easily be built up. Defining standard interfaces for the components allow a
simple model exchange.
At the moment, Dymola is the most powerful simulation environment which supports the language
Modelica [12]. Other simulators like Mosilab [13],
Amesim [14] and SimulationX [15] are being extended to also support Modelica. The free working
environment OpenModelica can be employed for a
subset of simulation problems [16].
The open and unified programming language allows
an optimal communication and standardization between departments and suppliers. By using the object-oriented techniques of Modelica, the work in
teams is eased. Extending and reusing existing models of the component library is also eased. A substantial training of the employees is necessary, because
otherwise the object-oriented design can easily cause
the opposite effect. Because of the open language the
sustained realization of the own expert knowledge is
possible with less dependence of software companies
and engineering service providers. By employing the
right numerical and object-oriented techniques,
shorted times for method development and calculation can be achieved. Furthermore the goal of a
working environment providing the pre-processing,
simulation and post-processing of the complete system can be reached more quickly.
In order to profit from the mentioned advantages and
the benefits of a co-simulation  and to be capable of
working without a complete Modelica model library
 it makes sense to combine a co-simulation with a
unified programming language.

4 Example: Passenger compartment
The tool-coupling using TISC is demonstrated for a
simulation of the cool down of a passenger compartment. Figure 4 shows the programs participating
in the co-simulation. The central element of the cosimulation is the TISC-server to which every program connects via its interface, the so called TISCclient.
The passenger compartment is being simulated with
THESEUS-FE [17]. The model has been provided by
P+Z Engineering and describes a British sedan including the driver.
The compartment is being cooled by an R134a air
conditioning cycle built in Modelica using the AirConditioning library.

The Modelica Association

A PID-controller assembled in Matlab/Simulink
tunes the temperature within the compartment.
Using TLKs utility program StateViewer, the phdiagram for the air conditioning cycle can be displayed while simulating. The TISC Information
Monitor  short TIM  logs all data exchanged between the different programs over TISC.
Modelica/Dymola
(Air conditioning)

StateViewer

TIM

TISC-Client

TISC-Client

TISC-Client

TISC-Server

TISC-Client

TISC-Client

THESEUS-FE
(Passenger
Compartment)

Simulink
(Temperature
controller)

Figure 4: TISC-setup for co-simulation example

As Figure 4 shows, the single programs are not connected among each other but only with the TISCserver. During initialization the simulation tools register the variables they are sending and receiving at
the server. The data exchange and synchronization
during the simulation is handled by the server. By
using this communication setup, an exchange of the
simulation tools can be easily arranged  as long as
the exchanged tools send and receive the same variables, the other tools configurations do not have to
be altered. For example, the model of the passenger
compartment could be changed this way to describe
a different vehicle.
Figure 5 lists the variables sent and received by the
simulations tools for the co-simulation.
Receives
Input evaporator
(T, mdot)
Relative displacement
Simulink
Relative displacement Signal of temperature
sensor
THESEUS-FE Input evaporator
Output evaporator
(T, mdot)
(T, mdot)
Signal of temperature
sensor
Dymola

Sends
Output evaporator
(T, mdot)

Figure 5: Variables exchanged in co-simulation
The Modelica-model describing the air conditioning
cycle is shown in Figure 6. The TISC-interface is
integrated as a single block into the example
OrificeTubeCycle of the AirConditioning library.

488

Modelica 2006, September 4th  5th

Simulation of Complex Systems using Modelica and Tool Coupling
Cond_mair

Cond_tair
pT

T

duration...
conden...

airIn_...

pipe2

condOut
0.0 0.0
0.0 0.0

condIn
0.0 0.0
0.0 0.0

Speed

pipe1

k={init....

.
mT

airO...

duration... .
m
Cond_...

duratio...
TISC
compr...

Evap_...
3In 3...

w

airOut...

init
charge
p_high
p_low
mdot

.
m

airIn_...

pipe4

p T
Tm

.
Tm

Time

T Superheat [K]

0.0

0.0

Cooling Pow er [W]

super...
Collected Water [g]

0.0

M

Legend
h[kJ/kg] p [bar]
.
m [g/s] T [oC]

duratio...
T

evapor...

rps

evapOut
0.0 0.0
0.0 0.0

0.0

In

COP

0.0

rec...

Figure 6: Modelica model in Dymola for co-simulation
example

the assembly stands for one function. A trigger token
is passed from one block to the next one to assure the
correct execution sequence of the blocks. The token
is created in the Trigger-block every time the variables need to be exchanged. The sequence shown in
Figure 7 is:
1. Create Trigger-token
2. Manage connection to TISC-server
3. Send three variables
4. Synchronize
5. Receive three variables
Every block sending or receiving a variable allows
the user to specify an offset and a factor. By doing
so, unit conversions between the coupled programs
can easily be conducted.
Figure 8 shows the passenger compartment at the
beginning of the cool down co-simulation. The initial
conditions are calculated with a heat soak simulation
with one hour of solar irradiation at 1000 W/m2.

The TISC-block is a composition of single blocks for
the different functions of the tool coupling. These are
 Creating an event when data needs to be exchanged
 Managing the connection to the TISC-server
 Sending variables
 Synchronizing with the TISC-server
 Receiving variables
Figure 7 shows the internal composition of the TISCblock from Figure 6.
Figure 8: THESEUS-FE result at simulation start

Trigger
Inter...

inPort1

The temperature distribution in the passenger compartment after the coupled cool-down simulation of
2400 s duration is shown in Figure 9.

Conne...
"desc...

Real
Scalar
"inV...

outPort1

Real
Scalar
"inV...

Real
Scalar
"inV...

inPort2

outPort2
SYNC

inPort3

Real
Scalar
"out...

Real
Scalar
"out...

Real
Scalar
"out...

outPort3

Figure 9: THESEUS-FE result at simulation end
Figure 7: Internal composition of TISC-block

The block sends three variables to the TISC-server
and receives three variables from it. Every block in
The Modelica Association

489

Modelica 2006, September 4th  5th

R. Kossel, W. Tegethoff, M. Bodmann, N. Lemke

in: Wrmemanagement im Kraftfahrzeug III; Hrsg.
Deussen N. ; S.1 - S.11; Essen; expert Verlag 2002

5 Conclusion
When simulation tools supporting the approach of a
unified programming language are coupled with existing software using a middleware, the advantages
of both approaches can be utilized. Using cosimulation, established programs and the respective
knowledge can still be used and combined with standardized code replacing non-satisfying software or
describing new functionality.
In the process of moving to a unified language, cosimulation can make sense as the first steps. In the
presented example, the temperature controller modelled in Simulink can be replaced by one modelled in
Modelica. The next step of integrating the controller
in the air conditioning system is not far. Only the cosimulation of models with extremely different 3d
approaches like the passenger compartment using the
finite element method in THESEUS-FE or the 0d
and 1d simulation of the air conditioning cycle in
Modelica can hardly be replaced. Even if all models
are described in one language, a co-simulation can
still be employed i.e. to decouple systems with different time constants.
To allow the definition of company- and toolspanning interfaces for co-simulation that ensure the
numerical and physical compatibility, techniques for
example from the CapeOpen standard [18] could be
used as suggestions. The CapeOpen standard is
commonly used in the field of process engineering
and describes the coupling of partial hybrid ADEsystems. However this mathematically very ambitious method has no practical application yet.
Concluding we like to thank P+Z Engineering for
providing the model used in the shown example and
for the help in developing the TISC-interface for
THESEUS-FE.

References

[5] Extessy AG; Exite Manual; Version 1.4.3.;
Wolfsburg, 2005, http://www.extessy.com
[6] http://www.mpcci.de
[7] Hessel E.; Standardisierte Modellbibliotheken fr
die Automobilindustrie  Aktueller Stand der Arbeiten des AK30 in der FAT; Vortragsband der Virtual
Vehicle Creation, Stuttgart 2006 und http://fatak30.eas.iis.fraunhofer.de
[8] http://www.modelica.org
[9] Fritzon P.; Object-oriented Modelling and Simulation with Modelica 2.1; Wiley 2004
[10] Tummescheit H., Eborn J.; Prl K.; Frsterling
S.; Tegethoff W.; AirConditioning: Eine Modelica
Bibliothek zur dynamischen Simulation von Kltekreislufen; in: PKW-Klimatisierung IV; Hrsg.
Schlenz D.; S.196 - S.214; Starnberg; expert Verlag
2005
[11] Schneider F.; Bunzel A., Hofhaus J., Braun M.,
Limperich D., Csar R., Arntz K.-D., Schrter A.,
Specht B., Mnkediek T.; Entwicklung und Einfhrung eines einheitlichen Kltekreislaufsimulationsprogramms; in: PKW-Klimatisierung IV; Hrsg.
Schlenz D.; S.185 - S.194; Starnberg; expert Verlag
2005
[12] http://www.dynasim.se

[1] Puntigam G., Balic J., Almbauer R., Hager J.;
Transient Co-Simulation of Comprehensive Vehicle
Models by Time Dependent Coupling, SAE 200601-1604
[2] Duhme M., Flgel H.-H., Braun M., Sger U.;
Parameterstudie im thermischen bertragungspfad
Motor  Kabine; in: Wrmemanagement im Kraftfahrzeug III; Hrsg. Deussen N. ; S.1 - S.11; Essen;
expert Verlag 2002
[3] Pollack J.; CFD Simulation des Motorraums als
Beitrag zur Verbesserung des Wrmemangements;
The Modelica Association

[4] Betz, J., Anzenberger T., Kobs T.; Entwicklungstendenzen der Wrmemanage-mentsimulation im
Bereich Khlung und Klimatisierung bei Audi; in:
Wrmemanagement im Kraftfahrzeug IV; Hrsg.
Steinberg P.; S.126 - S.140; Essen; expert Verlag
2004

[13] http://www.mosilab.de
[14] http://www.amesim.com
[15] http://www.iti.de
[16] http://www.ida.liu.se/labs/pelab/modelica/
OpenModelica.html
[17] http://www.theseus-fe.com
[18] www.colan.org

490

Modelica 2006, September 4th  5th

Session 5b

Session 5b
Thermodynamic Systems for Cooling Applications

The Modelica Association

491

Modelica 2006, September 4th  5th

Session 5b

The Modelica Association

492

Modelica 2006, September 4th  5th

Optimization of a Cooling Circuit with a Parameterized Water Pump Model

Optimization of a Cooling Circuit with a Parameterized Water
Pump Model
Dragan Simic

Christian Kral Hannes Lacher
Arsenal Research
Giefinggasse 2, 1210 Vienna, Austria
phone +43-50550-6347, fax +43-50550-6595, e-mail: dragan.simic@arsenal.ac.at

Abstract
In this work an electrically operated water pump in
a cooling circuit is implemented, simulated and optimized. The presented simulation results are accomplished with Dymola. This simulation tool is based on
the modeling language Modelica.
The model of the water pump is realized with time
domain differential equations. The parameters of the
differential equations of the water pump are defined
by geometrical data. The water pump is driven by
an electric machine. A generator model and a battery
model are used as power sources for the electric machine driving the water pump. In the proposed application the thermal behaviour of all components of the
cooling circuit (internal combustion engine, pipeline,
cooler...) is implemented.
The measured and the simulated characteristics of
the water pump are be compared. The efficiency
improvement of the internal combustion engine when
using an electrically operated waper pump in stead of
a mechanically operated pump is presented.
Keywords: cooling circuit; water pump

1

2 Water pump model
Basically, the model of the water pump is implemented
by differential equations. The parameters and coefficients of the differential equations are determined by
geometrical parameters of the water pump. Losses of
following kind were considered in the model: flow
losses including hydraulic losses of the operating fluid;
hydraulic losses of the impeller wheel; impact losses
of the operating fluid flowing through the distributor. Mechanical friction losses content the mechanical
losses of the bearing and the seal.

2.1 Water pump design

Introduction

In this work a cooling circuit of an internal combustion
engine (ICE) with an electrically operated water pump
is presented. The results of the simulation lead to an
optimized size of the water pump. All components of
the cooling circuit including the water pump are modeled with the Modelica.Thermal.FluidHeatFlow package of the Modelica standard library [1]. The mechanical and rotational components as well as the ICE are
modeled with the Modelica standard library, too. For
the electrical drive operating the water pump a model
of an electrical machine including converter from the
The Modelica Association

SmartElectricDrives (SED) library is used. From the
SED, an idealized battery and a model of a generator
serve as electrical power sources.
The focus of this work is on the optimization of the
size of the water pump for the cooling circuit. The
cooling circuit model includes the following components: an ICE, a thermostat, a cooler, a fan, a pipeline
and an electrically operated water pump. For the verification of the water pump model, a test bench with a
mechanically operated water pump was built.

The water pump can be seen as a fluid flow machine.
The action principle of a fluid flow machine is based
on the energy theorem. Using this theorem the water
pump can be modelled. The driving torque of the water pump shaft is transmitted to the curved shovels of
the impeller wheel which exert a pressure on the operating fluid. On account to the centrifugal effect, the
operating fluid is hurled outwards in radial direction
of the impeller wheel and therefore, laves the impeller
wheel at the outside extent with higher speed. Beacuse of the diffuser effect in the shovel channels of the
impeller wheel, the operating fluid leaves the impeller

493

Modelica 2006, September 4th  5th

D. Simic, C. Kral, H. Lacher

2.3 Decrease of the specific energy
A rate of the mechanical rotational energy of the impeller wheel gets reduced by the decreasing twist in
the outlet area of the impeller wheel. This reduction
of the energy is equal to the diffrence between the release energy of the impeller wheel and the absorbtion
energy of the operating fluid. This energy reduction,
Yk , of the water pump can be calculated with a loss
factor k. The energy reduction of the water pump [2]
is represented by (2). With an empirical number, know
as Pfleiders number, p, the loss factor, k, can be found
using (3). For the calculation of Pfleiders number in
practice there exist two equations: one equation for
Figure 1: The impeller wheel designe and parameters single curved and one equation for double curved impeller shovels [2]. In this paper a water pump for cooling circuit of the ICE is modeled. This type of the
wheel with increased pressure, as well. The incoming water pump is designed with single curved impeller
operating fluid gets sucked because the mass move- shovels [3]. For calculating Pfleiders number (4) is
ment of the operating fluid outwards causes a negative used.
pressure at the inlet of the impeller wheel. With this
Yk = (1  k) Y
(2)
energy theorem the energy transformation from the
driving energy of the water pump shaft to the potential energy of the operating fluid is defined [2].
1
(3)
k=
1+ p


a
3  b2
r2
2.2 Main equation of the fluid flow machine
p =  1+
(4)
 2 2 2
z
p
r2  r1
An ideal model of the water pump is consided as a
fluid flow machine with an infinite number of shovels. In these equations z is the number of the impeller shovIn this case the energy balance between the converted els of the water pump, r1 is the radius of the inlet area
energy in the impeller wheel of the water pump and of the impeller wheel, and the constant parameter, a, is
the kinetic energy of the operating fluid is fulfilled. an experimental coefficient, with a value between 1.2
Therefore, the main equation of the ideal fluid flow and 2.0, depending on the design of the impeller wheel
machine and the ideal water pump represent the rela- and the diffuser [3].
tionship between mechanical energy of the input shaft
with respect to the impeller wheel and the spezific en- 2.4 Hydraulic losses in shovel channels
ergy of the operating fluid [3]. The main equation of
A particular part of the energy stored in the operatthe ideal fluid flow machine and the ideal water pump
ing fluid between the shovels of the impeller wheel
[2, 4] is represented in (1):
is reduced by flow resistances outside of the shovel
channels. These losses, known as hydraulic losses

m  w = 2  p  b2  r  tanh (b2 )  r22  w2 Y
(1) of operating fluid, are determined by hydraulic friction, changes of the operating fluid flow direction, and
In this equation r2 is the outer radius of the impeller changes of the flow cross sectional area in the shovel
wheel of the water pump, b2 is the outer width of the channels. The calculation of the hydraulic losses is
impeller wheel, r is the density of the operating fluid not trivial. A simplifield calculation of the hydraulic
and b2 is the outlet angle of the shovels of the impeller losses of the operating fluid in the shovel channels is
wheel. The mass flow of the operating fluid in the wa- represented by (5), where Yh determines the hydraulic
ter pump is m and the spezific energy of the impeller losses and c is the average velocity of the operating
wheel for an infinite number of impeller shovels with fluid in the shovel channels. The parameter x is the
Y respectively. The basis impeller wheel design of a friction factor of the hydraulic losses and can be calwater pump [5] is represented in the Figure 1.
culated using the flow equation, taking the geometry
The Modelica Association

494

Modelica 2006, September 4th  5th

Optimization of a Cooling Circuit with a Parameterized Water Pump Model

of the impeller wheel and the shovels into account. In
this case the friction factor, x, is considered as a constant parameter [3].
c2
Yh = x 
2


2.5



(5)

Impact losses

In an arbitrary operating state deviating from the nominal operating state, impact losses occur. In such an
arbitrary operating state the fluid flow direction is not
tagential with respect to the shoveled channels of the
impeller wheel and the control device. The impact
losses occour if the impeller wheel is overloaded or
underloaded. The proportion of the impact losses is
depending on speed and load of the impeller wheel.
For calculating the impact losses (6, 7) are used [2, 4].
In the (6), Yi represents the impact losses, ai is an experimental value according to (7), r3 is the radius of
diffuser and mA is the fluid mass flow at the nominal
operating point of the water pump.
"


2  2 # 
ai
m  mA 2
r

w
r2
2
2
2
Yi =  r2  w +


2
1+ p
r3
mA
(6)
ai = (0.3...0.6) 

2.6

2  b2
p

(7)

Friction losses of the impeller wheel

Between the faces of the impeller wheel and the housing of the water pump a fluid film exists. This fluid
film is responsible for the friction losses, known as
friction losses of the impeller wheel, Pr . These losses
can be determined using (8) according to [2]. The variable n is the kinetic viscosity of the operating fluid
which equals the viscosity of coolant in this case.
4

Pr = 8  10

3

106

w  r2 /n


1/6

 r  w2  r25

(8)

Configuration of the test bench

The test bench of the mechanical water pump is
needed for the determination of variables that cannot
be measured if the water pump is embedded in the
vehicle. For measuring the family of characteristics
like pressure difference and flow, as well as power
consumption and hydraulically efficiency, sensors are
The Modelica Association

Figure 2: Test bench of the water pump
used that cannot be applied in the tight ICE compartment. The more important reason, of course, for using
a test bench is that the measurements are not restricted
to just one characteristic curve due to the cooling circuit of the vehicle.
For the test bench, a low resistance water circuit with
5/4 inch diameter tubes and controllable valve was
built, as shown as in Figure 2. To minimize measurement errors of the differential pressure and volume
several rules of measuring hydrodynamics values have
to be considered. The diameter of the inlet and outlet pipe have to be the same size as well as changes
in diameter must not lead to angles larger than 8 deg.
At the existing water pump a rectangular inlet and an
circular outlet with different cross section surfaces require changeover solutions to standardized pipes. The
measurement of pressure and volume need defined inlet and outlet pathes for repeatable results. The water
pump delivery is measured with a magnetic inductive
flow meter for electrically conductive fluids. This kind
of flow meter for coolants causes the smallest backlash
to the system and works accurate enough in an effective range from zero to 300 lit/min.
A pressure vessel is installed to operate the water
pump with constant pressure, similar to the conditions
in the vehicle, and to prevent operating fluid cavitation
and degasifying of the media. If negative pressure occurs at the suction side of the water pump the media
starts degasifying. Therefore a pressure of about two
bar absolute was held in the system. This is equivalent to a coolant temperature of approximately 120  C
in the coolant circuit of the ICE, a typical water temperature in a modern ICE. The pressure vessel acts as
expansion tank too.
During building the test bench attention had to been

495

Modelica 2006, September 4th  5th

D. Simic, C. Kral, H. Lacher

drawn to the possibility of bleeding the system entirely. The torque was detected with a regular rotating torque sensor located between the water pump and
the electric machine. The appropriate drive for the
test bench was not to find as easy as a torque sensor. Without using a transmission, what would have
brought an additional effort, a drive with an rotational
speed spread from 84 rad/s to 733 rad/s had to be used.
A controlled, converter fed asynchronous motor drive
is operating the pump. All measurements are made
in the described arrangement and beside little adjustments due to leakage the test bench worked properly
during the whole measurement procedures.
The measurement results obtained from the test bench
deduce accurate statements about the behavior of the
water pump and the energy saving potential with an
optimized electrically operated water pump.

4

Figure 3: Modelica model of test bench

Evaluation of the water pump
model

For the evaluation of the water pump a simple circuit
is modeled. The circuit model is implementet according to the test bench. The main components of circuit
model are: the water pump, the pipeline systems and
an electric drive. The following geometrical parameters of the water pump are measured and applied to the
simulation:
r1 = 42/2 mm

Figure 4: The measured and simulated caracteristic
curves of the water pump

r2 = 62/2 mm
r3 = 51/2 mm
b1 = 9 mm
b2 = 6.6 mm
b1 = 15 deg
b2 = 50 deg
mA = 3.5 kg/s
Figure 3 shows the circuit of the test bench modeled
in Modelica. The valve creates the friction losses
in the circulation. While the water pump is driven
at constant speed, the friction losses are adjusted by
the valve. The specific speed of the water pump
equals the specific speed measured at the test bench.
The circuit is investigated for five different valve settings.
The Modelica Association

Figure 4 represents the characteristic flow and pressure diagram of the water pump. Quantity Wmspec.
represents the specific speed of the water pump, which
is measured at the test bench, Wcspec. is the specific
speeds of the water pump, which is simulated with the
Modelica model. The Dpmspec. is the specific flow resistances of the circuit, which is defined with the setting of the valve.
A comparison between the test bench and the simulation shows good coherence. It can be seen that
the measured and calculated caracteristic curves of the
water pump look alike with differences in a band of
merely a few percent. The difference between the two
caracteristic curves is very low. Figure 4 confirmens
therefore the good implementation of the water pump
model. Furthermore, the Modelica model of the water pump can be used as a verified Modelica model for
further implementations and designs of the ICE cool-

496

Modelica 2006, September 4th  5th

Optimization of a Cooling Circuit with a Parameterized Water Pump Model

Figure 5: The measured and simulated caracteristic
curves of the water pump
ing circuit.
Figure 5 represents the hydraulic power of the water pump versus flow. In this figure Wmspec. is the
measured specific speed and Wcspec. is the simulated
specific speeds of the water pump in the flow and hydraulic power diagram. The very low difference between the measured and simualted hydraulic power of
the water pump approve the good implementation of
the Modelica water pump model.

5

Cooling circuit

All components of the cooling circuit are implemented
in Modelica. Each of the implemented models of the
cooling circuit considers flow equation. The mass
flow balance of the operating fluid from the fluid inlet and the fluid outlet is defined in the equations
stated in [6]. The friction losses of the pipe components and the valves are implemented with caracteristic curves and the models are extened from Modelica.Thermal.FluidHeatFlow library. All another components of the cooling circuit are implemented as
physical models.
The cooler of the cooling citcuit is modeled by means
of discrete volume elements [7, 8]. In the cooler model
the coefficients of convection for the coolant, the air
and the steel tubes of the cooler are determined by calculation. The effect of the cooler fan was determined
by calculation of the coefficients of convection. The
discrete volumes, which flow through the cooling fan
area of the cooler have a higher coefficient of convection. In Figure 6 the temperature distribution of the
discrete cooler volumes is shown. One significant results is that the discrete volumes in the cooling fan area
The Modelica Association

Figure 6: Temperature distribution of the cooler

have a higher temperature decrease.

5.1 Electrically operated water pump
Figure 7 shows the cooling circuit with the electrically
operated water pump and cooling fan. The electric
power source of the cooling circuit is an idealzed battery model. The battery feds the pump motor,
which is controlled by a pump speed controller (PSC)
model. The PSC calculates the reference speed of
the pump motor for the actual temperature of the
ICE. The pump is driven by this pump motor. The
pipeline configuration is design according to a conventional ICE cooling circuit. The cooler fan, marked as
fan, is driven by a fan motor fed by the same electric sources than the water pump. A generator, marked
as gen., is used as electrical energy source, mechanically coupled with the ICE and electrically coupled
with the battery. The generator torque controller
(GTC) model calculates the torque state of the generator depending of the state of the charge (SOC) of the
battery. The ICE thermal model is implemented
with the caracteristic curves of the ICE. With this concept of the cooling circuit it is possible to control the
speed of the water pump independent from the speed
of the ICE. The speed of the cooling fan is constant in
this model of the cooling circuit. All electric machines
are taken from the SED library using the quasi stationary permanent magnet synchronus machine models.
The efficiency of electric machines at the nominal operating point is 0.95, and the efficiency of battery is
0.87. The efficiency of generator belt drive is taken as
the efficiency from a flat belt drive and accounts for
0.96 [9].

497

Modelica 2006, September 4th  5th

D. Simic, C. Kral, H. Lacher

Figure 7: Modelica model of cooling circuit with elec- Figure 8: Efficiency comparison of the ICE with ellectrically and mechanically operated water pump
trically operated water pump and cooling fan

5.2

Mechanically operated water pump

The mechanical model of the cooling circuit contains
the mechanically operated water pump. The major difference to the model of Figure 7 is the mechanically
operated water pump. The water pump is driven with
a belt drive from the ICE shaft. The efficiency of the
belt drive is approximately 0.96 [9].

6

operated water pump can be identified clearly. There
is an improvement of efficiency with respect to almost
the complete map of the ICE. The efficiency increase
is higher in upper speed and torque regions of the ICE.
This increase can be expected, because the nominal
operating point of the mechanically driven water pump
is designed for lower speeds of the ICE.

Cooling circuit optimization

For optimizing the cooling circuit the different concepts are simulated und compared. First, the cooling circuit with the mechanically operated water pump
is simulated and then the ellectrically operated water
pump is considered. The ICE is driven with specific
speed and torque. The speed band is used from idle
speed to upper speed limit of the ICE and the torque is
used from zero to maximal torque at according to the
actual speed of the ICE. Therewith the ICE is driven
in the entire speed and torque range of the caracteristic map. In the simulation the maximal acceptable
temperature of the ICE is used. The speed of the cooling fan for both concepts is the maximal speed of the
fan.
Figure 8 shows the different efficiency maps of the
ICE. Quantity hmech. is the efficiency of the ICE with
the mechanically operated water pump, the helec. is the
efficiency of the ICE with the electrically operated water pump and the tmax. the maximal torque of the ICE
which is depending on the ICE speed.
In Figure 8 the difference between the ICE efficiency
maps can be determinated. The increase of ICE efficiency in case of a cooling circuit with electrically
The Modelica Association

7 Conclusions
The performed simulation of cooling circuits allows
the determination of the fuel consumption as well as
a declaration of the economic saving potential of an
electrically operated water pump. The fuel and energy
consumption of an ICE can be reduced by means of an
electrically operated water pump.
The efficiency increase of the ICE was demonstrated
for stationary operation. For dynamic operation, however, a similar improvement can be expected. Using
the concept of an electrically operated water pump a
thermal shock of the ICE and the cooling circuit can
be avoided. The concept of an electrically operated
water pump increases the efficiency of a conventionally cooled ICE and makes energy saving potentials
possible this way.
The experimental verification of the water pump
model is presented. The presented model of the water pump can therefor also be applied to other thermal management models like battery cooling, fuel cell
cooling or cooling of electric machines.

498

Modelica 2006, September 4th  5th

Optimization of a Cooling Circuit with a Parameterized Water Pump Model

8

Abbreviations

ICE

internal combustion engine

SED

SmartElectricDrives

PSC

pump speed controller

GTC

generator torque controller

SOC

state of charge

References
[1] C. Kral, A. Haumer, and M. Plainer, Simulation of a thermal model of a surface cooled
squirrel cage induction machine by means of the
SimpleFlow-library, Modelica Conference, pp.
213218, 2005.
[2] W. Kalide, Energieumwandlung in Kraft und Arbeitsmaschinen, Carl Hanser, Mnchen, 6 edition,
1982.
[3] Johann Friedrich Glich,
Kreiselpumpen,
Springer Verlag Berlin Heidelberg New York
2004, Heidelberger Platz 3, 14197 Berlin, 2004.
[4] J. Fischer T. Wagner and D. Frommann, Strmungs und Kolbenmaschinen, Vieweg, Braunschweig, 3 edition, 1990.
[5] D. Simic, C. Kral, and F. Pirker, Simulation of
the cooling circuit with an electrically operated
water pump, IEEE Vehicle Power and Propulsion Conference, VPPC, 2005.
[6] I. E. Idelchik, Handbook of Hydraulic Resistance,
Begell House, 3rd edition edition, 1996.
[7] G.P. Merker and C. Eiglmeier, Fluid- und Wrmetransport  Wrmebertragung, B.G. Teubner,
Stuttgart, Leipzig, 1999.
[8] G.P. Merker and C. Baumgarten, Fluid- und
Wrmetransport  Strmungslehre, B.G. Teubner,
Stuttgart, Leipzig, Wiesbaden, 2000.
[9] F. Sass, Ch. Bouche, and A. Leitner, Dubbels
Taschenbuch fr den Maschinenbau, Teil 2, vol. 2,
Springer Verlag, Berlin, 12 edition, 1963.

The Modelica Association

499

Modelica 2006, September 4th  5th

D. Simic, C. Kral, H. Lacher

The Modelica Association

500

Modelica 2006, September 4th  5th

Using Modelica as a Design Tool for an Ejector Test Bench

Using Modelica as a Design Tool for an Ejector Test Bench
Christoph Richter, Christian Tischendorf, Ricardo Fiorenzano, Peterson Cavalcante,
Wilhelm Tegethoff, Jrgen Khler
Technical University Braunschweig, Institute for Thermodynamics
Hans-Sommer-Strae 5, 38106 Braunschweig, Germany
ch.richter@tu-bs.de

Abstract
As a result of the Kyoto Protocol, the use of R134a
in air conditioning system of new cars is going to be
forbidden in the EU due to the high Global Warming
Potential (GWP) of this substance. Carbon dioxide
(CO2) is one of the possible alternatives as a cooling
agent in mobile air conditioning applications and is
desirable since it is a natural refrigerant. Cooling
cycles using CO2 are currently achieving COP similar to those of R134a cycles but there are promising
options to further improve COP. One possibility is
the application of an ejector instead of the valve. A
Modelica library was developed that allows computation of ejector cooling cycles in steady state with
simplified component models that can be used as a
design tool for the construction of an ejector prototype. The library uses a new object-oriented library
that serves as an interface to external medium libraries to compute thermodynamic and transport properties for the refrigerant.
Keywords: Fluid properties, cooling cycle, ejector

1

Introduction

As a result of the discussion about reducing the
worldwide emission of greenhouse gases, carbon
dioxide (CO2) was re-discovered as a natural refrigerant with promising thermodynamic properties.
Among a few others, Lorentzen [1] pointed out early
that trans-critical CO2 refrigeration cycles encounter
significant throttling losses reducing their coefficient
of performance (COP). One way to overcome this
problem is to use an ejector instead of the throttling
valve. A lot of research is currently carried out in
this field [2], [3] and the obtained results are very
promising [4].
This paper describes the development of a Modelica
library that was used in the design process of a test
bench for an ejector cooling cycle and that will be
extended to allow the deeper analysis of the ejector
The Modelica Association

refrigeration process. The developed library is kept
as simple as possible. The fluid properties for CO2
are computed using a new fluid property library that
provides a convenient interface to an external library
written in C.

2

Problem description

To be able to simulate an ejector cooling cycle one
needs models for the components of the cooling cycle as well as for the fluid properties of the chosen
refrigerant. Although it would be possible to have
one library for both requirements it usually is a good
idea to have separate libraries for the components
and for fluid properties. Well-known Modelica libraries such as Modelica.Media/Modelica_Fluid and
AirConditioning Library/ThermoFluidPro follow the
same basic concept.
Before looking at libraries that are capable of modeling the given problem the most important requirements are compiled in the following list:
 The component models should be as simple
as possible for the first rough analysis during
the design process. The component models
should only require the definition of a minimal set of parameters and efficiencies because exact geometries are usually not
known in the first rough analysis.
 There are a lot of engineers that can only
spend a certain amount of their work time on
understanding Modelica libraries. The developed library should enable those users as
well as students with no or little background
in modeling to get started with developing
new models as easily as possible.
 The simple models used in the first steps of
the design process should be designed in
such way, that they can be replaced by more
detailed models in future steps when an indepth analysis of experimental results is required.

501

Modelica 2006, September 4th  5th

C.C. Richter, C. Tischendorf, R. Fiorenzano, P. Cavalcante, W. Tegethoff, J. Khler



The fluid property library should be as flexible as possible. It should be possible to use
the same fluid properties in different applications (i.e. Modelica, Matlab, LabVIEW,
CFX) and the use of the library should be as
simple and straightforward as possible.
 The fluid property library should not contain
any compiler specific elements and should
be as flexible to use as possible.
The following subsections give a brief overview over
existing libraries and point out their advantages and
drawbacks within the scope of simulating a CO2
ejector cooling cycle.
2.1

Modelica_Fluid/Modelica.Media

The Modelica_Fluid library is a free library for describing 1-dimensional thermo-fluid flow and is developed by the Modelica Association. The library is
still under development and a new beta version is
going to be presented at this conference [5]. The
Modelica_Fluid library provides models for standard
fluid components such as pipes, control valves and
pumps. There are currently no models for compressors or simple heat exchangers available. Modelica_Fluid uses fluid models from Modelica.Media
which is part of the Modelica Standard Library since
version 2.2. Modelica.Media provides medium models for ideal gases and water. Refrigerants are currently not implemented within Modelica.Media.
Modelica.Media can be extended to allow the use of
external fluid property libraries implemented in
FORTRAN or C.
2.2

AirConditioning Library/ThermoFluidPro

The AirConditioning Library is a commercial library
developed and maintained by Modelon AB [6]. This
library allows transient and steady-state simulations
of air conditioning systems at a very high model
complexity level. It is used as a development tool by
several large automotive companies. The AirConditioning Library uses ThermoFluidPro as fluid property library that is also developed and maintained by
Modelon AB. ThermoFluidPro offers high-precision
equations for the fluid properties of CO2 using the
Helmholtz equation given by Span and Wagner [7].
2.3

TIL/TILFluids

TIL (TLK-IfT-Library) is a library for simulating
refrigeration systems developed and maintained by
the Institute for Thermodynamics (IfT) at TU Braunschweig in close cooperation with TLK (TLKThermo GmbH). TIL contains models with very difThe Modelica Association

ferent levels of complexity. TIL.HVAC contains
very simple models that are used for educational and
training purposes and that are especially designed to
allow an easy access to this library for new users.
More detailed models that are used in R&D projects
are also available within TIL. TIL uses TILFluids to
compute fluid properties. TILFluids does not provide
fluid models implemented in Modelica but offers
general interfaces to employ existing external libraries written in C and FORTRAN.
2.4

Summary and Conclusion

All three libraries could be extended to allow the
computation of CO2 ejector refrigeration cycles.
Fluid properties for CO2 are readily available in the
ThermoFluidPro library and in TILFluids.
The main drawback of Modelica_Fluid was its development status when starting this project. Another
drawback is the lack of simple standard components
(i.e. compressors, simple gas coolers) that are needed
to build up a cooling cycle. Many of the models are
already too complex for the given application. Modelica_Fluid is furthermore taking into account advanced flow situations such flow reversal which are
not required within the scope of this work.
The models from the AirConditioning Library are
very detailed due to the intended field of application
for that library. They seem to be too detailed for a
rough analysis during the design process of a test
bench. ThermoFluidPro is a very advanced and powerful fluid property library completely implemented
in Modelica. It is an extension of the free Modelica.Media library and offers a variety of different
models including models for pure refrigerants, binary mixtures, pseudo-pure fluids, and water.
TIL offers very simple as well as advanced models
for components used in air conditioning systems.
The simple models in TIL.HVAC are especially suitable for projects that involve students having limited
or no previous experiences with Modelica.
It was therefore decided to use TIL and to implement
a simple ejector model within the framework
TIL.HVAC, the part of TIL that is used for educational purposes. The fluid property library TILFluids
was considerably improved during this project and
offers a very user-friendly object-oriented approach
for fluid properties.
Developing libraries that are easy to understand and
simple in their basic concept seems to be a very important task. A lot of the available libraries seem to
be unnecessary complicated which makes it hard for
new users to get started with Modelica. We experienced this problem with students that were asked to

502

Modelica 2006, September 4th  5th

Using Modelica as a Design Tool for an Ejector Test Bench

work with Modelica.Media and Modelica_Fluid.
They had quite some difficulties to get started with
those libraries. The same thing seems to happen with
commercial partners where an engineer is asked to
start modeling using one of these libraries. It is very
common that engineers can only dedicate a small
percentage of the work time to this task which makes
it very hard to get started.
Concerning the Fluid-Properties it seems to be important that companies can reuse their code that they
are already employing in other problems. These are
usually FORTRAN or C libraries that they might
have developed over decades. Now start looking at
Modelica.Media to figure out how to implement
something like an external interface for a two-phase
medium. You would probably start with inheriting
from PartialTwoPhaseMedium in which case one is
focusing an inheritance structure that is 4 levels
deep. This is not really human-readable and far from
being easy to understand. One would also probably
have a closer look at the implemented water model
implementing the IF97 standard. The problem with
this model is that it actually incorporates late inlining
and a hidden property record to improve performance significantly when using Dymola. The structure
of this two-phase library is not easy to understand for
new users.

3

TIL.HVAC

TIL.HVAC is the part of TIL that contains simple
models for each component of a refrigeration cycle.
The following section gives a brief overview over
the most important components.
3.1

Compressor

The simple compressor model uses
constant volumetric, isentropic and
energetic efficiencies to describe the
change of state, the mass-flow rate and
the energy consumption. It also allows setting the
rotational speed using a standard RealInput.
3.2

Gas cooler

The gas cooler model assumes that the
pressure drop within the gas cooler is
negligible. It uses a static mass balance
and a static momentum balance and
allows the user to set an adiabatic efficiency. This
model takes the ambient temperature as an input.

The Modelica Association

3.3

Evaporator
The evaporator model is quite similar to
the gas cooler model. It also assumes
negligible pressure drop and static mass
and momentum balances.

3.4

Valve
The valve model assumes an isenthalpic
throttling process. The effective flow
area can be specified using the RealInput
interface.

3.5

Separator

The separator model assumes that the
separation process works ideal yielding
saturated liquid at the liquid outlet and
saturated vapor at the vapor outlet. The
pressure drop is neglected which might not be realistic.
3.6

phDiagram

The phDiagram is a sensor that can be
used to record pressure and specific enthalpy anywhere in the cycle. It allows
for simple post processing using
phMonitor, a program developed at the IfT in cooperation with TLK, to visualize the results in a phdiagram.
3.7

Ejector

The ejector model is based on a very
simple model initially developed by
Kornhauser [8]. It is composed of two
nozzles, a mixing section and a
diffuser. The main purpose of the ejector is to
recover some of the kinetic energy otherwise
converted into friction and lost during the throttling
process. The refrigerant is entering the primary
(motive) nozzle at high pressure and is accelerated.
The high velocity stream leaving the primary nozzle
is used to entrain refrigerant from the secondary
(suction) nozzle. Both streams are mixed in the
mixing section. The diffuser is used to convert parts
of the remaining kinetic energy of the mixed stream
into a pressure increase that helps to improve the
overall performance of the cycle.
The following assumptions were made for the ejector model. The analysis is one-dimensional and the
refrigerant is in thermodynamic-equilibrium at all
times. Those first two assumptions correspond to

503

Modelica 2006, September 4th  5th

C.C. Richter, C. Tischendorf, R. Fiorenzano, P. Cavalcante, W. Tegethoff, J. Khler

what is called homogeneous equilibrium model in
two-phase flow. It is furthermore assumed that the
deviations from adiabatic reversible processes that
occur in the nozzles and the diffuser can be expressed in terms of efficiencies. Any shock effects
that might occur are included in these efficiencies.
The kinetic energy was considered to be significant
only within the ejector not within the rest of the cycle.
Some of these assumptions will have to be reconsidered for a more detailed analysis. One of the main
problems of the implemented model is the missing
relationship between mass flow rate and pressure
drop for the nozzles which requires the explicit
specification of at least one pressure level (i.e. the
mixing pressure). Other models such as the one developed by Groll [2] suffer from the same problems.
Experimental analysis of the ejector refrigeration
cycle which is currently performed at the IfT might
overcome this drawback.
Figure 2 shows the internal structure of the developed ejector model.

Figure 2: Internal structure of the ejector model.

4

The provided fluid
objects such as Refrigerant and Gas
are ready-to-use implementations of medium models that can
be used in a wide
range of applications.
They can also be
changed or extended
by developers to best
meet their own requirements.
Figure 3 shows an example for a simple reFigure 1: Structure of
frigerant model. The
TILFluids
unqualified
import
statement ensures that the internal functions required
for computing the fluid properties (i.e. pressure_dT()) are available within the model MyRefrigerant. The refrigerantName is a character
string with a couple of predefined choices specified
in TILFluids.Common. The uniqueID is an integer
that uniquely identifies each instance of MyRefrigerant. All functions in the external library require
the uniqueID as an input. The external library creates a map of refrigerants and stores information
about the refrigerant and the results from the last
computation within this map. This allow for an optimization regarding the computational time requirements. The library can be designed in such a
way that it returns the values computed at the last
call for each refrigerant if the inputs did not change.
This is very important especially in the case when an
inverse iteration is required for the computation.

TILFluids

TILFluids is an object-oriented fluid property library. The main design goal when developing this
library was to create a simple interface that can easily be extended by users to fit their individual needs.
Figure 1 shows the general structure of the library.
The package Common contains common elements
such as types and records that are used throughout
the library. The package Icons contains the library
icon. The package Internal is the core of the library
and contains all functions that are needed to access
the external library. The contained functions are not
used directly in the component model but rather accessed using a fluid object such as Gas, Liquid or
Refrigerant.
The Modelica Association

Figure 3: Code example for a simple refrigerant model that uses function calls to an external library to
compute fluid properties

504

Modelica 2006, September 4th  5th

Using Modelica as a Design Tool for an Ejector Test Bench

The above example is instantiated in the component
model and contains all required fluid properties. Actual refrigerant models will contain more thermodynamic and transport properties than the simple
MyRefrigerant from example above. Figure 4:
Code example for a simple component model to
demonstrate the use of the fluid object.Figure 4
shows a simple component model with an instantiated refrigerant model. Density and temperature are
specified for myRefrigerant and the pressure and
specific enthalpy are computed within MyRefrigerant and are attributes of myRefrigerant. The object-oriented approach used in TILFluids was found
to be very user-friendly and allows for a clear separation of component and fluid model. The TILFluids
Users Guide [11] offers more detailed information
on using and extending TILFluids.
There are situations where a functional approach
might be handier than the object-oriented approach
used in TILFluids. TILFluids therefore provides
functional interfaces that can be called without instantiating a medium. The functional interfaces are
contained in TILFluids.FunctionalInterfaces. However the user should be aware of certain limitations
that apply to the functional interfaces (see [11] for
more details).

The interface to a C library of fluid property data
developed at IfT is available for free, the Refprop
interface upon request. Additional interfaces can be
implemented if required.
One of the advantages of having medium models
implemented in Modelica is that the simulation software can take full advantage of the entire equation. It
can use this information to compute analytical Jacobians or to perform index reduction. Using an external library might require the explicit definition of
derivative functions using annotations. This is currently not implemented in TILFluids but can be
added at a later time. It is however very often possible and desirable to formulate the problem in such a
way that no index reduction is required to solve it.
The Bridgman tables [12] can be used in many thermodynamic problems to accomplish this task.

5

Example

The main goal when developing the presented libraries was to perform preliminary computations for an
ejector cooling cycle. A comparison of a conventional cooling cycle and an ejector refrigeration cooling cycle was carried out in a first step to demonstrate the theoretically achievable COP improvements. In a second step a certain design point was
chosen for the test bench and all required geometrical parameters were computed (see [13] for more
details).

Figure 4: Code example for a simple component
model to demonstrate the use of the fluid object.
The current external library that is used with TILFluids provides interfaces to two different libraries. The
first interface uses the fluid properties used in a platform for steady-state computation of cooling cycles
that was developed at IfT in the past [9]. The second
interface calls the current beta version of Refprop
(for details see [10]) to obtain fluid properties. An
additional interface to a library that implements the
IF97 standard for water is currently under development. The TILFluids users manual offers more detailed information on how to use TILFluids [11].

The Modelica Association

Figure 5: Schematic diagram of a standard cooling
cycle (the extra component behind the receiver
breaks the algebraic loop for the mass flow rate)
An ejector refrigeration cycle is compared to a standard trans-critical CO2 cooling cycle to determine
the possible gain in COP for the ejector cycle. The
COP is defined as

505

COP =

Qevap
W p ,el

Modelica 2006, September 4th  5th

C.C. Richter, C. Tischendorf, R. Fiorenzano, P. Cavalcante, W. Tegethoff, J. Khler

COP computations were carried out for ambient
temperatures from 26C to 40C and compressor
outlet pressures from 86 bar to 120 bar. The COP for
each ambient temperature that yielded the best COP
was chosen for the comparison of the two cycles.
1,70
1,65

COP Comparison

where Qevap is the evaporator refrigeration capacity
and Wp, el is the electrical power consumption of the
compressor. Figure 5 shows the standard cooling
cycle and Figure 6 the ejector cooling cycle.
The same conditions were applied to both cycles.
The simple compressor model assumes a volumetric
efficiency of 70% and an isentropic efficiency of
70%. The displacement was set to 30 cm and the
speed to 20 Hz. The evaporation temperature was set
to 0C and the gas cooler was assumed to work with
100% efficiency, this means that the CO2 outlet can
be cooled to ambient temperature.
For the one stage CO2 cycle, the throttling valve was
assumed to operate isenthalpic. The opening area of
the valve was varied to achieve maximal COP.

1,60
1,55
1,50
1,45
1,40
1,35
22

27

32

37

42

47

52

Ambient Temperature [C]
Figure 7: Comparison of COP of the conventional
and the ejector cooling cycle.

Normalized Cooling Capacity

Figure 7 shows a comparison of the COP of the two
cycles. The performance of the ideal ejector cycle is
clearly better than the performance of the conventional cycle for all operating conditions. However,
one should keep in mind that ideal working conditions were assumed and that Figure 7 does not represent the expected improvement in COP for a real
cycle. However, it shows the potential of the ejector
cooling cycle.

Figure 6: Schematic diagram of ejector cooling cycle
In the ejector cycle, the ejector efficiencies were set
to 100% for the first cycle computations to estimate
the maximum COP improvements for the ejector
cycle compared with a conventional cycle. That
means, that all three nozzles are working isentropic
and that the mixing occurs without any losses. However, this will not be the case for the real ejector. Experimental results from [2], [3] show, that there are
significant losses especially in the suction nozzle and
during the mixing process. The mixing pressure for
the ejector cycle was set to 32 bar. Computations to
determine the effects of the mixing pressure on cycle
efficiency and to determine the optimal mixing pressure are currently carried out at the IfT.

The Modelica Association

1,4
Conventional Cycle
Ejector Cycle

1,3
1,2
1,1
1
0,9
0,8
22

26

30

34

38

42

46

50

Temperature Ambient [C]

Figure 8: Comparison of normalized cooling capacity of the conventional and the ejector cooling cycle
Figure 8 shows a comparison of the normalized
cooling power of a conventional and an ejector
cooling cycle for different ambient temperatures.

506

Modelica 2006, September 4th  5th

Using Modelica as a Design Tool for an Ejector Test Bench

putations were used to set up a test bench for ejector
cooling cycles at the IfT.
Transient models for the cooling cycle components
and for the ejector are currently developed to allow a
detailed analysis of the cooling cycles. The library is
also extended to allow an exergy analysis based on
the second law of thermodynamics. The results from
the designed test bench will be used to further improve the existing models.

The cooling power of the conventional refrigeration
cycle is declining drastically for high ambient temperatures due to the raising losses in the throttling
process. The ejector cooling cycle can regain some
of this otherwise dissipated energy.
The analyzed ejector cycle does not use an internal
heat exchanger which might actually improve the
performance in some regions. An analysis of the
effect of using an internal heat exchanger will be
investigated in detail in the future.
Using the same analysis it could be shown that the
ejector efficiencies have to be better than 70% to
achieve a better overall performance than for the
conventional cooling cycle.
One design point for a heat pump application was
chosen for the test bench and all geometric parameters have been computed for that design point. The
gas cooler outlet temperature was assumed to be 20
 25C with a gas cooler outlet pressure of 95 bar.
The gas cooler power was set to 4  5 kW and the
evaporator pressure to 37  40 bar. A driving mass
flow rate of approximately 0.02 kg/s is required to
obtain the designated heating power. The ejector
geometry was determined using the results from the
cycle analysis for this operating point.

References
[1]

[2]

[3]

[4]

[5]

Figure 9: Cross-sectional view of the designed ejector
[6]
Figure 9 shows the designed ejector in a crosssectional view. The prototype is currently tested at
IfT. The experimental results will be used to further
improve the ejector model.

6

[7]

Conclusion and future perspective

[8]

An existing simple library with standard elements to
compute a cooling cycle has been extended to allow
the steady-state computation of ejector cooling cycles. A new fluid property library for Modelica has
been developed that is easy to use and that offers the
possibility to use existing external libraries to compute fluid properties. The results from the first comThe Modelica Association

507

[9]

Lorentzen G., 1983, Throttling  the Internal
Haemorrhage of the Refrigeration Process,
Proc. Inst. Refrig., Vol. 80:39-47.
Li D. and Groll E.A., 2006, Analysis of an
Ejector Expansion Device in a transcritical
CO2 Air Conditioning System, Proc. 7th IIR
Gustav Lorentzen Conference on Natural
Working Fluids, Trondheim, Norway.
Elbel S. and Hrnjak P., 2006, Experimental
Validation and Design Study of a Transcritical CO2 Prototype Ejector System, Proc. 7th
IIR Gustav Lorentzen Conference on Natural
Working Fluids, Trondheim, Norway.
Ozaki Y., Takeuchi H. and Hirata, 2004, Regeneration of Expansion Energy by Ejector
in CO2 Cycle, Proc. 6th IIR Gustav Lorentzen
Conference on Natural Working Fluids,
Glasgow, UK.
Casella F., Otter M., Proel K., Richter C.,
Tummescheit H., 2006, The Modelica Fluid
and Media library for modeling of incompressible and compressible thermo-fluid pipe
networks, Proc. 5th International Modelica
Conference, Vienna, Austria.
Modelon AB, http://www.modelon.se, Sweden
Span, R., Wagner, W. 1996, A New Equation
of State for Carbon Dioxide Covering the
Fluid Region from the Triple-Point Temperature to 1100 K at Pressures up to 800 MPa,
Journal of Physical and Chemical Reference
Data, 25/6: 1509-1596.
Kornhauser A., 1990, The Use of an Ejector
as an Refrigerant Expander, USNC/IIR Purdue Refrigeration Conference, Purdue, Indiana
Tegethoff W., 1999, Eine objektorientierte
Simulationsplattform fr Klte-, Klima- und
Wrmepumpensysteme, Diss. TU Braunschweig, Germany
Modelica 2006, September 4th  5th

C.C. Richter, C. Tischendorf, R. Fiorenzano, P. Cavalcante, W. Tegethoff, J. Khler

[10] Lemmon E.W., McLinden M.O., Huber
M.L., 2002, NIST Reference Fluid Thermodynamic and Transport Properties 
REFPROP, Version 7.0, Users Guide
[11] Richter C.C., Cavalcante P., Tegethoff W.,
2006, TILFluids  Users Manual, Version
0.9
[12] Bejan A., 1988, Advanced Engineering Thermodynamics, Wiley-Interscience
[13] Tischendorf, C., 2006, Aufbau eines Prfstandes fr Ejektoren und EjektorKltekreislufe, TU Braunschweig, Diplomarbeit

The Modelica Association

508

Modelica 2006, September 4th  5th

Modeling of Frost Growth on Heat Exchanger Surfaces

Modeling of Frost Growth on Heat Exchanger Surfaces
Katrin Prolss, Gerhard Schmitz
Hamburg University of Technology, Applied Thermodynamics Group
Denickestr. 17, 21075 Hamburg

Abstract
A Modelica model to study the frost growth on parallel heat exchanger plates is developed. The coupled
heat and mass transport phenomena involved in the
process are described. A physical model which includes the distributed densification of the frost layer
is compared to a simple lumped model approach. The
frost structure and thus the resulting properties such as
density and thermal conductivity are found to have a
strong influence on the model results. Empirical correlations for properties and transport coefficients are
used in both models. The model describing the airflow is taken from the Modelica Fluid library and extended to handle condensation and freezing of water
vapor. The Modelica.Media library provides the moist
air property model.

1

given initial frost conditions. Over the past decades
several attempts have been made to develop physical
models of the transport phenomena which govern the
general formation of a frost layer. In 1974 Sanders [4]
already proposed a system of partial differential equations describing the coupled heat and mass transport
processes in his detailed study on frost structure and
provided several simplified approaches. Le Gall et al.
[5] and Tao et al. [6] developed more detailed models and focused on the diffusion process of water vapor through the porous medium. But due to the complex structure and variety of ice crystal formation an
entirely physical approach is hardly possible and the
quality of the model still relies on some empirical correlations.
The transport phenomena involved in the frost formation process are sketched in figure 1. Warm moist air

Introduction

Frost formation on heat exchanger surfaces in air cooling applications always occurs when the coil surface
temperature drops below the freezing point of water
and the dew point temperature of the air in contact
with the cold surface. The main problems associated
with frost growth are the decline in heat exchanger efficiency resulting from an insulating effect of the frost
layer and the rising pressure drop due to a decreasing hydraulic diameter of the flow channel, which in
return increases the energy consumption of the fan.
Usually a system operating under frosting conditions
needs a defrost from time to time. In order to estimate
the allowable frost growth period and the energy required to melt down the frost layer, its stored amount
of frozen water, thickness and thermal behavior have
to be known. Several studies exist which try to formulate empirical approaches to predict the behavior of
certain types of heat exchangers and surfaces, see e.g.
[1], [2]. Hoffenbecker et al. [3] investigated defrost
cycles with fin-and-tube heat exchangers and developed a numerical model describing the process with
The Modelica Association

Figure 1: Transport phenomena in a porous frost layer
passes a cold surface with a temperature below the
freezing point of water and the dew point of the air.
Heat transfer by forced convection occurs from the
bulk flow to the cryosurface, driven by a temperature
gradient. A concentration gradient causes a water vapor flux from the bulk flow to the frost surface where
part of it freezes and adds to an increase of the layer
while releasing latent heat. Part of the water vapor dif-

509

Modelica 2006, September 4th  5th

K. Proelss, G. Schmitz

fuses into the frost layer leading to a densification of
the structure. The sum of sensible and latent heat is
transported to the cold wall interface by thermal conduction.

2

Modeling the frost formation process

2.1

Frost formation types

2.2

Energy and mass balances

variations of moist air and ice properties are neglected,
the total gas phase pressure is constant throughout the
porous medium, radiation effects are neglected and
thermodynamic equilibrium prevails between ice and
air in the pores.
The water mass balance over the ice phase of the frost
layer can be written as the change of accumulated ice
and water vapor equal to the spatial change of the diffusive vapor transport rate [5].

(ra ea ) (rv,sat eb )
mv
+
=
(1)
During the process of frost deposition on a cold surt
t
x
face several stages of frost formation may be distinguished. Hayashi et al. [7] found three periods de- where mv is the water vapor mass flow per unit area
and ra is the density of ice. The moist air in the frost
scribing the formation of a frost layer:
pores is always assumed to be saturated with vapor,
 the crystal growth period
the vapor density rv,sat in the gas phase is therefore
determined by the local temperature applying the ideal
 the frost layer growth period
gas law and the saturation pressure curve of water. ea
and eb are the ice and moist air volume fractions, re the frost layer full growth period
spectively. The driving potential for the diffusive waThe first corresponds to the first formation of ice crys- ter transport is the gradient of vapor partial pressure in
tals on the cryosurface, which basically form paral- the gas phase pv , the resulting vapor flux for molecular
lel columns or needles growing in one dimension. In diffusion is then obtained from [8]
the frost layer growth period they start interbranching
Deff pv
which leads to a meshed more uniform frost layer. The
(2)
mv = 
R
v T x
surface temperature of the frost gradually increases
with increased frost thickness due to a rising ther- with D as the effective coefficient of diffusion and
eff
mal resistance. When the triple point temperature is R as the ideal gas constant of water, T is the local
v
reached the frost surface begins to melt, water soaks temperature.
into the frost and decreases its thermal resistance, Equation 1 may then be transformed into
which again leads to additional frost deposition and
under continuous melting and freezing eventually to a
 rv,sat
T
 ea
(1  ea )
+ (ra  rv,sat )
dense and tight layer. This stage is referred to as the
T
t
t


full growth period. In the following model only the
 Deff pv
=
.
(3)
frost layer growth period will be considered.
x Rv T x
Hayashi et al. classified four types of frost crystal
structure with respect to the cryosurface temperature The energy balance over the frost element is


and the water concentration difference between bulk
uf

T
mv
flow and surface. Generally, higher cryosurface tem=
lf

Dhsv
(4)
t
x
x
x
peratures and lower concentration gradients lead to
denser and more homogeneous frost layers. In the The first term on the right handside of equation 4 corsame study the frost type was found to have a strong responds to the conductive heat flow, the second repinfluence on frost properties like density and thermal resents the enthalpy tranport associated with the difconductivity.
fusive vapor flux with Dhsv as the heat of fusion. The
frost energy per unit volume u is given by
Heat and mass transport through the ice layer are considered one-dimensional, because a prevailing temperature gradient and a frost dimension very small compared to the other two is assumed perpendicular to wall
and air flow. Further assumptions are that temperature
The Modelica Association

uf = cf rf T + (1  ea ) rv,sat Dhsv

(5)

where cf is the specific heat capacity of frost, rf is the
frost density and T is the local temperature.
A simplifying assumption to the problem is the neglection of water vapor diffusing into the frost layer. The

510

Modelica 2006, September 4th  5th

Modeling of Frost Growth on Heat Exchanger Surfaces

If a simplified model is used that does not account for
water diffusion into the frost, mv,s is set to zero and
the entire water mass flow towards the frost surface
is assumed to contribute to the increase of frost layer
height.
Empirical correlations are used to determine the trans2.3 Boundary conditions
port coefficients. In the literature the Chilton-Colburn
analogy between heat and mass transfer seems to be
2.3.1 Wall
widely accepted also under frosting conditions [2]
The boundary conditions at the wall side of the frost [11]. It relates the mass transfer coefficient b to the
layer are:
heat transfer coefficient a using the Lewis number Le:
T (x = xw ) = Tw
a
b =
Le2/3
(15)
mv (x = xw ) = 0 .
(7)
c p ra
energy balance then reduces to the basic formulation
of unsteady heat conduction [8].


(rf cf T )

T
=
lf
(6)
t
x
x

The index w denotes the position at the wall interface, ra ist the moist air density and c p is the specific heat
mv is the water vapor flux.
capacity. According to [2] the heat transfer coefficients are normally higher under frosting conditions
compared to a smooth surface due to an increased sur2.3.2 Airside heat and mass transfer
face roughness. However, it is unclear if the reduction
The heat transferred from the airflow to the frost surof the hydraulic diameter also adds to this reported inface is expressed as the sum of sensible and latent heat
crease. The following correlation suggested by [2] for
flows.
air flow between parallel plates for Reynolds number
Ts
(8) ranging from 6000 to 50000 was used:
qsens + qlat = lf (xs )
x
Nuf = 0.034 Re0.8
(16)
Ts
a(Tb  Ts ) + Dhsv (mt  mv,s ) = lf (xs )
(9)
x
where the Reynolds number is based on the hydraulic
where a is the coefficient of heat transfer, Tb is the diameter of the parallel plate channel.
bulk air temperature and the index s denotes surface
properties. mt and mv,s are the total vapor flux from
2.4 Frost properties
the air to the frost layer and the vapor flux into the frost
layer, respectively. They may be determined from
As described above the prediction of frost layer thick

ness and its thermal behavior largely depends on frost
pv,s
Deff
(10) properties such as density, thermal conductivity and
mv,s = mv (x = xs ) =
Rv T s x
the effective diffusion coefficient of water vapor in
mt = ra b(Xb  Xs )
(11) the air filled porous medium. The diversity of poswhere b is the mass transfer coefficient in m/s and sible frost structures as indicated in section 2.1 clearly
X is the absolute humidity in in the bulk flow and at shows that an accurate determination of those properthe frost surface, respectively and ra is the air density. ties for a wide range of operating conditions and heat
Substracting the two fluxes yields the frost deposition exchanger types may be a difficult task. The wide
range of empirical correlations and theoretical models
rate at the frost surface.
that have been established sometimes are mostly apxs
rf,s
= mt  mv,s
(12) plicable only in a very limited operating range. A litt
erature review of empirical correlations for frost propThe surface density may be calculated from an empir- erties and frost layer thickness can be found e.g. in
ical correlation by Hayashi et al. [9]
[2].
rf,s = 650 e0.227(Ts 273.15)

(13)

2.4.1 Thermal conductivity
where Ts is the surface temperature in K. In [6] a zero
gradient for the ice volume fraction is assumed at the The significant thermal resistance added to the heat exchanger wall by the growing frost layer results from
surface.
the rather low thermal conductivity of the ice-air comea,s
= 0;
(14) posite. The air in the pores largely contributes to the
x
The Modelica Association

511

Modelica 2006, September 4th  5th

K. Proelss, G. Schmitz

lf = 0.02442 + 7.214  104 rf + 1.1797  106 r2f . (17)
Another correlation suggested by [2] is
lf = 1.202  103 r0.963
f

2

Thermal conductivity l, W/mK

insulating effect. Also the structure and orientation of
the ice crystals influence the material property. There
is an agreement in the literature that thermal conductivity is a strong function of frost density with only a
weak dependence on temperature. An empirical correlation based on the frost layer density from [10] is
used for the proposed models:

(18)

More theoretical approaches take into account the
(generally assumed) frost structure and sometimes
even the surface roughness as in [11]. All correlations are found between the two ideal assumptions of
ice crystals parallel and perpendicular to the prevailing
direction of heat transport. The first orientation corresponds to thermal resistances in series, the second to a
parallel arrangement. Their conductivities can be obtained as follows
1/lper = (1  ea )/la + ea /la (perpendicular)
lpar = (1  ea )la + ea la (parallel)

1.5

1

0.5

0
0

100

200

300

400

500

600

700

800

Density r, kg/m3

Figure 2: Thermal conductivity vs. frost density for
the empirical correlation by Yonko et al. (17), the correlation by Sanders (18) as well as perpendicular and
parallel ice crystal orientation, respectively.
If the frost layer is assumed to have a uniform density over the entire frost height and equation 6 is used,
the average frost density rf is computed from a mass
balance over the total frost layer,
(rf df )
t

(19)
where la and la are the thermal conductivities of air
and ice, respectively. A comparison of this approach
with eq. (17) and (18) is given in figure 2. It shows that
the presented empirical correlations are found within
the two ideal structure models, but still reveal significant deviations in one to another. It is expected that
differences in frost structure which cannot be related
to density or ice volume fraction alone that are caused
by variable frost growth conditions and aging effects
also play an important role.

Yonko et al.
Parallel crystals
Perpendicular crystals
Sanders

= mt

(23)

with mt from eq. (10) and the frost thickness df .
2.4.3

Coefficient of diffusion

Following from (10) the frost density largely depends
on the water vapor that diffuses into the frost layer.
The effective diffusion coefficient Deff in (3) accounts
for several complex mechanisms. Those involve besides molecular diffusion the tortuosity of the porous
frost structure, the variation of pore diameters, phase
transitions and others. The effective diffusion coeffi2.4.2 Density and specific heat capacity
cient may be expressed in terms of the binary diffusion
The way to determine the frost density depends on the coefficient D
AB
assumptions made for the vapor transport in section
2.2. If equation 1 is used, the density distribution in
Deff = DAB
(24)
the frost layer can be determined from the ice volume
fraction ea
Several works focus on the determination of the  factor with significantly different results. The first models
rf = ea ra + (1  ea )(ra + rv )
(20)
dealing with effective diffusion factors for frost always
 ea ra
(21) assumed lower values than those for molecular diffuThe volumetric heat capacity may be computed in a sion ( 1), others including Tao et al. in [6] report
similar way and with neglection of the gas phase im- values several times larger. Le Gall et al. propose a
correlation that combines both approaches and try to
pact reduces to:
determine the factor F in the following equation emrf cf  ea ra ca
(22) pirically with respect to selected boundary conditions
The Modelica Association

512

Modelica 2006, September 4th  5th

Modeling of Frost Growth on Heat Exchanger Surfaces

mass balances contain source (or sink) terms which
can be used to include heat and massflow across the
1  ea
10
 =
+ 10 F ea (1  ea )
(25) volume boundaries. Those heat and mass flow rates
1  0.58 ea
are determined in a replaceable subcomponent heat
F will also be treated as a constant parameter input which is added to the extended air model. The total
to (25) in the distributed model and discussed further volume and hydraulic diameter depend on the internal dimensions of the flow channel, which may change
below.
with an increasing frost layer.

[5].

3

Implementation of the model in 3.2 Wall and frost model
Modelica
3.2.1

Implemented frost models

A Modelica model is developed to investigate the imThree frost models are implemented in Modelica repact of frost growth on parallel plates passed by a
flecting different levels of detail.
moist airflow. A model structure that allows a flexible and easy change of the level of detail and used
I Distributed frost densities (ice volume fractions),
correlations is aimed for.
diffusive vapor transport into frost. Balance
The transport phenomena involved can be divided into
equations (3) and (4), boundary conditions (7) groups with respect to their location in the combined
(12,(14) and property calculations (19), (23), (24)
problem.
and (25) are used.
 heat and mass transport by forced convection spatial resolution in air flow direction required
 heat and mass transport through thermal and concentration boundary layers - transport phenomena
are lumped by using transport coefficients from
empirical correlations
 conductive heat and diffusive mass transport
through the frost layer - spatial resolution perpendicular to airflow direction required

II Frost density changes only due to temperature dependent surface density during frost deposition.
Water vapor diffusion in the frost layer is neglected. Balance equations (6) and (23), boundary conditions (7) - (13) and property correlation
(17) are used.
III Steady state heat transport. The same equations
as in model II are used, the energy storage term
in eqn. (6) is set to zero.

 conductive heat transport through the solid wall 3.2.2 Spatial resolution of transport equations
- spatial resolution perpendicular to airflow reThe spatial resolution of the partial differential equaquired
tions of heat and mass transport are implemented in
The first two are combined in an air flow model partly model I applying a finite volume method [12] for a
taken from the Modelica Fluid library, frost layer and flat plate geometry. The number of nodes is kept
wall are combined in a second component for the rea- constant throughout the computational procedure, the
moving grid therefore requires the inclusion of consons specified further below.
vective terms in the heat and mass balances which are
experessed using an upwind scheme. A spatial dis3.1 Airflow model
cretization of 10 segments seems to give a satisfactory
The model that describes the moist airflow in a a accuracy and was used in all results presented further
channel formed by two flat plates is extended from below. The frost properties on the right hand side of
the base class PartialDistributedFlow in the equations (4) and (3) representing the inverse of the
Modelica Fluid library. Conservation of energy, to- transport resistances are then defined at the boundary
tal mass, substance mass and momentum as well as of two neighboring finite volumes. In case they are not
flow reversal are handled in this model applying a one- constant in the spatial domain, they are determined usdimensional finite volume approach with upwind dis- ing the harmonic mean of the terms computed for the
cretization. The medium model for moist air was taken two neighboring cells. This corresponds to finite resisfrom the Modelica.Media library. The energy and tances connected in series.
The Modelica Association

513

Modelica 2006, September 4th  5th

K. Proelss, G. Schmitz

The frost layer model versions I-III are organized as
replaceable components in the combined aiflow/wall
model. They extend from a base class which contains
the parts all versions have in common, like e.g. the interface and some boundary conditions. All frost property correlations are written as functions.

Combining wall and frost layer in one component is
advantageous if the model should also be capable of
simulating situations, when no frost layer is present
due to a surface temperature higher than the triple or
the dew point. In this case the proposed equation system would become singular. Including the thermal resistance of the frost in the energy balance of the first
wall element until a certain frost thickness is reached
makes it possible to determine the onset of frost formation by boundary conditions. The internal temperatures are set to constant during this period and are
reinitialized using the reinit operator as soon as a
threshold value for the frost layer thickness is reached.
A linear distribution of the difference between wall
and surface temperatures is used as start values. This
approach simply neglects the energy storage capacity
of the frost layer in the initial growth period. The frost
porosity also remains constant during this time. The
intial frost density is assumed to be rf,0 = 25 kg/m3 as
suggested by [5].
Both, wall and frost layer are also discretized in air
flow direction without any interdependence of neighboring cells in this dimension.

4.1 Lumped frost layer model
Figure 3 shows the average values for frost thickness,
frost density and surface temperature with respect to
time and different air inlet velocities for model I. A
discretization of 8 segments was chosen for the airflow dimension. If the timescale of frost growth is
of primary interest the steady state model (model III)
gives results similar to model II and even on a shorter
timescale the heat capacity of the frost layer may be
negligible. However, introducing additional numerical
states may be advantageous in a more complex application to break down systems of nonlinear equations.

6

SI.HeatFlowRate Q flow "Sensible heat
flow";
SI.Temperature T "Surface temperature";
SI.MassFlowRate m flow "Water mass flow
rate (condensing or freezing)";
SI.MassFraction xs "Saturated absolute
humidity at surface";
SI.EnthalpyFlowRate H flow "Latent heat
flow rate";
SI.SpecificEnthalpy h gas "Specific
enthalpy of vapor in bulk flow";
SI.Velocity xf flow "Frost layer growth
rate";
SI.Length x f "Frost layer thickness";
end FrostPort;

The Modelica Association

f

2

0

50

100

150

200

250

300

0

50

100

150

200

250

300

3

600

400

200

0
275

270

s

connector FrostPort

4

0

T,K

When the surface temperature is above the triple
point and below the dew point of the air flow, water
condenses at the cold surface and is assumed to
leave the system immediately. The liquid water
volume is therefore not considered. The model does
not include situations of water condensation on a
present frost surface. The liquid would soak into the
porous medium, its distribution would be very hard
to predict. The connector variables required to combine the two components, airflow and frosted wall, are:

d , mm

Air - frost/wall interface

rf, kg/m

3.3

4 Results and Discussion

265

c =1 m/s

c = 3 m/s

air

260

0

50

air

100

150

200

c = 6 m/s
air

250

300

t, min

Figure 3: Frost thickness df , mean frost density rf and
surface temperature Ts at different air inlet velocities.
Tb =293K, Achannel,0 = 40cm2 , Tw =263K, jair =42 %.
An increasing air flow rate leads to a higher frost deposition rate due to an increased heat and mass transfer. This creates a higher thermal resistance leading
to a greater surface temperature. At the same time the
density of the frost layer increases with a rising sur514

Modelica 2006, September 4th  5th

Modeling of Frost Growth on Heat Exchanger Surfaces

face temperature according to the used correlation for
the surface density (eq. 13) which in turn reduces the
thermal resistance of the total frost layer. The total
thermal resistance responsible for the thermal behavior of the frosted heat exchanger surface is therefore a
result of the counteracting effects of densification and
frost growth.
F = 2

F=1

F=6

emp. corr.

T s in K

275

270

265

f in kg/m3

260
0
200

20

40

60

80

100

120

140

4.3 Model comparison

150

100

50

0

f in mm

4

0

20

40

60

80

100

120

140

0

20

40

60

80

100

120

140

3

2

1

0

t in min

Figure 4: Surface temperature Ts , frost density rf and
frost layer thickness df at a distance of y = 0.5 m from
the leading edge over time with the diffusion enhancement factor F as a parameter. Boundary conditions:
vair = 2.5 m/s, Tair = 283K, Tw = 263K, X = 0.006
kg/kg.

4.2

used in this work to adapt the diffusion enhancement
factor F in (25). Figure 4 presents simulation results
from the distributed model for different values of F.
It can be seen that frost growth and density development are strongly influenced by its value. Unfortunately Mao et al. did not measure the frost surface
temperature, but assumed it always to be equal to 0  C,
while the model presented here does not account for
melting water permeating the frost which would occur under those circumstances. Instead the frost layer
growth stops as soon as the triple point temperature is
reached as can be observed at t = 35 min for F = -2
caused by the low water diffusion resulting in a larger
frost thickness, higher porosity and large thermal resistance of the material.

Distributed frost layer model

The distributed frost layer model provides a spatial
resolution of frost density with frost layer height which
makes it possible to compute the local thermal resistance in the frost. However, because measurement
data of these variations are scarce, the overall values
of frost thickness and average frost density will be further discussed. Mao et al. conducted a wide range
of measurements under various conditions with an airflow channel (300 mm wide and 20 mm high) that contained one cooled surface. They derived empirical correlations from their results (with a root mean square
error of 0.22 for density and frost height), which are
The Modelica Association

A comparison of model I (distributed) and model II
(lumped) is given together with results from empirical
correlations found by Mao et al. for their experimental
data in figure 5 for different wall surface temperatures.
The frost thickness computed with the lumped model
is in good agreement with the values obtained from the
empirical correlations. The average density is larger
than that computed using the empirical correlation in
all lumped model cases. This would also lead to a thermal resistance predicted too low. However, the deviation from the given error interval of the empirical correlation is not very large. The distributed model shows
a close agreement with the empirical correlations for
both, frost thickness and average density, the diffusion
factor F was set to 0, 3 and 8, respectively with rising
wall temperature to give a good fit. A trend towards
an increasing enhancement of the diffusion factor with
rising plate temperatures in a non-linear way is also
reported by [6]. However, the exact values may not be
transferable to different boundary conditions.
A simular trend on the average frost density can be observed with the lumped model which relates the surface density to the surface temperature. Since density has a major impact on all frost properties including the thermal conductivity its correct determination
seems important. However, in both approaches some
assumptions were made that strongly influence the development of frost density with time. In the distributed
approach a zero density gradient is applied at the surface which is similar to the approach in [6], while correlation (13) is used for the lumped model. But it is
believed that the actual structure and at the same time
the density of the new frost depositing at the surface
may actually differ from these assumptions.

515

Modelica 2006, September 4th  5th

K. Proelss, G. Schmitz
distrib. m.

lumped m.

distrib. m.

emp. corr.

f in kg/m3

1

T = 268 K

f in mm

0
0
3

40

60

80

100

1

T = 263 K
0

20

40

60

80

100

T = 258 K
0

20

40

60

80

100

T = 268 K
40

60

80

100

120

100

T = 263 K

50

0

20

40

60

80

100

120

150

100

50

0

120

20

150

200

2

1

100

0

120

3

0

emp. corr.

200

0
0
200

120

2

0

f in mm

20

f in kg/m3

0.5

f in kg/m3

f in mm

1.5

4

lumped m.

300

2

T = 258 K
0

t in min

20

40

60

80

100

120

t in min

Figure 5: Frost layer thickness df and average frost density rf over time for the lumped and the distributed model
and an empirical correlation from [13]. Boundary conditions: vair = 2.5 m/s, Tair = 291 K, X = 0.006 kg/kg, y =
0.5 m.

5

Conclusion

Resolving heat and mass transport phenomena in the
spatial domain of the frost layer as it is done in model
I gives only higher accuracy in predicting frost growth
and average density if information on the diffusion enhancement factor F is present. The simple lumped
approach (model II) is suitable to predict trends of
frost formation with respect to variable boundary conditions, such as air and wall temperature, humidity
and air velocity. A surprisingly good agreement is obtained for the predicted frost thickness when compared
to an empirical correlation. More accurate absolute
values of density and thermal resistance with regard to
operating time may perhaps be obtained with a refinement of the model in terms of densification of the frost
layer with time and surface density of the deposit. In
addition more empirical data is required, especially in
terms of the frost surface temperature, to validate the
model in a wide operating range.

process with time depending on the chosen strategy.
The most common method of heating the solid wall
material using hot gas or electrical current poses the
problem of predicting the detachment of the frost layer
from the wall and the associated heat transport through
gaps filled with liquid water or air. In addition, heat
transfer to the surrounding air by natural convection
must be taken into account if the air supply is stopped
during this period.

References

Modeling the frost formation process correctly provides information on the amount of frost and its ice
fraction at the start of the defrost process, which gives
an idea of the minimum energy required for a complete
defrost. Further work is needed to describe the defrost
The Modelica Association

516

[1] Xia, Y., Hrnjak, P. S. and Jacobi A. M, Air-side
thermal hydraulic performance of louvered-fin,
flat-tube heat exchangers with sequential frostgrowth cycles. ASHRAE Transactions, 2005,
111, 487-495.
[2] ONeal, D. L. and Tree D. R., A review of frost
formation in simple geometries. ASHRAE Transactions, 1992, 98(Part 2), 65-78.
[3] Hoffenbecker, N., Klein, S.A. and Reindl, D.T.,
Hot gas defrost model development and validation. International Journal of Refrigeration,
2005, 28, 605-615.
Modelica 2006, September 4th  5th

Modeling of Frost Growth on Heat Exchanger Surfaces

[4] Sanders, C. T., Frost Formation: The influence
of frost formation and defrosting on the performance of air coolers. PhD thesis, Delft University of Technology, Delft, 1974.
[5] Le Gall, R., Grillot, J. M. and Jallut, C., Modelling of frost growth and densification. International Journal of Heat and Mass Transfer, 1997,
40, 3177-3187.
[6] Tao, Y. X., Besant, R., W. and Rezkallah, K. S. A
mathematical model for predicting the densification and growth of frost on a flat plate. International Journal of Heat and Mass Transfer, 1993,
36, 353-363.
[7] Hayashi Y., Aoki, A., Adachi, S. and Hori, K.,
Study of frost properties correlating with frost
formation types. Jornal of Heat Transfer, 1977,
99, 239-245.
[8] Baehr, H. D., Stephan, K., Heat and Mass Transfer. 2nd Ed., Springer Verlag, Berlin, 2006.
[9] Hayashi Y., Aoki, A. and Yuhara, H., Study
of frost formation based on a theoretical model
of the frost layer. Heat Transfer - Japanese Research, 1977, 6, 79-94.
[10] Yonko, J. D. and Sepsy, C. F., An investigation of
the thermal conductivity of frost while forming
on a flat horizontal plate. ASHRAE Transactions,
1967, 73, 1.1-1.11.
[11] Yun, R., Kim, Y. and Min, M., Modeling of frost
growth and frost properties with airflow over a
flat plate. International Journal of Refrigeration,
2002, 25, 362-371.
[12] Patankar, S. V., Numerical Heat Transfer and
Fluid Flow. Hemisphere Publ. Co., New York,
1980.
[13] Mao, Y., Besant, R.W., Rezkalla, K.S., Measurement and correlations of frost properties with
airflowover a flat plate. ASHRAE Transactions,
1992, 1, 65-78.

The Modelica Association

516.1

Modelica 2006, September 4th  5th

K. Proelss, G. Schmitz

The Modelica Association

516.2

Modelica 2006, September 4th  5th

Multizone Building Model for Thermal Building Simulation in Modelica

Multizone Building Model for Thermal Building Simulation in
Modelica
Michael Wetter
United Technologies Research Center
411 Silver Lane
East Hartford, CT 06108

Abstract
We present a room model for thermal building simulation that we implemented in Modelica. The room
model can be used for controls analysis and energy
analysis of one or several rooms that are connected
through airflow or heat conduction. The room model
can assess energy storage in the air and in the building construction materials, heat transfer between the
room and the outside environment and the humidity
and CO2 release to the room air. The humidity storage
in the building construction materials is not modeled.
We also describe a novel separation of heat transfer
mechanisms on which our room model is built on. The
separation allowed a significant reduction in model development time, and it allows using state-of-the-art
programs for computing prior to the thermal building
simulation certain energy flows, such as solar heat gain
of an active facade without breaking feedback loops
between the HVAC system and the room.
Keywords: Multizone thermal building model, building energy analysis

1

Introduction

cannot be integrated into MATLAB/Simulink nor can
model that are defined in those programs be automatically inverted. Thus, we developed a physics-based
room model in Modelica to allow advanced control design. For the model to be applicable to analyze a large
class of problems, we developed it such that it satisfies
the following requirements:
1. To be applicable in trade-studies, it is parameterizable with building geometry and material properties.
2. To be applicable for controls design, it captures
the building dynamics and the coupling between
rooms through air flow and heat conduction in
solids.
3. To allow analyzing novel HVAC systems, such as
hydronic concrete core cooling systems [9], it allows linking models for HVAC systems including
radiant heating and cooling systems to the building.
Developing a detailed thermal building simulation
model may take several months if not a year of
development time. We therefore identified a model
separation approach that allows us to develop a
physics-based room model in Modelica at reduced
model development time. Our modeling separation
approach essentially separates those phenomena that
are described by short-wave radiative heat exchange1
from those phenomena that are described by longwave radiative heat exchange, heat conduction and
heat convection. To describe the state variables of the
building envelope and of the room air temperature, the
room model uses as input time-series of short-wave
heat gains. The short-wave heat gains are independent
of the state variables, control actions and HVAC

Many control design processes require frequency domain analysis, time domain simulations with time
steps in the order of seconds or plant model inversion. Commercially available detailed building energy
simulation programs, such as EnergyPlus [2], TRNSYS [8], and DOE-2 [20], are not applicable for such
analysis. For example, the numerical solution algorithms used in the building envelope model of EnergyPlus, TRNSYS and DOE-2, are all based on a discrete
time representation of the building envelope dynamics that does not allow time steps in the order of seconds. In addition, none of the above cited building en1 By short-wave radiation, we mean radiation whose wave
ergy simulation programs can be used as a plant model
in a frequency domain controls analysis because they length is in the solar spectrum.

The Modelica Association

517

Modelica 2006, September 4th  5th

M. Wetter

operation, and computing those heat gains requires
models that are time-intensive to develop. Since those
time-series are independent on the state variables
and control actions, they can be precomputed by
detailed thermal building simulation programs, such
as IDA [14], TRNSYS or EnergyPlus and used as
time-dependent disturbances to our room model.

and the rooms enclosure surface temperatures, there
is no loss of accuracy in decoupling the short-wave radiation from the heat transfer by long-wave radiation,
conduction and convection.
Furthermore, this model separation does not restrict
analysis capabilities such as controls design and system optimization, as the following items illustrate.

In Section 2, we describe the model separation approach, in Section 3 we describe the equations used
to construct the room model and in Section 4 we discuss the implementation in Modelica. A comparative
model validation and a comparison between the model
implementation in Modelica with a TRNSYS model of
comparable complexity can be found in [16].

 Since all models that depend on the state variables and the control actions are modeled in Modelica, for controls design MATLAB/Simulink
need only be interfaced with Modelica but not
with a building simulation program.

2

 Since the HVAC system as well as the building
envelope is modeled in Modelica, cost function
evaluations during a system optimization does
not in general require running a detailed building simulation program. This considerably simplifies the optimization since the numerical noise
of state variables with respect to system parameters is hard, if not impossible, to control in most
thermal building simulation programs. Numerical noise has been shown to cause optimization
algorithms to fail finding an optimal solution in
building energy optimization studies [18, 19, 15].

Model Separation Approach

To explain the model separation approach, we will
now identify the dominant modes of heat transfer that
need to be described adequately to quantify a buildings energy consumption and the occupants thermal
comfort [5]. Figure 1 orders the modes of heat transfer on the horizontal axis by the time required to code
and test a simulation model that describes the phenomena and on the vertical axis by the uncertainty associated with the modeling assumptions and/or with the
3 Model Description
model parameters that one typically encounters for an
office building. While the exact location of each phe- We will now present the implemented model equations
nomenon model can be debated, the figure indicates in order to understand what physical phenomenas can
the following characteristics:
be analyzed with the room model, and what physi Models with large uncertainty in the modeling as- cal phenomenas, such as room air stratification of dissumptions and/or in the model parameters require placement ventilation, require an extension of the here
presented room model in order to be described adea short development time.
quately.
 Models with a small uncertainty but large development time are those models that describe heat 3.1 Distribution of a Rooms Solar Gains
transfer due to short-wave radiation.
To compute the solar gains per unit area for the room
Since the short-wave radiation is independent on the surfaces, we assume that all solar radiation that enters
buildings state variables and control actions2 , the the room first hits the floor, and that the floor diffusely
models on the right hand-side of the dashed line in reflects the radiation to all other surfaces. We neglect
Figure 1 can be computed in a detailed thermal build- multiple reflections and instead of using view factors
ing simulation program, such as EnergyPlus, and their between the floor and the other surfaces, we use
output be used as forcing functions of the Modelica area-weighted solar distribution factors. Such an
model in the form of time series. Since short-wave approach is common in detailed building simulation
radiative heat gains are decoupled from the room air programs and has been successfully validated in [15].
2 An exception could be, for example, if the building occupants
close a window blind if the room air temperature gets uncomfortably warm. Our room model could, however, be extended to describe such situations.

The Modelica Association

Consider a room with n f  N floor area patches, nn f 
N non-floor area patches, such as walls and windows,
and nw  N windows. Let N f , {1, . . . , n f } be the

518

Modelica 2006, September 4th  5th

Multizone Building Model for Thermal Building Simulation in Modelica
conduction, convection
and long-wave heat transfer

short-wave heat transfer

uncertainty in modeling assumption
or model parameters

internal
heat gains
convective heat
transfer coefficient

interzonal
air flow

long-wave
radiation
to sky

window solar
transmittance

solar
irradiation
on exterior
surfaces

heat conduction
in solids

building
shading

model
development time

Figure 1: Dominant modes of heat transfer for a thermal building simulation.
set of indices of all floor area patches, let Nn f , or transmitted by the k-th non-floor surface patch per
{1, . . . , nn f } be the index set of all non-floor surface unit area as
patches and let Nw , {1, . . . , nw } be the set of indices
ekSW + tkSW
of all windows. Let the solar radiation transmitted qk (t) = Q (t)
k  Nn f .
r
m ,
m m
from the exterior to the room through all windows be
mNn f A (eSW + tSW )
(5)
k
i
i
Htot (t) ,
H (t) A ,
(1) For opaque constructions, q (t) is assumed to be comiNw
pletely absorbed and hence qkSW,abs,0 (t) = qk (t). For
windows, however, the absorbed radiation at the roomwhere H i(t) denotes the solar radiation that is trans- side pane is
mitted per unit area through the i-th window and Ai is
the glazed area of the i-th window. The solar radiation
qkSW,abs,0,r (t) = ekSW qk (t),
(6)
that is absorbed by the k-th floor area patch per unit
area is
and the remaining fraction of qk (t) is assumed to be
qkSW,abs,0 (t)

=

transmitted to the exterior.3

ekSW
nN f

An

Htot (t),

k  Nf .

(2)

3.2 Distribution of Internal Heat Gains
The solar radiation that is reflected from the k-th floor
The radiative and sensible convective and latent heat
area patch is
gains caused by appliances, such as computers, and
k
k
by people are defined by time series and are input to
A (1  eSW )
H
(t),
k

N
.
(3)
Qkr (t) =
tot
f
n
this model. For values between the support points of
nN f A
the time series, we use an interpolation to define the
Therefore, the solar radiation that is reflected by the heat gains as a Lipschitz continuously differentiable
function of time.4
whole floor area is
Qnr (t) =

Qr (t) =
nN f

nN f

An (1  enSW )
nN f

An

Htot (t). (4) The radiative internal heat gains are distributed to the
room enclosing surfaces as follows: For some n  N,

A fraction of (1  eSW ) q (t) would be absorbed by the exteWe distribute Qr (t) to all non-floor areas, weighted
rior pane, but we neglect this effect.
by their solar absorptivity eSW and solar transmissivity
4 Using smooth functions to describe the heat gains can signiffor diffuse irradiation tSW (which is non-zero for win- icantly reduce the computation time since smoothing eliminates
dows). We compute the solar radiation that is absorbed time events.
3

The Modelica Association

519

k

k

Modelica 2006, September 4th  5th

M. Wetter

let N , {1, . . . , n} denote the index set of all room sur- 3.5 Radiative Heat Exchange between Room
faces. For radiative internal heat gains, the i-th surface
Surfaces
is assumed to absorb the heat gain per unit area
Let N , {1, . . . , n} be as above. To compute the radiative heat transfer between the room surfaces, we define
eiLW
Q
(t),
(7)
qiLW,abs,0 (t) =
int,LW
a radiation temperature T  (t) as
k
k
kN eLW A
k
k k
kN eLW A Tsur (t)

,
(11)
T
(t)
,
where eLW denotes the absorptivity for long-wave radik
k
kN eLW A
ation, and Qint,LW (t) denotes the radiative internal heat
k (t) is the surface temperature of the k-th
gain of the zone. Since the long-wave emissivity of where Tsur
window glass is close to unity, we consider windows surface patch. We assume that each surface only exto be opaque in the long-wave radiation spectrum.
changes radiation with an imaginary surface of much
larger area which is at temperature T  (t). The radiative heat transfer to the surface k  N can be described
3.3 Humidity Gains
by

The humidity gain mH2 O (t) in the room is computed as
qkLW (t) = s ekLW T  (t)4  T k (t)4 ,
(12)
where s = 5.670  108 J/(K4 m2 s) is the Stefan(8) Boltzmann constant. To reduce computation time,
we linearize the nonlinear equation (12) around T0 =
273.15
K. By introducing a linearized heat transfer cowhere Qlat (t) is the rooms latent heat gain, r0 =
2501.6  103 J/kg is the enthalpy of evaporation of wa- efficient, defined as
ter vapor at 0 C, c p = 1860 J/(kg K) is the specific heat
(13)
hkLW , 4 s ekLW T03 ,
capacity of water vapor and T is the temperature at
which the water vapor is released. We assume that the we can write

temperature at which the water vapor is released is the
k
k

k
(t)
=
h
T
q
(t)

T
(t)
.
(14)
LW
LW
average body surface temperature of a human, which
is 34 C [1, p 8.1].
Equations (14) and (11) are consistent with conservaQlat (t)
,
mH2 O (t) =
r0 + c p T

tion of energy because

3.4

CO2 Gains

Ak qkLW (t) = 4 s T03


ekLW Ak T  (t)  T k (t)

kN
Based on the rooms latent heat gains, we compute the kN
!
number of room occupants in the room and then, usekLW Ak T  (t) 
ekLW Ak T k (t)
= 4 s T03
ing the CO2 release per person, we compute the CO2
kN
kN
release in the room. Table 3.4 is a partial list of latent
= 0.
(15)
heat gains of occupants of conditioned spaces, adopted
from the ASHRAE Fundamentals [1, p 28.8]. The
3.6 Room Air
number of people n p (t) is computed as
We assume the room air to be completely mixed.
Qlat (t)
n p (t) =
,
(9) This is a common model assumption in thermal buildqlat
ing simulation programs and is used, for example,
in [2, 8, 14, 20]. If the model were to be used for
where Qlat (t) is the rooms latent heat gain and qlat is displacement ventilation, it would have to be modified
the latent heat gain per person, which is a user speci- to take into account the air stratification [13]. The time
fied parameter and can be obtained from Table 3.4.
rate of change of the room air temperature is
Table 3.4 is adopted from [10] and specifies the CO2
dTair (t)
emissions of a person at different degrees of activity.
= Qint,con (t) + Qaux,con (t)
mr c p
dt
Using the emitted mass flow of CO2 per person and the
m

number of occupants in the room as computed in (9),
+ mi (t) c p T i (t)  Tair (t)
we compute the total CO2 source in the room as
i=1
n

i

+
Ai hicon,0 Tsur
(t)  Tair (t) , (16)
mCO2 (t) = n p (t) mCO2 .
(10)
i=1

The Modelica Association

520

Modelica 2006, September 4th  5th

Multizone Building Model for Thermal Building Simulation in Modelica

Table 1: Latent heat gains from occupants of conditioned spaces. Partial list adopted from ASHRAE Fundamentals [1, p 28.8].
Degree of activity
Typical usage
Latent heat qlat
in [W/person]
Seated, very light work
Offices, hotels, apartments
45
Moderately active office work Offices, hotels, apartments
55
Standing, light work; walking Department store; retail store
55
Walking, standing
Drug store; bank
70

Table 2: CO2 emissions per person at different degrees of activity. Partial list adopted from [10].


Degree of activity
CO2 emissions VCO
CO2 emissions mCO
2
2
3
in [dm /h/person]
in [kg/s/person]
Resting
12
0.00582
Sedentary, such as
15
0.00728
reading or writing
Light work, standing, such as
23
0.0112
laboratory work, typesetting

where mr is the mass of the room volume, c p is the
airs specific heat capacity and Qint,con (t) is the internal convective heat gain. The term Qaux,con (t) represents convective heat gains caused by an auxiliary
heating/cooling system that can be modeled outside of
the room model, such as an electric baseboard
heater.

m
i
i
The term i=1 m (t) c p T (t)  Tair (t) describes air
flow into the room caused, for example, by the HVAC
system and by interzonal air exchange. Any number of
HVAC systems or interzonal air exchange models can
be connected to the room. This makes the room model
applicable for analyzing coupling between rooms due
to static pressure difference or buoyancy driven
 air
i (t)  T (t) deflow. The term ni=1 Ai hicon,0 Tsur
air
scribes the convective heat transfer between the room
air and the rooms surface temperature. In (16), we
assumed the convective heat transfer coefficient to be
constant, but the model could be replaced by a model
which computes the convective heat transfer coefficient as a function of the temperature difference or as
a function of the air velocity near the surface.

The heat conduction in an opaque construction of
thickness L > 0 over a time interval (0, t) is computed
using the Fourier equation


Tsol (z,t)
Tsol (z,t)

k(z)
= C(z)
,
(17)
z
t
t
on (z,t)  (0, L)  (0, t), where z  (0, L) is the
spatial coordinate, k(z) is the thermal conductivity and
C(z) , r(z) c(z) is the thermal heat capacity per unit
volume. For composite constructions, the material
properties k() and C() typically vary from one layer
to another and hence are step functions of the spatial
coordinate z.
The boundary conditions are at the room-side surface
(at z = 0)
k(0)

Tsol (0,t)
z


0
= hcon,0 Tair
(t)  Tsol (0,t)

+qSW,abs,0 (t) + qLW,abs,0 (t)
(18)

and at the exterior surface (at z = L)

3.7

Heat Conduction in Solids
k(L)

Tsol (L,t)
z


1
= hcon,1 Tair
(t)  Tsol (L,t)

Modeling the dynamics of the building envelope is
important since the building envelope is typically a
+qSW,abs,1 (t) + qLW,abs,1 (t),
buildings biggest thermal storage element which can
(19)
be exploited for reducing cooling peak demand and
where hcon,0 and hcon,1 are the convective heat transfer
energy.
0 (t) and T 1 (t) are the air temperatures
coefficients, Tair
air
The Modelica Association

521

Modelica 2006, September 4th  5th

M. Wetter

b  R for each layer as6
near the two surfaces, qSW,abs,0 (t) and qSW,abs,1 (t) are ments N
the short-wave radiation absorbed by the room-side
k
and exterior surface, and qLW,abs,0 (t) and qLW,abs,1 (t)
b k = Nre f P ,
N
(23)
Pre f
are the long-wave radiation absorbed by the room-side
and exterior surface.
where Nre f  N is a user-specified number of compartments for a reference layer, which we define as a
To compute a numerical approximation to the soluconcrete layer with thickness Lre f , 0.20 m and thertion of (17), we spatially discretize (17) using a fimal diffusivity are f , 3.64107 m2 /s. Hence, Pre f ,

nite difference scheme.5 In composite constructions,
Lre f / are f = 331.4 s1/2 . We compute the number of
the material properties of adjacent layers, say in mab k ,
compartments for each material layer as N k = N
terial 1 and material 2, can be so that k1 /k2  101 ,
with k  {1, . . . , K}, where the notation  is defined
C1 /C2  102 , and hence the ratio of the thermal diffufor s  R as s , min{k  Z | k  s}. Then, we divide
sivities a , k/C can be a1 /a2  101 . Thus, the thereach material layer k  {1, . . . , K} in compartments of
mal diffusivity in adjacent layers can vary by an orlength Dk , l k /N k . Thus, the total number of compartder of magnitude. Hence, if the spatial grid generation
ments in the construction is N = Kk=1 N k .
does not account for the material properties, then the
time rate of change of the different nodes can be significantly different from each other, which can cause 3.8 Window Model
the system of ordinary differential equations to be stiff. Detailed window models, such as the ones in EnerThus, we give the user the option to generate the spa- gyPlus, consist of a model that computes the optical
tial grid automatically so that under the assumption of properties and a model that solves the heat balance
equal heat transfer, each node temperature has a simi- equations. In the optical model, the solar transmitlar time rate of change. The automatic grid generation tance, absorbtance and reflectance of each window
is done as follows.
pane is computed first for direct irradiation at various
From dimensionless analysis, one can obtain a charac- incidence angles and then for hemispherical (diffuse)
teristic time, called the Fourier number, as
irradiation as if each pane would stand alone. Next,
those data are used to compute the transmittance,
(20) absorbtance and reflectance of each pane, but now
taking into account multiple reflections between
where a denotes the thermal diffusivity, t denotes time the individual panes and between the window and
and L denotes the characteristic length [7]. It is favor- possible shading devices. Finally, those properties are
able to generate the spatial grid so that the ratio (t/Fo) passed from the optical to the heat balance model as a
is equal to an arbitrary constant P, which we define as function of the solar incidence angle so that the heat
balance model can compute the panes temperature,
 t 1/2
L
long-wave radiative, conductive and convective heat
= .
(21)
P,
Fo
transfer. Developing such models is time-intensive,
a
see for example [15] for a detailed model description.
Now, let K  N denote the number of material layers We therefore implemented a simplified model for
in an opaque composite construction, and let {l k }Kk=1 double pane windows that uses the solar radiation
denote the thickness of each material layer. In view of H(t) that is transmitted per unit area through the
(21), we compute the time constant of each material window from the outside to the room as an input to a
layer as
heat balance model. This transmitted solar radiation
can be obtained from building energy simulation
lk
k
k  {1, . . . , K},
(22) programs such as EnergyPlus in the form of a time
P = ,
ak
series. The biggest heat gain of the room due to solar
radiation is typically caused by the transmitted solar
and we compute the estimated number of compartradiation, rather than by the solar radiation that is
5 Since the coefficients of (17) are step functions, the partial absorbed by the window and then conducted through
differential equation has a weak but no classical solution for com- the glass and convected to the room air. Therefore,
posite constructions. However, using a finite difference scheme is we expect that the simplified model described below
Fo ,

at
,
L2

customary in thermal building simulation as it requires less development time than a finite element model.

The Modelica Association

522

6 We

b as a real number and will round later to an integer.
use N

Modelica 2006, September 4th  5th

Multizone Building Model for Thermal Building Simulation in Modelica

is accurate enough for many room configurations, and at the exterior window pane as
except for rooms with a high ratio of glass to wall area.
H(t)
qSW,abs,1 (t) = N,1, AN,N,
.
(31)
SW
TSW
We will use to same notation as in the Window 4 software manual [6]. In particular, N,1 denotes that the
radiation strikes the window from the outside pane Note that (30) accounts only the absorption of the
N and is transmitted through the inside pane 1, short-wave radiation from the outside to the roomand N,N denotes that the radiation strikes the outside side. The absorption of the short-wave radiation that
pane and is absorbed by the outside pane. The super- is reflected by the room and radiated to the outside is
script   denotes irradiation normal to the window described in (6).
pane and the subscript inc denotes incident radia- In the thermal model, we neglect the windows thertion. We use the following data as input to our optical mal capacity since it is much smaller than the thermal
capacity of the building envelope. This assumption is
model:
customary in thermal building simulation programs.
1. A time series, describing the transmitted solar ra- The heat balance of the two glass layers is
diation H(t) per unit area.

1
0 = hcon,0 Tair (t)  Twin
(t)
2. The solar transmittance from the outside to the
+qSW,abs,0 (t) + qSW,abs,0,r (t)
room for normal irradiation, defined as

2
1
(t)  Twin
(t) (32)
+qLW,abs,0 (t) +U Twin
H
N,1,
(24)
TSW
, .
and
Hinc

2
0 = hcon,1 Tout (t)  Twin
(t) + qSW,abs,1 (t)
3. The solar absorbtance for the room-side window

1
2
pane for normal irradiation from the outside, de(t)  Twin
(t) , (33)
+qLW,abs,1 (t) +U Twin
fined as
1 (t) and T 2 (t) are the room side and
q
where Twin
SW,abs,0
N,1
win
.
(25)
ASW
,

exterior side glass temperatures, qLW,abs,0 (t) and
Hinc
qLW,abs,1 (t) are the long-wave radiation that is ab4. The solar absorbtance for the exterior window sorbed by the room side and the exterior side,
pane for normal irradiation from the outside, de- qSW,abs,0,r (t) is as in (6) and U is the window gaps
fined as
heat transfer coefficient. We assume U to be indeq
1
2
SW,abs,1
N,N,
.
(26) pendent of the temperature difference Twin (t)  Twin (t)
ASW ,

Hinc
since conduction through stagnant air is the dominant
The transmittance and absorbtance are functions of heat transport mechanism for air or argon gaps up to
the incidence angle f. We assume that the func- 10 mm thickness [3].
tional dependence of transmittance and absorbtance
is similar, i.e., we assume that there exists a function 3.9
g : [0, 90 ]  R, such that for any f  [0, 90 ],

Long-wave Radiation between Exterior
Surfaces and Environment

(27) Exterior surfaces of opaque constructions and of windows participate in long-wave radiative heat exchange
N,1,
(28) with the sky and the environment. The sky temperaAN,1
SW (f) = ASW g(f),
N,N,
g(f).
(29) ture Tsky (t) is an input to the Modelica room model.
AN,N
SW (f) = ASW
We assume that the sky temperature is defined as the
Since the radiation that is absorbed in an infinitesimal temperature that results in the same long-wave radiaglass element of thickness ds is proportional to the ra- tive heat exchange as if the sky would be a black body
diation that is transmitted through ds [12], assuming at temperature Tsky (t)7 . We assume that the ground is
the existence of such a function g() is reasonable. Un- at the temperature that is connected to the exterior heat
der this assumption, we can compute the absorbed ra- flux port of the construction, which is typically the outdiation at the room-side window pane as
side air temperature. The view factor jsg between the
N,1,
N,1
g(f),
(f) = TSW
TSW

qSW,abs,0 (t) =
The Modelica Association

H(t)
N,1,
TSW

AN,1,
SW

(30)

7 The black body sky temperature can be obtained, for example,
from EnergyPlus.

523

Modelica 2006, September 4th  5th

M. Wetter

surface and the ground is assigned as


, for floors,
1
jsg = 1/2 , for walls,


0
, for ceilings.

replaceable placeholders for models that may be replaced at compile time with an array of models that
have the actual physical implementation.
(34)

5 Conclusions

Let Text (t) denote the ground temperature. We define
Our model separation approach led to shorter model
an environment temperature as
development time and allows our model to be used

4
4 1/4
with state-of-the-art software for daylighting simulaTenv (t) , jsg Text (t) + (1  jsg) Tsky (t)
,
(35) tion. The developed room model captures the dynamics required for controls design, and the energy flows
and we define a radiative heat transfer coefficient as
required for building energy analysis simulations.


Tsur (t) + Tenv (t) 3
,
(36)
hLW (t) , 4 s eLW
2
where s = 5.670  108 W/m2 /K4 is the StefanBoltzmann constant and Tsur (t) is the exterior surface
temperature of the construction. The long-wave radiative heat flux is computed as

qLW (t) = hLW (t) Tenv (t)  Tsur (t) .
(37)

4

Implementation in Modelica

6 Acknowledgments

This research was supported by the U.S. Department
of Commerce, National Institute of Standards and
Technology, Advanced Technology Program under the
agreement number 70NANB4H3024.

7 Nomenclature

We implemented the building model using Modelica 7.1 Conventions
2.2 [11] and Modelica Fluid [4]. Figure 2 shows the
1. Vectors elements are denoted by superscripts.
graphical view of the room model implementation in
Dymola. There is a FluidPort (labeled fluPor)
2. f () denotes a function where () stands for the
and a HeatPort (labeled heaPor) that connect to a
undesignated variables. f (x) denotes the value of
JunctionVolume that models the room air (labeled
f () for the argument x.
air). The fluid port can be used to attach an airflow
network that defines a model for an air-conditioning
system or for interzonal air exchange [17]. The heat 7.2 Symbols
port can be used to add a convective heat source or
aA
a is an element of A
sink to the room. There are models for interior surN
{1, 2, 3, . . .}
faces intSur whose temperature and heat flow can be
,
equal by definition
connected to an external model that may, for example,
model heat transfer inside a radiant heating slab. The
room-facing surface then automatically participates in References
in the radiative heat transfer balance described in Section 3.5. The models airCon allows constructions to [1] ASHRAE. Fundamentals. American Society of
be modeled whose exterior surface have a prescribed
Heating, Refrigeration and Air-Conditioning Enair temperature as boundary condition, such as a floor
gineers, 1997.
above a crawl space. The models parCon describe
the behavior of partition constructions, i.e., construc- [2] Drury B. Crawley, Linda K. Lawrie, Frederick C.
Winkelmann, Walter F. Buhl, Y. Joe Huang, Curtions where both surfaces are exposed to the same
tis O. Pedersen, Richard K. Strand, Richard J.
room. The models extCon and winCon describe
Liesen, Daniel E. Fisher, Michael J. Witte, and
exterior opaque constructions and windows. The modJason Glazer. EnergyPlus: creating a newels intGai, qLatCon and intConGai convert ingeneration building energy simulation program.
ternal gains to heat, water vapor and carbon-dioxide
Energy and Buildings, 33(4):443457, 2001.
flows. The models whose icons have a yellow bar are
The Modelica Association

524

Modelica 2006, September 4th  5th

Multizone Building Model for Thermal Building Simulation in Modelica

Figure 2: View of room model in Dymolas graphical editor.
[3] Bernard R. Cuzzillo and Patrick J. Pagni. Thermal breakage of double-pane glazing by fire. J.
of Fire Prot. Engr., 9(1):111, 1998.

gram. ASHRAE Transactions, 82(1):623633,
1976.

[9] Markus Koschenz and Viktor Dorer. Interaction
[4] Hilding Elmqvist, Hubertus Tummescheit, and
of an air system with concrete core conditionMartin Otter.
Object-oriented modeling of
ing. Energy and Buildings, 30(2):139145, June
thermo-fluid systems. In Peter Fritzson, edi1999.
tor, Proceedings of the 3rd Modelica conference,
pages 269286, Linkoping, Sweden, November [10] R. Lochau.
Handbuch der Klimatechnik,
2003. Modelica Association and Institutionen for
volume I, chapter Physiologische Grundlagen,
datavetenskap, Linkopings universitet.
pages 61104. C.F. Muller GmbH, Karlsruhe,
1989.
[5] Ole P. Fanger. Thermal Comfort. McGraw Hill,
1973.
[11] Modelica Association. Modelica  A Unified
Object-Oriented Language for Physical Systems
[6] E. U. Finlayson, D. K. Arasteh, C. Huizenga,
Modeling, Language Specification, Version 2.2,
M. D. Rubin, and M. S. Reilly. WINDOW
February 2005.
4.0: Documentation of calculation procedures.
Technical Report LBL-33943, Lawrence Berke[12] Michael F. Modest. Radiative Heat Transfer.
ley National Laboratory, Berkeley, CA, USA,
McGraw-Hill, Inc., 1993.
July 1993.
[7] Jack Philip Holman. Heat Transfer. McGraw- [13] Simon J. Rees and Philip Haves. A model of a
displacement ventilation system suitable for sysHill, 8 edition, 1997.
tem simulation. In Proc. of the 4-th IBPSA Con[8] S. A. Klein, J. A. Duffie, and W. A. Beckference, pages 199205, Madison, Wisconsin,
man. TRNSYS  A transient simulation proUSA, August 1995.
The Modelica Association

525

Modelica 2006, September 4th  5th

M. Wetter

[14] Per Sahlin and Axel Bring. IDA solver  A
tool for building and energy systems simulation.
In J. A. Clarke, J. W. Mitchell, and R. C. Van
de Perre, editors, Proc. of the IBPSA Conference,
Nice, France, August 1991.
[15] Michael Wetter. Simulation-Based Building Energy Optimization. PhD thesis, University of California at Berkeley, 2004.
[16] Michael Wetter. Modelica versus TRNSYS 
a comparison between an equation-based and
a procedural modeling language for building
energy simulation. Submitted to: SimBuild 2006
Conference,
http://ceae.colorado.
edu/ibpsa/SimBuild06/index.html,
August 2006.
[17] Michael Wetter.
Multizone airflow model
in modelica. Submitted to: Modelica 2006
conference, http://www.modelica.org/
events/modelica2006/, September 2006.
[18] Michael Wetter and Jonathan Wright. Comparison of a generalized pattern search and a genetic
algorithm optimization method. In G. Augenbroe
and J. Hensen, editors, Proc. of the 8-th IBPSA
Conference, volume III, pages 14011408, Eindhoven, NL, August 2003.
[19] Michael Wetter and Jonathan Wright. A comparison of deterministic and probabilistic optimization algorithms for nonsmooth simulationbased optimization. Building and Environment,
39(8):989999, August 2004.
[20] F. C. Winkelmann, B. E. Birsdall, W. F. Buhl,
K. L. Ellington, A. E. Erdem, J. J. Hirsch, and
S. Gates. DOE-2 supplement, version 2.1E.
Technical Report LBL-34947, Lawrence Berkeley National Laboratory, Berkeley, CA, USA,
November 1993.

The Modelica Association

526

Modelica 2006, September 4th  5th

Session 5c

Session 5c
Free and Commercial Libraries 1

The Modelica Association

527

Modelica 2006, September 4th  5th

Session 5c

The Modelica Association

528

Modelica 2006, September 4th  5th

The LinearSystems Library for Continuous and Discrete Control Systems

The LinearSystems library for
continuous and discrete control systems
Martin Otter
German Aerospace Center (DLR), Institute of Robotics and Mechatronics, Germany

Abstract
The free Modelica LinearSystems library provides
basic data structures for linear control systems as
well as operations on them, and includes blocks that
allow quick switching between a continuous and a
discrete representation of a multi-rate controller. The
advantage is that fast simulations of the overall
system can be performed when the modeling detail
of the continuous controller is sufficient. It is
planned to include this library in the Modelica
standard library.

1

Introduction

Library LinearSystems is a
free Modelica package
providing different
representations of linear,
time invariant differential
and difference equation
systems, as well as typical
operations on these system
descriptions. In the right
figure a screen-shot of the
first hierarchical level of the library is shown.
StateSpace, TransferFunction, ZerosAndPoles, and
DiscreteStateSpace are records that provide basic
data structures for linear control systems. Every
record contains a set of utility functions that operate
on the corresponding data structure. Especially,
operations are provided to transform the respective
data structures in to each other.
Sublibrary Math contains the basic data structures
Complex and Polynomial that are utilized from the
linear system descriptions.
Sublibrary Sampled contains a library of input/output
blocks to conveniently model and simulate sampled
data systems where it is convenient to quickly switch
between a continuous and a discrete block
representation.

The Modelica Association

2

Sublibrary Math

This sublibrary provides the basic data structures
Complex and Polynomial that are utilized and needed
from the linear systems data structures to be
discussed in the next section.
In the Modelica Association there is currently a
proposal to introduce operator overloading into
Modelica 3.0. The data structures in the
LinearSystems library are organized so that their
usage
becomes
convenient
once
operator
overloading is available.
The basic approach will be explained
at hand of the record Math.Complex.
Its content is displayed on the right
side. The record contains the basic
definition of a complex number
consisting of a real (re) and an
imaginary (im) part:
record Complex
Real re;
Real im;
// function definitions
end Complex;

Additionally, a set of functions is
present that operates on this record.
Especially, function constructor(..)
constructs an instance of this record and all functions
'xx' provide basic operations such as addition and
multiplication. Note, the apostrophe is part of the
function name. In the operator overloading proposal,
predefined function names are defined, such as '+'
that will be automatically invoked when a Complex
number is used in an arithmetic expression.
The Complex number record can be utilized in
current Modelica environments, such as Dymola
(Dynasim 2006), in the following way:
import Modelica.Utilities.Streams;
import LinearSystems.Math.Complex;
Complex c1=Complex(re=2, im=3) "= 2 + 3j";
Complex c2=Complex(3,4)
"= 3 + 4j";

529

Modelica 2006, September 4th  5th

M. Otter
import LinearSystems.Math.Polynomial;
p = Polynomial({6, 4, -3})
Polynomial.String(p)
// = "-6*x^2 + 4*x - 3"

algorithm
c3 := Complex.'+'(c1, c2) "= c1 + c2";
Streams.print("c3 = " +
Complex.'String'(c3));
Streams.print("c3 = " +
Complex.'String'(c3,"i"));

int_p = Polynomial.integral(p)
Polynomial.String(int_p)
// = "-2*x^3 + 2*x^2  3*x"

In the declaration, the two record instances c1 and c2
form c3. The value of record c3 is printed with the
Complex.'String' functions in different forms resulting in the following print-out:

der_p = Polynomial.derivative(p)
Polynomial.String(der_p)
// = "-12*x + 4"

c3 = 5 + 7j
c3 = 5 + 7i

Once operator overloading is available, the above
statements can be simply written as:

Polynomial.evaluate(der_p,1)
// = -8

c3 := c1 + c2;
Streams.print("c3 = " + String(c3));
Streams.print("c3 = " + String(c3,"i"));

r = Polynomial.roots(p, printRoots=true)
// = 0.333333 + 0.62361j
// = 0.333333  0.62361j

It is then also possible to write:
Complex j = Complex.j();
Complex c4 = -2 + 5*j;
Complex c5 = c1*c2 / ( c3 + c4);

In record Math.Complex the basic operations for
complex numbers are provided.
In a similar way all other data structures of the
LinearSystems library are defined. They can all be at
once used in current Modelica environments and
they will be conveniently usable once operator
overloading is available in Modelica and in Modelica
tools.
Record
Math.Polynomial
defines a data structure for
polynomials with real-valued
coefficients and provides the
most important operations on
polynomials. Its content is
displayed on the right side. A
Polynomial is constructed by
the command
Polynomial(coeff.Vector)

where the input argument
provides
the
polynomial
coefficients in descending order.
For example, the polynomial y
= 2*x2 + 3*x + 1 is defined as
Polynomial({2,3,1})

Besides arithmetic operations,
functions are provided to
compute the zeros of a
polynomial (via the eigen values
of the companion matrix), to
differentiate, to integrate and to
evaluate the function value, its derivative and its
integral. Find below a typical example from the
scripting environment of Dymola:
The Modelica Association

With function fitting, a polynomial can be
determined that approximates given table values.
Finally with function plot, the interesting range of x
is automatically determined (via calculating the roots
of the polynomial and of its derivative) and plotted.
The plotting is currently performed with the plot
function in Dymola. Once a Modelica built-in plot
function is available, this will be adapted. A typical
plot is shown in the next figure:
1000

x^5 - 14*x^4 + 46*x^3 + 56*x^2 - 200*x

0
-1000
0

3

5

Linear System Descriptions

At the top level of the LinearSystems library, data
structures are provided as Modelica records defining
different representations of linear, time invariant differential and difference equation systems. In the record definitions, functions are provided that operate
on the corresponding data structure. Currently, the
following linear system representations are available:
3.1

Record StateSpace

This record defines a multi-input, multi-output linear
time-invariant differential equation system in state
space form:

530

x (t ) = A  x(t ) + B  u(t )
y (t ) = C  x(t ) + D  u(t )
Modelica 2006, September 4th  5th

The LinearSystems Library for Continuous and Discrete Control Systems

The data part of the record contains the constant matrices A,B,C,D in the following definition:
record StateSpace
Real A[:,:];
Real B[size(A,1),:];
Real C[:,size(A,1)];
Real D[size(C,1), size(B,2)];
// function definitions
end StateSpace;

Record TansferFunction

This record defines the
transfer function between
the input signal u and the
output signal y by the coefficients of the numerator
and denominator polynomials n(s) and d(s) respectively:

y=

n( s )
u
d ( s)

The order of the numerator
polynomial can be larger as
the order of the denominator polynomial (in such a
case, the transfer function
can not be transformed to a
StateSpace system, but
other operations are possible). For example, the transfer function

The Modelica Association

2s + 3
u
4  s2 + 5  s + 6

is defined in the following way:
import TF=LinearSystems.TransferFunction;
import Modelica.Utilities.Streams;
TF tf(n={2,3}, d={4,5,6});
print("y = " + TF.String(tf) + "* u")

The last statement prints the following string to the
output window:
y = (2*s + 3) / (4*s^2 + 5*s + 6) * u

Besides arithmetic operations on transfer functions
and constructing them optionally also from polynomials and from zeros and poles, the zeros and poles
can be computed and a Bode plot can be constructed,
as shown in the next figure:
Bode diagram
tf1

tf2

Magnitude

1

0.1

0.01

0.01

Phase in [deg]

The
content
of
the
StateSpace record definition
is displayed on the right
side. The fromXXX functions transform from another representation to a
StateSpace record. Especially fromModel(..) linearizes a Modelcia model
and provides the linear system as output argument.
fromFile(..)
reads
a
StateSpace description from
file and fromTransferFunction(..) transform a transfer function description into a StateSpace form.
The basic arithmetic operations are interpreted as
series and parallel connection of StateSpace systems.
Function invariantZeros(..) computes the invariant
zeros. For single-input, single-output systems these
are the zeros of the transfer function. Function
plotEigenValues(..) computes and plots the eigenvalues of the system.
3.2

y=

0.1

1
Frequency in [Hz]

10

0.1

1
Frequency in [Hz]

10

0

-100
0.01

The function call plotBode(tf1, legend="tf1")
automatically selects an appropriate frequency intervall and uses the selected legend. The useful frequency range is estimated such that the phase angle
of the plot of one (numerator or denominator) zero is
in the range:

min
n

 phase angle 


2



min
n

where n is the number of (numerator or denominator)
zeros. Note, the phase angle of one zero for a frequency of 0 up to infinity is in the range:

0  phase angle 


2

Therefore, the frequency range is estimated such that
the essential part of the phase angle (defined by min)
is present in the Bode plot (default is 10-4 rad).

531

Modelica 2006, September 4th  5th

M. Otter

3.3

Record ZerosAndPoles

This record defines the
transfer function between
the input signal u and the
output signal by its zeros,
poles and a gain:

y =k

(s  z ) u
(s  p )
i

j

where the zeros and poles
are defined by two Complex
vectors of coefficients zi and
pj. The elements of the two
Complex vectors must either be real numbers or conjugate complex pairs (in order that their product results in a polynomial with Real coefficients).
A description with zeros and poles is problematic:
For example, a small change in the imaginary part of
a conjugate complex pole pair, leads no longer to a
transfer function with real coefficients. If the same
zero or pole is present twice or more, then a diagonal
state space form is no longer possible. This means
that the structure is very sensitive if zeros or poles
are close together. Performing arithmetic operations
on such a description therefore leads easily to transfer functions with non-real coefficients. For this and
other reasons, the constructor transforms this data
structure and stores it internally in the record as first
and second order polynomials with real coefficients:

 (s + n )   (s
y =k
 (s + d )   (s

2

+ n2 j  s + n3 j )

2

+ d 2 l  s + d 3l )

1i

1k

u

All functions operate on this data structure. It is
therefore guaranteed that an operation results again
in a transfer function with real coefficients. It is possible to construct a ZerosAndPoles record directly
with these coefficients by using function fromFactorized(..).
This data structure is especially useful in applications where first and second order polynomials are
naturally occurring, e.g., as for filters: With function
filter(..) this factorized form is directly generated
from the desired low and high pass filters of type
CriticalDamping, Bessel, Butterworth or Chebyshev.
The filter options can be seen in Figure 1, a screenshot of the input menu of this function.
Besides type of filter and whether it is a low or high
pass filter, the order of the filter and the cut-off frequency can be defined. With option normalized,
filters can be defined in normalized (default) and
non-normalized form.
The Modelica Association

Figure 1: Input menu of function filter(..).
In the normalized form, the amplitude of the filter
transfer function at the cutoff frequency is 1/sqrt(2)
(= 3 dB). When trying out different filter types with
different orders, the result of a comparison makes
only sense if the filter is normalized.
Note, when comparing the filters of this function
with other software systems, the setting of "normalized" has to be selected appropriately. For example,
the signal processing toolbox of Matlab provides the
filters in non-normalized form and therefore normalized = false has to be set.
In Figure 2, the magnitudes of the 4 supported low
pass filters are shown in normalized form and in
Figure 5 the corresponding step responses are given
(generated with the LinearSystems.Sampled library).

Figure 2: Magnitudes of normalized low pass filters

Figure 3: Step responses of norm. low pass filters
Obviously, the frequency responses give a somewhat
wrong impression of the filter characteristics: Although Butterworth and Chebyshev filters have a
significantly steeper magnitude as the CriticalDamp-

532

Modelica 2006, September 4th  5th

The LinearSystems Library for Continuous and Discrete Control Systems

ing and Bessel filters, the step responses of the latter
ones are much better since the settling times are
shorter and no overshoot occurs. This means for example, that a CriticalDamping or a Bessel filter
should be selected, if a filter is mainly used to make
a non-linear inverse model realizable.
3.4

Record DiscreteStateSpace

This record defines a linear time invariant difference
equation system in state space form. At the time of
writing, this record contains only the core function
fromStateSpace(..) to transform a StateSpace description in a DiscreteStateSpace form. The details of
this record and of this function are discussed in section 4.3.

4
4.1

Sublibrary Sampled
Overview

4.2

The core of the LinearSystems library is sublibrary
Sampled to model continuous and discrete multi-rate
control systems. Experience shows that the combination of physical plant models that are controlled by
digital controllers slow down the simulation speed
significantly, if the sampling rates of the digital controllers are small compared to the step-size that could
be used for the continuous plant. For example, at
DLR detailed, calibrated models of robot systems are
available. A stiff solver with variable step size integrates this system with step sizes in the order of 10 
20 ms. When replacing the continuous approximation of the controllers by the actual digital controller
implementation, the simulation time is increased by
a factor of 20-30. The reason is that the digital controllers have a sample time in the order of 1 ms and
therefore the step size of the integrator is limited by
1 ms. Additionally at every sample point the integrator has to be restarted to reliably handle the discontinuous change of the actuator signal which reduces
again the simulation efficiency.
For some design phases a continuous approximation
of a controller might be sufficient, e.g., when tuning
the controller parameters by parameter variation or
multi-criteria optimization. By reducing the simulation time with a factor of, say 20-30, will then significantly reduce the optimization time.
It is also necessary to validate or fine tune the controllers with the most detailed models available.
Then effects such as sampling, AD-/DA-converter
quantization, resolver quantization and noise, com-

The Modelica Association

puting time of the control algorithms, signal communication times, as well as additional filters have to be
taken into account.
Practical experience at DLR shows that it is difficult
to maintain the consistency between a continuous
and a digital representation of a control system
model. For this reason, in a master thesis project
(Walther 2002) a Modelica library was developed
that allows to easily switch between a continuous
and a discrete representation of a controller. This
library has been in use at DLR for some years. Based
on the gained experience in using this library, as well
as new features in Modelica and in the Modelica
simulation environment Dymola (Dynasim 2006),
the library was considerably restructured, and completely newly implemented. Besides (Walter 2002),
the books of (Astrm and Wittenmark 1997) and
(Tietze and Schenk 2002) have been helpful for the
design and the actual implementation.
Introductory Example

In the left part of Figure 4 below a screenshot of the
Sampled library and a simple example in using it is
shown in the right part of the figure. The example is
a simple controlled flexible drive consisting of a motor inertia, the gear elasticity and the load inertia.
The angle and the angular velocity of the motor inertia are measured and are used in the position and
speed controller. The output of the speed controller
is directly used as the torque driving the motor inertia. The multi-rate controller consists of all blocks in
the red square together with component sampleClock. The latter defines the base sampling time together with defaults for the blockType (Continuous
or Discrete), the methodType (the used discretization
method for a discrete block) and the block initialization (none, initialize states, initialize in steady state).
All Sampled blocks on the same hierarchical level as
sampleClock, and all blocks on a lower hierarchical
level, use the sampleClock setting as a default. Every
block can override the default and can use its individual settings.
In the example of Figure 5, block filter is a continuous filter that filters the reference motion of the motor (here: ramp). For this reason, filter uses explicitly
the blockType Continuous whereas all other blocks
use the blockType UseSampleClockOption, i.e., they
use the setting defined in sampleClock. By changing
the blockType from Continuous to Discrete in block
sampleClock, the controller is automatically transformed from a continuous to a discrete representation.

533

Modelica 2006, September 4th  5th

M. Otter

sampleClock

controller
0.02 s
ramp

filter

sampler3

feedback2

-

p(s)
duration=2

gain

feedback

filter
k*z(s)

PI1

PI

-

f_cut=5

k=kp

k=kv
T=Tv

angle

speed

w

sampler1

sampler2

reference

torque

motorInertia

spring=1e5

loadInertia

tau
J=0.1

d=100

J=0.3

plant (flexible drive)

Figure 4: Blocks of Sampled library (left figure) and introductory example (right figure).
Every block of the Sampled library has a continuous
input and a continuous output. Inside the respective
block, the input and output signals might be sampled
with the base sampling period defined in
sampleClock or with an Integer multiple of it. For
example, the PI controller in Figure 4 has the
following parameter menu to define the continuous
parameterization of the PI controller (i.e., gain k and
time constant T):

Figure 5: Parameter menu of PI controller
In the Advanced Options tab, see Figure 6, the remaining block settings are present, especially to define whether it is a continuous or a discrete block and
in the latter case define also the discretization
method. Since parameter sampleFactor is 1, the base
sampling time of the sampleClock component is
used. In other blocks of the controller (Sampler1,
The Modelica Association

Sampler2), parameter sampleFactor = 5 which
means that the inputs and outputs of these blocks are
sampled by a sampling rate that is 5 times of the base
sample time defined in the sampleClock component.
Note, the samplerX blocks in Figure 4 have only an
effect if the controller is discrete. For a continuous
representation, these blocks just state that the output
signal is identical to the input signal.

Figure 6: Advanced Options parameter menu
Finally, with parameter initType the type of initialization can be defined by using either the setting from
the sampleClock component (default) or a local definition. The default of the sampleClock component
initialization is steady state. This means that continuous blocks are initialized so that the state derivatives are zero and discrete blocks are initialized so
that a re-evaluation of the discrete equations gives

534

Modelica 2006, September 4th  5th

The LinearSystems Library for Continuous and Discrete Control Systems

the same discrete states (provided the input did not
change). Since the equations of the blocks of the
Sampled library are linear, the default setting leads
to linear systems of equations during initialization
that can be usually solved very reliably. The steady
state initialization for a control system or a filter has
the significant advantage that unnecessary settling
times after simulation start are avoided.
4.3

needed by the user of the block, because the continuous state vector is available both in the continuous
and in the discrete case.
In Modelica notation, the difference equation above
is implemented as:
when {initial(), sample(Ts,Ts)} then
new_x_d = A * x_d + B * u;
y = C * x_d + D * u;
x_d = pre(new_x_d);
x = x_d + B2 * u;
end when;

Discretization Methods

The core of the Sampled library is function DiscreteStateSpace.fromStateSpace that transforms a
linear, time invariant differential equation system
in state space form:

x (t ) = A  x(t ) + B  u(t )
y (t ) = C  x(t ) + D  u(t )
into a linear, time invariant, difference equation
system in state space form

x d ( ( k + 1)  Ts ) = A  x d ( k  Ts ) + B  u ( k  Ts )
y ( k  Ts ) = C  x d ( k  Ts ) + D  u ( k  Ts )
x ( k  Ts ) = x d ( k  Ts ) + B 2  u ( k  Ts )

where
 t is the time
 Ts is the sample time
 k is the index of the actual sample instance (k =
0, 1, 2, ...)
 u(t) is the input vector
 y(t) is the output vector
 x(t) is the state vector of the continuous system
from which the discrete block has been derived.
 xd(t) is the state vector of the discretized system

initial equation
if init == InitialState then
x = x_start;
elseif init == SteadyState then
x_d = new_x_d;
end if;

If the discretization method, e.g., the trapezoidal integration method, accesses actual and past values of
the input u (e.g. u(Ts*k), u(Ts*(k-1), u(Ts*(k-2))), a
state transformation is needed to arrive at the difference equation above where only the actual value
u(Ts*k) is accessed.
If the original continuous state vector at the sample
times shall be computed from the discrete equations,
the matrices of this transformation have to be known.
For simplicity and efficiency, library LinearSystems
supports only the specific transformation as needed
for the provided discretization methods: As a result,
the state vector of the underlying continuous system
can be calculated by adding the term B2*u to the
state vector of the discretized system. In fact, since
the discrete state vector depends on the discretization method, it is a protected variable that cannot be
accessed outside of the block. This vector is also not
The Modelica Association

Since no "next value" operator is available in Modelica, an auxiliary variable new_x_d stores the
value of x_d for the next sampling instant. The
relationship between new_x_d and x_d is defined via equation x_d = pre(new_x_d).
The body of the when-clause is active during initialization and at the next sample instant t = Ts. Note, the
when-equation is not active after the initialization at
t = 0 (due to sample(Ts,Ts) instead of sample(0,Ts)),
since the state x_d of the initialization has to be
used also at t = 0. Additional equations are added for
the initialization to uniquely compute vectors x
and x_d at the initial time::

If option InitialState is set, the discrete state vector
x_d is computed such that the continuous state
vector x = x_start, i.e., the continuous state
vector is identical to the desired start value of the
continuous state.
If option SteadyState is set, the discrete controller is
initialized in steady state (= default setting in sampleClock). This means that the output y(Ts*k),
k=0,1,2,.., remains constant provided the input vector u(Ts*k) remains constant. Most simulation systems support steady state initialization only for the
continuous part of a model. Due to the equation
based nature of Modelica, where basically everything is mapped to equations, it is possible in Modelica to initialize also a mixture of continuous and
discrete equations in steady state.
Via parameter methodType in the global block sampleClock or also individually for every block, the
following discretization methods can be selected:
 explicit Euler integration method,
 implicit Euler integration method,
 trapezoidal integration method,

535

Modelica 2006, September 4th  5th

M. Otter



exact solution under the assumption that the input signal is piecewise constant,
 exact solution under the assumption that the input signal is piecewise linear.
The last method (exact solution for piecewise linear
input) gives nearly always the best approximation to
the continuous solution without frequency or phase
distortion. The effect of the discretization methods
and of steady state initialization is demonstrated at
hand of a simple PT2 block that is initialized in
steady state, where the input signal is 0.2 at the beginning and jumps to 1.2 at 0.5 s
In the next figure, the blue curve is the solution of
the continuous block and the red curve is the solution
of the digital block using the implicit Euler integration method for the block discretization. As can be
seen, even for this simple block the results of the
continuous and digital representation are quite different. A much smaller sample time would be needed
here, in order that the solutions of the discrete and
the continuous representations would be closer together.
y (continuous)

2.4

y (implicit Euler integration method)

2.0
1.6
1.2
0.8
0.4
0.0
0

1

2

3

4

5

In the next figure, the red curve is the solution of the
digital block using the rampExact method (i.e. the
exact solution under the assumption that the input
signal is piecewise linear). The solutions of the continuous and of the discrete blocks are practically
identical without any phase shift. A better solution
cannot be expected.
y (continuous)

2.4

The transformation of a ZerosAndPoles system is
more involved in order to reduce numerical difficulties, especially for filter implementations: The basic
approach is to transform the transfer function

 (s + n )   (s
y =k
 (s + d )   (s
1k

+ n2 j  s + n3 j )

2

+ d 2 l  s + d 3l )

u

into a connected series of first and second order systems. All these systems are implemented as small
state space systems in controller canonical form that
are connected together in series. The output is scaled
such that the gain of every block is one (if this is
possible) in order that the inputs and outputs of the
blocks are in the same order of magnitude. The output of the last block is multiplied with a factor so
that the original gain of the transfer function is recovered.
A simpler, alternative implementation for both the
TransferFunction and the ZerosAndPoles systemwould have been to compute the A,B,C,D matrices
of the corresponding state space system with available function calls and then use the general
StateSpace model for their implementations. The
severe disadvantage of this approach is that the structure of the state space system is lost for the symbolic
preprocessing. If, e.g., index reduction has to be applied (e.g. since a filter is used to realize a non-linear
inverse model), then the tool cannot perform the index reduction anymore. Example:
Assume, a generic first order state space system is
present

x = a  x + b  u
y = c  x + d u
and the values of the scalars a,b,c,d are parameters
that might be changed before the simulation starts. If
y has to be differentiated symbolically during code
generation, then

y = c  x + d  u
x = a  x + b  u

y (exact for piecewise linear input)

2.0

As a result, the input u needs to be differentiated too,
and this might not be possible and therefore translation might fail.
On the other hand, if the first order system is defined
to be a low pass filter and the state space system is
generated by keeping this structure, we have:

1.6
1.2
0.8
0.4
0.0

2

1i

0

1

2

3

4

5

Continuous models in StateSpace form are transformed into discrete systems according to the
sketched discretization methods. A TransferFunction
system description is implemented as state space system in controller canonical form.
The Modelica Association

x = b  x + u
y=x
Differentiating y symbolically leads to:

536

Modelica 2006, September 4th  5th

The LinearSystems Library for Continuous and Discrete Control Systems

y = x
x = b  x + u
Therefore, in this case, the derivative of u is not
needed and the tool can continue with the symbolic
processing.
4.4

Block Components

A short description of the input/output blocks of the
Sampled sublibrary is given in Table 1. As an example block Sampled.StateSpace is shortly described.
Its icon is shown in the figure at
stateSpace
the left. When double clicking on
the block, the parameter menu of
Figure 7 pops up. Here, either the
name of a StateSpace record can be
given, or when clicking on the table symbol at the right end of the input field another
menu pops up in which the 4 matrices can be defined, as shown in Figure 8.

A B
C D

Figure 7: ParameterMenu of StateSpace block
By clicking again on the table symbol a matrix
editor appears that allows to conveniently define a
matrix.
Some of the blocks have only a pure discrete representation, such as the FilterFIR, UnitDelay, Sampler,
ADconverter, DAconverter and Noise blocks. The
continuous representation of these blocks is defined
to be y = u, i.e., the output is identical to the input
which means that these components are effectively
removed.

Name

Description

SampleClock

Global options for blocks of Sampled library (e.g. base sample time)

StateSpace

Continuous or discrete state space system block

TransferFunction Continuous or discrete, single input single output transfer function
ZerosAndPoles Continuous or discrete, single input single output block described by
zeros and poles
Analog low or high pass IIR-filters
Filter
(CriticaDaming/Bessel/Butterworth/ Chebyshev)
FilterFIR

Discrete finite impulse response (low or high pass) filters

Integrator

Output the integral of the input signal (continuous or discrete block)

Derivative

Approximate derivative (continuous or discrete block)

FirstOrder

First order (continuous or discrete) transfer function block (= 1 pole)

SecondOrder

Second order (continuous or discrete) transfer function block (= 2 poles)

PI

Proportional-Integral controller (continuous or discrete block)

UnitDelay

Delay the input by a multiple of the base sample time if discrete block or
y = u if continuous block

Sampler

Sample the input signal if discrete block or y = u if continuous block

ADconverter

Analog to digital converter (including sampler)

DAconverter

Digital to analog converter (including zero order hold)

Noise

Generates uniformly distributed noise in a given band at sample instants
if discrete and y = 0 if continuous
Table 1: Blocks of the Sampled sublibrary.

The Modelica Association

537

Modelica 2006, September 4th  5th

M. Otter

Figure 8: ParameterMenu of StateSpace record

5

Conclusion

The new, free LinearSystems library has been presented and important implementation details have
been discussed. The library introduces a standard
definition of the most important linear systems used
for controller definitions and provides continuous
and discrete block representations of every block.
Some standard blocks, such as the Filter block for
the most important IIR filters and the FilterFIR block
for the most important FIR filters are provided.
The library is currently available in a Beta release.
The available functionality is already very useful for
controller simulations. For a first 1.0 release, some
missing functions and components will be added and
the documentation will be improved.

6

Acknowledgements

The first version of the LinearSystems.Sampled library was the library "Sampled" of Nico Walther as
a result of his master thesis from the electrical engineering at the HTWK-Leipzig (supervised by Prof.
Mller, HTWK, and Prof. Martin Otter, DLR).
Based on the experience in using the Sampled library, new features in Modelica as well as in Dymola, the Sampled library was considerably restructured, and newly implemented. Not all blocks from
the previous version are yet included.
Some functionality of LinearSystems (e.g., linearizing a Modelica model by StateSpace.fromModel) has
been originally developed by Sven Erik Mattsson
from Dynasim.
The Modelica Association

The Math.Complex, Math.Polynomial, and TransferFunction packages are based on proposals from
Hilding Elmqvist, Dynasim, presented at the 33rd
Modelica design meeting in Bielefeld (Nov. 2003)
and the 37th Modelica design meeting in Lund (Jan.
2004).
Several functions of package Complex have been
provided by Anton Haumer, who also performed a
thorough test of the package.
The design of the records (such as Math.Complex
and Math.Polynomial) has been inspired by the discussions about operator overloading at various Modelica design meetings.
Advice for implementation issues given by Hans
Olsson from Dynasim, as well as advice for some
numerical algorithms given by Andras Varga and
Dieter Joos from DLR is appreciated.
Partial financial support of DLR for the development
of this library within the European Network of Excellence HYCON (Hybrid Control: taming heterogeneity and complexity of networked embedded systems; contract number: 511368), and within the
German BMBF Verbundprojekt PAPAS (Plug-AndPlay Antriebs- und Steuerungskonzepte fr die Produktion
von
Morgen;
Frderkennzeichen:
02PH2060) is highly appreciated.

References
Astrm K.J., Wittenmark B. (1997): Computer Controlled
Systems: Theory and Design. Prentice Hall. 3rd edition.
Dynasim (2006). Dymola Version 6.0. Dynasim AB,
Lund, Sweden. Homepage: http://www.dynasim.se/.
Tietze U., and Schenk C. (2002): HalbleiterSchaltungstechnik. Springer Verlag, 12. Auflage,
pp. 815-852.
Walther N. (2002): Praxisgerechte Modelica-Bibliothek
fr Abtastregler. Diplomarbeit, HTWK Leipzig,
Fachbereich Elektro- und Informationstechnik, supervised by Prof. Mller (HTWK) and Prof. Martin
Otter (DLR), 12 Nov. 2002.

538

Modelica 2006, September 4th  5th

ARENALib: A Modelica Library for Discrete-Event System Simulation

ARENALib: A Modelica Library for Discrete-Event System
Simulation
Victorino S. Prat Alfonso Urquia Sebastian Dormido
Departamento de Informatica y Automatica, ETS de Ingeniera Informatica, UNED
Juan del Rosal 16, 28040 Madrid, Spain
E-mail: {vsanz, aurquia, sdormido}@dia.uned.es

Abstract
The design, implementation and use of ARENALib
is discussed in this manuscript. ARENALib is a
new Modelica library for modeling, simulation and
analysis of discrete-event systems (DES). This new
Modelica library tries to replicate the functionality
and capabilities of Arena: a general-purpose simulation environment supporting the process approach
to DES modeling [1]. ARENALib library will be
released soon under the GNU General Public License
(GPL). The librarys general architecture, implementation and use are presented. Also the results of some
model simulations, validated with Arenas results are
discussed, as well as the future work and conclusions.

which is a simulation environment for DES modeling
and simulation using the process approach.
ARENALib validation is performed by comparison
with Arena, when simulating the same systems.
In the next section, the capabilities and functionality
of Arena will be discussed. It will be followed by
a description of ARENALib general architecture, detailing the main components of the library. The connection between discrete and continuous systems using ARENALib will also be presented, as well as the
random numbers and variates generation. After that, a
simple case study will be explained in detail in order to
show the use of the library, followed by the simulation
and experiment setup. Finally an extended case study,
future work notes and conclusions are provided.

Keywords: discrete-event; DES; Arena

2
1 Introduction
ARENALib is a new Modelica library for DiscreteEvent System (DES) modeling and simulation.
The main objective of this library is to provide a modeling and simulation environment for DES using the
process approach, opposite to other contributions in
Modelica that use Statecharts[2, 3] or Petri nets[4] approaches.
ARENALib has also to be considered as a generalpurpose tool, instead of application-oriented libraries
developed by other authors (for example [5]). DES
models built using ARENALib are completely written
in Modelica language and they can be simulated using
Dymola, as opposed to other approaches that require
the combined use of different software tools (for instance, [6]).
When finished, ARENALib will be freely distributed
under the GNU-GPL license.
ARENALib has been designed and implemented replicating the functionality and capabilities of Arena [1],
The Modelica Association

Arena

The process approach describes the system from the
entity perspective. The entity is the basic component
of the simulation model.
To support this approach to DES simulation, Arena
components are arranged into panels. The main panel
is called Basic Process, and contains the main basic
components for system simulation.
Panel components can be classified into two types:
flowchart modules and data modules. Flowchart modules allow to describe the entity flow through the system (dynamic part of the system). They include Create, Process, Dispose, Decide, Batch, Separate, Assign and Record modules. Data modules describe the
characteristics of system elements (static part), such as
Entity, Queue, Resource, Variable, Schedule and Set
modules. The procedure for building a model consists
in drawing the flowchart diagram and configuring the
required data modules. This procedure is analogous in
ARENALib and will be detailed in Section 10.
At this moment, ARENALib implements the Create,

539

Modelica 2006, September 4th  5th

V.S. Prat, A. Urquia, S. Dormido

Process, Dispose and Decide flowchart modules and
the Entity, Resource and Queue data modules. This
implementation is described below.

3 ARENALib Architecture

 Process module, simulates the point for entity
processing.
 Dispose module, where the entities leave the system.
 Decide module, simulates a division in the flow
of entities.

ARENALib has been designed around the idea of implementing the Arenas Basic Process panel and being Data Modules, representing the components of every
able to model and simulate the same kind of systems process in the system, such as:
than Arena. As a consequence, its architecture has
 EntityType module, describes the characteristics
been divided in two parts ( ARENALib general archiof the entities.
tecture is shown in Figure 1a)):

 Queue module, represents the queue where the
 The user zone, that contains the Basic Process
entities should wait for processing.
panel modules (flowchart and data), the Project
model draft which is the start package for new
 Resource module, are the components of the desystems models and the tutorial package that infined processes.
cludes some examples to help the beginner user
to get used with the library. The structure of this All these modules will be discussed in Sections 6 and
7.
zone is shown in Figures 1c),1b) and 1d).
 The developer zone, stored in the src package,
contains all the internal models and functions 5 Interfaces
used by ARENALib simulations. Details about
As previously mentioned the connection between
this package are shown in Figures 1e) and 1f).
modules is one of the main problems encountered durThe user zone will be detailed in Section 10, while the ing the development of the library.
developer zone will be discussed in the next sections. One of the problems of module connection is that, for a
given point in time, several and different entities could
The main problem that has been addressed in
be arriving at the same module. This means that the
ARENALib is the management of the dynamical besame connector has to receive different entities from
havior of the components of the system. It includes the
different modules of the system.
entity flow management, seizing and releasing of reAt the beginning, the approach taken to solve this
sources and the generation of the statistical indicators.
problem was to implement an entity receival interface
This problem has been solved using dynamic-memory
for each module. This interface was basically a text
structures implemented as an static library (written in
file in which the information of the received entity was
C language). The static library is connected to the
written. The module that received the entity could read
Modelica code using Modelicas external-function init from the file and process it. This solution was sucterface. Packages Ext and DynMem contains the funccessful for small systems. However, the use of text
tions to access the static library ( these packages are
files is very time consuming and the performance for
shown in Figures 1e) and 1f)).
large models was poor.
To solve that performance problem a dynamic memory
interface was implemented for data exchange among
4 Basic Process Panel
modules. This interface consists in storing in an InAnalogously to Arenas process approach schema, teger variable in Modelica a number that corresponds
ARENALib has been divided in two type of modules: to the pointer to a Dynamic Data Structure (DDS) preflowchart modules and data modules. Flowchart Mod- viously created. These DDSs are stored in memory
ules, that enables the modeler to describe the flow of and correspond to the main data structures used in the
systems simulation, such as queues and linked lists of
entities in the system. It is composed by:
elements. There is a DDS for managing queues of en Create module, represents the creation or arrival tities, lists of resources, lists of entity types, lists of
of entities to the system.
statistical indicators and lists of attributes of an entity.
The Modelica Association

540

Modelica 2006, September 4th  5th

ARENALib: A Modelica Library for Discrete-Event System Simulation

a)

d)

b)

c)

e)

f)

Figure 1: ARENALib architecture: a) General Architecture; b) Model Draft; c) Tutorial; d) BasicProcess; e)
Interfaces; f) Random Variates

The performance was increased about 40 times from (one input and two outputs).
the text files approach.
So the interface between modules is composed by an
integer number, which corresponds to the pointer to
the entity receival queue of a given module, and indicates the memory address for accessing the queue.
Also, every module has a queue of outgoing entities
for managing the order in which the entities are transfered to the next module.

6

Flowchart Modules

Flowchart modules are used to model the flow of entities through the system. This entity flow begins in
Create modules, and finish in Dispose modules. In this
section, each of the currently implemented modules is
detailed and its use and configuration parameters are
For the development of the flowchart modules, some shown.
general interfaces have been implemented. The basic
ones are the connectors for input and output entities.
Based on these basic connectors several models have
been created to cover all the possible interfaces of the
flowchart modules. Depending on the number of inputs and outputs of each module they can be classified into: InBlock (one input), OutBlock (one output),
InOutBlock (one input and output) and In2OutBlock
The Modelica Association

6.1

Create

As mentioned before, it allows to model the arrival of
entities to the system. This arrival is expressed in form
of an inter-arrival time between entities. The module
extends the OutBlock interface module. The parameters of the module are the following:

541

Modelica 2006, September 4th  5th

V.S. Prat, A. Urquia, S. Dormido

 EntityType, is the type of the entities created in
the module. This entity type has to be previously
instantiated from an entity type data module.

 Resources, is the list of the resources associated
to the process. Each resource has to be previously
declared using a resource data module.

 Entity Generation Function, represents the interarrival time. This time can be calculated from: (1)
a probability distribution; (2) a constant expression and (3) a Modelica variable from any other
model.

 Resource Quantities, defines the quantity of each
resource that has to be seized by the entity. If any
of the resources does not have the specified quantity available then the seize operation fails and
the entity must wait in the queue. This parameter must have the same length than the previous
one.

 g1,g2 and g3, are the parameters of the previous
function. Depending on the distribution selected
the meaning of each one changes.

 Queue, is the queue associated to the process. It
has to be previously defined with a queue data
module.

 TimeUnit, is the local time unit. The inter-arrival
time will be based on it.

 Delay type, represents the processing time for an
entity. It can be a continuous value or a probability distribution.

 Entities Per Arrival, defines the number of entities generated in each arrival time.
 Max Arrivals, establishes the maximum number
of entities generated in the module. If the number
of entities reach this value, no more entities will
be created.

 g1, g2 and, g3, are the parameters of the Delay
type function.

 First Creation, sets the simulated time when the
first entity is created.

 Allocation, determines the kind of process the
module is simulating. Possible values are Value
Added, Non Value Added, Wait , Transfer and Other, and will influence the statistical
results of the entities processed.

6.2

 TimeUnit, also represents the local time unit. It is
the base time for the delay value.

Process

It defines a process. It extends the InOutBlock interface module. The parameters of the module are the
6.3 Dispose
following:
It is the final point for the entities in the system: they
 Name, the name of the module.
are removed from the system and their statistical infor Type, can be standard and submodel. The stan- mation is stored. For that reason, this module has no
dard defines a simple process configured by the parameters.
module parameters. On the other hand, the submodel indicates that this module is just a mask
for a more complicated process, composed by a
DES itself. The submodel type is not fully implemented, but it can be easily done by using the
Modelicas object oriented capabilities.

6.4

Decide

It permits the modeler to simulate a division in the flow
of the entities. Given a chance or a condition, the module decides the output connector the entity will leave
the module through. It extends the In2OutBlock in Action, the possible values are Delay, Seize- terface model. The parameters of the module are the
Delay, Seize-Delay-Release and Delay-Release. following:
Depending on the option chosen, the entity will
 Type, establishes the type of flow division, either
seize a resource, be processed (delayed), and at
by chance (percentage) or by condition. At this
the end release the resource.
moment only the by chance option is implemented.
 Priority, establishes the priority of entity selec Percent True, is the percentage of entities that will
tion from the waiting queue. This option is not
leave the module through its True output connecimplemented yet. The entity selected is the first
tor.
in the queue (FIFO).
The Modelica Association

542

Modelica 2006, September 4th  5th

ARENALib: A Modelica Library for Discrete-Event System Simulation

7 Data Modules

(in the Process module) is used to tell the continuous system which entity (with its serial number)
has seized the resource and is ready to be processed.

Data modules represent the static components of the
system. These are the entities themselves and the rest
of the components that will interact with them along
its flow, such as queues and resources. At the present,
three modules have been implemented and are detailed
below.

7.1

EntityType

This data module defines the attributes of a type of
entity. These attributes are the name, the picture of
the entity (currently not implemented), and the costs
associated to the entity.

7.2

 Real ones, are just values for the rest of the available parameters of the modules, such the time for
the first arrival, the maximum arrivals, the priority, etc.
On the other hand, each discrete module provides information that can be accessed using the Modelica dot
notation. The list of variables that can be accessed for
each module is displayed in the information icon of the
modules model.

Queue

It is used to describe process queues. The only type of
queue currently implemented is the FIFO.

9

Random Variables

A key point in DES simulation is the random number generation. This section has been divided into two
7.3 Resource
parts to separate the random number generation (obThis module represents the resources used by the en- servations of the U(0, 1) distribution) from the variate
tities in the processes. An entity must seize (when generation.
needed) the resource in order to be processed. After
processing, the entity can release the resource or not,
9.1 Random Number Generation
depending on the kind of process performed.
Due to the DES dependence on stochastical distri8 Connection with other Modelica butions and to ensure good simulation results, it is
very important to have a good source for pseudomodels
random numbers, to build statistically good random
variates[7].
ARENALib modules can be connected to other ModelAlso, in order to be able to analyze and validate the
ica models, so hybrid continuous-discrete systems can
results from ARENALib in comparison with the ones
be easily modeled.
obtained from Arena, the same pseudo-random numArena provides the possibility of including continuber generator has been implemented.
ous modules in the models, however this possibility is
This random number generator is called CMRG (Comvery limitated. Analogously, ARENALib provides inbined Multiple Recursive Generator) [8] and has a peterfaces in each module to perform a connection with
riod length of 2191 . This period length can be divided
any Modelica model, which is much more powerful
into disjoint streams, each of them of length 2127 .
than Arenas capabilities.
This connection interfaces give the modeler the pos- ARENALib associates one of those streams with each
sibility of configuring ARENALib module parameters Random Variable, so the random number stream independency can be ensured for variate generation.
from external Modelica models.
The implementation of the CMRG has been done
We can separate the connection interfaces in two:
translating the implementation in C, done by Pierre L.
 Integer ones, that represent the transfer of entity Ecuyer (available on the web at [9]), into Modelica
related events between discrete and continuous code. In this way, the generator is available for anyone
systems. The input Integer connector is used to outside the ARENALib environment. The only remarktell the system that an entity has arrived or that an able thing for its usage is the management of the seed,
entity has finished the processing (in the Create which is read from a text file and updated every time a
and Process modules). And the output connector new stream is generated.
The Modelica Association

543

Modelica 2006, September 4th  5th

V.S. Prat, A. Urquia, S. Dormido

9.2

Random Variates Generation

To provide the modeler enough functionality for modeling and simulating many kind of systems, some
of the most commonly-used probability distributions
have been implemented and included in the library.
These distributions are functions that use the stream
created by the CMRG to generate random variates.
The output variables of all the distribution functions
are the variates value and the updated random stream,
that will be used to obtain more new variates. The input variables of the functions are the following:
9.2.1

Continuous Probability Distributions

 Uniform (min,max)
 Exponential (mean)
 Normal (mean,variance)
 LogNormal (mean,variance)
 Triangular (min,mode,max)
9.2.2

Discrete Probability Distributions

 Bernoulli (p)

system. The flowchart diagram is presented in Figure
2.
The data modules are: (1) the entity type that represents the processed parts; (2) the drilling press viewed
as a resource; and (3) the queue associated to the press.
For building this model in ARENALib we should use
the package ModelDraft, duplicate and rename it to
match our model requirements. This package includes
all the basic components necessary to simulate the system.
Inside the ModelDraft there are two structures, the
flowchart diagram that will be used to compose the
systems structure and the data package which contains models for structuring all the needed data modules of our system.
For building the Drilling Center in ARENALib, an entity type, a resource and a queue modules have to be
inserted in their corresponding data models, and then
the flowchart diagram has to be drawn by drag a drop
of a create, a process and a dispose module.
The last step is to configure the parameters of each
data and flowchart module, as desired, to match the
requirements of the system.

10.2

Simulation and Experiment Setup

 Discrete Uniform (min,max)
 Binomial (n,p)

Indicator
Part.NumberIn
Part.NumberOut
Part.VATime
Part.WaitTime
Part.WIP
VATimePerEntity
WaitTimePerEntity
TotalTimePerEntity
Queue.NumberInQueue
Queue.WaitingTime

 Geometric (p)
 Negative Binomial (n,p)
 Poisson (alpha)

10 ARENALib Use

Arena
Average
20010
20006
3.3254
3.4822
1.3622
3.3254
3.4822
6.8077
0.69695
3.4827

Half Width

0.01574
0.24270
0.06354
0.1574
0.24270
0.24771
0.05623
0.2427

ARENALib
Average
19887
19887
3.3385
3.4571
1.3527
3.3385
3.4571
6.7956
0.68754
3.4571

In this section the use of ARENALib will be introduced
Table 1: Results of the drilling center simulations
by means of a simple example. The development of
the model, the experiment setup, the analysis of the
results an the validation with Arena are explained in When having the systems model, and after having
configured all the parameters of the modules, a simdetail.
ulation experiment can be run.
There are two basic parameters for each simulation.
10.1 Model Description
The simulation time and the global time unit. The
It is a very simple case of a processing system. The first one establishes the duration of the simulation exmodeled system consists on a Drilling Center where periment, and the second one is the time unit (secthe parts arrive, are drilled (processed) and leave.
onds, minutes, hours,etc.) in which the simulation
The flowchart components of the system are a create time is established. These two parameters will influmodule, that represents the parts arriving to the center, ence the time unit parameter of the modules in the sysa process module, which is the drilling center itself and tem, translating the values in each module to match the
finally the dispose module where the parts leave the simulation time.
The Modelica Association

544

Modelica 2006, September 4th  5th

ARENALib: A Modelica Library for Discrete-Event System Simulation

a)

b)

Figure 2: Drilling center model composed using: a) ARENALib; and b) Arena

When the simulation time is finished, the statistical results of the run are written to a file named SimResults.dsc. After that, the only remaining variable in
the system is the CMRG seed. This ensures that several experiments of the same model will, each of them,
use different pseudo-random numbers.
Results from the Drilling Center simulation are shown
in Table 1. These results have been obtained using
Dymola.
Several experiments can be easily configured using
Modelicas scripting facilities.
Other result analysis capabilities are the plots. Every
module has several variables that can be plotted at the
end of the simulation and permits the analysis of the
evolution in time of the experiment. This can be very
useful to detect peak loads or compare several parameters in the system.

Indicator
Bottle.NumberIn
Bottle.NumberOut
Bottle.VATime
Bottle.WaitTime
Bottle.WIP
Labeling.NumberIn
Labeling.NumberOut
Labeling.VATimePerEntity
Labeling.WaitTimePerEntity
Labeling.TotalTimePerEntity
Labeler q.NumberInQueue
Labeler q.WaitingTime
Cleaning.NumberIn
Cleaning.NumberOut
Cleaning.VATimePerEntity
Cleaning.WaitTimePerEntity
Cleaning.TotalTimePerEntity
Cleaner q.NumberInQueue
Cleaner q.WaitingTime

Arena
Average
637
623
6.1618
35.894
5.3305
659
645
5.3348
34.697
40.031
4.5534
34.723
22
22
19.202
1.0079
20.210
0.0044
1.0079

Half Width

0.35771
5.2451
(Corr)

0.13555
(Corr)
5.6018
(Corr)
(Corr)

(Insuf)
(Insuf)
(Insuf)
(Insuf)
(Insuf)

ARENALib
Average
650
632
6.405
36.237
5.5132
677
660
5.3026
34.796
40.098
4.7017
34.839
28
27
20.44
0
20.44
0
0

Table 2: Results of the Bottle Filling simulations

The results of the simulation and the validation data,
from the comparison with the Arenas results, are presented in Table 2. Also some plots from Dymolas
As a case study, a Bottle Filling process is discussed.
simulation results are shown in Figure 4.
This process consists in a tank which fills bottles with
liquid. Once a bottle is full, it is labeled and controlled
in two quality control processes. The bottles that pass 12 Future Work
the first control are considered as first class bottles and
the ones that pass the second control are considered as The main task for the future work will be the Basic
second class bottles. Any bottle that doesnt pass the Process panel development completion, including the
second quality control process is cleaned and relabeled modules still not implemented and the rest functionalities for the existing ones.
again.
The tank has been modeled as a continuous system Other problems, that actually delay the development of
which fills the bottles at a constant rate. Every 400 the whole library, are the management of different data
time units the tank is refilled to its maximum level.
types for attributes and variables and the implementaThe flowchart diagram of the process is displayed in tion of variable size matrices, for example, when introFigure 3, modeled either in Modelica and Arena.
ducing entity attributes that can be modified dynami-

11 Case Study

The Modelica Association

545

Modelica 2006, September 4th  5th

V.S. Prat, A. Urquia, S. Dormido

cally during the simulation by any module, or the use
of system variables whose value and size can change
similarly to the attribute ones.
The solution for these problems is still in progress but
will be solved soon, enabling the further development
of the whole library.
The tutorial package will also be completed with more
examples as well as the information pages for every
module, either in the user zone and the development
zone.
Visual representation of the simulations will also be
studied.

13 Conclusions
A new Modelica library has been designed and implemented, offering the possibility of modeling DES and
hybrid continuous-discrete systems in a simple way.
This new library is based on Arena, a simulation environment for DES.
This new library is completely compatible with the rest
of the Modelicas components.
Several experiments have been performed obtaining
successful results. Validation has been done using
Arena for comparing results.

2nd Int. Modelica Conference, 2002, pp. 209
213.
[6] Remelhe M.A.P. Combining Discrete Event
Models and Modelica - General Thoughts and
a Special Modeling Environment. In: Proc. of
the 2nd Int. Modelica Conference, 2002, pp. 203
207.
[7] LEcuyer P. Software for uniform random number generation: distinguishing the good and the
bad. In: Proc of the 33rd conference on Winter
simulation, 2001, pp. 95105.
[8] LEcuyer P, Simard R, Chen E. J, Kelton W. D.
An Object-Oriented Random-Number Package
with Many Long Streams and Substreams. Operations research, vol. 50, 2002, pp. 10731075.
[9] LEcuyer P. CMRG source code web page.
http://www.iro.umontreal.ca/ lecuyer/myftp/streams00/
July, 2006.

References
[1] Kelton W.D, Sadowski R.P, Sturrock D.T. Simulation with Arena (Third Edition). McGraw-Hill,
2004.
[2] Otter M, Arzen K.-E, Dressler I. StateGraph A Modelica Library for Hierarchical State Machines. In: Proc. of the 4th Int. Modelica Conference, 2005, pp. 569578.
[3] Ferreira J. A, Estima de Oliveira J.P. Modelling
Hybrid Systems using Statecharts and Modelica. In: Proc. of the 7th IEEE Int. Conference
on Emerging Technologies and Factory Automation, 1999.
[4] Mosterman P.J, Otter M, Elmqvist H. Modelling
Petri Nets as Local Constraint Equations for
Hybrid Systems using Modelica. In: Proc. of
the Summer Computer Simulation Conference,
1998, pp. 314319.
[5] Farnqvist D, Strandemar K, Johansson K. H,
Hespanha J.P. Hybrid Modeling of Communication Networks Using Modelica. In: Proc. of the
The Modelica Association

546

Modelica 2006, September 4th  5th

ARENALib: A Modelica Library for Discrete-Event System Simulation

a)

b)

Figure 3: Bottle Filling model composed using: a) ARENALib; and b) Arena

The Modelica Association

547

Modelica 2006, September 4th  5th

V.S. Prat, A. Urquia, S. Dormido

Figure 4: Bottle Filling model result plots using Dymola

The Modelica Association

548

Modelica 2006, September 4th  5th

Neural Network Library in Modelica

Neural Network Library in Modelica
Fabio Codeca Francesco Casella
Politecnico di Milano, Italy
Piazza Leonardo da Vinci 32, 20133 Milano

Abstract
The aim of this work is to present a library, developed
in Modelica, which provides the neural network mathematical model. This library is developed to be used
to simulate a non-linear system, previously identified
through a specific neural network training system. The
NeuralNetwork library is developed in Modelica
2.2 and it offers all the required capabilities to create
and use different kinds of neural networks.
Currently, only the feed-forward, the elman[6] and the
radial basis neural network can be modeled and simulated, but it is possible to develop other kinds of neural
network models using the basic elements provided by
the library.
Keywords: neural network, library, simulate, model

1 Introduction

There are, in literature, different kinds of neural networks, many different algorithms to train them and
many different softwares to do this task. For this reason, the library purposefully lacks any function to train
a neural network; the training process has to be made
by an external program. The MatLab[8] Neural Network toolbox was chosen, during the development and
the tests, because it is commonly used and it is extremely powerful; however any other training software
can be used.
The library was already used to develop and simulate the neural network model of an electro-hydraulic
semi-active damper.
The paper is organized as follows. Section 2 presents
the neural network mathematical model: a briefly description about the characteristics of each kind of network, implemented in the library, is provided. Section
3 describes the chosen library architecture and the reasons which guide its implementation. Section 4 shows
an example of library use: the entire work process will
be explained, from the neural network identification,
with an external training software, through the network parameters exchange (from the training software
environment to the Modelica one), to the validation of
the Modelica model. Last section (5) shows some possibilities of future work, and draws some conclusions.

The work described in this paper is motivated by the
lack of publicly available Modelica libraries for neural
networks. A neural network is a mathematical model,
which is normally used to identify a non-linear system.
Its benefit is the capability to identify a system also
when its model structure is not defined. For such a
characteristic, sometimes it is used to model complex
non-linear system.
There are different kinds of neural networks in litera- 2 Neural Network model
ture and all of them are characterized by a specific architecture or some other specific features. This library The neural network mathematical model was born in
takes into consideration only three types of neural net- the Artificial Intelligence (AI) research sector, in parworks:
ticular in the structural one: the main idea is to reproduce the intelligence and the capability to learn from
 the feed-forward neural network,
examples, simulating the brain neuronal structure on
an calculator.
 the elman[6] neural network, which is a recurrent
The first result was achieved by McCulloch and Pitts
neural network,
in 1943[1], when the first neural model was born.
In 1962 Rosenblatt[2] proposed a new neuron model,
 the radial basis neural network,
called perceptron, which could be trained through exbut the basic elements of the library make possible the amples. A perceptron makes the weighted sum of the
construction of any other different neural network.
inputs and, if the sum is greater then a bias value, it
The Modelica Association

549

Modelica 2006, September 4th  5th

F. Codec, F. Casella

sets its output as 1. The training is the process used to
tune the value of the bias and of the parameters which
weight the inputs.
Some studies[3] underline the perceptron training limits. Next studies[4], otherwise, show that different basic neuron models, complex neuron networks architecture as suitable learning algorithms, ensure to go
beyond the theoretical perceptron limits.
Three kinds of neural networks, which are described
in the following paragraphs, were taken into consideration in the library: they differ in neuron model and
network architecture.

2.1

Feed-forward neural network

The feed-forward neural network is the most used neural network architecture: it is based on the series connection of neuron layers, each one composed by a set
of neurons connected in parallel. Examine the i  th
layer: the layer inputs, u1 , u2 , . . . , un , are used by r
neurons, which produce r output signals, y1 , y2 , . . . , yr .
These signals are the inputs of the next layer, the
i + 1  th layer.

s = lim () = in f ,
s

s = lim () = in f .
s

For this reasons, it is usually called sigmoid. Different
functions can be used; the most used are:
 (s) = tanh(s) (called in MatLab tangsig);
 (s) =

1
1+expn

(called in MatLab logsig);

A linear function is also used as activation function: it
is normally used for the neurons which compose the
output layer ((s) = s (called in MatLab purelin)).
The feed-forward architecture allows to build very
complex neural networks: the only constraint is to
connect the layer in series and the neurons of a layer in
parallel, each of them with the same activation function. The first section of the network, which takes the
inputs and passes them to the first layer without doing
anything, is usually called Input layer. The last layer
is called Output layer and the others are called Hidden
layer1 .

Figure 1: Standard neuron model
The neuron used in the feed-forward neural network
is called standard neuron (figure 1). A standard neuron maps Rq into R; it is characterized by n inputs,
u1 , u2 , . . . , un , and one output, y. The first step, which
is taken by the neuron, is to compute a weighted sum
of the inputs: the result is called activation signal

Figure 2: A feed-forward neural network structure

An important theoretical result, related to the feedforward neural network, ensures to specify which is
the non-linear function class that can be evaluated by a
specific neural network. The result is applicable to different kinds of networks: in particular, it involves the
s = w0 u0 + w1 u1 + w2 u2 + . . . + wn un ,
standard neural network. This network is composed
by only two layers: an Hidden layer, composed by m
where w0 , w1 , w2 , . . . , wn are real parameters. w0 is the neurons2 , which processes n inputs, u1 , u2 , . . . , un , and
neuron bias and w1 , w2 , . . . , wn are the neuron weights. an Output layer, composed by one neuron with a linear
The second step is to perform a non-linear elaboration activation function.
of s, obtaining y. This is computed using a function
1 this is not an univocal nomenclature; for example, in MatLab,
() (R  R), called activation function; it is usually the first neuron layer is called Input layer and the others are simply
a real function of real variable, monotonically increas- called layer.
2 all having the same activation functions
ing, with a lower and an upper asymptote:
The Modelica Association

550

Modelica 2006, September 4th  5th

Neural Network Library in Modelica

Theorem 1 (Universal Approximator[4]) Take
a
standard neural network where () satisfies the
following conditions:
1. lims (s) = 1,
2. lims (s) = 0,
3. () is continuous.
Taking a function g(u) : Rq  R, continuous on a set
Iu compact in Rq , and an  > 0, a standard neural
network exists which achieves the transformation y =
f (u) so that

Figure 3: An Elman neural network

2.3

Radial basis neural network

|g(u)  f (u)| < , u  Iu .

The Radial basis neural network is used as an alternative to the feed-forward neural network. Like this one,
it is based on the series connection of layers, each of
2.2 Recurrent neural network (Elman)
them composed by a set of neurons connected in parA particular type of neural network is the recurrent
allel. Two are the main differences:
neural network. This network is a dynamical system,
in which the output depends on the inputs and the in the number of layers is commonly fixed, with one
ternal state, which evolves with the network inputs. If
Hidden layer and one Output layer;
the internal state is Z(t), the network then agrees to the
 the basic neuron is not the standard neuron but it
following relations:
is called radial neuron.

Z(t + 1) = F(Z(t),U(t))
A radial neuron maps Rq into R; it is characterized by
Y (t)
= G(Z(t),U(t))
n inputs, u1 , u2 , . . . , un , and one output, y. The first step
Recurrent networks are usually based on a feedback took by the radial neuron is to compute an activation
loop in the network architecture, but this is not the only signal: it differs from the standard one because it is
way.
not a weighted sum of inputs but it is equal to:
In the library, the Elman[6] neural network is consids = dist({u1 , u2 , . . . , un } , {1 , 2 , . . . , n })b,,
ered: in this network, the feedback loop is between the
output of the Hidden layer and the input of the layer
itself. This allows the network to learn, recognize and
create temporal and spatial models.
An Elman neural network is usually composed by two
layer connected as shown in figure 3: there is an Hidden layer, which is the recurrent layer, composed by
neurons with an hyperbolic tangent activation function
(() = tanh()), and an output layer, characterized
by a linear activation function.
As for the feed-forward neural network, the universal
approximator theorem ensures that the Elman neural
network is an universal approximator of a non-linear
function. The only requirement is that the more the
function to be estimated becomes complex, the more
the number of the neurons, which compose the Hidden
layer, increases.
The only difference between a feed-forward neural
network and an Elman neural network is the recurrence: this allows the network to learn spatial and temporal models.
The Modelica Association

where 1 , 2 , . . . , n are real parameters, regarding
which distances of the inputs are calculated (they are
called centers of the neuron), b is called neuron amplitude and the function dist({x1 , x2 } , {a1 , a2 }) computes
the euclidean distance between {x1 , x2 } and {a1 , a2 }3 .
The following step is to perform a non-linear elaboration of s, obtaining y. This is made using the function
2
() = exp( ) (R  R) which is the radial neuron
activation function; it is not a sigmoid function but a
bell-shaped function (figure 4).
As previously remarked, the radial basis neural network architecture is commonly fixed: there is an Hidden layer, composed by radial neurons, and one Output layer, composed by a standard neuron with a linear
activation function (purelin). Although the structure of
this neural network is more limited, compared to the
feed-forward one, this is not a limit for its approximator capability.

551

3 dist({x

1 , x2 } , {a1 , a2 }) =

p

(x1  a1 )2 + (x2  a2 )2

Modelica 2006, September 4th  5th

F. Codec, F. Casella

 weightTable:
it is a matrix which collects the weight parameters (or the centers
of neurons) used by every neuron of the
layer to weight the inputs; its dimension is
[numNeurons  numInputs];
 biasTable: it is a vector which collects the biases
of neurons that compose the layer; its dimension
is [numNeurons  1];

Figure 4: Radial neuron activation function

As for the feed-forward and the Elman neural net NeuronActivationFunction: it is the activation
works, the universal approximator theorem ensures
function used to compute the output by each neuthat this kind of neural network is an universal approxron of the layer. The neurons, which compose a
imator of a non-linear function. The only requirement
layer, can only have the same activation function.
is that, the more the function to approximate becomes
complex, the more the number of the neurons which Using a network layer as the basic element has the only
compose the Hidden layer increases.
limit that the activation function of each neuron in a
layer must to be the same, but the neural network architectures previously presented dont need this prop3 NeuralNetwork library
erty. Moreover this choice ensures to have an easier
data exchange between the neural network training enThe reason of this library is the lack of an suitable vironment and the Modelica one.
Modelica library, able to simulate a neural network.
This is particularly true when the MatLab Neural NetThe aim was to develop a library with the capabilities
work toolbox is used to train a neural network. As
to create and to simulate such a mathematical model.
reported in the section 4, in the object used by MatLab
There are already many different algorithms to train
to store a neural network, the weights (or the centers of
a neural network and many different softwares to do
neuron) and the bias of layer are collected in a matrix
this task so no training algorithm was given. This rewith the same property of the matrix used to initialize
quires that the training process must be performed by
a NeuralNetworkLayer.
an external software. The MatLab[8] Neural Network
The library is organized in a tree-based fashion (Figure
toolbox was chosen, during the development and the
5), and it is composed by five sub-packages:
tests, because it is used commonly and it is extremely
powerful; however any other training software can be
 the package BaseClasses: it contains only
used. These elements affect some library architectural
one element, the NeuralNetworkLayer;
choices.
The first aim was to give to the users all the elements
 the package Networks: it contains some neuto create the previously presented neural networks: no
ral networks based on the connection of many
constraints were put in for the user, who can create any
NeuralNetworkLayer;
kind of network architecture without limits. The user
himself is directly responsible to use the basic blocks
 the package Utilities: it contains different
correctly and no checks are performed by the library
functions and models used to define some library
blocks.
elements or used itself in the library;
The basic element of the NeuralNetwork library was
chosen to be a network layer. A layer in a neural net the package Types: it contains the constants
work (NeuralNetworkLayer) is a set of neurons
used to specify the activation functions which
which are connected in parallel[5]. It is characterized
characterize a NeuralNetworkLayer;
by the following parameters:
 numNeurons: it is the number of neurons which
compose the layer;

 the package Examples: it contains some examples which allow the user to explore the library
capabilities.

 numInputs: it is the number of inputs of the layer;
The Modelica Association

552

Modelica 2006, September 4th  5th

Neural Network Library in Modelica

 TanSig: the block acts as a layer composed by
standard non linear neurons; the output is equal
to the hyperbolic tangent of the activation sign al
y = Modelica.Math.tanh(s);
 LogSig: the block acts as a layer composed by
standard non linear neurons; the output is equal
to the value returned by the LogSig function:
y = NeuralNetwork.Utilities.LogSig(s);
 RadBas: the block acts as a layer composed by
radial non linear neurons; the output is computed
with the following steps:
Figure 5: Library structure

3.1

 the euclidean distance between the
centers of layer neurons and the inputs is evaluated using the function

BaseClasses - NeuralNetworkLayer

As previously described, there is only one element in the BaseClasses package, the
NeuralNetworkLayer. This is a block with
a MIMO interface, in which the number of inputs is
specified through a parameter and the outputs number
is the same to the neurons one.
The parameters of the NeuralNetworkLayer are:
 numNeurons: it is the number of neurons which
compose the layer
 numInputs: it is the number of inputs to the layer
 weightTable: it is the table of the weights, if the
layer is composed by standard neurons, or the table of the centers of the neuron, if the layer is 3.2
composed by radial neurons

NeuralNetwork.Utilities.Dist()

with the following parameters:
Table, matrix(u)

weight-

 the element-wise product between
the previous function output and the
bias matrix is calculated using the
NeuralNetwork.Utilities.ElementWiseProduct function: this value is

the activation signal s
 the output is then evaluated using the
specific radial neuron activation function
(NeuralNetwork.Utilities.RadBas);

Networks

 biasTable: it is the bias matrix of the neurons
which compose the layer
 NeuronActivationFunction: it is the activation
function of the layer neurons
The NeuronActivationFunction characterizes the
behavior of the neuron network layer. The paFigure 6: Networks package structure
rameter can be selected in the set, defined by
NeuralNetwork.Types.ActivationFuncThis package (shown in figure 6) is composed by
tion; the possible choices and behaviors are:
five blocks: each one represents a neural network.
 PureLin: the block acts as a layer composed by The feed-forward neural network and the radial bastandard linear neurons; the output is equal to the sis neural network are easily composed using the
activation signal s, which is equal to
NeuralNetworkLayer block.
The case of the Elman neural network (figure 7 shows
y = s = weightTable * u + biasTable[:,1]
the model in Dymola[7]), which in the library is called
The Modelica Association

553

Modelica 2006, September 4th  5th

F. Codec, F. Casella

NeuralNetwork RecurrentOne(Two)Layer4 ,
is different. In figure 7 the NeuralNetwork RecurrentOneLayer is shown: the delay block has
been introduced to create the recurrence. The parameters of every layer and the parameter of the delay
block, which is the samplePeriod of the recurrent
layer, can be tuned. The samplePeriod has to be equal
to the input signal sample rate, so that the network can
work correctly.

and RadBas) or to elaborate signals which are used
by neurons to compute the activation signal (Dist
and ElementWiseProduct are used by a layer
composed by radial).

4

An application example

The package Examples contains some instances
which allow the user to explore the library capabilities. In this section, an example of how to use the
NeuralNetwork library is shown: the entire work
process will be explained, from the neural network
identification, with MatLab Neural Network toolbox,
through the network parameters exchange, to the validation on the model implementation in Modelica.

Figure 7: Elman neural network in Dymola
The NeuralNetwork.Utilities.UnitDelayMIMO was introduced to realize the layer feedback: it behaves as the Modelica.Blocks.Discrete.UnitDelay but it has a MIMO interface
in place of the SISO one.

3.3

Utilities

Figure 9: NARX: neural network with external dynamics
The example shown here (which is the model
FeedForwardNeuralNetwork
placed
in
Examples package) is about a feed-forward
network with external dynamics. This neural network,
shown in figure 9, is a feed-forward neural network
Figure 8: Utilities package
in which the signals used as inputs are previously
delayed. The feed-forward neural network with
The Utilities package (shown in fi- external dynamic, which is normally called NARX,
gure 8) is composed by some mathemati- performs the following function
cal functions and blocks needed to the liy(t) = f (u(t) . . . u(t  na ), y(t) . . . y(t  nb )).
brary to work.
In the blocks there are the
NeuralNetwork.Utilities.UnitDelayThis example shows how to use the elements of the
MIMO block, used to model an Elman neural network, NeuralNetwork library to create a feed-forward
and the NeuralNetwork.Utilities.Sam- neural network with external dynamic, where u is a
plerMIMO, used to sample more signals at the same vector composed by two elements, na = 2 and nb = 0.
time and used to build the Elman neural network First of all we have to create the model of the process
example. The mathematical functions instead are which has to be identified by the network. We assume
used to model a specific activation function (LogSig that the process is driven by the non-linear function
4 they

F(t) = (3x(t)x(t  1)x(t  2)) + (y(t)y(t  2)),

differ for the number of recurrent layer

The Modelica Association

554

Modelica 2006, September 4th  5th

Neural Network Library in Modelica

where x and y are the inputs of the system. Note that
the process is dynamic because F(t) uses the input values at t time, t  1 time and t  2. For this reason we
choose to use a dynamical feed-forward network with
6 inputs:

net.trainParam.epochs = 100;
[net,tr]=train(net,[in X;in Y],f);
To see how the network has learned the non-linear system the command sim can be used
f SIM = sim(net,[in X;in Y]);

y(t) = f (x(t), y(t), x(t  1), y(t  1), x(t  2), y(t  2)).
To train the network is mandatory to have some input
signals and the correspondent outputs. The Matlab environment can be used: define the input signals with
the following commands5
t=0:0.01:10;
x=sin(2*pi*t);
y=cos(5*pi*t);
and calculate the output signal of the process from the
inputs previously defined.
for k=3:length(t)
f(k)=(3*x(k)*x(k-1)*x(k-2));
f(k)=f(k)+(y(k)*y(k-2));
end
After the input and output signals are created, the network has to be built. To construct a feed-forward neural network, the command newff has to be used. As
parameters, the command requires the variances of the
inputs, the dimension of the network and the layer activation functions. To do this use the following commands
var
var
var
var
net

x
X
y
Y
=

Figure 10: Real process and neural network output
comparison
Plotting the real output and the network simulated output (figure 10), we can see that the network has identified the non-linear system very well. Two ways were
taken into consideration in order to use the parameters
coming from the MatLab environment:

= [min(x) max(x)];
= [var x;var x;var x];
= [min(y) max(y)];
= [var y;var y;var y];
newff([var X ; var Y],[4 1],
{tansig,purelin});

 create a specific script for MatLab (called extractData.m) which collects the parameters from the
environment and creates a text file containing all
the information as the Modelica notation and the
library requests;

Note that var X and var Y are a 3  2 matrix, with
 use the DataFiles library which provides
one line for x(t), one for x(t  1) and one for x(t  2).
some functions to read/write parameters
To train the network, the input signal matrices have to
from/into .mat files (saved using the -V4 option).
be created (they are in X and in Y). Some parameters, like the train method and the train epochs num- The DataFiles library is a particular implementaber, has to be set and then the function train can be tion supplied by Dymola to manage .mat files: this apused. This is done with the following commands:
proach was used in absence of a general solution in
in X = [ x ; [0 x(1:end-1)] ;
Modelica.
[0 0 x(1:end-2)] ];
In this particular example the first way was used. At
in Y = [ y ; [0 y(1:end-1)] ;
first, it has to be understood how the MatLab saves
[0 0 y(1:end-2)] ];
the feed-forward neural network parameters. Watchnet.trainFcn = trainlm;
ing the figure 11, which shows how MatLab maps the
weights and bias of the layer on the network object ma5 when dealing with dynamic feed-forward networks it is very
trices and keeping in mind that the first hidden layer is
important that the sampling time during the simulation be the same
as the one used for the network training, otherwise the model will called InputLayer and the others only Layer, can be
not behave correctly.
asserted that:
The Modelica Association

555

Modelica 2006, September 4th  5th

F. Codec, F. Casella

Figure 11: MatLab weights and bias matrices
Figure 12: FeedForwardNeuralNetwork exam to access to the weights matrix of a layer has to be ple
used the command net.X{1,1}6 , where X=IW
for the first layer and X=LW for the others; the
weights matrix is a [S  R] , where S is the neuron IN x=[t , x];
IN y=[t , y];
number and R the layer inputs number
OUT f=[t , f SIM];
 to access to the bias matrix has to be used the save testData FeedForwardNN.mat -V4
command net.b{1}, [S  1].
IN x IN y OUT f
Using this information and the extractData.m script, the figure 13 shows the output of the Modelica simutwo files, which contain the Modelica definition of the lation and the output of MatLab: see that there is no
network layers that compose the neural network, were difference between them.
created:
extractData(LW.txt,OutputLayer,
net.LW{2,1},net.b{2},lin)
extractData(IW.txt,HiddenLayer,
net.IW{1},net.b{1},tan)
where LW.txt and IW.txt are the names of
the file where the definition of the Modelica
neuralNetwork TwoLayer OutputLayer and
HiddenLayer are stored. The other parameters of the
command are the weights and the bias matrices and
the layer activation function.
Now its possible to create this neural network
using the Modelica language7 .
At first take a
neuralNetwork TwoLayer block and change its
parameters using the results of the previous steps (located in IW.txt and LW.txt). Then, since the neural
network expects 6 inputs which have to be externally
built, some unit delay blocks (with sample time sets
to 0.01, which is the input signals sample time) and a
multiplexer must be used.
As last step, build a .mat file enclosing the input signals used in MatLab to simulate the neural network.
To compare the Modelica output to the MatLab one,
enclose the output signals too.
6 For the index selection please use the MatLab Neural Network

toolbox help.
7 The example model (figure 12) was created in Dymola[7]

The Modelica Association

Figure 13: Matlab and Modelica simulation output
comparison
Similar examples have been built for the other kinds
of networks in the library. They are available in the
Examples package, to check their results against the
Matlab implementation.

5

Conclusion

A Modelica library, providing the neural network
mathematical model is presented. This library is developed to be used to simulate a non-linear system,

556

Modelica 2006, September 4th  5th

Neural Network Library in Modelica

previously identified through a specific neural network
training system. The NeuralNetwork library is developed in Modelica 2.2 and it offers all the required
capabilities to create and use different kinds of neural
networks.
Currently, only the feed-forward, the elman[6] and the
radial basis neural network can be modeled and simulated, but it is possible to build different network structures, by using the basic elements provided by the library. In section 4, a library extension example is
shown: a dynamical neural network model is created
using the library blocks. The entire work process is
explained, from the neural network identification, with
an external training software, through the network parameters exchange (from the training software environment to the Modelica one), to the validation of the
Modelica model. This lead us to show that there is
no difference between the Modelica simulation output
and the MatLab one.
The library is publicly available under the Modelica
License from the www.modelica.org website.

References
[1] McCulloch, W. S. and Pitts, W., A logical calculus of the ideas immanent in nervous activity. Bulletin of Mathematical Biophysics, 5, 115
133, 1943.
[2] Rosenblatt, F., The perceptron: A probabilistic
model for information storage and organization
in the brain, Psychological Reviw, 1958, 65, 386408.
[3] Minsky, M.L. and Papert, S., Perceptrons: An
Introduction to Computational Geometry. Cambridge, MA: MIT Press, 1969.
[4] Hornik, K., Stinchcombe, M. and White, H.,
Multilayer feedforward neural networks are universal approximators, Neural Networks, vol. 2,
no. 5, pp. 359366, 1989.
[5] Bittanti, S., Identificazione dei modelli e sistemi
adattativi, Pitagora Editrice, 2002.
[6] Elman, J. L., Finding structure in time, Cognitive
Science, 15, 1990, 179-211.
[7] Dymola, Dynamic Modeling Laboratory, Dynasim AB, Lund, Sweden.
R The lan[8] The Math Works Inc., MATLABguage of Technical Computing, 1997.

The Modelica Association

557

Modelica 2006, September 4th  5th

F. Codec, F. Casella

The Modelica Association

558

Modelica 2006, September 4th  5th

The Modelica Multi-bond Graph Library

The Modelica Multi-bond Graph Library
Dirk Zimmer and Franois E. Cellier
Institute of Computational Science, ETH Zrich
CH-8092 Zrich, Switzerland
{dzimmer, fcellier}@inf.ethz.ch

Abstract
Bond graphs have established themselves as a reliable tool for modeling physical systems. Multi-bonds
are a bondgraphic extension that provides a general
approach to modeling all kinds of multi-dimensional
processes in continuous physical systems. This paper
presents a Modelica library for modeling multi-bond
graphs and their application to three-dimensional
mechanical systems. A set of bondgraphic models
for ideal mechanical components is provided that
enables a fully object-oriented modeling of mechanical systems. The wrapping of the bondgraphic models and their representation by meaningful icons
gives the mechanical models an intuitive appeal and
makes them easy to use. The resulting mechanical
systems can be efficiently simulated. Additionally,
the continuous mechanical models were extended to
hybrid models that allow discrete changes to be
modeled that occur in mechanical system as a result
of hard impacts.
Keywords: Bond Graph, Multi-bond Graph,
Multi-body System, Model Wrapping

1

Introduction

1.1

Introduction to Bond Graphs

If a physical system is subdivided into small components, we observe that these components all exhibit
specific behavior with respect to power and energy:
Certain components store energy like a thermal capacitance; other elements dissipate energy like a mechanical damper. An electric battery can be considered a source of energy. The power that is flowing
between components is distributed along different
types of junctions. This perspective offers a general
modeling approach for physical systems: bond
graphs: [3], [8].
Bond graphs are a domain-neutral modeling tool
for continuous system modeling in the field of physics. The actual graph represents the power flows be-

The Modelica Association

tween the elements of a physical system. The edges
of the graph are the bonds themselves. A bond is represented by a harpoon and carries two variables:
the flow, f, written on the plain side of the bond, and
the effort, e, denoted on the other side of the bond
[3].

Figure 1: Representation of a bond

The product of effort and flow is defined to be
power. Hence a bond is denoting a power flow from
one vertex element to another.
The assignment of effort and flow to a pair of
physical variables determines the modeling domain.
Table 1 below lists the effort/flow pairs for the most
important physical domains.
Table 1: Domain-specific effort/flow pairs
Domain
Effort
Flow
electrical
voltage (u)
current (i)
translational
force (f)
velocity (v)
mechanics
rotational metorque (t)
angular velocity
chanics
()
acoustics / hypressure (p)
volumetric flow
draulics
()
thermodynamics temperature (T)
entropy flow ()
chemical
chemical
molar flow ()
potential ()

The vertex elements are denoted by a mnemonic
code corresponding to their behavior with respect to
energy and power. Table 2 lists the most important
bondgraphic elements. The mnemonic code is borrowed from the electrical domain.

559

Modelica 2006, September 4th  5th

D. Zimmer, F.E. Cellier

Table 2: Mnemonic code of bondgraphic elements
Name
Code
Equation
resistance
e=Rf
R
source of effort
e = e0
Se
source of flow
f = f0
Sf
capacitance
f = C  der ( e )
C
inductance
e = I  der ( f )
I
0-junction
all efforts equal
0
sum ( f ) = 0
1-junction
all flows equal
1
sum ( e ) = 0

other. Further specifications can be added by means
of parameter menus.
Although BondLib is a general Modelica library,
its usage is strongly linked to the graphical modeling
environment of Dymola [5]. Since bond graphs are a
graphical modeling tool, it may be much less desirable to use this library in a purely alphanumerical
modeling environment.
1.3

Using the bondgraphic methodology, one can
e.g. model the electric circuit of Figure 2 by the corresponding bond graph of Figure 3:

Introduction to Multi-bond Graphs

Multi-bond graphs (sometimes also called vectorbond graphs) are a vectorial extension of the regular
bond graphs [2]. They are especially well suited for
modeling multi-dimensional processes.

Figure 4: Composition of a multi-bond

A multi-bond is composed of a certain number
of bonds of either the same domain or at least closely
related domains. It is represented by a (blue) double
half-arrow as shown in Figure 4. The number shown
at the center of the multi-bond denotes its cardinality, i.e., the number of individual bonds included.
This paper presents multi-bond graphs of mechanical systems, which is their primary application.
However, multi-bond graphs can be used to model
all kinds of multi-dimensional processes. Diffusion
processes like heat distribution in a planar electric
circuit may be another meaningful application. Yet
another interesting field of application could be the
modeling of chemical reaction dynamics [2]. Multibonds may also be applicable in the field of general
relativity [7].

Figure 2: Schematic of electric circuit

Figure 3: Bond graph of electric circuit

1.2

1.4

The Modelica BondLib

To conveniently model with bond graphs using Dymola, a Modelica library called BondLib [4] has
been developed by F.E. Cellier and his students. Using this library, bond graphs can be created in an object-oriented fashion. The library provides a complete set of basic bondgraphic elements as atomic
(equation) models. These can be composed graphically to form more complex composite models.
The basic bondgraphic elements and the bonds
themselves can be placed on the screen by drag and
drop. They can then easily be connected with each

The Modelica Association

Advantages of Bondgraphic Modeling

Concerning the modeling of complex physical systems, bond graphs offer a suitable balance between
specificity and generality. The interdisciplinary concept of energy and power flows creates a semantic
level for bond graphs that is independent of the modeling domain. Thus, basic concepts of physics such
as the first rule of thermodynamics can always be
verified in a bond graph, independent of its application. This is particularly helpful for intra-domain
models that operate in multiple energy domains. In
addition, the semantic level helps the modeler avoid
many types of modeling errors and find an adequate

560

Modelica 2006, September 4th  5th

The Modelica Multi-bond Graph Library

solution for his or her task. Modeling by equations is
far more flexible and therefore leaves more room for
mistakes.
Another advantage of bond graphs is their
graphical approach to modeling. Relations can be
expressed more naturally by two-dimensional drawings than in a one-dimensional equation code. Also
the limitations of the screen (or drawing area) force
the modeler to split his model into simple, easily understandable elements.
To us, bond graphs offer also a perfect approach
to gaining a profound understanding of the basic
principles covering all of physics and to organizing
the knowledge concerning specific models. This
makes bond graphs extremely valuable and useful
for teaching purposes. However, bond graphs are a
modeling tool like any other. Everything that can be
modeled by bond graphs can also be modeled by
other modeling paradigms. Some researchers will
find bond graphs a convenient means to organizing
their knowledge, whereas other researchers wont.

2

The MultiBondLib

The original BondLib only contains models for
regular bond graphs. An additional library is needed
to conveniently create models of multi-bond graphs.
This paper presents a Modelica library for multibondgraphic modeling. It is called MultiBondLib
and was designed to bear a strong resemblance to the
existing BondLib in structure and composition. All
users already familiar with BondLib should therefore
be able to quickly acquaint themselves with the new
MultiBondLib.
The MultiBondLib features also domain-specific
sub-libraries for mechanical systems. These are introduced further on in Section 4. Although mechanics are the major field of application, the basic multibondgraphic elements provide a general solution to
modeling all kinds of physical processes. These basic
elements shall be briefly discussed in the following
paragraphs.
Each vertex element of a regular bond graph has
its multi-bondgraphic counterpart. The elementary
equations of the basic bondgraphic elements remain
the same. A transformation to the multi-bondgraphic
terminology simply extends the scalar equations to
vectorial form. The MultiBondLib provides these
multi-bondgraphic counterparts and much more.
Just like the regular BondLib, the MultiBondLib
features also causal bonds that are helpful for determining the computational causality of a model and
for analyzing computational problems. A stroke de-

The Modelica Association

notes the side of the bond at which the flow vector is
being computed. However, there is no need to ever
use causal bonds in Modelica since the computational causality is determined automatically otherwise. Causal multi-bonds are also less convenient
than their single-bondgraphic counterparts because
the two causal multi-bonds do not cover all possible
cases: mixed causality is possible as well, but a standard notation for mixed causality is missing and
would probably be more confusing than helpful.

Figure 5: The two causal multi-bonds

In addition, MultiBondLib provides certain elements that are specific to multi-bond graphs. These
elements handle the composition, decomposition and
permutation of multi-bonds. Also special converter
elements have been designed to allow a combination
with the classic BondLib.
The cardinality of a multi-bond and its connected
elements can be defined for each individual element
separately. Consequently, it is possible to create
models containing multi-bonds of different cardinality without any additional effort. Yet in many cases,
the same cardinality is being used for the entire
model. To afford a good usability in such cases, a
default model has been developed. The default
model is an outer model for all multi-bondgraphic
components on the same level of the modeling hierarchy or below that defines the default cardinality of
all underlying bondgraphic elements.

3

Mechanical MultiBond Graphs

In the mechanical domain, the bondgraphic effort is
identified with the force, f, and the bondgraphic flow
is identified with the velocity, v. The corresponding
effort/flow pair of the rotational domain is torque, t,
and angular velocity, . These assignments define
the semantic meaning of the bondgraphic elements.
The inductance implements the fundamental
equation f = m  dv/dt and represents a storage of
kinetic energy. The capacitance represents the storage of potential energy. It can be used to model a
spring. A linear bondgraphic resistor models an ideal
damper. All of these elements can be rigidly connected using a 1-junction, whereas a force interaction
between two neighboring elements is modeled by a
0-junction.

561

Modelica 2006, September 4th  5th

D. Zimmer, F.E. Cellier

Based upon this standard, various tools for the multibondgraphic modeling of mechanical systems have
been developed since their invention by Breedveld in
1984 [2]. Unfortunately, most of these tools are incomplete, e.g. only suitable for the description of
linear systems; and many are outdated.
To understand the specific difficulties that arise
when using a bondgraphic approach to modeling a
mechanical system, it is important to note that such
systems often exhibit holonomic constraints, i.e.,
constraints resulting from the topology of the system.
No two mechanical bodies can occupy the same
space at the same time, and frequently, different mechanical bodies are related to each other by a distance constraint, e.g. they may be connected to each
other by a mass-less bar. Holonomic constraints are
constraints based on location. However, bond graphs
operate on velocities and forces only. Hence mechanical systems cannot be modeled by bond graphs
alone. There is a need for additional graphical modeling tools for expressing holonomic constraints between bodies.
The MultiBondLib offers such a link to other
modeling tools through sensor elements. Sensors
elements measure certain bondgraphic variables
like effort, flow, momentum (integrated effort) or
position (integrated flow). In the MultiBondLib, the
signal emitted by the sensor elements is a-causal and
simply represents an equality equation (not an assignment). Hence sensor elements are not limited to
a single usage. They may serve a number of different
purposes:
 to measure bondgraphic variables,
 to convert bondgraphic variables to nonbondgraphic signals,
 to establish algebraic relationships between
bondgraphic elements.
It is this latter form of usage that enables us to
state holonomic constraint equations: The positional
state is derived through sensor elements and influences the dynamical behavior through modulations.
It is important to note that sensor elements as well as
modulations are neutral with respect to power and
energy. Hence the entire energy flow is described by
the bond graph alone.
The following paragraphs present two examples
that include the applications of these elements in the
field of planar mechanical systems. In such a system,
the world is restricted to two dimensions. Models for
planar mechanic systems are therefore a lot simpler
than three-dimensional models. They may serve as a
good introduction to multi-dimensional mechanics
since such models are much more easily understand-

The Modelica Association

able. One major simplification in planar mechanics is
the fact that the rotational inertance, J, is a constant
scalar for all possible orientations, because the axis
of rotation is fixed. Thus everything can be comfortably computed using the coordinate vectors of
the inertial system. There is no need for transformations between different coordinate systems as is the
case in 3D-mechanics. All effort and flow variables
of a planar mechanical bond graph can be conveniently resolved in the inertial system.

Figure 6: Composition of a planar multi-bond

Hence planar mechanical systems can be described by multi-bond of cardinality three. Figure 6
depicts the planar mechanical multi-bond. The first
two bonds belong to the translational domain,
whereas the third bond belongs to the rotational domain. The effort vector of a planar multi-bond is then
[fx, fy, t]T, whereas the corresponding flow vector is
[vx, vy, ] T .
Figure 7 presents the bondgraphic model of a
simple planar pendulum.

Figure 7: Bond graph of a planar pendulum

The translational position is fixed at the revolute
joint by a source of zero flow, Sf, of cardinality two.
The revolute joint is free to rotate, i.e., it does not
experience any torque. Hence it is modeled by a
source of zero effort, Se, of cardinality one. The two
multi-bonds are amalgamated to form a general
multi-bond of planar mechanical systems of cardinality three.

562

Modelica 2006, September 4th  5th

The Modelica Multi-bond Graph Library

The mass itself is represented by the 1-junction
shown at the bottom of Figure 7. In a 1-junction, the
flow variables (velocities) are equal, whereas the
effort variables (forces) add up to zero. Hence the 1junction represents the dAlembert principle applied
to the mass. The forces acting on the mass are the
inertial force, I, and the gravitational force, which
can be represented by another source of effort, Se,
pulling in the negative y-direction.
The mass element is connected to the revolute
joint by a mass-less rod describing a positional translation between the body element and the revolute
joint. This rod is modeled by a modulated transformer element, mTF, that transforms the angular
velocity into a translational velocity, and vice-versa.
This transformation is dependent on the current
angle of the revolute joint. Therefore the transformer
is modulated by the orientation angle of the revolute
joint that is measured by the sensor element, Dq. The
a-causal signal connecting the sensor element in
combination with the transformer implements the
holonomic constraint.
translationalTF

1

mTF

2

f2[1:2] = f1[1:2] + r f1[3]
f2[3]

= f1[3]

e1[1:2] = e2[1:2]
e1[3]

= e2[3] + rTe2[1:2]

This modulated transformer, mTF, is a highly
specialized element that hardly makes any sense outside the planar mechanical domain. Such specialized
elements are thus provided in corresponding domainspecific sub-libraries, rather than listing them among
the basic multi-bond graph elements of the MultiBondLib.
The large bond graph of Figure 10 represents the
model of a second example: a simple model of a
crane crab. The corresponding schematic diagram is
presented in Figure 9.
Let us refrain from offering a detailed explanation of the model. Instead we shall take a look at the
overall structure. The reader may observe the acausal signals in Figure 10 that flow alongside the
actual bond graph. These signals contain the variables for the current position and orientation.
Whereas the multi-bond graph models the dynamics
of the system, the signals handle the systems positional state.

translational

Figure 8: Icon of the modulated transformer. It provides
two bondgraphic connectors (denoted by light blue circles) and two signal connectors (denoted by blue diamonds)

Let us take a closer look at the mTF element presented in Figure 8 to get a more profound understanding. The element inherits the bondgraphic effort
and flow vectors1, (e1, f1) and (e2, f2), from its two
bondgraphic connectors. These two connectors represent the hinges of a mass-less rod. Hence, the
transformation between the variable pairs is specified
by the parameter vector, d, that represents the distance vector between the two hinges. A modulation
of the transformation is determined by two signals:
the current orientation  and an optional elongation
factor ampl. The actual model then defines an additional auxiliary variable, r, and implements the balance equations of a lever:

 Ksin ( 4 ) cos ( 4 ) 
r = 
 $d$ampl
 Kcos ( 4 ) Ksin ( 4 ) 
1

Please remember the vector composition presented in
Figure 6.

The Modelica Association

Figure 9: Schematic diagram of a crane crab

Furthermore, multi-bond graphs of mechanical
systems tend to become very large, since the sheer
generality of the bondgraphic approach does not allow a more specific representation of larger mechanical elements. This makes the resulting bond
graph hard to read and understand. It is therefore
helpful to separate the bond graph into specific mechanically meaningful subparts as indicated by the
gray rectangular frames of Figure 10. These subparts
can then be represented by composite models that
contain a wrapped version of the underlying subsystem multi-bond graph. The resulting model is presented in Figure 11 and is now easily understandable.

563

Modelica 2006, September 4th  5th

D. Zimmer, F.E. Cellier

Figure 10: Multi-bond graph of a crane crab

The wrapping technique offers the better of two
worlds: It provides an easy-to-use model at the top
level, whereas a look inside the model reveals a familiar bondgraphic explanation.

Figure 11: Multi-body diagram of a crane crab

4

The Mechanical Sub-libraries

4.1

Two libraries for the modeling of mechanical systems have been developed, one for planar mechanics:
PlanarMechanics, and the other for 3D-Mechanics:
Mechanics3D. Both libraries are included as subpackages within the MultiBondLib. The following
discussion will now focus on the components of the
Mechanics3D library. However, most of the subsequent descriptions hold for the planar mechanical
library as well.
Similar to the Multi-body systems library of M.
Otter [9], the Mechanics3D library offers models for
an extensive set of mechanical components. It contains models for rigid parts such as bodies and rods,

The Modelica Association

as well as models for different kinds of joints such as
revolute joints or prismatic joints. A spring and a
damper are typical examples of force elements for
which models are offered in the library as well. In
addition, models of ideal rolling objects such as
wheels or marbles are provided. All of these elements can be further specified by parameter menus
and feature a suitable animation.
Due to the similarity in structure and design, users of the standard Modelica MultiBody library will
find the Mechanics3D library very easy to use. The
Mechanics3D library represents both a subset and a
superset of the MultiBody library. Yet in contrast to
the standard MultiBody library, all mechanical models of the new Mechanics3D library are based upon
wrapped bondgraphic models. A look inside the
models reveals a bondgraphic explanation.
Connector Types

In this section, we discuss the selection of connector
variables for the mechanical components in Mechanics3D. This selection is defined by the process of
wrapping. Therefore all bondgraphic variables have
to be part of the connector. These are:
 the force vector, f , (flow variables),
 the torque vector, t , (flow variables),
 the velocity vector, v , (potential variables),
 the angular velocity vector,  , (potential
variables);

564

Modelica 2006, September 4th  5th

The Modelica Multi-bond Graph Library

This example was created by components of Mechanics3D and presents the model of an uncontrolled
ideal rolling bicycle. Such a bicycle has seven degrees of freedom on the level of position and three
degrees of freedom on the level of velocity. It is a
partially stable system for a specific range of driving
velocities. A nice description of the dynamic behavior of a bicycle can be found in a paper by K. strm
et al. [1]. The relevant parameter values for mass and
geometry of this specific model are taken out of a
paper by Schwab et al. [11]. The described bicycle is
self-stabilizing for driving velocities between
4.3ms1 and 6.1ms1.
y

world3D

m=85

The redundancy of the connector causes problems
when components are connected in a circular fashion, as this is often the case in kinematic loops. A
standard connection statement leads then to a singularity in the model. To overcome these difficulties, a
second alternative connection statement is needed
that contains only non-redundant information. For
each kinematic loop, one standard connection has
then to be replaced by its non-redundant counterpart.

An Example: The Bicycle

RearMass

Kinematic Loops

4.3

m=4

4.2

functions2 has been used. These are the same methods that have also been applied in the case of the
standard MultiBody library (see [9]).
Figure 12 shows the Mechanics3D model of a
3D kinematic loop. No special cut joints have been
used, and the elimination of redundant equations and
redundant states takes place automatically. Whereas
the automatic elimination algorithm works in most
cases, planar loops within a 3D environment still
require special treatment. A special cut joint has
been developed for this purpose.

FrontMass

where the variables of the rotational domain are
resolved with respect to their corresponding body
system. All other variables are resolved in the inertial system. Also the variables of the positional signals are part of the connector:
 the position vector, x , (potential variables) ,
 the orientation matrix, R , (potential variables).
Please note that the connector contains redundant information. The variables v and  are derivatives of x and R. Also R itself is 33 orientation matrix and thus a redundant way of expressing the current orientation.
Although the Mechanics3D library and the MultiBody library are very similar, the Mechanics3D
library defines its own slightly different connectors.
Hence it is not possible to combine the components
of these two libraries without additional tools.

n={0.258...
a

b

r={0.18,0....

RearFrame
a
b

r={-0.3,0.9...

FrontFrame
a
b

RearMass...
a
b

FrontMas...
a
b

r={0.12,0....

x

r={1.02,-0....

b
a

FWRevol...
r=0.35

r=0.3

b

RWheel

n={0,0,1}

FWheel

a

RWRevo...

n={0,0,1}

Steering

Figure 13: Multi-body diagram of a bicycle
Figure 12: Multi-body diagram of a 3D kinematic loop

However, the user of the library does not need to
worry about these details, because the replacement is
achieved automatically. To implement the necessary
preprocessing of the model, a set of special Modelica

The Modelica Association

Figure 13 depicts the multi-body diagram of the
bicycle model. Although no closed loop is visible in
2

These are: defineRoot(), definePotentialRoot(), defineBranch(), isRoot(), and rooted().

565

Modelica 2006, September 4th  5th

D. Zimmer, F.E. Cellier

the multi-body diagram, the model contains a closed
kinematic loop, since both wheels are connected to
the road. The Mechanics3D library offers an outer
world3D model that is used in exactly the same fashion as the corresponding model of the standard MultiBody library.
The selected state variables are the cardan angles
of the rear wheel and their derivatives. These three
cardan angles represent the orientation on the plane,
the lean of the rear frame, and the roll angle of the
rear wheel. Additional state variables are the position
of the rear wheel on the plane, the angle of the steering joint, and the angle of the front revolute joint.
Each of the two wheels defines one holonomic constraint equation that prevents the bicycle from sinking into the road.

Figure 14: Animation model of the bicycle

Figures 14 and 15 show the results of the simulation. The lean angle can be examined in a plot window, and the bicycle is nicely animated within Dymola.
RWheel.phi[2]

0.3

0.2

[rad]

0.1

0.0

-0.1

-0.2
0

5

Figure 15: Plot of the lean angle

The Modelica Association

10

4.4

Run-time Efficiency

The selection of the state variables is of major importance for the efficiency of the resulting simulation. Usually this selection is automatically achieved
by Dymola. Nevertheless variables can be suggested
to the simulation program via the advanced Modelica
attribute: StateSelect. These variables are the states
of a joints relative position and velocity. Each joint
is declaring state variables, unless there is a kinematic loop.
In the latter case, there are often many equivalent
sets of state variables. Dymola uses the feature of
dynamic state selection, where the state variables are
chosen at run time. This offers the most flexible solution but leads to a slower simulation and to many
additional equations that are often unnecessary.
Hence it is strongly recommended to determine a
static set of state variables manually in such a case
whenever this is feasible.
All mechanical components that contain potential state variables have the option of a manual enforcement of their state variables via the parameter
menu. To this end, the Boolean parameter enforceStates needs to be activated.
The Mechanics3D library and the standard MultiBody library contain elements for the same purpose
that can be used in very similar ways. It is therefore
easily possible to translate the model for a mechanical system from one library to the other. Both libraries are examined with respect to their run-time efficiency. The complexity of the resulting systems of
equation and the computational effort of the simulation are compared for a given set of examples. The
results of this examination are presented in Table 3.
There is hardly any difference. In fact, the generated
equations of both libraries are very similar. There is
only one remarkable difference: In contrast to the
Mechanics3D library, the translational velocity is not
part of the connector variables of the standard MultiBody library. The elements are only connected by
the translational position. The equations for the
translational velocities are then derived (when necessary) by differentiation. In the bondgraphic models
of the Mechanics3D library, these equations are explicitly stated.
Table 3 lists the sets of non-linear equations for a
given set of experiments. The number of integration
steps is counted for a simulation period of 10 seconds. The simulation method was Dassl with a tolerance of 104. A * indicates that the parameters of the
experiment setup differ slightly between the two libraries.

566

Modelica 2006, September 4th  5th

The Modelica Multi-bond Graph Library

the impact characteristics includes also specifications
for elasticity and friction.
Sadly, the Modelica support for discrete event
modeling [10] is not yet fully sufficient. Hence the
resulting solution leads partially to models that are
unnecessarily complicated in execution and design.
Nevertheless the solution is fine and workable for
small scale models. Figure 16 shows a simple example of a mechanical system modeled using the extended 3D library.

Table 3: Comparison of the two mechanical libraries
MultiBody

Mechanics3D

Experiment

Non-linear
equations

Integr.
steps

Non-linear
equations

Integr.
steps

Double Pendulum
Crane Crab
Gyroscopic
Exp. with
Quaternions
Planar Loop
Centrifugal
FourBar
Loop*
Bicycle*

0

549

0

549

0
0

205
24438

0
0

205
25574

2
{2,2}
5

372
70
446

2
{2,2}
5

372
70
625

1

97

1

84

5

Conclusions and Further Work

A Modelica library for convenient multi-bondgraphic modeling has been developed. It provides a
general solution to modeling all kinds of multidimensional processes in continuous physical systems. Multi-bond graphs offer a good framework for
modeling mechanical systems. The bondgraphic
methodology proved to be powerful enough for
modeling all important ideal subparts of mechanical
systems accurately and efficiently.
The resulting libraries for mechanical systems
PlanarMechanics and Mechanics3D provide an extensive set of component models. These domainspecific models have an intuitive appeal and are easy
to use. They consist in wrapped bondgraphic models,
and a closer look reveals a bondgraphic explanation
of their behavior. Also quality and efficiency of the
resulting solution are not impaired by the bondgraphic modeling technique. The selected state variables are chosen wisely, and the resulting systems of
equations can be solved fast and accurately.
Furthermore, a third library for mechanics has
been developed and included in the MultiBondLib. It
is called Mechanics3DwithImpulses and represents
an extension of the Mechanics3D library. The existing purely continuous mechanical models were extended by their corresponding impulse equations to
hybrid models that contain an additional discrete
event part.
This library was designed to model the behavior
of mechanical systems in situations of hard ideal impacts. The type of mechanical system is thereby not
limited at all. Impacts can be modeled between single objects, as well as between kinematic loops (e.g.
a car suspension). The provided parameter set for

The Modelica Association

Figure 16: An implementation of Newton's cradle

References

567

[1] strm, K.J., R.E. Klein and A. Lennartsson, Bicycle Dynamics and Control: Adapted Bicycles for Education and
Research, IEEE Control Systems Magazine, 25(4), pp.26-47, 2005.
[2] Breedveld, P.C., Physical Systems Theory
in Terms of Bond Graphs, Ph.D. dissertation, University of Twente, The Netherlands, 1984.
[3] Cellier, F.E., Continuous System Modeling, Springer-Verlag, New York, 755p,
1991.
[4] Cellier, F.E. and A. Nebot, The Modelica Bond Graph Library, Proc. 4th International Modelica Conference, Hamburg, Germany, Vol.1, pp.57-65, 2005.
[5] Dynasim AB, Dymola Users Manual,
Version 6.0, Lund, Sweden, 2006.

Modelica 2006, September 4th  5th

D. Zimmer, F.E. Cellier

[6] Elmqvist, H., M. Otter and J. Daz Lpez,
Collision Handling for the Modelica
MultiBody Library. Proc. 4th International Modelica Conference, Hamburg,
Germany, Vol.1, pp.45-53, 2005.
[7] Gussn, N.M.N, On the Bondgraphic
Power Postulate and its Role in Interpreting the 1905 and 1915 Relativity Theories, MS Thesis, Dept. of Electr. &

Comp. Engr., University of Arizona,
Tucson, AZ, 1994.
[8] Karnopp, D.C., D.L. Margolis and R.C.
Rosenberg, System Dynamics: Modeling
and Simulation of Mechatronic Systems,
4th edition, John Wiley& Sons, New
York, 576p, 2006.
[9] Otter, M., H. Elmqvist and S.E. Mattsson,
The New Modelica MultiBody Library,
Proc. 3rd International Modelica Conference, Linkping, Sweden, pp.311-330,
2003.
[10] Otter, M., H. Elmqvist and S.E. Mattsson,
Hybrid Modeling in Modelica Based on
the Synchronous Data Flow Principle,
Proc. IEEE International Symposium on
Computer Aided Control System Design,
Hawaii, pp.151-157, 1999.
[11] Schwab, A.L., J.P. Meijaard and J.M. Papadopoulos, Benchmark Results on the
Linearized Equation of Motion of an Uncontrolled Bicycle KSME Journal of
Mechanical Science and Technology,
19(1), pp.292-304, 2005.
[12] Zimmer, D., A Modelica Library for MultiBond Graphs and its Application in 3DMechanics. MS Thesis, ETH Zurich,
Switzerland, 2006.

The Modelica Association

Biographies
Dirk Zimmer received his MS
degree in computer science from
the Swiss Federal Institute of
Technology (ETH) Zurich in
2006. He gained additional experience in Modelica and in the
field of modeling mechanical
systems during an internship at
the German Aerospace Center
DLR 2005. Dirk Zimmer is currently pursuing a PhD degree with a dissertation related to computer simulation and modeling under the
guidance of Profs. Franois E. Cellier and Walter
Gander. His current research interests focus on the
simulation and modeling of physical systems with a
dynamically changing structure.
Franois E. Cellier received his
BS degree in electrical engineering in 1972, his MS degree in
automatic control in 1973, and
his PhD degree in technical sciences in 1979, all from the
Swiss Federal Institute of Technology (ETH) Zurich. Dr. Cellier worked at the University of
Arizona as professor of Electrical and Computer Engineering from 1984 until 2005.
He recently returned to his home country of Switzerland. Dr. Cellier's main scientific interests concern
modeling and simulation methodologies, and the design of advanced software systems for simulation,
computer aided modeling, and computer-aided design. Dr. Cellier has authored or co-authored more
than 200 technical publications, and he has edited
several books. He published a textbook on Continuous System Modeling in 1991 and a second textbook
on Continuous System Simulation in 2006, both with
Springer-Verlag, New York. He served as general
chair or program chair of many international conferences, and serves currently as president of the Society for Modeling and Simulation International.

568

Modelica 2006, September 4th  5th

Session 5d

Session 5d
Electric Systems and Applications 2

The Modelica Association

569

Modelica 2006, September 4th  5th

Session 5d

The Modelica Association

570

Modelica 2006, September 4th  5th

The SmartElectricDrives Library - Powerful Models for Fast Simulations of Electric Drives

The SmartElectricDrives Library  Powerful Models for Fast
Simulations of Electric Drives
Johannes Vinzenz Gragger Harald Giuliani Christian Kral
Thomas Buml Hansjrg Kapeller Franz Pirker
Arsenal Research
Giefinggasse 2, 1210 Vienna, Austria
phone +43-50550-6210, fax +-50550-6595, e-mail: johannes.gragger@arsenal.ac.at

Abstract

sion, fast dynamic response, overload capability and
sometimes speed ranges significantly above nominal speed. Conventional asynchronous induction machines used for such high performance applications
are usually controlled by exploiting the principle of
field oriented control (FOC) [4]. FOC can also be applied to synchronous induction machines and is widely
used in respective drive applications. Since FOC is the
most popular method to control ac machines it is implemented in all ready-to-use ac drive models in the
current version of the SED library.

In this work the SmartElectricDrives (SED) library
Release 1.0.1 is presented. The SED library is a tool
for simulating and tuning of electric drives in complex
electromechanical systems. This library is specifically
designed for simulations of electric drive systems with
a Modelica development platform. Besides a variety
of elementary components for simulating modern
electric drives the SED library also contains powerful
ready-to-use drive models. These ready-to-use
drive models include all features and characteristics
of full modern electric drives in only one single
2 Structure of the SED library
component. Furthermore, the SED library facilitates
simulations on different levels of abstraction. By All components needed for modern electric drives can
choosing the right level of abstraction the user can be found in the SED library. In Figure 1 the arrangesave processing power and therefore computing time. ment of the packages is shown.
This work outlines all the specific features and design
considerations of the SED library. Three simulation
examples are presented. Based on the results of these
examples the performance of the applied SED models
is assessed and analysed.
Keywords: electric drives; electromechanical systems;
quasi stationary simulation; signal bus systems; parameter estimation functions;

1

Electric drives applications  the
scope of the SED library

The SED library facilitates simulations of any electric drive application. Drives such as machine tools,
robotics, mining drives, traction drives and auxiliary
drives in vehicles and hybrid electric vehicles (HEV) Figure 1: Screenshot of the SED library in the package
are good examples for typical applications [1], [2], [3]. browser.
These applications require high static control preciThe Modelica Association

571

Modelica 2006, September 4th  5th

J.V. Gragger, H. Giuliani, C. Kral, T. Buml, H. Kapeller, F. Pirker

2.1

The QuasiStationaryDrives pack- control components of these models. Each readyto-use drive model consists of a dc/dc or dc/ac conage

In the QuasiStationaryDrives package, shown
in Figure 2, only models of full torque controlled
drives with a dc supplied converter are included.
These models are designed such way that all electrical transients in the machines are neglected. Mechanical transients due to the inertia of the rotor
are considered, however. Consequently these models cannot be used for the simulation of electric
transient effects such as current spikes due to converter switching, for instance. However, as long as
only the energy consumption or the efficiency of the
drive is of interest it is very advantageous to use
QuasiStationaryDrives models because they
are remarkably faster than models considering electrical transient effects in machines. Another benefit of
QuasiStationaryDrives models compared to
conventional drive models is that current controllers,
flux controllers and torque controllers do not have
to be parameterized since these components do not
appear in the quasi stationary equations of electrical
drive systems. It can be shown that if electrical transient effects get neglected in electrical machines then
simple feed forward control can achieve a system performance that can only be reached by feed back control in systems, which take the electrical transients into
account. This fact leads to shorter simulation times of
the QuasistationaryDrives models compared
to their counterparts in the TransientDrives
package.

verter considering power balance, a machine model
and the elementary drive components, such as controllers, a measurement device, a flux model, bus connectors, etc. Figure 4 shows the internal set-up of the
ready-to-use asynchronous induction machine drive
model. In order to facilitate a very easy switching
between QuasiStationaryDrives models and
TransientDrives models the connector naming
and coding is standardized.

Figure 3: Screenshot of the TransientDrives
package in the package browser.

Figure 4: Screenshot of the TransientDrives
model of a dc supplied asynchronous induction machine.

Figure 2: Screenshot of the QuasiStationary- 2.3 The AuxiliaryComponents package
Drives package in the package browser.
In the AuxiliaryComponents package a number
of primary transformations such as space phasor transformations and line/phase transformations are avail2.2 The TransientDrives package
able. Moreover, in this package the user has some
The TransientDrives package, shown in Fig- functions for controller parameter estimation at ones
ure 3, contains all drive components that are needed disposal. The opened sub-package containing these
to build a simulation of an electric drive consider- functions is shown in Figure 5.
ing transient electric effects in machines. This pack- These controller parameter estimation functions help
age is split up into four machine type specific pack- the user to adjust the whole set of controller paramages containing ready-to-use models of full torque eters in speed controlled drive simulations for any
controlled drives as well as the respective elementary machine type. Since drive control systems have a
The Modelica Association

572

Modelica 2006, September 4th  5th

The SmartElectricDrives Library - Powerful Models for Fast Simulations of Electric Drives

cascaded structure deploying many elementary con- details concerning the correct use and application of
trollers it can be quite time consuming to find proper major SED library components such as controllers,
values for this big set of controller parameters. By us- converters, sources and loads.
ing the provided parameter estimation functions the
process of controller adjustment can be accelerated
considerably. With regard to specific controller optimization criteria the estimation functions generate
controller values based on the parameters that define
the machine model such as nominal current, nominal
speed, stator resistance etc. Furthermore, the control
system behaviour can be tuned by the choice of specific dynamic gains in the estimation functions.

Figure 6: Screenshot of the Examples package in the
package browser.

2.5 Further important packages
Apart from models representing full torque controlled
drive setups the SED library also offers some different models of dc energy sources. There are two battery models, a supercap model and a proton exchange
membrane (PEM) fuel cell model available. These
models can be found in the Sources package.
The Converters package contains converters on
two different levels of abstraction. On one hand the
user can choose the so called power balance converters and on the other hand there are converters modeled
Figure 5:
Screenshot of the Auxiliary- with ideal switches available. Power balance convertComponents.Functions package in the package ers are designed for simulations in which switching
effects do not have to be considered. Their big plus is
browser.
that simulations work much faster with these models
since the calculation effort for the power balance equation is much smaller compared to processing a large
2.4 The Examples package
number of switching events.
A large selection of examples for applications of the
SED library components is given in the Examples In the Sensors package there are different meters for
package shown in Figure 6. In order to ease starting the generation of specific measuring values available.
up with the SED library eight specific tutorial exam- One important component in this package is the RMS
ples are included in the Examples package. Step by model, which transforms an instantaneous signal to the
step, these tutorial examples explain the most impor- respective RMS value within a certain measuring peritant models and their correct application in drive sim- ode.
ulations. More sophisticated examples can be found The Load package contains different models that can
in the Examples.AutomotiveApplications be used for electric power dissipation. The compopackage. In this package some possibilities for the nents of this package allow the simulation of dc power
use of electric drives in vehicular applications are pre- loads and the modeling of constant or variable efficiensented. Further examples are included in order to give cies in dc circuits.
The Modelica Association

573

Modelica 2006, September 4th  5th

J.V. Gragger, H. Giuliani, C. Kral, T. Buml, H. Kapeller, F. Pirker

3

The bus concept

4 Examples

In order to point out the basic advantages of using
standardized ready-to-use models and models on different levels of abstraction three simulations get compared. These three simulations can be found in the
Examples.Tutorial package of the SED library.
All three simulations represent the same drive system
with identical component parameters. The drive system simulated, is a speed controlled asynchronous induction machine driving an industrial fan. The machine is sourced via a six pulse diode bridge that converts three phase ac voltages to a rippled dc voltage
in the dc-link circuit. A capacitive grounding component smoothens the ripple of the dc voltage and assures
system stability when calculating results with Dymola.
FOC is used to control the asynchronous induction machine. The fan modelled with a quadratic speed depenA big advantage of bus concepts in Modelica is that dent torque and an inertia component is directly conwhen programming in a diagram layer the model stays nected to the shaft of the machine. The parameters of
manageable because the number of connections gets the simulations are as follows:
minimized. Another plus is that during the simula Three phase ac supply:
tion of the model all variables that are on the bus get
grouped together in the variable browser of the sim Supply Voltage VAC = 660 V
ulation tab. The buses used in the SED library are
 Line Resistor Rline = 1 mW
designed such way that the most important variables
 Line Inductance Lline = 0.1 mH
for basic analyses of the drive system can be selected
on first sight in the variable browser. Some of these
 dc-Link:
very important variables are the shaft speed, the shaft
angle, the stator current, the stator voltage and the dc Buffer resistance Rbu f f er = 0.01 mW
link voltage.
 Buffer capacitance Cbu f f er = 0.01 F

In order to group control signals and measuring signals
most SED components are featured with a bus connector. For the internal use of each type of machine
control system in the TransientDrives package
there is a specific internal bus system available since
each type of machine has a particular set of control parameters and variables. There is also a general ControlBus connector in the Interfaces
package available that is used to build an external bus
system by connecting torque controlled drive systems
with further controllers, such as speed controllers, position controllers or drive strategy controllers. Figure 7
illustrates that the external bus system and the internal bus system must be connected via an Interface
that is also available in the SED library.

 Asynchronous induction machine:











Figure 7: An SED simulation of a speed controlled
asynchronous induction machine with an internal and
an external bus system.

The Modelica Association

574

Number of pole pairs p = 4
Nominal frequency f = 50 Hz
Nominal phase voltage VN = 400 V
Nominal phase current IN = 416 A
Rotors moment of inertia Jr = 35 kg m2
Stator resistance Rs = 8.086 W
Stator stray inductance Lss = 300.1 H
Main field inductance Lm = 8.231 mH
Rotor stray inductance Lrs = 502 H
Rotor resistance Rr = 4.934 W
Stator phases star-connected

 Fan:
 Nominal speed wN = 78 rad
s
 Nominal torque tN = 5227 Nm
 Inertia J = 50 kg m2
Modelica 2006, September 4th  5th

The SmartElectricDrives Library - Powerful Models for Fast Simulations of Electric Drives

4.1

Simulations with ready-to-use models

In Figure 8 a quasi stationary simulation, designated
as case A, is presented. The ready-to-use model
aimcqs contains a torque controlled asynchronuos
induction machine drive considering only quasi stationary effects. Also the dc/ac converter is included
in this component. The reference torque is generated
by a speed controller and fed to the FOC in the readyto-use model via the external bus system and an interface model wRef. The reference speed curve for the
drive is defined by a time table. This time table contains a RealOutput connector, which doesnt match
the ControlBus connectors of the drive model and
the speed controller. That is why a bus adaptor must
be used to connect the reference speed signal to the
external bus system. This bus adaptor also provides
the correct physical unit accordingly. In Figure 9 another transient simulation setup, designated as case
B, is shown. The difference to case A is that in
case B the electric transients are considered by using a ready-to-use TransientDrives model of
a torque controlled asynchronous induction machine,
called aimcfoc.
Figure 10, a simulation result of case B, illustrates
that the reference speed, wRe f , matches the real shaft
speed, wMechanical , in small speed regions whereas at
the instant t = 3 s, when the speed is higher, the torque
limit of the drive is reached and therefore the acceleration of the inertia is limited. The speed curves in case
A are very similiar to the ones displayed in Figure 10.
In Figure 11, Figure 12 and Figure 13 case A and case
B are compared. From the beginning of the simulations until t = 1.2 s the stator phase current in case
B, iMachine,caseB , deviates significantly from the stator
phase current in case A, iMachine,caseA . This is because
the flux controller in the TransientDrives model
creates a very high flux by generating a reference current to magnetize the machine very fast. In case A
this magnetizing effect is neglected, because transient
electric effects are not considered in the quasi stationary model. At t = 3.45 s the current iMachine,caseB deviates from iMachine,caseA because the flux weakening
function in the FOC triggers a demagnetization of the
iron core in the machine model in case B whereas in
case A this effect is not considered. Furthermore there
are larger overshoots of current, torque and voltage in
case B whenever the reference speed, wRe f , triggers a
significant torque change.
The Modelica Association

Figure 8: Case A; quasi stationary simulation of the
speed controlled fan drive with a ready-to-use SED
model.

4.2 Simulating ideal switching effects
Figure 14 shows a simulation model considering
switching effects, which is designated as case C. In
case A and case B the dc/ac converter is modelled by
considering the power balance between supply circuit
and load circuit. However, in case C a converter modeled with ideal switches and controlled by a symmetric pulse width modulation (PWM) algorithm is used
to simulate the effects of pulsed stator voltages in the
drive. The basic differences between case C and the
simulations using power balance converters are shown
in Figure 15 and in Figure 16. Due to the converter
switching the current and the electric torque of the machine have a significant ripple.

4.3 Performance comparison of the simulations
The three simulations are developed and simulated on
a conventional 1 GHz, 512 MB PC with a 5400 rpm
hard drive with Dymola 6.0a using the DASSL solver.
Processing the quasi stationary simulation, case A, is
the fastest since it contains the smallest set of differential equations and algebraic equations among the three
investigated cases. After translation, case A has only
16 differentiated variables and 333 equations. Processing the presented results takes less than 1 s processing time. Case B shows a simulation considering
also electrical transient effects in the machine. Consequently, the model of the control system applied in

575

Modelica 2006, September 4th  5th

J.V. Gragger, H. Giuliani, C. Kral, T. Buml, H. Kapeller, F. Pirker

Figure 10: Reference speed and real fan speed in
case B.
Figure 9: Case B; electrical transients simulation of
the speed controlled fan drive with a ready-to-use
SED model.
case B is more complex. Case B contains 42 differentiated variables and 867 equations, which is the reason
for a processing time increase of 50% for the presented
results. However, processing case B takes still a much
smaller effort than processing case C. Calculating the
presented results of case C takes around 5 min 30 s.
The reason for this tremendous computation time is
that the solver iterates each event in order to find the
precise switching instant. Since the converter in case C
works with a 2 kHz PWM the processing effort is considerably. Case C contains 41 differentiated variables
and 849 equations, which indicates a smaller system
than case B. Still, case B can be solved much faster
because the dc/ac converter in the ready-to-use drive
model is modeled by only considering the power balance between supply circuit and load circuit.

Figure 11: RMS values of the stator phase currents of
the machine in case A and case B.

balance analyses of electromechanical systems, such
as HEV or electric vehicle concepts. In such applications switching effects and electrical transient effects
can be neglected. The models in the TransientDrives package can be used when system responses
on fast transient events have to be investigated or if
5 Conclusions
controller optimization is the focus of investigation.
Furthermore, it is shown that the application of power
The scope, the structure and the most important packbalance converter models helps saving a considerable
ages of the SED library are described. Three simulaamount of computer resources when simulating election setups with similiar parameter settings on differtric drives with Modelica.
ent levels of abstraction are presented and the results
are compared. The comparison shows that the readyto-use QuasiStationaryDrives models of the
SED library have the best performance. However, they References
dont show all the physical effects that can be analysed
with a simulation considering electric transient effects [1] D. Simic, H. Giuliani, C. Kral, and F. Pirker,
and converter switching effects. Typical applications
Simulation of conventional and hybrid vehicle infor QuasiStationaryDrives models are energy
cluding auxiliaries with respect to fuel consumpThe Modelica Association

576

Modelica 2006, September 4th  5th

The SmartElectricDrives Library - Powerful Models for Fast Simulations of Electric Drives

Figure 12: Electrical torque of the machine in case A
and case B.
Figure 14: Case C; electrical transients and switching effects simulation of the speed controlled fan drive
with elementary SED models.

Figure 13: RMS values of the stator phase currents of
the machine in case A and case B.
tion and exhaust emissions, SAE World Congress
Figure 15: RMS value of the stator phase current of
2006, April 2006.
the machine in case C.
[2] D. Simic, C. Kral, and H. Lacher, Optimization
of a cooling circuit with a parameterized water
pump model, 5th International Modelica Conference 2006, 2006.
[3] J. V. Gragger, D. Simic, C. Kral, H. Giuliani,
V. Conte, and F. Pirker, A simulation tool
for electric auxiliary drives in hevs the smartelectricdrives library, FISITA World Automotive
Congress 2006, Yokohama, Japan, 2006.
[4] D. W. Novotny and T. A. Lipo, Vector Control and
Dynamics of AC Drives, Oxford University Press,
Oxford, 1996.
Figure 16: Electrical torque of the machine in case C.
The Modelica Association

577

Modelica 2006, September 4th  5th

J.V. Gragger, H. Giuliani, C. Kral, T. Buml, H. Kapeller, F. Pirker

The Modelica Association

578

Modelica 2006, September 4th  5th

Quasi-stationary AC Analysis Using Phasor Description With Modelica

Quasi-stationary AC Analysis
Using Phasor Description With Modelica
Olaf Enge1), Christoph Clau1), Peter Schneider1), Peter Schwarz1),
Matthias Vetter2), Simon Schwunk2)
1) Fraunhofer Institute Integrated Circuits, Branch Lab Design Automation,
Zeunerstrae 38, 01069 Dresden, Germany
olaf.enge@eas.iis.fraunhofer.de
2) Fraunhofer Institute Solar Energy Systems, Heidenhofstrae 2, 79110 Freiburg, Germany

Abstract
The investigation of large technical systems by simulating long time periods requires very effective
methods. If only sinusoidal quantities occur in the
electrical domain, phasor analysis can be used to describe the steady-state behaviour of this part of the
physical system. In this paper, modelling of AC circuits and electromechanical drives with electrical AC
subsystems is presented using the well-known phasor
method within Modelica. To this end, some fundamentals concerning phasor description are repeated
before a possible implementation of AC circuits within Modelica is proposed. This implementation uses a
new Modelica-library which is still under construction. The main content of this library is introduced.
Furthermore, some statements are given concerning
the librarys usage when coupling with other domains
or with transient submodels, or when switching between transient and phasor analysis, respectively.
Finally, three examples are presented.
Keywords: sinusoidal quantity, steady-state analysis,
phasor domain models, model coupling, variable
model structure

1

Introduction

Many linear electrical circuits use alternating current
(AC circuits). Most of them operate with a nominal
frequency and nearly ideal sinusoidal electrical quantities. Distortions occuring due to circuits
nonlinearities can often be neglected. This way, we
can define so called idealized linear AC circuits. They
shall be characterized by ideal sinusoidal quantities
and one single (nominal) frequency.
Three operating modes can be distinguished in idealized linear AC circuits: the steady-state mode, the
dynamic mode, and the so-called quasi-stationary
mode. The first mode is characterized by constant amplitudes and phases of all sinusoidal quantities. The
The Modelica Association

system yields the sinusoidal steady-state response.
During the second mode, fast dynamic changes of
sinusoidal quantities occur. Fast means that the appearing dynamic processes shall have a low dominant
time constant compared to the nominal frequency.
Usually, it is a good choise if this time constant is less
than 10T ( T = 1  f , f  nominal frequency). In this
case, the full transient (or complete) response of a system has to be considered (using e.g. the electrical
Modelica standard library [14] or Haumers libraries
[6]). Such fast dynamic processes appear with
switching operations or (stepwise or fast continuous) changes of parameters. Because consisting only
of decreasing shares in most cases, they fade away
with advancing time and can be neglected after a finite
time period. The third mode  the so-called quasi-stationary mode  shall be understood as a sequence of
steady states on the following condition: parameters
(which would be constant at steady-state analysis)
may vary extraordinary slowly compared to the nominal frequency. It is signalized by slow alterations of
amplitudes and phases of the sinusoidal quantities.
Usually, it is a good choise if the dynamic processes
have a dominant time constant higher than 10T .
All three operating modes can be investigated by implementing behavioural models (differentialalgebraic equations) within appropriate numerical
simulation systems. Because the instantaneous values
of the sinusoidal quantities are changing perpetually,
the performance of dynamic simulations depends on
the nominal frequency and, hence, is limited. Especially, the study of such systems for a long time period
(hours, days, years) is hardly possible.
In this paper, a very efficient method for modelling
AC circuits and its implementation within Modelica is
presented. This method can naturally be used for
steady-state analysis of such systems. The methods
principal idea is the substitution of the sinusoidal
(time-depending) physical quantities in the transient
model by constant complex quantities  so-called

579

Modelica 2006, September 4th  5th

O. Enge, C. Clau, P. Schneider, P. Schwarz, M. Vetter, S. Schwunk

phasors  in the steady-state model. Hence, the systems behaviour is not described by differential but by
algebraic equations. The models are called phasor-domain models. This method of steady-state analysis
was introduced by Steinmetz in the late 19th century
([10], [11]). Nowadays it is well-known and can be
found in many elementary textbooks (e.g. [1], [3], [4],
[5], [7], [8], [9]). Wiesmann also uses such an approach in parts of his power-systems library for
Modelica ([12]).

This phasor has the constant length X and forms a
constant angle  with the real axis (see Fig. 2).

Sometimes it is necessary to study physical systems
containing both AC circuits and subsystems from other domains for long time periods. Then the quasistationary operating mode of AC circuits is of special
interest. Considering this mode, a combination of
phasor-domain and transient models is possible.

2

Phasor description of AC circuits

2.1

Fundamentals

Figure 1: Rotating vector in complex plane

A sinusoidal signal of the form
x ( t ) = x sin ( t +  )

(1)

( x  amplitude,   angular frequency,   phase)
can be understood as a well-defined part of a time-dependent complex quantity
x ( t ) = xe

j ( t +  )

= x [ cos ( t +  ) + j sin ( t +  ) ] .

rotating vector having a constant length x and forming an angle of ( t +  ) with the real axis at time
instant t (see Fig. 1). The original signal x ( t ) can then
be gained at any time instant by projecting x ( t ) to the
imaginary axis according to
x ( t ) = Im [ x ( t ) ] = Im [ xe
= x sin ( t +  ) .

]

(3)

If the angular frequency  is constant then the angular velocity of a rotating vector is also constant and,
therefore, is not of special interest. The complex quantity x ( t ) and, hence, the original signal x ( t ) are
adequate determined by two values: amplitude x and
phase  . Using the rms value X = x  ( 2 ) of the
signal instead of its amplitude, x ( t ) can be represented by the following phasor
j

X = Xe .
The Modelica Association

Please note, that
d
----- { Im [ Xe jt ] } = Im [ jXe jt ]
dt

(2)

In the complex plane, signal x ( t ) from (2) describes a

j ( t +  )

Figure 2: Phasor in complex plane

(4)

(5)

which means that a derivation of x ( t ) in time domain
has to be replaced by multiplication with j in phasor
domain.
2.2

Ohms Law in generalized form

Ohms Law is well-known in DC analysis. Using
phasor description, this law can be written in an analogous form for AC analysis. Ohms Law reads in its
generalized (or complex) form
V = ZI ,

(6)

where V and I are the voltage and current phasors, respectively, and Z denotes the impedance or complex
resistance. It holds for linear electric components
like resistors, inductors, and capacitors. Consideration
of the relations between current and voltage at each
type of component yields the corresponding impedances.
Assuming
a
sinusoidal
current
i ( t ) = i sin ( t +  i )

580

and a sinusoidal voltage
Modelica 2006, September 4th  5th

Quasi-stationary AC Analysis Using Phasor Description With Modelica

v ( t ) = v sin ( t +  v ) and replacing them by corresponding phasors V and I , the impedances of each
type of component can finally be represented with (5)
as:
ZR = R ,

(7)

Z L = jL ,

(8)

1
1
Z C = ---------- =  j -------C
jC

(9)

(indices R, L, and C stand for resistor, inductor, and
capacitor, respectively).
In AC circuits, inductors coupled by magnetic fields
often occur. The behaviour of such a coupling can easily be included into the phasor description. Let M
denote the mutual inductance between two coils. Then
the EMF in coil 1 caused by a current through coil 2
reads
di 2 ( t )
e1 ( t ) = 
+ M -------------dt

(10)

(the upper sign holds if the coils are oriented likewise). This yields the following voltage drop
di 2 ( t )
v 1 ( t ) =  M -------------- .
dt

V 1 =  jM I 2 ,

(12)

V 2 =  jM I 1 .
Kirchhoffs Laws

According to Kirchhoffs Current Law, the sum of the
instantaneous values of all currents in a node must
vanish at each point in time

k i k ( t )

= 0,

(13)

where k represents each branch being incident with
the considered node. In case of sinusoidal quantities,
each current i k ( t ) = i k sin ( t +  ik ) can be determined by projecting a rotating vector
i k = i k e

j ( t +  ik )

=

2I k e

jt

(14)

to the imaginary axis. Thats why it follows from (13)

k Im [

2I k e

jt

] = 0

The Modelica Association

k Im [ Ik ]

(15)

= Im

k I k

= 0.

(16)

Displacing the time axis by   2 , the currents read
i k ( t ) = i k cos ( t +  ik ) . Those can be represented
by projecting the rotating vector i k to the real axis.
Therefore, it holds
Re

k I k

= 0.

(17)

Equations (16) and (17) yield finally the generalized
form of Kirchhoffs Current Law
Re

k I k

+ jIm

k I k

=

k I k

= 0 . (18)

Kirchhoffs Voltage Law says that the sum of the instantaneous values of all voltage drops in one mesh
must vanish at each point in time

k v k ( t )

= 0.

(19)

The generalized form of this law can be derived in the
very same way as shown above. It reads

(11)

With (5), the relations between the current phasor in
one branch and the voltage phasor in the other branch
read finally

2.3

for each time instant t which means finally

k V k
2.4

= 0.

(20)

Coupling phasor domain models and
transient models  electric machines

Sometimes, investigations of models consisting of a
fast part and a comparatively slow part shall be carried
out. If only sinusoidal quantities occur in the fast part
of such a model then it can be of interest to use a
phasor domain description for this submodel. In these
cases, it is necessary to couple at least two submodels:
one submodel in phasor-domain description and one
transient submodel.
For convenience in the following, phasor-domain
models are referred to as P-models while transient
models are called T-models. To couple a P- and a Tsubmodel within one mathematical description (see
Fig. 3), some assumptions must be fulfilled:
 the connection between the two submodels consists of one-directional signals only (signals
computed within the P-submodel and needed to
be known in the T-submodel are referred to as Isignals  input to the phasor domain; signals
resulting from the T-submodel and influencing
the P-submodel are referred to as O-signals 

581

Modelica 2006, September 4th  5th

O. Enge, C. Clau, P. Schneider, P. Schwarz, M. Vetter, S. Schwunk

output from phasor domain),
 all I-signals are only allowed to alter very
slowly compared with the P-submodels nominal frequency.

Figure 3: Coupling a P- and a T-submodel

The second point in the list requires either some a priori knowledge about the T-submodel or a permanent
check of the first time derivatives of all I-signals. The
consideration of all assumptions ensures that the Psubmodel is always in steady-state or quasi-stationary
mode.
Electric machines consist of a mechanical and an electrical subsystem. The complete response of the
mechanical part is very often slow compared to that of
the electrical part. This is particularly true with AC
machines because of the nominal frequencies mostly
used. Under certain assumptions (perfect symmetry,
no saturation etc.), the steady state of an AC machine
is characterized by ideal sinusoidal voltages and currents with constant amplitudes and phases. The steady
state is furthermore signalized by a constant angular
velocity of the rotor  with an induction machine  or
by a constant torque angle  with a synchronous machine  as well as a constant torque produced
electrically with both machines (see e.g. [13]). If the
mechanical angular velocity or the torque angle alter
very slowly compared to the electrical nominal frequency then the electrical subsystem is in quasistationary mode. This results in a slow variance of amplitude and phase of the electric sinusoidal quantities.
To study electric machines in steady-state or quasistationary mode of the electrical subsystem, a combination of two submodels  a phasor-domain model of
the electrical subsystem and a transient model of the
mechanical subsystem  is possible.
2.5

Switching between phasor-domain and
time-domain models

An electrical model which is to be switched between
time domain and phasor domain may be part of a heterogeneous system containing also subsystems of
other domains. Therefore, this model is refered to as
AC submodel in the following.
If the transient response of an AC subsystem has been

The Modelica Association

faded away then a changeover from time domain to
phasor domain is possible because the system is in a
quasi-stationary mode or in a steady state. Both states
are characterized by constant or at least by nearly constant amplitudes and phases of voltages and currents.
During a numeric simulation, such a changeover causes a transition of the formerly differential-algebraic
equation system (DAE system describing the AC submodel in time domain) into a linear system of
algebraic equations (AE system describing the AC
submodel in phasor domain)
Ax = b .

(21)

In (21), matrix A may depend on time t or on state variables of other domains (see e.g. [2]) and, hence, is
known at switching time. The elements of vector b either are known (if depending on time or on state
variables of other domains) or have to be determined
during the transient simulation by scanning amplitude and phase continuously. This way, a consistent
changeover can be carried out.
A changeover from phasor domain to time domain is
always possible. It is actually necessary, if the transient response of an AC subsystem is of interest for a
time interval (e.g. caused by a step-wise change of a
parameter). In this case, the quasi-stationary or steady
state is finished at switching time. During a numeric
simulation, the AE system has to be replaced by the
corresponding DAE system. Amplitudes and phases
of all transient source components can be determined from the corresponding phasors. Additionally,
initial values for all state variables of the DAE system
are needed. These values can be calculated from the
voltage phasors across capacitors and from the current
phasors through inductors.

3

Implementation in Modelica

3.1

Basic partial models

A new library called Complex has been created for
the implementation of phasor-domain models in Modelica. This library is designed such that it can be used
like the Modelica standard library Modelica.Electrical.Analog.
An
important
difference is the definition of a so-called complex pin
instead of the standard pin to be used for connecting
components. Without any annotations, the definition
of the complex pin reads
connector ComplexPin
Real vRe, vIm;
flow Real iRe, iIm;
end ComplexPin;

582

Modelica 2006, September 4th  5th

Quasi-stationary AC Analysis Using Phasor Description With Modelica

containing real and imaginary part (vRe, vIm) of a
voltage phasor V as well as real and imaginary part
(iRe, iIm) of a current phasor I . Using this connector, important partial models like OnePort were
derived which, first, realize Kirchhoffs relations in
generalized form between the components pins and,
second, compute real and reactive (idle) power out of
internal quantities and make them available via output
signals. The main part of the code for OnePort reads
partial model OnePort
PosComplexPin p;
NegComplexPin n;
Real vRe, vIm, iRe, iIm;
Real phi_v, phi_i, phi;
Real activePwr, idlePwr;
Complex.Interfaces.ComplexOutput
complexPwr;
equation
vRe = p.vRe - n.vRe;
vIm = p.vIm - n.vIm;
iRe = p.iRe;
iIm = p.iIm;
0 = p.iRe + n.iRe;
0 = p.iIm + n.iIm;
phi_v = Complex.Math.atan2(vIm,vRe);
phi_i = Complex.Math.atan2(iIm,iRe);
phi = phi_v-phi_i;
activePwr = v*i*cos(phi);
idlePwr = v*i*sin(phi);
complexPwr.real = activePwr;
complexPwr.im = idlePwr;
end OnePort;

Real activePwr[m], idlePwr[m];
Complex.Interfaces.ComplexOutput
complexPwr[m];
equation
vRe = plug_p.complexpin.vRe plug_n.complexpin.vRe;
vIm = plug_p.complexpin.vIm plug_n.complexpin.vIm;
iRe = plug_p.complexpin.iRe;
iIm = plug_p.complexpin.iIm;
for j in 1:m loop
phi_v[j] =
Complex.Math.atan2(vIm[j],vRe[j]);
phi_i[j] =
Complex.Math.atan2(iIm[j],iRe[j]);
activePwr[j] = v[j]*i[j]*cos(phi[j]);
idlePwr[j] = v[j]*i[j]*sin(phi[j]);
end for;
phi = phi_v-phi_i;
complexPwr.real = activePwr;
complexPwr.im = idlePwr;
end TwoPlug;

This model mainly realizes Kirchhoffs Voltage Law
between the two plugs and computes real and reactive
power for all three phases.
3.2

Basic one-phase components

The basic one-phase RLC components are assorted in
the package Complex.SinglePhase.Basics.
The inductors model (see Fig. 4) reads e.g. without
any annotations and comments:

Based on OnePort and other partial models, source
components (different voltage sources, some current
generators) as well as many linear RLC components
for single-phase grids have been created.
Many AC circuits are three-phase systems. To simplify modelling of such systems using the library
Complex, the complex plug  a special multi-phase
complex pin  was implemented:

model Inductor
extends
Complex.SinglePhase.Interfaces.OnePort;
parameter Real L=1;
equation
vRe = -omega*L*iIm;
vIm = omega*L*iRe;
end Inductor;

connector ComplexPlug
parameter Integer m(final min=1) = 3;
Complex.SinglePhase.Interfaces.ComplexPin
complexpin[m];
end ComplexPlug;

Using this connector, some partial models were derived which are suitable to be extended to source
components or RLC components of symmetric multiphase systems. An example of such a partial model is
TwoPlug:
partial model TwoPlug
PosComplexPlug plug_p(final m=m);
NegComplexPlug plug_n(final m=m);
Real vRe[m], vIm[m], iRe[m], iIm[m];
Real phi_v[m], phi_i[m], phi[m];

The Modelica Association

Figure 4: Icon for comlex inductor

If the inductance is not constant but depends on time
or some other physical quantity like a mechanical coordinate then the model VariableInductor has
to be used. In this model, the inductance is governed
via an input signal.
model VariableInductor
extends
Complex.SinglePhase.Interfaces.OnePort;

583

Modelica 2006, September 4th  5th

O. Enge, C. Clau, P. Schneider, P. Schwarz, M. Vetter, S. Schwunk

Moreover, elements for realizing star connections or
delta connections as well as for connecting multiphase and single-phase components together are included in the package. Finally, some sources and
sensors are available, too.

Modelica.Blocks.Interfaces.RealInput L;
equation
vRe = -omega*L*iIm;
vIm = omega*L*iRe;
end VariableInductor;

A complete list of the Basics-package reads:
 Ground
 Resistor
 Inductor
 Capacitor
 Conductor
 Transformer
 IdealTransformer
 VariableResistor
 VariableInductor
 VariableCapacitor
 VariableConductor
 VariableTransformer

3.4

Some one-phase source components can be found in
the package Complex.SinglePhase.Sources.
Presently, voltage sources and current generators are
implemented with
 constant amplitude and phase,
 amplitude and phase governed by input signal.
Additionally, power sources with given power (constant or governed by input signal) are available.
Furthermore, the package Complex.SinglePhase contains some sensors for measuring the
phasors (rms value, phase) of voltage or current. Finally, the power quality sensor (PQ_sensor) can be
used to determine all interesting values concerning the
power and its quality.
3.3

Basic multi-phase components

The basic multi-phase RLC components are assorted
in the package Complex.MultiPhase.Basics.
These definitions can be used in symmetric multiphase grids of arbitrary number of phases. The package contains models for resistors, inductors,
capacitors, and conductors each with constant constitutive parameters or with parameters governed by
input signals. For comparability, the inductors model
with constant inductance is given here:
model Inductor
extends
Complex.MultiPhase.Interfaces.TwoPlug;
parameter Real L[m]=fill(1,m);
Complex.SinglePhase.Basics.Inductor
inductor[m](final L=L);
equation
connect(inductor.p, plug_p.complexpin);
connect(inductor.n, plug_n.complexpin);
end Inductor;

The Modelica Association

Electric induction machine

In the presented library, a model of an electric induction machine has been implemented, too. To this end,
the package Complex.Machines was created. An
induction machine can be regarded as consisting of a
mechanical and an electrical subsystem. Specific interactions take effect between the two subsystems.
The model of the induction machine combines a transient (time-domain) part of the mechanical subsystem
with a phasor-domain part of the electrical subsystem.
The model is only valid for analysing the machine
within steady-state or quasi-stationary mode of the
electrical subsystem. Fig. 5 shows the well-known
steady-state equivalent circuit for one phase of an induction machine. In this diagram, V N is the voltage

Figure 5: Induction machines equivalent circuit

phasor of the net, I denotes a current phasor (subindex s stands for the stator, subindex r stands for the
rotor, m denotes the main reactance,  refers to the
stray reactances). R and X = L are ohmic resistance and inductive reactance, respectively. The slip
between electrical angular frequency  and rotors
angular velocity  m is denoted by s, while
s = (    m )   . (Please note that this model is a
time phasor description not using any space phasors.)
Furthermore, it shall hold X s = X m + X s and
X r = X m + X r . Finally, the stray coefficient can be
determined from the reactances according to
 = 1  X m2  ( X s X r ) . Using some simplifying assumptions (e.g. R s sufficient small) and denoting the
number of phases by n, the torque produced electrically reads (see e.g. [13])

584

Modelica 2006, September 4th  5th

Quasi-stationary AC Analysis Using Phasor Description With Modelica
2

2

VN
( Xh  Xs )
T = n --------- ----------------------------------------------------------2- .
 ( R '  s ) + ( s  R ' ) ( X )
r

r

(22)

r

Slip s and torque T are the signals which connect the
mechanical and the electrical subsystem. Considering
the definitions of coupling signals in chapter 2.4 (see
Fig. 3), the slip is the I-signal and the torque is the Osignal. Hence, the slip must not vary too fast, because
one must ensure at each point in time that the electrical subsystem works within the quasi-stationary
mode. (An automatic monitoring of this demand is not
implemented in the library at the moment but would
be a nice feature.) Under this assumption, the torque is
always calculated correctly.

4

Examples

4.1

Electric circuit with varying resistance

Fig. 6 shows a simple example circuit containing a
VariableResistor-component. The voltage
source V works with constant amplitude and zero
phase. The resistance R3 is a ramp function of time
( 10 6 5 ). Fig. 7 shows the rms values of the voltage drops across resistor R2 and the inductor as well
as the source voltage. The voltages across R2 and L

depends on time. But this curve is not a transient response. It is rather a sequence of quasi-stationary
states spread over time axis. To prove this statement,
one shall have a look at the time constant of the
curves. This constant is about 0.5 s which is more than
10T because a nominal frequency of 50 Hz is used.
The real and imaginary part of the voltage drop across
the inductor is plotted in Fig. 8. This diagram shows
the variation of phase within the sequence of quasistationary states.

Figure 8: Real and imaginary part of voltage across L

4.2

Induction machine in quasi-stationary mode

This example deals with a three-phase induction machine. The test setup is shown in the schematic
diagram of Fig. 9. The machines electrical subsystem

Figure 6: Example circuit

Figure 9: Schematic diagram

is connected to a three-phase voltage source which
is the same as being connected to three single source
components. The three-phase source works with variable amplitude and phase each governed by one input
signal. During the simulation, the amplitude increases
along a ramp function (see Fig. 10, solid line) while
the phase remains at zero. On the mechanical side, the
Figure 7: Voltages drops across R2 and L, source voltage shaft of the induction machine is connected to an adThe Modelica Association

585

Modelica 2006, September 4th  5th

O. Enge, C. Clau, P. Schneider, P. Schwarz, M. Vetter, S. Schwunk

ditional inertia, a damper component, and an applied
torque. Inertia and damping constant have fixed values. The torque is governed by a ramp function which
starts at a simulation time of 20 s (see Fig. 10, dashed
line).

instant (approximately 28 s), the induction machine is
working in generator mode. Hence, the slip goes below zero. The transition of the working modes is
characterized by a change of the sign of the difference
between both frequencies or  which is the same  by
a change of slips sign. The transient process in the
second time intervall is much slower than in the first
interval. Therefore, the electrical subsystem is in the
steady state or in the quasi-stationary mode during the
complete simulation.
Finally, Fig. 12 shows the electrical active power of
one phase of the voltage source component and the
mechanical power of the complete induction machine.

Figure 10: Inputs: source voltage and applied torque

Figure 12: Electrical active power

Figure 11: Electrical and mechanical frequencies

In the first time interval (between 0 and 20 s), the induction machine works as a motor. The increasing
stator voltage causes an increasing acceleration of the
shaft. Because of the mechanical damping, the angular velocity  i.e. the shaft velocity  (see Fig. 11,
dashed line) finally reaches a value which is less
smaller than the electrical angular frequency (see
Fig. 11, solid line). Hence, the slip has only positive
values in the first time interval. Fig. 11 additionally
shows that the simulation produces a transient response of the shafts angular velocity. The time
constant during the highest acceleration is about 0.2 s
which equals 10T . Therefore, the electrical subsystem is still in the quasi-stationary mode.
In the second time interval (between 20 and 40 s), the
shaft is accelerated by an increasing torque which is
additionally applied to it. At one moment in time, the
shafts angular velocity becomes higher than the electrical angular frequency. Beginning with this time
The Modelica Association

Both curves have analogous shapes. After the transient response is faded away, the mechanical power is
three times higher than the electrical power (because
a three-phase machine is under consideration). In the
first part of the simulation, the power curves have positive values which means that the source component
produces energy while the motor consumes it. After a
simulation time of about 28 s, the curves go below zero. This fact indicates that now the induction machine
produces energy which is fed back into the electric net
via the source component.
4.3

Example for domain switching

The switching between time domain and phasor domain and vice versa will be explained on a simple
circuit containing a sinusoidal voltage source, an
ohmic resistor, and a capacitor. Fig. 13 shows the
time-domain model (on the left hand side) and the
phasor-domain model (on the right hand side). The
left circuit remains in time domain during the complete simulation. The right circuit is modelled in time
domain at the beginning. At an arbitrary point in time
( t 1 = 0.177 ), the modelling domain of the right subsystem is changed to phasor domain (T-P

586

Modelica 2006, September 4th  5th

Quasi-stationary AC Analysis Using Phasor Description With Modelica

changeover). Now, the phasor-domain description is
used until t 2 = 0.377 (again chosen arbitraryly). At
this time instant, the modelling domain is changed
back to time domain (P-T changeover). From t 2 to the
end of simulation, the time-domain model is used. The
components parameters are identical in both circuits
( R = 10 , C = 1mF ). Both sources are feeding a
voltage of 1 V at t = 0 increasing at a rate of 0.5V/s .
Because of the low increasing rate, the circuits are always in a quasi-stationary mode.

amplitude of Vc.

Figure 15: Zoomed voltages; T-P changeover

Figure 13: Schematic of domain-switching example;
left: always within time domain, right: switching from
time domain to phasor domain (T-P) and reverse (P-T)

Some simulation results are shown in the following
figures. The first three diagrams contain the voltage
drop Vcref across the capacitor of the permanent timedomain system and, from the switching system, the sinusoidal voltage drop (first and third interval) or the
amplitude of the voltage phasor (second interval), respectively (both denoted by Vc). Fig. 14 shows the
complete simulation progress, while Fig. 15 and

Figure 16: Zoomed voltages; P-T changeover

The last three diagrams show the current flowing
through the permanent time-domain circuit (Iref) and,
from the switching system, the sinusoidal current
(first and third interval) or the amplitude of the current
phasor (second interval), respectively (both denoted
by I). Fig. 17 shows the complete simulation progress,
while Fig. 18 and Fig. 19 represent the details around

Figure 14: Voltages; Vcref: always in time domain, Vc:
switching T-P and P-T (showing amplitude in P-domain)

Fig. 16 represent the details around the switching instants. Using the time-domain model for the switching
circuit, both curves (Vcref and Vc) are identical. If
this circuit is described within the phasor-domain then
the dashed curve is nearly constant showing only the
The Modelica Association

587

Figure 17: Currents; Iref: always in time domain, I:
switching T-P and P-T (showing amplitude in P-domain)

Modelica 2006, September 4th  5th

O. Enge, C. Clau, P. Schneider, P. Schwarz, M. Vetter, S. Schwunk

the switching instants. In these diagrams, both currents are identical, too, if the time-domain model is
applied to the switching circuit. If the phasor-domain
model is valid then the dashed curve is nearly constant
showing only the amplitude of I.

Studying AC systems for long time periods within the
time domain is hardly possible. Therefore, it may be
of interest to switch between a time-domain model
and a phasor-domain model and vice versa in an appropriate manner. This scenario is shortly concerned
in the paper.
Finally, simulation results of three examples are given
proving the principal capabilities of the library.

References
[1]
[2]
[3]
[4]

Figure 18: Zoomed currents; T-P changeover

[5]
[6]

[7]
[8]
[9]
Figure 19: Zoomed currents; P-T changeover

5

[10]

Summary

[11]

This paper deals with the quasi-stationary AC analysis
using phasor-domain models within Modelica. First,
the term quasi-stationary mode is declared. Hereafter, some fundamentals concerning phasor description
are repeated. Using such phasors, a possible implementation of AC circuits within Modelica is proposed.
The main content of a corresponding new Modelicalibrary is introduced. This library can be used for
modelling AC circuits in a very efficient way. Furthermore, some investigations of coupling time-domain
models and phasor-domain models are presented in
the paper. Hence, the introduced Modelica-library can
also be used for modelling electromechanical drives
with electrical AC subsystems under some assumptions. This fact is examplified by modelling an
induction machine.
The Modelica Association

[12]
[13]

[14]

588

Desoer CA, Kuh ES. Basic Circuit Theory.
McGraw-Hill, 1966.
Enge O. Analyse und Synthese elektromechanischer
Systeme. Shaker, 2005.
Irwin JD. Basic Engineering Circuit Analysis. John
Wiley & Sons, 2005.
Johnson DE. Basic Electric Circuit Analysis. John
Wiley & Sons, 1995.
Johnson DE, Johnson JR, Hilburn JL, Scott PD.
Electric Circuit Analysis. John Wiley & Sons, 1997.
Kral C, Haumer A. Modelica libraries for dc
machines, three phase and polyphase machines. In
Schmitz G (Ed.): 4th Int. Modelica Conference,
Hamburg, Germany, March 7-8, 2005, Proc., pages
549558, The Modelica Association, 2005.
Paul CR. Fundamentals of Electric Circuit Analysis. John Wiley & Sons, 2000.
Phillipow E. Grundlagen der Elektrotechnik. Verlag
Technik, 1992.
Smith RJ, Dorf RC. Circuits, Devices and Systems
 A First Course in Electrical Engineering. John
Wiley & Sons, 1992.
Steinmetz CP. Die Anwendung komplexer Gren
in der Elektrotechnik. Elektrotechnische Zeitschrift,
4(1893)42: 597599, 44: 631635, 45: 641643,
46: 653654.
Steinmetz CP. Theory and Calculations of Alternating Current Phenomena. 1e, W.J. Johnston Comp.,
1897 or 4e, McGraw, 1908.
Wiesmann H. Personal notifications to The Modelica Design Group.
Woodson HH, Melcher JR. Electromechanical
Dynamics  Part I: Discrete Systems. John Wiley &
Sons, 1968.
http://www.modelica.org

Modelica 2006, September 4th  5th

Identification and Controls of Electrically Excited Synchronous Machines

Identi cation and Controls of Electrically Excited Synchronous
Machines
Hansjrg Kapeller

Anton Haumer Christian Kral Franz Pirker
Arsenal Research
Gie nggasse 2, 1210 Vienna, Austria

Gert Pascoli

phone +43505506606, fax +43505506595, e-mail: hansjoerg.kapeller@arsenal.ac.at

Abstract

2

Model of the Controlled Synchronous Machine

Three-phase generators for traction applications are
exposed to extreme mechanic and electric stress. Yet,
the operating life has to be ensured for a period of 30
years. Therefore, technical optimization as well as focusing on today's and future aspects of environmental
protection is required. Based on that, the development
processes focuses on the minimization of losses over
the entire operational range (usual speed range 600 and
2100 rev/min) and the reduction of masses. Both results in a considerably energy saving of the drive train
operation. In many cases electrically excited synchronous machines feed diode recti ers. The effects of this
operation mode, particularly with regard to losses due
to the harmonics, should be simulated just in the beginning of the design process for optimization.

For the Modelica Standard Library a model of an electrically excited synchronous machine with constant reactances is developed using space phasor theory ([1],
[2]). In the presented paper the standard model of the
electrically excited synchronous machine is used. Yet,
for a more detailed investigation, the standard model
can be extended such way that magnetic saturation in
direct axis (d-axis) is taken into account [3].
The main synchronous generator is excited by an
auxiliary synchronous generator (with rotating threephase winding and stationary excitation) via a rotating
recti er bridge. The model of the integrated excitation
equipment consists of a simpli ed model of a synchronous machine and a three phase diode recti er bridge.
A PID controller provides excitation for the auxiliary
Keywords: traction applications; three-phase genera- synchronous excitation machine.
tors; electrically excited synchronous machines; diode
recti ers

2.1

1 Introduction
The main objective of the paper is the development
of an electromagnetic simulation tool in order to optimize operational characteristics. The particular focus of the investigation is the estimation of the losses
caused by harmonics due to the recti er. The innovative simulation tool is based on the object oriented
language Modelica. For performing the Modelica simulations the simulation tool Dymola is used. The electromagnetic behavior of the traction generator can be
modeled for typical operation modes using the simulation tool Dymola and the comprehensive Modelica
Standard Library.
The Modelica Association

Controller of the Excitation Equipment
and Design Rules

In order to achieve appropriate terminal voltages of
the traction generator under different operating conditions, it is necessary to implement an excitation voltage controller for the auxiliary excitation generator,
which in turn determines the excitation voltage and
current of the main generator, respectively.
The choice and the design of the controller (PI or PID
controller) has to be performed after identifying the
controlled system. The controller design signi cantly
depends on this identi cation.
Identi cation of the Controlled System If a stepfunction is applied to the input of the system (i.e. excitation voltage of the auxiliary excitation generator),
the response (i.e. the terminal voltage of the main

589

Modelica 2006, September 4th  5th

H. Kapeller, A. Haumer, C. Kral, F. Pirker, G. Pascoli

Figure 2: Step response of the real system (dashed
line) and approximation with PT2-element (dotted
line); criterion of least mean square is applied for optimization.

Figure 1: Scheme of the controlled system and ap- At time zero a step-function is applied to the input
proximation with delay elements. The identi cation of the system and the response can be compared with
the output of the two series connected PT1 elements,
is done with the simulation tool Dymola.
which are equivalent to a PT2 element. The two PT1
elements have the time constant characteristics T1 and
generator) can be observed. The controlled system is T2 , respectively, and the resultant gain kS . The series
shown in Fig. 1 and consists of the (main) synchronous connected PT1 elements will be ne tuned such way
machine and the auxiliary excitation generator. From that step responses of main controlled system and the
Fig. 2 it is obvious, that the analysis of the controlled step response of the series connected PT1 elements cosystem shows a non periodic second order system. The incide. This can be done by adjusting the time conterminal voltage of the excitation synchronous gener- stants T1 and T2 and the resultant gain kS with respect
ator arises with a rst order delay (PT1) and the ter- to a criterion, e.g. the least mean square criterion.
minal voltage of the main synchronous machine arises The comparison of both, the step response of the conwith a rst order delay, too. The system therefore ap- trolled system and the step response of the approximatpears as non periodic second order system (PT2 ele- ing (equivalent) PT2 element, is shown in Fig. 2. The
ment). The structure of the second order controlled use of the least square mean criterion results in a very
close approximation of the system response. From the
system is:
identi ed time constant characteristics T1 and T2 and
kS
the resultant gain kS , the transfer function of the equivG(s) =
=
s 2
s
+
2D
+
1
alent PT2-element can be estimated according to (1).
S
w
w
The identi cation of the controlled system is perkS
kS
=
=
(1)
2
formed semiautomatically. In the simulation tool Dy(TS s) + 2DS TS s + 1 (1 + T1 s) (1 + T2 s)
mola a rst coarse setting of the time constant T1 and
kS
gain of the controlled system
T2 and the resultant gain kS can be set to get a rst apw
oscillation frequency of the undamped
proximation of the response of the controlled system.
assumed system
In a postprocessing application the least mean square
TS
reciprocal value of the oscillation frecriterion will be performed to get correctly identi ed
quency of the controlled system
values.
DS
attenuation ratio (DS > 1) aperiodic
system with real singularities s =
Parameterization of the Controller After the idenT1 1 resp. s = T2 1
ti cation one of the following methods respectively
T1 , T2 time constants T1 and T2
The Modelica Association

590

Modelica 2006, September 4th  5th

Identification and Controls of Electrically Excited Synchronous Machines

rules for setting the control parameters can be used:
1. tables (e.g. empirical formula which controller
to which controlled system, see [4]),
2. analytical points of view (e.g. structure optimized
controllers),
3. parameter adjustment strategies:
(a) compensation method [5] (identi cation via
step response, cp. Fig. 2, or via open loop
frequency response, see [6])
(b) via adjusting the control parameters in situ,
if the controlled system is not critical
Figure 3: Dependence between desired setpoint value
(c) simulation of the closed loop and use of em- of the voltage and speed.
pirical control settings.
Compensation Method In this paper the compensation method will be used. The idea behind this method
is to implement the controller as an inverse function of
the already identi ed controlled system enhanced with
an additional integral time (TK ).
Then the controller of a PT2 system looks like:
1
1
=
G(s) TK s
1
TS s
1+
+
2DS TS s 2DS

K(s) =
=

2DS TS
kS TK

(2)

This control structure is equivalent to a PID control
structure.
K(s) = kR
kR
TI
TD

1+

1
+ TD s
TI s

(3)

gain of the controller
integral time
derivative time

The parameters can be found by comparing the coef cients,
TI = 2DS TS ;

(4)

TS
;
2DS

(5)

2DS TS
TI
=
:
kS TK
kS TK

(6)

TD =
kR =

When TK = TI is assumed, from (4) and (6) the
conherence kR = kS 1 can be deduced. The transfer
function of the closed loop is, however, a rst order
The Modelica Association

system. The value of kR determined using the assumption TK = TI can be used as an initial setting during the
initial operation phase. It is possible to increment the
gain of the controller to enhance the dynamic performance of the whole controlled system (e.g. ve times
the value of kR could be a feasible setting).
Principle of the Voltage Measurement  Sensing of
the Actual Value The actual value of the line-to-line
voltage of the (main) synchronous machine has to be
measured and compared with the speed depended, desired set point value of the voltage, as shown as in
Fig. 3. The resultant deviation from the desired value
feeds the voltage controller, which in uences the controlled system in such a way, that the deviation from
the desired value decreases.
Implementations of voltage controllers often measure
the main generator voltage with a three phase measuring transformer. In practice the secondary alternating
voltage is recti ed, smoothed by a capacitor and then
measured. This measured value corresponds with the
arithmetic mean value of the recti ed three-phase voltage. In the simulation environment the recti cation
of the secondary alternating voltage is performed by
an algebraic algorithm that determines the maximum
value of the absolute values of the line-to-line voltages. To minimize non linear load effects due to the
recti er or static thyristor inverters (noise), the rectied three-phase measuring voltage is low pass ltered.
The attenuation characteristic of the chosen low pass
lter is "critical", which means, that the low pass lter is a non-oscillating Butterworth lter (asymptotic
case). Taking into account the dynamic quality factor

591

Modelica 2006, September 4th  5th

H. Kapeller, A. Haumer, C. Kral, F. Pirker, G. Pascoli

on the one hand and the ripple suppression on the other
hand the choice of a 3rd order butterworth low pass
lter is useful. The reference lter decreases the dynamic performance of the whole controlled system but
it is necessary to avoid instabilities due to the superposed noise in the actual value of the main generator
voltage.
Predetermined Desired Value of the Line-to-Line
Voltage (Speed Dependent) Quite often the shaft of
the main synchronous generator is driven by a diesel
engine and the predetermined desired value of the voltage of the main generator can be derived from the
mechanical speed of the generator shaft: if the absolute value of the rotational speed decreases, the desired value of the voltage of the main generator shall
decrease proportionally, too. If the mechanical shaft
speed is to high, the desired value of the line-to-line
voltage shall be limited to the nominal generator voltage. Furthermore the desired value of the voltage is
a positive quantity, because we assume that the sense
of the rotation (e.g. of a diesel-driven generating set)
does not change. The coherence between speed and
voltage is depicted in Fig. 3.

with the Modelica language and provides model components in many domains that are based on standardized interface de nitions. One domain is the so called
Machines Library. This package contains components
to model electrical machines, specially three phase induction machines, based on space phasor theory.
The following types of machines, however, can be
modelled:
three phase asynchronous induction machines
three phase synchronous induction machines
DC machines with different excitation
In this paper machine parameters for the main synchronous machine and the auxiliary exciting synchronous generator (with rotating three-phase winding
and stationary excitation) are taken from the standard
model "Electrical excited synchronous induction machine with damper cage"of the Machines library.
2.1.2

Machine parameters (main synchronous generator):

Recti er with Electrical Load In a standard application a traction generator feeds a diode recti er with
an intermediate circuit and the electrical load, for instance inverter fed traction motors. If the inverter
is working with a very high pulse rate, it is possible to model the inverter and the traction motors as
a constant-power sink. Figure 4 shows the electrically
excited synchronous machine with the diode recti er,
the smoothing capacitor in the DC circuit and the modelled constant-power sink (for example 15 kW).
Mechanical Drive To simplify the simulation we assume, that the driving engine runs with constant mechanical speed, guaranteed by the speed controller of
the diesel-driven generating set. The rotational speed
ripple effect due to the inherent torque ripple, mainly
caused by the diesel engine and, to a lesser extent,
from the main synchronous generator (due to feeding
the diode recti ers), is neglected.
2.1.1

Initial Operation Phase of the Voltage Controller

The simulation environment Dymola includes the
Modelica Standard Library. This library is a standardized and free package that is developed together
The Modelica Association

Machine Parameters

592

rotor's moment of inertia = 0:29 kg m2
number of pole pairs (Integer) = 2
warm stator resistance per phase = 0:03 W
stator stray inductance per phase = 0:1=(2 p
fNominal ) H
main eld inductance in d-axis = 1:5=(2 p
fNominal ) H
main eld inductance in q-axis = 1:5=(2 p
fNominal ) H
damper stray inductance in d-axis = 0:05=(2 p
fNominal ) H
damper stray inductance in q-axis = 0:05=(2 p
fNominal ) H
warm damper resistance in d-axis = 0:04 W
warm damper resistance in q-axis = 0:04 W
nominal stator RMS voltage per phase = 100 V
nominal frequency fNominal = 50 Hz
no-load excitation current @ nominal voltage and
frequency = 10 A
Modelica 2006, September 4th  5th

Identification and Controls of Electrically Excited Synchronous Machines

warm excitation resistance = 2:5 W
stray fraction of total excitation inductance =
2:5%
Excitation machine's parameters (simpli ed synchronous generator):
number of pole pairs (Integer) = 3
warm stator resistance per phase = 5=3 0:03 W
stator stray inductance per phase = 5=3 0:1=(2
p fNominal ) H

Figure 4: Closed loop with constant-power sink.

main eld inductance in d-axis = 5=3 1:5=(2 p
fNominal ) H

2.2

nominal stator RMS voltage per phase = 25 V
nominal frequency fNominal = 75 Hz
no-load excitation current @ nominal voltage and
frequency = 1 A
warm excitation resistance = 25 W
2.1.3

Setting of the Control Parameters

If the main synchronous machine and the auxiliary
exciting synchronous generator are modeled with the
parameters speci ed in the previous subsection, the
whole system including the voltage PID controller can
be arranged and simulated. For the given machine parameters, the least mean square method leads to the
following parameters of the controlled system results:
kS = 7:2387
w = 14:01 s

1

TS = 0:071375 s

gain of the controlled system
oscillation frequency of the
undamped assumed system
reciprocal value of the oscillation frequency of the controlled system
attenuation ratio (DS > 1)
aperiodic system with real
singularities s = T1 1 resp.
s = T2 1
time constant T1
time constant T2

Simulation Results of the Three-Phase
Generator for a Traction Application

Using the simulation environment Dymola it is possible to simulate and test the command action (Fig. 5)
of the closed loop (Fig. 4) for plausibility reasons. At
time zero, the auxiliary exciting synchronous generator and the main synchronous machine (without electrical load) will be accelerated until the mechanical
nominal speed of the traction application is reached
(= 1500 min 1 ). After the transient, the value of
the desired line-to-line voltage will be
p achieved (rms
phase-to-phase voltage is equal to 3 100 V). In
Fig. 5 the actual rms values of the ltered and the un ltered line-to-line voltages are displayed. Using a constant power sink model, 1s later, a load step from 0 to
15 kW, is applied. The effect of the voltage ripple and
the harmonic losses caused by the full bridge recti er
are discussed in the following section.

3

Simulation of the Harmonic Losses

The estimation of the harmonic losses due to the current ripple is performed with the entire model shown in
Fig. 4. In particular, the observation of additional harmonic losses in the stator winding and the excitation
circuit of the main synchronous machine is of interest,
T1 = 0:16841 s
because in the beginning of the design process it is imT2 = 0:03025 s
portant to know, how these additional harmonic losses
With these numeric values the parameter settings of in uence the size of the machine and if the reduction
the voltage PID controller can be determined accord- of masses is possible. As depicted in Fig. 6, the stator
ing to (4)(6):
current shows a signi cant current ripple. Are seriTI = 2DS TS = 0:19867 s integral time
ous additional harmonic losses the consequence? The
TS
higher the losses the higher is the thermal stress and
= 0:02565 s derivative time
TD =
2DS
the larger is the resultant size of the generator. If the
TI
kR =
= 0:13815
gain of the controller
simulation legitimates that these additional losses are
kS TK
not relevant, a reduction of masses is suggested and
DS = 1:39

The Modelica Association

593

Modelica 2006, September 4th  5th

H. Kapeller, A. Haumer, C. Kral, F. Pirker, G. Pascoli

Figure 5: Observation of the un ltered and ltered
(smooth curve) voltage between the terminals: command action of the closed loop if an increase of
power occurs (from 0 kW to 15 kW; activation of the
constant-power sink after 1 s).

Figure 6: Current ripple due to diode switching effects.
The observation of additional harmonic losses in the
stator winding and the excitation circuit of the main
synchronous machine is of interest.

this results in a considerably energy saving of the drive
train operation.
The voltage ripple due to effects caused by the full
bridge recti er can be observed in Fig. 5 during the
transient in the beginning of the simulation and after
applying a load step from 0 to 15 kW. The salient distortion in the intermediate circuit voltage arise due to
currents in the stator winding, caused by the mechanical load or the inherent moment of inertia of the entire
rotating masses, and from switching events of the rectifying diodes (Fig. 6). A theoretical work about rectifying effects like current ripples and voltage distortion
caused by converters can be found in [7].
The assumptions for the simulation of the harmonic
losses are:

This results in a corresponding intermediate circuit voltage of 233:9 V according to:
2p

VDC
6
=
VRMS 2p

Z12 p

2 cos (x) dx =

2p
12

p 3
2
p

(7)

load step from 0 to 15 kW by means of a power
sink

The observation of the intermediate circuit voltage and
current during the above mentioned increase of power
is depicted in Fig. 7. During the initial no load operation (t < 1 s), the current of the intermediate circuit
is zero and the intermediate voltage reaches the peak
value of the recti ed terminal voltage. When the machine is loaded with 15 kW (t > 1 s), the intermediate
main synchronous machine with constant reaccurrent increases and the intermediate voltage reaches
tances
233:9 V, according to the desired pre-set value of the
excitation synchronous generator with rotating recti ed terminal voltage, as determined by (7). The
simulation result in Fig. 7 shows, that with the conrecti er bridge
trolled synchronous machine the desired intermediate
voltage controller with optimized parameters
circuit voltage under load conditions can be reached
and that the current in the DC link arise accordingly.
recti er bridge on load side
Discussion of the Simulation Results The stator
current ripple and the square wave form of the stator
voltage (note: not sinusoidal) depicted in Fig. 6, sugconstant mechanical speed = 1500 rpm
gest a further inspection of the simulation results. By
desired
rms phase-to-phase voltage is equal to means of a harmonic distortion factor estimation, the
p
additional losses can be estimated.
3 100 V

Further boundary conditions:

The Modelica Association

594

Modelica 2006, September 4th  5th

Identification and Controls of Electrically Excited Synchronous Machines

Figure 7: Observation of the intermediate circuit voltage and current if an increase of power occurs (from
0 kW to 15 kW; activation of the constant-power sink
after 1 s).

The total harmonic distortion factor (THD) of the current in the stator winding of the main synchronous machine can be calculated by:
v
u 
u I2
u
sn
t n=2
T HDs =
= 30%
2
Is1

due to the harmonics, can be simulated in the beginning of the design process for revealing possible optimizations. The presented innovative simulation model
is based on the object oriented language Modelica.
Based on the simulation tool Dymola with the provided comprehensive Modelica Standard Library, the
electromagnetic behavior of the traction generator can
be modelled for typical operation modes. To achieve
appropriate terminal voltages of the traction generator under such typical operation conditions, it is necessary to implement an excitation voltage controller
for the auxiliary excitation generator, which in turn
determines excitation voltage and current of the main
generator, respectively. The choice and the design of
the controller has to be performed after identifying the
controlled system. The identi cation is performed applying a step response. The control parameter are determined using the compensation method. After that it
was possible to simulate the entire traction generator
model. The analysis of the additional harmonic losses
due to the full bridge recti er shows, that the entire
additional harmonic losses are not so severe and can
be neglected in the beginning of a design process for
traction generators.

References

This results in additional harmonic losses about 9% in [1] H. Kleinrath, Stromrichtergespeiste Drehfeldmaschinen. Wien: Springer Verlag, 1980.
the main synchronous machine.
The total harmonic distortion factor (THD) of the cur- [2] C. Kral and A. Haumer, Modelica libraries for dc
rent in the excitation circuit of the main synchronous
machines, three phase and polyphase machines,
generator can be calculated according to:
Modelica Conference, pp. 549558, 2005.
v
u 
[3] H. Kleinrath, Grundlagen elektrischer Maschinen.
u I2
u
en
Wiesbaden: Akademische Verlagsgesellschaft,
t n=1
T HDe =
= 7:6%
2
1975.
Ie0

This results in additional harmonic losses about 0:6% [4] A. Weinmann, Regelungen, Analyse und technischer Entwurf, vol. 1. Wien: Springer Verlag, 3 ed.,
in the excitation winding of the main synchronous gen1983.
erator.
These results are discovering, that the entire additional [5] O. Fllinger, Regelungstechnik.
Heidelberg:
harmonic losses are not so severe and can be neglected
Hthig Verlag, 8 ed., 1994.
when starting the design process of traction genera[6] D. Schroeder, Elektrische Antriebe- Regelung von
tors.
Antriebssystemen. www.springer.de: Springer,
2 ed., 2001.

4

Conclusion

In this paper an electrically excited synchronous machine feeding a diode bridge recti er, as used in traction applications, is investigated. The effects of this
operation mode, particularly with respect to losses
The Modelica Association

[7] J. Cano, G. Orcajo, J. Mayordomo, R. Asensi,
M. Cabanas, and M. Melero, New transfer functions of an accurate estimation of harmonic distortion in AC/DC converter working under unbalanced conditions, Conference Proceedings of the

595

Modelica 2006, September 4th  5th

H. Kapeller, A. Haumer, C. Kral, F. Pirker, G. Pascoli

IEEE Symposium on Electrical Machines, Power
Electronics and Drives, SDEMPED, pp. 409414,
1999.

The Modelica Association

596

Modelica 2006, September 4th  5th

Session 6a

Session 6a
Language, Tools and Algorithms 5

The Modelica Association

597

Modelica 2006, September 4th  5th

Session 6a

The Modelica Association

598

Modelica 2006, September 4th  5th

Dynamic Optimization of Energy Supply Systems with Modelica Models

Dynamic Optimization of Energy Supply Systems with
Modelica Models
CHR. Hoffmann

H. Puta

Technische Universitt Ilmenau
P.O. Box 10 05 65, 98694 Ilmenau, Germany

Abstract

duction of operational cost as well as an increase in the rate of return for the investment.
The paper describes the simulation of a heat
supply system by means of object-oriented
modelling with Dymola/Modelica. The final
aim of such a simulation is to develop a model
predictive control strategy on the basis of the
proposed object-oriented model in Dymola/Modelica. To develop such a control strategy it is necessary to gain knowledge about the
heat demand of buildings and the power usage
of its different components. The use of Computer Aided Engineering (CAE) can lead to a
further reduction of development costs. A Dymola library named RECOMB has been created with the purpose of modelling and simulation of such heat supply systems. The name
RECOMB [16] stands for Renewable Energy
Components mOdelling and optiMisation of
Buildings. The library itself consists of multi
sub-libraries and following sub-libraries of crucial importance:

The paper describes a design tool for decentralised energy supply by preferable use of renewable energy. The powerful modelling language
Modelica has been used to develop a model
library for input data generation and/or predicting and modelling the main parts of the energy
supply system for the simulation tool Dymola.
An optimal control design using the well suited
Dymola model in connection with Matlab [21]
is performed with the solver HQP [15].
Application to a solar heating supply system
with two storages demonstrates the effect of
minimizing the use of additional heating and the
realization by a model predictive control strategy.

Introduction
To build a moor it needs about 50 000 years, the
youngest brown coal dates from 65 million
years ago, about 1850 the first coal (also oil and
a bit later gas) was excavated and newest estimations predict that coal, oil and gas from soil
may be spent in about 2250, completely. That
means human activity has consumed all the
natural resources developed in millions of years
within a delta impulse on time scale i.e. within
about 400 years!
Realizing these facts it is high time that renewable energy sources become more and more
important, mainly due to the shortage of fossil
fuels, which is well known. Fortunately, we still
can dispose over mixed energy supply, with
great challenges arising for planning and control of heat supply systems, if these systems
also work with different renewable energy
sources (earth heat, solar radiation, exhaust air
heat from building), which lead to control problems with a higher rank of complexity. The
main goal of these control strategies (taking into
account the weather of the past and predictions
of energy requirement in the future) is the reThe Modelica Association






Weather
Predict
HESys
Buildings

The components and the resulting models for
the thermodynamic models of the sub-library
HESys were validated by comparing them with
existing simulation software [11], [12], while
the building models were validated with help of
German guidelines [9] as well as with other
simulation software [8],[10]. Fig. 1 show the
structures of the library RECOMB.

599

Modelica 2006, September 4th  5th

C. Hoffmann, H. Puta

Optimization

RECOMB
Buildings

In this article three different possibilities the
dynamic optimization using the Dymola/Modelica model are shown:

Complete rooms
Heat transfer
Heating

1. Offline optimization by HQP and
Simulink S-function interface
2. Model predictive control (MPC) by
HQP and Simulink S-function interface
3. Discrete dynamic programming
(DDP) by Matlab coupled with
Dymola models via Simulink Sfunction interface

Simple Building
Ventilator
Wall elements
Consumer Charateristics
Power Consumption
Water Consumption
Examples

The main goals of the different optimization
possibilities are the maximization the renewable
energy part to the supply of buildings and the
analysis of the performance of the methods. The
general continuous-time optimization problem
to be solved is:

Buildings
HESys
Weather
Functions
Material constants

[

]

tf

[x(t ), u(t ), t ]dt  min

I (x(t ), u(t )) =  x(t f ) +

HESys

u(t )

t0

Additions

with the constrains:

Heating
RenewableEnergy Converter

x(t 0 ) = x 0 (intial states)

Storages

g x(t f ) = 0 (final state constraints)

[

]

[ ]
t  [t , t ] (inequality constraints)

Icons

f [x(t ), u(t ), t ] = 0 t  t 0 , t f (equality constraints)

Interfaces

h[x(t ), u(t ), t ]  0

Sources and Sinks

f

The form of this criterion is referred to as Bolza
functional with Mayer term (end state evaluation) and Lagrange term (evaluation of the energy).
A first order differential equation system describes the system to be optimized in the form:
x (t ) = f [x (t ), u ( t ), t ] t  [t 0 ,t f ]

Weather
Predict
Weather
Fig. 1: Structure chart of RECOMB

The vector x(t ) describes the state vector and
the vector u(t ) the control vector.
The optimization tool HQP is a numerical optimal solver and before this tool can be used for
the solution of the optimization problem, the
problem must be discretized. The exactly discretized optimization problem is shown in subsection 3. The simple form of the general
nonlinear optimization problem is:

This library constitutes the basic of the dynamic
optimization by HQP und discrete dynamic
programming by Matlab. It uses the advantage
of the object-oriented modeling over the illustration the material flows and information
flows.

The Modelica Association

0

600

Modelica 2006, September 4th  5th

Dynamic Optimization of Energy Supply Systems with Modelica Models

x0

Procreation of a
Modelica model

u0
u1

x=

u K 1
I ( x )  min with c ineq ( x)  0 ( in -

Transformation into
Simulink model

x

equality constraint s) and c eq ( x) = 0 (equality
constraint s)

1. Offline optimization by
HQP and Simulink sfunction interface

Matlab control of HQP and
final data evaluation

For dynamic optimization using the Dymola
Modelica model the following criterion has to
be maximized:
I (u ) =

tf
t0

Optimization by
HQP

[a1 Q cum (t )  a 2 E F (t ) + a 3 Q HP (t )]dt
Fig. 2: Steps of optimization

The weighting factors a1 to a3 allow to adjust
proper priorities, if the use of fossil energy (EF)
should be minimized and renewable energy
(Qcum and QHP) should be preferably used,
where the index cum stands for cumulated
solar energy and HP for heat pump. Because
the powerful optimization tool HQP [15] had
worked very well together with Matlab, the
Dymola/Modelica model of the system was
transferred to Matlab/Simulink. Fig. 2 shows
the steps of optimization.

The model of a two storage solar heating system was used to demonstrate how optimization
works and to make sure the load strategy for
these two storages will provide minimal additional heating.

Fig. 3: Two storage heating system

The Modelica Association

601

Modelica 2006, September 4th  5th

C. Hoffmann, H. Puta

tionally two-point control, a win of about ten
percent and better behaviour for short term
weather change, which is very important for
real applications.

Fig. 4: Modelica model from two storage heating
system
Fig. 6: Temperature of different collector areas

Fig. 3 shows this plant with the following data:
- collector area: 5m2
- short term storage with a stand-by layer of
135 l
and a rest part of 165 l, i.e. together 300 l of
content.
- long term (buffer) storage of 1000 l
- heat pump: 5 KW
- gas burner: 10KW.
Fig. 4 shows the two storage heating system as
a Dymola/Modelica model with different Inports und Outports.
For safety the circulating pumps for heat pump
and gas burner are always working, even when
both devices are not in action, indicated by k.
The aim of optimization is to calculate the load
dependent control strategies, i.e. for the switch
between the two storages, the heat pump and
the gas burner. Constraints have to be taken into
account such as: minimum temperature between
short term storage and long term storage of
333K, control constraints with respect to mass
flow of gas, electrical power of the heat pump
(5 KW) and the mass flow of the variable pump
for storages (0.139 kg/s). By weighting factors
a1 to a3 in the cost functional regenerative energy use may be preferably controlled. For the
example (Fig. 4) the following factors were
used:
a1 = 700, a2 = 100, a3 = 200. By these values a
better scaling of the optimization problem is
achieved. Figs. 6 - 10 show that the given constraints can be met.
For online application a model predictive control scheme was developed (Fig. 10), tested
with the one storage and the two storage system. The results show, compared with tradiThe Modelica Association

Fig. 7: Storage temperature courses

Fig. 8: Optimal courses for burner and heat pump

602

Modelica 2006, September 4th  5th

Dynamic Optimization of Energy Supply Systems with Modelica Models

Fig. 9: Optimal loading courses
Fig. 11: One storage heating system

2. Model predictive control
(MPC) by HQP and Simulink s-function interface

Fig. 10: Model predictive control scheme

For the optimization with MPC-technique [19]
a simple plant model with one storage was used.
Fig. 11 shows this plant with the following data:
- Collector area: 5m2
- short term storage with a stand by layer of
135 l
and a rest part of 165 l, i.e. together 300 l of
content.
- gas burner: 10KW.

Fig. 12: Dymola/Modelica model from one storage
heating system

For dynamic optimization using the Dymola/Modelica model with on storage the following criteria has to be maximized:

tf

In Fig. 10 the variables have the following
meaning: x0 = x(0), initial state, used for optimization, xactual are the actual start values of x
after some time steps, KP are forcasted climate
data for starting the optimization with x0, Kactual
are the actual climate values after some time
steps used also as starting values for optimization. As usual the MPC (model predictive control) is based on repetitive optimization, i.e. the
control loop is only closed within discrete time
steps to include actual data from the different
sources (states, forecasts, measured data) for
prediction of new optimized values (control and
parameter).

The Modelica Association

I (u) =
t0

Q

(t)dt

cum

By means of this criterion only the solar energy
was maximized this automatically implies the
minimization of the fossil energy. The index
cum stands again for cumulated solar energy.
The horizon for the optimization in this example was three hours and the control was applied
over a time horizon of two hours. Then the optimization cycles were repeated. In Fig. 14 the
results of the MPC are shown.
The advantage of the method is the reaction to
altered data from weather or the plant in comparison to the offline optimization. Especially,
603

Modelica 2006, September 4th  5th

C. Hoffmann, H. Puta

Fig.13 shows the temperatures of the stand-by
layer. Through reaction of the altered weather
data with MPC-technique the limit can be met.

I k =  [x( K )] +

K 1

[x(k ), u(k ), k ],

K fixed

k =0

g[x( K )] = 0 (final states constraints)
f [x(k ), u(k ), k ] = 0, k = 0,

K  1 (equality constraints)

h[x(k ), u(k ), k ]  0, k = 0,

, K  1 (inequality constraints)

The calculation algorithm of the DDP [18] is
divided into three parts:
1. Discretization of the considered continuous problem
2. Backward calculation  one stage
minimization to calculate optimal transitions of the states (optimal control
law)
3. Forward calculation  investigation of
the optimal states trajectories and the
control parameter courses from the optimal control law.

Fig. 13: Storage temperature courses

In the following figures a comparison between
HQP and DDP should be shown. The aim of the
transformation from HQP to DDP is the insertion to build a hierarchical controller for the
heat supply system for buildings on the basis of
an embedded microcontroller system. Fig. 15
shows the temperature in stand-by layer of the
storage and the collector field temperature. The
temperature in the lower layer of the storage is
similar to the collector field temperature. The
differences of courses are often problems of the
discretization intervals of the:

Fig. 14: Result courses




3. Discrete dynamic programming (DDP) by Matlab coupled with Dymola
models via Simulink Sfunction interface

state with x and the
control parameters with u

between DDP and HQP.
In case of DDP the discretization is bigger than
in case of HQP because of a strong increase of
the CPU-time.

DDP [20] was applied to the same one storage
heating system how in Fig. 11 shown in.
The problem with this possibility is that the
plant should not have too many states und control parameters because the numbers of variables increase exponentially. The problem formulation of the DDP is:
System description:
x(k + 1) = f [x(k ), u (k ), k ], k = 0,

, K 1

Criterion with constrains:
The Modelica Association

Fig. 15: Storage temperature courses

604

Modelica 2006, September 4th  5th

Dynamic Optimization of Energy Supply Systems with Modelica Models

belftete und entlftete Niedrigenergiehuser,
Diplomarbeit TU Ilmenau, Inst. fr Automatisierungs- und Systemtechnik
[6] M. Kisser, (2002), Entwicklung einer Prognoseverfahrensbibliothek fuer Klimadaten in
Dymola/Modelica, Diplomarbeit TU Ilmenau,
Inst. fr Automatisierungs- und Systemtechnik
[7] W. Feist, (1994), Thermische Gebudesimulation: kritische Prfung unterschiedlicher
Modellierungsanstze
[8] C. Nytsch-Geusen , (2001), Berechnung und
Verbesserung der Energieeffizienz von Gebuden und ihren energietechnischen Anlagen in
einer objekt-orientierten Simulationsumgebung,
Dissertation, TU Berlin
[9] VDI Richtlinie 6020, (2001), Anforderungen an Rechenverfahren zur Gebude und Anlagensimulation
[10] F. Felgner et al., (2002), Simulation of
thermal building behaviour in Modelica, Proceedings of the 2nd International Modelica Conference
[11] Solar-Institut Juelich, (1999), CARNOT
Blockset Version 1.0 User manual
[12] Dr. Valentin EnergieSoftware GmbH,
(1999), T-Sol 2.0 User manual
[13] Franke, R. (1998): Integrierte dynamische
Modellierung und Optimierung von Systemen
mit saisonaler Wrmespeicherung;
Fortschritts-Berichte VDI, Reihe 6, Nr. 394
[14] MODELICA: Modeling of Complec
Physical Systems. Modelica-Homepage.
http://www.modelica.org

Fig. 16: Storage temperature courses

Fig. 17: Storage temperature courses

Conclusion
As a result of this article can be said that dynamic optimization from heating supply plants
with Dymola/Modelica models is advantageous.
The application of different optimization techniques shows the universal character of the
Dymola/Modelica models. Especially the
graphical programming of the plant model is of
great value and it makes a relatively fast investigation of control trajectories.

[15] HQP: a solver for sparse nonlinear optimization. Omuses/HQP-Homepage.
http://hqp.sourceforge.net
[16] Ch. Hoffmann, J. Kahler, Puta, H.(2003):
Object-oriented simulation of energy supply
systems on the basis of renewable energy.
In Proceedings of the 3rd International Modelica conference, pp. 189-196, November 3-4,
Linkping, Sweden.
[17] Liu,B.Y.H. and Jordan, R.C.(1960): The
interrelationship and characteristic distribution
of direct, diffuse and total solar radiation,
Solar Energy 4
[18] M. Papageorgiou, Optimierung, 2. Auflage, Oldenbourg Verlag
[19] S. Martin, (2005), Optimierte Waermeversorgung von Gebaeuden, Diplomarbeit TU Ilmenau, Inst. fr Automatisierungs- und Systemtechnik
[20] T. Flemming, (2005), Optimierte Steuerung von Energieversorgungsanlagen mit Hilfe

References
[1] V. Quaschning, (1999), Regenerative Energiesysteme, 2. Auflage, Carl Hanser Verlag
[2] Duffie and Beckmann, (1991), Solar Engineering of Thermal Processes
[3] H. P. Garg, S.C. Mulick and A.K. Bhargava,
(1985) Solar Thermal Engergy Storage,
D.Reidel Publishing Company
[4] Dymola Users Manual, (2002), Dynamsin
AB Lund
[5] J. Kahler, (2002), Entwicklung einer Gebudekomponentenbibliothek fr kontrolliertThe Modelica Association

605

Modelica 2006, September 4th  5th

C. Hoffmann, H. Puta

der Diskreten Dynamischen Programmierung,
Diplomarbeit TU Ilmenau, Inst. fr Automatisierungs- und Systemtechnik
[21] Matlab: Matrix laboratory. MathworksHomepage.
http://www.mathworks.com/

The Modelica Association

606

Modelica 2006, September 4th  5th

Robust Initialization of Differential Algebraic Equations

Robust Initialization of
Differential Algebraic Equations
Bernhard Bachmann, Peter Aronsson*, Peter Fritzson+
Dept. Mathematics and Engineering, University of Applied Sciences,
D-33609 Bielefeld, Germany
bernhard.bachmann@fh-bielefeld.de
* MathCore Engineering AB, Teknikringen 1B, SE-583 30 Linkping, Sweden
peter.aronsson@mathcore.com
+ PELAB  Programming Environment Lab, Dept. Computer Science
Linkping University, SE-581 83 Linkping, Sweden
petfr@ida.liu.se

Abstract
This paper describes a new solution method applied to
the problem initializing DAEs using the Modelica language. Modelica is primarily an object-oriented equation-based modeling language that allows specification
of mathematical models of complex natural or manmade systems. Major features of Modelica are the multidomain modeling capability and the reusability of
model components corresponding to physical objects,
which allow to build and simulate highly complex systems. However, initializing such models has been quite
cumbersome, since initial equations have to be provided at the system level, where the user needs to know
details on the underlying transformation and indexreduction algorithms, that in general are applied to
simulate a Modelica model.
The new initialization concept allows to define the
initial equations locally in each relevant component
where the corresponding states appear. This approach
also works for arbitrary well-posed higher-index
problems and makes the initialization of complex systems more user friendly. A prototype implementation
in the OpenModelica compiler is presented, and test
results of non-trivial application examples are reported.

1 Introduction
So far, using model initialization in Modelica has only
been possible for higher-index problems if the user
formulates the initial equations globally. This was also
the case, e.g. when using the OpenModelica OpenModelica compiler which is an open source implementation developed at PELAB, Linkping University. In
order to do such a global formulation successfully, the
user needs to know about index reduction, at least the
The Modelica Association

number of freedom left after applying the dummy derivative method is necessary. Therefore, only advanced users
have been able to use this feature in the Modelica language,
when higher index problems occur (which is very common). In order to provide a more complete simulation environment, we have started to add robust initialization techniques to the OpenModelica compiler.

2 Flattening of a Modelica Model to
a Hybrid DAE
A Modelica model is typically translated to a basic mathematical representation in terms of a flat system of differential and algebraic equations (DAEs) before being able to
simulate the model. This translation process elaborates on
the internal model representation by performing analysis
and type checking, inheritance and expansion of base
classes, modifications and redeclarations, conversion of
connect-equations to basic equations, etc. The result of this
analysis and translation process is a flat set of equations,
including conditional equations, as well as constants, variables, and function definitions. By the term flat is meant
that the object-oriented structure has been broken down to a
flat representation where no trace of the object hierarchy
remains
apart
from
dot
notation
(e.g.
Class.Subclass.variable) within names.

3 Mathematical Formulation of Hybrid DAEs
3.1

Summary of notation

Below we summarize the notation used in the equations
that follow, with time dependencies stated explicitly for all
time-dependent variables by the arguments t or te:

607

Modelica 2006, September 4th  5th

B. Bachmann, P. Aronsson, P. Fritzson























p = { p1 , p 2 ,...}, a vector containing the Modelica 
f q (...) , the function that defines the difference equavariables declared as parameter or constant
tions for the discrete variables q := f q (...) , i.e., (2) in
i.e., variables without any time dependency.
the system of equations.
t , the Modelica variable time, the independent  f e (...) , the function that defines the event conditions
variable of type Real implicitly occurring in all
c := f e (...) , i.e., (3) in the system of equations.
Modelica models.

f x (...) , the function that defines the reinitialization
values for the continuous variables x(te ) := f x (...) at
x (t ) , the vector of state variables of the model,
i.e., variables of type Real that also appear differevents.
entiated, meaning that der() is applied to them
In the context of hybrid DAE:s the state of a system is not
somewhere in the model.
only made up of the values of the set of variables that occur
x (t ) , the differentiated vector of state variables of differentiated in the model. The overall state of a system
the model.
may also include values of discrete variables. In this paper
u (t ) , a vector of input variables, i.e., not dependent the word state is used in this sense, including the state of
on other variables, of type Real. These also be- the discrete part of the system.
long to the set of algebraic variables since they do
not appear differentiated.
3.2 Continuous-Time Behavior
y (t ) , a vector of Modelica variables of type Real Now we want to formulate the continuous part of the hywhich do not fall into any other category. Output brid DAE system of equations including discrete variables.
variables are included among these, which together This is done by adding a vector q(t ) of discrete-time varie
with u(t ) are algebraic variables since they do not ables and the corresponding predecessor variable vector
appear differentiated.
qpre(te) denoted by pre(q) in Modelica. For discrete variq(t e ) , a vector of discrete-time Modelica variables ables we use te instead of t to indicate that such variables
of type discrete Real, Boolean, Integer or may only change value at event time points denoted te, i.e.,
String. These variables change their value only at the variables q(te) and qpre(te) behave as constants between
event instants, i.e., at points te in time.
events.
q pre (t e ) , the values of q immediately before the
We also make the constant vector p of parameters and
current event occurred, i.e., at time te.
constants explicit in the equations, and make the time t exc(t e ) , a vector containing all Boolean condition plicit. The vector c(te) of condition expressions, e.g. from
expressions evaluated at the most recent event at the conditions of if constructs and when constructs,
time te. This includes conditions from all if- evaluated at the most recent event at time te is also included
equations/statements and if-expressions from the since such conditions are referenced in conditional equaoriginal model as well as those generated during tions. We obtain the following continuous DAE system of
the conversion of when-equations and when- equations that describe the system behavior between
events:
statements.
rel ( v (t )) = rel ( cat (1, x, x , u, y , {t}, q(t e ), q pre (t e ), p )) f ( x(t ), x (t ), u(t ), y(t ), t, q(t ), q (t ), p, c(t )) = 0 (a)
e
pre e
e
, a Boolean vector valued function containing the
(1)
g ( x(t ), u(t ), y(t ), t, q(te ), q pre (te ), p, c(te )) = 0 (b)
relevant elementary relational expressions from the
model, excluding relations enclosed by noDiscrete-Time Behavior
Event(). The argument v(t) = {v1,v2,...} is a vec- 3.3
tor containing all elements in the vectors Discrete time behavior is closely related to the notion of an
x, x , u, y ,{t}, q(t e ), q pre (t e ), p . This can be ex- event. Events can occur asynchronously, and affect the syspressed using the Modelica concatenation function tem one at time, causing a sequence of state transitions.
cat applied to these vectors; rel(v(t)) = {v1 > v2,
An event occurs when any of conditions c(te) (defined
v3 >= 0, v4<5, v6<=v7, v12=133} is one possible ex- below) of conditional equations changes value from false
ample.
to true. We say that an event becomes enabled at the time
f (...) , the function that defines the differential te, if and only if, for any sufficiently small value of , c(teequations f (...) = 0 in (1a) of the system of equa- ) is false and c(te+) is true. An enabled event is fired,
tions.
i.e., some behavior associated with the event is executed,
g (...) , the function that defines the algebraic equa- often causing a discontinuous state transition.
tions g (...) = 0 in (1b) of the system of equations.
Firing of an event may cause other conditions to switch
from false to true. In fact, events are fired until a stable

The Modelica Association

608

Modelica 2006, September 4th  5th

Robust Initialization of Differential Algebraic Equations

situation is reached when all the condition expressions
are false.
However, there are also state changes caused by
equations defining the values of the discrete variables
q(te), which may change value only at events, with
event times denoted te. Such discrete variables obtain
their value at events, e.g. by solving equations in whenequations or evaluating assignments in whenstatements. The instantaneous equations defining discrete variables in when-equations are restricted to particularly simple syntactic forms, e.g. var = expr;.
These restrictions are imposed by the Modelica language in order to easily determine which discrete variables are defined by solving the equations in a whenequation.
Such equations can be directly converted to equations in assignment form, i.e., assignment statements,
with fixed causality from the right-hand side to the lefthand side. Regarding algorithmic when-statements that
define discrete variables, such definitions are always
done through assignments. Therefore we can in both
cases express the equations defining discrete variables
as assignments in the vector equation (1a), where the
vector-valued function fq specifies the right-hand side
expressions of those assignments to discrete variables.

q (te ) :=
f q ( x(te ), x (te ), u (te ), y (te ), te , q pre (te ), p, c(te ))

(2)

The last argument c(te) is made explicit for convenience. It is strictly speaking not necessary since the
expressions in c(te) could have been incorporated directly into fq. The vector c(te) contains all Boolean
condition expressions evaluated at the most recent
event at time te. It is defined by the following vector
assignment equation with the right-hand side given by
the vector-valued function fe. This function has as arguments the subset of the discrete variables having
Boolean type, i.e., q B (t e ) and q Bpre (t e ) , the subset
of Boolean parameters or constants, p B , and a vector rel(v(t)) evaluated at time te, containing the elementary relational expressions from the model. The vector
of condition expressions c(te) is defined by the following equation in assignment form:
c(t e ) := f e ( q B (t e ), q Bpre (t e ), p B , rel ( v (t e )))

(3)

The argument v(t) = {v1,v2,...} is a vector containing all
scalar elements of the argument vectors. This can be
expressed using the Modelica concatenation function
cat
applied
to
the
vectors,
e.g.
v (t ) = cat (1, x, x , u, y , {t}, q(t e ), q pre (t e ), p ) . For example, if rel(v(t)) = {v1 > v2, v3 >= 0, v4<5, v6<=v7,
v12=133} where v(t) = {v1, v2, v3, v4, v6, v7, v12}, then it
The Modelica Association

might be the case that c(t) = {v1 > v2 and v3 >= 0, v10, not
v11, v4<5 or v6<=v7, v12=133}, where v10, v11 are Boolean
variables and v1, v2, v3, v4, v6, v7 might be Real variables,
whereas v12 might be an Integer variable.
rel(v(t )) = rel(cat(1, x(t ), x(t ), u(t ), y(t ), t, q(te ), q pre (te ), p)) ,
is a Boolean-typed vector-valued function containing the
relevant elementary relational expressions from the model,
excluding relations enclosed by noEvent().
Discontinuous changes of continuous dynamic variables
x(t) can be caused by so-called reinit equations in
Modelica. As in the case of discrete variables, such discontinuous changes can only occur at events. The effect of a
reinit-equation that is activated at te is an assignment to
the continuous variable at time te of the form:

x(te ) := f x ( x(te ), x (te ), u(te ), y(te ), te , q pre (te ), p, c(te )) (4)
For all variables in x(te) that are not affected by an reinitequation f x (...) takes the value of x(te), leaving the variable unchanged..

3.4

The Complete Hybrid DAE

The total equation system consisting of the combination of
(1), (2), (3) and (4) is the desired hybrid DAE equation representation for Modelica models, consisting of differential,
algebraic, and discrete equations.
This framework describes a system where the state
evolves in two ways: continuously in time by changing the
values of the state vector x(t), and instantaneously during
events triggered when some of the conditions c(te) change
value from false to true. The set of state variables
from which other variables are computed is selected from
the set of differentiated variables x(t), algebraic variables
y(t), and discrete-time variables q(t).

4
4.1

Simulation of Models Represented by
Hybrid DAEs
Well-defined problem description

A Modelica simulation problem in the general case is a
Modelica model that can be reduced to a hybrid DAE in the
form of equations (1), (2), (3) and (4), together with additional constraints on variables and their derivatives called
initial conditions.
The initial conditions prescribe initial start values of
variables and/or their derivatives at simulation time=0 (e.g.
expressed by the Modelica start attribute value of variables, with the attribute fixed = true), or default estimates of start values (the start attribute value with
fixed = false).
The simulation problem is well defined provided that
the following conditions hold:

609

Modelica 2006, September 4th  5th

B. Bachmann, P. Aronsson, P. Fritzson





The total model system of equations is consistent
and neither underdetermined nor overdetermined.
The initial conditions are consistent and determine
initial values for all variables.
The model is specific enough to define a unique
solution from the start simulation time t0 to some
end simulation time t1.

The initial conditions of the simulation problem are
often specified interactively by the user in the simulation tool, e.g. through menus and forms, or alternatively as default start attribute values in the simulation code. More complex initial conditions can be
specified through initial equation sections in
Modelica.

4.2

Simulation Techniques

There are three different kinds of equation systems
resulting from the translation of a Modelica model to a
flat set of equations, from the simplest to the most
complicated and powerful:




ODEs  Ordinary differential equations for continuous-time problems.
DAEs  Differential algebraic equations for continuous-time problems
Hybrid DAEs  Hybrid differential algebraic
equations for mixed continuous-discrete problems.



The index of a DAE system Error! Reference
source not found. is the minimum number of times
certain equations in the DAE must be differentiated
in order to solve x (t ) as a function of x(t), y(t), and
u(t), i.e. to transform the problem into ODE explicit
state space form.

The index gives a classification of DAEs with respect to
their numerical properties and can be seen as a measure of
the distance between the DAE and the corresponding ODE
An ODE system on explicit state space form is of index
0 since it is already in the desired form:

x (t ) = f (t , x (t ))

(6)

The Notion of DAE Index

The DAE index is an important property of DAE systems. Consider once more a DAE system on the general form (neglecting the hybrid part, parameters and
constants):

(a )
(b)

(7)

The condition is that the Jacobian of g with respect to y,
(g / y )  usually a matrix  is non-singular and therefore
has a well-defined inverse. This means that in principle y(t)
can be solved as a function of x(t) and substituted into (7a)
to get state-space form. A DAE system in the general form
(5) may have higher index than one. Mechanical models
often lead to index 3 DAE systems. We conclude:




Linear algebraic equation systems
Nonlinear algebraic equation systems

The Modelica Association

We assume that this system is solvable with a continuous
solution, given an appropriate initial solution. There are
several definitions of DAE index in the literature, of which
the following, also called differential index, is informally
defined as follows:

x (t ) = f (t , x (t ), y (t ))
0 = g (t , x (t ), y (t ))

However, rather than representing a whole Modelica
model, such algebraic equation systems are usually
subsystems of the total equation system.

4.3

(5)

The following semi-explicit form of DAE system is of index 1 under certain conditions:

In the following we present a short overview of methods to solve these kinds of equation systems. However,
remember that these representations are strongly interrelated: an ODE is a special case of DAE without algebraic dependencies between states, whereas a DAE is a
special case of hybrid DAEs without discrete or conditional equations. We should also point out that in certain cases a Modelica model results in one of the following two forms of purely algebraic equation systems,
which can be viewed as DAEs without a differential
equation part:



F ( x (t ), x (t ), y (t ), u(t )) = 0

4.4

There is no need for symbolic differentiation of
equations in a DAE system if it is possible to determine the highest order derivatives as continuous
functions of time and lower derivatives using stable
numerical methods. In this case the index is at most
1.
The index is zero for such a DAE system if there are
no algebraic variables.

Mixed Symbolic and Numerical Solution of
higher-index DAEs

A mixed symbolic and numerical approach to solution of
DAEs avoids the problems of numeric differentiation. The
DAE is transformed to a lower index problem by using index reduction. The standard mixed symbolic and numeric
approach contains the following steps:

610

Modelica 2006, September 4th  5th

Robust Initialization of Differential Algebraic Equations

1. Use Pantelides algorithm to determine how
many times each equation has to be differentiated to reduce the index to one or zero.
2. Perform index reduction of the DAE by analytic symbolic differentiation of certain equations and by applying the method of dummy
derivatives.
3. Select the core state variables to be used for
solving the reduced problem. These can either
be selected statically during compilation, or in
some cases selected dynamically during simulation.
4. Use a numeric ODE solver to solve the reduced
problem.
In the following we will discuss the notions of index
and index reduction in some more detail.

4.5

Higher Index Problems are Natural in
Component-Based Models

The index of a DAE system is not a property of the
modeled system but the property of a particular model
representation, and therefore a function of the modeling methodology. A natural object-oriented component-based methodology with reuse and connections
between physical objects leads to high index in the
general case. The reason is the constraint equations
resulting from setting variables equal across connections between separate objects.
Since the index is not a property of the modeled
system it is possible to reduce the index by symbolic
manipulations. High index indicates that the model has
algebraic relations between differentiated state variables implied by algebraic relations between those state
variables. By using knowledge about the particular
modeling domain it is often possible to manually
eliminate a number of differentiated variables, and thus
reduce the index. However, this violates the objectoriented component-based modeling methodology for
physical modeling that is intended to be supported by
the Modelica language.
We conclude that high index models are natural,
and that automatic index reduction is necessary to support a general object-oriented component-based modeling methodology with a high degree of reuse.

5 Finding Consistent Initial Values at Start or Restart
As we have stated briefly above, at the start of the
simulation, or at restart after handling an event, it is
required to find a consistent set of initial values or restart values of the variables of the hybrid DAE equaThe Modelica Association

tion system before starting continuous DAE solution process.
At the start of the simulation these conditions are given
by the initial conditions of the problems (including start
attribute equations, equations in initial equation sections, etc., together with the system of equations defined by
(1), (2), and (3). The user specifies the initial time of the
simulation, t0, and initial values or guesses of initial values
of some of the continuous variables, derivatives, and discrete-time variables so that the algebraic part of the equation system can be solved at the initial time t=t0 for all the
remaining unknown initial values. In some application examples it is even necessary to calculate initial values of
parameters (fixed = false), that afterwards be kept
constant during simulation.
At restart after an event, the conditions are given by the
new values of variables that have changed at the event, together with the current values of the remaining variables,
and the system of equations (5), (6), and (7). The goal is the
same as in the initial case, to solve for the new values of
the remaining variables. In the initial case, however, the
causality can be different since initial equations are included to calculate start values for the state variables,
whereas at restart the state variables are always known.

6 Robust Initialization of HigherIndex DAEs
Initializing DAEs using the Modelica language has been
quite cumbersome in the past, since initial equations have
to be provided on the system level, where the user needs to
know details on the underlying transformation and indexreduction algorithms, that are in general applied to simulate
a Modelica model. Especially, when higher-index DAEs
are involved the number of locally defined state variables
no longer coincide with the number of state variables of the
overall system. Although, one can influence the indexreduction algorithm by setting some attribute values
(stateSelect=always,prefer,), cases can be constructed which dont allow the straight forward prediction
of the number of state variables left after transformation.
In order to make the initialization procedure more convenient a new concept is necessary, which allows to define
the initial equations locally in each relevant component
where the corresponding states appear, even if these states
are eliminated during index-reduction. Naturally, this leads
to an overdetermined system of equations, which has to be
solved during the initialization process. In this context, we
call a higher-index problem well-posed if enough equations of the system are redundant so that initial values can
be determined which fulfill the whole set of initial equations. The main idea of the new approach is to reformulate

611

Modelica 2006, September 4th  5th

B. Bachmann, P. Aronsson, P. Fritzson

the problem of finding roots of the set of non-linear
equations to an equivalent optimization problem.
Considering the general mathematical description
of the initialization problem:

f1 ( z1 ,..., z n ) = 0
#
f m ( z1 ,..., z n ) = 0

(8)

Cases where m  n means that more equations (m)
than variables (n) are given. Every solution to (8)
minimizes the problem:
m

F ( z1 ,..., zn ) =  fi ( z1 ,..., zn ) 2  min

(9)

i =1

On the other hand, every global minimum of (9) is a
solution to (8). In order to solve (9) a number of different algorithms have been developed during the past.
The algorithm can be categorized depending on the
order of derivatives needed during the solution process.
In the OpenModelica environment the Simplex-method
of Nelder and Mead as well as the Brents method are
currently implemented, only working with the minimization function F. The OpenModelica prototype already shows reliable results for the evaluated examples.
Further improvements can be achieved as soon as
the Jacobian of F with regards to the unknown is available. In that case, more advanced algorithms like the
method of Fletcher-Reeves, Quasi-Newton, and/or
Levenberg-Marquardt methods can be applied which
would provide a speed-up in convergence. We regard
this as a quality of implementation, since the described
approach is working in principle already.

Figure 1. An electrical power system where two generating units
vs1 and vs2 are connected via a transmission line.

The connectors are written in dq0-coordinates implementing the potential variable u_dq0 and the flow variable
i_dq0. These quantities are constant in case of a nondistributed steady state, which is generally assumed during the
initialization process. Introducing the Park-Transformation
P the 3-phase rotating system (voltages u_abc and currents
i_abc) can be calculated from the dq0-representation and
vice versa.
The transmission line (LR1 and LR2) is modeled by a
purely inductive and resistive component, based on the
Modelica Electrical Library. Since LR1 and LR2 are connected in series, giving a higher index system, index reduction has to be applied for simulation purposes.

Figure 2. LR2 component with dq0 connectors.

The voltage source is described similarly using the Modelica Standard Library combined with the dq0-connectors.

7 Test and Evaluation with OpenModelica
Consider the following electrical 3-phase power system, where two generating units VS1 and VS2 are connected via a transmission line modeled by components
LR1 and LR2.

The Modelica Association

612

Modelica 2006, September 4th  5th

Robust Initialization of Differential Algebraic Equations

verified by partly manual efforts. However, we expect to
soon fix this small remaining problem in the OpenModelica
compiler.

9 Conclusions and Future work

Figure 3. Voltage source.

In order to initialize the model correctly to steady state
the following initial equations have been added to the
local components LR1 and LR2.
model LR
...
equation
...
initial equation
der(dq0_1.i_dq0)={0,0,0};
end LR;

In this paper we have presented an overview of our implementation of initializing Modelica models in the OpenModelica compiler. A new concept has been developed to
describe the initial equations locally in the relevant component where the corresponding states appear, that also works
for arbitrary well-posed higher-index problems. Due to the
necessary index reduction some of the states get changed to
dummy states that means that they will be algebraic during
the simulation of the model. The corresponding initial
equations are therefore redundant, but can be handled correctly by the new initialization process, if they are consistent. If not, an error/warning is issued to the user.
The implementation is however not yet complete. The
current prototype just implements the concept, but the efficiency should be increased in the near future. We wish to
implement calculation of the Jacobian matrix of the equation system with regards to the state variables. This gives
the possibility to implement more advanced and robust
numerical algorithms in order to solve the corresponding
optimization (minimization) problem during initialization
of the DAE.

10 Acknowledgements

Due to the higher-index of the overall system, indexreduction is applied. The system finally is determined
by 3 state variables LR1.I1.i, LR1.I2.i, LR1.I3.i.
The corresponding initial equation system has 3 equations more than number of unknowns, but these equations are redundant and could be eliminated. Due to the
involvement of the Park-transformation, redundancy is
not easy to detect. However, applying the concept described above correct initialization of the system is
performed.

This work was supported by the University of Applied Sciences in Bielefeld, by MathCore Engineering AB, by the
Swedish Research Council (VR), and by SSF in the VISIMOD project.

References

8 Implementation Status
An experimental prototype version of this method has
been implemented in a special version of the OpenModelica compiler (not yet in the ordinary version),
and tried on several small examples. We have worked
for some time to automatically handle the example described in this paper have been delayed by a bug in the
OpenModelica index reduction. The example has been
The Modelica Association

613

[1] Peter Fritzson, et al. The Open Source Modelica Project. In Proceedings of The 2nd International
Modelica Conference, 18-19 March, 2002. Munich,
Germany See also:
http://www.ida.liu.se/projects/OpenModelica.
[2] Peter Fritzson. Principles of Object-Oriented Modeling and Simulation with Modelica 2.1, 940 pp., ISBN
0-471-471631, Wiley-IEEE Press, 2004.
[3] The Modelica Association. The Modelica Language
Specification
Version
2.2,
March
2005.
http://www.modelica.org.
[4] The OpenModelica Users Guide, version 0.6, June
2005. www.ida.liu.se/projects/OpenModelica

Modelica 2006, September 4th  5th

B. Bachmann, P. Aronsson, P. Fritzson

[5] The OpenModelica System Documentation, version 0.6, June 2006.
www.ida.liu.se/projects/OpenModelica
[6] K. E. Brenan, S. L. Campbell, and L. R. Petzold,
Numerical Solution of Initial-Value Problems in
Differential-Algebraic Equations, Elsevier, New
York, 1989.
[7] B. Bachmann et. al. (Modelica Association):
Modelica - A Unified Object-Oriented Language
for Physical Systems Modeling - Language Specification. 2002.
[8] P. Fritzson, P. Aronsson, P. Bunus, V. Engelson,
L. Saldamli, H. Johansson, A. Karstrm: The
Open Source Modelica Project. In: 2nd Modelica
Conference 2002, Oberpfaffenhofen, 2002
[9] S.-E. Mattson, H. Olson, H. Elmqvist: Dynamic
Selection of States in Dymola. In: 1st Modelica
Workshop 2000, Lund, Sweden, 2000
[10] M. Otter: Objektorientierte Modellierung Physikalischer Systeme (Teil 4)  Transformationsalgorithmen. In: at Automatisierungstechnik,
Oldenbourg Verlag Mnchen, 1999
[11] M. Otter, B. Bachmann: Objektorientierte Modellierung Physikalischer Systeme (Teil 5,6)  Singulre Systeme. In: at Automatisierungstechnik,
Oldenbourg Verlag Mnchen, 1999
[12] R. Fletcher: Practical Methods of Optimization
John Wiley & Sons, 1995
[13] J. Stoer, R. Burlisch: Einfhrung in die numerische Mathematik. Springer Verlag, 1994
[14] S.E. Mattsson, G. Sderlind: Index reduction in
differential-algebraic equations using dummy derivatives. SIAM Journal of Scientific and Statistical Computing, Vol. 14, 1993.
[15] K.E. Brenan., S.L. Campbell, L.R. Petzold: Numerical Solution of Initial Value Problems in Differential Algebraic Equations. North-Holland,
Amsterdam, 1989
[16] C.C. Pantelides: The Consistent Initialization of
Differential-Algebraic Systems, SIAM Journal of
Scientific and Statistical Computing, 1988.
[17] L.R. Petzold: A description of DASSL: A differential / algebraic system solver. Sandia National
Laboratories, Albuquerque, 1982
[18] H. Elmqvist: A Structured Model Language for
Large Continuous Systems, PhD dissertation, Department of Automatic Control, Lund Institute of
Technology, Lund, Schweden, 1978
[19] R.E. Tarjan: Depth First Search and Linear Graph
Algorithms. SIAM Journal of Comp., Nr. 1, 1972.

The Modelica Association

614

Modelica 2006, September 4th  5th

Calibration of Static Models using Dymola

	



	

	
		


	 !"#$%	&
'()		()*+)	,)+)





-..%./%
  (  /  .  %(  ..	
	(	.%.		/
)012%..%.%(
  &(%  %    .    
)3(12&.//
.%)3(%/%(
.%   /  %    /     .%  
(./(%/
(.%//)
-%(&&//
(&/((&(
%/&.%/(
)4&.5(.
(&&%.&(/%&
6/7.	8&(..)
&%.)
%.&(/%(/(
&)&	(.%(
(%%&/
()%..(%./%(
%(/&&
(  %.  /  (    )    &
(%(9.
%5.)
%.&	
&/((
%)
/(.(&((.
	((%((&((.
    )%(  . 
%(&(//%
&(%%):.....(
.
%/%/9..
%%/%)
	









(./
&(%(/%(
./9.(9.	
%	.,)
((%%//.
.%%)3(	(&
	&((%
.(()
(%&(.
  	  (   .
5&7))./%
&8)
3((/
%)3(.(
%(.	(.
%)



		


	

3(%.%(%
((7
   % (8   /   ( /
&&/(%.	))/
/%; <)
3((%/.
7&/;!<8(&(
%/%.%	   	%.%   	
&(

 =  7 	  8
3(/(/.	  	
5(%

 7  8 =  7 	  8  
3/(%
5&&%(%/%
5



 7  8



The Modelica Association

615

Modelica 2006, September 4th  5th

H. Olsson, J. Eborn, S.E. Mattsson, H. Elmqvist

%  &    5  (  %    /
(	))( /(%)
3(&/./5(
  %  .  .    (  /%
=  %  //      .
)



		

3(./((.
%5(%%(
9%  (  .  %	 

(%(%.%	
  ( (     %  &(
5      )  4%(  (
/%%%//;!<)
3(%./	%
(.%	))(&
(%/%.%&(>?/5)
-&%(.%%
.%.9%.
	&((9.&(%(%(
%%(
)
-.%.((/%
/(.)A&(%
(.%(&&/((/%
/(.	.
...//%)
3(      &&  %  &(  (  
.	9./%
//()3(
(/.5	
%  -0        
7(.%(8)





3(7%
8              (  &
7/(..85
%	        (    %    
//(.)
//	&
5%//
.)3(
.((%%(
%//%B(/(%
/(%(&&%)3(
&///
	&&%
/%/.
()

The Modelica Association

C%/%/
.)  3(    (    /9    .
   (          %
/)73(/9.
%	(5
/	%(8)
-(.%((
%(.(/9.
)D..(//%/
%.&.;!<(%
(%/(	(&
.(&(
)



	


3(%///(%/(
    %  .    %    (  1%
E&  (  (  5  (  %    
.5(%.=





  7  8 +  
  #




7   # 8 

 = #


3(.(%
FC/5	(.
%&(%/(
.)3(%(%
=




 


 

 = #



 = #

7   # 8 =  


 


 7 # 8
 = #

..%(
/	    (      .  %
%  (  &  .      (  
%)A%(/(.
/((%($
%(;!<=


  +






 


 

 = #


 
7   8 = 

#

 
 = # 



 7 # 8
 = #

A%%/(.
	    7&((    8)  3(  .  
   % ( FC/5	  (
/%(/&
  /  .  &(    .
/)

616

Modelica 2006, September 4th  5th

Calibration of Static Models using Dymola



	


3(.%&&(./
  %  .    ; <  %  
%)&	%=
 .%./(.
%%	&((((
/)
 ((%.%
%7&((&&8	/
%./
(  %  7&((  %  &
&	    (    (      
(8)
3(      /&  (  (  /
(	(//((
%..&)
3(&/%%.
/((	(%.
/&(%/(7%/%/
((%.8	//
(9.)
3(/%(((
&(  (      .  	  %(  
(	.9
/&((((
%%)4
..	
(%(&.
	&((//%
 () 3(  .9 
%%%/(.	&((
%)
-/%%&/(.
   ( .	 &((&%
&(/%%.(
./(.)-.
%%&9
/ (     &(( %. . 
/)  3(  &  / .  
)



 !

3        9.  &      %
&(        .)    /
%&(%&,%
(.C)
(/%(&..7
&%8	%%
/&.%(&4%G
7%(&((%/%
8=

The Modelica Association

" 

	
	
	#


		





A(>)?57%8
(%%/>?>?
()
3(.%%&(
.%/>?>)?&(%(/%
	))%%(
%(%)
3(/(%.(%.
; <	(//(%
//((.
./9%/%(>)?	
(&4% &)

" 

		

!
	
	

	
	$
#
		

		





%&$	

((
    &(%    )  D  %  (
(
. (  (   / 
./((
...)
4((&%(
&(%	(
(      (    .%=  >?	  >?  
>)?	(.%
/((0&	((
)

617

Modelica 2006, September 4th  5th

H. Olsson, J. Eborn, S.E. Mattsson, H. Elmqvist

"


'	

()
*
+
&

"
-

'
	
'
.




	
	,
3(%(C 	

       >C?    (  %  .
7; <(.(8) 2..
..
&/(%)3(
( 4%J .(//
...%	6 	 )"I	
- 	
!
.)

- 	 
 $ 
  
 $

	

	


/(.(.
.//

((/(.)3(

.%%/&/%
/..  .%76.H.8	

(%(///%	))%

////.//	;I	
J<)-9.%///



&(..%: /

	
(/(/%/%(-
:	(/;J< " 
/
0
	


		

#

()3(/%%/ *	




	


&	/")

&(. . (%.%	
.) 3(   .	 	 & 
./(	(/96G)3( / 	
.(9%.%	
&.%
0	(//	 	//
%9.5/%	))(D
.)3(.(&(&(%///
.5.%.9()3(
(!#.)
&/%%%..
/(
=
 %.%


The Modelica Association

618

%%/%
%/%/%.5
Modelica 2006, September 4th  5th

Calibration of Static Models using Dymola

3(I)G./(9..
-:A():..5%
(-:)2
(&129
.%.&(%./
)4(%///%	.
&...
5  /  /%        %..    (
12)3(%.5(.
/%%%
&(%&..	%%%
78%.
&(.(&%
%..(12)
3(/(&...
&)

(/.%.(
/%)3(
(%	/%-:
%)(9.&
/(-:%	(
.&&&(%&%.9.=





6LC
L !

6!L7H#8"

3(  /  9.    E%  %	 	
&((  % (   %
(/)3(9.(.
%./%//&)C%
	C	./&)
%		.(%..)3(
%&//

!")
	
		
3(&%.-:
		
(	%../9%.%
		
/  %    &    /&  %
				
((//(

	 	!			"#$
(9()3(&%.&((

	 				%
(.
$
((&/(
		&	'		$
(/.%.)3(.(
		
%.	&(.(
				$
((&%%/%
	

%%/(%

)3(//(/
	'	
		(
%	(
)*+	,)+	,)+)	-$
.%)-(.

	
		$
    &  ..    (  .  /
3(&..//(.% )
%.%)3(%(
12	&((%)
(/%.%.%(%
&()3(%/%(
// (&(( //(
%)A((.(%
	&H9%
(12)
-(9%/(/ " 
1



	 
 



/%(&12)3(9. 
!	

(.(&./ 2(&12	(&
  /    .      /&  )  3( %.	(&4%M)//
%4%I(/ /(	((.
GJ%)3( %	((/%..	%
.&("K%..9 &(%(.
#%(D.5.)
.%        (  )    %.  
.  (          %
%.)4((
1 !
$

  %  N  .  L  N.  L  
%)((%
3(    (  (           %G%	(/%
  /  %    %&  //  /  ( /&%)%(/%
The Modelica Association

619

Modelica 2006, September 4th  5th

H. Olsson, J. Eborn, S.E. Mattsson, H. Elmqvist

	.(&(%&(
%    %      .&    .%
..)3(/%/.&
.4%")3(/%&
G##A(.	.(GO
)3((./(%%(
(/%%	(((/&
	(%(((
      %  /  ((  /&  .)  3(  /
%.%.%G	
(&)

;I<

;J<

3%(	  )	  
)  	    T)  UV)
-:B -   $  /
  %  /  -:  )  
#

$
"$



	%	1	 ##J)
4U	) '$
($

 
 %'$ 
  
 )*+ 
  
  

,&

*
-	())(
	32D%(&	1	 ##I)




















"
2
3*456




'
	

2

		

3(    (&  (            /
%	./	
/.5)
3(%/&	&(%(
%	/%((%
/%  /    .	    &    //
((.%.5)
4%( (  ( .9
(%(%.
5; <B%/%)

7	
;G<
; <

;!<

20%	&&&))
	)	)	))	)
DP	:)(&	)
	)	.
5/
)
#

$
"$


 
 	  %	  1	
##J)
4(	C)	#
$

%&
	 	
(AR	GSK")

The Modelica Association

620

Modelica 2006, September 4th  5th

Automatic Fixed-point Code Generation for Modelica using Dymola

Automatic Fixed-point Code Generation
for Modelica using Dymola
Ulf Nordstrom1,2 Jose Daz Lopez1 Hilding Elmqvist1
1 Dynasim AB, Lund, Sweden, {Ulf.Nordstrom, Jose.Diaz, Elmqvist}@Dynasim.se
2 Lund Institute of Technology, Lund, Sweden

Abstract
This paper describes a Modelica package for fixedpoint arithmetics and automatic fixed point code generation for embedded systems and FPGA applications.
Using Dymola [1] to investigate the dynamic behavior of the original model a fixed point representation
is automatically generated. The model can then be
simulated, using fixed point arithmetics to verify the
fixed-point representation. Finally, code is generated
for the desired target. Either integer C code for embedded systems or Mitrion-C code [2] for automatic
VHDL code generation for FPGA targets.
Keywords: fixed-point arithmetics; automatic code
generation; embedded system; DSP; FPGA; MitrionC

aid platform for automatic code generation from Modelica models using fixed-point arithmetics.
In a first step, Dymola generates a corresponding Modelica model using fixed-point arithmetics. This model
is intended for bit configuration testing and result assessment.
In a second step, the platform generates code in two
variants
1. C code using exclusively integer data types for
all variables with corresponding binary operation
implementation. This type of code is intended
mainly for DSP applications.
2. Mitrion-C code, using also integer data types, but
with different word lengths. This code is mainly
intended for FPGA applications.

1 Introduction
Hardware-In-the-Loop simulations are widely used
nowadays for design and testing of control systems
in industry. Typical devices for such HILs are Digital Signal Processors (DSP) and Field Programmable
Gate Arrays (FPGA). Typically, the development of
algorithms or models is done in high level languages,
not directly related to the target hardware. This is advantageous since the model keeps independent. But,
specific code generation for the target platform has to
be done.
Another important aspect is the following. During
the development phase, floating point arithmetics is
used for computations of algorithms and models. In
many cases, the tolerances, characteristics of the system and performance of the target platform do not justify the use of such demanding floating point calculations. Furthermore, sometimes they are even an obstacle to HILs, since the computations are slower than
required.
The possibility we explore in this paper is fixed-point
arithmetics for modeling. We describe in this paper an
The Modelica Association

As a scenario example, let us consider the task of developing an electrical control unit (ECU) for speed
control of a simple vehicle drive train using DSP. To
test different control strategies, a model of the closed
loop system is implemented in Modelica. The model
is depicted in Fig. 1.

Figure 1: Simple drive train with PI speed controller
in closed loop

621

Modelica 2006, September 4th  5th

U. Nordstrm, J.D. Lpez, H. Elmqvist

After some experimentation we find appropriate parameter settings and verify the functionality of the controller. Our intention now is to realise the controller
using an DSP.
Manually transforming the equations for the PI controller to a DSP program is a tedious and error prone
task. In the following, we will see how the ModelicaFixedPoint package can be used to perform this task
automatically.
Furthermore, the package provides error propagation analysis and fixed-point implementation of usual
mathematical functions based on Newton-Rapson or
table interpolation.

2 ModelicaFixedPoint package
The structure of ModelicaFixedPoint is presented in
Fig. 2.

Boolean z ;
/ / a f t e r conversion
FixedPoint Integer x;
FixedPoint Real y ;
FixedPoint Boolean z ;

The arithmetic operations are replaced by function
calls and a unique identifier is inserted for every function call. Type can here be either Real or Integer depending on the types of the arguments, as example we
present the basic operations.
Listing 2: Basic operations
/ / before conversion
a=u+v ;
b=uv ;
c=uv ;
d=u / v ;
/ / a f t e r conversion
a= Add Type Type ( u , v , o p I d 1 ) ;
b= S u b t r a c t T y p e T y p e ( u , v , o p I d 2 ) ;
c= M u l t i p l y T y p e T y p e ( u , v , o p I d 3 ) ;
d= D i v i d e T y p e T y p e ( u , v , o p I d 4 ) ;

Consider now the PI controller of the ECU example.
This controller is implemented in Modelica with the
following equations
x =

u
T

y = k(x + u)
where x is the controller state variable, u is the input,
k is the proportional gain and 1/T is the integral constant. Those equations converted to fixed point with
Figure 2: Library structure.
ModelicaFixedPoint are presented in listing 3. The operator FixedPoint2Derivative is introduced to
The main function of the library, GenerateFixed, perform time integration in Dymola, during assesment
is used for generation of the fixed-point representation of the fixed-point model.
and code generation. GenerateFixed preforms the
Listing 3: Typical equations
4 main steps of the conversion
d e r ( x a u x ) = F i x e d P o i n t 2 D e r i v a t i v e ( D i v i d e R e a l R e a l ( u , T , op1 ) ) ;
y= M u l t i p l y R e a l R e a l ( k , A d d R e a l R e a l ( x , u , op2 ) , op3 ) ;

1. Fixed-point translation
2. Range analysis
3. Precision analysis
4. Code generation
The internal symbolic engine of Dymola preforms
symbolic manipulation of the original model and outputs a fixed-point converted model with all arithmetic
operations replaced by function calls. Some examples
of Modelica types and operations before and after conversion are shown in listings 1 and 2.
Listing 1: Modelica types and fixedpoint types
/ / before conversion
Integer x;
Real y ;

The Modelica Association

Range analysis
The proposed method uses a simulation based approach for determining ranges of variables and intermediate results in the equations. Simulating the original model and logging minimum and maximum values of all variables is important.This allows equation
traversing and thereby compute accurate ranges for all
intermediate results.
This method is more time consuming than methods
like interval arithmetics [6] and affine arithmetics [4],
but the resulting intervals are better.
ModelicaFixedPoint considers that every variable consists of two parts: an integer part and a fractional
part. Both integer and fractional parts have a bit length

622

Modelica 2006, September 4th  5th

Automatic Fixed-point Code Generation for Modelica using Dymola

that sum up to the total word length used for the variable. The integer word length is denoted here by IWL ,
the fractional word length by FWL and the total word
length by WL .
The range information is used to assign the needed IWL
to all variables and operations.
Precision analysis
Precision analysis is done in two different ways depending on the target platform (DSP or FPGA).
The two main parameters in GenrerateFixed
are wordLength (target platform word length) and
RTOL (relative tolerance required for conversion). The
function dialog box is shown in Fig. 3.

Figure 4: FixedPointRoutines.

Figure 3: Dialog box.

Specifying wordLength indicates that integer C
code is to be generated for a DSP target. The specified word length then sets a unique word length for the
entire system and the FWL is set to maximize precision
given by RTOL.
For FPGA targets the task becomes more complicated
due to the ability to use different WL in the system.
Our approach is to use a backward error propagation
scheme based on the error propagation analysis in section 5 to determine all FWL and shift operations from
a user specified tolerance RTOL at the output of the
system.

logic units, missing completely hardware implementation of floating point arithmetics.

The achievable precision using integer arithmetics is
closely related to the architectural word length of the
target platform. In the case of DSP, the integer data
word size, typically 16, 24 or 32 bits, limits the possible precision. For FPGA, there is the possibility of
adapted word length for each operation. However, this
migth exceed practical limitations. A tradeoff must be
considered, minimizing the number of bits used while
The package FixedPointRoutines is also in- not violating constraints on precision. Another intercluded. This package contains fixed-point arithmetic esting aspect of the FPGA is parallelism. The profunctions and records for simulation of fixed-point grammable structure of the FPGA allows exploiting
independent computations, by implementing those in
Modelica code. The structure is shown Fig. 4.
parallel structures.

3 Fixed-point scenario
Integer arithmetic operations execute much faster than
their corresponding floating-point operations because
of their simplicity. In the case of FPGA, silicon surface
area and power consumption are also significantly reduced using integer arithmetics. On the other hand,
DSP devices come normally with simple arithmetic
The Modelica Association

The target language for FPGA is Mitrion-C. This language is a dataflow language with a syntax resembling
C, developed by Mitrionics AB in Lund. The generated Mitrion-C code is compiled into a configuration
of the Mitrion Virtual Processor. The Mitrion Virtual
Processor is a fine grain massively parallel softcore
processor which can be downloaded and ran on a variety of FPGAs, see [2] for details.

623

Modelica 2006, September 4th  5th

U. Nordstrm, J.D. Lpez, H. Elmqvist

4 Fixed-point Arithmetics

where op  {+, , , /}, or equivalently

From a hardware point of view, fixed-point arithmetics
is essentially integer arithmetics with bit shifting. Using integers to represent non-integer values is done by
considering an imaginary binary point as follows.
Consider the binary representation of an integer in
Natural Binary Code (NBC).
n

(bn , bn1 , . . . , b2 , b1 , b0 ) =

 b j  2 j , b  {0, 1}.

(1)

j=0

Now, using the same set of bits to represent a noninteger value can be done by placing a binary point
between i  1 and i. Thus
n

(bn , . . . , bi+1 , bi , bi1 , . . . , b0 ) =

 b j  2 ji .

(2)

j=0


Op(q1 , q2 , s) = (q1  2s1 )op(q2  2s2 )  2s3 .

(7)

Clearly, associating a 3-tuple of shifts s = {s1 , s2 , s3 }
with an operation we define the syntax of the basic operations. For readability reasons we will use the symbol for left shift, <<, followed by si to denote shifts.
When si > 0, the shift is left and when si < 0 the shift
is right.
For addition and subtraction the binary point must be
aligned before the operation. There will be a loss
of precision in the result when right shifting is used.
Thus, it is preferable to use left shifts when possible.
However, right shifts may sometimes be needed in order to avoid overflow. Adding or subtracting numbers
with very large difference in magnitude does not mean
any problem. The smaller one will naturally be numerically insignificant compared to the larger one.

The fixed-point representation in (2) with the binary
point between i  1 and i is said to have i bits of precision. By q we denote the value in NBC, i.e. the
value seen by the arithmetic unit. The smallest representable number is the so-called the resolution of the
representation and is equal to 2i . We define integer
word length, IWL = (n + 1)  i, and fractional word
length, FWL = i. The word length, that is, the total
number of bits used, is denoted by WL and is equal to
n + 1.

Multiplication and division are more difficult to implement. Multiplying two fixed-point variables each
having WL number of bits will generate a result having
2WL number of bits. This is likely to cause an overflow.
Using the shift operators on the variables prior to
the fixed-point multiplication, one could shift the
operands so that no overflow can occur. For the situation above, the secure shiftings correspond to right
shifting each of the operands by WL /2 bits prior to the
Converting a floating-point number y to fixed-point operation. This reduces of course the final resolution
representation q is done by
of the result.
Division has a similar problem. Dividing two variables
q = b2i  yc,
i, q  Z, y  R,
(3)
with FWL fractional bits generates a result having no
fractional bits. Here we loose resolution unnecessarily.
where bc denotes rounding towards floor.
One solution is to right shift the denominator prior to
The basic operations on fixed-point numbers; addi- the division, keeping as much precision as possible.
tion, subtraction, multiplication and division, are implemented using ordinary integer operations and bit For operations other than the basic binary ones, there
shifting. The bit shifts (left shift and right shift) of are often no straight forward implementation. Conditional operations such as {<, , >, , ==, 6=} are
a fixed-point number q are
an exception. These operations on fixed-point num(q << i) = q  2i
(4) bers are the same as their floating-point counterparts
although the binary points of the operands must be
and
aligned before evaluation. This alinement of binary
(q >> i) = q  2i .
(5) points can reduce resolution and therefore cause the
Bit shifting is used extensively to align binary points wrong conditional branch to be evaluated.
and to rescale variables. The shift operators are used to For other functions we use linear interpolation in tarescale both the inputs of an operation and the output. bles or Newton-Raphson iterations to evaluate the reConsider a binary operation op on two fixed-point sult, as mentioned earlier. With information on the
variables q1 and q2 , called operands. The implementa- range of the variable and the result, tables covering the entire range with appropriate resolution are
tion of such operation is
generated. Development of interpolation tables and

Op(q1 , q2 , s) = (q1 << s1 )op(q2 << s2 ) << s3 (6) Newton-Raphson iterations is currently ongoing.
The Modelica Association

624

Modelica 2006, September 4th  5th

Automatic Fixed-point Code Generation for Modelica using Dymola

In order to use fixed-point arithmetics efficiently one
need to find appropriate shifts, and WL in case of
FPGA, for all variables and operations. The automatic
floating-point to fixed-point conversion problem can
then be summarized as finding IWL and FWL for all
variables and respective appropriate shifts for all operations such that no overflow occurs, quantization errors are kept low and the total WL is kept as low as
possible.

Addition and subtraction have the same error propagation properties. Considering the absolute error for
addition we have

A throughout error analysis would require a priori
knowledge of all shifts and FWL . For simplicity, we
assume that all intermediate results can be stored,
eliminating the the risk of overflow. Clearly and
in practice, this assumption is relevant and valid for
Mitrion-C code only.
For addition and subtraction the function implementation is eq. (7). Multiplication and division are somewhat different.
For multiplication, the possibility of storing the intermediate result eliminates the shifting of the operands
before the operation. Instead, the result has to be
shifted to the appropriate FWL .
For division, the assumption avoids shifting the denominator. Hence, only the numerator and the result
are shifted to the appropriate FWL at the output.

Division
Again considering the relative error we have
   i   i   i +o 
 R   2 1   2 2   2 2 
 =
 
 

 R   y1  +  y2  +  y1  .

R = 1 + 2 = 2i1 + 2o + 2i2 + 2o .

(11)

where i is the resolution of the operand and o = FWL
is the resolution of the result.

Multiplication
Considering the relative error for multiplication, we
have
5 Error propagation
 
   i   i   o 
 R 
   1  2 

  = sup  R  =  2  +  2  +  2  (12)









Error propagation analysis has to be done to solve the
R
R
y1
y2
y1 y2 
fixed-point conversion problem, and assign FWL to
variables and operators. For further theory details, see where yi is the largest value taken by each variable respectively.
[3].

Conversion
The conversion to fixed-point causes an error, the so
called conversion error or quantization error, denoted
by . We have
|| = |y  y| ,

  R.

(8)

where y is the floating-point value before conversion
and y is the recovered floating-point value after conversion. From [3], the conversion error is bounded by

(13)

The error propagation is different from the multiplication.

6

Code generation

The information gained in the fixed-point conversion
and analysis is used to generate code for different target platforms. In this paper we mainly focus on generating integer C code typically used in DSPs. But, also
Mitrion-C code for FPGAs is possible with appropiate
error propagation analysis.
For easy interaction with standard generic integration
routines, all variables are categorized and mapped to a
set of vectors, as in table 1. All right-hand-side equations are gathered in one function, called rhs-function.
This encapsulation allows code portability.
This encapsulation and code generation is used in
cases where only a subsystem is intended for fixedpoint representation. Then we substitute that particular part of the system with a function call and the rest
of the system is treated as usual.

|| < 2i .

(9) To avoid unnecessary computations, constants are
shifted according to the fixed-point representation and
Defining
evaluated during the code generation.
 = sup || = sup |y  y| ,
(10)
Generation of integer C code
the results of the error propagation analysis will be
Currently, the generated C code supports a format for
presented.
easy interaction with Dymola to make it easy to valiAddition and subtraction
date the functionality of the generated code. Different
The Modelica Association

625

Modelica 2006, September 4th  5th

U. Nordstrm, J.D. Lpez, H. Elmqvist

x
x dot
w
u
y
p

state variables
derivatives of state variables
auxiliary variables
input variables
output variables
parameters

aligned before evaluation. Hence, also here, shift operations are inlined in the code. An example can be
seen in listing 7.
Listing 7: Conditional operations in C
/ / Computing  z = i f x<y t h e n xy e l s e yx ; 
w[ 0 ] = ( ( ( ( x[0]>>6)<(x [ 1 ] ) ) = = 1 ) ? ( ( ( x[0]>>6)
( x [ 1 ] ) ) ) : ( ( ( x [ 1 ] )  ( x [ 0] > >6 ) ) )) ;

Table 1: Table of categorized variables

A C library for special fixed-point functions is under
development for functions such as min, max and abs.
DSP targets could require different structures, mainly Also for these functions, except for abs, the binary
of the function call, i.e. the body of the function would point must be aligned prior to the evaluation. This can
remain the same.
be solved by having the appropriate shifts inlined in
The syntax of the Modelica interface to the rhs func- the function call. For other functions, such as trigonotion is in listing 4.
metric functions and square root, code for linear interpolation tables or Newton-Raphson iterations schemes
Listing 4: Modelica Interface
will be generated. This is still in the development
/ / Modelica i n t e r f a c e
phase although successful implementation of linear inf u n c t i o n Name
input Integer n ;
terpolation using only integer arithmetics have been
input Integer t ;
input Integer x [ : ] ;
implemented using Modelica.
input Integer x dot [ : ] ;
input Integer w[ : ] ;
input Integer u [ : ] ;
input Integer y [ : ] ;
input Integer p [ : ] ;
i n p u t I n t e g e r idemand ;
o u t p u t o u t w [ s i z e (w , 1 ) ] ;
output o u t x d o t [ s i z e ( x dot , 1 ) ] ;
output out y [ size (y , 1 ) ] ;
e x t e r n a l C  ;
a n n o t a t i o n ( I n c l u d e =# i n c l u d e<Name . c >);
end Name ;

Generation of Mitrion-C code
Although the syntax of Mitrion-C resembles that of C,
the generated code is quite different. This is mainly
due to the possibility of having a mixture of different
word lengths in the system. This allows us to allocate
resources (word length of the data path) were they are
needed the most.
The result of this is that it is no longer possible to inline any operations or shifts. Instead a unique function
is generated for every operation. All shifts and word
length declarations are hard coded in these functions.

and the function itself in listing 5.
Listing 5: C interface
// C interface
i n t Name ( i n t n , i n t t , i n t x , i n t s i z e x ,
i n t  x d o t , i n t s i z e x d o t , i n t w,
i n t s i z e w , i n t u , i n t s i z e u ,
i n t y , i n t s i z e y , i n t p , i n t s i z e p ,
i n t idemand , i n t out w , i n t s i z e o u t w ,
i n t out x dot , i n t s i z e o u t x d o t ,
i n t  o u t y , i n t s i z e o u t y ){

7

Examples

/ BODY OF FUNCTION /
}

7.1

Speed control with PI controller

The main body of the function is the section containing the equations for computing the auxiliaries, derivatives and outputs of the system. The basic operations,
addition, subtraction, multiplication and division, uses
basic integer operations and the appropriate shifts are
inlined in the code according to the syntax in (6). The
integer C code of the equations in listing 3 can be seen
below in listing 6.

Using the library presented in this paper lets us automatically generate a fixed-point model of a PI controller using various word lengths. Simulating the system using the fixed-point PI controller we can verify
the functionality of the controller and also get hints
regarding the word length needed to fulfill the specifications.
After some simulations, depicted in Fig. 5, we conclude that a word length of 8 bits is enough for our
Listing 6: Integer operations in C
application. This results in a smaller/cheaper DSP for
/ Compute d e r i v a t i v e s /
x d o t [ 0 ] = ( ( u [ 0 ] ) / ( p[1]>>15)<<10);
the ECU instead of the one originally intended. Also,
/ Compute o u t p u t s /
integer C code for the controller is automatically geny [ 0 ] = ( ( p [0] > >16)((( x [ 0 ] ) + ( u[0]>>1))>>15)<<1);
erated.
Conditional operators and the IfThenElse-statement For Modelica users this is a familiar way of working,
are also inlined with appropriate shifts. Essential for implementing systems and algorithms at high abstracthe conditional operators are that the binary points are tion levels by drag and drop of predefined components
The Modelica Association

626

Modelica 2006, September 4th  5th

Automatic Fixed-point Code Generation for Modelica using Dymola

Figure 6: Electric Drive Model

Figure 7: Electric Drive and load
of the load and set it to the reference. The final model
is depicted in Fig. 8.

Figure 5: Plot of reference speed and measured speed
Figure 8: PID regulator to position the inertia to build
using PI controllers.
the servo drive
in a diagram or manually typing Modelica code. With
this library we aim to keep this way of working while
extending it by automatically generating fixed-point
code for external computational devices. The following example is the opposite situation: plant realisation
with fixed point arithmetics.

7.2

ServoMotor with FixedPoint

This example explores the plant realisation using fixed
point arithmetics. The situation is a simple electric
drive used to place a inertia at a given angle. The simple model of electric drive is depicted in Fig. 6. The
model consists of an ideal EMF device with shaft inertia and electric inductance and resistance.
We provide the model with the load and a gearbox for
better precision on the load. The system is encapsulated in a model with inputs and output as depicted in
Fig. 7.
Finally, we choose a PID regulator to control the angle
The Modelica Association

The question now is if there is a cheap and fast fixedpoint representation of the system, good enough to use
with the PID regulator in hardware. After Fixed-point
trasnalation, we get with the tool the system in Fig. 9.
The
first
attempt
is
done
analysing
servoMotorWithLoad model within the time
interval [0, 1] and for 8, 16 and 24 bits. The result of
the simulations in Dymola are depicted in Fig. 10.
We observe that even though we have more precision,
the steady state is never really reached. The solution
becomes oscillatory.
The first though may be that the number of bits of
the fixed point representation is not high enough to
make the system reach steady state. This is not the
case. What is happening is that the precision analysis
is tightly adjusting the fixed-point representation to the
time interval and span interval of every variable.
It is possible to resemble the correct dynamics of the
system with just 8 bits. The result is depicted in
Fig. 11. The only difference is that we performed the
precision analysis in the time interval [0, 100] instead.

627

Modelica 2006, September 4th  5th

U. Nordstrm, J.D. Lpez, H. Elmqvist

Figure 9: Fixed Point version of the motor with load.
Figure 11: Simulation result with model analysed in
time interval [0, 100]

8

Summary

We have presented a tool that enables a developer to
use Modelica models for code generation for an embedded system or FPGA with a minimum of manual
interaction.
Figure 10: Simulation result with model analysed in
time interval [0, 1]

References

We can see the C code generated for the example also
in listing 8. Notice the implementation of the fixedpoint operations using shifts. This implementation can
be also encapsulated to generate code to link with external fixed-point libraries.
Listing 8: C function generated
/ BODY OF THE FUNCTION /
/ Compute A u x i l i a r y v a r i a b l e s /
i f ( idemand == 3 ) {
w[ 0 ] = 0 ;
w[ 1 ] = 0 ;
w[ 2 ] = 0 ;
w[ 3 ] = 0 ;
w[ 4 ] = 0 ;
w[ 5 ] = 0 ;
w[ 6 ] = 0 ;
w[ 7 ] = ((32 > >4)(((((m>>4)(r >>3))>>4)(r >>3))>>4)<<2);
w[ 8 ] = ( ( m o t o r e m f k >>3)(x[1]>>4)<<1);
w[ 9 ] = ( ( g e a r b o x r a t i o >>3)( d e r l o a d w a u x >>4)<<2);
w[ 1 0 ] = ( ( w[ 8 ] )  ( ( ( m o t o r J m J >>3)(w[9]>>4)))<<1);
w[ 1 1 ] = (  ( ( ( g e a r b o x r a t i o >>4)(w[ 1 0 ] > >3 ) ) )) ;
w[ 1 2 ] = ( ( motor Ra R >>3)(x [1] > >4));
w[ 1 3 ] = ( ( u [ 0 ] )  (w[12] > >5));
w[ 1 4 ] = ( ( g e a r b o x r a t i o >>4)(x[0]>>3)<<1);
w[ 1 5 ] = ( ( m o t o r e m f k >>3)(w[14]>>4)<<1);
w[ 1 6 ] = ( ( w[ 1 3 ] )  (w[15] > >2));
w[ 1 7 ] = ( ( g e a r b o x r a t i o >>4)(x[2]>>3)<<1);
w[ 1 8 ] = (  ( ( (w[10] > >7)+(w [ 1 1 ] ) ) ) ) ;
w[ 1 9 ] = 0 ;
}

[1] Dymola, Dynasim AB, www.dynasim.com
[2] Mitrion-C, Mitrionics AB, www.mitrion.com
[3] Ulf Nordstrom. To be published. Automatic
Fixed Point Code Generation in Modelica using Dymola. Lund, Sweden: Masters thesis, Department of Automatic control, Lund Institute of
Technology, 2006.
[4] Claire F.Fang, Rob A Rutenbar, Tsuhan Chen.
Fast, Accurate Static Analysis for fixed-point
Finite-Precision Effects in DSP Designs. Pittsburgh, USA, Department of Electrical and Computer Engineering, Carnegie Mellon University.
[5] Float-to-Fixed Conversion Tool, www.float-tofixed.com
[6] R. E. Moore. Interval Analysis. Prentice-Hall,
1966.
[7] The Mathworks, Simulink fixed-point, 2005.

/ Compute d e r i v a t i v e s /
i f ( idemand == 2 ) {
x d o t [ 0 ] = ( ( ( ( g e a r b o x r a t i o >>4)(w[ 8 ] > > 3 ) ) ) / ( ( (w[ 7 ] ) +
( ( ( ( ( m o t o r J m J >>3)( g e a r b o x r a t i o >>4)>>3)>>3)
( g e a r b o x r a t i o >>4))<<4))>>1)<<7);
x d o t [ 1 ] = ( ( w [ 1 6 ] ) / ( m o t o r L a L >>3)<<3);
x dot [2] = x [ 0 ] ;
}
/ Compute o u t p u t s /
i f ( idemand == 1 ) {
y [0] = x [2];
}

The Modelica Association

628

Modelica 2006, September 4th  5th

Session 6b

Session 6b
Thermodynamic Systems and Applications

The Modelica Association

629

Modelica 2006, September 4th  5th

Session 6b

The Modelica Association

630

Modelica 2006, September 4th  5th

The Modelica Fluid and Media Library for Modeling of Incompressible and Compressible Thermo-Fluid Pipe Networks

The Modelica Fluid and Media library for modeling of
incompressible and compressible thermo-fluid pipe networks
Francesco Casella1, Martin Otter2, Katrin Proelss3, Christoph Richter4, Hubertus Tummescheit5
1
2

Politecnico di Milano, Dipartimento di Elettronica e Informazione, Italy

German Aerospace Center (DLR), Institute of Robotics and Mechatronics, Germany
3
Technical University Hamburg-Harburg, Institute for Technical Thermodynamics, Germany
4
Technical University Braunschweig, Institute for Thermodynamics, Germany
5
Modelon AB, Ideon Science Park, Lund, Sweden

Abstract
The new library Modelica_Fluid is a free Modelica
package providing components describing zero- and
one-dimensional thermo-fluid components, which
can be connected in arbitrary networks. The purpose
of the library is to provide standard interfaces for
thermo-fluid components, demonstrate how to build
such models, and include a growing set of models of
common use. The component equations are
decoupled from the equations to compute the fluid
properties,
which
are
provided
by
the
Modelica.Media library through standard interfaces;
incompressible and compressible fluids, single or
multiple substances, one- and multiple-phase fluids
can be used, where appropriate. Newly introduced
features of the Modelica.Media library are briefly
reviewed. After extensive testing by interested users,
the library will be included in the Modelica standard
library as Modelica.Fluid.

1

Introduction

The Modelica_Fluid library provides basic interfaces
and components to model thermo-hydraulic systems
with zero-dimensional and one-dimensional components. It is not the intention that this library covers
all possible application cases, because the modelling
assumptions can vary widely. Instead, the goal of the
Modelica_Fluid library is to demonstrate how to
implement components of thermo-hydraulic processes in Modelica, provide standard connectors
which fit for a wide range of applications, and provide a reasonable set of components, which can be
used as they are, or can be modified to suit specific
user needs. For special applications it is possible to
implement libraries with simpler media and components, e.g., the Modelica.Thermal.FluidHeatFlow

The Modelica Association

library [4]. Other domains, such as gas dynamics,
would require a more sophisticated setup.
The basic concepts of the Modelica_Fluid library, in
particular the fluid connectors and the use of replaceable medium models, were laid out in [2]. Since
then, the library design has been refined and tested
by several people belonging to the Modelica Association. The structure of the library is now stable 
contributions are welcome to increase the number of
provided components. The goal is that this library
becomes part of the Modelica standard library, after
it has been tested by end users on a significant number of different applications and is improved based
on the feedback.
A screen shot of the library is
shown on the right side. The
Examples package contains
models that demonstrate various features of the library, as
well as some system models,
such as a drum boiler [6] and
an experimental batch plant [5]
model.
A typical (small) example is
shown in Figure 1 below: It
shows a system where water is
pumped from a source by 4
pumps in parallel (fitted with
check valves), through a pipe
whose outlet is 50 m higher
than the source, into a reservoir
placed on an 18-m high tower. The users are represented by an equivalent valve, connected to the reservoir. The water controller is a simple on-off controller, acting on the gauge pressure measured at the
base of the tower; the output of the controller is the
rotational speed of the pumps. A typical simulation
is over 2000 s. The pump turns on and off to keep
the reservoir level around 2.5 meters, which means

631

Modelica 2006, September 4th  5th

F. Casella, M. Otter, K. Proelss, C. Richter, H. Tummescheit

20.5 meters higher than the base of the tower, corresponding to a gauge pressure of 2 bar.
PressureSetP...

controller

PumpRPMGen...

PT1

refer...
P...

u

T=50

k=2e5

valveOpening

reservoir

ambient

ambient...
level_st...
1.8

defaults
g

startTime=0

3

p...

sink

pipe
reservoirPre...
source

Fluid Connectors

In this section the design of the fluid connectors is
explained. A major design goal was that components
can be arbitrarily connected and that the important
balance equations are automatically fulfilled when
two or more components are connected together at
one point as shown in the next figure:

userValve
n

pumps

Figure 1: Pumping system for drinking water

2

The medium models, i.e., the equations to compute
all the fluid properties from the independent thermodynamic state variables, are included in the component models as replaceable instances of objects from
the Modelica.Media standard library. This allows to
use the same component model with different fluids
(or with different models of the same fluid) by just
replacing the medium model.

General design principles

pipe3

The Modelica Association

pipe1

pipe2

Figure 2: Connected pipes fulfilling the ideal mixing
condition at the connection point.
As will be explained below, in such a case the balance equations define ideal mixing, i.e., the connection point has the mixing temperature if the fluids
from the three components would be ideally mixed
in an infinitely small time period. If more realistic
modeling is desired that takes into account dissipation and other mixing losses, an explicit model has to
be used in the connection point, e.g., from the Modelica_Fluid.Junctions library. An example is given in
the next figure:
pipe3

Compared to other engineering modeling fields, such
as electrical systems or multibody systems, the task
of providing a standard library for thermo-fluid
systems is much more difficult, due to the much
greater variety of modeling assumptions that can be
made, depending on the specific application needs.
The Modelica_Fluid library tries to strike a balance,
providing a sufficiently general framework, which
covers a wide range of applications without adding
too much overhead to the simplest cases.
The scope of the library includes zero- and onedimensional models of thermo-hydraulic components, i.e. objects where the flow of one or more fluids must be described, and energy transfer and storage phenomena play a significant role.
The thermo-fluid connectors are designed in order to
ensure that mass and energy balances are fulfilled at
the connection point, even in presence of flow direction reversal. On the other hand, the momentum balance is fulfilled exactly only when two aligned objects with equal flange diameters are connected; in
other cases, the momentum balance at the connecting
points is approximated. The exact treatment of momentum balances at the interfaces in those cases
would add a significant complexity and overhead to
the library, which is unnecessary in most technical
thermodynamics applications, where gas dynamics
phenomena (wave propagation, high Mach numbers)
do not play a significant role. Gas dynamics systems
are then outside the scope of the Modelica_Fluid
library.
The library models can describe two-phase flows, as
long as the flow is homogeneous, i.e., both phases
have the same velocity.

pipe1

pipe2

splitter

Figure 3: Connected pipes with a splitter junction
where the losses are described in the junction model.
For a single substance medium, the connector definition in Modelica_Fluid.Interfaces.FluidPort reduces
to

632

Modelica 2006, September 4th  5th

The Modelica Fluid and Media Library for Modeling of Incompressible and Compressible Thermo-Fluid Pipe Networks

3.2

connector FluidPort
replaceable package Medium =
Modelica.Media.Interfaces.PartialMedium;
Medium.AbsolutePressure
p;
flow Medium.MasFlowRate
m_flow;
Medium.SpecificEnthalpy
h;
flow Medium.EnthalpyFlowRate H_flow
end FluidPort;

The first statement defines the medium flowing
through the connector. In package Medium, medium
specific types such as "Medium.AbsolutePressure"
are defined that contain medium specific values for
the min, max and nominal attributes. Furthermore,
Medium.MassFlowRate is defined as:

A Modelica translator will check that the quantity
and unit attributes of connected interfaces are identical. Therefore, an error occurs, if connected FluidPorts do not have a medium with the same medium
name.
The variables in the connector have the following
meaning: p is the absolute pressure at the connection
point, m_flow is the mass flow rate from the connection point in to the component, h is the specific mixing enthalpy in the connection point and H_flow is
the enthalpy flow rate from the connection point into
the component.
Balance Equations at Connection Points

Assume that 3 FluidPorts port1, port2, port3, are
connected together: Since, m_flow and H_flow are
flow variables, a Modelica translator will generate
the following connection equations:
port1.p = port2.p = port3.p
port1.h = port2.h = port3.h
0 = port1.m_flow + port2.m_flow +
port3.m_flow
0 = port1.H_flow + port2.H_flow +
port3.H_flow

These are exactly the equations that state ideal mixing for an infinitesimal small control volume in the
connection point: The intensive quantities at the
ports are identical and the mass balance as well as
the energy balance is fulfilled (note that no mass or
energy is stored in the infinitesimal volume). The
momentum balance is not taken into account, and
therefore a connection without an explicit junction
model is only valid, if the momentum balance has
not much influence or is fulfilled since two ports
with the same diameter are connected together.

The Modelica Association

A connector should have only the minimal number
of variables to describe the interface, otherwise there
will be connection restrictions in certain cases.
Therefore, in the connector no redundant variables
are present, e.g., the temperature T is not present because it can be computed from the connector variables pressure p and specific enthalpy h.
This approach has one drawback: If two components
are connected together, then the medium variables on
both sides of the connector are identical. However,
due to the connector, only the two equations
port1.p = port2.p;

type MassFlowRate =
Modelica.SIunits.MassFlowRate(
quantity="MassFlowRate." +
mediumName, ...);

3.1

Property Propagation over Ports

port1.h = port2.h;

are present. Assume, that p, T are the independent
medium variables and that the medium properties are
computed at one side of the connections. This means,
the following equations are basically present:
port1.h
port2.h
port1.p
port1.h

=
=
=
=

h(port1.p,port1.T);
h(port2.p,port2.T);
port2.p;
port2.h;

These equations can be solved in the following way:
port1.h := h(port1.p,port1.T);
port2.p := port1.p;
port2.h := port1.h;
0 = port2.h - h(port2.p,port2.T);

The last equation states that port2.T is computed by
solving a non-linear system of equations. If port1.h
and port2.h are provided as Modelica functions, a
Modelica translator, such as Dymola [1], can replace
this non-linear system of equations by the equation:
port2.T = port1.T;

because after alias substitution there are two function
calls
port1.h := h(port1.p,port1.T);
port1.h := h(port1.p,port2.T);

Since the left hand sides of the function calls and the
first arguments are the same, the second arguments
must also be identical, i.e., port2.T = port1.T. This
type of analysis seems to be only possible, if the specific enthalpy is defined as a function of the independent medium variables. Due to this requirement,
all media in the Modelica.Media library define the
specific enthalpy always as a function and therefore
by appropriate tool support no unnecessary nonlinear system of equation appears and in the generated code, propagation of medium properties over a
connector does not lead to an overhead.
3.3

Upstream Discretization

When implementing a fluid component, the difficulty arises that the value of intensive quantities
(such as p, T, ) shall be accessed from the upstream

633

Modelica 2006, September 4th  5th

F. Casella, M. Otter, K. Proelss, C. Richter, H. Tummescheit

volume. For example, if the fluid flows from volume
A to volume B, then the intensive quantities of volume B have negligible influence on the fluid between the two volumes. On the other hand, if the
flow direction is reversed, the intensive quantities of
volume A have negligible influence on the fluid between the two volumes. Such a situation is handled
with the following code fragment:
import IF = Modelica_Fluid.Interfaces;
replaceable package Medium =
Modelica.Media.Interfaces.PartialMedium;
IF.FluidPort_a port1(redeclare package
Medium = Medium);
IF.FluidPort_b port2(redeclare package
Medium = Medium);
equation
// Handle reverse and zero flow
port1.H_flow = semiLinear(port1.m_flow,
port1.h, port2.h);

A.port.p = B.port.p
A.port.h = B.port.h
0 = A.port.m_flow +
C.port.m_flow
0 = A.port.H_flow +
C.port.H_flow

= C.port.p
= C.port.h
B.port.m_flow +
B.port.H_flow +

Equations inside components A,B,C:
A.port.H_flow = A.port.m_flow*(
if A.port.m_flow > 0 then
else
B.port.H_flow = B.port.m_flow*(
if B.port.m_flow > 0 then
else
C.port.H_flow = C.port.m_flow*(
if C.port.m_flow > 0 then
else

A.port.h
A.h;
B.port.h
B.h;
C.port.h
C.h;

where A.h, B.h, C.h, is the specific enthalpy inside
the respective component. All equations together
form a linear system of equations to compute the
mixing enthalpy A.port.h = B.port.h = C.port.h
in the connection point. It has the solution [2]:

// Energy and mass balance; here:
port1.H_flow + port2.H_flow = 0;
port1.m_flow + port2.m_flow = 0;
...

The enthalpy flow rate in port1 is in principle computed with an if clause:
port1.H_flow = port1.m_flow *
(if port1.m_flow > 0 then
port1.h
else
port2.h);

However, instead of using this if-clause, the corresponding built-in Modelica operator semiLinear() is
actually used:
port1.H_flow = semiLinear(port1.m_flow,
port1.h, port2.h);

The main reason is that this operator will allow a
Modelica translator certain symbolic transformations
that lead to a more robust numerical computation
(see explanation in the Modelica Specification 2.2).
If the above component is connected between two
port volumes (Modelica_Fluid.Pipes.BaseClasses.PortVolume), i.e., the independent medium variables in port1 and port2 are states, then port1.h and
port2.h are either states (i.e., known quantities in the
model) or are computed from states at each integration time step. In such a situation, the above if-clause
represented by the "semiLinear" operator is uncritical, because it depends only on known variables and
can be directly computed.
If instead, say, pressure loss components are connected, then all port variables are unknown and systems of equations occur. For example, three ports,
A.port, B.port, C.port, are connected together. This
results in the following equations:

The Modelica Association

Equations due to
connect(A.port,B.port), connect(A.port,C.port):

A.port.h = -( (if A.port.m_flow > 0 then 0
else A.port.m_flow*A.h)+
(if B.port.m_flow > 0 then 0
else B.port.m_flow*B.h)+
(if C.port.m_flow > 0 then 0
else C.port.m_flow*C.h) )
/ ( (if A.port.m_flow > 0 then
A.port.m_flow else 0)+
(if B.port.m_flow > 0 then
B.port.m_flow else 0)+
(if C.port.m_flow > 0 then
C.port.m_flow else 0) )

Therefore, independently of the flow directions in
the 3 ports, the mixing enthalpy is always uniquely
computed, provided at least one mass flow rate does
not vanish (see [2] for details how to handle the case
if all mass flow rates vanish). From the mixing enthalpy and the port pressure, all other mixing quantities can be computed, such as mixing temperature.
If two ports A and B are connected together, the resulting system of equations has a solution that is
unique also for zero mass flow rates:
A.port.h = if A.port.m_flow > 0 then B.h
else A.h
B.port.h = A.port.h

In some situations, the user can guarantee that the
fluid flows only in one direction. In the Modelica_Fluid library this can be defined in the Advanced menu of components by parameter flowDirection. Based on this parameter setting, corresponding min and max attributes are defined for the
mass flow rate in a connector, such as:

634

Modelica 2006, September 4th  5th

The Modelica Fluid and Media Library for Modeling of Incompressible and Compressible Thermo-Fluid Pipe Networks

ple component model to compute all required fluid
properties:

FluidPort_a port_a(m_flow(min = if
allowFlowReversal then
Modelica.Constants.inf else 0)

When port_a.m_flow is referenced in a semiLinear()
operator, the tool can deduce that only one branch of
the if-clause can appear and can utilize only this
branch for the further symbolic processing. As a result, if-clauses that define the reversing flow are removed.

4

Medium models

Modelica_Fluid uses the free library Modelica.Media that was
developed to provide a standardized interface to media models
and a large number of ready-touse media models based on that
interface. The basic concept of
Modelica.Media is described in
[2]. It was included in the Modelica Standard Library in version 2.2. The library has
been continuously improved to fit the requirements
of Modelica_Fluid. The picture on the left shows the
structure of Modelica.Media. Modelica.Media allows
for a decoupling of the formulation of the balance
equations within a Modelica_Fluid component
model and the definition of the medium. Different
interfaces are provided in Media.Interfaces that are
used as base classes for the implementation of different medium models of different nature, e.g., ideal
gases, real gases, two-phase mediums. For every
medium a record called ThermodynamicState is implemented that contains the minimum set of variables required to describe the state of the medium.
The thermodynamic state record for a pure component ideal gas is
record ThermodynamicState
SI.AbsolutePressure p;
SI.Temperature
T;
end ThermodynamicState;

The thermodynamic state record can be used to compute all other fluid properties except for the saturation properties which will be explained later. The
functions to compute additional fluid properties are
all contained within package Media.Interfaces. A
function without an underscore in its name assumes
the thermodynamic state record as an input. The
function specificEnthalpy() for example will
compute the specific enthalpy from the thermodynamic state.
The following code fragment demonstrates how the
thermodynamic state record could be used in a sim-

The Modelica Association

replaceable package Medium =
Modelica.Medium.Interfaces.PartialMedium;
Medium.ThermodynamicState state;
Medium.SpecificEnthalpy h;
...
state = Medium.setState_pT(1e5, 273.15);
h = Medium.specificEnthalpy(state);

The function setState_pT() will return the state for
the given input variables pressure (p) and temperature (T) independently from the actual entries in the
thermodynamic state record. For example, if the medium state is p and h and setState_pT(..) is called,
for most media a non-linear equation in one unknown will be solved to compute h (this computation
is performed reliably and efficiently). The second
part of the function name following the underscore
indicates the required input variables which is the
standard for all function names within Modelica.Media. The more general function to compute
the state would be setState_pTX() which also requires the nX mass fractions X[nX] for a multiple
substance medium as input. Using the thermodynamic state record in models is a more functionbased approach to medium modeling and is used in
static components, e.g., pressure loss models or the
heat transfer to the wall of a pipe.
Modelica.Media also offers an object-oriented approach that uses the model BaseProperties defined
for each medium interface. This approach is more
suitable for dynamic component models, e.g., a volume or a tank, than the function-based approach. The
provided base property model can be extended by the
user to best meet the specific requirements. The purpose of using the thermodynamic state model in the
function based and in the object oriented approach is
to be able to write models that are independent of the
input variables to the fluid property model. The state
selection mechanism described in [2] makes it possible to obtain numerically efficient models for different fluids with the same component models. The basic idea is sketched at hand of the following implementation of a port volume:
replaceable package Medium =
Modelica.Media.Interfaces.PartialMedium;
Modelica_Fluid.Interfaces.FluidPort_a
port(redeclare package Medium = Medium);
Medium.BaseProperties medium (
preferredMediumStates = true);
equation
medium.p = port.p;
medium.h = port.h;
M = V*medium.d;
U = M*medium.u;
der(M) = port.m_flow; // mass balance
der(U) = port.H_flow; // energy bal.

635

Modelica 2006, September 4th  5th

F. Casella, M. Otter, K. Proelss, C. Richter, H. Tummescheit

In a port volume it is desired that the independent
medium variables are used as states (e.g., p,T or p,h
depending on the medium). The BaseProperties instance medium contains the basic medium equations.
If parameter preferredMediumStates is set to true,
then attribute StateSelect.prefer is set to the independent medium variables and therefore the tool will
use these variables as states for the mass and energy
balance, if this is possible. This means, that the port
volume equations can be implemented without
knowledge about the independent medium variables.
Modelica.Media requires the implementation of
medium models in Modelica. This approach allows
the solver to use as much analytical information
about the medium models as possible when manipulating the system of equations. However, it is often
also very desirable to use existing fluid property libraries written in C or in FORTRAN. A new interface to an external medium library has been developed for Modelica.Media that supports external
medium libraries. This new interface is currently
included in the developer version of Modelica.Media and will be tested thoroughly before
including it in the Modelica Standard Library.

5

Initialization

Every fluid component with states has a menu Initialization. A screen shot of this menu of model
Modelica_Fluid.Volumes.MixingVolume is shown
in the next figure:

value for p and initial values for X and for T or h
are defined.
Depending on the selected option, a value such as
p_start is interpreted from the component as either
being an initial value (i.e. introducing an initial
equation p = p_start) or a guess value (i.e. setting the
start value of p to p_start with fixed = false).
For every medium either T or h can be defined as
start value. Assume that T_start is selected as value
to be provided (either initial or guess value). Depending on the situation, a tool might use h as iteration variable for a non-linear system of equations,
e.g., because h is the independent medium variable.
Then, the setting of T_start would have no effect.
For this reason, modifiers are defined in the initialization menu, e.g. for h_start:
parameter Medium.SpecificEnthalpy h_start=
if use_T_start then
Medium.specificEnthalpy_pTX(
p_start, T_start, X_start)
else Medium.h_default;

If use_T_start is true, the menu for h_start is disabled, i.e., the user cannot input a value and therefore function specificEnthalpy_pTX(..) is called to
compute the start value of the specific enthalpy
based on p_start and T_start. If use_T_start = false,
the user can provide a modifier with a new value that
overwrites the if-clause in the modifier. Otherwise
the default value of h for this medium is used as initial value.
To summarize, the medium is always initialized with
a consistent set of variables p, T, h, X where either T
or h is computed from the other 3 variables with the
corresponding medium function.

6

Parameter initType defines the type of the initialization and has the following options:
 initType == InitialValues:
Initial values of p,X and of T or h are defined.
 initType == SteadyState:
The derivatives of the states are set to zero during initialization. Since usually non-linear systems of equations occur, guess values for the
states are defined for p, X and for T or h.
 initType == SteadyStateHydraulic:
The pressure derivatives are set to zero during
initialization, but the thermal states (T or h) are
initialized with a start value. Therefore, a guess
The Modelica Association

Regularizing characteristics

Pressure drop equations and other fluid characteristics are usually computed by semi-empirical equations. Unfortunately, the developers of semiempirical equations nearly never take into account
that the equation might be used in a simulation program. As a consequence, these semi-empirical equations can nearly never be used blindly but must be
slightly modified or adapted in order that obvious
simulation problems are avoided. For example, turbulent flow in a pipe might be described by the following type of equation:
y = if x >= 0 then sqrt(k1*x)
else -sqrt(k2*abs(x));

A plot of this characteristic is shown in the next figure:

636

Modelica 2006, September 4th  5th

The Modelica Fluid and Media Library for Modeling of Incompressible and Compressible Thermo-Fluid Pipe Networks

where x_small defines the region of the newly introduced two polynomials around x = 0. The result of
applying this function is shown in the next figure.

The difficulty with this function is that the derivative
at x=0 is infinity. The actual physical characteristic doesn't show this singularity. E.g., for pipe
flow, the flow becomes laminar for small velocities
and therefore around zero the sqrt() function is replaced by a linear function. Since the laminar region
is usually of not much practical interest, the above
approximation is used.
The direct implementation above does not work in
Modelica, because an event is generated when x < 0
changes sign. In order to detect this event, event iteration takes place. During the event iteration, the
active if-branch is not changed. For example, assume
that x is positive (= "else" branch) and shall become
negative. During the event iteration x is slightly
negative and the else branch, i.e., sqrt(x), is evaluated. Since this result in an imaginary number, an
error occurs. It would be possible to fix this, by using
the noEvent() operator to explicitly switch off an
event:
y = noEvent( if x<0 then sqrt(k1*x)
else -sqrt(k2*abs(x)));

Still, it is highly likely that good integrators will not
work well around x=0, because they will recognize
that the derivative changes very sharply and will reduce the step size drastically.
In Modelica_Fluid.Utilities several
utility functions are provided to
regularize such types of equations
(see screen shot on right side). For
example, regRoot2(..) replaces the
function above by two polynomials
of third order around zero, so that
the overall function is continuous,
is strict monotonically increasing and has a continuous first derivative everywhere. Additionally, either
the second derivatives of the two polynomials at zero
are identical (= default) or a user defined first derivative at zero can be provided, to, e.g., correctly describe the laminar region around zero. In the first
case, the equation above is replaced by:
y = regRoot2(x, x_small, k1, k2);

The Modelica Association

The blue curve is the exact characteristic according to the equation above, where as the red curve
is the regularized approximation of regRoot2(..) that
has much better numerical properties.

7

Selected Components

In the previous sections, the features have been described that are needed in order that component
models can be implemented. In this section some of
the provided component models will be shortly
sketched.
7.1

Pressure Losses

Package PressureLosses contains models and functions providing pressure loss correlations. All models
in this library have the property that no mass and no
energy is stored in the component. Therefore, none
of the models has a state. The basic correlations are
models that are implemented with functions
of sublibrary PressureLosses.BaseClasses.
These functions might
also be directly called
(e.g. in an implementation of another component, such as the distributed pipe).
All functions are continuous and have a finite, non-zero, smooth,
first derivative. The
functions are all guaranteed to be strict monotonically increasing. The mentioned properties guarantee
that a unique inverse of every function exists. In fact,
for all correlations a function is provided in the form
m_flow = f(p) and also its inverse, p = g(m_flow) is
given. A similar naming convention as in the Media

637

Modelica 2006, September 4th  5th

F. Casella, M. Otter, K. Proelss, C. Richter, H. Tummescheit

library is used, e.g. massFlowRate_dp(..) means that
the functions compute the mass flow rate and that the
input argument is dp (the pressure difference between two ports). Most functions consist of one
statement, so that, e.g., Dymola inlines the function
and therefore no call overhead is present.
The pressure loss correlation Simorifice
pleGenericOrifice defines a standard quadratic correlation of the
form:

1
p =      v v
2

zeta=0.5

where p is the pressure difference between two
ports, v is the fluid velocity (that can be computed
from the mass flow rate, density and pipe area) and 
is the constant pressure loss coefficient, for the fluid
flow from port_a to port_b that can be, e.g., deduced
from some of the standard books like Idelchick [3].
Screen shots of the parameter menu are shown in the
next two figures:

dium model may not provided a function to compute
the viscosity.
Model suddenExpansion defines suddenExpansion
a sudden expansion of a pipe and
computes the correlation factors for
the two flow directions from the
two pipe diameters according to
Idelchick [2].
orifice
In the same way orifice defines a
sharp edged orifice where the correlation factors for the two flow
directions depends, e.g., on the
opening angle of the orifice [2].
Model StaticHead models only the pressure drop
due to gravity.
Finally, model WallFrictionAndGravity models
wall friction and also takes into account gravity. The
implementation is based on [2,3]. The user can select
either the different regions (only laminar, only quadratic turbulent, laminar + quadratic turbulent) or the
detailed characteristic. The latter one is shown in the
next figure [2,3].

Basically, the medium, the correlation factor and the
diameter has to be defined at which  is defined. The
Advanced menu is the same for all components of
the PressureLosses package and defines how the
computation of the correlation is performed:
Figure 1. Moody Chart: lg() = f (lg(Re), ), = L/D

7.2
If from_dp is true, the mass flow rate is computed
from the pressure drop, otherwise the computation is
reversed. The flowDirection defines whether reversal flow shall be taken into account. use_Re
defines the laminar region by the Reynolds number
(e.g. Re < 2000 for smooth wall friction), otherwise
it is defined approximately by a small pressure drop
or a small mass flow rate depending on the selected
computation direction. Finally, if show_Re = true,
the Reynolds-Number is computed in order to utilize
it, e.g., in a plot. By default the computations with
the Reynolds number are not performed, since a meThe Modelica Association

Pipes

Different pipe models
are defined in package
Pipes, as shown in the
screen shot at the right.
LumpedPipe is a simple
pipe model consisting of one volume and two pressure loss correlations for the wall friction, as well as
a heat transfer port to describe the heat transfer
through the wall. The model is especially useful for
demonstration purposes because it is just built from
basic components:

638

Modelica 2006, September 4th  5th

The Modelica Fluid and Media Library for Modeling of Incompressible and Compressible Thermo-Fluid Pipe Networks
thermalPort

port_a
frictionAndGr...

frictionAndGr...

port_b

volume

The other two pipe models are discretized pipes consisting of n volumes. More details are given in the
next subsection.
7.3

Heat Exchanger

A basic heat exchanger model can be found under
Components.HeatExchangers.BasicHX. It demonstrates the usage of several models from the Fluid
library and the interfaces provided to adapt them to
fit personal needs. The heat exchanger is composed
of two pipe flow models and one wall element as
shown in figure 4. The wall determines a co- or
counterflow orientation of the two medium flows. It
also adds the major thermal capacity to the set. Heat
conduction is assumed to be one-dimensional, perpendicular to both fluid flows.
pipe_2
port_a2

port_a1

wall

port_b1

port_b2

one dimension. They largely depend on the specific
application, thus have to be replaceable in a model in
order to provide the required flexibility, but at the
same time need to be known in the lowest hierarchical level of a system, the governing balance equations.
The distributed pipe model contains a replaceable
heat object that determines the relationship between
the thermal port properties, heat flow and temperature, and the bulk flow, namely the medium temperature and the sensible heat term in the energy balance.
The library currently only provides the simplest
model possible to describe a sensible heat transfer,
by means of a constant heat transfer coefficient. But
an implemention of e.g. Nusselt correlations from
the literature is easily done by inheriting from the
base
model
Pipes.BaseClasses.HeatTransfer.PartialPipeHeatTransfer. Besides geometrical parameters, such as the hydraulic diameter and
cross sectional flow area the heat object also
knows mass flow rate and the medium.state
record (see section 4) of the fluid flow, which makes
it possible to compute required transport properties
by function call if and only if needed in the respective correlation. For further information concerning
the models mentioned here the reader may be referred to the online documentation of the library.
Figure ? shows the results of an example model in
the library. One of the two fluid flows in the heat
exchanger changes its direction midway, and because it is fed from a colder source changes the direction of heat flow.

pipe_1

30

Figure 4: Heat exchanger component
On both fluid sides medium packages from the Modelica.Media library can be chosen. An instance of the
respective BaseProperties model as described in
section 4 is automatically included in each of the two
distributed flow models from the component package
Pipes. They follow an upwind discretization
scheme, the number of segments being the same for
both pipes and the wall. Dynamic energy and mass
balances interlace on a staggered grid with static
momentum balances for each control volume. Two
half momentum balances on each end make the
component fully symmetric. The port interface corresponds to the general design principle outlined in
section 3 and allows for flow reversal. A uniform
cross sectional area is assumed along the entire flow
path.
Empirical heat transfer and pressure drop correlations allow us to reduce 3D fluid flow problems to
The Modelica Association

639

Q flow in kW

20
10
Heat flow fluid 1
0

Heat flow fluid 2

10
20
30
0

20

40

60

Time in s

80

100

Figure 5: Heat flow rates in both heat exchanger fluids (water) while one of them
changes direction.

Modelica 2006, September 4th  5th

F. Casella, M. Otter, K. Proelss, C. Richter, H. Tummescheit

8

Conclusions

The 1.0 Beta 1 version of the Modelica_Fluid library
described in this article is in a rather stable stage and
the most important basic problems have been resolved. Especially, it was possible to reach the following quite ambitious goals:
(a) The component equations are independent from
the medium equations (especially, a component can
be used for media that have different sets of independent variables, such as T, pT, or p,h, or p,T,X or
T,X etc.). This has the big advantage that pump,
pipe, valve models etc., can be implemented just
once and utilized for quite different media. Of
course, there are limits, e.g., one and two phase flow
is always differently described in a component. On
the other hand, all components of the Fluid library
support incompressible and compressible as well as
one and multiple substance media.
(b) Components can be arbitrarily connected together. Also models such as a pipe can be flipped.
The Modelica connection semantics generates ideal
mixing equations so that the mass and energy balance is fulfilled. If this is not desired, junction models have to be used. This is especially the case when
the momentum balance in a junction cannot be neglected. There are still some unresolved issues, e.g.,
the Pipes.DistributedPipe model is discretized in
such a form that at the two ends of a pipe momentum
balances are present (and not mass and energy balances of a volume). When connecting pipes of this
form directly together (without using a port volume
in the connection point), non-linear systems of equations appear.
The goal is to continuously improve the Modelica_Fluid library, especially to include more component models. Contributions from users of the library are welcome. The actual version of the library
can be downloaded from
http://www.modelica.org/library/

9

examples, symbolic algorithms and the further design of the library (alphabetical list): John Batteh,
Jonas Eborn, Rdiger Franke, Anton Haumer, Henning Knigge, Chuck Newman, Hans Olsson, Katja
Poschlad, Manuel Remelhe, Sven Erik Mattsson,
Mike Tiller, Allan Watson.
The Modelica.Media library development is organized by Hubertus Tummescheit. For the long list of
contributors, see
Modelica.Media.UsersGuide.Contact.

10 References
[1] Dynasim (2006). Dymola Version 6.0. Dynasim AB,
Lund, Sweden. Homepage: http://www.dynasim.se/.
[2] Elmqvist, H., Tummescheit H., and Otter M.( 2003).
Object-Oriented Modeling of Thermo-Fluid Systems.
Proceedings of 3rd Int. Modelica Conference,
Linkping, Sweden, ed. P. Fritzson, pp. 269-286.
http://www.modelica.org/Conference2003/papers/h4
0_Elmqvist_fluid.pdf

[3] Idelchik I.E. (1994): Handbook of Hydraulic Resis-

tance. 3rd edition, Begell House, ISBN 0-8493-99084.
[4] Kral A., Haumer A. Plainer M. (2005): Simulation of
a thermal model of a surface cooled squirrel cage induction machine by means of the SimpleFlow-library.
4th int. Modelica Conference, Hamburg-Harburg.
http://www.modelica.org/events/Conference2005/onl
ine_proceedings/Session3/Session3b1.pdf
[5] Poschlad K., Remelhe M.A.P., and Otter M. (2006):
Modeling of an Experimental Batch Plant with
Modelica. 5th int. Modelica Conference, Vienna.
[6] Rdiger Franke (2003): On-line Optimization of
Drum Boiler Startup. Proceedings of the 3rd Int.
Modelica Conference, Linkping, 2003.
http://www.modelica.org/events/Conference2003/pap
ers/h29_Franke.pdf

Acknowledgments

The development of the Modelica_Fluid library
started in year 2002 and many have contributed:
The Fluid library development was organized in
2002-2004 by Martin Otter and since 2004 it is organized by Francesco Casella. The essential basic
design of the Fluid library, especially component
interfaces, handling of reversing flow with the semiLinear() operator, property propagation is from
Hilding Elmqvist. Besides the authors, the following
people contributed to the fluid component models,
The Modelica Association

640

Modelica 2006, September 4th  5th

Shock Wave Modeling for Modelica.Fluid Library using Oscillation-free Logarithmic Reconstruction

Shock Wave Modeling for Modelica.Fluid library
using Oscillation-free Logarithmic Reconstruction
Jose Daz Lopez
email: jose.diaz@dynasim.se
Dynasim AB
Research Park Ideon, SE-223 70 Lund, Sweden

Abstract
An oscillation-free discretisation of conservation laws has
been implemented using Modelica.Fluid library [1] with a
novel logarithmic reconstruction technique. Roes approximation flux is used in combination with it. The results
show that this logarithmic reconstruction has many advantages: limiter-free, absence of spurious oscillations near
shock waves as well as third order of approximation to the
solution.
Keywords: Finite Volume Methods, Shock waves, Roes
Flux approximation, Logarithmic reconstruction

1 Introduction
This paper presents an implementation of the logarithmic
reconstruction method for hyperbolic partial differential
equations in conservation law form, as presented in [7], using Modelica.Fluid [1].
The main objective is to resolve numerically shock waves
avoiding spurious oscillations, limiters, artificial viscosity
or wave velocity estimators.

 Euler System. If the section A of the pipe is constant
we have that x  [a, b],


A
u =  vA  ,
e0 A


vA
f (u) =  (v2 + p)A 
vh0 A
boundary conditions and initial values for , v and p.
The variables denote physical quantities as follows

v
e0
h0
p

The stagnation internal energy is related to the specific
internal energy as
1
e0 = e + v2 ,
2
and h0 satisfies

2 Problem Formulation
Scalar hyperbolic partial differential equations (HPDEs)
are usually formulated in the following compact way
ut + f (u)x = 0

(1)

where u : Rn  R  Rm is the solution and f : Rm  Rm is
the flux. The subindices represent partial derivation respect
to time (t) and space (x) variables. Some classical case studies in HPDEs are
 Advection Equation where x  [a, b], u : R  R  R,
f  I with boundary condition u(t, a) = g(t) and initial
value u(0, x) = h(x).
 Burgers Equation where x  [a, b], u : R  R  R,
f (u) = 12 u2 , boundary condition u(t, a) = g(t) (or periodic) and initial value u(0, x) = h(x).

The Modelica Association

641

mass dentity
fluid speed
stagnation internal energy
stagnation entalphy
pressure

p
h0 = e0 + .


A source term S(u) is included if the section A varies
gradually. In this case, the flow is called quasi-onedimensional. The conservation law takes the form
ut + f (u)x = S(u).

(2)

This source term is defined as



0

S(u) =  p dA
dx + GA
qA

where q is the thermal conductivity constant and G =
1
4
2 v|v|k D , k the wall friction coefficient and D the
equivalent diameter of the duct. The source term can
also include effects related to temperature


0

p dA
S(u) = 
dx + GA
2

qA + kA xT2 + Q

Modelica 2006, September 4th  5th

J.D. Lpez
where T is temperature, k is the thermal conductivity 3.2 A primer approach
(considered constant along the pipe) and Q is the heat
In [1] we find an approach to discretising the pipe example
flow. The system is completed by equations that are
presented before using Modelica. The discretisation uses
characteristic to the medium, that is
the following approximations
p = p(, T ), e = e(, T ).
ui = u(xi ,t)xi
(5a)
The three equations of this system have physically relfi+1/2 = f (u (xi+1/2 ,t))
(5b)
evant names: mass, momentum and energy balance
equations. We will refer to them later on with those and piecewise constant reconstruction of u in Ci for the mass
names.
balance and energy balance equations. The same setup is
used for the moment balance equation, except that the grid
here is then staggered, see [6]. The argumentation pre3 Numerical flux and reconstruction used
sented in [6] is that staggering results in a velocity and pressure fields that are physically meaningful (pp. 120). Spuri3.1 Finite volume methods for HPDEs
ous oscillations are not allowed as solutions in the velocity
Consider now the semidiscretisation of (1) by means of fi- field. It is also stated that the implementation is cumbernite volumes (FV). This method yields a system of ODEs some. This staggered-grid formulation is even more trouthat are numerically integrated in time. For a survey in FV- blesome for object-oriented modeling.
The example model of a distributed pipe found
standard notation, see also [2].
Modelica.Fluid.Components.Pipes,
called
The method can be briefly summarised as follows. Consider in
DistributedPipeFV,
implements
a
non-staggered
the domain  = [a, b], divided into n segments (xi , xi+1 )
with a = x0  x1 < ... < xi < xi+1 < ... < xn+1 = b. We grid, with the setup described above. The discretisation is
found in Modelica.Fluid.BaseClasses.Pipes.Flow1d FV.
use also as notation xi = xi+1  xi and
xi+ = xi + (1  )xi+1

  (0, 1).

3.3

Lax-Friedrichs numerical flux

The so-called computing cells are therefore defined as

The Lax-Friedrichs numerical flux is classically the easiest possibility of a numerical flux. This numerical flux is
For the numerical integration in time, consider as state vari- unstable and needs a damping factor  to avoid spurious
oscillations. The numerical flux is defined as
ables the averages
Ci = [xi1/2 , xi+1/2 ],

1
ui (t) =
xi

i = 1, ..., n.

Z

u(x,t)dx,

(3)

Ci

where xi = xi+1/2  xi1/2 , the length of Ci . The main
objective now is to state the governing equations for this
averages. This is the process of semidiscretisation of the
HPDE. This method is inspired by the integral from of (1).
The semidiscretised ODE system is based on the construction of a flux approximation from the left and right states at
xi+1/2

1
LF
fi+1/2
= ( f (u (xi+1/2 ,t)) + f (u+ (xi+1/2 ,t)))
2
1
 (u+ (xi+1/2 ,t)  u (xi+1/2 ,t)) (6)
2

The principal problem with this approach is that the parameter  has to be tuned to avoid unnecessary damping
of shock waves and corners. This parameter is related to
the traveling wave velocities and is in general difficult to
estimate them a priori. Furthermore, there is no easy way
to treat waves traveling in both left and right directions with
f (u(xi+1/2 ,t))  fi+1/2 (u (xi+1/2 ,t), u+ (xi+1/2 ,t)).
this scheme.
The function f is the so-called numerical flux approxima- We want to avoid those artificial factors as much as possible. The cause of such spurious oscillations is a too coarse
tion, and governs the evolution of ui as follows
estimations of u+ and u .

d
1 
ui =
f
 fi1/2 , i = 1, ..., n
(4)
dt
h i+1/2
3.4 Reconstruction of u
where the sign  indicates the side of xi taken from the
Another classical approach is to consider linear reconstrucreconstruction of u.
The focus now on lies exclusively on ui and the numerical tion of u in Ci , see [4, 12]. In this case,
flux approximation fi+1/2 . The reason is that different propxi +
erties of the conservation law are inherited by the numerical
u+ = u +
m
2

simulation, depending on the reconstruction method for u
and fi+1/2 .
and
xi 
To show the reasons for requiring limiter-free, nonu = u 
m
2
oscillatory reconstruction and viscous-free flux approximation, two simpler approaches are presented before. One of , where the slopes m+ and m are estimated from the avthem is already implemented in Modelica.Fluid.
erages ui1 , ui and ui+1 . This approach needs the so called

The Modelica Association

642

Modelica 2006, September 4th  5th

Shock Wave Modeling for Modelica.Fluid Library using Oscillation-free Logarithmic Reconstruction
limiter, simply a bounded function L(m). The reconstruction takes the form
u+ = u +

xi
L(m+ )
2

Listing 2: Momentum Balance
/ / Momentum B a l a n c e
for i in 2: n loop
F p [ i ] = ( medium [ i  1 ] . pmedium [ i ] . p) A i n n e r ;
F f [ i ] = dp [ i ] A i n n e r ;
( i f dynamicTerm t h e n d e r ( m flow [ i ] ) l e n g t h / n e l s e 0 ) =
F p [ i ] + F f [ i ] + ( I f l o w [ i 1] I f l o w [ i + 1 ] ) / 2 ;
end f o r ;

and
xi
L(m )
2
instead. The main advantage is that limiters avoid spurious oscillations, but the maximum approximation order of
reconstruction is two, if the limiter is constructed in an appropiate way, see [4].
Higher order of approximation requires other techniques.
u = u 

3.5

In this approach, the boundary conditions are easily included: the ports port a and port b are considered the
nodes 0 and n + 1 of the discretisation, and included when
the array index of the component medium is less than 1 or
larger than n.
The result is depicted in Fig. 2, and the spurious oscillations
appear clearly in the two shock waves.

Oscillations in DistributedPipeFV

Consider the Sod problem, described in [12]. The Sod problem consists of a domain with a perfectly isolating membrane in the middle that separates a zone with high pressure
and temperature of a zone with low pressure and temperature. The dynamics of the fluid in the whole domain are
governed by Euler equations. At time t = 0, the membrane
is removed instantaneously. Further details about the configuration are given later in Sec. 4.
The corresponding Modelica model is implemented with
two DistributedPipeFV models connected with adequate
initial conditions, depicted in Fig. 1. The reason for hav- Figure 2: Spurious oscillations on top the shock waves in
ing two pipes is that the Sod problem has initially waves the Sod problem
traveling in both left and right from the membrane. Since
we want to experiment with Lax-Friedrichs numerical flux
also, we need to specify two different  coefficients in two 3.5.2 Lax-Friedrichs Flux and upwinding
different domains.
Lax-Friedrichs flux avoids oscillations and is easy to implement. With some tuning of the  factor, this flux can yield
better results. The sine qua non condition of LF-flux is that
the shock waves are traveling in one direction.
The implementation is presented in the listings 3 and 4.
Listing 3: Mass and Energy Balance (LF)
/ / Mass and e n e r g y b a l a n c e
f o r i i n 2 : n1 l o o p
i f s t a t i c then
...
else
d e r (m[ i ] ) = m flow [ i ]  m flow [ i + 1 ] + m s f l o w [ i ]
+ a l p h a (m flow [ i 1]+2 m flow [ i ] m flow [ i + 1 ] ) ;

Figure 1: Sod problem model using two connected pipes

3.5.1

Original approach

d e r ( mXi [ i , : ] ) = mXi flow [ i , : ]  mXi flow [ i + 1 , : ] + m s X i f l o w [ i , : ]
+ a l p h a (m s X i f l o w [ i 1 , :]+2 m s X i f l o w [ i , :]  m s X i f l o w [ i +1 , : ] ) ;

The implementation of the original approach is in Modelica.Fluid.BaseClasses.Pipes.Flow1D FV. We present only
the dynamical equations of the model since this is the focus of this paper.
The implementation of equations (5) can be observed in the
listings 1 (mass and energy balance) and 2 (momentum balance).

d e r (U[ i ] ) = H flow [ i ]  H flow [ i + 1 ] + Q s f l o w [ i ]
+ a l p h a (H flow [ i 1]+2 H flow [ i ] H flow [ i + 1 ] ) ;
end i f ;
end f o r ;

Listing 4: Momentum Balance (LF)
f o r i i n 2 : n1 l o o p
F p [ i ] = ( medium [ i  1 ] . pmedium [ i ] . p) A i n n e r
+ a l p h a (medium [ i  1 ] . p+2medium [ i ] . pmedium [ i + 1 ] . p) A i n n e r ;
F f [ i ] = dp [ i ] A i n n e r ;
( i f dynamicTerm t h e n
d e r ( m flow [ i ] ) l e n g t h / n e l s e 0 ) = F p [ i ] + F f [ i ]
+ ( I f l o w [ i 1] I f l o w [ i + 1 ] ) / 2 ;

Listing 1: Mass and Energy Balance
/ / Mass and e n e r g y
for i in 1: n loop
i f s t a t i c then
...
else
d e r (m[ i ] ) = m
d e r ( mXi [ i , : ] )
d e r (U[ i ] ) = H
end i f ;
end f o r ;

balance

end f o r ;

flow [ i ]  m flow [ i + 1 ] + m s f l o w [ i ] ;
= mXi flow [ i , : ]  mXi flow [ i + 1 , : ] + m s X i f l o w [ i ,
flow [ i ]  H flow [ i + 1 ] + Q s f l o w [ i ] ;

The Modelica Association

:];

Notice that the main difference is the added terms multiplied by . The results are depicted in Fig. 3, before the left
shock wave bounces agains ambient1, and in Fig.4 after

643

Modelica 2006, September 4th  5th

J.D. Lpez
the wave bouncing. As we already mentioned, the spurious and
oscillations appear since  is negative in pipe4.

(t  1) log(1  t)  t
t2
with appropriate constants c1 , c2 , c3 and c4 for third order
convergence.
The computation of the constants is relatively simple. We
describe the computation in the following algorithm
 (t) = 

1. Calculate
d1 =

ui  ui1
ui+1  ui
, d2 =
.
xi1
xi

(8)

2. The coefficient c1 is obtained from


2|d1 |q |d2 |q + tol
c1 (d1 , d2 ) = (1  tol) 1 + tol 
|d1 |2q + |d2 |2q + tol

Figure 3: Lax-Friedrichs Flux with  = 0.1 in pipe4 and
 = 0.1 in pipe5. (Before first bouncing.)

q

where tol = 0.1xi and typically q = 1.4. This factor q
controls the local variation, and the larger q the smaller
the local variation.
3. The constants c2 , c3 and c4 are calculated from
c2
c3
c4

c1
c1  1
(c1  1)(d2 (1  c2 )  d1 )
=
c2  c1
= d1  c3 .
=

4. Using (7) we can now calculate u .
Figure 4: Lax-Friedrichs Flux with  = 0.1 in pipe4 and
+
 = 0.1 in pipe5. Spurious oscillations appear in pipe4 after The procedure for u is very similar. The only difference is
that
d
and
d
are
defined
instead as following
1
2
the reflexion of a small shock wave at the left boundary.
d1 =

3.6

ui+1  ui
ui+2  ui+1
, d2 =
.
xi
xi+1

Logarithmic reconstruction

Logarithmic reconstruction is a technique recently developed mainly by A. Schroll in the papers [8, 9, 7] with examples in [10]. Schrolls scheme is called LDLR, standing
for Local Double Logarithmic Reconstruction. LDLR is as
a natural generalisation of A. Marquinas hyperbolic reconstruction presented in [5]. LDLR has also the advantage
over other approximations of higher order (as those studied
by S. Serna and A. Marquina in [11], based on their own
variant of the weighted ENO schemes) that shock and rarefaction waves are resolved correctly without any estimates,
thresholds or heuristics.
When using LDLR for reconstruction, u is represented as a
piecewise logarithmic function. In particular, the left state
u+ and the right state u at xi+1/2 are estimated as
u = ui + c3 xi  (c1 ) + c4 xi  (c2 )

3.7

The Modelica Association

flux

and

upwind

Upstream and downstream propagation is used in upwind
schemes. This is intrinsic and physically meaningful information contained in the HPDE. The cornerstone is to decompose the flux difference at xi+1/2 as f+  f = W + +
W  , according to the physics of the Euler equations.
Consider the left and right states of u (as defined for Euler
system) at xi+1/2 . Define Roes averages as (we drop the
subindex for simplicity in this case)

(7)

where
+ (t) = 

Roes numerical
schemes

log(1  t) + t
t2

2 = + 
p
p
+ v+ +  v
p
v = p
+ + 
p
p
 
+ h+
0 + p h0
h = p
+ + 
a2 = (  1)(h  1/2v2 ).

644

(9a)
(9b)

(9c)
(9d)

Modelica 2006, September 4th  5th

Shock Wave Modeling for Modelica.Fluid Library using Oscillation-free Logarithmic Reconstruction
dui
We observe that
depends on ui+2 , ui+1 , ui , ui1 and ui2 .
dx
Thus, treatment of the boundary conditions is needed for
du1
dun
and
dx
dx

Using Roes averages and the differences
p = p+  p ,  = +   , v = v+  v ,
we can estimate the traveling wave velocities as follows
= u  a
= u
= u + a.

(10a)
Boundary Conditions Consider i = 1 in Eq. (4). To com(10b)
u1
pute ddx
we need the values of f1+1/2 and f11/2 , con(10c) structed from the available data and the boundary condiThese travel velocities have associated wave forms, esti- tions. We use the ghost cell approach to solve this problem.
The ghost cell technique is applied by extending the domain
mated as


beyond the boundary with new cells. The amount of those
1


u

a
W1 =
(11a) new cells is as many as needed to use the same central numerical approximation.
h  ua
u1
In our case, to compute ddx
we would need u3 , u2 , u1 , u0 and


1
u1 because of the size of the stencil. We have added two
W2 =  u 
(11b) ghost cells u and u . Their value has to be design to meet
0
1
1
h
2
the boundary conditions. For simplicity, we just consider


u0 = u1 = u(a,t) for this study.
1
W3 =  u + a 
(11c) The same reasoning is also valid for i = n, where two ghost
cells un+1 and un+2 are to be introduced. In the same fashh + ua
ion, we consider u(b,t) = un+1 = un+2 .
and associated strengths, estimated as
Clearly, this approximation means a loss of accuracy at the
1
a1 =
(p  au)
(12a) boundaries, where the order of approximation drops. Of
2a2
course, more sophisticated numerical schemes may be de1 2
rived to meet higher approximation orders, using the two
a2 =
(a   p)
(12b)
new degrees of freedom introduced.
a2
1
a3 =
(p + au).
(12c)
2a2
3.9 Source term discretisation
(12d)
Even though we dont explore the source term in this paper,
With all this information, we can decompose the traveling
we provide a way of handling the source term for completewaves, according to velocities i . In a compact notation we
ness.
can write
The semidiscretised system considering source term S takes
W + =  aiWi
(13a) the form
1
2
3

i >0

W



=


d
1 
ui =
fi+1/2  fi1/2 + Si ,
dt
h

(13b)

 aiWi

i 0

i = 1, ..., n.

(14)

?
u{i+2,i+1,i}



u
i+1/2
?
u{i+1,i,i1}

The Modelica Association

u+
i1/2
?
u{i+1,i,i1}

-

u+
i+1/2

-





-

To model the term Si , we use the speeds obtained by Roes
with i = 1, 2, 3. For more complex schemes considering
numerical flux. The decision is then taken using 1 and 3
contact traveling waves, see [4, 12].
from Eq. (10)

3.8 LDLR Stencil and Roes Flux
S(u+
1 > 0

i1/2 ),


  S(u )   S(u+ )
1
3
i1/2
i+1/2
The LDLR is symmetric as long as the numerical flux keeps
Si =
, 1  0  3 .




symmetry. The following dependency graph shows the de
1
3


S(u
3 < 0
pendency of ddxui on ui , i = 1, 2, ..., n.
i+1/2 ),
(15)
In
case
we
include
thermodynamical
effects
in
S
,
we
have
i
dui
to estimate the temperature gradient. It is important then to
dx
use a scheme with at least third order. This is important to
keep the convergence order, since LDLR approximation is
fi+1/2
fi1/2
of third order, [7].

u
i1/2

4

Applications

We will explore now the results of the LDLR implemen? tation with Roes flux using Modelica.Fluid. For details of
u{i,i1,i2} the implementation, see section 5. We come back first to the

645

Modelica 2006, September 4th  5th

J.D. Lpez
two pipe problem presented in Fig. 1, and then some other
examples showing different aspects of the approach.
In all experiments,
the chosen medium was
IdealGases.SingleGases.CH3COOH
from
Modelica.Media. The length of the pipes is 10
cm and 20 cm the larger ones. The discretisation used
is 10 cells/cm, that is, 100 cells for the short pipes and
200 for the large pipes. As before, the high pressure and
temperature zone has ph = 3  105 Pa and Th = 600 K. The
low pressure and temperature zone has pl = 1.5  105 Pa
and Tl = 300 K.

4.1

Figure 7: Model for boundary condition testing.

Two pipe Sod problem

Figure 5: Oscillation-free LDLR solution and Roes flux of
the two pipe Sod problem

Figure 8: Simulation result of the comparison model
The model has a large pipe that undergoes the same conditions as two series connected pipes. The pressure and temperature profiles are then compared. Optically, the solution
is not distinguishable, as depicted in Fig. 8.
When plotting the difference, depicted in Fig. 9, we observe
the differences. In both temperature and pressure, the difference is around two orders of magnitude less than the variables. This difference causes traveling waves that does not
influence very much the behavior of the system. Furthermore, this difference goes to zero as the number of discretisation intervals is increased.

Figure 6: Steady State of the Two pipe Sod problem with 4.3 Symmetry
LDLR and Roes Flux.
For testing symmetry of the LDLR with Roes approximaWith this scheme, the right upwinding and the logarithmic tion, we simulate the model depicted in Fig. 10. Simply two
reconstruction makes the solution oscillation-free. We ob- pipes in parallel and one of them with interchanged connecserve in particular that steady state is reached without any tions.
trouble, depicted in Fig. 6. This is not possible with the Fig. 11 shows the result of the simulation. Notice that the
original approach or the Lax-Friedrichs flux in the general index of the left graph goes from 0 to 1 while the right graph
case. Fig. 5 depicts the solution given by the new scheme at goes from 1 to 0.
the same time point depicted in Fig. 2 and Fig. 3.

4.4
4.2

Three pipe problem

One pipe Sod problem

Three pipe problem is a very interesting application for
We want to establish now how is the behavior of the ghost boundary condition testing. The connection of three pipes
cell implementation of the boundary conditions and connec- at a point is challenging because of the mass balance in an
tors. For that, we simulate the model depicted in Fig. 7.
infinitesimal volume at the connector.

The Modelica Association

646

Modelica 2006, September 4th  5th

Shock Wave Modeling for Modelica.Fluid Library using Oscillation-free Logarithmic Reconstruction

Figure 11: Solution of the symmetry test.

Figure 9: Difference between single pipe and two series
pipe.

Figure 12: Three pipe model for testing of boundary conditions for several connections.

Figure 10: Model used for symmetry testing.
In this particular application, the wave interference can be
viewed for inviscid or low viscosity fluids, if the length of
the pipes are different. In fig. 12 is depicted the system
modeled. Fig. 13 shows the pressure and temperature profiles when the traveling wave bounces in the short pipe. We
observe in the larger pipe how the shock pressure wave is
still traveling farther.
The profiles after the shock wave bounces at the end of the
larger pipe is presented in Fig. 14.

Figure 13: Solution after the traveling wave in the short pipe
bounces.

5 Implementation details
5.1

Structure

The structure of the Modelica code follows the same dependency shown before. The parts of the code can be identified
with the following diagram (from reconstruction to derivative)
ui

log

- u+ , u
i+1/2 i+1/2

W + ,W 

- fi+1/2 - d ui
dt

The function RoeWaves computes the traveling waves
W + ,W  from the reconstruction scheme. The function logarithmicminus computes the approximation u
i+1/2 from the averages ui and its companion
logarithmicplus computes u+
i+1/2 from the averages Figure 14: Solution after the traveling wave bounces at the
ui , see listing 5.
large pipe.

The Modelica Association

647

Modelica 2006, September 4th  5th

J.D. Lpez
At last, the approximations contained in the arrays
f1p,f2p,f3p and f1m,f2m,f3m, that are equated to
the derivatives dtd ui , see listing 6 and 7

RoeWaves (
{l o g a r i t h m i c m i n u s ( medium [ 1 ] . d ,
medium a . d ,
medium a . d ,
length /n , q) ,
l o g a r i t h m i c m i n u s ( medium [ 1 ] . dv [ 1 ] ,
medium a . dv [ 1 ] ,
medium a . dv [ 1 ] ,
length /n , q) ,
l o g a r i t h m i c m i n u s ( medium [ 1 ] . dmedium [ 1 ] . u + medium [ 1 ] . d(v [ 1 ] )  2 / 2 ,
medium a . dmedium a . u + medium a . d(v [ 1 ] )  2 / 2 ,
medium a . dmedium a . u + medium a . d(v [ 1 ] )  2 / 2 ,
l e n g t h / n , q )} ,
{ l o g a r i t h m i c p l u s ( medium [ 2 ] . d ,
medium [ 1 ] . d ,
medium a . d , l e n g t h / n , q ) ,
l o g a r i t h m i c p l u s ( medium [ 2 ] . dv [ 2 ] ,
medium [ 1 ] . dv [ 1 ] ,
medium a . dv [ 1 ] ,
length /n , q) ,
l o g a r i t h m i c p l u s ( medium [ 2 ] . dmedium [ 2 ] . u + medium [ 2 ] . d(v [ 2 ] )  2 / 2 ,
medium [ 1 ] . dmedium [ 1 ] . u + medium [ 1 ] . d(v [ 1 ] )  2 / 2 ,
medium a . dmedium a . u + medium a . d(v [ 1 ] )  2 / 2 ,
l e n g t h / n , q )} ,
1.4);

Listing 5: Roes Flux with logarithmic reconstruction
( f 1 p [ i ] , f 2 p [ i ] , f 3 p [ i ] , f1m [ i ] , f2m [ i ] , f3m [ i ] ) =
RoeWaves (
{l o g a r i t h m i c m i n u s ( medium [ i + 1 ] . d ,
medium [ i ] . d ,
medium [ i  1 ] . d , l e n g t h / n , q ) ,
l o g a r i t h m i c m i n u s ( medium [ i + 1 ] . dv [ i + 1 ] ,
medium [ i ] . dv [ i ] ,
medium [ i  1 ] . dv [ i 1] ,
length /n , q ) ,
l o g a r i t h m i c m i n u s ( medium [ i + 1 ] . dmedium [ i + 1 ] . u + medium [ i + 1 ] . d(v [ i + 1 ] )  2 / 2 ,
medium [ i ] . dmedium [ i ] . u + medium [ i ] . d(v [ i ] )  2 / 2 ,
medium [ i  1 ] . dmedium [ i  1 ] . u + medium [ i  1 ] . d(v [ i  1 ] )  2 / 2 ,
l e n g t h / n , q )} ,
{ l o g a r i t h m i c p l u s ( medium [ i + 2 ] . d ,
medium [ i + 1 ] . d ,
medium [ i ] . d , l e n g t h / n , q ) ,
l o g a r i t h m i c p l u s ( medium [ i + 2 ] . dv [ i + 2 ] ,
medium [ i + 1 ] . dv [ i + 1 ] ,
medium [ i ] . dv [ i ] ,
length /n , q) ,
l o g a r i t h m i c p l u s ( medium [ i + 2 ] . dmedium [ i + 2 ] . u + medium [ i + 2 ] . d(v [ i + 2 ] )  2 / 2 ,
medium [ i + 1 ] . dmedium [ i + 1 ] . u + medium [ i + 1 ] . d(v [ i + 1 ] )  2 / 2 ,
medium [ i ] . dmedium [ i ] . u + medium [ i ] . d(v [ i ] )  2 / 2 ,
l e n g t h / n , q )} ,
1.4);

Listing 6: Mass Balance with Roes Flux
d e r (m[ i ] ) =  ( f 1 p [ i 1] + f1m [ i ] ) A i n n e r + m s f l o w [ i ] ;
d e r ( mXi [ i , : ] ) = mXi flow [ i 1 , : ]  mXi flow [ i , : ] + m s X i f l o w [ i ,
d e r (U[ i ] ) =  ( f 3 p [ i 1] + f3m [ i ] ) A i n n e r + Q s f l o w [ i ] ;

:];

Listing 7: Momentum Balance with Roes Flux
( i f dynamicTerm t h e n
d e r ( m flow [ i ]) l e n g t h / n e l s e 0 ) = (f2m [ i ] + f 2 p [ i 1]) A i n n e r
+ F f [ i ] + ( I f l o w [ i 1] I f l o w [ i + 1 ] ) / 2 ;

...
/ / port b
( f 1 p b , f 2 p b , f 3 p b , f1m b , f2m b , f3m b ) =
RoeWaves (
{l o g a r i t h m i c m i n u s ( medium b . d ,
medium [ n ] . d ,
medium [ n  1 ] . d ,
length /n , q) ,
l o g a r i t h m i c m i n u s ( medium b . dv [ n ] ,
medium [ n ] . dv [ n ] ,
medium [ n  1 ] . dv [ n 1] ,
length /n , q) ,
l o g a r i t h m i c m i n u s ( medium b . dmedium b . u + medium b . d(v [ n ] )  2 / 2 ,
medium [ n ] . dmedium [ n ] . u + medium [ n ] . d(v [ n ] )  2 / 2 ,
medium [ n  1 ] . dmedium [ n  1 ] . u + medium [ n  1 ] . d(v [ n  1 ] )  2 / 2 ,
l e n g t h / n , q )} ,
{ l o g a r i t h m i c p l u s ( medium b . d ,
medium b . d ,
medium [ n ] . d ,
length /n , q) ,
l o g a r i t h m i c p l u s ( medium b . dv [ n ] ,
medium b . dv [ n ] ,
medium [ n ] . dv [ n ] ,
length /n , q) ,
l o g a r i t h m i c p l u s ( medium b . dmedium b . u + medium b . d(v [ n ] )  2 / 2 ,
medium b . dmedium b . u + medium b . d(v [ n ] )  2 / 2 ,
medium [ n ] . dmedium [ n ] . u + medium [ n ] . d(v [ n ] )  2 / 2 ,
l e n g t h / n , q )} ,
1.4);
...

5.2

Including connectors and boundary conditions

The ghost cells u1 = u0 are implemented in medium a,
at the right boundary. At the left boundary, the ghost cells
un+1 = un+2 are implemented in medium b. Then, they
are connected to the discretisation using the semiLinear
operator and adequate relations for m flow variables, see
listing 8.
Listing 8: Ports and Ghost cells
/ / Port
port a
port b
port a
port b
port a
port b

medium m o d e l s f o r g h o s t c e l l s
. p = medium a . p ;
. p = medium b . p ;
. h = medium a . h ;
. h = medium b . h ;
. Xi = medium a . Xi ;
. Xi = medium b . Xi ;

/ / Boundary c o n d i t i o n s
p o r t a . H flow = s e m i L i n e a r ( p o r t a . m flow ,
p o r t b . H flow = s e m i L i n e a r ( p o r t b . m flow ,
p o r t a . mXi flow = s e m i L i n e a r ( p o r t a . m flow
p o r t b . mXi flow = s e m i L i n e a r ( p o r t b . m flow
p o r t a . m flow = m flow [ 1 ] ;
p o r t b . m flow = m flow [ n ] ;

p o r t a . h , medium [ 1 ] . h ) ;
p o r t b . h , medium [ n ] . h ) ;
, p o r t a . Xi , medium [ 1 ] . Xi ) ;
, p o r t b . Xi , medium [ n ] . Xi ) ;

Listing 10: Boundary Conditions
/ / Mass and E n e r g y B a l a n c e
...
/ / side a
i f s t a t i c then
...
else
d e r (m[ 1 ] ) =  ( f 1 p a +f1m [ 1 ] ) A i n n e r + m s f l o w [ 1 ] ;
d e r ( mXi [ 1 , : ] ) = mXi flow [ 1 , : ]  mXi flow [ 2 , : ] + m s X i f l o w [ 1 , : ] ;
d e r (U [ 1 ] ) =  ( f 3 p a +f3m [ 1 ] ) A i n n e r + Q s f l o w [ 1 ] ;
end i f ;
...
/ / side b
i f s t a t i c then
...
else
d e r (m[ n ] ) =  ( f 1 p [ n 1] + f1m b ) A i n n e r + m s f l o w [ n ] ;
d e r ( mXi [ n , : ] ) = mXi flow [ n , : ]  mXi flow [ n + 1 , : ] + m s X i f l o w [ n , : ] ;
d e r (U[ n ] ) =  ( f 3 p [ n 1] + f3m b ) A i n n e r + Q s f l o w [ n ] ;
end i f ;
...
/ / Momentum B a l a n c e
i f lumped dp t he n
...
else
...
( i f dynamicTerm t h e n d e r ( m flow [ 1 ] )  l e n g t h / n / 2 e l s e 0 ) =
(f2m [ 1 ] + f 2 p a ) A i n n e r + F f [ 1 ] + ( I f l o w [1]  I f l o w [ 2 ] ) / 2 ;
...
( i f dynamicTerm t h e n d e r ( m flow [ n ] ) l e n g t h / n e l s e 0 ) =
( f2m b + f 2 p [ n 1]) A i n n e r + F f [ n ] + ( I f l o w [ n1] I f l o w [ n + 1 ] ) / 2 ;
...
end i f ;

Finally,
the numerical scheme is incorporated
The traveling waves at x = 1  1/2 are called f1p a, to DistributedPipeFV by extending from
f2p a, f3p a, f1m a, f2m a, f3m a and those Flow1D FV Log instead of Flow1D FV.
at x = n + 1/2 are called f1p b, f2p b, f3p b,
Listing 11: LDLR in DistributedPipeFV
f1m b, f2m b, f3m b. Their implementation of their
computation is in listing 5. Their incorporation into the model D i s t r i b u t e d P i p e F V  D i s t r i b u t e d p i p e model w i t h o p t i o n a l w a l l 
e x t e n d s Flow1D FV Log (
mass, momentum and energy balance is in listing 10.
Q s f l o w = h e a t . Q flow ,
Listing 9: Connectors in Roe approximation
...
// port a
( f 1 p a , f 2 p a , f 3 p a , f1m a , f2m a , f3m a ) =

The Modelica Association

ms flow= z e r o s ( n ) ,
m s X i f l o w = z e r o s ( n , Medium . nXi ) ) ;
...
end D i s t r i b u t e d P i p e F V ;

648

Modelica 2006, September 4th  5th

Shock Wave Modeling for Modelica.Fluid Library using Oscillation-free Logarithmic Reconstruction

6 Conclusions and Future Work

[11] Serna, Susana and Marquina, Antonio. Power ENO
methods: a fifth-order accurate weighted power ENO
We have shown how the logarithmic reconstruction and apmethod , J. Comput. Phys., 194:2, pp. 632658
propriate upwinding captures shock waves without spurious oscillations. The numerical performance of these FV [12] Winterbone, D., Pearson, R., Theory of engine manifold design, Professional Engineering Publishing,
schemes is not more complicated than the originals used in
2000
Modelica.Fluid library, in terms of implementation and are
more reliable. The CPU time observed was similar.
Some further investigations have to be done for time integration. The control of the Courant-Friedrichs-Lax number
is critical for an even better capture of shock waves. This
CFL number has to be controlled using special numerical
integration schemes. Special Runge-Kutta methods have
been developed and investigated, with successful results,
in [3].

References
[1] Elmqvist, H.,Tummescheit, H. and Otter,M. ObjectOriented Modeling of Thermo-Fluid Systems Proceedings of Modelica2003 conference. Linkoping, Sweden. pp.269
[2] Gallouet, T. and Herard, J.-M. and Seguin, N. Some
recent finite volume schemes to compute Euler equations using real gas EOS Internat. J. Numer. Methods
Fluids, 2002, pp. 10731138.
[3] Gottlieb S., Shu C. and Tadmor E. Strong stabilitypreserving high-order time discretization methods
SIAM Rev., 43, 2001:1 pp. 89-112.
[4] LeVeque, R., Numerical Methods for Conservation
Laws, Birkhauser-Verlag, 1990
[5] Marquina, Antonio. Local piecewise hyperbolic reconstruction of numerical fluxes for nonlinear scalar
conservation laws, SIAM J. Sci. Comput., 15:4, 1994,
pp. 892915
[6] Patankar, S. Numerical heat Transfer and Fluid Flow,
Series in Computational Methods in Mechanics and
Thermanl Sciences, Hemisphere Publishing Corporation 1980, USA.
[7] Artebrant, Robert and Schroll, H. Joachim. Limiterfree Third Order Logarithmic Reconstruction To appear.
[8] Artebrant, Robert and Schroll, Hans Joachim. Highresolution Riemann-solver-free methods for conservation laws Hyperbolic problems: theory, numerics, applications, Springer Verlag 2003, pp. 305314
[9] Schroll, H. Joachim. Relaxed high resolution schemes
for hyperbolic conservation laws , J. Sci. Comput.,
vol. 21:2, 2004, pp. 251279
[10] Hall, Oskar and Schroll, Hans Joachim and Svensson,
Fredrik. High-resolution simulation of inviscid flow in
general domains, Internat. J. Numer. Methods Fluids,
47:10-11, pp. 10611067

The Modelica Association

649

Modelica 2006, September 4th  5th

J.D. Lpez

The Modelica Association

650

Modelica 2006, September 4th  5th

Modelling of an Experimental Batch Plant with Modelica

Modeling of an Experimental Batch Plant with Modelica
Katja Poschlad1, Manuel A. Pereira Remelhe1, Martin Otter2
University of Dortmund, Process Control Laboratory (AST), Germany
2
German Aerospace Center (DLR), Institute of Robotics and Mechatronics, Germany
1

Abstract
A Modelica model of an experimental batch plant
installed at the Process Control Laboratory (AST) of
the University of Dortmund was developed. The
plant model consists of tanks, pipes, valves, pumps
and a control system to mix, buffer, heat, cool and
evaporate a mixture of water and sodium chloride.
Details of the most important components, of the
plant model and of the sequence control implemented with the Modelica StateGraph library are
discussed.

1

2

Description of the Batch Plant

The process under consideration is an evaporation
plant for a student lab at the Process Control Laboratory (AST) of the University of Dortmund that
evaporates a water sodium chloride mixture so that a
higher concentrated solution is produced [1]. The
task of the students is to learn how to program the
process control system. A picture of the batch plant
is shown in figure 1. The flow sheet diagram is
shown in figure 2.

Introduction

The Modelica_Fluid library [4] is a free library to be
included in the Modelica standard library. It is
supposed to be usable for several application areas.
Based on this library, a model of a laboratory batch
plant was developed with the following goals:
 to further develop the Modelica_Fluid library,
 to demonstrate the ability to model and simulate
batch plants with Modelica,
 to have a free, non-trivial, controlled plant model
to test and verify new modeling ideas and
algorithms,
 to use it as benchmark problem for hybrid control
systems.
To achieve these goals and in order to be able to implement the batch plant, new components have been
developed such as a much more generic tank model,
a model for cooling and heating tanks, an evaporator,
a condenser, and several simple components such as
a non-horizontal pipe and a controlled valve model.
Furthermore, a model for a medium system consisting of water and sodium chloride has been constructed. In this article an overview of this project is
given. More details can be found in [5].

Figure 1: Picture of AST batch plant.
The Modelica Association

651

Modelica 2006, September 4th  5th

K. Poschlad, M.A.P. Remelhe, M. Otter

Pure water from tank B1 and concentrated sodium
chloride solution from tank B2 are mixed in a mixing
tank B3. After buffering in tank B4 the mixture
flows to the evaporator B5. Here the water sodium
chloride mixture is evaporated until the desired concentration is reached. The steam is condensed in the
condenser K1 and cooled afterwards in the cooling
tank B6. The concentrated solution is also led to a
cooling tank B7. The cooled fluids are pumped back
to the charging vessels by the pumps P1 and P2. Between the tanks several valves are present that are
regulated by a central control system.

3

Main Fluid Components

The plant is modeled with components of the Modelica_Fluid library, such as pipe and pump models [4].
Several fluid flow components had to be extended or
newly developed and implemented, in order to model
and simulate this batch plant.
3.1

Generic tank model

A generic tank model was newly implemented that
describes a tank which is open to the environment at
fixed ambient pressure. Heat transfer to the environment and to the tank walls is neglected. The tank is

Figure 2: Flow sheet diagram of AST batch plant.
The Modelica Association

652

Modelica 2006, September 4th  5th

Modelling of an Experimental Batch Plant with Modelica

filled with a single or multiple-substance liquid, assumed to have uniform temperature and mass fractions.
The tanks in the AST batch plant, as well as most
batch plants in industry, have more than one
inlet/outlet at different heights. For this reason, the
Tank model has a vector of FluidPort connectors at
the top and at the bottom of the tank icon, as seen in
the screenshot of the tank icon in figure 3.

tom and side connectors. An example is shown in
figure 5 below.

Figure 5: Parameter menu to define tank ports

The tab Ambient and Initialization, see figure 4,
defines the ambient and initial conditions.
Due to the equation based nature of Modelica, the
implementation of the basic tank equations is
straightforward:

Figure 3: Screen shot of the tank icon

The fill level is dynamically visualized with the blue
square and also the actual value is given (in figure 3:
level = 0.403). This is implemented in the icon
annotations by function calls provided from the
Beta-release of the UserInteraction library.
The top connectors topPorts[:] are assumed to be
always above the overflow level. Therefore, fluid
from the tank can never flow into them.
The connectors ports[:] at the bottom of the icon are
either attached at the bottom or at the side of the tank
and fluid can flow in both directions.
For the top connectors it is sufficient to know the
number of connectors, since the pressure at the connectors is always identical to the ambient pressure.
The bottom and side connectors are defined by (hydraulic) inner diameters of the inlet/outlet pipe and at
which position portLevel the connector is present.
The parameter menu of the tank is shown in figure 4.

Figure 4: Tank parameter menu

Parameter levelMax defines the maximum level
until the tank overflows. Currently, this triggers just
an assert. Parameter portsData is an array of records that defines diameter and port level of the botThe Modelica Association

model tank
import IF = Modelica_Fluid.Interfaces;
replaceable package Medium =
Modelica.Media.Interfaces.PartialMedium;
IF.FluidPort_a topPorts[:](
redeclare package Medium = Medium);
IF.FluidPort_b ports[:](
redeclare package Medium = Medium);
Medium.BaseProperties medium(..);
...
// Total quantities
medium.p = p_ambient;
V
= area*level + V0 "Volume of fluid";
m
= V*medium.d "Mass of fluid";
mXi = m*medium.Xi "Mass of fluid comp.";
U
= m*medium.u "Internal energy";
// Mass balances
der(m) = sum(topPorts.m_flow) +
sum(ports.m_flow);
for i in 1:Medium.nXi loop
der(mXi[i]) = sum(topPorts.mXi_flow[i])
+ sum(ports.mXi_flow[i]);
end for;
// Energy balance
der(U) = sum(topPorts.H_flow) +
sum(ports.H_flow) 
p_ambient*der(V)
...
end tank;

If the fluid is incompressible, the term
p_ambient*der(V) is removed from the energy
balance. The reason is that otherwise unphysical
small temperature changes occur, if the tank level
changes. By removing this term, mechanical work is
neglected since it is also neglected in the medium
model.
As usual in the Modelica_Fluid library (for details,
see [4]), mass flow rate and enthalpy flow rate at the
ports are computed with the semiLinear(..) operator

653

Modelica 2006, September 4th  5th

K. Poschlad, M.A.P. Remelhe, M. Otter

in order to describe the potential bidirectional flow
of the fluid, e.g.,
ports[i].H_flow = semiLinear(
ports[i].m_flow, ports[i].h, medium.h);

Finally an equation for the port pressures has to be
provided. For the topPorts, this is simple, because
they are by definition always above the fluid level
and therefore topPorts.p[i] = p_ambient.
If a bottom or side port ports[i] is below the actual
fluid level, the Bernoulli equation can be used to
compute the port pressure (it is assumed that the tank
has a uniform pressure, temperature and density; the
Bernoulli equation holds also in cases where the density is varying with time, provided it has the same
value along the path under consideration):
If the fluid flows out of the tank, it is applied from
the tank level to the corresponding port. In this situation no significant pressure losses occur, with exception of a potential small one that depends on the
shape of the outlet pipe.
If the fluid flows into the tank, the whole kinetic energy is dissipated and does not lead to a pressure increase. Taken this into consideration the basic equation is given as:
ports[i].p = p_ambient +
(level - portLevel[i])*g*medium.d if ports[i].m_flow < 0 then
ports[i].m_flow^2/
(2*medium.d*area[i]^2)
else 0;

default solution operates in the following way when
the fluid level is below a port:
A large pressure loss factor (default: out = 105), is
used when the fluid flows out of the port and a small
pressure loss factor (default: in = 0.01) is used when
the fluid flows into the port. The quadratic characteristic around zero mass flow rate is regularized with
the Modelica_Fluid.Utilities.regSquare2(..) function,
in order to guarantee that at zero mass flow rate the
derivative of the pressure drop equation is neither
zero nor infinity. Note, when the level is above the
pipe port, we have out = 1 and in = 0. Numerically,
this means that the pressure drop equation of the
Bernoulli equation is a strict monotonically rising
characteristic so that a non-linear solver can handle
system equations that contain such an equation, if the
step size is selected small enough. Physically, this
means that a small leakage mass flow rate appears
that depends essentially on the value of out. All test
models work very reliably with this solution, see,
e.g., the models in Modelica_Fluid.Examples.Tanks.
Alternatively, a second solution can be selected that
is based on the following considerations:
If the level is below the port and fluid flows from the
port into the tank, the port pressure is identical to the
ambient pressure. If the fluid tries to flow out of the
tank, the mass flow rate is explicitly set to zero. The
solution is now to switch between these two equations using the following simple state machine:

p > pambient and m  0

Severe difficulties occur if the fluid level drops below an inlet/outlet port and therefore the corresponding pipe might no longer contain fluid or is filled
only partially with fluid. An example is shown in
figure 6:

m = 0

p = pambient

m < 0
This state machine is implemented in Modelica as:
m_flow_out = pre (m_flow_out) and
not port.p > p_ambient or
port.m_flow < -1e-6;
0 = if pre(m_flow_out) then m_flow
else p-p_ambient;

Figure 6: Inlet/outlet pipe over the tank levels

A detailed description of this situation would require
modeling the mixture of liquid and air and taking
into account that the mixture is not homogenous in a
pipe. Since this would complicate the modeling of
tanks, pipes and other components considerably, different approximate solutions have been evaluated
and verified by a suite of test models.
In the tank, there are now two solutions implemented
that can be selected in the Advanced menu. The
The Modelica Association

This solution has the advantage that no leakage flow
occurs and it works reliably in many situations. It
may fail in cases where a non-linear system of equations is no longer well defined, e.g., due to the equation m_flow =0 in one branch of the if statement (it
fails for example in the complicated situation of the
example
Modelica_Fluid.Examples.Tanks.Tanks
WithEmptyingPipe2).

654

Modelica 2006, September 4th  5th

Modelling of an Experimental Batch Plant with Modelica

A third solution variant would be to take the same
basic equations as above, but use a declarative formulation to switch between the two equations based
on a parameterized curve description (similarly to
the description of ideal electrical switches and to
friction in the Modelica standard library). This yields
the equations:
m_flow_out = s < 0;
port.m_flow = if m_flow_out then
else
port.pp_ambient = if m_flow_out then
else

0
s;
s
0;

Numerical experiments with the test cases show that
this third variant is not reliable and often fails. The
reason is that this formulation leads to non-linear
mixed systems of equations having both Real and
Boolean variables (m_flow_out) as unknowns and
the algorithms in Dymola seem to not work well in
such a situation. Contrary, the parameterized curve
descriptions of, e.g., electrical switches, in the Modelica standard library lead to linear mixed systems of
equations that are solved very well in Dymola.
We have now two sets of equations, one that is used
if the level is above the port level and one when it is
below. The question arises, how to switch between
these two equation sets. In Modelica one could use a
simple if clause:

In the tank model the hysteresis is formulated in the
following way, using the fraction k of the port diameter as hysteresis distance:
aboveLevel[i] =
level >= (portLevel[i] + diameter[i]/k)
or pre(aboveLevel[i]) and
level >= (portLevel[i] - diameter[i]/k)
levelAbovePort[i] = if aboveLevel[i] then
level - portLevel[i] else 0;

Example Modelica_Fluid.Examples.Tanks.OneTank
demonstrates the behavior. See the model setup in
figure 7. It consists of a tank where a constant mass
flow rate is entering at the top inlet and the fluid
flows out at the bottom port with a higher mass flow
rate.
ambient

flow Source
m_flow

defaults
g

T m
X

tank
level =
0.451
level_start =
0.9

pipe

if level > portLevel[i] then
// Bernoulli equation
else
// equation to handle empty port
end if;

ambient_fixed

Figure 7: Fluid flows faster out of the tank bottom outlet as it flows in by the top inlet leading to chattering.

A plot of the level is shown in figure 8. The chattering after about 50 s when the tank is empty is clearly
visible. Due to the introduced hysteresis, the chattering influences the simulation speed only marginally.
tank.level

1.0
0.8
0.6
[m]

since the relation will automatically trigger a state
event and therefore the switching is performed numerically in a reliable way.
However, in some situations, especially, when a tank
is empty and all fluid that flows into the tank is at
once flowing out at the bottom port, a numerical
solver will switch extremely often between the two
branches of the if clause, leading to a very small step
size so that the simulation is practically stopped, i.e.,
chattering occurs.
Chattering can always be reduced by introducing an
appropriate hysteresis. For a tank this is rather
straightforward and also makes physically sense,
because the exact time instant when to switch between the two equations is not well defined: A port
at the side of the tank has a certain diameter. When
the level is above the upper part of the pipe, there is
clearly fluid in the port. If the level is below the
lower part of the pipe, there is clearly no fluid in the
port, but in between the situation is not well defined.

0.4
0.2
0.0
-0.2

0

20

40

60

80

100

Figure 8: Level of tank from figure 7 over time.

The Modelica Association

655

Modelica 2006, September 4th  5th

K. Poschlad, M.A.P. Remelhe, M. Otter

3.2

Evaporator and condenser model

The experimental batch plant contains an evaporator
and a condenser, which have to be modeled. In order
to simplify the task, the following simplifications are
made:
 evaporator and condenser are modeled in one
component.
 condensed water is saturated at the end of the
condenser.
 no hold up in the condenser.
The evaporator/condenser model is an extension of
the generic tank model. A heat port is added to the
tank model which extends the heat balance. Furthermore a single fluid port is added which symbolizes
the end of the condenser. The icon of the model is
giving in 9.
TankWithEvaporator

level_start =
0.0009

Figure 9: Screen shot of evaporator/condenser model.

The energy balance of the generic tank is changed to
der(U) = sum(H_flow_bottomPorts) +
sum(H_flow_sidePorts) +
sum(H_flow_topPorts) +
heatPort.Q_flow +
Condensed.m_flow*hv 
p_ambient*der(V);

tank. To avoid the chattering the variable Q_up is
introduced, that gives the amount of energy used to
rise the temperature in the tank up to the boiling
point. These considerations lead to the following
formulation that avoids chattering:
if Q_up > heatPort.Q_flow then
m_con = 0;
else
m_con=-( heatPort.Q_flow -Q_up)/
(hv-hl+Xi(1)*(cp*dT_dX+dhl_dX));
end if;

3.3

Additionally, some simpler component models have
been implemented, especially:
 Model class Ambient to define default ambient
conditions (such as default ambient pressure) with
one inner ambient instance and access the data via
inner/outer from other elements.
 Model class ValveDiscrete to open and close a
simple valve model by a Boolean input signal.
 Model class WallFriction is renamed to WallFrictionAndGravity and an additional term p =
height_ab*d*g for the calculation of the pressure
drop due to gravity is added, given the relative
height height_ab of port_b over port_a.

4

with the enthalpy of the saturated vapor hv. Because
the assumption is made that the condensed water is
saturated, the energy from the cooling water in the
condenser is equal to the condensing energy. So only
the evaporator needs to be balanced.
The mass flow rate of the condensed water m_con for
a binary system is calculated by

Other Component Models

A medium model for mixture of
water and sodium-chloride

To model the batch plant it is necessary to construct
a model for the system water-sodium chloride. This
type of medium is not yet available in the Modelica.Media library and therefore a superclass for two
phase models of a mixture was introduced. The subclass relationship of this extension is displayed in
figure 10.
PartialMedium

m_con = if p > p_sat then 0 else
- heatPort.Q_flow /
(hv-hl+Xi(1)*(cp*dT_dX+dhl_dX));

PartialMixtureMedium

with the supplied heat heatPort.Q_flow, the specific enthalpy of the saturated liquid hl, the saturated vapour hv, the heat capacity cp, the partial derivative of the boiling temperature with respect to the
mass fraction dT_dX, and the partial derivative of the
specific enthalpy hl with respect to the mass fraction
dhl_dX. This calculation assumes that only water
evaporates and that all the energy is used for evaporation, once the saturation pressure p_sat is reached.
This can lead to chattering if cold fluid flows into the
The Modelica Association

PartialPureSubstance

PartialMixtureTwoPhaseMedium
...
WaterNaCl

...

WaterNaClOnePhase

Figure 10: Hierarchical structure of Modelica.Media

656

Modelica 2006, September 4th  5th

Modelling of an Experimental Batch Plant with Modelica

For the model of the batch plant the following fluid
characteristics are important and therefore included
in the medium model:
The density d, the specific enthalpy h and the dynamic viscosity eta are described as a function of
temperature T, pressure p, and composition Xi. To
model the evaporation, the saturation pressure p_sat
is needed which is a function of temperature T and
composition Xi.
For the implementation of the medium model the
interpolation of Chou [2] is used, as well as the data
for the dynamic viscosity of DECHEMA [3]. The
resulting terms are as follows:
Density  is calculated by
1
= F1 (T )  p  F2 (T )  p 2  F3 (T )
 (T , w, p )
+ w  F4 (T ) + w2  F5 (T )  w  p  F6 (T )
1
 w2  p  F7 (T )  w  p 2  F8 (T )
2
with the pressure p, the temperature T, the mass fraction of sodium chloride w and the terms F1  F8
which are provided in the paper of Chou [2].
The specific enthalpy h is calculated by
T

h = h0 +  c p  dT
T0

where the specific enthalpy h0 under standard condition is defined by

h0 ( w ) = E1  (1  w) + E2  w1,5
+ E3  w2 + E4  w2,5 + E5  w3

 (T , w ) = exp

(c

7

with the parameters

1
K3
1
c2 = 0.000765676 2
K
1
c3 = -0.297018665
K
c4 = -0.299730079
c5 = 2.065267182
c6 = 1.546491257
c7 = 31.57571595
For the vapor-liquid-equilibrium also the specific
enthalpy of the water vapor is needed. This is taken
from the medium model StandardWater.
c1 = -6.83241E-07

5

Controller

The controller that regulates the valves, the heating
and the cooling is modeled with the Modelica.StateGraph library, i.e., using basically a sequential function chart with additional equations.
The flow chart with steps and transitions is shown in
figure 11. The left triangle is an input connector containing all sensor signals whereas the triangle on the
right side is an output connector containing all actuator signals.
InitialStep1
Transitio...Step1Transitio...Step2Transitio...Step3Transitio...Step4Transitio...Step5Transitio...
st...
0
500
0
0
0
true

with the mass fraction w and the parameters E1  E5
[2]. The heat capacity cP is calculated by

LIS_301 ...

true

LIS_301 ...

T5_idle

LIS_501 ...

Step6Transitio...
300
true

c p ( x , T ) = C1 ( x )  C 2 ( x )  T + C3 ( x )  T 2

Step12Transitio...Step13Transitio...Step14
0
0

with the mole fraction of sodium chloride x, and the
terms C1  C3 [2].
To calculate the saturation pressure pS the following
equation is used:

TIS_602 ...

LIS_601 ...

Step7Transitio...Step8Transitio...Step9Transitio...Step10Transitio...Step11
0
0
0
0
T7_idle

LIS_501 ...

TIS_702 ...

LIS_701 ...

BooleanExpression1
time > 2500

ln ( ps ( x, T ) ) = (1  G1  x + G2  x 2 ) 

0
Transitio...

Figure 11: StateGraph model of the controller

G4


 G5  ln (T ) + G6  T 
 G3 
T


 x  ( G7  G8  x + G9 x 2 )

with parameters G1  G9 from [2].
The viscosity , which is needed for the calculation
of the pressure drop within a pipe, is calculated by

The Modelica Association

+ c1  T 3 + c2  T 2 + c3  T + c4  w3 + c5  w2 + c6  w )

In the first step the valve V8 is open so that liquid
flows from tank B1 to tank B3 till a minimum level
of 0,13 m is reached in B3 (Transition2). In step2
valve V9 opens till a desired concentration is measured in tank B3 (Transition3). Step3 leads the fluid
to tank B4 by opening valve V11 till the level in
tank B3 is below 0,01m. In Step4 T5_idle shows
whether tank B5 can be filled.

657

Modelica 2006, September 4th  5th

K. Poschlad, M.A.P. Remelhe, M. Otter
T5_idle =
LIS_501 < 0.01 and not V15.open;

If Step5 is active, valve V12 opens which leads the
liquid to tank B5 till the level T5_batch_level is
reached in tank B5. Step6 starts the heating in
tank B5 till the desired concentration is reached.
Since the evaporated water and the concentrated solution are split up, the controlling has to be split as
well which is realized by parallel branches. The upper branch is for the condensed water. Step12 starts
the cooling in tank B6 till the temperature is below
20C. After that the valves V20, V24, V25, V5 and
V6 have to be opened so that the pump P2 can pump
the water to tank B2. The lower branch controls the
concentrated solution. If tank B7 can be filled
(T7_idle = true), in Step8 the valve V15 is open till
the tank B5 is empty. Then the cooling in tank B7 is
switched on till the temperature is low enough. To
pump the liquid back to tank B1 with pump P1 the
valves V18, V23, V22, V1 and V3 have to be
opened. Once both branches are finished, and time >
2500 s, the cycle starts from the beginning.
The controller input connector sensors contains
all measured values such as the level of a tank, the
temperature in a tank or the concentration. The
measured values are named in analogue to their
names in the flow sheet of the batch plant (see figure
2). e.g.

horizontal pipe. The valves are modeled such that
they are either open or closed. They are controlled by
the Boolean input signal open to indicate if the valve
is open. Two models have been setup: One using the
StandardWater medium model, i.e., modeling only
two phase water flow and one model that uses the
medium model for the watersodium chloride mixture which has been discussed in chapter 4. The controller sketched in chapter 5 is used to model the
controller of the batch plant. The Modelica model of
the batch plant is shown in figure 12.

sensors.LIS_301 = B3.level;

The Boolean outputs are written in the output connector actuators. E.g.
actuator.V9 = Step2.active;

where Step2.active becomes true when Step1 has
been active and the transition Transistion2
LIS_301 >= 0.13;

becomes true.

6

Model of the Batch Plant

With the new components, the new media model, the
Modelica_Fluid and the Modelica.StateGraph library, a model of the batch plant can be assembled.
The tanks B1, B2, B3 and B4 are modeled with the
generic tank model described in chapter 3.1. The
tank B5 is modeled with the model for an evaporator/condenser as explained in chapter 3.2. The tanks
B6 and B7 are modeled by an extended generic tank
model that includes a heat port to model the cooling.
The pumps are modeled with the pump model from
the Modelica_Fluid library [4]. To model the pressure drops and the variable heights of the tanks the
pipes are modeled with the model of a non-

The Modelica Association

figure 12: Modelica model of the AST batch plant

Modeling this system by pressure drop components
only is not possible, since otherwise equations for
pressure, composition and specific enthalpy at connectors are missing when two or more connected
valves are closed. For this reason, appropriate volumes are introduced at connection points.
The connections from the central controller to the
sensors and actuators are not performed graphically
because too many signals would need to be connected. Instead, the connections are stated in the textual level with equations: Each valve gets its input if
it is open or closed from the controller by e.g.

658

Modelica 2006, September 4th  5th

Modelling of an Experimental Batch Plant with Modelica
V1.open = controller.sensors.V1;

and equally for the other valves. The variables for
heating and cooling are Real and not Boolean variables, so the equation looks different to those for the
valves. This is shown exemplarily for the heating in
tank 5:
HeatB5.Q_flow =
if controller.actuators.T5_Heater
then 20000 else 0;

7

due to the expansion of the fluid because of the heating. Once some water evaporates, the level of the
tank falls as the level of tank B6 (blue crossed line)
rises. As soon as the desired concentration is reached
the concentrated solution is flowing out of tank B5
into tank B7 (red crossed line) so the level of
tank B5 falls steeper. Because of the different diameters of the two tanks B5 and B7 these two curves
show different gradients. These results are as expected.

Simulation

It is possible to simulate the batch plant model with
the StandardWater medium model completely. Simulation results of the tank levels are shown in figure
13.
For the mixture of water and sodium chloride the
simulation stops when one of the pumps should start.
Till this unwanted ending the results are plausible
and discussed below.
In Figure 14 the fluid levels of all tanks are shown.
At the beginning, the level of e.g. tank B5 (black
line) stays constant till valve V12 opens. Till this
valve closes the level rises quite steeply due to the
inflow from tank B4 (magenta line), which shows
the same changing just in the opposite way. Afterwards the level in tank B5 keeps rising but slower

Figure 14: Tank levels of batch plant with water- sodium chloride mixture.

Figure 15 shows in the upper graph the temporal

Figure 13: Tank levels of batch plant with StandardWater.
The Modelica Association

659

Modelica 2006, September 4th  5th

K. Poschlad, M.A.P. Remelhe, M. Otter

process of the temperature in tank B5 and in the
lower image the supplied heat energy is present.
When the heat energy changes from 0 to 2000, the
temperature starts rising due to the heating. Once the
saturation temperature is reached the temperature
stays at the boiling temperature which rises only
slightly with rising concentration of salt. The supplied energy is then only used for evaporation but
not for heating up to higher temperatures than boiling point. This result confirms with reality.

mented. The batch plant model with the StandardWater medium model, as well as most of the developed components, have been included in version 1.0
Beta 1 of the Modelica_Fluid library and are therefore freely available in open source.
Besides getting the model to work for the whole
process duration with the water- sodium chloride
mixture, several improvements are desirable: The
roughly estimated plant parameters should be more
carefully identified and validated with measurement
data from the batch plant. The simulation results
should be compared with measurement data. The
controller should be improved to include exceptional
situations such as sensor and actuator failures, as
well as stop and shut-down operations. The controller implementation should be made more transparent,
which might require extensions to Modelica and tool
improvements. Furthermore, it is planned to provide
the plant as a benchmark system for tool integration
within WP3 of the Network of Excellence HYCON,
http://wp3.hycon.bci.uni-dortmund.de/1.0.html.
Acknowledgements
This work was partially funded by the Network of
Excellence HYCON, contract number FP6-IST511368.

Figure 15: Temporal process of the temperature and
the heat flow in tank B5

In Figure 16, the concentration of sodium chloride in
tank B3 (blue) and tank B5 (red) are shown over
time. For tank B3 the concentration changes when
pure water from tank B2 flows into this tank. Once
the fluid flow stops, the concentration remains constant. In tank B5 the concentration changes when
water is evaporating till the desired concentration is
reached and stays constant afterwards.

References
[1] Kowalewski S., Stursberg O., and Bauer N.
(2001): An Experimental Batch Plant as a Test Case
for the Verification of Hybrid Systems. European
Journal of Control 0:116.
[2] Chou J.C.S., and Rowe, A.M. (1969): Enthalpies
of aqueous sodium chloride solutions from 32 to
350F, Desalination 6: 105-115.
[3] Barthel J., Neueder R., and Meier R. (1998):
Electrolyte data collection Vol.XII Part 3c,
DECHEMA.

Figure 16: Temporal process of the concentration of
NaCl in tanks B3 and B5

All results show qualitatively the expected characteristics.

8

Conclusion and Outlook

The experimental batch plant at AST has been modeled in Modelica. Needed components not available
in the Modelica_Fluid library have been imple-

The Modelica Association

[4] Casella F., Otter M., Proells K., Richter C., and
Tummescheit H. (2006): The Modelica Fluid and
Media library for modeling of incompressible and
compressible thermo-fluid pipe networks. Proceedings of the Modelica2006 conference.
[5] Poschlad K. (2006): Modellierung einer Batchanlage mit Ablaufsteuerung in Modelica (2006). Diplomarbeit, Universitt Dortmund, Lehrstuhl fr Anlagensteuerungstechnik, Prof. Engell.

660

Modelica 2006, September 4th  5th

Integral Analysis for Thermo-Fluid Applications with Modelica

Integral Analysis for Thermo-Fluid Applications with Modelica
John J. Batteh
Ford Motor Company, Research and Advanced Engineering
jbatteh@ford.com

Abstract
Integral analysis is a common technique used in
the solution of many thermo-fluid problems. While
previous applications of integral analysis techniques
focused on the solution of boundary layer problems,
the techniques are applicable to a wider range of
analyses. This paper describes a formulation in
Modelica for integral analyses in thermo-fluid applications. Following a brief overview of integral
analysis, a sample Modelica implementation is discussed along with numerical simulations that illustrate the model usage in thermo-fluid applications.
Additional applications and usage scenarios of the
integral analysis formulation are briefly discussed.
Keywords: integral analysis; thermal; fluid

1

Introduction

Heat transfer and fluid flow phenomena are
governed by partial differential equations (PDEs) for
conservation of mass, momentum, and energy.
There are no general, closed-form solutions for these
coupled, nonlinear PDEs. While analytic solutions
are available for a small class of problems with special boundary conditions, more general analyses with
PDEs require numerical approaches, such as discretization and differencing, to resolve the spatial and
temporal dynamics.
In contrast to the PDE approach, lumped parameter modeling is formulated by conservation of
spatially-integrated quantities. Thus, the temporal
dynamics in the relevant conservation equations are
retained resulting in ordinary differential equations
(ODEs) for the conservation laws of a lumped control volume. It is still possible to obtain spatial dynamics with lumped parameter models by explicitly
introducing networks of control volumes. Lumped
parameter models typically are relatively easy to
formulate, computationally-efficient, and can use
standard ODE numerical solvers for simulation. The
Modelica Thermal library [1] is a lumped parameter formulation for heat transfer, and Modelica has
The Modelica Association

been used extensively in thermo-fluid applications
(c.f. [2]-[5]).
In applications where spatial resolution is important, a hybrid modeling approach that combines
aspects of the PDE and lumped parameter formulations may be appropriate. Integral analysis is one
such technique that has been used to solve a variety
of thermal and fluid problems [6]. The integral
analysis technique was first proposed by von Karman [7] and Polhausen [8] for boundary layer solutions and is sometimes referred to as the Von Karman-Polhausen method. This method has been used
extensively for boundary layer problems [9] and
provides reasonably accurate results when compared
with the exact solutions of the governing PDEs with
considerably less computational expense and complexity. Integral analysis typically involves the following steps:
 Casting the governing PDEs in integrated
form
 Choosing representative spatial profiles with
unknown coefficients for the appropriate
variables (usually temperature and velocity
in thermo-fluid problems)
 Solving for the coefficients as a function of
the relevant boundary conditions
This technique can be used for both transient and
steady state problems and provides the benefits of a
lumped parameter formulation with some additional
information regarding spatial distribution without
resorting to the solution of PDEs.
This paper describes the implementation of an
integral analysis formulation for thermo-fluid applications in Modelica. To illustrate the steps for deriving an integral analysis formulation, sample formulations for various geometries are shown along with
example problems illustrating the approach in numerical simulations for simple thermal and thermofluid problems with conduction and convection heat
transfer. More advanced applications of the resulting
models for combined heat and mass transfer simulations are illustrated via a model of heat exchanger
fouling.

661

Modelica 2006, September 4th  5th

J.J. Batteh

2

Integral Analysis Formulation

This section outlines an integral analysis formulation for thermal problems. It should be noted that
the implementations are geometry-specific due to the
functional form of the spatial distribution and that
different basis functions could be chosen for a given
geometry. The implementations described in this
section are meant to serve as sample formulations to
illustrate the use of integral analysis techniques in
Modelica models and should not be considered universal, de facto implementations.
2.1

(a) Single capacitance

(b) Dual capacitance
Figure 2. Lumped formulations, planar wall

Planar Geometry

As mentioned previously, integral analysis formulations are most relevant for simulations where
additional information regarding spatial distribution
is important. Consider the schematic in Figure 1
showing a wall with planar geometry.
The wall
could be modeled in Modelica with the lumped parameter formulations shown in Figure 2. The two
representations reflect different modeling philosophies regarding the placement of the capacitance and
flow elements. Each formulation yields a lumped
estimate for the temperature distribution in the wall
via the mass-averaged temperature computed in the
capacitance conservation of energy. Depending on
the boundary conditions, geometry and properties of
the wall, transient nature of the boundary conditions,
and number of capacitances used, the lumped parameter formulation may give a good representation
of the actual temperature distribution in the wall. In
lumped parameter formulations, higher fidelity representations of the temperature distribution can be
realized by networks of lumped capacitances. Rather
than adding additional capacitances to provide a better representation of the spatial temperature distribution, an integral analysis formulation can be used.
This section gives an overview of the derivation of
an integral analysis formulation for planar geometry.
qa

Ta

qb


Tb

z
Figure 1. Planar geometry schematic
The Modelica Association

Again consider the geometry in Figure 1. The
first step in the derivation is to assume the form of
the temperature profile. Assuming the distribution is
one dimensional in the z direction, consider the following distribution:

T ( z , t ) = Tss ( z , t ) + T1 ( z , t )

(1)

where Tss is the steady-state temperature distribution
for a conductive planar wall and T1 is some assumed
temperature deviation:

z
[Tb (t )  Ta (t )]
(2)
 (t )
T1 ( z , t ) = a 0 (t ) + a1 (t )z + a 2 (t )z 2 + a 3 (t )z 3 (3)
Tss ( z , t ) = Ta (t ) +

Note that a polynomial form has been assumed for
the temperature deviation but that other forms are
possible.
The next step in the derivation is to determine
the unknown coefficients in the temperature profile
in terms of the appropriate boundary conditions.
Applying the temperature and heat flow boundary
conditions at z=0 and z=(t) and using the properties
of the steady-state solution yields:

T1 ( z, t ) =

q a (t )  qb (t )  z 2
z3 


+
 2 (t )  (t )2 
kA



(4)

Consistent with the initial construction of the temperature distribution, there is no contribution from
the T1 term at steady state (i.e. when qa=qb).
Though the derivation is in terms of the boundary temperatures, consider a typical interface problem where one of the boundary temperatures is unknown. By combining the integral formulation
above with an overall energy balance for the volume,
the boundary temperature can be determined in addition to the mean temperature. The overall energy
balance for the volume based on the mass-averaged
mean temperature Tm yields:

662

Modelica 2006, September 4th  5th

Integral Analysis for Thermo-Fluid Applications with Modelica

dU
= qb (t )  q a (t )
dt

(5)

U = mcv Tm

(6)

where
An equation for Tm can be derived from the definition of a mass-averaged temperature:


A (t )Tm (t ) = A T ( z, t )dz
0

(7)
(a) Diagram

Using the assumed temperature distribution and performing the integration leads to the following equation:

Tm (t ) =

Ta (t ) + Tb (t ) q a (t )  qb (t )  (t )
+
2
kA
12

(8)

The first term in the equation above is the mean temperature from the steady-state profile while the second term is the transient deviation from steady-state.
Note that the deviation term contributes only in nonsteady situations and becomes more important when
the thickness of the volume increases and the thermal
conductivity and surface area decrease, essentially
the conditions which contribute to a measurable temperature gradient across the wall.
Figure 3 shows a Modelica implementation of a
planar volume based on the integral analysis derivation presented above. The model uses the standard
thermal connectors from the Modelica Thermal
library. The integral formulation differs somewhat
from the generic HeatCapacitor model in the
Modelica Thermal library in that the model is not
a volume element in the standard sense. The HeatCapacitor model is a single port volume model
that is connected to heat flow elements and provides
a temperature on its lone connector from its internal
conservation of energy equation. The multiport integral planar volume is a combined volume and flow
element since it contains a conservation equation that
determines a connector temperature similar to a volume element in addition to providing a connector
heat flow like a heat flow element based on the heat
conduction through the volume that follows from the
assumed temperature distribution. A conceptual representation of the integral analysis control volume is
shown in Figure 3c to illustrate visually the directionality of this component. This schematic shows
how the planar volume from the integral formulation
is connected to a flow element on one side (connector b) and a capacitance element on the other (connector a). Because of its directional nature, it is important to connect the integral component carefully
to surrounding components to ensure a consistent,
complete model.

The Modelica Association

(b) Code excerpt

(c) Conceptual representation
Figure 3. Modelica implementation of planar volume
with integral analysis formulation

2.2

Cylindrical Geometry

The general approach used in the previous section can be applied to other geometries given appropriate choices for the temperature distributions. For
cylindrical geometry with a one-dimensional temperature distribution in the radial direction, assume
the following temperature distribution:

T (r , t ) = Tss (r , t ) + T1 (r , t )

(9)

where the steady state temperature distribution is
given by:

Tss ( z, t ) = Ta (t ) +

[Tb (t )  Ta (t )] ln r 
r
ln 1
 r2





r 
 2

(10)

The choice of the deviation profile is again user and
problem specific but could be assumed to have the
same form as Eq. (3) in the radial direction. The final form of the integral analysis for cylindrical coordinates follows from the same process outlined for
planar geometry: apply BCs to determine the coefficients in the deviation profile, use lumped conservation of energy in conjunction with mass-averaged

663

Modelica 2006, September 4th  5th

J.J. Batteh

temperature distribution, etc. The details of the derivation are omitted as they are similar to that in the
planar analysis but with some slightly messier algebra due to the radial geometry.
Comments

The integral analysis formulation results in an
approximate method for solution of the geometryspecific PDEs. Integral conservation of energy is
maintained as in the lumped parameter formulation.
However, some pieces of information used in the
solution of the original PDEs are no longer applied,
such as the slope boundary conditions at the interfaces, since the temperature distribution is assumed.
While this method allows the modeler additional
flexibility in terms of the temperature distributions
and the specifics of the applications of the integral
analysis principles, some care is required to ensure
that the physics of the problem are consistent with
the assumed distributions and the resulting formulation. The assumption of a temperature distribution
throughout the layer leads to some practical limitations on model usage. For example, simulations
dominated by an evolving thermal penetration depth
would require reformulation since the temperature
distribution does not extend through the thickness of
the material and thus would not satisfy the assumed
temperature distribution. The thermal penetration
depth t scales based on the following equation:

t ~  t

(11)

where  is the thermal diffusivity of the material.
Setting t= yields a relationship between the geometry, material properties, and simulation time
scale from which the suitability of an integral analysis formulation can be evaluated. In general, the integral analysis formulation becomes increasingly
applicable as the material thickness decreases, thermal diffusivity increases, and relevant time scale
over which the boundary conditions change increases
relative to the penetration depth time scale.

3

Figure 4. Planar wall, fixed heat flow and temperature
boundary conditions

Simulation Results

Having developed some sample integral analysis formulations, this section provides some numerical examples to exercise the formulations. All simulations are performed with Dymola [10].
3.1

299
298
297
296
295
294
293
292
Tfixed
ss.Tm

291

iron.Tm
ss.Tb

iron.Tb

290

Planar Wall

0

Consider the simple test shown in Figure 4 for a
planar wall of constant thickness. The wall is subThe Modelica Association

300

Temperature [K]

2.3

jected to a constant temperature on one side and a
constant heat flow on the other side. This test, while
extremely simple, provides a nice example to illustrate the utility of the integral analysis formulation.
Figure 5 shows the mean and boundary temperatures
from simulations of a constant thickness wall with
properties of iron and stainless steel [6] at a fixed
boundary temperature of 293K. Note that the temperatures in the iron simulation are only slightly
higher than the prescribed wall temperature due to
the high thermal conductivity of iron. Since the
thermal conductivity of stainless steel is about 1/5th
that of iron, there is a larger temperature difference
across the wall. In addition, the iron wall reaches
steady state much more quickly than the stainless
steel wall. While the deviation between the mean
and boundary temperatures is modest in these sample
simulations, the boundary temperature becomes increasingly elevated relative to the mean temperature
as the material becomes less conductive. To accurately resolve these potentially-large temperature
differences across the wall with a lumped parameter
formulation, a network of lumped volumes would be
required. Similar behavior is achieved with only a
single capacitance using the integral analysis formulation. While this simple example is interesting, applications where the heat and/or mass flow are sensitive to the boundary temperature showcase more
clearly the utility of the integral analysis formulation
and will be presented in the next sections.

664

2000

4000

6000

8000

10000

Time [s]

Figure 5. Simulation results, iron and stainless steel

Modelica 2006, September 4th  5th

Integral Analysis for Thermo-Fluid Applications with Modelica

Planar Wall with Convection

450

Figure 6 is a simple test similar to that in Figure
4 but with convection heat transfer calculated from
the wall boundary temperature. The planar wall,
modeled as stainless steel [6], is again subjected to a
fixed temperature on one side. The other side is exposed to airflow at a constant velocity with a dynamic temperature given by the ExpSine component in the Modelica Blocks library [1].

Fluid Temperature [K]

3.2

430
410
390
370
350
306

0

2000

4000

6000

8000

10000

Time [s]

interface

304

Temperature [K]

302

Figure 6. Planar wall with transient convection

300

mean

298
Fixed
Mean
Interface

296
294

fixed

292
290
0

2000

4000

6000

8000

10000

Time [s]

Figure 7. Simulation results, frequency=0.001Hz

Fluid Temperature [K]

450
430
410
390
370
350
306

0

2000

4000

6000

8000

10000

Time [s]

interface

304
302
Temperature [K]

Figure 7-Figure 8 show results from the transient convection simulations with varying frequency
for the prescribed fluid temperature fluctuations,
0.001 and 0.01 Hz respectively. The top plot in each
figure shows the input fluid temperature, and the bottom plot gives the fixed, mean, and interface metal
temperatures from the integral analysis. As the wall
is heated by the warmer fluid, a temperature gradient
is again established across the wall. Unlike the fixed
heat flow simulations in the previous section, the
convective heat flow boundary condition is calculated from the interface temperature and, along with
the fluctuating fluid temperature, adds additional
transient dynamics. It is interesting to note the way
in which the fluid temperature fluctuations are reflected in the mean and interface temperatures.
While the mean temperature also exhibits some
characteristics of the input temperature oscillations,
they are damped out by the capacitance of the wall.
The interface temperature, however, is significantly
more oscillatory, as is to be expected. As the frequency of the oscillations increases in Figure 8, the
mean temperature hardly reflects any of the oscillations despite the high frequency oscillations in the
interface temperature. By introducing some notion
of the temperature distribution within the volume,
the integral analysis formulation provides a mechanism for a higher fidelity representation of both the
spatial distribution in the volume (i.e. the difference
between the mean and interface temperatures) and
the differences in transient response (i.e. fast response at the interface and damped response in the
mean).

300

mean

298

Fixed
Mean
Interface

296
294

fixed

292
290
0

2000

4000

6000

8000

10000

Time [s]

Figure 8. Simulation results, frequency=0.01Hz
The Modelica Association

665

Modelica 2006, September 4th  5th

J.J. Batteh

While the previous examples contained only
heat transfer physics for a layer of constant thickness, the original derivation allowed for dynamic
geometry resulting from heat and mass transfer. The
example in this section simulates the fouling layer
build-up and subsequent thermal degradation common in industrial heat exchangers. Since the fouling
caused by deposition of particulates and condensation of vapor phase materials is highly-sensitive to
the interface temperature between the fouling layer
and the gas [11], an integral analysis formulation is
used to represent the dynamics of the fouling layer.
Figure 9 shows a simple test model for simulating the effects of a deposition layer in a pipe. The
inner pipe wall is assumed to be at a constant temperature, and the deposition layer is modeled using
the cylindrical integral analysis formulation outlined
in Section 2.2. The model consists of standard convective heat transfer based on the Sieder-Tate Nusselt number correlation for pipes [6] and a boundary
layer formulation for thermally-induced particulate
mass transfer [12]. Material properties for air are
used for the flowing medium in the pipe, and the
deposition layer is assumed to have the material
properties of asphalt [6].

Note the difference between the mean layer
temperature and the interface temperature. Since the
flowing medium interacts with the layer at the interface temperature for both the heat and mass transfer
dynamics, it is important to capture this elevated interface temperature relative to the mean. Furthermore, since the elevated interface temperature and
subsequent thermal degradation result from the dynamic layer thickness, it is also important to capture
the transient nature of the layer growth. The integral
analysis formulation allows a higher fidelity representation of the spatial temperature distribution in
the layer without the need for a network of heat
transfer components to represent the layer.
510
490

Gas Inlet

Gas Inlet
Gas Exit
layer interface
layer mean
pipe wall

470
450

Gas Exit

430

interface

410

mean

390
370

wall

350
1.0

0

50

100

150

200

250

Time [hr]
effectiveness
delta

0.9
0.8

300
0.30

0.24

Effectiveness [-]

0.7

Figure 9. Pipe deposition layer with heat and mass
transfer

Figure 10 shows simulation results for the pipe
deposition model. The model was simulated with a
fixed mass flow rate and inlet gas temperature. The
simulations show the slow degradation in heat transfer performance as the deposition layer grows, thus
providing an additional thermal resistance between
the hot gas and the cool pipe wall. This degradation
is evidenced by the increasing gas exit temperatures
and alternatively by the decreasing effectiveness ,
defined in the following way for constant mass flow
conditions:

=

Tgas ,in  Tgas ,out
Tgas ,in  Twall

The Modelica Association

(12)

0.6

0.18

0.5
0.4

0.12

0.3
0.2

0.06

Layer Thickness [mm]

Simulation with Mass/Heat Transfer

Temperature [K]

3.3

0.1
0.0
0

50

100

150

200

250

0.00
300

Time [hr]

Figure 10. Pipe deposition simulation results

4

Conclusions

This paper illustrates an extension of the application of the Modelica language to thermo-fluid
problems using an integral analysis approach. The
sample formulations presented here give details regarding the development and implementation of the
integral analysis approach in Modelica for different

666

Modelica 2006, September 4th  5th

Integral Analysis for Thermo-Fluid Applications with Modelica

geometries. This approach allows the computational
benefits of a lumped parameter formulation with additional details regarding the temperature distribution
across the volume. In particular, the integral analysis
formulation is especially useful for problems with
interface dynamics, particularly those which require
accurate resolution of the interface conditions to obtain the appropriate dynamic physical response.

Acknowledgements
The author gratefully acknowledges Chuck Newman
for his valuable discussions regarding this work.

References
[1]
[2]

[3]

[4]

[5]

[6]

[7]

Modelica Association, 2006, "Modelica Language Specifications (Version 2.2.1)",
http://www.modelica.org
Elmqvist, H., Tummescheit, H., and Otter,
M., 2003, "Object-Oriented Modeling of
Thermo-Fluid Systems", Proceedings of the
3rd International Modelica Conference, p.
269-286,
http://www.modelica.org/events/Conference2
003/papers/h40_Elmqvist_fluid.pdf
Newman, C., Batteh, J., and Tiller, M., 2002,
"Spark-Ignited-Engine Cycle Simulation in
Modelica", 2nd International Modelica Conference
Proceedings,
pp.
133-142,
http://modelica.org/Conference2002/papers/p
17_Newman.pdf
Batteh, J., Tiller, M., and Newman, C., 2003,
"Simulation of Engine Systems in Modelica",
3rd International Modelica Conference Proceedings,
pp.
139-148,
http://www.modelica.org/events/Conference2
003/papers/h34_Batteh.pdf
Steinmann, W., Buschle, J., 2005, "Analysis
of thermal storage systems using Modelica",
Proceedings of 4th International Modelica
Conference, pp. 331-337,
http://www.modelica.org/events/Conference2
005/online_proceedings/Session4/Session4b1
.pdf
Incropera, F.P. and DeWitt, D.P., 1990, Fundamentals of Heat and Mass Transfer, 3rd
Edition. John Wiley & Sons.
Von Karman, T., 1921, "Uber Laminar Und
Turbulente Reibung", Z. Agnew. Math.
Mech., vol. 1, pp. 233-252.

The Modelica Association

667

[8]

Pohlhausen, K., 1921, "Zur Naherungsweise
Integration der Differential Gleichung der
Laminaren Reibungschicht", Z. Agnew.
Math. Mech., vol. 1, pp. 252-268.
[9] Schlichting, H., 1968, Boundary Layer Theory, 6th Edition. McGraw-Hill.
[10] Dymola.
Dynasim AB, Lund, Sweden,
http://www.dynasim.com.
[11] Kittelson, D.B., Ambs, J.L, and Hadjkacem,
H., 1990, "Particulate Emissions from Diesel
Engines: Influence of In-Cylinder Surface",
SAE-900645, Society of Automotive Engineers.
[12] Suhre, B.R. and Foster, D.E., 1992, "InCylinder Soot Deposition Rates Due to
Thermophoresis in a Direct Injection Diesel
Engine", SAE-921629, Society of Automotive Engineers.

Modelica 2006, September 4th  5th

J.J. Batteh

The Modelica Association

668

Modelica 2006, September 4th  5th

Session 6c

Session 6c
Free and Commercial Libraries 2

The Modelica Association

669

Modelica 2006, September 4th  5th

Session 6c

The Modelica Association

670

Modelica 2006, September 4th  5th

Integration of CATIA with Modelica

Integration of CATIA with Modelica
Partha Bhattacharya Nick-Ange Suyam Welakwe* Ranga Makanaboyina
Adithya Chimalakonda
DaimlerChrysler Research and Technology India
*DaimlerChrysler Research and Technology Germany
Partha.Bhattacharya@DaimlerChrysler.com Nick-Ange.Suyam_Welakwe@DaimlerChrysler.com
Ranga.Makanaboyina@DaimlerChrysler.com Aditya.ch@DaimlerChrysler.com

Abstract
Virtual Prototyping is becoming increasingly
popular in the automotive and other industries, especially in the context of concurrent engineering processes. CATIA [1] is a powerful CAD tool for modeling and Modelica based tools are increasingly becoming popular for analysis using multibody simulation. In this work, we developed an interface that
integrates Modelica into CATIA to facilitate product
data information exchange. This enables automatic
extraction of pertinent information from CAD representation of the physical components to Modelica
models for multibody simulation. The integration
will reduce the design cycle significantly by providing immediate feedback to the designer with minimal
intervention of simulation and modeling specialists.
We studied three different implementation approaches for integration. The results are presented
for a mechanism that opens the car-hood.
Keywords: Multibody Simulation, Concurrent Engineering, Virtual Prototyping, Interface Tools, Joints,
CATIA, Integration, Modelica.

1

Introduction

Two important phases in Virtual Prototyping, an integrated part of the modern product development
process, are design and analysis. While design deals
with form, analysis deals with behavior of the system
components. Form can be represented by CAD models (Design) and behavioral models, at different accuracy levels, can be simulated (Analysis) to compare with the product function specifications. Multibody Simulation or motion analysis is an important
part of the analysis phase. Generally, design and
analysis, are done independently. Designer and Dynamic simulation expert are different persons. But
Simulation experts and designers need to exchange
data in order to validate their models. This data exchange is made most of the time manually. There is
no guarantee that the exchanged data are right and up
The Modelica Association

to date. So tools are needed to exchange information
between these two processes so that designers can
take a holistic design approach [2] [3].
The main benefit of the interface we developed is
to provide a user friendly framework to support the
concurrent engineering process between dynamic
simulation experts and designers taking some specific organizational process constraints into account.
With these constraints in place, the interface contributes significantly to the improvement of the data exchange process. Here the goal is not to provide an
integrated multi body simulation environment in
CATIA but to keep CATIA and Modelica separate
and just enable the data exchange between CATIA
models and corresponding Modelica models.
In fact, most of the commercial MBS softwares
provide interface to standard CAD softwares. For
example SIMPACK [4] has an interface, CATSIM,
to CATIA. SimMechanics [5] provides translator
from SolidWorks models, SimDesigner [6] interface
enable multi body simulation within CATIA V5.
Modelica is becoming increasingly popular in the
automotive industry, at least because of object oriented multidomain modeling and simulation capabilities. A typical application area of Modelica is in
modeling of mechatronic systems. In these systems,
multi body simulation plays a significant role. The
objective of making an interface between CATIA
and Modelica is to provide a process and user
friendly framework for the exchange of kinematics
data.
People have already integrated CAD data into
Modelica simulation [7]. MathModelica, one of the
popular Modelica tool, offers interface to SolidWorks [8]. Our work is different from the past works
in that we are not proposing to automatically translate a CAD model directly which might not be very
suitable for MBS, though its one of the options discussed in here (Option I), but we are proposing a
semi-automatic data extraction appropriate for MBS.

671

Modelica 2006, September 4th  5th

P. Bhattacharya, N. Suyam Welakwe, R. Makanaboyina, A. Chimalakonda

can be directly translated to Modelica. Because,
for example, a revolute joint in CATIA can be
replaced with a revolute joint in Modelica. This
seems to be an easy and obvious choice. But
A MBS model in Modelica mostly consists of rigid
DMU Kinematic Simulator is suitable for kinebodies connected by different kind of joints. These
matic analysis only. In practice, using the same
bodies interact via Joints and respond to different
kinematic topology for dynamic analysis is not
forces i.e. gravity. Joints define the degrees of freealways possible.
dom between bodies. To define Bodies, three sets of
II. Development of an add-on to the CATIA ininformation are required. They are,
terface to define the MBS structure. To overA. Physical Information: Mass, centre of mass and
come the above drawbacks and to replace the
inertia tensor of the bodies. CATIA models of
function of DMU Kinematic Simulator, we can
the corresponding bodies store mass and inertia
develop an add-on to the CATIA interface to deof the assembly or individual parts which can be
fine the MBS structure where a modeler can deextracted automatically.
fine a MBS structure using connection diagram
B. Geometrical Information: Modelica uses Mein a visual editor (like Dymola [9]) which supchanical Pin or frame_a/b which is nothing but
ports drag and drop. This is done in Dymola
the connecting point of the body. Getting this
model editor. Another example of this kind of
information automatically is challenging. Fixing
editor is DynaFlexPro from Maple [10]. This is
a point to define frame_a/b in a 3-D body is difgoing to be heavy on the CAD designer who
ficult. A CAD designer can define points,
might not have the MBS fundamentals. The best
frame_a/b on CATIA parts which can be chosen
thing will be to see the mechanism already deinteractively. The center of gravity position vecfined and just relate it to the CATIA model
tor is also required and can be extracted autowhich leads us to the next option.
matically from the CAD model.
III. Existing Modelica model integrated to its
C. Visualization information: This data is required
CATIA counterpart. The MBS modeler makes
for animation. We use BodyShape to represent a
a Modelica MBS skeleton/structure. He also sits
body in Modelica. This body can be represented
with the CATIA designer to define a configuraby different available simple shapes or it can retion / mapping file. This mapping file related
fer to CAD data for visual representation. This
BodyShapes and bodies to CATParts or CATdata can either be in DXF format or STL format.
Products. It also has information about the joints
Here we convert CATIA models (CATProduct,
in terms of lines, planes and points. If additional
CATPart, PartBody) to STL files and use the
points are required CATIA designer defines
same in Modelica.
them. With the mapping file and the CATIA
Apart from the bodies, Joints can be defined
model, automatic extraction of appropriate data
through a set of points/lines/planes depending on the
takes place. The Modelica skeleton gets filled
nature of joints which will be defined by the CAD
with information. Here for the first time we are
designers
in
CATIA
components.
These
talking about starting the flow from Modelica.
points/lines/planes can be chosen by the user and
This definitely lacks the flexibility, user interacextracted to Modelica.
tion on the CATIA side and most importantly
visibility.
Component characteristics can be optionally required to simulate some special physical effects. But
these characteristics are not usually stored in the
CAD model and therefore don't need to be extracted. 4 Implementation Concept

2

3

CATIA Data required for MBS
simulation in Modelica

Implementation Approaches

We have three possible scenarios for integration.
I. Translation of CATIA V5 defined Multi-Body
structure to Modelica model. CATIA offers a
workbench called DMU Kinematic Simulator in
which a mechanism can be defined with different
kind of joints. A MBS structure thus constructed
The Modelica Association

Taking into consideration all the advantages and the
drawbacks of the above approaches, we have converged to the final option which we demonstrate with
a scenario here.
1. To simulate a mechanism, a kinematic skeleton
is constructed with Modelica. The geometric
models of the components in this skeleton exist
in CATIA.

672

Modelica 2006, September 4th  5th

Integration of CATIA with Modelica

2. The CAD model of the components is opened in
CATIA. A toolbar is created with CATIA Product Design workbench. Using one of the buttons
in this the user imports the corresponding Modelica file to CATIA workspace.
3. Using another button the user invokes a graphic
user interface (GUI) where all the details of the
Modelica components (BodyShape and Joints)
are shown.
4. User selects the appropriate parts from CATIA
interface to relate it to the proper objects in the
diagram.
5. All the data are then extracted and assigned to
proper objects. The extracted data is exported
back to Modelica script.

Figure 2: Kinematic skeleton
5.2

Convert the skeleton to Modelica model

Figure 3 shows the corresponding model of the kinematic skeleton in the Dymola editor.

Figure 1: Process flow for the Implementation
Figure 1 gives an overview about the Steps described
above.
Figure 3: Corresponding Modelica model

5

Implementation Results

5.3

CATIA allows a set of C++ Application Programming Interfaces (API) as part of Component Application Architecture (CAA) to access functionalities
of CATIA models. We have chosen CAA as our development platform. To implement the solution we
need core CATIA functionalities with graphical user
interface programming. CAA has ability to program
graphic interfaces but its limited. So we used CAA
for accessing CATIAs core functionalities. The implementation consists of the following steps:
5.1

Import Modelica model to CATIA workspace

Our algorithm scans the Modelica script and picks up
the relevant components like BodyShape, different
Joints etc. and lists them.
5.4

Extract the CATIA data

The next step involves opening the corresponding
CATIA model and starting data extraction (figure 4).

Design the kinematic skeleton

The product is decomposed into body shapes P1, P2,
P3 and P4, and prismatic joint PJ1, revolute joints
RJ1, RJ2 and RJ3 as shown in figure 2.

The Modelica Association

673

Modelica 2006, September 4th  5th

P. Bhattacharya, N. Suyam Welakwe, R. Makanaboyina, A. Chimalakonda

Figure 6: Interface for Revolute Joint
5.5
Figure 4: Related CATIA Model
5.4.1 For BodyShapes:
When any BodyShape component is selected in
the GUI user can specify a CATPart or a CATProduct to relate it to the BodyShape component. For
any BodyShape component we need mass, inertia
tensor and centre of mass information. This information is already stored in CATIA. We need to specify
the shape information in terms of frame a/b. User can
choose points on the component to specify this information (figure 5). Visualization information is
exported by converting the CATPart/CATProduct
into an STL file.

Update Modelica model

Figure 7 is the Modelica script before the data export. Figure 8 is the Modelica script after the extracted data is appended to the Modelica script for
the corresponding components. It may be noted that
the mass, centre of mass and inertia tensor values,
and geometrical shape values are updated in the
Modelica script.

Figure 7: Modelica Script of kinematic skeleton

Figure 5: Interface for BodyShape
5.4.2 For Joints:
When a joint is selected in the GUI, details of its
connecting frames are shown. User can now choose
the required data by choosing the corresponding
geometric element in CATIA as shown in figure 6.
For example, when a revolute joint is selected in the
GUI, details of its connecting frames are shown (figure 6). User can now choose the axis of revolution
by choosing a line on the components.

The Modelica Association

Figure 8: Updated Modelica Script after Data Export

674

Modelica 2006, September 4th  5th

Integration of CATIA with Modelica

6

Conclusion

We have presented an integrated interface between
CATIA V5 and Modelica. The interface supports the
exchange of kinematics data between CATIA model
and Modelica model. It provides further a framework
to support the concurrent engineering process between dynamic simulation experts and designers taking following organizational and OEM process constraints into account:
 Designer and dynamic simulation expert are different roles
 Designer only works with CATIA and the simulation expert with Dymola
 Design process is the master.
The use of the interface requires minimal process
changes from the user for data exchange and thus
guarantees high process flexibility.

References
[1]
[2]

www.3ds.com
R. Sinha, C.Paredis and P.Khosla, Integration of mechanical cad and behavioral modeling, Proceedings of the IEEE/ACM Workshop on Behavioral Modeling and Simulation, 2000.
[3] V. Engelson, Tools for design, interactive
simulation and visualization for dynamic
analysis, Linkoping Electronic Articles in
Computer and Information Science, 5 (2000).
[4] http://www.simpack.com
[5] http://www.mathworks.com.
[6] http://www.mscsoftware.com
[7] P. Bunus, V. Engelson, and P. Fritzson, Mechanical models translation, simulation and
visualization in Modelica, in Modelica
Workshop 2000 Proceedings, pp. 199208.
[8] http://www.mathcore.com.
[9] http://www.Dynasim.se
[10] http://www.maplesoft.com/

The Modelica Association

675

Modelica 2006, September 4th  5th

P. Bhattacharya, N. Suyam Welakwe, R. Makanaboyina, A. Chimalakonda

The Modelica Association

676

Modelica 2006, September 4th  5th

A Modelica Library for Simulation of Household Refrigeration Appliances Features and Experiences

A Modelica Library
for Simulation of Household Refrigeration Appliances
Features and Experiences
Carsten Heinrich, Kai Berthold
Institute for Air Conditioning and Refrigeration, Department Refrigeration and Cryogenics
Bertolt-Brecht-Allee 20, 01309 Dresden, Germany

Abstract

sumption of the domestic sector are used by refrigerators and freezers. Achieving a better energy efficiency
will contribute to a decrease of the CO2 -emmisions in
mid term.
Most of the household refrigerators and freezers operates with on-off-control of the compressor. A variable
speed compressor can achieve higher energy efficiency
(up to 25% less energy consumption). But still nowadays variable speed compressors requires an higher investment from the consumer side.
Due to the on-off-control, the refrigeration cycle and
the cabinet show a distinct dynamic behaviour most of
the time. Therefore, the use of static design and simulation tools will not lead into optimal results. Particularly, some effects caused by the on-off-control, e.g.
the refrigerant migration, are neglected.
Hence, dynamic simulations represent an essential tool
to achieve further improvements. The aim of this
project was to develop of a Modelica Library for the
optimization of household refrigerators and freezers.
Importance was given to model parameterization is
possible with data which are easy to obtain for the enduser of the library. To get good results void fraction
models for the two phase flow and the effect of the
refrigerant sorption in the compressor lubricant were
implemented.

Today the vast majority of household refrigerators and
freezers work with on-off-control of the compressor.
This control method leads to significant dynamic behaviour of the refrigeration cycle and cabinet. Moreover, some phenomena cause energy loss during the
off-state. The development of new appliances based
on static design and simulation tools neglecting all
those dynamic effects will not yield optimal results.
Therefore, a Modelica library for the simulation of
household refrigerators and freezers was developed.
The modelling of the vapour compression cycle is
based on the Modelica Media and Fluid library. The
heat exchangers are modelled according to the finite
volume method. A media model based on quadratic
equations was developed for the refrigerant R600a
(Isobutane) to allow fast calculations. The modelling
of the refrigeration cycle includes effects like different void fraction models and refrigerant sorption in the
compressor lubricant.
The library was validated for a one temperature zone
refrigerator and a refrigeration-freezer-combination
with evaporators connected in series. Adopted script
functions have been written to allow parameter runs
with one or two parameters or with different compressors. The library combines model freatures of recent
studies Janssen [2], Philipp [5] and Radermacher [7]
with a high degree of flexibility and a parameteriza- 2 Components and Structure
tion by data which can be obtained easily.
Keywords:
household refrigeration appliances; A schematic drawing of a household refrigerator with
the simplest cycle option is shown in Fig. 1.
vapour compression cycle; R600a
The main components of the systems are the hermetic
piston compressor, the condenser, the non adiabatic
capillary tube with the suction line heat exchanger, the
1 Introduction
evaporator and the cabinet. More complex cycles are
In Germany 15% of the total CO2 -emmisions are realized, e.g. two or more evaporators in series or parcaused by the domestic sector. According to data of allel with magnetic valve. Optional components like
the VDEW, about 30% of the electrical energy con- stop valves and frame heating are included in the liThe Modelica Association

677

Modelica 2006, September 4th  5th

C. Heinrich, K. Berthold

condenser

QC
QComp
Pel

M

capillary tube
with suction line
heat exchanger

compressor

QIHX
evaporator
Q0

QCab

cabinet

Figure 2: Hermetic piston compressor for household
refrigerators with opened shell

QCab

compressor shell
free gas volume

Figure 1: Schematic drawing of a houshold refrigerator with one temperature zone

inlet - low
pressure side
pressure
damper

brary.

2.1

M

outlet - high
pressure side

motor
compressor
block

Hermetic Piston Compressor

lubricant - refrigerant solution
Hermetic compressors of household appliances have a
dynamic behaviour with considerable larger time conrefrigerant mass flow
heat flow
stants compared to refrigeration systems in the commercial and industrial sector. Since for a decreasing
Figure 3: Schematic drawing of a hermetic compressor
norm capacity the weight only decreases slightly.
The ratio of the heat capacity of compressor to the and existing mass and heat flows
electrical power consumption

Cp,Comp
T herm,Comp =
Pel

(1)

can be used to compare the dynamic of the thermal
behaviour of compressors, approximately. Using the
heat flow of the compressed gas and the rejected heat
by the motor to the compressor instead of the electrical
power consumption would be more exact, but requires
more data of the compressors.
For hermetic compressors of household refrigeration
appliances T herm,Comp is in the range of 30 to 60 s.
Compressors of the commercial sector, e.g. for supermarket refrigeration applications (VGas f low = 50 m3 /h)
T herm,Comp is about 1 s.
Furthermore the refrigerant charge of the whole system is very small compared to the lubricant charge
of the compressor. An average refrigerant charge of
an refrigerator with R600a as refrigerant is approxiThe Modelica Association

mately 30 g. Lubricant charge of hermetic compressors is about 220 g.
Hence, the dynamic behaviour of the compressor
should be taken into account. For this purpose a detailed thermal model of the compressor and its subcomponents have been realized as shown in Fig. 3.
2.1.1

Refrigerant Sorption in the Lubricant

The saturation solubility of the refrigerant in the lubricant Sat depends on the temperature TLub and the
pressure pLub of the lubricant and the type of the lubricant. Mineral and polyolester oils are applied as lubricants. Fig. 4 shows the saturation solubility as function
of temperature for different pressures of a polyolester
oil. The implementation in Modelica is done by using
an approach
(c1  pLub )c2
Sat =
(2)
TLub + c3

678

Modelica 2006, September 4th  5th

A Modelica Library for Simulation of Household Refrigeration Appliances Features and Experiences

Saturation solubility m Ref / m Lub

0,30

p = 50 kPa
p = 100 kPa
p = 150 kPa
p = 200 kPa

0,25
0,20
0,15
0,10
0,05
0,00
20

25

30

35

40

45

50

55

60

Lubricant temperature tLub in C

Figure 4: Saturation solubility of a used refrigerant lubricant mixture

Figure 5: Tube-and-wire condenser

The parameters c1 , c2 , c3 are fitted for applied lubri is described by an cubic approach of pressure ratio:
cant - refrigerant systems based on data of [1] and fur i1
4
ther measurements.
pC

(p
,
p
)
=
c
(6)
C
E
 i pE
TLub , pLub vary distinctly with the on-off-state of the
i=1
compressor. The absorption and desorption process
depends on the difference of the saturation solubility The coefficients are determined during initialization
by least square method using the given data. Suc must
and the absorbed refrigerant.
be corrected, owing to the higher temperature in the
compressor shell.
d
1
=
(Sat  )
(3) The electrical power consumption is calculated by the
d Sorp
isentropic power Pis and the isentropic, mechanical
The circulation of the lubricant varies during on and and electrical efficiencies is , mech , el .
off states of the compressor. Hence different time conPis
(7)
Pel =
stants Sorp are applied as described in Philipp [5].
is  mech  el
For the isentropic power consumption, a simplified apCalculation of Mass Flow Rate and Effi- proach according to Lippold [3] is used: P depends
is
ciency
on pC , pE , m, Suc and the isentropic exponent . The
For the parameterization of a detailed volumetric effi- efficiencies are combined for the same reason as above
mentioned. For the combined efficiency  a cubic apciency model based on Eq. 4
proach in respect to Pis is applied. Coefficients are determined
during the initialization.
m =  V   (p , p )  n
(4)

2.1.2

suc

Dis

C

E

it is necessary to know about the displacement volume VDis , the revolution speed n, the exact inlet conditions into the cylinder Suc and the characteristic behaviour of the volumetric efficiency . The characteristics which can be obtained for hermetic compressors are usually limited to a data set of one or more
points of the condensation temperature tC , the evaporation temperature tE , the refrigeration capacity Q0
and the electrical power consumption Pel .
Hence, for simulation purpose VDis ,  and n are combined:
 (pC , pE ) = VDis   (pC , pE )  n
The Modelica Association

2.2

Heat Exchanger

The main heat exchangers are modelled according to
the finite volume method (FVM) used in the ThermoFluid Library [9]. Heat transfer coefficients at the
refrigerant side are calculated according to Shah [8].
Heat transfer at air side is separated in convection and
radiation. Replaceable components are used to consider different types of evaporator and condenser.
2.2.1

Modelling of Two Phase Flow

The void fraction models of the two phase flow were
(5) paid attention due to the great influence on the system
679

Modelica 2006, September 4th  5th

C. Heinrich, K. Berthold

The slip s is calculated by

s = 1+K

y
Cy
1 +Cy

ref. charge in evaporator
and suction line in [g]

homogenous two phase flow

Premoli's void fraction model incl. corr. factor for liquid void fraction

40
compressor on

compressor off

30
20
10
0
1,0

evaporator outlet
vapour quality

behaviour. Reasons for the high influence are the low
mass fluxes, the geometry of the heat exchangers (particularly the evaporator) and the capillary tube as fixed
vessel in household refrigeration appliances. Void
fraction models according to Hughmark, LockhardtMartinelli and Premoli were applied.
The application of void fraction models increases the
computation effort significantly. The void fraction
model according to Premoli [6] with correction factors of the liquid volume fraction according to Janssen
[2] provided the most stable simulations with good results. The liquid fraction depends on the pressure p,
the saturation densities  ,  , the dynamic saturation
viscosities  ,  , the vapour quality x, the hydraulic
diameter dH , the mass flux G and a correction factor
depending on geometry cG .
Based on the vapour volume fraction of the gas phase
 = V  /V of homogenous two phase flow a slip factor
s is introduced.
1

1  x 
s
(8)
 = 1+
x 

0,8
0,6
0,4
0,2
0,0
200

250

300

350

400

operation time in [min]

Figure 6: Refrigerant charge in the evaporator and suction line (top) and evaporator outlet conditions (bottom) for different two phase flow models

two phase flow and by void fraction model acc. to Premoli with a correction factor for the liquid fraction for
a total refrigerant charge of 36 g. Refrigerant charge
calculated by homogenous two phase flow model is
only in a range of 10 to 20% of the charge calculated
by the void fraction model. A further difference can be
identified in the evaporator outlet conditions (Fig. 6(9) bottom). To get reliable results, a void fraction model
has to be applied.

x
(10)
1x
The parameters K and C correlates to the flow condi- 2.3 Capillary Tube with Suction Line HX
tions and are calculated by the Reynolds Number Re
and the Weber Number We.
The main part of capillary tube is inside the suction
line tube and acts as an internal heat exchanger. The
G  dH
(11)
Re = 
internal heat exchanger ensures superheated inlet con + x (   )
ditions at the compressor and has a positive effect on
2
the cycle efficiency.
G  dH
(12) The mass flow rate of the capillary tube m
We =
Cap is cal
  0,22
culated by a function of pC , pE , the inlet vapour qual
ity xin or the degree of subcooling tsc , the capillary
(13)
K = 1, 578  Re0,19

length and the diameter LCap , dCap and the heat flow
  0,08
rate between capillary tube and suction line QIHX .

(14)
C = 0, 0273 WeRe0,51



2
m
=
K

K

K

K
(x
)
p
+
K
(x
)
p
Cap
Geo
sc
IHX
1
in
2
in
To introduce the correction factor for the liquid volume
(16)
fraction clv f proposed by Janssen [2] equation (8) has
To calculate the heat transfer QIHX , the capillary tube
to be rewritten as
is
modelled according to the finite volume method.


1 

1x 
As the refrigerant state is in the two phase region,
(15)
s
 = 1  clv f 1  1 +
the temperature can be calculated from the pressure.
x 
The pressure in each volume is determined by dimenThe top of Fig. 6 shows the refrigerant charge in the sionless pressure distribution correlation according to
evaporator and suction line calculated by homogenous Philipp [5].
y=

The Modelica Association

680

Modelica 2006, September 4th  5th

A Modelica Library for Simulation of Household Refrigeration Appliances Features and Experiences

heat transfer
due to
convection
temperature sensor
radiation
conduction
air volume

evaporator

fixtures and loading

insulation

Figure 7: Heat capacities and heat flows in a one temperature zone cabinet

Figure 9: Complete refrigerator model in Dymola

2.5

Figure 8: Wall model with calculation of the effective
heat capacity

All components are connected via fluid ports of the
Modelica Fluid Library and heat ports of the Modelica
library. Heat ports are separated into convection and
radiation heat transfer, if necessary. The cabinet model
provides an output signal of the cabinet temperature.
Temperature control is done by cabinet and evaporator
surface temperature. A complete model is shown in
Fig. 9.

2.6
2.4

Cabinet

The cabinet model contains different heat capacity elements which interact via heat transfer due to convection, radiation and conduction. Fig. 7 shows the main
heat capacities and heat flows.

Refrigerator

Further Features

To reach a high flexibility, the data inputs for the enduser of each component is put in a replaceable record.
The data records are stored as a modification of the
basic data record in a top level package outside the
main package. This allows fundamental modifications
of the components without an impact to the database
of the end-user. A data import routine for MS Excel
and other databases is under construction.

For the cabinet wall two models are implemented. In
the first model the wall is discretized into a series of
heat capacity and conduction elements. The distribu- The component models make high use of the replacetion of the parameters has to take the structure of the able model feature to allow easy justification of the
wall into account, e.g. the inner casing and the insula- modelling detail level.
tion.
An additional component was developed which allows
If the cycling frequency is approximatively known, a checking significant variables for steady state. After
simplified model approach can be used. Thus, an ef- a selectable number of on-off-cycles in steady state,
fective heat capacity and its position between two heat the component stops the simulation run automatically.
conduction model is calculated (Fig. 8). By this way Particularly for parameter studies, the computation efthe number of state variables can be reduced.
fort can be decreased efficiently.
The Modelica Association

681

Modelica 2006, September 4th  5th

C. Heinrich, K. Berthold
100

70

simulation:
t(evap. surf.)
t(cond. surf.)
P(el)
t(cabinet)
measurement:
t(evap. surf.)
t(cond. surf.)
P(el)
t(cabinet)

temperature in [C]
electrical energy consumption in [W]

80
70
60
50
40

t(E,sat)
t(C,sat)
P(el)
t(E,sat)*
t(C,sat)*
P(el)*

60
50

el. power consumption in [W]
saturation temperature in [C]

90

30
20
10
0
-10

40
30
20
10
0
-10
-20

-20
-30

0

10

20

30

40

50

60

70

80

90 100 110 120 130 140 150

0

50

100

150

200

250

300

350

400

operation time in min

operation time in [min]

Figure 10: Comparison of a refrigerator system behav- Figure 11: Comparision of simulation including and
iour based on simulation and measurement results
neglecting the refrigerant sorption

3

Validation

Before the library was used for theoretical investigations, a validation with a one temperature zone refrigerator and a two temperature zone refrigerator - freezer
- combination had been performed. Therefore, a series
of simulations and measurements with variation of the
compressor, the ambient temperatures and the cabinet
temperature setting had been done.
Therefore, the ambient temperature where set as a parameter in simulation. The compressor control where
done by the temperature output of the cabinet sensor.
The parameters of the control hysteresis function of
the real refrigerator where applied in simulation to include the influence of thermal inertia of the temperature sensor. For comparison of absolute values (energy consumption, relative compressor operation time,
cycling frequency . . . ) simulation was checked for
steady state. Steady state was achieved if all of mentioned values differ less than 0,1 % compared to the
previous cycle. For the verification with the measured
refrigerator, the average values of three cycles under
steady state conditions were applied.
The simulation was in very good agreement in respect
of the behaviour of the system and the absolute values
like energy consumption and relative compressor operation time. Fig. 10 shows a comparison of simulation
and measurement results. Tab. 1 shows the measured
and simulated values of energy consumption and relative operation time of the compressor.
The influence of refrigerant soprtion in the compressor
lubricant increases with decrasing of ambient temperature and of the relative compressor operation time.
Fig. 11 shows the dynamic behaviour of saturation
temperature in the evaporator and condenser tE,sat ,
tC,sat and the power consumption PE,sat including the
The Modelica Association

refrigerant sorption and tE,sat , tC,sat  and PE,sat  neglection refrigerant sorption.

4

Experiences

To reproduce the behaviour in the compressor on-state
as well as in the compressor off-state adequately precisely the models have to be very detailed. Some of
the physical principles only show an influence on one
of the both states and can be neglected in the contrary
state.
Usually Dassl and Radau IIa were used as integrators. The Dassl integrator shows the best performance
with a relative tolerance between 5  106 and 1  105 .
Radau IIa, with a relative tolerance between 1  106
and 2  106 , often provides a faster calculation but
simulations lead more often into a stiff system. This
is generally a common problem. Further decrease of
the relative tolerance does not protect against stiff systems. A high computation effort always happens during the change of the compressor state. Fig. 12 shows
the calculation time of Dassl and Radau IIa with Dymola.
The proposed state-depending model structure presented by Nytsch-Geusen [4] can be used to have different models depending of the compressor on and
off-state. In the compressor on-state, mass flow depends generally on the compressor and the capillary
tube characteristic. In the compressor off-state mass
flow rate is caused by thermal influences.
As one example: The heat transfer in the capillary
tube - suction line heat exchanger can be neglected in
the compressor off-state. The finite volume structure,
which is necessary in the on-state, can be simplified
to only one mass flow - pressure difference correla-

682

Modelica 2006, September 4th  5th

A Modelica Library for Simulation of Household Refrigeration Appliances Features and Experiences

Table 1: Comparision of absolute values of measurement and simulation results
tCabinet
in  C
1,0
1,0
3,5
1,0
1,0
3,5

Energy Consumption in kWh/d
Simulation Measurement  (rel.)
0,927
1,002
-7,5%
0,446
0,480
-7,1%
0,385
0,407
-5,4%
0,643
0,619
3,9%
0,437
0,413
5,8%
0,349
0,333
4,8%

100
t(E,sat)

80

t(C,sat)

P(el); ----- Dassl - - - Radau

60
40
20
0
-20
Dassl
Radau IIa

600
400
200
0
100

energy consumption under
norminal conditions in [kWh/d

el. power consumption in [W]
CPU calculation time in [s] saturation temperature in [C

Type 1
Type 1
Type 1
Type 2
Type 2
Type 2

tAmbient
in  C
39
25
25
32
25
25

0,58

relative compressor
operation time

Compressor

0,44

Relative Compressor Operation Time
Simulation Measurement  (rel.)
0,536
0,565
-5,1%
0,288
0,291
-1,0%
0,244
0,233
4,7%
0,434
0,409
6,1%
0,314
0,293
7,2%
0,251
0,238
5,5%

0,56
0,54
minimum of the
energy consumption

0,52
0,50
0,48

0,40
minimum of the relative
compressor operation time

0,36
0,32
0,28

105

110

115

120

125

130

135

140

145

150

155

160

operation time in [min]

24

26

28

30

32

34

36

38

40

42

44

46

refrigerant charge in [g]

Figure 12: Electrical power consumption, evaporation Figure 13: Influence of the refrigerant charge on the
and condensation temperature and computation time energy consumption and the relative compressor operwith Dassl and Radau IIa as integrators
ation time
tion with one volume. Hence, calculation effort can charge can be found for known ambient and cabinet
be decreased and simulation stability can be increased setting conditions. Fig. 13 shows a significant minimum of the energy consumption for the optimal resignificantly in the off-state.
frigerant charge in the range of 33 g. The relative compressor operation time shows a wide minimum which
5 Issues of Optimization
can be found for a higher refrigerant charge. Neglecting the refrigerant sorption leads to a calculation reEffects on different cycle variants, alternative expansults of optimal charge which is between 3 and 10 g
sion devices and the utilization of stop valves have
lower, depending mainly on ambient temperature and
been investigated with the validated model of the lirelative compressor operation time.
brary. Further on, there are some optimization problems which are useful for all refrigerator and freezer
models. Getting these results by experimental inves- 5.2 Optimal Compressor
tigations, means a high effort. Simulation can help
to limit that effort efficiently. As examples two op- There is a wide choice of hermetic compressors for
timization problems are presented here. The calcula- household refrigerators on the market. The comprestions have been performed on the validated one tem- sor with the best COP under nominal conditions is not
necessarily the best under real operation conditions.
perature zone refrigerator.
A specially written script function allows the user to
compare a set of different compressors. Fig. 14 shows
5.1 Optimal Refrigerant Charge
the energy consumption and the relative compressor
For a given configuration the energy efficiency varies operation time for a set of different compressors simudistinctly from the refrigerant charge. By using a lated in one refrigerator. The graph identifies one comparametric study with Dymola, the optimal refrigerant pressor as the optimal solution for the system. The best
The Modelica Association

683

Modelica 2006, September 4th  5th

C. Heinrich, K. Berthold

0,7

1,6

energy consumption
relative compressor operation time
COP under nominal conditions

best COP under
nom. conditions
1,4

lowest energy
consumption

0,6

1,2

0,5

1,0

0,4

0,8

0,3

0,6

0,2

coefficient of power at nominal conditions

energy consumption in [kWh/d]
relative compressor operation time

0,8

0,4

37W - 0,91

47W - 1,10

49W - 1,20

64W - 1,23

74W - 1,31

refrigeration capacity in [W] and coefficient of power at nominal conditions

[4] C. Nytsch-Geusen et al. Mosilab: Development of
a modelica base genericc simulation tool supporting model structural dynamics, 2005.
[5] J.
Philipp.
Optimierung
von
Haushaltskaltegeraten
mittels
numerischer
Modellierung. PhD thesis, TU Dresden, 2002.
[6] A. Premoli, D. di Francesco, and A. Prina.
Una correlazione adimensionale per la derterminazione della densita di miscele bifasiche. La Termotecnica, 25(1):1726, 1971.

Figure 14: Comparison of energy consumption and [7] R. Radermacher, E. Gercek, V. C. Aute, and
Hwang Y. TransRef - Transient Simulation for Rerelative compressor operation time for a set of comfrigeration Systems. Technical report, Center for
pressors
Environmental Energy Engineering - Univerity of
Maryland, 2004.
one in the system (COP=1,20) is not the one with the
[8] K. Stephan. Warmeubergang beim Kondensieren
highest COP (1,31).
und beim Sieden. Springer Verlag, Berlin, 1988.

6

Conclusion and Future Work

[9] H. Tummescheit, J. Eborn, and F. Wagner. ThermoFluid - A Thermo-Hydraulic Library in Modelica - Documentation. 2001.
A Modelica library for the dynamic simulation of
household refrigerators and freezers has been developed. Effects as refrigerant sorption in the compressor
lubricant and different void fraction models have been
implemented, due to the high influence on the system.
The models have been successfully validated and are
used for general investigations of the cycle structure as
well as for the basic optimization process.
Future work is to be concentrated on the simulation
stability, particularly for systems with more temperature zones, as well as for further heat exchanger designs. To obtain a higher stability, the state depended
model structure is one issue to work on.

References
[1] Institut fur Luft-und Kaltetechnik Dresden.
Stabilitat von Kohlenwasserstoffen im
Kaltemittelkreislauf. Forschungsrat Kaltetechnik
e.V., 1999.
[2] M. Janssen, J. de Wit, and L. Kuijpers. Cycling
losses in domestic appliances: an experimental
and theoretical analysis. Int. J. Refrig., 15(3):152
158, 1992.
[3] H. Lippold.
Zum Isentropenexponent von
Kaltemitteln. Luft- und Kaltetechnik, 12(6):311
313, 1976.
The Modelica Association

684

Modelica 2006, September 4th  5th

A New Energy Building Simulation Library

A New Energy Building Simulation Library
Juan I. Videla Bernt Lie
Telemark University College
Department of Electrical Engineering, Information Technology, and Cybernetics
Porsgrunn, 3901 Norway

Abstract

The building library, HITLib, is evaluated using BESTEST
comparative testing procedure [6] with a special emphasis
in the models required to represent the test cases. HITLib is
also capable to represent inter-zone convective energy ows
in multi-zone buildings using mass and energy balances for
the lumped control volumes which represent rooms, and
steady-state hydraulic uid assumption for the bidirectional
mass ow components like cracks, doors, ventilations, etc.
In the next section, a general overview of the library structure is given. Then, the main building models used in
the test cases are developed. The BESTEST inter-program
comparison results are presented in section 4. To sump up
with the conclusions and future work in the last section.

Due to the increased interest in saving energy in buildings,
new dynamic building models that describe transient response in more exible modeling languages become necessary. Following some ideas from a previous building thermal behavior library written in Modelica, a new library for
modeling building thermal response is presented. The library is meant for system level simulation and its basic elements consist of lumped and one-dimensional distributed
parameter models. Object-oriented features like class parameters, inheritance, and aggregation are extensively used to
improve the library structure making it easy to read and use.
Complex building topologies can be built-up from component models that can be ef ciently simulated and studied
in any Modelica simulation environment. A comparative 2 Library overview
test using BESTEST (Building Energy Simulation Test) is
performed for inter-program comparison with traditional The library is organized in 6 main packages (see gure 1)
whole building energy simulation environments.
Keywords: building modeling; building energy simulation;
inter-program comparison

1 Introduction
Buildings are complex nonlinear dynamic systems that involve many physical aspects  heat conduction, convective
ow, radiation, mass ows, etc. with hundreds of variables
and parameters that must be properly addressed. Due to
the complexity and highly coupled nature of these phenomena, simulation seems to be the most cost effective way to
study how to improve the energy ef ciency in buildings [1].
Although there are many building energy simulation tools
available [11], [2], the majority of them are not convenient
to easily test and develop advanced controllers and supervisory control techniques.
The hierarchical structure of buildings allows the de nitions
of different levels of detail naturally. So a building can
be divided into different levels going from physical phenomena components to more complex structures like the
building itself. A basic elements sublibrary for lumped and
distributed parameter models can be de ned to represent
the underlying physical phenomena. More complex elements are naturally derived from these basic components.
Depending on the complexity and the requirements of the
problem the models can be adapted and several building
topologies can be easily assembled.

The Modelica Association

Figure 1: HITLib general library structure.
Building  Basic, Constructive, and Complex elements; material properties and layers geometry sublibraries
Environment  Location_Time, Psychrometric, Solar
radiation, and Weather sublibraries
HVAC  Heating, Ventilating and Cooling Systems
sublibraries
Interfaces  all connectors and components used in interconnections.
BoundCond  Variable and xed sources and sinks according to the connectors.
Sensors  Sensor models for the different external interfaces (connectors)
Basic models generally described elementary models like
the air heat and mass storage in a control volume, the ori ce
equation, single and multilayer conductive models, convective models, and radiation exchange models. Many of the

685

Modelica 2006, September 4th  5th

J.I. Videla, B. Lie
basic model formulations found in HITLib are similar to
the ones found in ATPlus library [4], while other ones give
a more detailed description of the underlying phenomena
(e.g. longwave radiation exchange in the enclosure model,
air mass storage, ori ce equation, etc.).
Constructive models like a wall model are built by combining basic models. For instance, a wall component addressing radiation, multi-layer conduction and convection
is constructed through aggregation and inheritance of basic models. In a similar way, ventilations, doors, windows,
roofs, oors, junctions, cracks, etc. can be de ned from the
basic models.
Complex elements like a room (see Fig. 5) or a storey are
de ned by aggregation of constructive elements. They are
basically template-like components where the subcomponents constructive element parameters are directly de ned
through the complex element higher level parameters. In
this way, the material used in the walls of a room can be
directly de ned through the higher level room parameters.
Materials subpackage contains records of different material properties. In general parameters are grouped in partial
models to increase readability and reuse in similar components at each level.
Environment subpackage contains models and functions to
calculate solar radiation and position, perform psychrometric conversions, estimate sky-temperature, and load and interpolate weather data les in tables.
HVAC subpackage contains models representing electrical
heaters, radiators, valves, pipes, boilers, pumps, chillers,
heat exchangers, etc.
BoundCond and Sensor libraries de ned all possible interactions with the connectors used in the different models.
Icons are de ned in the Icons package and they are inheritated in the library models to increase model readability.

dm(t)
dt
dU(t)
dt

H (t)
H (t)
U (t)

:

=
j (t)
jm
:
:
=
H
j j (t) + k Qk (t)
= U (t) + p (t)V (t)
= m (t) h (t)
= m (t) u (t)

(1)

:

where m is the mass within the control volume, m j the
:
:
mass in/out ows, H j the enthalpy in/out ows, Qk the heat
in/out ows, U the internal energy, H the enthalpy, p the
pressure, V the volume, and h and u, the speci c enthalpy
and speci c internal energy, respectively. The ideal gas law
is used since nominal temperatures, pressures, and densities
for buildings are well within the range of validity of this
thermodynamic model. The ideal gas law is implemented
in a partial model class, and used when necessary in other
components through inheritance. The preferred states and
their initial conditions are then selected, and model reformulation is automatically done by Dymola using its built-in
symbolic math capabilities for dealing with DAE (Differential Algebraic Equations):
p (t) v (t) = RT (t)
u (t)
= u0 + cv (T (t) T0 )
h (t)
= u (t) + p (t) v (t)

(2)

where, v is the speci c volume, T the temperature, u0 the
speci c internal energy at T0 ; and R the gas constant. This
air volume model is also extended in the AirVolHum model
to account the
A more basic air volume model represented as a simple heat
storage unit (the model that has been used in the BESTEST
analysis) is

dTair
(3)
dt
where c p air is the air speci c heat capacity, rair is the air
densitiy; Vroom is the air volume, Qair is the net heat ow
3 Building models description
rate entering the air volume, and Tair is the air temperature
within the volume.
The thermal response of a building space include the heat Additionaly, a model that accounts the humidity variation
transfer from the enclosing walls and roofs through conduc- within the air volume formulated from a dynamic mass and
tion and convection, solar heat gains through windows, heat internal energy balances is available.
gains or losses due to in ltration, internal long wave exchange and internal short wave absorption and distribution
3.2 Exterior and interior wall heat transfer
among the enclosure surfaces, and short wave heat gains
models
from internal sources. Additionally, the exterior wall exchange heat with the environment through convection, long- The heat transfer that takes place at each exterior surface
wave radiation, and shortwave absorption. The air within a (or roof) i on the outside of building can be calculated using
room is represented through a lumped control volume con- the following heat balance
nected to the internal convective sides of the inner surfaces
of the envelope.
(4)
Qcond;i = Qoconv;i + Qoradsol;i + Qoradlw;i
Qair = c p air rairVroom

where Qcond;i is the conduction heat ow rate between the
external
surface and the inner conductive layers, Qoconv;i is
3.1 Air volume model
the convective heat transfer between the outdoor air and the
HITLib has three different models to represent the air vol- wall surface, Qoradsol;i is the heat ow rate that the exterume within a room.
nal surface of a wall or roof absorbs from the total incident
An air volume model formulated using a dynamic mass and solar radiation, Qoradlw;i is the heat ow rate from the long
wave radiation that the external surface exchanges with the
internal energy balances within a lumped control volume,

The Modelica Association

686

Modelica 2006, September 4th  5th

A New Energy Building Simulation Library
surroundings, such as outdoor air, the ground and nearby
buildings, and the sky.
Multilayer
conductive
model

With

Qoconv;i
Qoradsol;i
Qoradlw;i

= ho (Tout Tsur;i )
= Ai ahi (Idif;i + Idir;i )
4
4
= ei s Fair Tout
Tsur;i
+
Fg Tg4

4
4
Tsur;i
+ Fsky Tsky

4
Tsur;i

i

Solar
incident
radiation
absorption
model
Convective
model

(5)

where ho is the convective heat transfer coef cient of the external wall surface, Tout is the outside temperature, Tsur;i is
the wall surface temperature, ai is the shortwave absorptivity, (Idif;i + Idir;i ) is the total incident solar radiation (direct
and diffuse radiation impinging the external surface), Ai is
the area of incidence of the solar radiation, ei is the outer
layer emissivity, s is the stefan-boltzmann constant, Fair is
the surface-air view factor, Fg is the surface-ground view
factor, Tg is the ground temperature, Fsky is the surface-sky
view factor, and Tsky is the sky temperature.

Figure 2: Half exterior roof model icon and diagram layer.

model CondMc
...
CondM1 CondM[Nlay](
Area=Area[1:Nlay],
Ndis=Ndis[1:Nlay],
Len=Len[1:Nlay],
Tini=Tini[1:Nlay],
Material=Material[1:Nlay]);
equation
connect(CondM[1].Heat_a, Heat_a);
connect(CondM[Nlay].Heat_b, Heat_b);
for i in 1:Nlay - 1 loop
connect(CondM[i].Heat_b, CondM[i + 1].Heat_a);
end for;
end CondMc;

The one dimensional heat conduction through an homogeneous isotropic solid (e.g. layer of a wall) Qcond;i , with material properties independent of temperature, can be modeled as a one dimensional PDE of the form:

Qcond
T =t

=
=

kAcond T =x
1
rc Qcond =x

(6)

where T is the temperature, Qcond is the conductive
heat ow rate, Acond ; k, r; and c are conductive area, thermal conductivity, density and speci c heat capacity of the
material, respectively. This equation can be solved using
the method of lines (i.e. spatial discretization), see the following Modelica code fragment from the single layer model
CondM1:

model CondM1
...
equation
for i in 2:Ndis loop
Area*dx*Material.rho*Material.c*der(T[i]) = Q[i - 1] - Q[i];
end for;
for i in 2:Ndis + 1 loop
Q[i - 1] = (Material.lambda*Area)*(T[i - 1] - T[i])/dx;
end for;
...
end CondM1;

LW radiation
exchange
model

Finally, more complex models (e.g. constructive models
like wall, roof, or oor models) can be built aggregating convective models and the multilayer conductive model
CondMc. As an example see the diagram layer of the half
exterior roof model in Fig. 2. The additional models represent the heat ow rate Qoradsol;i , that the external surface
of the roof absorbs from the total incident solar radiation
impinging the exterior surface, and the long wave radiation
heat ow rate Qoradlw;i , that the external surface exchanges
with the sky for this particular model. This exterior half
roof model represents the heat balance at the exterior side
of a building roof. This model has azimuth and tilt angle
parameters to properly de ne the total solar radiation. Similarly, other constructive models can be de ned by aggregation of elemetary models and class parameters of the inner
models.
A similar heat balance can be formulated for each building
wall (or roof) interior surface i within the building

The single layer component CondM1 can be extended to
Qcond;i + Qiconv;i + Qiradsw;i + Qiradlw;i = 0
(7)
the multilayer case CondMc by declaring it n times, each
declared single layer component is interconnected using a where Qcond;i is the conductive heat transfer between the
for clause and the connect command as shown below:
wall inner layers and the internal wall surface of the room,

The Modelica Association

687

Modelica 2006, September 4th  5th

J.I. Videla, B. Lie
Qiconv;i is the convective heat transfer between the internal
air and the wall surface, Qiradsw;i is the heat ow rate that
the internal outer surface of a wall or roof would absorb
from any short wave source (e.g. incoming solar radiation
from the window model or short wave radiation from a bulb
model), and Qiradlw;i is the net heat ow rate due to the long
wave radiation exchange among the internal surfaces.
Qiconv;i
Qiradsw;i
Qiradlw;i
Qiradlw;i

= hi (Tint Tsur;i )
= Fai Qwind
4
= Asur;i 1 eiei sTsur;i

= Asur;i

Jsur;i

N
j=1 Fi; j (Jsur;i

Convective
model 1

Convective
model 2

Solar incident
radiation
transmission
model

Jsur; j )

Figure 3: Window model icon and diagram layer.

the windows in the absence of sunlight and air in ltration.
Multi-glass windows can be approximated by this simplied model or otherwise, the model can be easily extended
to account for a multi-pane window. The total solar heat
ow rate trough the glass is calculated with the solar incident radiation transmission model.

3.4

In ltration heat transfer model

The in ltration heat transfer model represents the building's
sensible thermal load due to air exchange by in ltrations.
The incoming air must be heated or cooled depending on
the temperature difference between the outdoor and indoor
air. The heat ow rate due to this sensible heating or cooling
is given by

Windows heat transfer model

Qinf = IACHVroom rair c p air (Tout

The window model (see Fig. 3) is also built from basic
models by aggregation, the heat transfer through a window
can be approximated by three parts,
a conductive-convective part due to the temperature
difference between the exterior and interior of the
building,
a solar heat gain model due to the solar radiation,
and a convective energy ow due to in ltration.
The Window model used to evaluate HITLib with
BESTEST do not include any in ltration or ventilation
component driven by pressure differences between zones.
The building in ltration is directly represented using a simpler ASHRAE model in the room model.
The conductive-convective heat transfer part due to the temperature difference between the exterior and interior of the
building is modeled using two convective models for the
external surfaces at both sides of the windows, and a conductive model representing the glass pane. This part of the
Window model represents the rate of heat transfer through

The Modelica Association

Conductive
model

(8)

where hi is the convective heat transfer coef cient of the
internal wall surface i, Tint is the air volume temperature,
Fai is the internal solar distribution fraction (for details see
Kreith and Bohn (1993)), Qwind is the heat ow rate from
the incoming solar radiation into the enclosure through the
windows, Jsur;i is the radiosity of surface i, Jsur; j is the radiosity of surface j, Fi; j is the view factor between surfaces
i and j, and N is the number of enclosure surfaces.
The long wave radiation exchange among the surfaces
of the enclosure has been implemented in the enclosure
model. The conventional radiation heat transfer network
analysis method [10] has been used assuming plain gray
diffuse surfaces. The enclosure model is included in the
room42_B model and each radiating surface is separately
connected to the enclosure model using a connector array.
The view factors depend on the geometry, position, and
surface emissivity of each of the inner surfaces of the enclosure, they can be precalculated and loaded or an area
weighted approach can be directly calculated in the component.
The shortwave radiation distribution is implemented with a
model that uses precalculated solar fractions according to
the geometry and absorptivity of the internal surfaces.

3.3

Orifice
model

Tint )

(9)

where Qinf is the sensible heat load, rair is the air density,
c p air is the speci c heat of air, Vroom is the room volume,
IACH is the air exchange rate also called air changes per hour
(ACH); Tout is the outside temperature, and Tint is the indoor
temperature. The in ltration model can be seen in the diagram layer of the room42_B model in Fig. 5

3.5

Environment model

The environment model calculates the sun position and solar radiation with respect to and over each exterior building
surface (for a detailed description of the following equations see [5], [3], [9], and [8]). The environment model
diagram layer used with the BESTEST simulations can be
seen in Fig. 4. Subcomponents (1), (2), (3), and (4) are used
to calculate the solar time tsol , the hour angle w; and the solar declination angle d (angle between the earth's equatorial
plane and the sun beam in the selected location),

688

Modelica 2006, September 4th  5th

A New Energy Building Simulation Library

, tstd + Lstd
15

tsol

Lloc
=h

Et
+ 60 min=
h

(10)

12 h)360
= p(tsol24 h180
(11)
= 9:87 sin (2a) 7:53 cos (a) 1:5 sin (a)(12)

w
Et
a

=

sin (d) =

360 (n 81)
364

sin

23:45 p
180

n+10
cos 2p 365:25

(13)

where tsol is the solar time, tstd is the standard time, Lstd is
the standard longitude, Lloc is the local longitude, Et is the
equation of time, and n is the day of the year.

table entries include the dry temperature Tdry , the dew point
temperature Td p ; the atmospheric pressure p, the relative
humidity Hrel ; the wind velocity Wvel ; the wind direction
Wangle ; the global horizontal radiation Hglo;hor ;the diffuse
horizontal radiation Hdi f ;hor ; the total sky cover nto ; the
opaque sky cover nop and the ceiling height h.
For every incidence angle qi , the diffuse solar radiation over
a tilted surface Hdiftil;i and the direct solar radiation over a
tilted surfaces Hdirtil;i are calculated from the hourly global
horizontal radiation Hglo;hor and the hourly diffuse horizontal radiation Hdi f ;hor ;
Hdir;hor

(1) Day
of the
year
(3) Sun (5) Load TMY
declination
(4) Hour
angle,
Solar time

= Hglo;hor
Hdir;hor
cos qs

Hdi f ;hor

cos qi

(16)

Hdirtil;i

=

Hdiftil;i

qsur
= Hdi f ;hor 1+cos
2

+Hglo;hor rgro 1

(7) Diff and dir
solar radiation
on tilt. surf.

(15)

cos qsur
2

(17)

where rgnd is the ground re ectance.
Finally the sky temperature model (see subcomponent (8)
in Fig. 4) based on [7] model estimates the sky temperature Tsky . First the clear sky emissivity eclear is calculated
from the dew point temperature Tdp ; the solar time tsol ; the
atmospheric pressure P as

(6) Incidence
angle tilted
surface
Tdry
(8) Sky
temperature
model

(2) Longitude
Latitude

eclear

= 0:711 + 0:56
0:013 cos

Tdp
100

2ptsol
24

+ 0:73

Tdp 2
+
100

+ 0:00012 (P

1000)(18)

Figure 4: Environment model used with BESTEST analy- the sky emissivity e is calculated from the clear sky emissis.
sivity and the cloud amount C, which is estimated using the
following equations,
Subcomponent (6) in Fig. 4 calculates the solar incidence
angles qi for arbitrary planes i in terms of the tilt qsur and
the azimuth fsur angles of the surface normal,
cos qi

= cos qsur (cos d cos w cos llat + sin d sin llat )
+ sin qsur sin fsur cos d sin w
(14)
+ sin qsur cos fsur (cos d cos w sin llat
sin d cos llat )

e = eclear + (1
C =
ni ec;i Gi
ln Gi =
hi =h0

eclear )C

(19)
(20)
(21)

where ni is the sky cover fractional area for each cloud layer
i, ec;i is the hemispherical cloud emissivity for each cloud
layer i; Gi is a factor that depends on the cloud base temperature for each cloud layer i and can be approximated by
equation 21 where hi is the cloud layer base height and ho
where llat is the building latitude (obtained from subcomis equal to 8200 m. Finally, the black-body sky temperature
ponent (2) in Fig. 4). In the current implementation
is computed as
the incidence angle qi is calculated for the following sur1
face tilt angles qsur = (0 ; 45 ; 90 ) that correspond to
Tsky = e 4 Tdb
(22)
horizontal surface, 45 tilted surface, and a vertical surface; and for the following surface azimuth angles fsur =
(180 ; 135 ; 90 ; 45 ; 0 ; 45 ; 90 ; 135 ) that corre- 3.6 Room model
spond to North, North-east, East, South-East, South, SouthThe room42_B model used to represent the BESTEST
west, West, and North-West directions. In this way 17 difcases can be seen in Fig. 5. Several of the already preferent incidence angles are obtained for the 24 different
sented components are interconnected in the room model.
combinations of surface tilt and azimuth angles1 .
The central component is the air control volume compoThe Load TMY model (see subcomponent (5) in Fig. 4)
nent, modeled as a simple heat storage model. The half inloads the hourly TMY weather data le into a table. The
terior walls, roof, and oor model convective sides are con1 for q
=
0
,
any
f
will
have
the
same
q
value.
nected to the air volume. The longwave radiation exchange
sur
i
sur

The Modelica Association

689

Modelica 2006, September 4th  5th

J.I. Videla, B. Lie

HeatA

Half
ceiling

HeatW

2.7m
0.5m
2.0m

Half
interior
wall 1
West

Half
interior
wall 3
Distributor East
SW rad

Enclosure
LW rad

1m

6m

6m

0.5m

6m

N

8m

1.5m

Half
interior
wall 4
South

Air
control
volume

Half
interior
wall 2
North

0.5m

0.2m

2.7m

3m

0.5m
1.5m
2.0m

6m

N

0.2m
8m

HeatInf

Infiltration

Half
floor

Figure 6: Basic geometry of BESTEST building with south
windows (above) and with east and west windows (below).

HeatA

Figure 5: Diagram layer of room42_B model.

heat ow rate is calculated in the Enclosure LW component.
The heat ow rate due to the solar radiation transmitted by
the windows enters into the room model through the special purpose heat connector HeatW and it is distributed in
the enclosure by the Distributor SW rad model. The room
model also has an in ltration subcomponent connected to
the special purpose heat connector HeatInf.

4 BESTEST approach
Comparative testing is used to compare the performance
of the HITLib library with the standard building simulation tools. The BESTEST approach [6] consists of a set of
carefully speci ed cases (36 cases) for software-to-software
comparisons, and program diagnostics that can be easily
de ned over a variety of detailed and simpli ed wholebuilding energy simulation programs. The cases go from
simple to complex, and only 14 of them are for quali cation. Quali cation cases 600 to 650 and 900 to 990 represent a set of lightweight and heavyweight buildings that are
relatively realistic with respect to their thermal characteristics. The basic geometry of the test case building is a simple
rectangular single zone with no interior partitions (see Fig.
6). These test cases are implemented and evaluated with the
Modelica building library and the corresponding results are
compared with those of the reference whole building energy simulation tools (i.e. BLAST, DOE2, ESP, SERIRES,
S3PAS, SUNCODE, TASE, and TRNSYS).
Since non shading device has been modeled cases 610, 630,
910, and 930 can not be properly modeled. Cases 650, 950
were not tested since no scheduled ventilation model was
implemented and cases 960 and 990 were neither evaluated.
The tested cases (see table 1) allow us to analyze the performance of the library in the aspects of basic heat transfer
(case 600), east and west incidence and/or transmittance so-

The Modelica Association

lar radiation (620 & 620-600) and setback control (640 &
640-600) for the light weight cases, and mass and/or south
solar interaction (900 & 900-600), mass and/or east-west
solar interaction (920 & 920-900), and mass and/or setback
interaction (940 & 940-900) for the heavy weight cases.
A typical meteorological year (TMY) weather data le is
provided to perform the tests, the ground modeling is not
generally good, therefore a highly insulated oor has been
de ned in the test cases to effectively decouple the oor
thermally from the ground. A ground temperature of 10 C
is applied through a heat boundary condition component
(see BC1 subcomponent in Fig. 7). The in ltration component automatically correct its value according to the atmospheric pressure. The internal generated heat gains from
equipment, lights, people, animals, etc. that are not related
to HVAC correspond to sensible heat (no latent) and they
have a value of 200W for the test cases (60% radiative,
40% convective, 100% sensible, 0% latent). The convective and radiative part of the internal gain have been implemented with heat boundary condition components (see
BC2 and BC3 subcomponents in Fig. 7), where the rst
is directly connected with the air mass volume (inside the
room model) while the second has been connected to a
shortwave distributor model (inside the room model). For
the shortwave internal solar distribution fractions the values

690

Case

Mass

Thermostat

600
620
640
600FF
900
920
940
900FF

Light
Light
Light
Light
Heavy
Heavy
Heavy
Heavy

Deadband or 20,27
Deadband or 20,27
Setback
free- oat
Deadband or 20,27
Deadband or 20,27
Setback
free- oat

Table 1: BESTEST qualifying cases tested

Modelica 2006, September 4th  5th

A New Energy Building Simulation Library
Half
exterior
roof 1

Half
exterior
wall 1
West

BC3
Qflow
Intgain

7.0

Half
exterior
wall 3
East

6.0

annual heating
loads [MWh]

Environment
model

Room
model

5.0

ESP
BLAST
DOE2
SRES/SUN
SERIRES
S3PAS
TRNSYS
TASE
HITLib

4.0
3.0
2.0
1.0
0.0

600

620

640

900

920

940

9.0
8.0
7.0

annual cooling
loads [MWh]

West
Window
model

East
Window
model

ESP
BLAST
DOE2
SRES/SUN
SERIRES
S3PAS
TRNSYS
TASE
HITLib

6.0
5.0
4.0
3.0
2.0

Half
exterior
wall 2
North

1.0
0.0

Temp
sensor

BC2
Qflow
Intgain

BC1
Temp.
gnd

Half
exterior
wall 4
South

600

620

640

900

920

940

Figure 8: Annual heating loads for low mass buildings cases 600, 620, and 640- and high mass buildings - cases
900, 920, 940- (above). Annual cooling loads for the same
cases (below).

Figure 7: Dymola diagram layout of BESTEST cases 620
and 920 with east/west windows.
12.0
10.0

Setback

peak heating
[kW]

Heat=on if temp<20C
Cool=on if temp>27C
23:00<time<07:00
heat=on if temp <10C
07:00<time<23:00
heat=on if temp <10C
cool=on if temp>27C

ESP
BLAST
DOE2
SRES/SUN
SERIRES
S3PAS
TRNSYS
TASE
HITLib

8.0
6.0
4.0
2.0
0.0

600

620

640

900

920

940

8.0
7.0
6.0

ESP
BLAST
DOE2
SRES/SUN
SERIRES
S3PAS
TRNSYS
TASE
HITLib

peak cooling
[kW]

Deadband
or 20,27

5.0
4.0
3.0

Table 2: BESTEST heating and cooling thermostat control
system
provided by BESTEST are used.
The heating and cooling systems are 100% convective, the
thermostat is sensing only the air temperature and it is assumed that there are no latent loads. Both heating and cooling capacities are of 1000 kW and they have an effective
ef ciency of 100%: Two thermostat control strategies has
been implemented (see Table 2),

2.0
1.0
0.0

600

620

640

900

920

940

Figure 9: Annual peak heating loads for low mass buildings
- cases 600, 620, and 640- and high mass buildings - cases
900, 920, 940-(above). Annual peak cooling loads for the
same cases (below).

3.0

4.1

heating load
differences [MWh]

2.0

Results

The Modelica Association

ESP
BLAST
DOE2
SRES/SUN
SERIRES
S3PAS
TRNSYS
TASE
HITLib

0.0
-1.0
-2.0
-3.0
-4.0

There are two types of outputs, the annual outputs de ned
over the whole reference year and daily hourly outputs dened over speci c days of the year for certain tests.

-5.0

620-600

640-600

900-600

920-900

940-900

1.0

cooling load
differences [MWh]

Annual type outputs
Annual heating and cooling loads ( MW h) for all non
free- oat cases, see Fig. 8.
Annual hourly peak heating and cooling loads ( kW)
for all non free- oat cases, see Fig. 9
Difference among annual thermal loads among the non
free- oat cases, see Fig. 10.
Difference among annual hourly peak thermal loads
among the non free- oat cases, see Fig. 11.

1.0

0.0
ESP
BLAST
DOE2
SRES/SUN
SERIRES
S3PAS
TRNSYS
TASE
HITLib

-1.0
-2.0
-3.0
-4.0
-5.0

620-600

640-600

900-600

920-900

940-900

Figure 10: Annual heating load differences among the cases
(above). Annual peak cooling load differences among the
same cases (below).

691

Modelica 2006, September 4th  5th

J.I. Videla, B. Lie
7.0

50.0

5.0

Free float temperature
CASE 600FF

peak heating
differences [kW]

6.0
ESP
BLAST
DOE2
SRES/SUN
SERIRES
S3PAS
TRNSYS
TASE
HITLib

4.0
3.0
2.0
1.0

30.0
20.0
10.0
0.0

1

-10.0

2

3

4

5

6 7

8

9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24

BLAST
DOE2.1D
SUNCODE
SERI-RES
ESP
S3PAS
VUB/BRE
TASE
HITLib

-20.0

0.0
-1.0

620-600

640-600

900-600

920-900

-30.0

940-900

0.5

12.0

0.0

10.0

Free float temperature
CASE 900FF

peak cooling
differences [kW]

40.0

-0.5
ESP
BLAST
DOE2
SRES/SUN
SERIRES
S3PAS
TRNSYS
TASE
HITLib

-1.0
-1.5
-2.0
-2.5
-3.0

Time [h], day Jan 4

8.0
6.0
4.0
2.0
0.0

1

-2.0

2

3

4

5

6

7

8

9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24

BLAST
DOE2.1D
SUNCODE
SERI-RES
ESP
S3PAS
VUB/BRE
TASE
HITLib

-4.0
-6.0

-3.5
-4.0

620-600

640-600

900-600

920-900

-8.0

940-900

Time [h], day Jan 4

ESP
BLAST
DOE2
SRES/SUN
SERIRES
S3PAS
TRNSYS
TASE
HITLib

70
60

BLAST
DOE2.1D
SUNCODE
SERI-RES
ESP
S3PAS
VUB/BRE
TASE
HITLib

50
40
30
20
10
0

1

-10
600FF Max

900FF Max

600FF Min

900FF Min

600FF Mean 900FF Mean

500
450
400
350
300
250
200

ESP
BLAST
DOE2
SRES/SUN
SERIRES
S3PAS
TRNSYS
TASE
HITLib

150
100
50
0

2

3

4

5

6

7

8

9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24
Time [h], day Mar 5

600
500
400

BLAST
DOE2.1D
SUNCODE
SERI-RES
ESP
S3PAS
VUB/BRE
TASE
HITLib

300
200
100
0

1

2

3

4

5

6

7

8

9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24
Time [h], day Jul 27

44

41

38

35

32

29

26

23

20

17

8

14

11

5

2

-1

-4

-100
-7

-1
0

Incident Solar Radiation
south, cloudy [Wh/m2]

80

Incident Solar Radiation
south, clear sky [Wh/m2]

80.0
70.0
60.0
50.0
40.0
30.0
20.0
10.0
0.0
-10.0
-20.0
-30.0

Hourly occurrence for
each 1C bin

Max, mean, and min
temperature FF

Figure 11: Annual peak heating load differences among the Figure 13: Hourly free oat temperatures on January 4 for
cases (above). Annual peak cooling load differences among the case 600FF (above). Hourly free oat temperatures on
January 4 for the case 900FF (below).
the same cases (below).

Figure 14: Hourly solar incident radiation over a south facFigure 12: Maximum, mean, and minimum temperatures ing surface in a cloudy day, March 5 (above). Hourly solar
for the free oating cases 600FF and 900FF (above). Case incident radiation over a south facing surface in a clear day,
900FF temperature histogram with bins of 1C (below).
July 27 (below).

Annual hourly-integrated maximum, minimum and
average indoor air temperature for all free- oat cases
and annual hourly-integrated indoor air temperature
histogram for free- oat case 900FF, see Fig. 12.
Annual hourly-integrated maximum, minimum and average
indoor air temperature for all free- oat cases show a good
level of coincidence as well as the annual hourly-integrated
indoor air temperature histogram for free- oat case 900FF.
Annual heating and cooling loads for all non free- oat cases
show a reasonable agreement between the reference values and the values obtained with HITLib. Annual heating
load for case 900 and annual cooling load for case 920 are
slightly out of the range of the reference values, this does
not pose a signi cant problem since in general for the high
mass cases (series 900) there is an expected higher variability among the reference outputs. The difference among the
annual thermal loads among the non free- oat cases show
also a good level of agreement with the reference values.
Annual hourly peak heating and cooling loads ( kW) for all
non free- oat cases show a good level of agreement with

The Modelica Association

the reference values and the time when they occur2 . Difference among annual hourly peak thermal loads among the
non free- oat cases also show high coincidence with the
reference values.
Daily hourly outputs
Hourly free- oat cases indoor air temperature for
600FF and 900FF (January 4), see Fig. 13.
Hourly unshaded incident solar radiation on south surfaces in a cloudy day (March 5) and a clear sky day
(July 27), see Fig. 14.
Hourly unshaded incident solar radiation on west surface in a cloudy day (March 5) and a clear sky day
(July 27), see Fig. 15.
Hourly heating and cooling ( kW h) for cases 600 and
900 (January 4), see Fig. 16.
The HITLib daily hourly outputs have a high matching with
the BESTEST reference values.

692

2 this

is not presented here

Modelica 2006, September 4th  5th

A New Energy Building Simulation Library
der revision and a more re ned model addresing the multilayer glazing cases will be developed.
The library is still under-development and many improvements are foreseen and it will be freely available in the upcoming months.

Incident Solar Radiation
west, cloudy [Wh/m2]

80
70
60
50
40
30
20
10
0
-10

Incident Solar Radiation west,
clear sky [Wh/m2]

BLAST
DOE2.1D
SUNCODE
SERI-RES
ESP
S3PAS
VUB/BRE
TASE
HITLib

900
800
700
600
500
400
300
200
100
0
-100

1

2

3

4

5

6

7

8

9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24
Time [h], day Mar5

References

BLAST
DOE2.1D
SUNCODE
SERI-RES
ESP
S3PAS
VUB/BRE
TASE
HITLib
1

2

3

4

5

6

7

8

[1] J. A. Clarke, Energy Simulation in Building Design.
Butterworth-Heinemann, 2001.

9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24
Time [h], day Jul 27

Figure 15: Hourly solar incident radiation over a west facing surface in a cloudy day, March 5 (above). Hourly solar
incident radiation over a west facing surface in a clear day,
July 27 (below).

[3] J. A. Duf e and W. A. Beckman, Solar Engineering of
thermal processes. Jhon Wiley and Sons, Inc., 1991.

5.0

Heating and
cooling CASE 600

4.0
3.0
2.0
1.0
0.0
-1.0

1

2

3

4

5

6

7

8

9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24

-2.0

BLAST
DOE2.1D
SUNCODE
SERI-RES
ESP
S3PAS
VUB/BRE
TASE
HITLib

[4] F. Felgner, S. Agustina, R. C. Bohigas, R. Merz,
and L. Litz, Simulation of thermal building behavior in modelica, in Proceedings of the 2nd International Modelica Conference, Oberpfaffenhofen, Germany, March 2002, pp. 147154.

BLAST
DOE2.1D
SUNCODE
SERI-RES
ESP
S3PAS
VUB/BRE
TASE
HITLib

[5] M. Iqbal, An introduction to solar radiation.
emic press canada, 1983.

-3.0
-4.0
-5.0

Time [h], day Jan 4

4.5

Heating and cooling
load CASE 900

[2] D. B. Crawley, J. W. Hand, M. Kummert, and B. T.
Grif th, Constrasting the capabilities of building energy performance simulation programs, US Department of Energy, ESRU University of Strathclyde, SEL
University of Wisconsin-Madison and National Renewable Energy Laboratory, Tech. Rep., 2005.

4.0
3.5
3.0
2.5
2.0
1.5
1.0
0.5
0.0
-0.5

1

2

3

4

5

6

7

8

9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24
time [h], day Jan 4

Figure 16: Hourly heating and cooling loads on Jannuary 4
for case 600 (above). Hourly heating and cooling loads on
Jannuary 4 for case 900 (below).

Acad-

[6] R. Judkoff and J. Neymark, International energy
agency building energy simulation test (bestest) and
diagnostic method, National Renewable Energy Laboratory, Tech. Rep., 1995.
[7] M. Martin and P. Berdhal, Characteristics of infrared sky radiation in the united states, Solar Energy,
vol. 33, pp. 321336, 1984.
[8] T. Muneer, Solar Radiation and Daylight Models for
the Energy Ef cient Design of Buildings. Architectural press, 1997.

5 Conclusions

The nal goal of the library is to give intuitive blocks for
modeling the building thermal response to test and develop [9] A. Rabl, Active Solar Collectors and their applicaadvanced controllers for system level simulation. Modeltions. Oxford University press, 1985.
ica language seems to be an adequate language for this purpose, allowing a simple equation-based formulation of well- [10] R. Siegel and J. R. Howell, Thermal Radiation Heat
Transfer, 3rd ed. Hemisphere Publishing Corporaknown building models.
tion, 1992.
BESTEST method only compares certain aspects of an energy representation of a building and many models of the
new library have not been presented since they can not be [11] C. P. Underwood and F. W. H. Yik, Modelling Methods for Energy in Buildings. Blackwell Publishing,
evaluated (e.g. interzone convective heat ow). Addition2004.
ally, not all the BESTEST quali cation cases have been
tested since some of them are of no interest for the library
purpose (e.g. hangout shading). Nonetheless, a quality
measurement in the aspects studied in the test cases can be
accepted as a good starting point in the validation procedure
of the library.
Many of the models used for the BESTEST are still under
development but the library seems to lack of any signi cant
modeling error. Particularly, the window model is still un-

The Modelica Association

693

Modelica 2006, September 4th  5th

J.I. Videla, B. Lie

The Modelica Association

694

Modelica 2006, September 4th  5th

UnitTesting: A Library for Modelica Unit Testing

UnitTesting: A Library for Modelica Unit Testing
Dr. Michael M. Tiller1
Emmeskay, Inc.
Plymouth, MI USA
mtiller@emmeskay.com

Burit Kittirungsi
Emmeskay, Inc.
Plymouth, MI USA
burit@emmeskay.com

Abstract
One of the challenges when attempting to deploy
model based development processes in industry is
the distrust that many engineers have of models. It
is often the case that engineers favor experiments
and data over models and simulation results. The
typical reason given for this distrust is that engineers
often feel they can trust information collected from
actual hardware during an experiment more than
they can trust simulation results.
There is some validity in this notion. In many
ways, modeling is as much an art as it is a science.
The process of developing models involves creativity and many subjective decisions. In order for modeling to be thought of as a science, it needs to be
viewed as more objective and analytical. The process of developing models must mature from an ad
hoc process into a process that includes formal validation, verification and quality assurance processes
just like any other product.
This paper describes the UnitTesting library
which is a commercial Modelica library offered by
Emmeskay, Inc. The UnitTesting library supports automated testing of Modelica models to ensure, among other things, the ongoing validity and
accuracy of the models.
Keywords: testing, quality, coverage

1

Background

Although not widely recognized or appreciated,
model development closely parallels software development. This is particularly true for model development in Modelica because, in addition to the fundamental mathematical constructs required in a modeling language, Modelica has incorporated many software engineering principles into the language design
(e.g. encapsulation, interface compatibility, etc.).

For this reason, many software development
methodologies can be applied to model development
as well. A recent trend in software development has
been the adoption of testing methodologies to improve quality. These methodologies involve codifying requirements and automatically testing those requirements. One example of this is the JUnit
library[1] developed by Gamma and Beck which can
be used to automatically test Java classes. Most previous efforts at applying testing to model based control system development have focused on embedded
code[2] and perhaps a few invariant physical or
mathematical properties[3]. In this paper we propose
a generic approach that handles testing for all types
of Modelica models whether their behavior is continuous, discrete or a mixture of the two.
The purpose of unit testing is to identify problems
at their source. This is done by using carefully designed test cases to immediately identify and isolate
model errors. One convenient way of identifying errors as they are introduced into existing models is to
compare results using the new model versions with
baseline results from previous versions.
In order for this kind of testing to be effective, it
needs to be automated and focused. For example,
lacking the appropriate tools to automate the comparison process some developers may have to rely on
visual inspection. In such cases, the testing process
becomes tedious and error prone. Furthermore, test
cases themselves must be carefully chosen so that
failures are meaningful and help to isolate errors.
For example, if only a few complex models are used
as test cases, it will be difficult to trace the source of
the problem. Without this degree of automation and
focus, identifying errors is like trying to identify a
poorly tuned instrument in a large orchestra. Assuming you are astute enough to notice the problem, simply detecting the problem is not sufficient to identify
the source of the problem. If, on the other hand, you
were to analyze each individual instrument (or even
small clusters of them) you would be able to isolate

1 All correspondence should be directed to the first author.

The Modelica Association

695

Modelica 2006, September 4th  5th

M.M. Tiller, B. Kittirungsi

the source of the problem much faster. The
UnitTesting library provides not only a framework for creating test cases but also includes automation and reporting tools.

2

Use Case

In this paper, the use case we consider is that of a
library developer who wishes to test a specific library (and only that library). Under these assumptions all models fall in to one of three categories.
The first category is library components. These
are the components of the library being tested (i.e.
the components that the user of the library would
drag and drop into their models). The next category
are non-library components. These are component
models from libraries other than the library being
tested2. For example, components from the Modelica standard library would generally be non-library
components (unless, of course, you were a Modelica
Standard Library developer testing the Modelica
Standard Library). The last type of model is a test
case. The test cases are models that instantiate library and non-library components and exist only to
test library components (i.e. they are not considered
library components).
Before proceeding, we need to describe a few
more details about these test case models. The principle behind a test case is that it is a model that is instrumented to compare a simulated result with some
expected result. How these expectations are represented will be discussed in greater detail later. The
important point is that the test case model itself includes information about its expected result. When
the test case is simulated it can report whether the
expected result was achieved or not. In the next section, we will commonly refer to the case where a test
case fails. This is what happens when the test case is
simulated and fails to match all the expected results.

3

Metrics

3.1

2 The same model could be a library component in one
circumstance and a non-library component in other
(depending on what library was being tested).

Component Coverage

Component coverage measures what percentage
of the library being tested is actually covered by
the test cases for that library. As a consequence of
this analysis, library components that are never tested can be identified. The premise behind this metric
is that if a component never appears in a test case it
will be impossible to identify errors in that component.
The value of this metric is computed as follows.
First, we consider each library component in turn
and determine whether it appears in any of the test
cases. We say that the library component appears in
a test case if it is instantiated (in the Modelica sense)
as part of the instantiation of that test case.
To evaluate the coverage metric for a library we
simply divide the number of library components that
appear in a test case by the total number of library
components. A result of 100% indicates that the library has 100% component coverage. Said another
way, every component in the library appears in at
least one test case.
This metric is the most basic metric. Getting
100% component coverage is simply the first step in
establishing a robust testing process. In principle,
100% component coverage implies that a mistake in
a single component cannot slip through but will instead be detected via the failure of at least one test
case. However, as we shall shortly see this is a very
optimistic assumption.
3.2

When it comes to model quality and testing, we
cannot convey the state of a model library as a single
number. Instead, we depend on a variety of metrics
to assess different desirable properties. In this section, we will introduce several different metrics and
the issues that they address.

The Modelica Association

For all of the metrics presented in this section, it
is possible to do at least some basic calculation of the
metric using only the Modelica source code (i.e.
without the need to run any simulations). However,
in many cases the basic metrics and generated reports are enhanced (sometimes considerably) by access to simulation results. If available, the
UnitTesting tools will use such results to conduct a more thorough analysis.

State Coverage

Earlier, we introduced the notion of an expected
result. When building a test case model, many variables are involved. It is generally not sufficient to
validate a model based only on the value of one variable in that test case.
So the question then becomes what variables
should be checked?. State coverage is one way to
address this issue. It is quite common in Modelica to
have alias variables. These are variables that have a

696

Modelica 2006, September 4th  5th

UnitTesting: A Library for Modelica Unit Testing

unique name in the instance hierarchy but are mathematically identical to other variables. In fact, due to
the semantics of connections the vast majority of
variables in a large Modelica model are typically
alias variables. Obviously, there is no sense in confirming the value of all these redundant variables.
Instead, we want to focus on the unique signals. But
even these are often computed from each other. For
example, if we have the equations x=y+5, we don't
necessarily need to check both x and y.
To minimize the set of signals to check while
maximizing the chance of catching an error in the
model we should focus on the state variables. For
our purposes, we define the state variables in the
model as those variables that uniquely define the
state of the model (and from which all unique continuous and discrete signals must therefore be calculated).
Precisely determining the state variables in a
Modelica model can be quite tricky. In fact, state selection is typically part of the compilation process of
a Modelica model and this process is non-trivial.
Fortunately, for our purposes we can accept false
positive results. So we employ a few basic rules
that help us to identify all the potential states. It may
turn out that these states are later eliminated via constraint equations (i.e. the states are not, in fact, independent) but that is not so important for our purposes
and only results in a slight amount of redundancy in
our checking.
We consider a variable a state if it is either assigned a value in a when clause (i.e. it is a discrete
variable) or the variable appears within the der(...)
operator. As mentioned previously, such variables
are not necessarily actual states but this substantially
narrows the set of variables to consider and ensures
that we will at least catch all potential states. Said
another way, to achieve state coverage it is sufficient
to identify the potential state variables but not necessary to identify the actual state variables.
The state coverage of a test case is determined by
taking the the number of states for which expected
results are provided and dividing that by the total
number of states in the model. Since the set of states
can be automatically determined a priori it is possible to analyze a test case and automatically instrument it with all the necessary expected results in order to achieve 100% state coverage. Note that we
take a very conservative position here that the expected results must refer directly to these states (and
not to aliases) in order to be considered covered3.

It should be noted that it might also be useful to
apply input coverage and output coverage to a
test case as well. That is to say that expected results are supplied for all top level input and output
signals and all parameters in the model. The combination of input, output and state coverage helps ensure that any issues that arise during testing are truly
due to behavioral changes in the library components
and not due to changes in the values of test case parameters or simulation conditions. However, the
UnitTesting library does not currently address
input and output coverage.
3.3

Previously we mentioned the conditions under
which 100% component coverage can be achieved.
The problem with the component coverage metric is
that it assumes that simply instantiating a component
is sufficient to test all functions of that component.
While this is true of very simple models, it is not true
in general.
A more complete metric is
condition/decision coverage [4].
The goal of condition/decision coverage is to verify that logical aspects of the models are completely
exercised. To achieve decision coverage we must
verify that every decision being made in the code is
exercised (i.e. for each decision both a true and
false result is generated). Coming up with test cases that achieve complete decision coverage is challenging (and in some cases, simply not possible). It
should be noted that the UnitTesting library only
evaluates coverage a posteriori and does not provide
functionality to identify how uncovered decisions
can be covered.
Decisions can be compound expressions involving many individual boolean values. For example in
the statement:
if a>10 and b<5 then
the decision is based on the value of the entire expression a>10 and b<5 but this decision contains two individual conditions, e.g. a>10 and
b<5. Even if both outcomes of the decision have
been covered in a test case, this does not mean that
every condition has been verified. For example,
imagine b always had a value of 3. In that case all
decisions would be covered as long as a had a value
both higher and lower than 10. But this does not test
whether the condition b<5 was implemented correctly (e.g. b<6 would work just as well).

3 An alternative approach would be to determine all
alias variables of the potential states and see if they

The Modelica Association

Decision/Condition Coverage

697

were being compared against expected results but we
do not currently support that.

Modelica 2006, September 4th  5th

M.M. Tiller, B. Kittirungsi

For this reason, condition coverage expands the
notion of decision coverage to include all possible
values of every condition. However, it is not necessary to exhaustively test all conditions. Instead,
something called modified condition/decision coverage is sufficient but the definition of modified
condition/decision coverage is beyond the scope of
this paper.
In order to evaluate decision coverage it is first
necessary to construct a decision graph. This shows
all possible outcomes in a model. As an example,
consider the very simple controller model shown in
Figure 1. Essentially, this controller model provides
a constant actuation force if the system it is controlling goes outside a specified set of bounds. It
also includes the ability to suppress this output
when needed.
Figure 2: Controller Model Decision Tree
model Controller
import Modelica.Blocks.Interfaces.*;
RealInput u;
RealOutput y;
BooleanInput suppress;
parameter Real lowerLimit;
parameter Real upperLimit;
parameter Real level;
algorithm
when u>=upperLimit then
if not suppress then
y := -level Outcome 1;
else
y := 0 Outcome 2;
end if;
end when;
when u<=upperLimit then
y := 0 Outcome 3;
end when;
when u<=lowerLimit then
if not suppress then
y := level Outcome 4;
else
y := 0 Outcome 5;
end if;
end when;
when u>=lowerLimit then
y := 0 Outcome 6;
end when;
when suppress then
y := 0 Outcome 7;
end when;
end Controller;

As previously mentioned, the UnitTesting library includes automation and reporting tools. As
part of the standard reports, a decision tree is rendered for each model. Figure 2 shows the decision
tree for the controller model shown in Figure 1. Each
possible outcome is indicated by dark blue squares
with dashed outlines. Decisions result from if,
when and while statements as well as if expressions.

Figure 1: A Simple Logical Controller Model

To visualization decision coverage it is necessary
to use simulation results to assess whether each outcome has been reached. Given this information, we
can color the figure, as shown in Figure 3, such that
outcomes that have been achieved are green and outcomes that have not are red. To evaluate the deci-

The Modelica Association

Figure 3: Decision Tree with Coverage Information

698

Modelica 2006, September 4th  5th

UnitTesting: A Library for Modelica Unit Testing

sion coverage, we simply divide the number of green
outcomes by the total number of possible outcomes.
So in Figure 3, the decision coverage would be 71%.
Along with these decision figures, the
UnitTesting reports include information about
the individual conditional expressions associated
with each decision. However, it does not currently
visualize the coverage of these conditions (mostly
for the sake of visual clarity).
3.4

Pinpoint Metric

The pinpoint metric is a very subtle concept. Having 100% component coverage implies that if a model suddenly stops behaving as expected, one or more
test cases will fail. If each test case included only a
single library component then it would be very easy
to trace a particular failure to a particular model or
even to a particular equation/statement.
However, it is not always practical to construct
such precise test suites. For example, one library
component may depend on the presence of another
library component in order to function. It may not
be possible to test them independently. The goal of
the pinpoint metric is to determine how easy it will
be to use test case failure information to identify potential sources for the failure. In other words, for a
given set of test cases how easy will it be to identify
the component (or set of components) that have errors based on which test cases passed and which
failed.
To this end, we would like to compute the probability of an error in a specific component given the
fact that exactly one test case has failed. Mathematically speaking, what we are trying to achieve can be
expressed in terms of probabilities. For each library
component, we would like to compute:

P C iF j Fk  k  j
where Ci represents an error in the ith library component and Fj represents a failure in the jth (and only the
jth test case). Given a means of computing such conditional probabilities, the pinpoint metric, , is defined as:

C i =max P C iF j  Fk  k  j 
j

complex test suites, so we will not include them in
the paper.
Once we have computed the pinpoint metric for
each component, we can visualize them as follows.
Consider the test suite shown in Table 1. An X in
this figure indicates the presence of a particular component in a particular test case. For example, a failure of all test cases points to component C2 as the
likely source of the error since it is present in all test
cases. For simple test suites, this kind of deduction
is not difficult but for larger test cases it is nice to
automate this analysis. Furthermore, the issue is
complicated by the fact that a component might fail
in one test case but not in others. For example, it is
possible for an error in C2 to cause test cases 1 and 3
to fail but not test case 2. Such a result might give
the misleading impression that C1 must be the source
of the error. This is the main reasons that the derivation of the pinpoint metric is based on probabilities.

T1

C1

C2

X

X

T2
T3

X

C3

X

X

X

X

Table 1: Sample Test Suite

The main purpose of the pinpoint metric is to determine how well the test suite has been constructed
such that component errors lead to outcomes that allow us to easily track down the source of the error.
This is analogous to the concept of observability in
plant models. The idea here is that given the outputs
of the system (i.e. whether each test case passed or
failed) we can gain some insight into the internal
state of the system (i.e. whether a given component
is working properly or not).
The UnitTesting library tools also have the
ability to compute the conditional probability that a
given component contains an error given not just a
single test case failure (as previously discussed) but
any arbitrary pattern of test case failures. With this
information it is then possible to construct an accountability matrix like the one shown in Table 2.

The ideal value for the pinpoint metric is 1.0 because
that indicates that a failure in one test case definitively points to a specific component as the source of the
error. The equations used in computing the pinpoint
metric are actually quite involved, especially for

T1

T2

T3

T1

?

?

C1

T2

?

?

C3

T3

C1

C3

?

Table 2: Accountability Matrix

The Modelica Association

699

Modelica 2006, September 4th  5th

M.M. Tiller, B. Kittirungsi

The accountability matrix allows us to assess,
given a failure in one or two tests, which component
is the most likely to have an error. Each row and
column in the accountability matrix represents a test
case that has failed. Each cell in the table represents
the most likely component responsible (i.e. the one
with the largest conditional probability). The accountability matrix in Table 2 was constructed based
on the information in Table 1. A question mark in
the table indicates cases where there is no clear
choice for the responsible component.
C1
T1

C2

Figure 4: Standard Library EMF Model

C3

X

T2

X

T3

X

X

X

Table 3: Sample Test Suite
An ideal accountability matrix would show every
component in at least one cell. As we can see from
Table 2, failure in only two components can be reliably determined for the test suite in Table 1. On the
other hand, if the test suite was constructed as shown
in Table 3 we would get the accountability matrix
shown in Table 4 where each component appears in
at least one cell.
T1

T2

T3

T1

C1

?

C1

T2

?

C2

C2

T3

C1

C2

C3

The accountability matrix takes the same information as the pinpoint metric and renders it in a very
practical form that allows the developer to use
knowledge about test case failures to work backward
to identify the most likely source of the error. As
mentioned previously, the value of automation is in
being able to construct such tables for complex test
suites.

Modelica.Electrical.Analog.Basic.EMF

Angular
Momentum

flange_b.tau = 0

Charge

p.i+n.i = 0

annotation(msk(coverage(storageTerm(qua
ntity=AngularMomentum)));

Conservation Checking

In some modeling applications, it is particularly
important to make sure that all interactions between
components are properly accounted for. Let us start
with a very simple example. Consider the EMF
model from the Modelica Standard Library shown in
Figure 4. This model is a basic DC motor model that
relates current and voltage to torque and speed.

The Modelica Association

Quantity

Note that one particular conservation equation is
rendered in a bold red font. This is to draw our attention to the fact that, based on structural analysis
only, this component is unlikely to conserve angular
momentum. This is because any exchange of momentum with another component would violate this
equation. In some cases, such an equation is OK because the device includes some storage term. To
avoid getting erroneous error messages, the
UnitTesting tools will look for a variable inside
the model that includes an annotation of the form:

Table 4: Accountability Matrix

3.5

To understand the conservation analysis, consider
Figure 4 a free body diagram for the EMF model.
Each connector represents a potential external influence on the EMF model. Generally speaking, the
flow variables on the connector represent the flow of
a conserved quantity into that component. In the
EMF model, we see both electrical and mechanical
interactions. If we run the UnitTesting conservation analysis on this component, the report includes a balance equation for all conserved quantities:

Such an annotation indicates to the tools that this
variable is a storage term and should be included in
the balance equations. The ability to specify a storage term means that it should always be possible to
avoid a false positive for conservation errors.
Note that the EMF model does not include any storage term so the UnitTesting library is correct
when it highlights this as an error in the model.

700

Modelica 2006, September 4th  5th

UnitTesting: A Library for Modelica Unit Testing

So far, we have only considered structural analysis but the conservation analysis also has the ability
to use simulation results to determine if, in practice,
the balance equation has been satisfied. In that case,
it will highlight components that failed to properly
balance these quantities while running the test cases.
The conservation analysis currently only addresses non-energy quantities. The reason energy is currently excluded is that computing the energy across
the boundaries requires, in many cases, computing
the derivatives of variables on the connectors. Unfortunately, the simulation may not need to compute
(and therefore may not store) the derivatives required
to perform this analysis (either because they are not
necessary or because it computes the derivative of an
alias variable instead). Ideally it will be possible in
the future to conduct conservation analysis for energy as well. In that case, the complete conservation
analysis process would be:
1. Check to make sure that the sum, over all connectors, of each conserved quantity besides energy (e.g. angular momentum, mass, current, etc)
either equals zero or balances the internal storage
of that quantity.
2. Check to make sure that the sum (computed
either symbolically or numerically based on simulation results) of power flow over all connectors
either equals zero or balances the internal storage
of energy.
So far, we have focused on conservation within
the components themselves. It may also seem necessary to analyze the connections between components
to verify that they also conserve energy. However,
for any physical connector were power flow can be
computed using the variables on the connector (or
their derivatives), energy conservation is automatic
(e.g. all physical connectors in the Modelica Standard Library).
It may seem like such errors are easy to detect,
but it is very easy to overlook important interactions.
We already discussed the EMF model in the standard
library. It may appear that the only possible error is
one where only a single connector is included in the
component. But another very common error is the
one shown in Figure 5. Note that this model has two
ports. So it does not suffer from the obvious error of
including only a single port (and no storage term)
that the UnitTesting library identified previously
in the EMF model. The error in this model is more
subtle than the one in the EMF model.

Figure 5: Non-Conserving Gear Model

To understand the nature of the error it is useful
to recognize that torque applied to a component represents a flow of angular momentum either into or
out of the component. This gear model, like the
EMF model, does not include a storage term. Students are often taught to formulate the equations for
a gear by first assuming a kinematic relationship between the element speeds, i.e. a = R*b where R is
the gear ratio. We then assume that the power into
the component equals the power out, i.e.
aa+bb=0. Using these two relationships it is trivial then to derive the relationship that b=-R*a.
Like a good magic trick, it appears that nothing
suspicious has occurred here. Everything seems logical. But for this component the UnitTesting
tools would generate the following report:
Quantity

Angular
Momentum

ErroneousGear

flange_a.tau + flange_b.tau = 0

Based on structural information alone, the
UnitTesting tools would not highlight this equation because it cannot determine a priori that this
equation cannot be satisfied by the component4. But
when it examines the simulation results it will see
that something is not correct.
The source of the problem is that the constitutive
equation, b=-R*a, cannot be correct. This is because the balance equation shown above would then
be a-R*a.=0. Assuming that the gear ratio is not 1,
this equation implies that the amount of angular momentum going into the gear is not equal to the
amount going out. Since this component has no storage term, angular momentum is not conserved by the
component.
So where is the error? The error comes from not
properly accounting for reaction torques. The model
4 Of course, with sophisticated symbolic processing this
would be possible.

The Modelica Association

701

Modelica 2006, September 4th  5th

M.M. Tiller, B. Kittirungsi

is implicitly grounded (i.e. it is assumed that the
housing does not move). Ironically, this is exactly
the same issue that the EMF model has. Torque cannot be generated out of nothing. We cannot forget
Newton's Third Law, For every action there is an
equal and opposite reaction. For a gear to multiply torque something has to hold the gear housing
(and absorb the reaction torque). This is exactly why
the Modelica Standard Library gear looks like the
one shown in Figure 6 (note the presence of the third
port).

After an appropriate system model has been created, it can be turned into a test case by simply inheriting from the UnitTesting.TestCase model.
This identifies the model as a test case. The TestCase model requires two parameters to be specified.
The first is the name parameter which defines a
unique name for identifying the test case5. The second parameter, resultsDir, indicates what directory any test result information should be stored in6.
Typically, this results in a model that looks something like:
model TestComponentA
import UnitTesting.TestCase;
extends TestCase(name=TestComponentA, resultsDir=testResultsDir);
...
end TestComponentA;

In this case, testResultsDir is presumably
some package level constant to define where all test
results should be placed.
4.2
Figure 6: Conservative Gear

3.6

Style Guideline Compliance

A whole family of metrics can be constructed
based on style guidelines. It is possible to formulate
metrics around guideline adherence to help drive improvements in libraries. While this is beyond the
scope of this paper (see [5] for a discussion of this
topic), it should be noted that a comprehensive approach to library quality could benefit from attention
to these kinds of details since they affect, in some
cases significantly, user perception of library quality
in subjective ways.

4

Using the Library

This section provides a basic overview of how the
library is used in practice.
4.1

Making a Test

The first step in testing is to create a set of test
cases. It helps to think of each test case as an experiment to test individual components or small groups
of components. The fewer components in a test
case, the better the pinpoint metric will be for the library components.
The Modelica Association

Adding Results

For the test case to be useful, it should include expected results to validate the model against. Although all kinds of expected results are possible, the
most common type of result is one that compares the
current simulation results to a previous baseline result. This kind of result is represented by the
ScalarResult model. A typical declaration of
the ScalarResult model might look like:
ScalarResult
result1(name="inertia.phi", y=inertia.phi);
where the name parameter should be given a unique
value (at least within this test) to distinguish it from
other results and the equation for y should set it
equal to the variable being validated.
As mentioned previously, better state coverage
will result in better error detection rates. However,
instrumenting the model to check all possible states
is tedious because it involves typing in many
ScalarResult declarations. For this reason, the
UnitTesting reports include a sample ScalarResult declaration (like the one above) for each
state in the test case. Copying these declarations
5 If, at some point, the Modelica language is expanded
to provide a function that returns the fully qualified
name for any class then this parameter would no
longer be necessary.
6 Again, better introspection support in the language
could eliminate this parameter as well.

702

Modelica 2006, September 4th  5th

UnitTesting: A Library for Modelica Unit Testing

from the report into the test case ensures 100% state
coverage.
4.3

Generating Expected Results

As mentioned previously, it is quite common to
base the expected results on previously determined
simulation results. Such results provide a baseline
on which to assess the model over time. It would be
quite tedious to manually specify all expected results
(e.g. at time=4.32 the value of the signal should be
0.8203, and so on).
For this reason, the
UnitTesting library provides a means to extract
expected values from existing simulation results.
For example, the previously mentioned TestCase model includes a special generate flag.
When this flag is set, each ScalarResult component extracts the value of the variable it is monitoring and places it in a special file. When the generate flag is not set, these same components assume
that results have already been generated and attempts
to load them from the results directory (specified in
the TestCase extends clause). The default value
of the generate flag is false. So the first time the
test case is run it is necessary to set the generate
flag to generate the baseline results. After that, the
generate flag should not be set and it will run
properly as a check against the baseline results.
It is always a good idea to keep models under
version control. In that case, the baseline results
should also be version controlled. This is because it
will be difficult (if not impossible) to regenerate
these baseline results in the future. Note that it is not
always necessary to generate baselines results.
Some expected result models allow comparisons
against analytical solutions.
Furthermore, the
UnitTesting library allows new kinds of expected result models to be created by simply extending
from the UnitTesting.TestResult base class.
4.4

Running the Test

Once a test case has been created by extending
from the TestCase base class and adding any expected result components, the test case is ready to be
run. Running a test just means running a simulation
of the test case model. The TestCase base class
and expected result components contain all the
code necessary to automatically determine whether
the test case has passed or failed.
There are many things that can cause the failure
of a test case. The obvious failure mode is that the
computed value for a variable does not match the exThe Modelica Association

pected value (within some pre-specified tolerance).
But there are other subtle ways a test can fail. For
example, if the expected results occur over the time
interval from 2 seconds to 7 seconds but the simulation runs from 0 seconds to 6 seconds, this is a failure. Recall our previous definition for a failure was
that a test case did not match all expected results. In
this case, the simulation failed to match the expected
results between 6 seconds and 7 seconds because it
did not simulate that period of time. This is a failure
because the simulation ended too soon and it did not
check all expected results. A similar failure occurs if
the simulation starts too late.
If an expected result does not match, the simulation will terminate immediately and generate a message describing the reason for the failure. In some
cases, in order to understand why a test is failing it is
useful to run the test case to completion in spite of
the failure. In this case, setting the fatal flag to
false prevents the immediate termination of the
simulation due to failure. This allows the full solution trajectory to be reviewed which may provide
some insights into why the test failed.
4.5

Organizing Test Cases

The UnitTesting library identifies test cases
based on whether they inherit from the UnitTesting.TestCase class. For this reason, it does not
care how test cases are organized in the package hierarchy. Some developers may wish to keep the test
cases in the same library as the library components
while others may chose to maintain a separate library
just for test cases. The UnitTesting library functions equally well in either scenario.
4.6

Automated Testing

Although it may occasionally be useful to run a
single test, complete validation requires that all tests
be run. For this reason, the UnitTesting library
includes several built-in functions that, in conjunction with the Commands menu in Dymola, allow
all tests to be run with the click of the mouse.
4.7

Reports

In the ideal situation, the test suite provides 100%
component coverage, 100% condition/decision coverage and 100% state coverage and running all the
tests yields no errors. But it takes some time to get
to this point. In the meantime, library developers
need assistance to understand what kinds of tests are
required or what components are the most likely

703

Modelica 2006, September 4th  5th

M.M. Tiller, B. Kittirungsi

source of the test failures that occur. This is where
the UnitTesting reporting capabilities come in.
In addition to the metrics described previously,
the UnitTesting reports generate additional information like dependency graphs, accountability
matrices, decision trees, etc. They also include further analysis (beyond whether a test passed or failed)
to highlight conservation issues and other information based on simulation results.

[4]

[5]

Hayhurst, K. J., Veerhusen, D. S., Chilenski,
J. J., Rierson, L. K., A Pratical Tutorial on
Modified Condition/Decision Coverage,
NASA Center for AeroSpace Information,
NASA/TM-2001-210876.
Tiller, M., Parsing and Semantic Analysis
of Modelica Code for Non-Simulation Applications, Proceedings of the 2003 Modelica
Conference.

The reports are generated as HTML. This HTML
is then embedded, using the Documentation annotation in Modelica, in special packages that are automatically inserted into the test case library. These
packages include the DocumentationClass annotation so, like the Modelica Standard Library
User's Guide, they can be immediately identified in
the package hierarchy as reference documentation.

5

Conclusions

For library developers, testing can help ensure a
quality product. Rather than counting on visual inspection of results from a few complex system models, the UnitTesting library and associated automation and reporting tools can be used to create a
fine mesh of tests to detect errors or discrepancies at
the lowest level and quickly identify the source of
the problem.
This formal approach provides a rigorous validation and verification process for the underlying models. The presence of such a process may eliminate
barriers preventing library components from playing
a more significant role in the product development
process.

References
[1]
[2]

[3]

Husted, T., Massol, V., JUnit in Action,
Manning Publications, ISBN 1930110995.
Busser, R. D., Blackburn, M. R., Nauman.,
A. M., Automated Model Analysis and Test
Generation for Flight Guidance Mode
Logic, Proceedings of AIAA/IEEE Digital
Avionics Systems Conference, v 2, 2001.
Busser, R. D., Boden, L. M., Extending
Simulink Models with Natural Relations to
Improve Automated Model-Based Testing,
Proceedings of 29th Annual IEEE/NASA Software Engineering Workshop, 2005.

The Modelica Association

704

Modelica 2006, September 4th  5th

Session 6d

Session 6d
Multidomain Systems

The Modelica Association

705

Modelica 2006, September 4th  5th

Session 6d

The Modelica Association

706

Modelica 2006, September 4th  5th

If We Only had Used XML...

If we only had used XML...
Ulf Reisenbichler Hansjrg Kapeller Anton Haumer
Christian Kral Franz Pirker Gert Pascoli
Arsenal Research
Gie nggasse 2, 1210 Vienna, Austria
phone +43505506606, fax +43505506595, e-mail: hansjoerg.kapeller@arsenal.ac.at

Abstract
The rst part of this paper will provide a general
overview over XML technology and will discuss some
aspects of designing applications of XML in respect of
storing and retrieving data in a standardized and ef cient way. This overview will focus on the essential elements of XML needed for data modeling. The second
part will introduce a dynamic link library based implementation for XML data handling out of Dymola.
Consequently these considerations should lead into a
discussion of how to set up standardized applications
of XML for modeling and handling data in various domains of engineering to bene t from the capabilities
of XML technology for data exchange in general and
speci cally for data handling in simulation environments like Dymola.
Keywords: XML; data modeling; data handling; data
interchange; XML schema; XSD

ing the standardized structure of XML will place emphasis on the data itself and their coherency. XML
documents can be read and intuitively understood by
humans without any additional information as well as
processed by computers using already existing analysis tools.
The objective of this paper is to motivate  once more
 the general use of XML for data handling [5]. The
development of ModelicaXML [3]  a representation
of Modelica [1] source code using XML  points out
that XML is the right concept. A brief theoretic outline will clarify terms and concepts without getting to
deep into theoretical computer science or formal syntax and semantics. An interdisciplinary example will
demonstrate how to interface XML data sources out of
Dymola, and will show: Using XML is easy, intuitive
and the best investment for the future.

2

XML

1 Introduction

2.1

Is there an answer to the recurring question of how to
store data for easy and ef cient data handling and data
interchange? Do we have to continue to pick and poke
bits and bytes out of unreadable data chunks, or is it
possible to retrieve data much more convenient? Is
there a way to design a language to describe data and
data structures for our own specialized purposes? Will
anybody intuitively understand what we tried to formalize? The response to all of these questions would
be: Yes . . . if we only had used XML.
In addition to structure and interpretation of data, storing and retrieving data either in plain text or binary
formats will always cause explanatory effort of how
these data are stored  e.g. position of characters or
bytes. This fact necessitates the development of individual parsing algorithms for each data format. Us-

XML (Extensible Markup Language) was derived
from the 1986 standardized SGML (Standard Generalized Markup Language) going back to the late 60ies
GML (Generalized Markup Language). The XML 1.0
Recommendation was published rst on 10th February 1998 by the World Wide Web Consortium (W3C).
The most current version XML 1.1 was published on
4th February 2004 [7], [8].
These recommendations were  more or less accurate  realized within different applications of XML.
Thereby XML evolved over the past few years into a
widespread standard for handling data and documents.
Within this evolution various techniques and standards
for processing XML documents were developed and
implemented which can be easily adapted for speci c
needs.

The Modelica Association

707

History

Modelica 2006, September 4th  5th

U. Reisenbichler, H. Kapeller, A. Haumer, C. Kral, F. Pirker, G. Pascoli

2.2

General

The main idea of all markup languages is to separate the content of a document from its structure.
Whereas the structure can represent the formatting
of a document  as in (X)HTML ((Extensible) HyperText Markup Language)  or the informational content
of data within a document  as in e.g. MathML (Mathematical Markup Language), an XML based encoding standard describing mathematical notation. The
inherent difference between these applications of the
concepts and the generalized standards of markup languages is that these standards are metalanguages. A
metalanguage like XML provides the opportunity to
formulate new languages following speci c newly
de ned rules in accordance to the restrictions given by
the standardized stipulations.
De ning a new language is strictly speaking the only
task when creating an application of XML. This language can be very simple or highly complex. All languages must have certain meaningful elements  the
tokens  and rules which describe the valid sequences
and hence restrict the possible combinations of these
elements  the syntactic rules or syntax. Mapping the
patterns generated by these rules to a structural model
and projecting the elements into this derived representation of the model will give a sentence of this language.
Within XML the generated sentence would be the
resulting  le derived from the freely de ned syntax
and tokens of the de ned markup language, i.e. the
application of XML, representing the ruleset for generating and understanding documents following these
rules. But XML is not simply the resulting  le, it
is the sum of the concepts and utilization of the surrounding technologies.

element may be solely character data or other elements
or both of them.
A token without content can be written as <x/>, the
empty element tag. Tokens can be speci ed further
with attributes of the form attribute="value".
Attributes may only appear in start tags and empty element tags, e.g. <x attribute="value">, and
must be unique.
2.3.2

Documents

An XML document is the data structure which is normally denoted as XML le when saved to a persistent
storage device. Combining the tokens to a document
only two structural conditions must be kept:
1. Every document must have a root element
2. All tags must be properly nested

These conditions will build the structural model of a
tree. This is often stated as being the syntax of XML.
But using a tree as structural model is not applying
syntactic rules to that model. The model only gives
the structure on which the syntax will operate. If a
document meets this condition, it is well-formed and
therefore an XML document. By de nition a not wellformed document is no XML document.
Beside this tree of tokens an XML document
can include other non token elements. Usually
an XML document starts with an XML declaration of the form <?xml version="1.0"
encoding="UTF-8"?>.
The attribute
version="1.0" is mandatory.
The optional
attribute encoding="UTF-8" declares the used
character set and should always be used to ensure
correct cross locale processing. A comment can
be added between <!-- and --> outside the tags
anywhere in the document. There are some more
2.3 Components
elements de ned by the W3C recommendation but
This section will provide a synopsis of the basic con- will not be discussed here.
cepts and some components within XML technology
to demonstrate how they interact one with each other
2.3.3 Parsers
unfolding the power of XML.
The core piece of machine processing XML documents is an XML parser implementing all the features
2.3.1 Elements
needed for a speci c task. None of the currently availThe token elements of XML are represented by the able parsers  such as Xerces, libxml, Saxon or Micharacters enclosed in angle brackets, which mark the crosoft MSXML  is implementing all of the features
characters surrounded by the combination of a start recommended by the W3C up to 100% [2]. While
tag <x> and the corresponding end tag </x>  with parsing mechanisms can be very different, the inter`/' as symbol for ending the tag  as their content, face presenting the content of an XML document to
whereas x is the name of the token. The content of an an application will follow one of the standard parsing
The Modelica Association

708

Modelica 2006, September 4th  5th

If We Only had Used XML...

models, i.e. the Simple API for XML (SAX) [4] or
Document Object Model (DOM) [6].
The Simple API for XML is an event driven parsing
model. The underlying parsing algorithm informs an
application of certain events representing the structure
of an XML document through callbacks. These callbacks will indicate the start and end of the document,
the start and end of an element, the content of the elements and others. As SAX simply takes the document
as a stream to read through without saving any content
in memory it is most commonly used in performance
critical applications or when parsing large documents.
The Document Object Model is the model of choice
for analysis and alteration of XML documents. The
parser will create a complete representation of the
document as a DOM tree in memory. This tree can
be traversed to retrieve information or may be transformed in structure or content. DOM is, in contrast to
SAX, processing time intensive and memory consuming when parsing the document, but once loaded into
memory  which is not possible with SAX as such 
all operations will not be very time consuming and the
results of these operations can be saved to a persistent
storage device.
2.3.4

Evaluation

Figure 1: motor.xml

XML provides two levels to evaluate the structural correctness of documents. A document is well-formed if
the structural standard requirements of XML are met,
i.e. the document simply must be parseable. To meet
the stronger constraint of being valid the document
must pass a check against additional restriction rules.
These additional rules can be de ned either as Document Type De nitions (DTD) or as XML Schema
De nitions (XSD) each representing constraints upon
what elements may appear in a document, their relationships to each other or what types of data are represented by them [12][16]. DTD will not be discussed
here as XSD is the much more powerful and most recent standardized schema de nition.
Figure 1 shows a simple well-formed XML document,
with token elements projected onto an XML tree structure. Some of these tokens contain other tokens and
some contain values. Intuitively humans will construct
a hypothesis of the structural rules, i.e. the syntax, and
the meaning, i.e. the semantics, of these tokens.
The semantic content of these elements is the assigned
value determined by the token. In this example values
are only assigned to the tokens which are leaves in relation to the tree structure, i.e. which terminate their
branch of the tree. On the other hand the interaction of
The Modelica Association

terminal and non terminal elements is bearing intrinsic semantic information, i.e. this tokenized structure re ects the meaning of the syntactically de ned
branches. To give a precise de nition of this restrictions on values and possible syntactic sequences of the
tokens  either for humans or machine processing 
and to further check this de nitions against an XML
document an XSD document can be set up ( g. 2),
which then will verify the content of this XML document by the validating mechanism of the parser.
The XML Schema de nition language opens the possibility to declare XML elements in terms of type denitions. These element declarations, when applied
to an actual XML document, represent the abstract
concept of type and token. The type of a token will
restrict sequences of tokens and de ne their content.
The limited number of components in this example
will only sketch the potential of the XML Schema
de nition language, but illustrates the principles of
its conception. The XML element with the name
motor is a complexType which may only contain
a sequence of the elements type, stator and

709

Modelica 2006, September 4th  5th

U. Reisenbichler, H. Kapeller, A. Haumer, C. Kral, F. Pirker, G. Pascoli

tribute type and therefore can have any content being
a value as it is a terminal element lacking any further
branching.
Additionally,
g. 2 illustrates the concepts
of XML namespaces and quali ed names.
An XML namespace is de ned with the attribute xmlns relating an URI reference, e.g.
http://www.w3.org/2001/XMLSchema, to
XML elements, which then build up a collection of
names belonging to this namespace. A namespace
may be de ned in any XML element  not only
in XSD schemas  incorporating all subordinate
elements into this namespace. To delimit the scope of
the speci ed namespace a pre x, xmlns:prefix,
may be assigned to qualify only certain elements as
belonging to this namespace. The resulting quali ed
name of the element, prefix:name, binds the local
name of the element to the speci c namespace thus the
same name can be used within different namespaces.
An XML Schema may also be compound of different schemas which can be de ned as import into
a schema. The imported schemas must each dene their own namespace and may have a given
schemaLocation. These namespaces and their
pre xes are de ned in the root element schema, here:
xsd: the namespace of the XML Schema de nition
itself, material: the namespace of a schema de ning different materials ( g. 3) and format: the
namespace of a schema de ning different number formats ( g. 4).
Figure 2: motor.xsd

rotor, and has an attribute named serial. Within
the sequence the occurrence of the elements is further restricted by the numbers given in the attributes
minOccurs and maxOccurs, i.e. type may, while
stator and rotor must occur exactly one time.
These are purely syntactic rules. The attribute type
now gives the additional information about the content
of the elements. The elements stator an rotor are
of the same type activepart, which represents on
his part a sequence of material and slots, and the
required attribute part. This new subordinated structural sequence is also de ned purely syntactically, but
the succession of elements assigns a meaning to the
whole branch, which could be denoted as syntacticosemantic rule. The element named type has no atThe Modelica Association

In g. 2 the two syntactically de ned elements
named material  one child to activepart
and the other child to winding  are represented
by different types, i.e. material:magnetic and
material:conductor, speci ed in
g. 3.
The xsd:simpleType named magnetic
of the base type xsd:string underlies the
xsd:restriction that its content can only be
one value out of the xsd:enumeration containing
IronSheets and CastIron  correspondingly
material:conductor. A simple type is always
a terminal element, but its value and therefore its
semantic content may be restricted.
The values of an element or an attribute may also
be restricted using a given pattern like a regular expression or assigning a simple type like one of
the built in data types of the XML Schema de nition language, e.g. xsd:integer, xsd:string
or xsd:float.

710

Modelica 2006, September 4th  5th

If We Only had Used XML...

2.3.6

Displaying data

To present data in an actually human readable
format, a parser may transform an XML document into a HTML document using the Extensible
Stylesheet Language (XSL) [9], [10], [17]. XSL
uses XPath to retrieve data out of the XML document, which will be displayed after transforming
a template into the resulting HTML representation. Figure 5 shows a minimal stylesheet displaying the xsl:value-of the Xpath expression
/motor/stator/material in a minimal HTML
document.

Figure 3: material.xsd

Figure 5: motor.xsl

All kinds of documents for validating (XSD) and formatting (XSL) can be bound to the XML document
within itself ( g. 6). These les may be distributed
over the www. If the parser (within a browser) is interpreting all documents and transformations correctly
the XML document will be self-testing, self-validating
and self-formatting.

Figure 4: formats.xsd

2.3.5

Retrieving data

Besides others, XPath (XML Path Language) is a
standard query language for data retrieval within an
XML document [11]. XPath expressions represent
a speci c node or node set within an XML document. Evaluating an XPath expression against a
document, a parser will return all matching nodes
for the structural description given. The expression
/motor/rotor/slots/quantity/text()
which de nes the complete path to the second
<quantity> node in g. 1 will return the value,
i.e. 40, of the node using the XPath function text().
The expression //slots/quantity/text() 
with // meaning get all nodes matching within the
document no matter where they are  will return 48
and 40. The complete XPath language gives much
more possibilities for creating query expressions, but
these very basic expressions illustrate the intuitive
understanding and the simplicity of XPath.
The Modelica Association

Figure 6: Connected documents

2.4

XML-Document Design Guidelines

Designing a complete markup language for a speci c
application area will be, in any case, a laborious task.
The components introduced in the previous sections
imply the elementary principles for designing the base
units of such an application, i.e. the typed elements
represented by tokens when building up a document.
Types can either be represented by a terminal element
or another structural element. Grouping the structural
elements will end up in the complete document.

711

Modelica 2006, September 4th  5th

U. Reisenbichler, H. Kapeller, A. Haumer, C. Kral, F. Pirker, G. Pascoli

Figure 7: Content centric XML

The design of the elements is intimately connected
with the speci c application of XML. If the main focus of a metalanguage is put on adding information to
the pure content of a document, as in (X)HTML, this
will be a content centric approach.
If the structure and the values of the data themselves
will be focused, as if XML is used for data handling,
this will be a data centric approach. The XHTML code
snippet in g. 7 illustrates what should be avoided
when using XML for data handling. The paragraph
element <p> contains besides its structural sub element <table> other character data which are values in a stricter sense. Comparably the attributes
border and bgcolor contain values not specifying
their structural information but assigning additional
content to their real value.
When following the data centric approach a clear distinction of what is or can have a value and how the data
are structured must be made when formalizing and
hence abstracting the real world. Thus the structural
elements, i.e. non terminal tokens, should strictly reect the conceptual context of the data. Values should
exclusively be represented by the content of terminal
elements and never within attributes. Attributes may
be used to identify elements within the structural relation or specify external references not directly related to concepts within a speci c document. This will
transform g. 7 to  for example  g. 8.

Figure 8: Data centric XML

components which can be used out of multiple applications. The central unit within this environment is
the dynamic link library XMLEngine.dll. It is implemented in C++ and can be used directly by applications dynamically loading the library and calling the
interface methods.
The XMLEngine library has no internal parser and
therefore must be bound to an external parser. The
current implementation uses Xerces 2.6 and its XPath
module Xalan 1.9 interfaced by the dynamic link library Xerces.dll binding the XML functionality to the
application.

This will lead to a strict structural de nition of the values within a document, and will give clearly de ned
and simple XPath expressions when retrieving data.

3 Dymola XML
3.1

Figure 9: Architecture of the XMLEngine environment

XML Engine

The architecture of the XMLEngine environment
( g. 9) is designed as a scalable open system of
The Modelica Association

712

Modelica 2006, September 4th  5th

If We Only had Used XML...

3.2

Dymola

Following the object oriented approach of Modelica,
the programming language incorporated into the simulation environment Dymola, the idea of strict separation of code (models) and data (parameters) re ects
this attempt for data handling. Using XML documents
opens the possibility to store and retrieve primitive
data types as well as highly complex data objects in
a exible way.
If a de ned application of XML is used as base for
data exchange, the import of precalculated data, for
e.g. a thermodynamic model, and the export of results,
e.g. state variables, for any calculation and simulation
tool, following these standardized rules, is guaranteed
to work correctly with minimum effort.
Dymola is bound via the static link library dymolaxml.lib for MS-Visual C or libdymolaxml.a for GNU
C to the XMLEngine environment. The XML query
language XPath is used to import data from XML documents and to export data into prede ned template
documents. The integration of the XMLEngine environment into Dymola in cooperation with the scalability and exibility of XML opens a wide range of
possibilities for data handling and data exchange.

3.3

Interdisciplinary Application Example

An interdisciplinary example (containing mechanics,
electrical engineering and thermodynamics, g. 10)
taken from drive engineering will demonstrate how
to retrieve parameter values from an XML document
and how to save results to a le using a prede ned
XML document template. The single aspects of this
example and the corresponding parameter values are
re ected by the structure of the elements in the underlying XML document ( g. 11). The different elements
are combined via connectors forming the entire model
( g. 10).
thermalModel represents the thermodynamic
activity in a permanent magnet DC motor
the permanent magnet DC motor is as such an
electromechanical model
the electric source represents an electrotechnical
application
the mechanical load is characterized by pure mechanical equations
Having de ned the data in an XML document  and
not within each single sub model  different aspects
The Modelica Association

Figure 10: Interdisciplinary application example

of the entire model may be simulated loading the data
from  and manipulating the data in  an external data
source. By changing the parameter sets  in the now
centralized data source  it will be possible to analyze for example the thermal stress within the eld
windings of different motor types ( g. 15). More elegantly different parameter sets may de ned directly in
the XML document and selected within Dymola. This
approach is illustrated here by the load_data element
( g. 11) to operate several workloads of the motor.
The Dymola XML Library is using the Modelica
standard external function interface to load and access
data from an XML document. For loading data
into a model rstly the parser must be initialized
to obtain a handle for further processing ( g. 12):
domParserHandle := createDOMParser(
ParserName )
The next step is loading the XML document as DOM
tree representation into memory, using the handle of
the previously created parser: DocumentHandle
:= loadDocument( domParserHandle,
FileName )
When initializing the parser and loading documents
within the same model this must be done in an initial algorithm to ensure strict algorithmic processing
order.
Now having a handle to a document retrieving and
changing of the data is possible using XPath expressions. In this model the parameters and the initial conditions for the complete characterization of the system of differential equations will be retrieved from
the DOM trees residing in memory. The XML document template for storing the results of the simulation
will be loaded for later use. To obtain a single result
value when evaluating an XPath expression against the

713

Modelica 2006, September 4th  5th

U. Reisenbichler, H. Kapeller, A. Haumer, C. Kral, F. Pirker, G. Pascoli

Figure 12: Initial algorithm

Figure 11: IDE.xml

setReal( DocumentHandle, XPath,
newValue );
Finally the changed template document will be saved
to disk calling ( g. 14):
saveDocument( DocumentHandle,
newDocumentName );
The following simulation results refer to the above
mentioned DC machine operated at continuous duty
with intermittent periodic loading. The load torque
is alternating between no load (0 Nm, 24 s) and load
(80 Nm, 36 s) periodically. In g. 15 the temperature
rise of the DC-machine eld winding and in the housing is depicted. In a new simulation procedure these
nal values can be used as new initial values.

loaded document the handle of the document and the
XPath expression has to be given over to the corresponding function:
getReal( DocumentHandle, XPath )
This function returns the rst result matching the
XpathExpression ( g. 13).
All functions are also available for Integer, Boolean
and String values. All get functions are also
available in versions evaluating the second XPath
expression starting at the result from a context
node's XPath result: getRealFromContext(
DocumentHandle, ContextNodeXPath,
XPath )
4 Conclusions
Changing data values in previously loaded documents
one of the set function will be called specifying the Separating simulation models and data can be very
document, the location as XPath expression and the convenient when using XML documents and XPath
new value:
expression for storing, retrieving and manipulating
The Modelica Association

714

Modelica 2006, September 4th  5th

If We Only had Used XML...

Figure 14: Storing simulation data

Figure 15: Simulation results

data. Additionally, XML technology provides the opportunity of modeling data in a standardized way. The
resulting application of XML, i.e. the speci c metalanguage, can be designed independently from the use
in certain models and therefore provide a consistent
basis of terminology and structured data representations for various domains of engineering.

Figure 13: Motor speci cation

References
[1] Fritzson P., Principles of Object-Oriented Modeling and Simulation with Modelica 2.1. Piscataway, NJ: IEEE Press, 2004,
[2] Harold, E. R., SAX Conformance Testing,
XML Europe 2004 Conference,

The Modelica Association

715

Modelica 2006, September 4th  5th

U. Reisenbichler, H. Kapeller, A. Haumer, C. Kral, F. Pirker, G. Pascoli

http://www.idealliance.org/papers/dx_xmle04/
papers/03-06-02/03-06-02.pdf

http://www.w3.org/TR/2004/REC-xmlschema1-20041028

[3] Pop A., Fritzson P., ModelicaXML: A Modelica [14] World Wide Web Consortium (W3C), XML
Schema Part 2:
Datatypes Second EdiXML Representation with Applications, Proceedtion,W3C Recommendation 28 October 2004,
ings of the 3rd International Modelica Conferhttp://www.w3.org/TR/2004/REC-xmlschemaence, pp. 419-430, 2003
2-20041028
[4] The
SAX
project,
home
page,
[15] World Wide Web Consortium (W3C),
http://www.saxproject.org
XML Schema 1.1 Part 1:
Struc[5] Tiller M., Implementation of a Generic Data
tures,W3C Working Draft 30 March
Retrieval API for Modelica, Proceedings of the
2006,
http://www.w3.org/TR/2006/WD4th International Modelica Conference, pp. 593
xmlschema11-1-20060330
602, 2005
[16] World Wide Web Consortium (W3C),
[6] World Wide Web Consortium (W3C), Document
XML Schema 1.1 Part 2: Datatypes,W3C
Object Model (DOM), http://www.w3.org/DOM
Working
Draft
17
February
2006,
http://www.w3.org/TR/2006/WD[7] World Wide Web Consortium (W3C), Exxmlschema11-2-20060217
tensible Markup Language (XML) 1.0 (Third
Edition), W3C Recommendation 04 February [17] World Wide Web Consortium (W3C),
2004, http://www.w3.org/TR/2004/REC-xmlXSL
Transformations
(XSLT),
Version
20040204
1.0, W3C Recommendation 16 November
1999,
http://www.w3.org/TR/1999/REC-xslt[8] World Wide Web Consortium (W3C), Ex19991116
tensible Markup Language (XML) 1.1,
W3C Recommendation 04 February 2004,
http://www.w3.org/TR/2004/REC-xml1120040204
[9] World Wide Web Consortium (W3C), Extensible Stylesheet Language (XSL), Version
1.0, W3C Recommendation 15 October 2001,
http://www.w3.org/TR/xsl
[10] World Wide Web Consortium (W3C), The Extensible Stylesheet Language Family (XSL),
http://www.w3.org/Style/XSL
[11] World Wide Web Consortium (W3C), XML
Path Language (XPath), Version 1.0, W3C
Recommendation
16
November
1999,
http://www.w3.org/TR/1999/REC-xpath19991116
[12] World Wide Web Consortium (W3C), XML
Schema Part 0: Primer Second Edition,
W3C Recommendation 28 October 2004,
http://www.w3.org/TR/2004/REC-xmlschema0-20041028
[13] World Wide Web Consortium (W3C), XML
Schema Part 1: Structures Second Edition,
W3C Recommendation 28 October 2004,
The Modelica Association

716

Modelica 2006, September 4th  5th

Coupled Simulation of Building Structure and Building Services Installations with Modelica

Coupled Simulation of Building Structure and
Building Services Installations with Modelica
Peter Matthes
Thomas Tschirner

Timo Haase
Dirk Mller

Alexander Hoh

HermannRietschelInstitute, Technical University of Berlin
Marchstr. 4, D10587 Berlin, www.tu-berlin.de/fak3/hri
peter.matthes@tu-berlin.de
timo.haase@tu-berlin.de
thomas.tschirner@tu-berlin.de dirk.mueller@tu-berlin.de

Abstract
The Hermann-Rietschel-Institute (HRI) uses the ability of Modelica to aggregate different physical domains inside one simulation model. This approach
allows for the coupled simulation of thermal effects
in building structures and building services installations applying only one software tool.
We show the capabilities of such coupled simulations, taking a room that is equipped with capillary
pipes inside the ceiling and being connected to a
chiller as an example.
Keywords: Multi domain simulation; dynamic building simulation; simulation of building installations

1

Introduction

In order to investigate the dynamic thermal behavior
of buildings in conjunction with hydraulic networks
and new kinds of building heating and cooling systems a number of component models have been developed at the HermannRietschelInstitute (HRI).
The main focus of the HRI is to research thermal
building behavior and thermal comfort with different
approaches of airconditioning. Comparing the
power consumption and analyzing the employed
control strategies are also important topics.
One approach for example is room heating or cooling with large area heat exchangers [1]. Due to the
increased heat exchanging surface it is possible to
reduce the temperature difference that must be applied to sufficiently heat the room. This in return
leads to a lower amount of needed exergy for this
heating system minimizing primary energy usage.
An appliance is a panel heating system which could
be powered by the relatively cool return water of a
district heating system. This would further increase
The Modelica Association

alexander.hoh@tu-berlin.de

the efficiency of the plant providing the heating water and could spare heating costs at the same time
since the return water could be bought cheaply. The
HRI will focus on this topic in an upcoming study.
Another application is a large area cooling system
employing capillary pipe mats. With capillary pipe
mats the achievable relative heat flow density is
higher than with conventional panel heating and
cooling systems. It is possible to even more reduce
the surface excess temperature at the same level of
cooling power.
This makes it possible to reduce the amount of energy that is needed to cool the room because the efficiency of the chiller increases. This holds true for a
heat pump system that is often used for such purposes.
Computer simulations must be carried out to examine the feasibility of new airconditioning technologies as well as to find ways to optimize standard
technologies. The HRI uses Modelica as modeling
language to benefit from the possibility to create
multi domain simulation models.
To show that multi domain simulation models can be
built with the HRI libraries an example simulation
setup will be discussed in this paper. The design of
several components used in this simulation will be
described also.

2

Simulation setup

An exemplary simulation setup is shown in Fig. 1.
The graphical representation of the system shows a
single room model (1), a panel cooling system (2)
that is integrated into the room ceiling, a chiller machine (4) and a heat exchanger (3) that would be
used to separate the heat pump circuit from

717

Modelica 2006, September 4th-5th,2006

P. Matthes, T. Haase, A. Hoh, T. Tschirner, D. Mller

2
3

4
1

1. Room (without ceiling)
2. Ceiling with capillary pipes
3. Heat exchanger
4. Chiller / heat pump

Fig. 1: Graphical representation of the simulation model.

the oxygen enriched capillary pipe mat water system.
Additionally, pipe models connect the mentioned
system components and two pumps enforce the necessary fluid flows. The condenser side of the heat
pump model is connected to a source with constant
medium properties and constant mass flow rate. This
would correspond to a supply with ground water.
Room heat loads and air exchange rates are provided
by tabulated data. Ambient temperature, air humidity, atmospheric pressure and radiation values are
provided by a weather module which uses a test reference year with tabulated values.
Different boundary conditions for the room are applied in this setup. The exterior wall is connected to
modules that set the ambient temperature provided
by the weather module. Assuming that all adjacent
rooms will have the same temperature leads to the
boundary condition that no heat flow through inner
walls will occur. This is ensured by a second module
type.
Temperature and humidity of the outside air will be
provided by two reservoirs. The weather module sets
the appropriate media properties.
In the following some of the components used in the
simulation setup are described in more detail.

The Modelica Association

3

Simple Room Model

The room model contained in the example represents
a cubical room that is enclosed by walls consisting of
several layers (see Fig. 2). Three of the four walls are
interior walls, the fourth one  an exterior wall 
contains a window. Also the floor is modeled with
several layers with different material properties.
The model of the ceiling has been deleted from the
aggregated room model and was substituted by an
external model of a ceiling with embedded capillary
pipes (see Fig. 1). These capillary pipes are used to
cool the room and act as an interface between the
room and the building services installations.
3.1

Radiation Exchange

In addition to basic physical phenomena like heat
transport and natural convection, also long wave and
short wave radiation interchange are being examined.
Besides the exact approach to calculate long wave
radiation exchange between room surfaces basing on
angle factors we also implemented a simpler model
using an area weighted approach to calculate radiation exchange. This is especially important for assembling rooms that are more complex than a simple

718

Modelica 2006, September 4th-5th,2006

Coupled Simulation of Building Structure and Building Services Installations with Modelica

match box shaped room. In the latter case it would
be a challenging and error prone task to determine all
necessary angle factors to describe radiative heat
exchange.

4

Most of the hydraulic components are black box
models. Due to the fact that design specifications are
not available from most component manufacturers it
is a superior aim for the HRI to model components
based on the provided manufacturer data as input
parameters and approximately reproduce the components behavior. Trying to model the component as
exactly as possible by modeling each concerned
physical phenomenon would transcend the needs of
the HermannRietschelInstitute. The latter proceeding would be favorable if the behavior of a specific
apparatus must be examined or tested. This would
normally include to rewrite a considerable amount of
code if a different apparatus design shall be examined.
4.1

Air Volume and Boundary Conditions

The air volume inside the room includes the property
of humidity, which is obtained by connecting the
model to the Modelica.Media library.
In order to observe local condensation on the chilled
ceiling surface, we added a sensor that continuously
checks the local dew point temperature.
Regarding the interior walls and the floor we assume
adiabatic boundary conditions for this simple example  which imply equal temperatures inside the
simulated room and the adjacent rooms. So heat
transport only takes place through the exterior wall,
the window, and the ceiling. A weather model provides the necessary data concerning temperature,
humidity, and pressure of the ambient air as well as
the solar radiation onto the exterior wall and the
window. This is based on measured data called test
reference year, which is provided by the German
weather forecast agency DWD.
Finally, the control of the inner heat sources inside
the room as well as the air exchange through the
window are being realised by connecting external
files to the simulation model.

The Modelica Association

Panel Heating and Cooling Model

As stated in [1] a model of a panel heating and cooling system was developed at the HRI. Pipes embedded in a wall layer provide heating or cooling. The
hydraulic and thermal behavior of the system is modeled in two components:
- the pipe mat model and
- the wall model.

Fig. 2: Graphical representation of the room model.

3.2

Building Services Installations

Wall
discretisation

Capillary Pipes
Fig. 3: Illustration of the capillary pipe mat model.

The wall model consists of discrete elements (finite
volumes) that conduct and store heat energy allowing for the examination of the temperature distribution in the wall layer. Capillary pipes are built from
of a number of small pipe elements connected together to build the large pipe mat model. The pipe
model allows heat transfer from the fluid model to
the wall model.

719

Modelica 2006, September 4th-5th,2006

P. Matthes, T. Haase, A. Hoh, T. Tschirner, D. Mller

approach applying correction factors is used in order
to obtain a reasonable behavior under part load conditions. B. Glck describes the algorithm in [4].
Fluid
Connections

Thermal
Connections

Pressure loss Heat transfer

The short pipe model contained in the Modelica_Fluid library is used to facilitate the pressure
loss calculation.
Since the first presentation the panel heating and
cooling model has been extended and now provides
support for two types of capillary pipe mats (see Fig.
4) and several wall layers to simulate realistic wall
designs.

convective
Q, T
calculator

Q, T

radiative

Fig. 5: Illustration of radiator model.

4.3

Simple Heat Exchanger Model

Fig. 4: implemented pipe mat types.

A model of a capillary pipe mat system as described
by B. Glck in [3] was replicated and simulation results were compared to the findings of Glck. It
could be shown that the replicated model had very
small differences in the arearelated heat energy
storage (Wh/m2) of below 5% depending on the grid
spacing. Some differences between the models remained (unknown material properties of one ceiling
layer, modeling of pipes, calculation of heat transfer
coefficients at ceiling surface) and will be a reason
for the differences.
4.2

Simple Radiator Model

To be able to model a standard European heating
system a radiator black box model has been developed. It features radiative and convective heat transfer with the consideration of the influences of ambient air pressure, radiation and air temperature.
Parameterization is easy with catalogue data (Mass
of steel, water volume, length ) provided by the
manufacturer. Correction factors accounting for the
situation of installation, coating and other influences
can be provided as parameters. Fig. 5 shows the
graphical representation of this model.
The calculation of current heat flow is based on the
ratio of current heater surface excess temperature
and its nominal value:

 Tlog
Q
=
Q nom  Tlog, nom






The heat exchanger component used in the described
simulation model is a shell and tube heat exchanger
with a number of discrete pipe elements to model the
heat exchange between shell and tube side fluids.
Compared to the simple pipe model heat convection
will now be computed by a variable heat transfer
coefficient depending on geometric attributes, fluid
velocity and temperature. Algorithms for various
kinds of heat convection effects on pipes are based
on [2].
Appropriate functions for the heat convection effect
can be chosen in the graphical user interface. Because the effect is computed in a separate sub
module it is easy to implement more heat convection
effects for other surface geometries.
Currently a one pass heat exchanger with plain tubes
is implemented. The structure of the component is
depicted in Fig. 6.
Shell Side
Flange
Resistance

p = f (hydr. )

Short Pipes

Q, T

Tube Side
Flange
Resistance

eh

Fig. 6: Illustration of tube and shell heat exchanger.

Since the exponent of the heating surface eh is only
valid for a small range around nominal conditions an
The Modelica Association

720

Modelica 2006, September 4th-5th,2006

4.4

Heat Pump Model

Fig. 7 shows the simplified illustration of the black
box heat pump model. There are two heat exchangers (condenser and evaporator) which allow exchanging energy between the medium and the heat
pump cycle.

Fluid
Connection
Evaporator

HX 1

Control
replace
heat pump cycle
(I)
( II )

Table
polynomial
based
approximation approximation

Condenser

(Q, T)

Thermal effects can be described using an adapted
mandrel pipe model [2]. The shell side tube contains
a number of inner tubes. Heat transfer between the
fluids is influenced by the heat convection coefficients at the tubes  shell side and tube side. The coefficients are calculated using an equation for fluid
flow in pipes found by Gnielinksi [2]. For shell and
tube side the same equation applies in this case except that the equivalent hydraulic diameter must be
provided for the shell side fluid flow.
Instead of modeling all tubes directly, only a single
tube will be used to reduce model size and computation time. This is feasible under the assumption of
equal temperature distribution normal to the flow
direction. Total mass flow rate through the pipe must
be reduced to reflect the real flow conditions inside a
single tube. Additionally, the transferred heat flow
towards the tube side fluid must be adjusted to account for the reduced number of tubes.
The heat exchanger is divided into sections alongside
the tube direction to solve for the time and location
dependent differential equation.
Hydraulic effects are considered for the flange taps
and the heat exchangers internal fluid flow. Shell
side pressure loss for longitudinal flow in tube bundles can be calculated as for fluid flow inside a single tube. In this case the hydraulic diameter of the
shell side must be used instead of the pipe diameter.
An option is implemented to regard deposits at the
tubes surface with a definable thickness.
Currently a new heat exchanger component is being
developed at the HRI. It is based on characteristic
values of different types of heat exchangers and various flow types according to the theory in [2]. This
generic model will allow covering a broader range of
heat exchanger designs in simulations.

(Q, T) thermal connection

Coupled Simulation of Building Structure and Building Services Installations with Modelica

HX 2

Fig. 7: Illustration of heat pump model.

Two models exist for the inner heat pump cycle. A
table based approach offers to easily apply manufacturer data for evaporator power Q 0 , condenser
power Q c and engine power consumption Pe. Cooling power and engine power will be interpolated by
the CombiTable2D module contained in the Modelica Standard Library.
A second model applies polynomial approximations
to calculate volumetric cooling power

q 0W = Q 0, nom / VW
of a piston compressor as a function of condenser
and evaporator temperature, Tc and T0 respectively.
Volumetric cooling power q0W depends on the refrigerant used and the construction of the piston
compressor. Approximate values for two refrigerants
R404 and R134a used in a variety of piston compressors are known [5]. VW may be calculated using
geometric data of the piston which is provided by the
manufacturer.
The second approach allows to adjust the cooling
power of the generic heat pump very easily by adapting piston size. The first model on the other hand
will be more accurate because it employs manufacturer data for a specific heat pump construction.
Power regulation of the heat pump is implemented as
continuous speed regulation which is modeled by the
ratio of current to nominal speed where the speed
range can be chosen freely. Since evaporator power
depends on the refrigerants volume flow rate which
is directly proportional to the machine speed one can
scale nominal cooling power linearly with the speed
ratio:

Q 0,nom = VW , nom  q 0W
and

VW
n
=

VW ,nom nnom

The Modelica Association

721

Modelica 2006, September 4th-5th,2006

P. Matthes, T. Haase, A. Hoh, T. Tschirner, D. Mller

Power consumption can roughly be estimated using
the affinity law:

 n
P
= 
Pnom  nnom





3

To better describe the dynamic behavior of a heat
pump in our simulations the model features temperature protection implemented by the use of two
boundary temperatures. By default an onoff controller will turn the pump off when the controled
temperature Ttarget drops below temperature T1 and
start the machine again when the Ttarget rises above
T2. When the pump turns off it will come to a halt
within a definable time period. It will not start again
until a minimum amount of time has passed. Besides
those implementations there is no modeling of dynamic behavior of the heat pump.

4.6

35

Several additional components are needed to model
hydraulic networks. The HVACHRI library contains
most of these components. The models are designed
to work with different fluids  mainly water and air
in building installations.
An extended short pipe model based on the model of
the Modelica.Fluid library allows simulating heat
transfer from the fluid through the pipe wall, as well
as heat storage in the pipe material. The pipe wall
consists of two layers to being able to model an insulation layer. An aggregation of a sufficiently high
number of these short pipe models allows for the
simulation of long pipes.
Single hydraulic resistor elements can be represented
by a model applying friction coefficients as is often
done when designing hydraulic networks. Based on
friction coefficients a threeway pipe model is also
available.
Valve models exist for twoway and threeway
valves. Additionally, a thermostat head can be combined with the twoway valve to form a heat valve
that would normally be used with the radiator model
as described in section 4.2.
Two pump models are currently available: one
model defines the pumps hydraulic curve (head is a
function of mass flow rate) by an nth grade polynomial. Different pump speeds are modeled by employing the affinity law.
The second pump model uses tabulated values for
pump head and volume flow rate. Therefore, the
pump curves can be modeled very precisely as well
as the electrical power consumption of the pump.
Several control strategies are available for both

Temperature (C)

Other Components

The Modelica Association

Exemplary Results

An exemplary result of a simulation with the described model is shown in Fig. 8 and Fig. 9. Two
very simple control strategies of the heat pump
model have been compared to a simulation without
cooling.
without cooling
strategy I
strategy II

Tm30,7C

30
Tm23,9C
25

20
11

Tm 21,8C
12
13
14
15
16
17
Days (One Week in Summer, Berlin)

18

Fig. 8: Room air temperatures of example simulation.

Strategy I uses evaporator outflow temperature to
control the heat pump power as displayed in Fig. 1.
In strategy II the capillary pipe mat inflow temperature was controlled. The temperatures were lower in
this case compared to the values in strategy I.
1
Relative Humidity of Air

4.5

pump models. For example constant pump speed,
constant pump head and constant volume flow rate.
A generic heater and chiller model allows defining a
heat source or heat sink in a hydraulic circuit. A derived model allows defining the outflow temperature
depending on an input value. This allows for the employment of heater flow temperatures depending on
ambient air temperature. Day and night modes are
also possible.

0.8

without cooling
strategy I
strategy II

0.6

0.4

0.2
11

12
13
14
15
16
17
Days (one week in summer, Berlin)

18

Fig. 9: Humidity of air near room ceiling.

722

Modelica 2006, September 4th-5th,2006

Coupled Simulation of Building Structure and Building Services Installations with Modelica

The power control included in the heat pump continuously adapts heat pump power to the input temperature signal. This input signal later can also be
provided by a more sophisticated controller algorithm.
One can clearly see the cooling effect of both strategies on room temperature. Because the second strategy yielded lower fluid temperatures in the pipe mat
the cooling effect is stronger than with strategy I.
The graphs in Fig. 9 display humidity of air near the
cooling panel for both strategies and without cooling.
Relative humidity performs as expected according to
the mean surface temperature of the ceiling.
The control strategies employed in the described example simulation have not been optimized. Detailed
examination of the system behavior considering special requirements (e.g. a maximum humidity level)
would allow finding optimized control strategies.

5

List of symbols
eh

exponent of heating surface

n

rotational speed of engine

Q
q 0W

heat flow rate

P

engine Power

T

Temperature

V

volume flow rate

Indices
1, 2

minimum, maximum value

target

target value

c

condenser

0

evaporator

W

pistion working volume

nom

nominal value

log

logarithmic value

Conclusions and Perspectives

The feasibility of thermally and hydraulic coupled
dynamic building simulations could be shown. It is
possible to test and verify different control strategies
of the components. This allows for the research of
energetically optimized installations in buildings.
Different approaches to design a model are often
useful to account for the specific demands on a
model.
Further development will concentrate on the refinement of the models developed at the HRI in combination with larger scale building simulations. New
components will also be developed to cover a wider
range of building services installations.
Upon completion of new test facilities at the HRI
validation of several components and systems will be
possible. For example a testing environment with
capillary pipe mats for the airconditioning of two
rooms is currently being installed.

References
[1]

[2]
[3]

[4]

[5]

The Modelica Association

volumetric evaporator power (W/(m3/s))

723

A. Hoh, T. Haase,.T. Tschirner, D. Mller: A
combined thermo-hydraulic approach to
simulation of active building components.
4th International Modelica Conference,
March 2005, included on the CD-ROM version
VDI Wrmeatlas, Berechnungsbltter fr den
Wrmebergang, Dsseldorf, Germany, 1988
B. Glck: Thermische Bauteilaktivierung.
Heidelberg, Germany, 1999, ISBN: 3-78807674-7
B. Glck: Bausteine der Heizungstechnik,
Wrmeabgabe von Raumheizflchen und
Rohren. Germany, 1990, ISBN: 3-34500515-8
Recknagel, Sprenger, Schramek: Taschenbuch fr Heizung und Klimatechnik, Oldenburg Industrieverlag, 2005

Modelica 2006, September 4th-5th,2006

P. Matthes, T. Haase, A. Hoh, T. Tschirner, D. Mller

The Modelica Association

724

Modelica 2006, September 4th-5th,2006

MWorks: a Modern IDE for Modeling and Simulation of Multi-domain Physical Systems Based on Modelica

MWorks: a Modern IDE for Modeling and Simulation of Multidomain Physical Systems Based on Modelica
FAN-LI Zhou, LI-PING Chen, YI-ZHONG Wu, JIAN-WAN Ding, JIAN-JUN Zhao, YUN-QING
Zhang
CAD Center, Huazhong University of Science and Technology, China
fanli.zhou@gmail.com, chenlp@hustcad.com, cad.wyz@gmail.com, jwdingwh@gmail.com,
zhaojj@hustcad.com, zhangyq@hustcad.com

Abstract
MWorks is a platform for modeling and simulation of multi-domain physical systems. It is a modern
integrated development environment (IDE) integrating with visual modeling, translator, optimizer,
solver and postprocessor. MWorks implements all
the syntax and most semantics of Medelica 2.1.
This paper first describes the features of MWorks
as a modern IDE, and then gives the detailed descriptions of special Modelica semantic implementation
in translator and self-adapting solving strategies in
solver of MWorks.
Keywords: IDE; Modeling and Simulation; Multidomain Physical Systems; Modelica

2

Framework of MWorks

MWorks is a general modeling and simulation
platform which consists of studio, translator, optimizer, solver and postprocessor.
The main process is similar to the described in
book of Peter Fritzson [1], shown in Figure 1.

Modelica model

Translator

1

Introduction

Lexical, syntactical and
semantic analyses

Flat equation set

MWorks is a general modeling and simulation
platform for complex engineering systems which
supports visual modeling, automatically translating
and solving, as well as convenient postprocessing.
The current version is based on Modelica 2.1 and
implements all the syntax and most semantics of
Modelica.
MWorks has features as follows:
a. With modern integrated development environment styles, it provides friendly user interfaces
such as syntax high-lighting, code assist etc.;
b. Based on object-oriented compiler framework, it
perfectly supports almost all the syntax and semantics of Modelica;
c. Using self-adapting solving strategies, it can agilely solve differential equations, algebraic equations and discrete equations.
The version 1.0 of MWorks will completely support Modelica 2.2, and the current version is 0.8
which realizes the most semantics of Modelia 2.1.
The Modelica Association

Visual and text
modeling

Studio

Optimizer

Symbol reduction and
optimization

Optimized solving
sequence

Solver

Collection of algorithms
and solving strategies

C code

Postprocessor

Plot or animation

Figure 1. Main process of MWorks
The studio is an integrated development environment which integrates the visual modeling interface
with other modules of MWorks. The translator is a
compiler of Modelica by which an equation system
of model will be generated after lexical, syntactical
and semantic analyses. The optimizer completes
symbol reduction based on graph theory and gives an

725

Modelica 2006, September 4th  5th

F.-L. Zhou, L.-P. Chen, Y.-Z. Wu, J.-W. Ding, J.-J. Zhao, Y.-Q. Zhang

optimized solving sequence. The C code of the
model will be emitted after compiling, analyzing and
optimizing. The simulation of model is driven by the
C code through calling the solver. The solver includes the collection of algorithms for algebraic
equations, ordinary differential equations, differential-algebraic equations and discrete equations. Its
core is the self-adapting solving strategies. The result
of the simulation is displayed on postprocessor in a
plot or animation way.

3

MWorks Studio: Visual Modeling
Environment and IDE

MWorks Studio is a visual modeling environment
which supports drag-drop modeling based on Modelica Standard Library. It is also an integrated development environment integrating with translator,
optimizer, solver and postprocessor.
As a developing tool, this studio provides many
modern IDE styles to promote the users conveniences just as Eclipse or Microsoft Visual Studio
does, such as real-time syntax highlighting, content
assist, code formatting, outlining etc..
The snapshot of MWorks Studio is shown as Figure 2.

Library
Viewer
Property
Table
Model
Viewer

Edit
Area
Message
Area

Figure 2. Snapshot of MWorks Studio
The library viewer illustrates all predefined system
libraries, all loaded user libraries and other top models in the memory. The model viewer shows all
components of the current model. The edit area is
visual modeling, text modeling, icon-editing or information area, and the status is chosen by tag. The
property table displays all properties of selected element in the model, and the properties can be edited
here. The message area displays all messages in the
checking, translating, or simulating, including status

The Modelica Association

and error messages. The error can automatically be
located by double clicking error message.
The auxiliary functions of real-time syntax highlighting, content assist, code formatting and outlining
are provided in the text modeling status.

4

MWorks Translator: Modelica
Compiler and Equations Generator

The tasks of translator are to perform lexical, syntactical and semantic analyses for the model files and
generate equation systems for the models. They are
accomplished by three time parsing: lexical and syntactical parsing, resolving of model and instantiation
of model.
The design and implementation of translator are
based on object-oriented framework, which is obtained in the first parsing. The designs of all the semantic mechanisms, which are implemented in the
second and third parsing, are also based on the
framework to perfectly support Modelica.
4.1

Three Times Parsing

Three times parsing should be done for a complete
translating of the main model for simulaton in
MWorks.
4.1.1 Lexical and Syntactical Analysis
The lexical and syntactical analysis is performed
in the first parsing by using ANTLR tool. The
ANTLR is a convenient, object-oriented, automotive
lexical and syntactical analysis tool [2]. The result of
the first parsing is Document Object Model (DOM)
tree that is object-oriented container presentation of
Abstract Syntax Tree (AST). The class hierarchy of
DOM in MWorks is shown as Figure 3.
The class hierarchy of DOM is abstracted from the
EBNF description of Modelica language specification (MLS) [3]. Each class in the hierarchy is consistent with the corresponding element in the EBNF.
Three main class groups are noticeable in the hierarchy. Element, expression and behavior are respective
abstract base class of the three groups. All operations
of the translator are based on the DOM, from semantic checking to generating equation system.
4.1.2 Semantic Resolving
The semantic resolving based on DOM tree is the
main content of the second parsing, including collecting information for checking types and resolving
extends clauses, modifications (general modifica-

726

Modelica 2006, September 4th  5th

MWorks: a Modern IDE for Modeling and Simulation of Multi-domain Physical Systems Based on Modelica

tions and redeclarations), outer-inner matches, connect clauses, and so on. The realization of UBD (use

before declaration) is easy in the second parsing
based on DOM.

Figure 3. Class hierarchy of DOM
The implementation of semantic resolving is
2. Looking up type of the component;
mainly concentrated into three classes in DOM:
3. Resolving the type if unresolved (calling resolvRegularClass, Component and ShortClass. Their re- ing of type);
solving algorithms are as follows.
4. Checking the validity of the type;
Algorithm 1: Resolving of Regular Class
5. Considering redeclaration of the type;
1. Checking circular type definition (circular in6. Resolving type expression of the component
heritance);
(expanding the type of the component type);
2. Validating type prefixes;
7. Deducing component prefixes;
3. Resolving outer-inner (matching inner element
8. Resolving modifications (collecting information
for outer element);
for modifications, including redeclaratoins).
4. Resolving extends clauses (looking up the base
The resolving of component is called when resolvclass);
ing its parent regular class.
5. Checking repeated names of the named eleAlgorithm 3: Resolving of Short Class
ments;
1. Checking circular type definition (circular ref6. Resolving member components (calling resolverence);
ing of component);
2. Validating type prefixes;
7. Checking type restriction;
3. Looking up reference type;
8. Deducing type prefixes;
4. Resolving the type if unresolved (calling resolv9. Resolving modifications (collecting information
ing of type);
for modifications, including redeclaratoins);
5. Considering redeclaration of the type;
10. Resolving connections (collecting information
6. Resolving type expression of the short class
for generating connection equations).
(expanding the type of the short class);
The nested classes are not resolved in the resolv7. Deducing type prefixes;
ing of regular class, and they are resolved when they
8. Resolving modifications (collecting information
are used as types, such as component types, referfor modifications, including redeclaratoins).
ence types of short classes or base classes.
The resolving of short class is called when resolvAlgorithm 2: Resolving of Component
ing
the element that uses the short class as type of
1. Validating component prefixes;
The Modelica Association

727

Modelica 2006, September 4th  5th

F.-L. Zhou, L.-P. Chen, Y.-Z. Wu, J.-W. Ding, J.-J. Zhao, Y.-Q. Zhang

component, reference type of short class or base
class of regular class.
4.1.3 Instantiation
The semantic resolving prepares necessary information for instantiation which is performed in the
third parsing. The purpose of instantiation is mainly
to generate equation system (continuous equations
and discrete events) for the main model.
Similar to the resolving, the implementation of instantiation is concentrated into the same three classes
in DOM. The algorithms are as follows.
Algorithm 4: Instantiation of Regular Class
1. Merging modifications (defining valid modifiers,
including redeclarations);
2. Instantiating base classes (calling instantiation
of the base class);
3. Instantiating member components (calling instantiation of the component);
4. Instantiating equation clauses to generate equations;
5. Instantiating algorithm clauses to generate
equations or definition of function (if regular class is
function the instantiation should be handled specially).
According to the regular class being container of
elements, the instantiation of regular class is the console of calling all element instantiations. Additionally, it generates the direct equations of the regular
class itself.
Algorithm 5: Instantiation of Component
1. Dealing with component prefixes;
2. Looking up redeclarated component or type if
redeclaration is valid;
3. Looking up inner type if the component type is
outer;
4. Evaluating subscripts of component type if the
component is an array;
5. Merging modifications (defining valid modifiers,
including redeclarations);
6. Generating variables for built-in component
(considering array) or calling instantiation of type
for complex component.
The instantiation of component is mainly to generate variables for built-in component or to call the
instantiation of type for complex component.
Algorithm 6: Instantiation of Short Class
1. Looking up inner type if the reference type is
outer;

The Modelica Association

2. Merging modifications (defining valid modifiers,
including redeclarations);
3. Instantiating reference type (calling instantiation of the reference type).
The instantiation of short class is mainly to call
the instantiation of the reference type.
4.2

Lookup Mechanism

Lookup is the most basic mechanism for Modelica
translating. The type resolving of component declarations, extends clauses and import clauses depends
on standard static lookup, and the outer-inner matching depends on dynamic lookup. Besides both of
them, the special lookup mechanisms are necessary
for supporting modification and array. All of the
lookup mechanisms are implemented as appropriate
interfaces in DOM class hierarchy.
The static lookup mechanism, which is described
in the Modelica language specification, is induced as
two virtual interfaces of DOM class NamedElement
and one top static interface of the root context class.
The two virtual interfaces are lookup_type() and
lookup_comp(), and the static interface is lookup_type_from_top(). The interface lookup_type() is
used in the lookup of component type, base type or
reference type of short class; The interface lookup_comp() is called in the lookup of component in expression or modification; The interface lookup_type_from_top() is specially designed for the lookup of
import package or class.
The dynamic lookup, i.e. matching of outer and
inner, is very complicated because of the freedom of
the situation and kind of the outer element. The outer
element may appear anywhere in model, and may be
type or component. The implementation of the match
depends on stack of both of type and component in
the resolving and instantiation of the main model.
Special lookup mechanisms are imported to support the resolving of modification and the evaluation
of array subscripts. The imported interface is to
lookup replaced type or component for resolving
modification and lookup modifier in the modifier
container for evaluating value of array subscripts.
The modifier container is built in the resolving of
modification. Not only array subscripts but also all
parameters, their values are evaluated by looking up
modifier when the evaluation is necessary.
According to these lookup mechanisms, many
Modelica semantics get perfectly implemented, such
as circular extends check and complex redeclaration
semantics.

728

Modelica 2006, September 4th  5th

MWorks: a Modern IDE for Modeling and Simulation of Multi-domain Physical Systems Based on Modelica

4.3

Modelica Semantic Mechanisms

5

To support modeling and simulation of complex
engineering physical systems, Modelica defines
complex semantics, and it can be abstracted as the
following basic mechanisms: type, extends, general
modification (except redeclaration), redeclaration,
outer-inner, connect, array and algorithm mechanism.
Some of these mechanisms are very complex, especially, some of them may cause couple effects. For
examples, the couple influence of redeclaration and
out-inner must be considered everywhere in implementing translator.
The core of the type mechanism is type checking,
in which the short class and array should be considered. The type resolving is done in the second parsing and the type checking is finished in the third
parsing.
The extends mechanism is easily realized based on
lookup mechanism.
The implementation of modification is done by
collecting modification to build modifier container in
the resolving and merging modifiers to define valid
modifiers in the instantiation.
The process of matching of outer-inner is similar
to the modification, which is realized by operations
in both resolving and instantiation.
It is handled according to the steps described in
Modelica specification to translate connect clauses to
direct equations.
Array is also very complicated. Comparing with
general programming languages, Modelica allows
variables as subscripts, and must translate the array
to single equation for solving, especially, it allow
applying modification to array. If no constraints were
set to modification of array, the compiling would be
extremely complicated, such as modification to array
subscripts. MWorks chooses appropriate simplification just like Dymola does.
Algorithm in model is not same as equation, and
the flow analysis should be done for its generating
equations. Though function is a class with special
algorithm, but generating equations for the algorithms in function is thoroughly different from the
algorithms in model. The functions are directly translated into C functions.
Based on DOM class hierarchy, these mechanisms
have been dealt with well, and the couple mechanisms are also considered.

The Modelica Association

MWorks Solver: Collection of Algorithms and Console of Solving
Strategies

The solver of MWorks includes two primary modules: collection of algorithms and console of solving
strategies. In fact, the optimizer shown as Figure.1
should be a part of the solver. Here it is skipped, and
its implementation for MWorks is described in the
paper [4].
Solver provides different basic algorithm alternatives for users to select appropriate one. For examples, users can select one-step method series or
multi-step method series for ODE/DAE problems.
The different basic algorithms for differential equation and algebraic equations are collected in solver.
The consistent interface framework is designed for
solver to conveniently call different basic algorithms.
Each basic algorithm can be easily integrated into the
solver by simply encapsulating it according to the
template. Now, a series of algorithms for different
kinds of equations have been collected in the solver,
such as SUNDIALS [5].
It is the task of console of solving strategies to
solve continuous-discrete hybrid problem. Solver
controls the solution of problem based on basic algorithms according to information collected in translator.
The solving of continuous-discrete hybrid problem
in Modelica is according to the principle of synchronous data flow [6]. All the events are collected in the
third parsing, and solver will monitor them in the
simulation.

6

Example

Here an example is given to show the visual modeling and simulation in MWorks. The visual model
of the example is shown as Figure.1, and the text
model is as follows (annotations are skipped),
model Circuit
Modelica.Electrical.Analog.Sources.SineVoltage AC(V=110,
freqHz=5);
Modelica.Electrical.Analog.Basic.Ground G;
Modelica.Electrical.Analog.Basic.Resistor R1(R=10);
Modelica.Electrical.Analog.Basic.Resistor R2(R=100);
Modelica.Electrical.Analog.Basic.Capacitor C(C=0.01);
Modelica.Electrical.Analog.Basic.Inductor L(L=0.1);
equation
connect(AC.p, R1.p);
connect(R2.p, R1.p);
connect(R2.n, L.p);

729

Modelica 2006, September 4th  5th

F.-L. Zhou, L.-P. Chen, Y.-Z. Wu, J.-W. Ding, J.-J. Zhao, Y.-Q. Zhang
connect(L.n, C.n);
connect(AC.n, C.n);
connect(G.p, AC.n);
connect(R1.n, C.p);
end Circuit;

Real R1.n.i;
Real R2.v;
Real R2.i;
Real R2.p.v;
Real R2.p.i;
Real R2.n.v;
Real R2.n.i;
Real C.v;
Real C.i;
Real C.p.v;
Real C.p.i;
Real C.n.v;
Real C.n.i;
Real L.v;
Real L.i;
Real L.p.v;
Real L.p.i;
Real L.n.v;
Real L.n.i;

The following is the equations generated by the
translator. There are 34 variables and 34 equations
excluding parameters and constants.
model Circuit
parameter Real AC.offset = 0;
parameter Real AC.startTime = 0;
parameter Integer AC.signalSource.nout = 1;
parameter
Integer
AC.signalSource.outPort.n
AC.signalSource.nout;
parameter Real AC.signalSource.amplitude[1] = AC.V;
parameter Real AC.signalSource.freqHz[1] = AC.freqHz;
parameter Real AC.signalSource.phase[1] = AC.phase;
parameter Real AC.signalSource.offset[1] = AC.offset;
parameter
Real
AC.signalSource.startTime[1]
AC.startTime;
constant Real AC.signalSource.pi = Modelica.Constants.pi;
parameter
Real
AC.signalSource.p_amplitude[1]
AC.signalSource.amplitude[1]*1;
parameter
Real
AC.signalSource.p_freqHz[1]
AC.signalSource.freqHz[1]*1;
parameter
Real
AC.signalSource.p_phase[1]
AC.signalSource.phase[1]*1;
parameter
Real
AC.signalSource.p_offset[1]
AC.signalSource.offset[1]*1;
parameter
Real
AC.signalSource.p_startTime[1]
AC.signalSource.startTime[1]*1;
parameter Real AC.V = 110;
parameter Real AC.phase = 0;
parameter Real AC.freqHz = 5;
parameter Real R1.R = 10;
parameter Real R2.R = 100;
parameter Real C.C = 0.01;
parameter Real L.L = 0.1;
Real AC.v;
Real AC.i;
Real AC.p.v;
Real AC.p.i;
Real AC.n.v;
Real AC.n.i;
Real AC.signalSource.outPort.signal[1];
Real AC.signalSource.y[1];
Real G.p.v;
Real G.p.i;
Real R1.v;
Real R1.i;
Real R1.p.v;
Real R1.p.i;
Real R1.n.v;

The Modelica Association

=

=

=

equation
AC.v=AC.p.v-AC.n.v;
0=AC.p.i+AC.n.i;
AC.i=AC.p.i;
AC.signalSource.y[1] = AC.signalSource.outPort.signal[1];

=
=
=
=

AC.signalSource.outPort.signal[1]=AC.signalSource.p_offset[1
]+(if time<AC.signalSource.p_startTime[1] then 0 else
AC.signalSource.p_amplitude[1]*Modelica.Math.sin(2*AC.sign
alSource.pi*AC.signalSource.p_freqHz[1]*(timeAC.signalSource.p_startTime[1])+AC.signalSource.p_phase[1])
);
AC.v=AC.signalSource.outPort.signal[1];
G.p.v=0;
R1.v=R1.p.v-R1.n.v;
0=R1.p.i+R1.n.i;
R1.i=R1.p.i;
R1.R*R1.i=R1.v;
R2.v=R2.p.v-R2.n.v;
0=R2.p.i+R2.n.i;
R2.i=R2.p.i;
R2.R*R2.i=R2.v;
C.v=C.p.v-C.n.v;
0=C.p.i+C.n.i;
C.i=C.p.i;
C.i=C.C*der(C.v);
L.v=L.p.v-L.n.v;
0=L.p.i+L.n.i;
L.i=L.p.i;
L.L*der(L.i)=L.v;
R1.p.v = AC.p.v;
R2.p.v = AC.p.v;
R2.n.v = L.p.v;

730

Modelica 2006, September 4th  5th

MWorks: a Modern IDE for Modeling and Simulation of Multi-domain Physical Systems Based on Modelica
C.n.v = AC.n.v;
G.p.v = AC.n.v;
L.n.v = AC.n.v;
R1.n.v = C.p.v;
AC.p.i+R1.p.i+R2.p.i = 0;
L.p.i+R2.n.i = 0;
AC.n.i+C.n.i+G.p.i+L.n.i = 0;
C.p.i+R1.n.i = 0;
end Circuit;

[5]

[6]

The result is displayed in the postprocessor, shown
as Figure. 4.

7

A. C. Hindmarsh, P. N. Brown, K. E. Grant,
S. L. Lee, R. Serban, D. E. Shumaker, C. S.
Woodward. SUNDIALS: Suite of Nonlinear
and Differential/Algebraic Equation Solvers.
ACM Transactions on Mathematical Software, 2005, 31(3):363-396.
Otter M., Elmqvist H., Mattsson S.E.. Hybrid
Modeling in Modelica based on the Synchronous Data Flow Principle. 1999 IEEE Symposium on Computer-Aided Control System
Design, CACSD'99, Hawaii, August 22-27,
1999:151-157.

Conclusions

MWorks is a modern IDE for modeling and simulation of multi-domain physical systems based on
Modelica. All the syntax and most semantics of
Modelica 2.1 have been implemented. The current
version of MWorks can validly deal with some problems based on Modelica Standard Library. The coming version 1.0 of MWorks will completely support
Modelica 2.2.

References
[1]

[2]
[3]
[4]

Peter Fritzson. Principles of Object-Oriented
Modeling and Simulation with Modelica 2.1.
Wiley-IEEE Press, 2003.
http://www.antlr.org/
http://www.modelica.org/documents/Modelic
aSpec21.pdf
Ding Jianwan, Chen Liping, Zhou Fanli. A
Component-based Debugging Approach for
Detecting Structural Inconsistencies in Declarative Equation based Models. Journal of
Computer Science & Technology, 2006,
21(3):450-458

The Modelica Association

731

Modelica 2006, September 4th  5th

F.-L. Zhou, L.-P. Chen, Y.-Z. Wu, J.-W. Ding, J.-J. Zhao, Y.-Q. Zhang

The Modelica Association

732

Modelica 2006, September 4th  5th

Domain Library Preprocessing in MWorks - A Platform for Modeling and Simulation of Multi-domain Physical Systems
Based on Modelica

Domain Library Preprocessing in MWorks - a platform for Modeling
and Simulation of Multi-domain Physical Systems Based on Modelica
Wu Yizhong, Zhou Fanli, Chen Liping, Ding Jianwan, Zhao Jianjun
CAD Center, Huazhong University of Science and Technology
Wuhan, Hubei, China: 430074
Cad.wyz@gmail.com, Chenlp@hustcad.com

Abstract
Modeling and simulating with Modelica-based
platforms for multi-domain physical systems need
support of diversified domain libraries. Modelica
Standard Library (MSL) is a free, reusable library
released by Modelica Association, which comprises
definitions of basic classes belonging to many
domains such as mechanical, electrical, hydraulic,
control, multi-body, thermodynamics, etc. User can
also define or extend his special library. These
libraries usually are stored at disk with mo text
format (or binary encrypted format). They only
record text information of the defined classes, and do
not save their structured information. They will be
loaded when system starts up, and they can be reused
as extends classes or component instances when
modeling. When the current main class is being
checked or translated, the referenced classes
(including extends and component classes) from
domain library will be parsed first.
Loading mo format files involves searching of a
great many files from the library directory. At the
same time, lexical and syntax analysis is performed.
So the loading process is time-consuming. Likewise,
parsing the referenced classes from domain library
when parsing the current main class is also a timeconsuming process. So this paper studies a so-called
domain library preprocessing technology which can
greatly improves loading speed of domain library
and parsing speed of the main class. The idea of this
approach is that: parsing all the classes within
domain library once, building their structured
information of document object models, and then
saving them to a binary file. When the system starts
up, the binary file is automatically serialized to
construct structured information of the classes which
were defined originally in domain library. This
approach is implemented in MWorks  another
independent platform for modeling and simulation of
multi-domain physical systems based on Modelica
language.
The Modelica Association

Keywords: Modeling and Simulation; Modelica;
Domain Library; Preprocessing; Document Object
Model

1

Introduction

Modelica language has been developing rapidly
during these years[1]. Applications of modeling and
simulation based on Modelica have also been
emerging in endlessly. However, software implements based on Modelica language can be counted
on your fingers. Dymola[2] and MathModelica[3]
are currently the most two important and successful
commercial software. In addition, other Modelicabased software which are been implemented include
OpenModelia[4], MOSILAB[5] and SCICOS[6], etc.
Having seen the daylight of Modelica simulation
language in future, we have been bending ourselves
to implementing an integrated development environment based on Modelica from 2003. And now our
work has come into being an alpha stage product 
MWorksV1.0a.
MWorks is another Modelica-based platform for
modeling and simulation of multi-domain physical
systems, which wholly integrating a modeler, a
translator, an optimizer, a solver and a postprocessor.
Like other platforms based on Modelica such as
Dymola, MathModelica, etc., MWorks requires
support of domain library including Modelica
Standard Library (MSL) and users special domain
library. These libraries can be reused after they are
loaded when system starts up. With the development
of Modelica language and the technology of multidomain physical system modeling and simulation,
MSL and users library become more and more
complex and larger increasingly. As we know[7],
MSL of Modelica2.1 have more than 3,100 defined
classes. And now in Modelca2.2 this number has
exceeded 4,300. This trend consequentially results in
the following two problems:

733

Modelica 2006, September 4th-5th,2006

Y.-Z. Wu, F.-L. Zhou, L.-P. Chen, J.-W. Ding, J.-J. Zhao

1) Time cost becomes larger during the loading
process of domain library. When system starts
up, this process is executed automatically. If the
library becomes very, very complex and large,
the loading process may be unbearable.
2) Time cost becomes larger during the translating
process of the main simulation class. For loading
process does not construct document object
model (DOM), translating a model needs
building the structured information (i.e. DOM)
of the reused classes from domain library at first.
Apparently, simulating a realistic complex model
could consume a lot of time for translating the
correlative classes from domain library ever built.
To resolve these problems, we put forward and
implement the so-called domain library preprocessing technology in MWorks platform. The basic idea
of this approach is that: We save all the document
object model information of domain libraries through
serializing binary DOM files only once when
MWorks is set up or starts up for the first time.
Afterwards, MWorks will load these DOM files
every time during it starts up. Because the DOM file
is only one binary file, loading it becomes very
quickly. And also because the DOM file includes
enough structured information of all the classes
within domain library, DOM building processes of
extends classes or component referenced classes of
the current complex simulation class will be skipped.
So through domain library preprocessing, simulating
a complex model which reuses a lot of classes from
the domain library will become very quickly even at
the first time.
The next paragraphs of this paper will expatiate upon
this approach in detail.

2
2.1

Traditional library loading and
class translating processes
Traditional library loading

Traditional library loading process is a reading and
pre-checking process of a series of mo text files
according to the directory defined in system register
table or MODELICAPATH environment variable.
Usually, software based on Modelica loads the basic
Modelica Standard Library including Modelica,
ModelicaAdditions, MultiBody, etc. The traditional
library loading process only performs the lexical and
syntactical analyses, and then builds the tree
structure of domain classes according to the mo file
and directory structure, package and nested classes
structure. Because the loading files are text format,
The Modelica Association

its directory structure is complex and the process
needs lexical and syntactical analyses, traditional
library loading process is time-consuming. As our
statistics, loading all the classes of Modelica2.1
needs more than 5 minutes through using lexical and
syntactical analyzing tool ANTLR.
In addition, building tree control of domain library is
also a waste-time process, for this process needs
generate icons of the loading classes, which
correspond to the images of tree nodes. The image of
each tree node is created by drawing the icon
annotation of the corresponding class. For this
process involves creating and drawing geometric
entities, as our statistics, building all the tree nodes
of Modelica2.1 needs more than 8 seconds. Even if
we adapt the method by saving the images to
temporary bitmap files, this process still needs about
5 seconds.
2.2

Traditional class translating

As we mentioned above, loading process of domain
library only pre-checks the classes but does not
construct structured information which are necessary
for the main class translating.
Traditional class translating process usually includes
three steps: 1) Lexical and syntactical checking. This
step usually depends on professional translating tool
such as ANTLR. At the same time, this checking
process will create abstract syntax tree (AST) of the
main class. 2) Semantic resolving based on AST. It
is to check types and resolve extends clauses,
modifications (including re-declarations), outer or
inner matches, connect clauses, and so on. 3)
Equation system generating. The semantic resolving
prepares necessary information for instantiation
which is performed. The purpose of instantiation is
mainly to generate equation system (continuous
equations and discrete events) for the main class.
Because the main class may include quite a number
of components and extends classes, translating it
needs checking referenced classes of the components
and extends classes, then generating their ASTs
recursively. So if the main class includes a great
many components or extends which are referenced
from domain library, this checking process of the
referenced classes could take long time.

3

Document object model (DOM) of
Modelica class

As an immediate expression of program language,
abstract syntax tree (AST) is adopted abroad to storage

734

Modelica 2006, September 4th-5th,2006

Domain Library Preprocessing in MWorks - A Platform for Modeling and Simulation of Multi-domain Physical Systems
Based on Modelica

structured information of class. But building AST of
Modelica code is a very complicated task, for Modelica
language has a complex syntax structure. Moreover,
translating operation based on AST is more complex.
For example, in Modelica language we can use the
keyword final to constrain element or class being
modified further, as the following code:
final class Volt
String quantity = Voltage;
String unit = Volt;
String displayUnit = V;
end Volt;
For all the class is defined as final, its property
variables (quantity, unit, displayUnit) are also looked
as final. Just to say they all can not be modified. The
prefix deduction of AST needs traverse all nodes of the
class Volt to define which elements need be set final
property. Another more troublesome thing is that we
must add nodes to AST or find particular node to
modify its properties. So, we put forward and design
the so-called ModelicaDOM, i.e. Modelica document
object model, which is a type of container structure.
DOM (Document Object Model) is developed from
XML (eXtensible Markup Language). DOM is defined
formally as [8]: Document Object Model of a type of
document is a platform-independent and languageindependent interface. It allows program or script to
access or modify the content, structure and style of the
document.
ModelicaDOM is a container in physical structure
while stores the tree information of Modelica-based
document in logical structure. We design the class
ModelicaDOM and implement its construct function
and other access functions which are supplied to access
the inner data of its objects.
Relative to AST, ModelicaDOM has the following
advantages:
(1) ModelicaDOM is an object-oriented expression
style. Its nodes of container could be objects of a
class or objects of derived classes of the class.
(2) Logical structure of the syntax tree with
ModelicaDOM is simpler. For Modelica2.1, We
can conveniently storage all its grammar
information. According to grammar, a regular class
can include information of seven types of elements:
imports, extends, nested classes, components,
equations, algorithms and modification information.
So the definition of regular class should comprise
container of this elements. Contrasting with AST,
the number of classes which need be designed in
ModelicaDOM hierarchy decreases about one third.
(3) Access operation of ModelicaDOM is simpler and
more efficient. Finding some element or modifying
data of some element is very convenient and
quickly. For example, if we want to modify the

The Modelica Association

data of a component, we can search and get the
object pointer of the component class firstly, then
modify the corresponding data through interfaces
of the class. However in AST, these operations
often need traverse the whole tree in order to find
and modify the data.
So as a replacer of AST, ModelicaDOM, document
object model of a defined class includes all
information of the class in structured data format.
DOM of a class can be built after the checking
process of class. And it is the base of generating
equation system of the class.
We designed the class hierarchy of ModelicaDOM
according to Modelica semantics like fig. 1.

Fig.1 class hierarchy of ModelicaDOM
The RegularClass class in the hierarchy is one of the
most important classes. RegularClass class has the
following eight derived classes: Model, Class, Package,
Block, Record, Type, Function and Connector classes.
Thereinto, the RegularClass class is a common class
which is usually used to define a simulation model. It
contains about seven kinds of information: imports,
extends, nested classes, components, equations,
algorithms
and
modifications.
In
MWorks,
RegularClass class is designed as following:
class RegularClass :
{
public:
...
//vector pointer of import classes
vector<ImportClass*>*
pImpClasses;
//vector pointer of import packages
vector<ImportPackage*>* pImpPackages;
//vector pointer of extends classes
vector<Extends*>* pBases;
//vector pointer of nested classes
vector<ClassBase*>* pNestedClasses;
//vector pointer of components
vector<Component*>* pComponents;
//vector pointer of annotations
vector<Annotation* * pAnnotations;

735

Modelica 2006, September 4th-5th,2006

Y.-Z. Wu, F.-L. Zhou, L.-P. Chen, J.-W. Ding, J.-J. Zhao

/*if DOM file does not exist, execute domain
library preprocessing*/
else {
/*load mo files in sPath, and build vClasses
roughly*/
vClasses = LoadPath(sPath);
/*rebuild vClasses again, set the pointer value of
referenced classes*/
RebuildDOM(vClasses);
/*generate a DOM file name according to work
dir*/
string sDOMFile=GenerateDOMFileName(sPath);
//save DOM information to sDOMFile
DOMSerilize(sDOMFile,vClasses,DOM_WRITE);
}
//create icons of domain library tree nodes


//container pointer of equations
BehaviorContainer* pEquaContainer;
//container pointer of initial equations
BehaviorContainer* pInitEquaContainer;
//container pointer of algorithms
BehaviorContainer* pAlgoContainer;
//container pointer of initial algorithms
BehaviorContainer* pInitAlgoContainer;
//pointer of modifications of this class
ClassModif* pClassModif;
...
};
But according to Modelica2.1, there are other classes
(enum class and short class) excluding the regular class.
So we design the class Classbase as the base class of
these three classes, which defines all the same
properties and same operations of these classes. And
Classbase will be the base class of all node objects of
the container of ModelicaDOM.

4

Preprocess of domain library in
MWorks

When MWorks system starts up, it will execute the
OnStartup() function automatically like the following
code in C++:
//using MFC
void CMainframe::OnStartup(vector<ClassBase*>
& vClasses;)
{/*vClasses is the container of ModelicaDOM, i.e.
vector of pointer of Classbase*/

/*getting ModelicaPath, these paths were set by
user*/
vector <string> vPaths = GetModelicaLibPaths();
//foreach path do
for(int i=0; i<vPath.size(); i++)
{
string sPath = vPath[i];
//search DOM file from work directory
string sDOMFile = GetDOMFile(sPath);
//if the Dom file exists
if(sDOMFile != )
{
/*read the Dom file, construct vector of Classbase
objects*/
DOMSerilize(sDOMFile, vClasses, DOM_READ);
}

The Modelica Association

}
From above, GetModelicaLibPaths() function gets
paths of Modelica library which will be loaded. If there
exists MODELICAPATH environment variable, the
paths will be extracted from this variable. If not, system
will search the registered table of Windows to get paths
from the key Modelica_Lib_Paths which was set
while MWorks installing.
The function GetDOMFile(sPath) will get a DOM file
according to the const string sPath and the work
directory of MWorks. For an example, if sPath is
C:\\MWorks\\Library\\Modelica and the work
directory is C:\\MWorks\\work, this function will
return C:\\ MWorks\\work\\Modelica.DOM.
The code of creating icons of domain library tree nodes
is leaved out. This process is just like the vClasses
created. When the tree nodes is building according to
the vClasses, it will search the icon images from a
bmps file, if the file does not exists, it will generate an
icon from the icon annotation of the class. At the same
time saving the icon image to a bmps file. For all icons
are saved to one bmps file only if system starts up once,
the icons of domain tree nodes will be created very
quickly through reading the image from the bmps file,
without creating images through constructing
geometric entities and drawing them.
From the code above, preprocess of domain library
includes three stages: library loading, ModelicaDOM
building and serializing. This process is usually
performed when MWorks starts up or software is
installed. It can also be performed via loading library
command. It is performed only once, and results in
generating a DOM file.

736

Modelica 2006, September 4th-5th,2006

Domain Library Preprocessing in MWorks - A Platform for Modeling and Simulation of Multi-domain Physical Systems
Based on Modelica

4.1

Loading of domain library

Like 2.1, MWorks loads all mo files including
structured entities and non-structured entities according
to the specified library directory through executing the
function LoadPath(). At the same time, MWorks
performs lexical and syntactical analysis for the loaded
files.
In addition, MWorks will build the DOM information
roughly when checking, that is to say, it build all the
nodes of the DOM container and set their main
information. For there could exist inner reference
relationships among the classes in domain library, the
pointer of referenced classes of a class could not be all
obtained when the class is constructing. Only after all
the classes are constructed, these pointers information
can be obtained.

4.2

Rebuilding of DOM

4.3

The LoadPath() function only created the DOM
structure roughly, its detailed data are obtained through
RebuildDOM() function after loading process.
As mentioned above, DOM of a class includes all
structured information of the class. DOM of the domain
library contains all structured information of all classes
defined in the domain library. In MWorks, they are
linked as an object-oriented container structure like the
following fig.2 shows.
Modelica

C ontact

R eleaseN otes

O verView

M odelicaL icen

UserGuide

Blocks


ModelicaAdditons
Blocks
Heatflow1D




Multibody
UserGuide


Constants



Multibody




Examples
World





Fig.2 ModelicaDOM of domain library (Modelica2.1)
The container of fig.2 expresses the tree structure of
domain classes like fig.3 shows:

The Modelica Association

Fig.3 tree structure of domain library(Modelica2.1)
Serializing of DOM - Saving

Serializing of DOM involves two aspects: saving DOM
information into DOM files and loading DOM files to
construct DOM data structure. And the former is the
main task of preprocessing of domain library. This is
realized by the function DOMSerialize() whose third
parameter mode is set DOM_WRITE.
After the DOM of one path in domain library has been
constructed, they can be serialized into one DOM
binary file according to DOM data. This process can be
described as the following pseudo-code:
function
DOMSerialize(vector<ClassBase*>vModels,
string
sDOMFileName,
int
mode
=
DOM_WRITE)
{
if(mode == DOM_WRITE)
{
ofstream fs(sDOMFileName, ios::binery);
//write the number of saved classes
fs << vModels->size();
//write data of each class
foreach(pModel in vModels) {
//write the type of class
fs << pModel->GetType();
//write data of class in detail
pModel->WriteToDOMFile(fs);
}
else {//DOM_READ

}
}

737

Modelica 2006, September 4th-5th,2006

Y.-Z. Wu, F.-L. Zhou, L.-P. Chen, J.-W. Ding, J.-J. Zhao

The function WriteToDOMFile() is virtual function
of ClassBase class, which is implemented in the
same functions of its derived classes RegularClass,
ShortClass and EnumClass. From the class hierarchy
of ModelicaDOM, this function of RegularClass is
implemented through its derived classes Model,
Class, Package, Block, Record, Type and Connector.
We give the function code of RegularClass as an
example:
void RegularClass::WriteToDOMFile(ofstream &ofs)
{
//save import classes
ofs << pImpClasses->size()
for(int i=0; i<pImpClasses->size(); i++)
{
ofs << (*pImpClasses)[i]->GetFullName();
}
.. .. ..
//save extends classes
ofs << pBases ->size();
for(int i=0; i< pBases ->size(); i++)
{
(* pBases)[i]->Write(ofs);
}
//save nested classes recursively
ofs << pNestedClasses->size();
for(int i=0; i<pNestedClasses->size(); i++)
{
pNestedClasses[i]->WriteToDOMFile(ofs);
}
//save components
ofs << pComponents ->size();
for(int i=0; i< pComponents ->size(); i++)
{
(*pComponents)[i]->Write(ofs);
}
.. .. ..
}

if(mode == DOM_WRITE)
{

}
else { //DOM_READ
ifstream ifs(sDOMFileName, ios::binery);
//read the number of classes ever saved
ifs >> num;
for( i =0; i<num; i++)
{
//read type of class
ifs >> type;
//Create object of the class
ClassBase * pModel ;
if( type == shortclass)
pModel = new ShortClass();
else if(type == enumclass)
pModel = new EnumClass();
else if(type == class)
pModel = new Class();
else if(type == model)
pModel = new Model();

pModel->ReadFromDOMFile(ifs);
//append to vModels
vModels->append(pModel);
}//end for
}//end of else

}
The function ReadFromDOMFile() is executed in the
same order with saving like the following code:
void RegularClass::ReadFromDOMFile(ifstream &ifs)
{
//read import classes
int nImpSize;
5 Library
loading,
and
class
ifs >> nImpSize;
for(int i=0; i<nImpSize; i++)
translating in MWorks
{
string sImpName;
5.1 Library loading in MWorks
ifs >> sImpName;
ImportClass*pImpClass=
As another aspect of serializing, loading is the reverse
new ImportClass(sImpName);
operation of saving which is implemented through the
pImpClasses->push_back(pImpClass);
function DOMSerialize() with the third parameter mode
}
being DOM_READ. In MWorks, library loading
.. .. ..
process can be described as the following pseudo-code:
//read extends classes
function DOMSerialize(vector<ClassBase*>vModels,
int nExtendsSize;
string sDOMFileName, int mode = DOM_WRITE)
ifs >> nExtendsSize;
{
for(int i=0; i< nExtendsSize; i++)

The Modelica Association

738

Modelica 2006, September 4th-5th,2006

Domain Library Preprocessing in MWorks - A Platform for Modeling and Simulation of Multi-domain Physical Systems
Based on Modelica

{

string sClassName=(*pBases)[i]->GetFullName();
ClassBase * pClass = GetClass(sClassName);
if (pClass == null) {//does not build
pClass = BuildDOM(sClassName);
}
pClass->Translating();

Extends * pExtends = new Extends();
pExtends ->Read(ifs);
pBases->push_back(pExtends);
}
//read nested classes recursively
int nNestedClassSize;
ifs >> nNestedClassSize;
for(int i=0; i<nNestedClassSize; i++)
{
ClassBase * pClass = new ClassBase();
pClass->ReadFromDOMFile(ifs);
pNestedClasses->push_back(pClass);
}
//read components
int nComSize;
ifs >> nComSize;
for(int i=0; i< nComSize; i++)
{
Component * pComp = new Component();
pComp->Read(ifs);
pComponents->push_back(pComp);
}
.. .. ..

}
//neglect nested classes
//generate equations of components
for(int i=0; i< pComponents ->size(); i++)
{
Component *pComp = (*pComponents)[i];
string sCompClass = pComp->GetClassName();
ClassBase * pClass = GetClass(sCompClass);
if(pClass == null) {
pClass = BuildDOM(sCompClass);
}
pClass->Translating();
pComp->GenerateEquSys(es);
}


}
From these pseudo-codes we can see, MWorks lookups
the DOM file which contains the structured information
of domain library from the installed directory first.
Only if this process fails (DOM files does not exist), it
will load domain library and execute preprocessing. If
DOM file exists, MWorks will perform serializing
process: loading but not parsing the DOM file, then
rebuilding the DOM structured information of domain
library in the memory.
5.2

Class translating process in MWorks

In MWorks, translating process of main class can be
described as the following pseudo-code:
void RegularClass::Translating(EquationSystem & es)
{
//generate equations of this class
//container pointer of equations
pEquaContainer->GenerateEquSys(es);
//container pointer of initial equations
pInitEquaContainer->GenerateEquSys(es);
//container pointer of algorithms
pAlgoContainer->GenerateEquSys(es);
//container pointer of initial algorithms
pInitAlgoContainer->GenerateEquSys(es);
//pointer of modifications of this class
pClassModif->GenerateEquSys(es);
//generate equations of extends classes recursively
for(int i=0; i< pBases ->size(); i++)
{
The Modelica Association

}
The function BuildDOM() involves getting the path
from full-name of the class, loading it with
LoadPath() function and rebuilding DOM with
Rebuilding() function.
As we know, first step of translating the main class is
to build DOM of the class. And building the DOM of
main model will lookup or construct DOM of its
extends classes and component classes which usually
referenced from the domain library. Because the
domain library has been loaded when system starts
up and DOM of the library has been constructed, this
process only needs looking-up of DOM referenced
classes. And this process only needs getting pointers
to the DOM of domain library.
5.3

Generating Fulltext of Class from DOM

As a Modelica-based platform, MWorks has five
views which express five aspects of the class
respectively: Fultext view, Icon view, Diagram view,
HTML view and Simulation view. The Icon view and
the HTML view express icon and HTML information
of the class and their information is obtained from
the pAnnotations variable of the class and the base
classes recursively. The Diagram view expresses
diagram entities, components blocks and connect
among components of the class, so its information
comes from the pAnnotation variable of the main
class and its base classes recursively, pComponents
and connect part of pEquaContainter of the main
class. The Fulltext view is mo text expression of the
main class. Because we have adopted domain library
preprocessing, the mo text information of the classes

739

Modelica 2006, September 4th-5th,2006

Y.-Z. Wu, F.-L. Zhou, L.-P. Chen, J.-W. Ding, J.-J. Zhao

in the domain library was lost. So if we want to show
the full-text of these classes, the mo text of each
class must be reconstructed from the DOM structure.
Generating process of the fulltext of a class is similar
as the saving process from DOM information to
DOM file. And the distinguish from saving is that it
prints the DOM information to its original mo text
string while saving process saves all the property
data of the class to a binary file. As an example, the
import class information pImpClasses converts to mo
text like the following code:
void RegularClass::ToString(string & sText)
{
//print pImportClass to string
for(int i=0; i< pImpClasses->size(); i++)
{
sText += import ;
sText += pImpClasses[i].GetFullName();
sText += ;\n;
}

}

6

7

The paper was supported by project of Chinese
National Science Foundation Committee (60574053),
Chinese 863 high tech project (2003AA001031) and
Chinese 973 project (2003CB716207).

References

Conclusions

[1]
[2]
[3]
[4]

[5]

[6]

We have implemented a modern IDE for modeling
and simulation of multi-domain physical systems
based on Modelica - MWorks. It has a larruping
feature of domain library preprocessing, which
improves loading speed of library and translating
speed of the simulation model rapidly. But from
other point of view, domain library preprocess needs
much larger memory space. In other words, we
sacrifice space complexity to gain time saving. The
following is time and space consuming contrast:
Time contrasting: for Modelica2.1, using a computer
with its CPU being 2.4Gmps, memory being 512M,
loading mo text file needs more then 300s, while if
we adopt preprocessing, loading the DOM file only
needs 6s.
Space contrasting: with the same computer, loading
without building DOM structure only needs 11M,
while through preprocessing the occupied memory
will reach to or exceed 100M.
In addition, for the DOM file saves the structured
information but not in mo text format, classes in the
library can be encrypted easily through the preprocessing.

The Modelica Association

Acknowledgement

740

[7]

[8]

Modelica, http://www.modelica.org/, 2006.
Dynasim. Dymola, http://www.dynasim.se/,
2006
MathCore.
MathModelica,
http://www.mathcore.se/, 2006
OpenModelica Fritzson, P., et al. The Open
Source Modelica Project. in Proceedings of
The 2th International Modelica Conference,
18-19 March, 2002. Munich, Germany.
C. Nytsch-Geusen et. al., Fraunhofer Institutes,
Germany: MOSILAB: Development of a
Modelica based generic simulation tool
supporting model structural dynamics in
Proceedings of The 4th International Modelica
Conference, 7-8 March, 2005. HamburgHarburg, Germany.
M. Najafi, S. Furic, R. Nikoukhah, Imagine;
INRIA-Rocquencourt, France: SCICOS: a
general purpose modeling and simulation
environment in Proceedings of The 4th
International Modelica Conference, 7-8 March,
2005. Hamburg-Harburg, Germany.
Peter Fritzson, Principles of Object-Oriented
Modeling and Simulation with Modelica 2.1,
Wiley-IEEE Press, 2004
Document Object Model (DOM). http://www.
w3. org/DOM/, 2006

Modelica 2006, September 4th-5th,2006

2006
Proceedings of the
5 International Modelica Conference
th

September 4th5th, 2006
arsenal research
Vienna, Austria
Dr. Christian Kral (Conference Chair)
Anton Haumer (Program Chair)

Volume 1

organized by
The Modelica Association
and arsenal research

All papers of this conference can be downloaded from
http://www.modelica.org/events/modelica2006

Proceedings of Modelica2006
arsenal research
Vienna, Austria, September 4th-5th, 2006
Conference Chair: Dr. Christian Kral
Program Chair:
Anton Haumer
Published by:
The Modelica Association (http://www.modelica.org/) and
arsenal research (http://www.arsenal.ac.at/)

The Modelica Association

ii

Modelica 2006, September 4th  5th

Preface

Preface
The first International Modelica Conference took place October 2000, in Lund, Sweden. Since then,
Modelica has increasingly become the preferred modeling language for complex multi-domain systems.
During this time, the community of Modelica users has grown continuously. This is also reflected in the
great response to the Call for Papers of the 5th International Modelica Conference. This years conference
will be held on September 4th-5th, 2006 in Vienna. From the excellent papers submitted to the program
committee, it was finally decided to include 66 oral and 15 poster presentations in the technical program. The
technical papers cover thermodynamic and automotive applications, mechanical and electrical systems and
the latest developments in modelling and simulation products. Before the conference, there will be five
parallel tutorials. These tutorials include an introduction to Modelica, mathematical aspects of modeling, as
well as the modeling of electric drives, vehicle and thermodynamic systems.
Due to the special features of the Modelica language, such as object-oriented modeling and the ability to
reuse and exchange models, Modelica strongly supports an integrated engineering design process. This fact
is emphasized by the keynote of Dominique Florack, Executive Vice President R&D of Dassault Systemes,
About the strategic decision of Dassault Systemes to select Modelica to be at the core of Dassault Systemes'
open strategy for CATIA Systems. In various fields Modelica is being used as a standard platform for
model exchange between suppliers and OEMs.
A key issue for the success of Modelica is the continuous development of the Modelica language as well as
the Modelica Standard Library by the Modelica Association under strict observance of backward
compatibility with previous versions. The broad base of private and institutional members of the Modelica
Association as a non-profit organization ensures language stability and security in software investments.
The 5th International Modelica Conference was organized by the Modelica Association and arsenal research,
Vienna, Austria. We would like to thank the local organizing committee, the technical program committee
and the reviewers for offering their time and expertise throughout the organization of the conference. We
would also like to wish all participants an excellent and interesting conference and hope you will have a
memorable experience in Vienna.

Vienna, September 1st, 2006

Dr. Christian Kral
Conference Chair

The Modelica Association

Anton Haumer
Program Chair

iii

Modelica 2006, September 4th  5th

Program Committee


Conference Chair: Dr. Christian Kral, arsenal research, Vienna, Austria



Program Chair:

Anton Haumer, arsenal research, Vienna, Austria



Program Board:

Prof. Martin Otter, DLR, Oberpfaffenhofen, Germany



Program Board:

Prof. Peter Fritzson, Linkping University, Sweden



Program Board:

Dr. Hilding Elmqvist, Dynasim AB, Lund, Sweden



Program Board:

Dr. Michael Tiller, Emmeskay Inc., Michigan, USA



Prof. Bernhard Bachmann, University of Applied Sciences Bielefeld, Germany



Dr. Ingrid Bausch-Gall, Bausch-Gall GmbH, Munich, Germany



Daniel Bouskela, Electricite de France, Chatou Cedex, France



Prof. Felix Breitenecker, Technical University Vienna, Austria



Dr. Francesco Casella, Politecnico di Milano, Cremona, Italy



Thomas Christ / Marco Bross, BMW, Munich, Germany



Dr. Ruediger Franke, ABB, Heidelberg, Germany



Dirk Limperich, DaimlerChrysler AG, Sindelfingen, Germany



Prof. Karin Lunde, University of Applied Sciences Ulm, Germany



Ludwig Marvan, DRIVEScom, Vienna, Austria



Dr. Jakob Mauss, DaimlerChrysler AG, Berlin, Germany



Gert Pascoli, arsenal research, Vienna, Austria



Franz Pirker, arsenal research, Vienna, Austria



Markus Plainer, arsenal research, Vienna, Austria



Prof. Gerhard Schmitz, Technical University Hamburg-Harburg, Germany



Dr. Hubertus Tummescheit, Modelon AB, Lund, Sweden

Local Organizing Committee


Anton Haumer



Dr. Christian Kral



Franz Pirker



Veronika Roscher



Silke Schrdl



WEBSTRACTS on-line Conference Management



procon Conference, Incentive & Event Management GmbH

The Modelica Association

iv

Modelica 2006, September 4th  5th

Table of Contents

Table of Contents
Volume 1
Session 1a: Thermodynamic Systems for Power Plant Applications 1 .............................................................1
Fast Start-up of a Combined-Cycle Power Plant: A Simulation Study with Modelica ............................3
F. Casella[1], F. Pretolani[2]
[1]
Politecnico di Milano, Italy, [2]CESI S.p.A., Italy
Modelling of a Water/Steam Cycle of the Combined Cycle Power Plant Rio Bravo 2
with Modelica ...............................................................................................................................11
B. El Hefni, D. Bouskela
EDF R&D, France
Modeling and Dynamic Analysis of CO2-Emission Free Power Processes in Modelica
using the CombiPlant Library .......................................................................................................17
J. Eborn[1], F. Selimovic[2], B. Sundn[2]
[1]
Modelon AB, Sweden, [2]Lund Institute of Technology, Sweden
Session 1b: Automotive Applications 1...........................................................................................................23
Simulation of Hybrid Electric Vehicles..................................................................................................25
D. Simic, H. Giuliani, C. Kral, J.V. Gragger
arsenal research, Austria
Coordinated Automotive Libraries for Vehicle System Modelling........................................................33
M. Dempsey[1], M. Gfvert[2], P. Harman[3], C. Kral[4], M. Otter[5], P. Treffinger[6]
[1]
Claytex Services Ltd., UK, [2]Modelon AB, Sweden, [3]Ricardo UK Ltd., UK,
[4]
arsenal research, Austria, [5]DLR Oberpfaffenhofen, Germany, [6]DLR Stuttgart, Germany
The VehicleDynamics Library - Overview and Applications ................................................................43
J. Andreasson, M. Gfvert
Modelon AB, Sweden
Session 1c: Language, Tools and Algorithms 1...............................................................................................53
Modelica CVD - A Tool for Visualizing the Structure of Modelica Libraries.......................................55
M. Loeffler[1], M. Huhn[1], C.C. Richter[1], R. Kossel[2]
[1]
TU Braunschweig, Germany, [2]TLK-Thermo GmbH, Germany
Advanced Modeling and Simulation Techniques in MOSILAB:
A System Development Case Study .............................................................................................63
C. Nytsch-Geusen[1], T. Ernst[1], A. Nordwig[1], P. Schwarz[2], P. Schneider[2], M. Vetter[3],
C. Wittwer[3], A. Holm[4], T. Nouidui[4], J. Leopold[5], G. Schmidt[5], A. Mattes[6]
[1]
Fraunhofer FIRST, Germany, [2]Fraunhofer IIS/EAS, Germany, [3]Fraunhofer ISE, Germany,
[4]
Fraunhofer IBP, Germany, [5]Fraunhofer IWU, Germany, [6]Fraunhofer IPK, Germany
Quantised State System Simulation in Dymola/Modelica Using the DEVS Formalism........................73
T. Beltrame[1], F.E. Cellier[2]
[1]
VTT, Finland, [2]ETH Zurich, Switzerland

The Modelica Association

v

Modelica 2006, September 4th  5th

Table of Contents

Session 1d: Mechanical Systems and Applications 1 ......................................................................................83
The DLR FlexibleBodies Library to Model Large Motions of Beams and of
Flexible Bodies Exported from Finite Element Programs ............................................................85
A. Heckmann[1], M. Otter[1], S. Dietz[2], J.D. Lopez[3]
[1]
German Aerospace Center (DLR), Germany, [2]INTEC GmbH, Germany,
[3]
Dynasim AB, Sweden
3D Flexible Multibody Thin Beams Simulation in Modelica with the Finite Element Method.............97
X. Murua, F. Martinez, A. Pujana, J. Basurko, J.M. Pagalday
IKERLAN Research Centre, Spain
A Modelica Library for Space Flight Dynamics ..................................................................................107
T. Pulecchi, F. Casella, M. Lovera
Politecnico di Milano, Italy
Session 2a: Thermodynamic Systems for Power Plant Applications 2 .........................................................117
Simulation of Components of a Thermal Power Plant .........................................................................119
R. Schimon, D. Simic, A. Haumer, C. Kral, M. Plainer
arsenal research, Austria
Pressurized Water Reactor Modelling with Modelica ..........................................................................127
A. Souyri[1], D. Bouskela[1], B. Pentori[2], N. Kerkar[2]
[1]
Electricit de France EDF/R&D, France, [2]Electricit de France EDF/SEPTEN, France
Simulation of the Start-Up Procedure of a Parabolic Trough Collector Field
with Direct Solar Steam Generation ...........................................................................................135
T. Hirsch, M. Eck
German Aerospace Center, Institute of Technical Thermodynamics, Germany
Session 2b: Automotive Applications 2.........................................................................................................145
Modeling the Dynamics of Vehicle Fuel Systems................................................................................147
J.J. Batteh, P.J. Kenny
Ford Motor Company, USA
Motorcycle Dynamics Library in Modelica..........................................................................................157
F. Donida , G. Ferretti, S.M. Savaresi, F. Schiavo, M. Tanelli
Politecnico di Milano, Italy
Development and Verification of a Series Car Modelica/Dymola Multi-body Model
to Investigate Vehicle Dynamics Systems ..................................................................................167
C. Knobel[1], G. Janin[2], A. Woodruff[3]
[1]
BMW Group Research and Technology, Germany,
[2]
cole Nationale Suprieure de Techniques Avances, France, [3]Modelon AB, Sweden
Session 2c: Language, Tools and Algorithms 2.............................................................................................175
Modeling and Simulation of Differential Equations in Scicos .............................................................177
M. Najafi, R. Nikoukhah
INRIA-Rocquencourt, France
How to Dissolve Complex Dynamic Systems for Wanted Unknowns with Dymola / Modelica.........187
J. Koehler
ZF Friedrichshafen AG, Germany

The Modelica Association

vi

Modelica 2006, September 4th  5th

Table of Contents
Using Modelica Models for Complex Virtual Experimentation with the Tornado Kernel ..................193
F.H.A. Claeys[1], P. Fritzson[2], P.A. Vanrolleghem[3]
[1]
BIOMATH, Ghent University, Belgium, [2]PELAB, Linkping University, Sweden,
[3]
modelEAU, Universit Laval, Canada
Session 2d: Mechanical Systems and Applications 2 ....................................................................................203
Leaf Spring Modeling...........................................................................................................................205
N. Philipson
Modelon AB, Sweden
Multibody Systems Dynamics: Modelica Implementation and Bond Graph Representation ..............213
I.I. Kosenko[1], M.S. Loginova[2], YA.P. Obraztsov[2], M.S. Stavrovskaya[1]
[1]
Moscow State University of Service, Russian Federation,
[2]
Moscow State Academy of Instrument Making and Computer Science, Russian Federation
NowaitTransit Concept Assessment. Modeling of Trains on Complex Track Geometry ....................225
J. Tuszynski[1], N. Philipson[2], J. Andreasson[2], M. Gfvert[2]
[1]
Nowaittransit AB, Sweden, [2]Modelon AB, Sweden
Session 3a: Thermodynamic Systems for Energy Storage and Conversion ..................................................233
Analysis of Steam Storage Systems using Modelica............................................................................235
J. Buschle, W.D. Steinmann, R. Tamme
German Aerospace Center (DLR), Germany
An Enhanced Discretisation Method for Storage Tank Models within Energy Systems .....................243
S. Wischhusen
XRG Simulation GmbH, Germany
HydroPlant  a Modelica Library for Dynamic Simulation of Hydro Power Plants ............................251
K. Tuszynski[1], J. Tuszynski[2], K. Slttorp[3]
[1]
Modelon AB, Sweden, [2]Datavoice HB, Sweden, [3]Tactel AB, Sweden
Session 3b: Hardware in the Loop .................................................................................................................259
Interacting Modelica using a Named Pipe for Hardware-in-the-loop Simulation ................................261
A. Ebner, A. Haumer, D. Simic, F. Pirker
arsenal research, Austria
Parameterisation of Modelica Models on PC and Real Time Platforms ..............................................267
M. Kellner[1], M. Neumann[1], A. Banerjee[1], P. Doshi[2]
[1]
ZF Friedrichshafen AG, Germany, [2]Universitt Duisburg-Essen, Germany
Synchronising a Modelica Real-Time Simulation Model with a Highly Dynamic
Engine Test-Bench System .........................................................................................................275
D. Winkler, C. Ghmann
Technische Universitt Berlin, Germany
Session 3c: Language, Tools and Algorithms 3.............................................................................................283
A Numeric Library for Use in Modelica Simulations with Lapack, SuperLU, Interpolation,
and MatrixIO...............................................................................................................................285
A. Sandholm[1,2], P. Bunus[1], P. Fritzson[1]
[1]
Linkping University, Sweden, [2]Kalmar University, Sweden
Online Application of Modelica Models in the Industrial IT Extended Automation System 800xA...293
R. Franke[1], J. Doppelhamer[2]
[1]
ABB AG, Power Technology Systems, Germany, [2]ABB Corporate Research, Germany
The Modelica Association

vii

Modelica 2006, September 4th  5th

Table of Contents
Types in the Modelica Language..........................................................................................................303
D. Broman[1], P. Fritzson[1], S. Furic[2]
[1]
Linkping University, Sweden, [2]Imagine, France
Session 3d: Electric Systems and Applications 1 ..........................................................................................317
Modeling and Simulation of Generator Circuit Breaker Performance .................................................319
O. Fritz[1], M. Lakner[2]
[1]
ABB Switzerland Ltd., Corporate Research, Switzerland,
[2]
ABB Switzerland Ltd., High-Current Systems, Switzerland
Parallel Simulation with Transmission Lines in Modelica ...................................................................325
K. Nystrm, P. Fritzson
Linkping University, Sweden

Volume 2
Session 4: Poster Session ...............................................................................................................................333
GAPILib - A Modelica Library for Model Parameter Identification Using Genetic Algorithms ........335
M.A. Rubio[1], A. Urquia[2], L. Gonzlez[1], D. Guina[1], S. Dormido[2]
[1]
Instituto de Automtica Industrial (IAI), CSIC, Spain,
[2]
ETS de Ingeniera Informtica, UNED, Spain
Ascola: A Tool for Importing Dymola Code into Ascet.......................................................................343
C. Schlegel[1], R. Finsterwalder[2]
[1]
Schlegel Simulation GmbH, Germany,
[2]
University of the FederalArmed Forces Munich, Germany
An Analyzer for Declarative Equation Based Models..........................................................................349
J.-W. Ding[1], L.-P. Chen[1], F.-L. Zhou[1], Y.-Z. Wu[1], G.B. Wang[2]
[1]
Huazhong University of Science and Technology, China,
[2]
National Natural Science Foundation of China, China
Engineering Design Tool Standards and Interfacing Possibilities to Modelica Simulation Tools .......359
O. Johansson, A. Pop, P. Fritzson
Linkping University, Sweden
On the Noise Modelling and Simulation ..............................................................................................369
D. Aiordachioaie, V. Nicolau, M. Munteanu, G. Sirbu
Dunarea de Jos Galati University, Romaina
Acausal Modelling of Helicopter Dynamics for Automatic Flight Control Applications ....................377
L. Vigan, G. Magnani
Politecnico di Milano, Italy
Dynamic Modeling and Control of a 6 DOF Parallel Kinematics........................................................385
M. Krabbes, Ch. Meissner
Leipzig University of Applied Sciences, Germany
Modelling of Alternative Propulsion Concepts of Railway Vehicles...................................................391
H. Dittus, J. Ungethm
German Aerospace Center, Institute of Vehicle Concepts, Germany
Modelling Automotive Hydraulic Systems using the Modelica ActuationHydraulics Library............399
P.A. Harman
Ricardo UK Ltd., UK

The Modelica Association

viii

Modelica 2006, September 4th  5th

Table of Contents
Vehicle Model for Transient Simulation of a Waste-Heat-Utilisation-Unit
Containing Extended PowerTrain and Fluid Library Components.............................................405
M. Eschenbach, J. Ungethm, P. Treffinger
German Aerospace Center, Germany
Modeling, Calibration and Control of a Paper Machine Dryer Section................................................411
J. kesson[1], O. Slttke[2]
[1]
Lund University, Sweden, [2]ABB Ltd., Ireland
System and Component Design of Directly Driven Reciprocating Compressors with Modelica ........421
T. Bdrich
Dresden University of Technology, Germany
Multizone Airflow Model in Modelica.................................................................................................431
M. Wetter
United Technologies Research Center, USA
Modelling of a Solar Thermal Reactor for Hydrogen Generation ........................................................441
J. Dersch, A. Mathijssen, M. Roeb, C. Sattler
Deutsches Zentrum fr Luft- und Raumfahrt e.V. (DLR), Germany
Object Oriented Modelling of DISS Solar Thermal Power Plant.........................................................449
L.J. Yebra[1], M. Berenguel[2], E. Zarza[1], S. Dormido[3]
[1]
C.I.E.M.A.T., Spain, [2]Universidad de Almera, Spain, [3]U.N.E.D., Spain
Session 5a: Language, Tools and Algorithms 4.............................................................................................457
OpenModelica Development Environment with Eclipse Integration for Browsing, Modeling,
and Debugging ............................................................................................................................459
A. Pop, P. Fritzson, A. Remar, E. Jagudin, D. Akhvlediani
Linkping University, Sweden
A Modelica Based Format for Flexible Modelica Code Generation and
Causal Model Transformations...................................................................................................467
J. Larsson, P. Fritzson
Linkping University, Sweden
Dymola interface to Java - A Case Study: Distributed Simulations .....................................................477
J.D. Lopez, H. Olsson
Dynasim AB, Sweden
Simulation of Complex Systems using Modelica and Tool Coupling..................................................485
R. Kossel, W. Tegethoff, M. Bodmann, N. Lemke
TLK-Thermo GmbH, Germany
Session 5b: Thermodynamic Systems for Cooling Applications...................................................................491
Optimization of a Cooling Circuit with a Parameterized Water Pump Model .....................................493
D. Simic, C. Kral, H. Lacher
arsenal research, Austria
Using Modelica as a Design Tool for an Ejector Test Bench...............................................................501
C.C. Richter, C. Tischendorf, R. Fiorenzano, P. Cavalcante, W. Tegethoff, J. Khler
TU Braunschweig, Germany
Modeling of Frost Growth on Heat Exchanger Surfaces......................................................................509
K. Proelss, G. Schmitz
Hamburg University of Technology, Germany

The Modelica Association

ix

Modelica 2006, September 4th  5th

Table of Contents
Multizone Building Model for Thermal Building Simulation in Modelica..........................................517
M. Wetter
United Technologies Research Center, USA
Session 5c: Free and Commercial Libraries 1................................................................................................527
The LinearSystems Library for Continuous and Discrete Control Systems.........................................529
M. Otter
German Aerospace Center (DLR), Germany
ARENALib: A Modelica Library for Discrete-Event System Simulation ...........................................539
V.S. Prat, A. Urquia, S. Dormido
ETS de Ingeniera Informtica, UNED, Spain
Neural Network Library in Modelica ...................................................................................................549
F. Codec, F. Casella
Politecnico di Milano, Italy
The Modelica Multi-bond Graph Library.............................................................................................559
D. Zimmer, F.E. Cellier
ETH Zrich, Switzerland
Session 5d: Electric Systems and Applications 2 ..........................................................................................569
The SmartElectricDrives Library - Powerful Models for Fast Simulations of Electric Drives ............571
J.V. Gragger, H. Giuliani, C. Kral, T. Buml, H. Kapeller, F. Pirker
arsenal research, Austria
Quasi-stationary AC Analysis Using Phasor Description With Modelica ...........................................579
O. Enge[1], C. Clau[1], P. Schneider[1], P. Schwarz[1], M. Vetter[2], S. Schwunk[2]
[1]
Fraunhofer Institute Integrated Circuits, Germany,
[2]
Fraunhofer Institute Solar Energy Systems, Germany
Identification and Controls of Electrically Excited Synchronous Machines ........................................589
H. Kapeller, A. Haumer, C. Kral, F. Pirker, G. Pascoli
arsenal research, Austria
Session 6a Language, Tools and Algorithms 5 ..............................................................................................597
Dynamic Optimization of Energy Supply Systems with Modelica Models .........................................599
C. Hoffmann, H. Puta
Technische Universitaet Ilmenau, Germany
Robust Initialization of Differential Algebraic Equations ....................................................................607
B. Bachmann[1], P. Aronsson[2], P. Fritzson[2]
[1]
University of Applied Sciences, Germany, [2]Linkping University, Sweden
Calibration of Static Models using Dymola .........................................................................................615
H. Olsson[1], J. Eborn[2], S.E. Mattsson[1], H. Elmqvist[1]
[1]
Dynasim AB, Sweden, [2]Modelon AB, Sweden
Automatic Fixed-point Code Generation for Modelica using Dymola ................................................621
U. Nordstrm[1,2], J. D. Lopez [1], H. Elmqvist[1]
[1]
Dynasim AB, Sweden, [2]Lund Institute of Technology, Sweden

The Modelica Association

x

Modelica 2006, September 4th  5th

Table of Contents

Session 6b: Thermodynamic Systems and Applications ...............................................................................629
The Modelica Fluid and Media Library for Modeling of Incompressible and Compressible
Thermo-Fluid Pipe Networks .....................................................................................................631
F. Casella[1], M. Otter[2], K. Proelss[3], C. Richter[4], H. Tummescheit[5]
[1]
Politecnico di Milano, Italy, [2]German Aerospace Center (DLR), Germany,
[3]
Technical University Hamburg-Harburg, Germany,
[4]
Technical University Braunschweig, Germany, [5]Modelon AB, Sweden
Shock Wave Modeling for Modelica.Fluid Library using Oscillation-free
Logarithmic Reconstruction........................................................................................................641
J. D. Lopez
Dynasim AB, Sweden
Modelling of an Experimental Batch Plant with Modelica ..................................................................651
K. Poschlad[1], M.A.P. Remelhe[1], M. Otter[2]
[1]
University of Dortmund, Germany, [2]German Aerospace Center (DLR), Germany
Integral Analysis for Thermo-Fluid Applications with Modelica ........................................................661
J.J. Batteh
Ford Motor Company, Research and Advanced Engineering, USA
Session 6c: Free and Commercial Libraries 2................................................................................................669
Integration of CATIA with Modelica ...................................................................................................671
P. Bhattacharya[1], N. Suyam Welakwe[2], R. Makanaboyina[1], A. Chimalakonda[1]
[1]
DaimlerChrysler Research and Technology, India,
[2]
DaimlerChrysler Research and Technology, Germany
A Modelica Library for Simulation of Household Refrigeration Appliances Features and Experiences............................................................................................................677
C. Heinrich, K. Berthold
Institute for Air Conditioning and Refrigeration, Germany
A New Energy Building Simulation Library ........................................................................................685
J.I. Videla, B. Lie
Telemark University College, Norway
UnitTesting: A Library for Modelica Unit Testing ..............................................................................695
M.M. Tiller, B. Kittirungsi
Emmeskay, Inc., USA
Session 6d: Multidomain Systems .................................................................................................................705
If We Only had Used XML ..................................................................................................................707
U. Reisenbichler, H. Kapeller, A. Haumer, C. Kral, F. Pirker, G. Pascoli
arsenal research, Austria
Coupled Simulation of Building Structure and Building Services Installations with Modelica...........717
P. Matthes, T. Haase, A. Hoh, T. Tschirner, D. Mller
TU Berlin, Germany
MWorks: a Modern IDE for Modeling and Simulation of Multi-domain Physical Systems
Based on Modelica......................................................................................................................725
F.-L. Zhou, L.-P. Chen, Y.-Z. Wu, J.-W. Ding, J.-J. Zhao, Y.-Q. Zhang
Huazhong University of Science and Technology, China

The Modelica Association

xi

Modelica 2006, September 4th  5th

Table of Contents
Domain Library Preprocessing in MWorks - A Platform for Modeling and Simulation of
Multi-domain Physical Systems Based on Modelica..................................................................733
Y.-Z. Wu, F.-L. Zhou, L.-P. Chen, J.-W. Ding, J.-J. Zhao
Huazhong University of Science and Technology, China

The Modelica Association

xii

Modelica 2006, September 4th  5th

Index of Authors

Index of Authors
Aiordachioaie, D.
On the Noise Modelling and Simulation ..............................................................................................369
kesson, J.
Modeling, Calibration and Control of a Paper Machine Dryer Section................................................411
Akhvlediani, D.
OpenModelica Development Environment with Eclipse Integration for Browsing, Modeling,
and Debugging......................................................................................................................................459
Andreasson, J.
NowaitTransit Concept Assessment. Modeling of Trains on Complex Track Geometry ....................225
The VehicleDynamics Library - Overview and Applications ................................................................43
Aronsson, P.
Robust Initialization of Differential Algebraic Equations ....................................................................607
Bachmann, B.
Robust Initialization of Differential Algebraic Equations ....................................................................607
Banerjee, A.
Parameterisation of Modelica Models on PC and Real Time Platforms ..............................................267
Basurko, J.
3D Flexible Multibody Thin Beams Simulation in Modelica with the Finite Element Method.............97
Batteh, J.J.
Integral Analysis for Thermo-Fluid Applications with Modelica ........................................................661
Modeling the Dynamics of Vehicle Fuel Systems................................................................................147
Buml, T.
The SmartElectricDrives Library - Powerful Models for Fast Simulations of Electric Drives ............571
Beltrame, T.
Quantised State System Simulation in Dymola/Modelica Using the DEVS Formalism........................73
Berenguel, M
Object Oriented Modelling of DISS Solar Thermal Power Plant.........................................................449
Berthold, K
A Modelica Library for Simulation of Household Refrigeration Appliances Features and Experiences .....................................................................................................................677
Bhattacharya, P.
Integration of CATIA with Modelica ...................................................................................................671
Bodmann, M
Simulation of Complex Systems using Modelica and Tool Coupling..................................................485
Bdrich, T.
System and Component Design of Directly Driven Reciprocating Compressors with Modelica ........421
Bouskela, D.
Modelling of a Water/Steam Cycle of the Combined Cycle Power Plant Rio Bravo 2
with Modelica .........................................................................................................................................11
Pressurized Water Reactor Modelling with Modelica ..........................................................................127
Broman, D.
Types in the Modelica Language..........................................................................................................303

The Modelica Association

xiii

Modelica 2006, September 4th  5th

Index of Authors
Bunus, P.
A Numeric Library for Use in Modelica Simulations with Lapack, SuperLU, Interpolation,
and MatrixIO ........................................................................................................................................285
Buschle, J.
Analysis of Steam Storage Systems using Modelica............................................................................235
Casella, F.
A Modelica Library for Space Flight Dynamics...................................................................................107
Fast Start-up of a Combined-Cycle Power Plant: A Simulation Study with Modelica ............................3
Neural Network Library in Modelica ...................................................................................................549
The Modelica Fluid and Media Library for Modeling of Incompressible and Compressible
Thermo-Fluid Pipe Networks ...............................................................................................................631
Cavalcante, P.
Using Modelica as a Design Tool for an Ejector Test Bench...............................................................501
Cellier, F.E.
Quantised State System Simulation in Dymola/Modelica Using the DEVS Formalism........................73
The Modelica Multi-bond Graph Library .............................................................................................559
Chen, L.-P.
An Analyzer for Declarative Equation Based Models..........................................................................349
Domain Library Preprocessing in MWorks - A Platform for Modeling and Simulation of
Multi-domain Physical Systems Based on Modelica............................................................................733
MWorks: a Modern IDE for Modeling and Simulation of Multi-domain Physical Systems
Based on Modelica ...............................................................................................................................725
Chimalakonda, A.
Integration of CATIA with Modelica ...................................................................................................671
Claeys, F.H.A.
Using Modelica Models for Complex Virtual Experimentation with the Tornado Kernel ..................193
Clau, C.
Quasi-stationary AC Analysis Using Phasor Description With Modelica ...........................................579
Codec, F.
Neural Network Library in Modelica ...................................................................................................549
Dempsey, M.
Coordinated Automotive Libraries for Vehicle System Modelling........................................................33
Dersch, J.
Modelling of a Solar Thermal Reactor for Hydrogen Generation ........................................................441
Dietz, S.
The DLR FlexibleBodies Library to Model Large Motions of Beams
and of Flexible Bodies Exported from Finite Element Programs...........................................................85
Ding, J.-W.
An Analyzer for Declarative Equation Based Models..........................................................................349
Domain Library Preprocessing in MWorks - A Platform for Modeling and Simulation of
Multi-domain Physical Systems Based on Modelica............................................................................733
MWorks: a Modern IDE for Modeling and Simulation of Multi-domain Physical Systems
Based on Modelica ...............................................................................................................................725
Dittus, H.
Modelling of Alternative Propulsion Concepts of Railway Vehicles...................................................391
Donida , F
Motorcycle Dynamics Library in Modelica..........................................................................................157

The Modelica Association

xiv

Modelica 2006, September 4th  5th

Index of Authors
Doppelhamer, J.
Online Application of Modelica Models in the Industrial IT Extended Automation System 800xA...293
Dormido, S.
ARENALib: A Modelica Library for Discrete-Event System Simulation ...........................................539
GAPILib - A Modelica Library for Model Parameter Identification
Using Genetic Algorithms ....................................................................................................................335
Object Oriented Modelling of DISS Solar Thermal Power Plant.........................................................449
Doshi, P.
Parameterisation of Modelica Models on PC and Real Time Platforms ..............................................267
Ebner, A.
Interacting Modelica using a Named Pipe for Hardware-in-the-loop Simulation ................................261
Eborn, J.
Calibration of Static Models using Dymola .........................................................................................615
Modeling and Dynamic Analysis of CO2-Emission Free Power Processes in Modelica
using the CombiPlant Library.................................................................................................................17
Eck, M.
Simulation of the Start-Up Procedure of a Parabolic Trough Collector Field with Direct Solar
Steam Generation..................................................................................................................................135
El Hefni, B.
Modelling of a Water/Steam Cycle of the Combined Cycle Power Plant
Rio Bravo 2 with Modelica .................................................................................................................11
Elmqvist, H.
Automatic Fixed-point Code Generation for Modelica using Dymola.................................................621
Calibration of Static Models using Dymola .........................................................................................615
Enge, O.
Quasi-stationary AC Analysis Using Phasor Description With Modelica ...........................................579
Ernst, T.
Advanced Modeling and Simulation Techniques in MOSILAB:
A System Development Case Study .......................................................................................................63
Eschenbach, M.
Vehicle Model for Transient Simulation of a Waste-Heat-Utilisation-Unit Containing Extended
PowerTrain and Fluid Library Components .........................................................................................405
Ferretti, G.
Motorcycle Dynamics Library in Modelica..........................................................................................157
Finsterwalder, R.
Ascola: A Tool for Importing Dymola Code into Ascet.......................................................................343
Fiorenzano, R.
Using Modelica as a Design Tool for an Ejector Test Bench...............................................................501
Franke, R.
Online Application of Modelica Models in the Industrial IT Extended Automation System 800xA...293
Fritz, O.
Modeling and Simulation of Generator Circuit Breaker Performance .................................................319

The Modelica Association

xv

Modelica 2006, September 4th  5th

Index of Authors
Fritzson, P.
A Modelica Based Format for Flexible Modelica Code Generation and Causal Model
Transformations....................................................................................................................................467
A Numeric Library for Use in Modelica Simulations with Lapack, SuperLU, Interpolation,
and MatrixIO ........................................................................................................................................285
Engineering Design Tool Standards and Interfacing Possibilities to Modelica Simulation Tools .......359
OpenModelica Development Environment with Eclipse Integration for Browsing, Modeling,
and Debugging......................................................................................................................................459
Parallel Simulation with Transmission Lines in Modelica ...................................................................325
Robust Initialization of Differential Algebraic Equations ....................................................................607
Types in the Modelica Language..........................................................................................................303
Using Modelica Models for Complex Virtual Experimentation with the Tornado Kernel ..................193
Furic, S.
Types in the Modelica Language..........................................................................................................303
Gfvert, M.
Coordinated Automotive Libraries for Vehicle System Modelling........................................................33
NowaitTransit Concept Assessment. Modeling of Trains on Complex Track Geometry ....................225
The VehicleDynamics Library - Overview and Applications ................................................................43
Giuliani, H.
Simulation of Hybrid Electric Vehicles..................................................................................................25
The SmartElectricDrives Library - Powerful Models for Fast Simulations of Electric Drives ............571
Gonzlez, L.
GAPILib - A Modelica Library for Model Parameter Identification Using Genetic Algorithms ........335
Gragger, J.V.
Simulation of Hybrid Electric Vehicles..................................................................................................25
The SmartElectricDrives Library - Powerful Models for Fast Simulations of Electric Drives ............571
Ghmann, C.
Synchronising a Modelica Real-Time Simulation Model with a Highly Dynamic
Engine Test-Bench System...................................................................................................................275
Guina, D.
GAPILib - A Modelica Library for Model Parameter Identification Using Genetic Algorithms ........335
Haase, T.
Coupled Simulation of Building Structure and Building Services Installations with Modelica...........717
Harman, P.
Coordinated Automotive Libraries for Vehicle System Modelling........................................................33
Modelling Automotive Hydraulic Systems using the Modelica ActuationHydraulics Library............399
Haumer, A.
Identification and Controls of Electrically Excited Synchronous Machines ........................................589
If We Only had Used XML... ...............................................................................................................707
Interacting Modelica using a Named Pipe for Hardware-in-the-loop Simulation ................................261
Simulation of Components of a Thermal Power Plant .........................................................................119
Heckmann, A.
The DLR FlexibleBodies Library to Model Large Motions of Beams and of Flexible Bodies
Exported from Finite Element Programs ................................................................................................85
Heinrich, C.
A Modelica Library for Simulation of Household Refrigeration Appliances Features and Experiences .....................................................................................................................677

The Modelica Association

xvi

Modelica 2006, September 4th  5th

Index of Authors
Hirsch, T.
Simulation of the Start-Up Procedure of a Parabolic Trough Collector Field with Direct Solar
Steam Generation..................................................................................................................................135
Hoffmann, C.
Dynamic Optimization of Energy Supply Systems with Modelica Models .........................................599
Hoh, A.
Coupled Simulation of Building Structure and Building Services Installations with Modelica...........717
Holm, A.
Advanced Modeling and Simulation Techniques in MOSILAB:
A System Development Case Study .......................................................................................................63
Huhn, M.
Modelica CVD - A Tool for Visualizing the Structure of Modelica Libraries.......................................55
Jagudin, E.
OpenModelica Development Environment with Eclipse Integration for Browsing, Modeling,
and Debugging......................................................................................................................................459
Janin, G.
Development and Verification of a Series Car Modelica/Dymola Multi-body Model to Investigate
Vehicle Dynamics Systems ..................................................................................................................167
Johansson, O.
Engineering Design Tool Standards and Interfacing Possibilities to Modelica Simulation Tools .......359
Kapeller, H.
Identification and Controls of Electrically Excited Synchronous Machines ........................................589
If We Only had Used XML... ...............................................................................................................707
The SmartElectricDrives Library - Powerful Models for Fast Simulations of Electric Drives ............571
Kellner , M.
Parameterisation of Modelica Models on PC and Real Time Platforms ..............................................267
Kenny, P.J.
Modeling the Dynamics of Vehicle Fuel Systems................................................................................147
Kerkar, N.
Pressurized Water Reactor Modelling with Modelica ..........................................................................127
Kittirungsi, B.
UnitTesting: A Library for Modelica Unit Testing ..............................................................................695
Knobel, C.
Development and Verification of a Series Car Modelica/Dymola Multi-body Model to Investigate
Vehicle Dynamics Systems ..................................................................................................................167
Koehler, J.
How to Dissolve Complex Dynamic Systems for Wanted Unknowns with Dymola / Modelica.........187
Khler, J.
Using Modelica as a Design Tool for an Ejector Test Bench...............................................................501
Kosenko, I.I.
Multibody Systems Dynamics: Modelica Implementation and Bond Graph Representation ..............213
Kossel, R.
Modelica CVD - A Tool for Visualizing the Structure of Modelica Libraries.......................................55
Simulation of Complex Systems using Modelica and Tool Coupling..................................................485
Krabbes, M.
Dynamic Modeling and Control of a 6 DOF Parallel Kinematics........................................................385
The Modelica Association

xvii

Modelica 2006, September 4th  5th

Index of Authors
Kral, C.
Coordinated Automotive Libraries for Vehicle System Modelling........................................................33
Identification and Controls of Electrically Excited Synchronous Machines ........................................589
If We Only had Used XML... ...............................................................................................................707
Optimization of a Cooling Circuit with a Parameterized Water Pump Model .....................................493
Simulation of Components of a Thermal Power Plant .........................................................................119
Simulation of Hybrid Electric Vehicles..................................................................................................25
The SmartElectricDrives Library - Powerful Models for Fast Simulations of Electric Drives ............571
Lacher, H.
Optimization of a Cooling Circuit with a Parameterized Water Pump Model .....................................493
Lakner, M.
Modeling and Simulation of Generator Circuit Breaker Performance .................................................319
Larsson, J.
A Modelica Based Format for Flexible Modelica Code Generation and Causal
Model Transformations ........................................................................................................................467
Lemke, N.
Simulation of Complex Systems using Modelica and Tool Coupling..................................................485
Leopold, J.
Advanced Modeling and Simulation Techniques in MOSILAB:
A System Development Case Study .......................................................................................................63
Lie, B.
A New Energy Building Simulation Library ........................................................................................685
Loeffler, M.
Modelica CVD - A Tool for Visualizing the Structure of Modelica Libraries.......................................55
Loginova, M.S.
Multibody Systems Dynamics: Modelica Implementation and Bond Graph Representation ..............213
Lopez, J.D.
Automatic Fixed-point Code Generation for Modelica using Dymola.................................................621
Dymola interface to Java - A Case Study: Distributed Simulations ....................................................477
Shock Wave Modeling for Modelica.Fluid Library using Oscillation-free
Logarithmic Reconstruction .................................................................................................................641
The DLR FlexibleBodies Library to Model Large Motions of Beams and of Flexible Bodies
Exported from Finite Element Programs ................................................................................................85
Lovera, M.
A Modelica Library for Space Flight Dynamics...................................................................................107
Magnani, G.
Acausal Modelling of Helicopter Dynamics for Automatic Flight Control Applications ....................377
Makanaboyina, R.
Integration of CATIA with Modelica ...................................................................................................671
Martinez, F.
3D Flexible Multibody Thin Beams Simulation in Modelica with
the Finite Element Method .....................................................................................................................97
Mathijssen, A.
Modelling of a Solar Thermal Reactor for Hydrogen Generation ........................................................441
Mattes, A.
Advanced Modeling and Simulation Techniques in MOSILAB:
A System Development Case Study .......................................................................................................63

The Modelica Association

xviii

Modelica 2006, September 4th  5th

Index of Authors
Matthes, P.
Coupled Simulation of Building Structure and Building Services Installations with Modelica...........717
Mattsson, S.E.
Calibration of Static Models using Dymola .........................................................................................615
Meissner, Ch.
Dynamic Modeling and Control of a 6 DOF Parallel Kinematics........................................................385
Mller, D.
Coupled Simulation of Building Structure and Building Services Installations with Modelica...........717
Munteanu, M.
On the Noise Modelling and Simulation ..............................................................................................369
Murua, X.
3D Flexible Multibody Thin Beams Simulation in Modelica with the Finite Element Method.............97
Najafi, M.
Modeling and Simulation of Differential Equations in Scicos .............................................................177
Neumann, M.
Parameterisation of Modelica Models on PC and Real Time Platforms ..............................................267
Nicolau, V.
On the Noise Modelling and Simulation ..............................................................................................369
Nikoukhah, R.
Modeling and Simulation of Differential Equations in Scicos .............................................................177
Nordstrm, U.
Automatic Fixed-point Code Generation for Modelica using Dymola.................................................621
Nordwig, A.
Advanced Modeling and Simulation Techniques in MOSILAB:
A System Development Case Study .......................................................................................................63
Nouidui, T.
Advanced Modeling and Simulation Techniques in MOSILAB:
A System Development Case Study .......................................................................................................63
Nystrm, K.
Parallel Simulation with Transmission Lines in Modelica ...................................................................325
Nytsch-Geusen, C.
Advanced Modeling and Simulation Techniques in MOSILAB:
A System Development Case Study .......................................................................................................63
Obraztsov, YA.P.
Multibody Systems Dynamics: Modelica Implementation and Bond Graph Representation ..............213
Olsson, H.
Calibration of Static Models using Dymola .........................................................................................615
Dymola interface to Java - A Case Study: Distributed Simulations .....................................................477
Otter, M.
Coordinated Automotive Libraries for Vehicle System Modelling........................................................33
Modelling of an Experimental Batch Plant with Modelica ..................................................................651
The DLR FlexibleBodies Library to Model Large Motions of Beams and of Flexible Bodies
Exported from Finite Element Programs ................................................................................................85
The LinearSystems Library for Continuous and Discrete Control Systems.........................................529
The Modelica Fluid and Media Library for Modeling of Incompressible and Compressible
Thermo-Fluid Pipe Networks ...............................................................................................................631

The Modelica Association

xix

Modelica 2006, September 4th  5th

Index of Authors
Pagalday, J.M.
3D Flexible Multibody Thin Beams Simulation in Modelica with the Finite Element Method.............97
Pascoli, G.
Identification and Controls of Electrically Excited Synchronous Machines ........................................589
If We Only had Used XML... ...............................................................................................................707
Pentori, B.
Pressurized Water Reactor Modelling with Modelica ..........................................................................127
Philipson, N.
Leaf Spring Modeling...........................................................................................................................205
NowaitTransit Concept Assessment. Modeling of Trains on Complex Track Geometry ....................225
Pirker, F.
Identification and Controls of Electrically Excited Synchronous Machines ........................................589
If We Only had Used XML... ...............................................................................................................707
Interacting Modelica using a Named Pipe for Hardware-in-the-loop Simulation ................................261
The SmartElectricDrives Library - Powerful Models for Fast Simulations of Electric Drives ............571
Plainer, M.
Simulation of Components of a Thermal Power Plant .........................................................................119
Pop, A.
Engineering Design Tool Standards and Interfacing Possibilities to Modelica Simulation Tools .......359
OpenModelica Development Environment with Eclipse Integration for Browsing, Modeling,
and Debugging......................................................................................................................................459
Poschlad, K.
Modelling of an Experimental Batch Plant with Modelica ..................................................................651
Prat, V.S.
ARENALib: A Modelica Library for Discrete-Event System Simulation ...........................................539
Pretolani, F.
Fast Start-up of a Combined-Cycle Power Plant: A Simulation Study with Modelica ............................3
Proelss, K.
Modeling of Frost Growth on Heat Exchanger Surfaces......................................................................509
The Modelica Fluid and Media Library for Modeling of Incompressible and Compressible
Thermo-Fluid Pipe Networks ...............................................................................................................631
Pujana, A.
3D Flexible Multibody Thin Beams Simulation in Modelica with the Finite Element Method.............97
Pulecchi, T.
A Modelica Library for Space Flight Dynamics...................................................................................107
Puta, H.
Dynamic Optimization of Energy Supply Systems with Modelica Models .........................................599
Reisenbichler, U.
If We Only had Used XML... ...............................................................................................................707
Remar, A.
OpenModelica Development Environment with Eclipse Integration for Browsing, Modeling,
and Debugging......................................................................................................................................459
Remelhe, M.A.P.
Modelling of an Experimental Batch Plant with Modelica ..................................................................651

The Modelica Association

xx

Modelica 2006, September 4th  5th

Index of Authors
Richter, C.C.
Modelica CVD - A Tool for Visualizing the Structure of Modelica Libraries.......................................55
The Modelica Fluid and Media Library for Modeling of Incompressible and Compressible
Thermo-Fluid Pipe Networks ...............................................................................................................631
Using Modelica as a Design Tool for an Ejector Test Bench...............................................................501
Roeb, M.
Modelling of a Solar Thermal Reactor for Hydrogen Generation ........................................................441
Rubio, M.A.
GAPILib - A Modelica Library for Model Parameter Identification Using Genetic Algorithms ........335
Sandholm, A.
A Numeric Library for Use in Modelica Simulations with Lapack, SuperLU, Interpolation,
and MatrixIO ........................................................................................................................................285
Sattler, C.
Modelling of a Solar Thermal Reactor for Hydrogen Generation ........................................................441
Savaresi, S.M.
Motorcycle Dynamics Library in Modelica..........................................................................................157
Schiavo, F.
Motorcycle Dynamics Library in Modelica..........................................................................................157
Schimon, R.
Simulation of Components of a Thermal Power Plant .........................................................................119
Schlegel, C.
Ascola: A Tool for Importing Dymola Code into Ascet.......................................................................343
Schmidt, G.
Advanced Modeling and Simulation Techniques in MOSILAB:
A System Development Case Study .......................................................................................................63
Schmitz, G.
Modeling of Frost Growth on Heat Exchanger Surfaces......................................................................509
Schneider, P.
Advanced Modeling and Simulation Techniques in MOSILAB:
A System Development Case Study .......................................................................................................63
Quasi-stationary AC Analysis Using Phasor Description With Modelica ...........................................579
Schwarz, P.
Advanced Modeling and Simulation Techniques in MOSILAB:
A System Development Case Study .......................................................................................................63
Quasi-stationary AC Analysis Using Phasor Description With Modelica ...........................................579
Schwunk, S.
Quasi-stationary AC Analysis Using Phasor Description With Modelica ...........................................579
Selimovic, F.
Modeling and Dynamic Analysis of CO2-Emission Free Power Processes in Modelica
using the CombiPlant Library.................................................................................................................17
Simic, D.
Interacting Modelica using a Named Pipe for Hardware-in-the-loop Simulation ................................261
Optimization of a Cooling Circuit with a Parameterized Water Pump Model .....................................493
Simulation of Hybrid Electric Vehicles..................................................................................................25
Simulation of Components of a Thermal Power Plant .........................................................................119
Sirbu, G.
On the Noise Modelling and Simulation ..............................................................................................369
The Modelica Association

xxi

Modelica 2006, September 4th  5th

Index of Authors
Slttke, O.
Modeling, Calibration and Control of a Paper Machine Dryer Section................................................411
Slttorp, K.
HydroPlant  a Modelica Library for Dynamic Simulation of Hydro Power Plants ............................251
Souyri, A.
Pressurized Water Reactor Modelling with Modelica ..........................................................................127
Stavrovskaya, M.S.
Multibody Systems Dynamics: Modelica Implementation and Bond Graph Representation ..............213
Steinmann, W.D.
Analysis of Steam Storage Systems using Modelica............................................................................235
Sundn, B.
Modeling and Dynamic Analysis of CO2-Emission Free Power Processes in Modelica
using the CombiPlant Library.................................................................................................................17
Suyam Welakwe, N.
Integration of CATIA with Modelica ...................................................................................................671
Tamme, R.
Analysis of Steam Storage Systems using Modelica............................................................................235
Tanelli, M.
Motorcycle Dynamics Library in Modelica..........................................................................................157
Tegethoff, W.
Simulation of Complex Systems using Modelica and Tool Coupling..................................................485
Using Modelica as a Design Tool for an Ejector Test Bench...............................................................501
Tiller, M.M.
UnitTesting: A Library for Modelica Unit Testing ..............................................................................695
Tischendorf, C.
Using Modelica as a Design Tool for an Ejector Test Bench...............................................................501
Treffinger, P.
Coordinated Automotive Libraries for Vehicle System Modelling........................................................33
Vehicle Model for Transient Simulation of a Waste-Heat-Utilisation-Unit Containing Extended
PowerTrain and Fluid Library Components .........................................................................................405
Tschirner, T.
Coupled Simulation of Building Structure and Building Services Installations with Modelica...........717
Tummescheit, H.
The Modelica Fluid and Media Library for Modeling of Incompressible and Compressible
Thermo-Fluid Pipe Networks ...............................................................................................................631
Tuszynski, J.
HydroPlant  a Modelica Library for Dynamic Simulation of Hydro Power Plants ............................251
NowaitTransit Concept Assessment. Modeling of Trains on Complex Track Geometry ....................225
Tuszynski, K.
HydroPlant  a Modelica Library for Dynamic Simulation of Hydro Power Plants ............................251
Ungethm, J.
Modelling of Alternative Propulsion Concepts of Railway Vehicles...................................................391
Vehicle Model for Transient Simulation of a Waste-Heat-Utilisation-Unit Containing Extended
PowerTrain and Fluid Library Components .........................................................................................405

The Modelica Association

xxii

Modelica 2006, September 4th  5th

Index of Authors
Urquia, A.
ARENALib: A Modelica Library for Discrete-Event System Simulation ...........................................539
GAPILib - A Modelica Library for Model Parameter Identification Using Genetic Algorithms ........335
Vanrolleghem, P.A.
Using Modelica Models for Complex Virtual Experimentation with the Tornado Kernel ..................193
Vetter, M.
Advanced Modeling and Simulation Techniques in MOSILAB:
A System Development Case Study .......................................................................................................63
Quasi-stationary AC Analysis Using Phasor Description With Modelica ...........................................579
Videla, J.I.
A New Energy Building Simulation Library ........................................................................................685
Vigan, L.
Acausal Modelling of Helicopter Dynamics for Automatic Flight Control Applications ....................377
Wang, G.B.
An Analyzer for Declarative Equation Based Models..........................................................................349
Wetter, M.
Multizone Airflow Model in Modelica.................................................................................................431
Multizone Building Model for Thermal Building Simulation in Modelica..........................................517
Winkler, D.
Synchronising a Modelica Real-Time Simulation Model with a Highly Dynamic
Engine Test-Bench System...................................................................................................................275
Wischhusen, S.
An Enhanced Discretisation Method for Storage Tank Models within Energy Systems ....................243
Wittwer, C.
Advanced Modeling and Simulation Techniques in MOSILAB:
A System Development Case Study .......................................................................................................63
Woodruff, A.
Development and Verification of a Series Car Modelica/Dymola Multi-body Model to Investigate
Vehicle Dynamics Systems ..................................................................................................................167
Wu, Y.-Z.
An Analyzer for Declarative Equation Based Models..........................................................................349
Domain Library Preprocessing in MWorks - A Platform for Modeling and Simulation of
Multi-domain Physical Systems Based on Modelica............................................................................733
MWorks: a Modern IDE for Modeling and Simulation of Multi-domain Physical Systems
Based on Modelica ...............................................................................................................................725
Yebra, L.J.
Object Oriented Modelling of DISS Solar Thermal Power Plant.........................................................449
Zarza, E.
Object Oriented Modelling of DISS Solar Thermal Power Plant.........................................................449
Zhang, Y.-Q.
MWorks: a Modern IDE for Modeling and Simulation of Multi-domain
Physical Systems Based on Modelica...................................................................................................725
Zhao, J.-J.
Domain Library Preprocessing in MWorks - A Platform for Modeling and Simulation of
Multi-domain Physical Systems Based on Modelica............................................................................733
MWorks: a Modern IDE for Modeling and Simulation of Multi-domain Physical Systems
Based on Modelica ...............................................................................................................................725
The Modelica Association

xxiii

Modelica 2006, September 4th  5th

Index of Authors
Zhou, F.-L.
An Analyzer for Declarative Equation Based Models..........................................................................349
Domain Library Preprocessing in MWorks - A Platform for Modeling and Simulation of
Multi-domain Physical Systems Based on Modelica............................................................................733
MWorks: a Modern IDE for Modeling and Simulation of Multi-domain Physical Systems
Based on Modelica ...............................................................................................................................725
Zimmer, D.
The Modelica Multi-bond Graph Library .............................................................................................559

The Modelica Association

xxiv

Modelica 2006, September 4th  5th

Session 1a

Session 1a
Thermodynamic Systems for Power Plant Applications 1

The Modelica Association

1

Modelica 2006, September 4th  5th

Session 1a

The Modelica Association

2

Modelica 2006, September 4th  5th

Fast Start-up of a Combined-Cycle Power Plant: A Simulation Study with Modelica

Fast Start-up of a Combined-Cycle Power Plant:
a Simulation Study with Modelica
1

Francesco Casella1, Francesco Pretolani2
Dipartimento di Elettronica e Informazione, Politecnico di Milano
Piazza Leonardo da Vinci, 32 - 20133 Milano ITALY
2
CESI S.p.A., Via Rubattino, 54  20134 Milano ITALY
e-mail: casella@elet.polimi.it, pretolani@cesi.it

include a simplified model of the plant control system;
 neglect phenomena and components which
are not critical for the start-up phase, in order to keep the model complexity at a reasonable level.
The plant model, based on the ThermoPower library
[1]-[3], has been parametrised with design and operating data from a typical unit, and validated by replicating a real start-up transient, as recorded by the
plant DCS. The model has then been used to test
faster start-up manoeuvres, with the objective of
either reducing the plant life-time consumption at
equal start-up times, or reducing the start-up time at
the same level of plant life-time consumption. This
study has been carried out by trial-and-error, but the
long term goal is to couple the model (or a suitably
simplified version of it) to state-of-the-art optimisation software, to compute the optimal transients.

Abstract



The paper deals with the modelling and simulation
of fast start-up transients of a combined-cycle power
plant. The study is aimed at reducing the start-up
time while keeping the life-time consumption of the
more critically stressed components under control.
The structure of the model, based on the ThermoPower library, and the main modelling assumptions
are illustrated. Selected simulation results are included and discussed.1

1

Introduction

The on-going process of deregulation on the electrical power grids throughout Europe demands for more
aggressive operation policies for existing and future
power plants. Faster start-up and load change transients can be beneficial to remain competitive on an
increasingly open power market. In this context, the
present work is aimed at understanding how to improve the current start-up procedures for the typical
combined-cycle power plant installed on the Italian
grid.
For the purposes of the present study, the plant model must have the following features:
 be able to represent the whole start-up procedure, including boiler start-up, turbine
start-up, and load pick-up;
 include a model of thermal stresses in critical components, which pose a lower bound to
the start-up time;

2

The plant under investigation is composed by a 250
MWe gas turbine unit (GT), coupled to a heat recovery steam generator (HRSG) with 3 levels of pressure, driving a 130 MWe steam turbine (ST) group.
The limiting factors to a reduction of the start-up
time are:
 the maximum load change rate of the gas
turbine;
 the thermal stress in thick components (in
particular, the steam turbine shafts);
 the ability of the control system to keep their
controlled variables within the allowable
limits.

1 This work was supported by MAP (Italian Ministry for
Productive Activities) in the framework of the Public
Interest Energy Research Project Ricerca di Sistema
(MAP decree February 28, 2003).

The Modelica Association

The plant model

3

Modelica 2006, September 4th  5th

F. Casella, F. Pretolani

It is well-known that the HRSG start-up (several
hours) is much slower than the GT start-up time
(around 20 minutes). It is then possible to describe
the GT unit in a highly idealised fashion, i.e. as an
ideal source of hot flue gases, whose temperature
and flow rate is prescribed as a function of the load
level; the maximum load change rate is given by the
unit specification, and is not a subject of the present
study.
The steam turbine unit model (Fig. 2) is instead
rather detailed, in order to correctly describe the
various phases of the start-up transient. The high
pressure turbine (HP) and intermediate-plus-low
pressure turbine (IP) are modelled, as well as the turbine bypass circuits; the contribution of the lowpressure steam generator is instead neglected.
The most critical part of the plant, as far as the
thermal stresses are concerned, is the turbine shaft in
contact with the highest temperature steam, i.e.
downstream of the first (impulse) stage of both turbines, which is then represented separately, and connected to a thermal stress model of the shaft section.
The stress model contains a thermal model, based on
Fourier's equation discretised by finite differences,
to represent the radial distribution of the temperature; the thermal stress on the outer surface (which is
the most heavily stressed part) is then computed as a
function of the difference between the surface temperature and the mean temperature. The generator
inertia and a simplified model of the connection to
the grid complete the unit; a small torque is added in
order to avoid the stopping of the steam turbine,
which would lead to various model singularities.

Fig. 1: The plant model at the system level.
At the system level, a detailed representation of all
the parts of the plant working with low-temperature
fluids is not required, since they are not critical, as
far as their control and their thermal stresses are
concerned. Therefore, the low-pressure part of the
HRSG, the condenser and the feed-water system will
be represented in an extremely simplified way. The
plant model is then obtained (Fig. 1) by connecting
the models of the GT unit, HRSG unit (divided into
three parts for convenience), and ST unit via thermohydraulic connectors. Sensor and actuator signals are
collected from/to each unit by means of expandable
connectors.

Fig. 3a: Heat exchanger units in the HRSG.

Fig. 2: The steam turbine unit model.
The Modelica Association

4

Modelica 2006, September 4th  5th

Fast Start-up of a Combined-Cycle Power Plant: A Simulation Study with Modelica

The heat exchangers along the flue gas path, i.e. the
economisers, evaporators and superheaters, as well
as the IP mixer and attemperators, are contained in
two units for convenience (Fig. 3a-b). The structure
of the each heat exchanger (Fig. 4) includes finitevolume models of the flue gas and water/steam side,
as well as of the fluid-wall heat transfer, and of the
wall thermal inertia. Since there is no draft control in
the flue gas path, the associated dynamics is negligible; therefore, to reduce the number of states of the
model, the flue gas side model is quasi-static. Note
that the fluid side model is replaceable: a Flow1D
model is used for the economisers and superheaters,
while a Flow1D2ph model is used to describe the
2-phase flow in the evaporators.
The plant model is completed by the models of the
boiler drums (Fig. 5). Since we are not interested in
the high-frequency pressure dynamics, the high-pressure (HP) and intermediate pressure (IP) drums are
based on mass and energy balances assuming
thermal equilibrium between the two phases. The
low-pressure part of the HRSG is neglected, so that
an idealised model of the low-pressure drum is only
needed as a boundary condition for the IP and HP
circuits, i.e. to connect the inlets of the corresponding feed-water pumps (Fig. 5, on the far right). The
LP drum pressure (and thus temperature) is determined as a function of the IP drum pressure, tuned
from operational data.

Fig. 3b: Heat exchanger units in the HRSG.

3

Fig. 4: A single, generic heat exchanger model.

Control system model

Given the type of plant, and the modelling assumptions, the control system can be hierarchically split
into two levels.
3.1

The lower level is quite straightforward, and is not
the subject of the optimization. It contains five independent PI/PID loops, controlling:
 the HP and IP drum levels, using the corresponding feed-water flows;
 the HP steam pressure, using the HP turbine
bypass valve;
 the IP steam pressure, using an intermediate
valve at the outlet of the IP superheaters, before the mixing with the HP turbine exhaust;
 the reheater steam pressure, using the IP turbine bypass valve.
Note that the HP pressure controller is only active
during the initial phase of the plant start-up, when

Fig. 5: The drum unit.
The Modelica Association

Low level controllers

5

Modelica 2006, September 4th  5th

F. Casella, F. Pretolani

the turbine admission valve (TAV) is closed, and the
steam is dumped to the condenser. Once the steam
turbine generator has been synchronised with the
grid, the TAV is opened, the pressure diminishes,
and the pressure controller reacts, eventually closing
the bypass valve completely. The (continuous-time)
PID controller model must then be able to operate
correctly under saturation, providing suitable antiwindup action.
3.2

Therefore, the model has been initialised near the
full-load steady state by setting the start attributes
of the state variables (pressures, temperatures, flow
rates, turbine speed, controller states), then brought
to the full load steady state by running a stabilisation
transient. The use of variable step-size integration
algorithms allow to perform this task in a reasonable
time (less than 10 seconds, CPU time). The steadystate values of the variables of interest (pressures,
temperatures, flow rates, powers) are correct by construction, as the model has been parametrised using
those same values. Incidentally, an attempt was performed to get the steady state directly by using initial equations, but the non-linear solver failed to converge, probably due to bad selection of the start values for some iteration variables.
A plant shut-down transient was then performed,
bringing the model to a state corresponding to the
warm start-up of the plant:
 steam turbines with no steam flow and (almost) at standstill.
 pressures around 1 bar in both the HP and IP
circuit.
 GT almost shut down (a small flow rate of
warm flue gas is kept to avoid singularities
in the flue gas side model).
The temperature distribution of the turbine shafts
was then reinitialized to the desired initial value
(corresponding to 180 C). This constitutes the initial state for the start-up transient simulation.
A reference simulation was then performed to replicate the recording of an actual start-up transient,
which was replicated with acceptable fidelity, as far
as the measured variables are concerned. Note that
the study is not targeted to a specific plant, but
rather to a whole class of similar plants, so that a
high accuracy is actually not needed. Some results
are reported here to give an idea of the degree of
complexity of the transient.
Fig. 6 reports the net electrical power outputs of the
GT, steam turbine (ST) and total. During the first
5000 s, the GT is running idle, so that there is no net
electrical power output, but a certain flow of hot exhaust gases is already available to start up the steam
generator. The steam turbine is then started and synchronised, and at time t = 13500 s the steam turbine
starts picking up steam, while the GT load is increased up to the maximum.
Fig. 7 shows the pressure in the HP and IP drums.
The steam generator start-up is split into two phases,
where both pressures are controlled; during the load
pick-up phase, instead, the HP circuit operates in
sliding pressure mode, to avoid reducing the turbine
efficiency due to throttling.

Supervisory control

The supervisory control level determines the actual
start-up transient by acting on the following variables:
 GT load request;
 TAV opening (both HP and IP) or turbine
speed set point;
 pressure controllers set points (HP and IP);
 generator-grid breaker;
 drum blow-down flow rates.
During the start-up transient, all of these variables
are operated in an open-loop fashion, according to a
pre-determined schedule which is the subject of the
optimisation. The only exception is the TAV opening, which is determined in closed loop by a speed
controller during the turbine start-up transient phase:
in that case, a PI controller drives the TAV, and the
scheduling variable is the speed set-point. It is therefore necessary that the PI controller provides a tracking mode as well, to manage the transitions between
the off-duty, start-up and connected modes of operation of the turbo-generator in a correct fashion.

4

Model parametrisation and validation of the reference transient

The physical parameters of the model (dimensional
data and operating points) have been set to match
those of a real unit. Some data are known directly
(e.g. number and dimensions of the tubes in the heat
exchangers), other (e.g. the heat transfer coefficients
or the valve and turbine flow coefficients) are computed from operating point design data.
The low-level controllers have been tuned in order
to provide satisfactory performance (fast enough response with no significant oscillations and control
overshoot).
The direct initialisation of the plant model in the
shut-off state is numerically hard, due to the presence of low or zero flow rates and to the lack of
knowledge of good guesses for the initial values.
The Modelica Association

6

Modelica 2006, September 4th  5th

Fast Start-up of a Combined-Cycle Power Plant: A Simulation Study with Modelica

Fig. 8 shows the steam production rates (HP in blue,
IP in green), as well as the flow rate through the HP
turbine (in red). Until t = 9600 s all the steam is
dumped to the condenser; subsequently, a small
amount is used to accelerate the turbine (see the turbine speed, Fig. 9), and only after the load pick-up
has started the TAV are fully opened, sending all the
steam into the turbine. Fig. 10 shows the interplay
between the TAV and the bypass valves; the former
are gradually opened during the transient, while the
latter are closed by the pressure controllers.
All the transients shown so far (except the last) correspond to actual measurements taken on the plant.

Fig. 9: Turbine speed.

Fig. 10: Valve openings.

Fig. 6: Net electrical power outputs.

Fig. 7: HP and IP drum pressures

Fig. 11: HP turbine steam and rotor temperatures

Fig. 8: Steam flow rates.

The Modelica Association

Fig. 12: HP and IP turbine rotor thermal stress.

7

Modelica 2006, September 4th  5th

F. Casella, F. Pretolani

The most interesting part of the simulation concerns
the temperature distribution in the first section of the
steam turbine shafts, and the corresponding thermal
stress, which results in component fatigue and thus
limits its useful lifetime. Fig. 11 shows the temperatures for the HP turbine: the three lower curves represent the internal, mean and external rotor temperatures, while the two upper curves represent the temperature of the superheated steam at the turbine inlet, and the (slightly lower) temperature of the steam
downstream the nozzles of the first stage, which is
where the steam comes into contact with the rotor.
During the turbine start-up, the steam flow is very
low, and so is the heat transfer coefficient; therefore,
the rotor temperatures increase slowly; when the
TAV are opened more aggressively, the external
temperature gets much closer to the steam temperature. Note that, at time t = 19200 s, the steam temperature tops at 830 K; this is due to the GT exhaust
temperature control, which keeps the hot flue gases
at constant temperature for loads higher than 60%,
by acting on the inlet guide vanes. At the end of the
transient (steady state), all temperatures are equal,
since there is no steady-state heat flow.
The corresponding thermal stresses at the rotor surface (for both HP and IP turbines) are shown in fig.
12. The peak values, which actually determine the
lifetime consumption over the start-up cycle, are
around 450 MPa, which is consistent with typical
values estimated on the real plant during warm startup transients. Note that this peak is reached at the
beginning of the load pick-up phase.

5

The theoretical minimum start-up time was then
sought in two complementary ways:
a) minimising the start-up time subject to the
constraint of getting the same stress peak
(and thus lifetime consumption) of the reference transient;
b) reducing the stress peak (and thus increasing
the lifetime consumption), without increasing the start-up time with respect to the reference transient.
To reach the first goal, it is essential to note that the
stress peak is basically due to the thermal shock at
the beginning of the start-up phase. Once this peak
has been hit, the lifetime consumption is the same
regardless how fast the stress goes back to zero.
Therefore, the GT load pick-up rate has been increased from 1 MW/min to 1.5 MW/min, in order to
keep the stress transient flat (see fig. 15). Furthermore, once the GT load has reached 60%, the flue
gas temperature does not increase further, so that
also the superheated steam temperature will not increase substantially (it will actually decrease a little
bit, as the steam flow rate increases), and the stress
will decrease no matter how fast the load goes up.

Improving the start-up transient

The analysis of the reference transient shows that the
current start-up procedure is quite conservative.
There are a number of intermediate stops, which are
not needed from a physical point of view, and have
probably been provided to allow for ample margin
against unexpected problems when starting up the
plant. The current practice was in fact conceived
when the plant was run in a vertically integrated
context, which placed more emphasis on safety and
availability rather than on efficiency and economy of
operation. If those stops are completely eliminated,
the corresponding transient can be run without any
problems for the control system, resulting in a reduction of the start-up time from 25300 to 19200 s, and
in fuel savings corresponding to the production of
208 MWh at full load (i.e. maximum efficiency).
The same peak levels of stress are obtained. The details are omitted for the sake of brevity.

The Modelica Association

Fig. 13: Net electrical power outputs, fast start-up

Fig. 14: HP turbine rotor and steam temperatures,
fast start-up

8

Modelica 2006, September 4th  5th

Fast Start-up of a Combined-Cycle Power Plant: A Simulation Study with Modelica

Fig. 16: HP steam and rotor temperatures, soaking.
Fig. 15: HP and IP turbine rotor stress, fast start-up
Fig. 13 represents the net power outputs, while Fig.
14 and 15 represent the corresponding temperature
profiles on the HP turbine rotor, and the corresponding thermal stresses on both turbines, respectively. It
is possible to compare these figures with Fig. 6, 11,
and 12. The peak stress is still around 450 MPa. The
transients of all the other variables are similar to
those already shown for the reference case, showing
no particular problem as to the plant control.
Compared with the reference transient, the start-up
time is reduced from 25300 s to 12500 s, and the
fuel savings correspond now to 242 MWh at full
plant load.
To reach the second goal (i.e. reduce the stress
peak), it is necessary to reduce the thermal shock at
the beginning of the steam turbine load pick-up. This
can be obtained by allowing for a longer soak time
for the turbine, i.e. once the turbine has reached full
speed, it is kept running at no load so that the steam
flow can heat up the rotor a little bit more. The turbine start-up is therefore initiated earlier than in the
reference transient, and the turbine is kept idling for
3900 s. The load pick-up phase is then started, and
the rate of change is adjusted to obtain a flat stress
curve. Once the 60% level has been reached, the rate
of change is increased to 7 MW/min, as in the previous case.
The resulting temperature and stress plots are shown
in Fig. 16 and 17. In this case, two stress peaks are
obtained (each one causing fatigue and thus lifetime
consumption); however, the first peak value, around
200MPa, is only slightly higher than the limit of
elastic behaviour (170 MPa), and thus correspond to
a very low additional lifetime consumption, while
the second, around 320 MPa, is well below the previous value of 450 MPa. The start-up time is reduced
from 25300 s to 17500 s, while the fuel savings correspond to 114 MW/h at full plant load.

The Modelica Association

Fig. 17: HP and IP turbine rotor stress, soaking.

6

Conclusions and future work

The optimisation of the start-up procedure for a
combined-cycle power plant has been studied, by
means of a system simulator. The plant model was
developed in Modelica using components from the
ThermoPower library; the low-level control system
model is based on continuous time PID controllers
with anti-windup and tracking features. Compared to
traditional simulation environments, it was relatively
easy to customise the degree of detail of the model,
both by writing extremely simplified component
models where possible, and by developing ad-hoc
models for the estimation of the thermal stresses in
the steam turbines shafts. The final model has
around 140 states and several thousands algebraic
variables.
The simulation study was conducted using the Dymola [4] simulation tool, which allowed to compute
the whole simulation transient in times around 400 s
on a Pentium 3 GHz CPU.
The study is a first step towards the realisation of
more simplified models, to be validated against the
reference one, which will be employed together with
optimisation software to automatically compute the
9

Modelica 2006, September 4th  5th

F. Casella, F. Pretolani

optimal transients. A further step could then be the
design of a closed-loop model-based control system,
capable of attaining similar performance in real time
and in the presence of uncertainty.

7
[1]

[2]

References
F. Casella, A. Leva, Modelling of ThermoHydraulic Power Generation Processes using
Modelica, Mathematical and Computer Modelling of Dynamical Systems, v. 12, n. 1, pp.
19-33, 2006.
F. Casella, A. Leva, Modelica Open Library
for Power Plant Simulation: Design and Experimental Validation, Proc. 3rd International
Modelica Conference, Linkping, Sweden,
Nov 2003, pp. 41-50. URL:
http://www.modelica.org/events/Conference2003/papers/
h08_Leva.pdf

[3]

ThermoPower library home page, URL:
http://www.elet.polimi.it/upload/casella/thermopower/

[4]

Dynasim AB, Dymola v. 5.3.

The Modelica Association

10

Modelica 2006, September 4th  5th

Modelling of a Water/Steam Cycle of the Combined Cycle Power Plant Rio Bravo 2 with Modelica

Modelling of a water/steam cycle of the combined cycle power
plant Rio Bravo 2 with Modelica
Baligh El Hefni

Daniel Bouskela

EDF R&D
6 quai Watier
F-78401 Chatou Cedex
France
baligh.el-hefni@edf.fr

daniel.bouskela@edf.fr

Abstract

1. Introduction

In order to improve the performance of its simulation
tools while reducing their cost, EDF is studying the
interest and feasibility to replace LEDA, a tool
developed and maintained by EDF for the modelling
and simulation of the normal or incidental operation
of nuclear and conventional thermal plants, by off-theshelf available tools.
The combined cycle power plant Rio Bravo 2
covers the important case of static studies. To test the
capabilities of Modelica based tools to meet EDF
needs for the modelling and simulation of such
complex energy processes, the LEDA model of Rio
Bravo 2 was translated from Fortran into Modelica
and simulated using the commercial tool Dymola.
A library of fully static 0D thermalhydraulics
component models was built. Each component is the
complete translation of a LEDA model.
The full model was built by connecting the component
models in a technological way, so that its topology
reflects the functional schema of the plant.
A preliminary calibration of the model was made
against measurement data obtained from on-site
sensors using inverse calculations. The model was
then able to compute precisely the distribution of the
steam/water mass flow rates, pressure and temperature
across the network, the exchangers thermal power,
and the performance parameters of all the equipments.
It converges very quickly, provided that the iteration
variables are properly fed in by the user. The results
are remarkably close to the LEDA reference.

Modelling and simulation play a key role in the
design phase and performance optimization of
complex energy processes.
Rio Bravo is a combined cycle plant designed,
built, commissioned and operated by EDF. A
model of the plant was built at the system level in
order to verify and validate by simulation the
energy and fuel consumption overall performance
of the plant.
The modelling and simulation of the plant was
originally carried out with LEDA. LEDA is a tool
developed and maintained by EDF since 1982 for
the modelling and simulation of the normal or
incidental operation of nuclear and conventional
thermal plants. LEDA models are used by
researchers and engineers to improve their
knowledge of existing or future types of power
plants, verify the design accuracy and understand
important transients.
In order to improve the performance of its
simulation tools while reducing their cost, EDF
(SEPTEN and EDF R&D) is studying the interest
and feasibility to replace LEDA by off-the-shelf
available tools.
Modelica based tools are considered as good
candidates, because :

Keywords : Combined Cycle Power Plant, Steady
State Modelling, Inverse Problems

The Modelica Association

11



Modelica is a multi-domain language which
seems well designed for physical system
modelling and simulation.



Modelica is a declarative language, that
captures the model equations in a way that is
very close to their original mathematical form.



Modelica allows to express inverse problems,
which is a very important feature for
computing operation points, which are defined
by their observable outputs, and for system
Modelica 2006, September 4th  5th

B. El Hefni, D. Bouskela

sizing, to compute parameterised characteristics.
Besides these technical benefits, it is likely that using
a common free non proprietary language will foster
partnerships around joint R&D or engineering
projects, thus giving the opportunities to share
development costs between the participants.
Several important benchmark cases have been chosen,
which cover the variety of modelling and simulation
studies made at EDF [1].
The objective of this work is to evaluate the feasibility
and efficiency of using Modelica based tools to
perform steady state studies of power plants.
The Rio Bravo combined cycle plant has been chosen
as a representative test case of the complexity of this
type of study, aimed at verifying the design of the
plant for a fixed set of operation points (nominal
power output, 50 % of nominal power output, ).
The modelling and simulation were carried out with
the commercial tool Dymola, as it is the most
advanced Modelica based tool to this date.

I
N
P
U
T

MODULE

O
U
T
P
U
T

Geometrical variables

2. The LEDA Solver
LEDA is a tool that was originally designed for the
modelling and simulation of power plants. To that
end, it allows the user to develop numerical
components of the different parts of the plant, and
assemble them to build the full model of the plant.
Thus LEDA is a model library based tool. The
component models are written in Fortran. They
represent the various equipments of the plant (pumps,
heat exchangers, ), and may be re-used across
different projects.
Since LEDA has already been used by EDF over two
decades, it offers the best available physical
descriptions, for each improvement - correlations
obtained from experimental results or 3D
computations - is capitalized into the library.
As the initial state of the simulation is in general
defined by the observable outputs of the system (e.g.
the nominal power output, the pressure inside the
boiler, etc.), it is necessary to solve an inverse
problem to compute the initial state. Moreover, it is
necessary to start the simulation from a stationary (or
steady) state in order to avoid the numerical
difficulties which arise when the system is started out
of equilibrium (oscillations, stiffness, ).
That is why LEDA has the ability to start the
simulation from a stationary state, and compute this
initial state by solving an inverse problem (it is in fact
a requirement from to the tool to start from a steady
The Modelica Association

state). It is also possible to feed in the analytical
Jacobian of the system to improve the speed and
the accuracy of the simulation. LEDA uses a
trapezoidal implicit fixed step integrator.
The inverse problem is entered into the tool by
setting the output variables to their known
measured values, and freeing (i.e. setting as
unknowns) the parameters, inputs and internal
states to be computed.
Figure 1 below shows the structure of a LEDA
component model.

12

Figure 1  Structure of a LEDA component
model
The component model (also called module) is a
series of Fortran files that contain the physical
equations and the correlations of the modelled
component. It is oriented, i.e. has computationally
causal links. Geometrical variables are constant
parameters (they would be referred with the
Constant Modelica keyword in Modelica models).
Parameters are considered as inputs, in order to be
able to compute them by inverse calculation. More
generally, all variables are either inputs or outputs,
which means that the connections between the
component models have to be carefully set in order
to solve the simulation problem : outputs are
always computed from inputs, so the user has to
figure out the computational causalities of the
problem at hand while building the model.
LEDA assembles the components in a way to
produce a global matrix of the system. So the
system is solved in a implicit way, not in a
sequential way, in particular to solve algebraic
loops and perform inverse calculations.
Application fields
 Nuclear power plants.
 Thermal fossil fuel fired power plants
(pulverized coal, fluidized bed, ...).
 Combined heat and power plants.
Modelica 2006, September 4th  5th

Modelling of a Water/Steam Cycle of the Combined Cycle Power Plant Rio Bravo 2 with Modelica

 Waste to energy.
Utilization fields
 Operation and maintenance.
 Design and analysis.
 Innovate technology survey.

3. General presentation of a combined
cycle power plant
The combined cycle includes a turbine cycle (gas
turbine, which uses natural gas as fuel) and a steam
cycle.
steam-generator
generates
electrical

C
P

TAC(GT)

generates
electrical

ST
AERO

Pumps

Figure 2 - Diagram of a Combined Cycle Power
Plant
In the turbine cycle, air is compressed to the operating
pressure of the gas turbine and heated in a combustion
chamber (natural gas is burned in), followed by an
expansion of the exit flue gas in a gas turbine, which
in turn generates electrical energy in a turbogenerator.
The hot effluent of the gas turbine generates steam in
the steam-generator of the steam cycle, which expands
in the steam turbine and generates additional electrical
energy. The steam cycle includes : the steam turbine, a
boiler (with several tubular exchangers that transmits
the heat of the exhaust gas to the water), 3 evaporating
loops (low, medium and high pressure), an aerocondenser and several pumps.

4. The Rio Bravo component model
library
As it has already been mentioned, Rio Bravo is a fully
static model. Thus, a library of fully static 0D
The Modelica Association

13

thermalhydraulics component models was built.
Each component is the complete translation of a
LEDA module. The library now contains models
of a multifunctional heater (economizer, superheater, evaporator), a turbine, pumps, a separating
balloon, valves, an aero-condenser and pipes.
The model equations take into account the nonlinear and the state-of-the-art physical behaviour of
each phenomenon of interest. In particular :
 The multifunctional heater component model
contains precise and up-to-date correlations for
the heat exchange coefficients and pressure
losses. Convection and pressure loss
correlations are valid for any flue gas
composition, and for water in any phase
(liquid, vapour or two-phase flow). The
conduction equation is adapted with a fouling
coefficient. To feed these equations, each
model contains a very accurate set of
geometrical data (technology, number of tubes,
lengths, diameters, characteristic of the wings,
etc).
 The steam turbine component model is based
on an ellipse law and an isentropic efficiency.
 The aero-condenser component model is based
on correlations of the manufacturer.
 The pump models are based on the
characteristic curves of the pumps.
 The collector is based on the mass and energy
balances for the fluid.
 The pressure drop in pipes is proportional to
the dynamic pressure  the static pressure.
The Modelica translation required some reverse
engineering of the component models, because :
 the LEDA components are Fortran codes,
containing many procedural if  then  else
constructs that cannot be written as such in
Modelica,
 the LEDA documentation is sometimes
incomplete.
Each new Modelica component had to be tested
separately in order to remove as many modelling
errors as possible before building the full Rio
Bravo model. This task was not easy, as a model
written in a declarative language has a totally
different structure from a model written in a
procedural language, so the LEDA experience was
no great help.
In spite of these difficulties, it was possible to
rewrite the complete LEDA modules in Modelica.
The new Modelica component models behave
exactly as their LEDA originals.

Modelica 2006, September 4th  5th

B. El Hefni, D. Bouskela

then to the IP de-superheating, then to the second
IP re-heater, then to the IP turbine.

5. The Rio Bravo model
The full model is built by connecting the component
models in a technological way, so that its topology
reflects the functional schema of the plant (see Figure
3 in the appendix). It is composed of 91 component
models, generating 5200 variables and 1100 nontrivial equations.
The model consists of 16 exchangers (3 evaporators, 6
economizers, 5 super-heaters and 2 re-heaters), 3
balloons, 3 steam turbine stages (HP, IP and LP),
6 pumps, 3 valves, 1 kettle boiler, 9 pressure drops,
several mixers, several collectors, 1 power imposed
and 1 aero-condenser.
The order of the exchangers downstream the exhaust
gas flow is :
 the third HP super-heater,
 the second IP re-heater,
 the second HP super-heater,
 the first IP re-heater,
 the first HP super-heater,
 the HP evaporator,
 the fourth HP economizer,
 the IP super-heater,
 the third HP economizer,
 the LP super-heater,
 the second HP economizer,
 the IP evaporator,
 the first HP economizer and IP economizer,
 the LP evaporator,
 the LP economizer.
The low pressure loop
At the exit of the aero-condenser, water is pumped
and heated in the LP economizer, then is sent to the
LP balloon. The water leaving the LP balloon goes to
the LP evaporator, the IP loop and to the HP loop. The
produced steam is transmitted to the LP super-heater,
then to a mixer with a pressure loss, then to the LP
turbine. The steam at exit of the mixer is a mixture of
the steam at the exit of the LP balloon, the steam at
the exit of the IP turbine and the steam of racking at
the HP turbine exit.
The intermediate pressure loop
At the exit of the LP economizer, water is pumped and
heated in the IP economizer, then is sent to the IP
balloon. The water leaving the IP balloon goes to the
IP evaporator and the produced steam is transmitted to
the IP super-heater, then to a mixer (to mix the steam
at the exit of the IP super heater and the steam at exit
of the HP turbine), then is sent to the first IP re-heater,

The Modelica Association

14

The high pressure loop
At the exit of the LP economizer, water is pumped
and heated in the first, the second, the third and the
fourth HP economizer, then is sent to the HP
balloon. The water leaving the HP balloon goes to
the HP evaporator. The produced steam is
transmitted to the first HP super-heater, then to the
second HP super-heater, then to the HP desuperheating, then to the third HP super-heater,
then to the HP turbine.
The aero-condenser
At the exit of the turbine LP, the steam is
condensed in the aero-condenser, then the water is
pumped and sent into the LP economizer.
The steam bleeding
Steam bleeding at the entry and the exit of the HP
turbine is necessary to ensure the tightness of the
bearing of the IP and LP turbines.
The model was easy to build from the graphical
library : as opposed to LEDA, no causality analysis
is required from the user, this task being handled
automatically by the code generator.
But it was initially difficult to converge, because of
the lack of information about the iteration variables
chosen by the code generator (iteration variables
are variables that need to be properly initialised by
the user in order to compute the system equations
for the first time step). Once this information was
correctly provided by the tool, it was fairly easy to
make the model converge. This task, which is
equivalent to computing the initial state, would
even be easier if the set of iteration variables were
stable across moderate model changes, and, of
course, from one version of the tool to another.
So it is very important to provide an efficient way
to handle these iteration variables, as the task of
setting them properly is time consuming. It is also
by no way automatic, since it requires a good
expertise of the problem to be solved (the number
of iteration accounts roughly 5% of the total
number of variables, so can be rather large for a
human).
More generally, as the numerical structure of the
system equations is automatically generated, it is
necessary that the tool provides an efficient way to
trace the numerical system back to the original
mathematical equations.

Modelica 2006, September 4th  5th

Modelling of a Water/Steam Cycle of the Combined Cycle Power Plant Rio Bravo 2 with Modelica

6. Model calibration
The calibration phase consists in setting (blocking) the
maximum number of thermodynamic variables to
known measurement values (enthalpy, pressure),
taken from on-site sensors during performance tests.
This method ensures that all needed performance
parameters, size characteristics and output data can be
computed.
The main computed performance parameters are :
 the fouling coefficients of the exchangers,
 the ellipse law coefficients of the turbines,
 the isentropic efficiencies of the turbines,
 the pressure drop corrective coefficients of the
exchangers and of the pipeline between the
equipments.
Example : the pressure of the vacuum in the aerocondenser or the flow rate of the circulating cooling
are computed from the available measurements.

7. The thermodynamic properties
Properties of fumes
The thermo-physical properties of the fumes (for the
exchangers, the aero-condenser and the collectors)
were computed using Fortran tables called
MONOMELD, which are normally used with LEDA.
Using the same tables for both tools facilitated the
comparison of the simulation results.
Properties of water and steam
The properties for water and steam were computed
from polynomials defined by the international
standard IAPWS-IF97. The efficient original
Modelica implementation of H. Tummescheit was
used. LEDA utilizes a variant of this standard
implemented as a look-up table.

8. The simulation results
A preliminary calibration of the model was made
against measurement data obtained from on-site
sensors. The model was then able to compute
precisely the distribution of water and steam mass
flow rates, pressure and temperature across the
network, the exchangers thermal power, and the
performance parameters of all the equipments. It
converges very quickly, provided that the iteration
variables (approx. 5 % of the total number of
variables) are properly fed in by the user.

The Modelica Association

15

The table below shows the differences between the
LEDA and the Dymola numerical computation
results, for the reference conditions (i.e. 100%
nominal power  natural gas  yearly average
conditions).
Table 1 - Differences between the results of
LEDA and DYMOLA
LEDA DYMOLA

177,33
177,42
-0,09

Electric power output
(MWe)
Pressure in HP
135,0
balloon (bar)
Output steam flow at
52,67
HP balloon (kg/s)
Output steam
561,1
temperature at HP
balloon (C)
Pressure in IP balloon
31,8
(bar)
Output steam flow at
8,84
IP balloon (kg/s)
Output steam
310,6
temperature at IP
balloon (C)
Pressure in LP balloon 5,11
(bar)
Output steam flow at
77.27
LP balloon (kg/s)
Output steam
180.75
temperature at LP
balloon (C)
Power exchanged in
357.80
the aero-condenser
(Mw)
Temperature of the
113 .9
exhaust fumes of the
5
boiler (C)

134,0

1

52,31

0,36

566,6

-5,5

31,8

0,0

9,08

-0,24

310,9

-0,24

5,17

-0,06

77.37

0.1

180.13

-0.3

357.91

0.03

113.8

-0.13

The slight differences between the results of the
two codes are due to the fact that the
thermodynamic properties of water and steam are
computed in different ways (as noted before,
LEDA uses a variant of the IF97 standard).
The robustness of the model for different operating
points was tested by varying the flow of the fumes
in the range from 250 to 700 kg/s (250, 300, 350,
400, 464.48, 500, 550, 600, 650, 700).

9. Conclusion
A static and rather large model of the Rio Bravo
power plant has been translated from LEDA to
Modelica with Dymola to evaluate the capacity of
Modelica 2006, September 4th  5th

B. El Hefni, D. Bouskela

Modelica based tools to perform steady state direct
and inverse computations for the sizing of power
plants.
The translation has been done without any loss of
information from the original model, and at an
acceptable, though still high cost.
To even further reduce the effort required to do
Modelica modelling and simulation for such systems,
it is necessary to provide more advanced tool
functionalities to handle efficiently the iterations
variables, and trace the automatically generated
numerical system back to its original mathematical
equations, as declared by the user with the Modelica
language.
Nevertheless, this work shows that the Modelica
technology is mature enough to replace proprietary
solutions such as LEDA for the steady state modelling
and simulation of power plants.

References
[1] Avenas C. et al. Quasi-2D steam generator
modelling with Modelica. ISC2004,
Malaga, Spain.

Appendix

Figure 3 - The Rio Bravo Modelica model

The Modelica Association

16

Modelica 2006, September 4th  5th

Modeling and Dynamic Analysis of CO2-Emission Free Power Processes in Modelica using the CombiPlant Library

Modeling and Dynamic Analysis of CO2-Emission Free Power
Processes in Modelica using the CombiPlant Library
Jonas Eborn

Faruk Selimovic

Bengt Sunden

Modelon AB
IDEON Science Park, SE-223 70 Lund
Department of Energy Sciences
Division of Heat Transfer
Lund Institute of Technology, Box 118 SE-221 00 Lund

Abstract

1 Introduction

Future profitability of power generation will involve,
besides fuel and investment costs, even a trading of
The need to reduce CO2 emissions from fossil-fuel plant CO -emissions. Today, the use of coal and other
2
based power production creates the need for new low-grade fossil fuels are dominant for power generpower plant solutions where the CO2 is captured and ation, about 80%. Gas fired power plants produces
stored or reused. Different concepts to capture CO2 about 20% of the total power output and an increased
fall into the three main categories:
number of natural gas fired combined cycle power
plants would result in lowering of CO2 emissions.
1. Precombustion decarbonization
2. Oxy-fuel combustion
3. Post-combustion removal of carbon.
1.1 Sargas process description
Sargas AS, a Norwegian company, has developed technology for separating CO2 and NOx from power plant
flue gas. The Sargas process is a combined cycle system consisting of a gas turbine with an external pressurized combustion chamber in combination with a
conventional steam cycle. This part of the process is a
modified version of existing pressurized fluidized bed
combined cycle (PFBC) power plants. The removal of
the CO2 takes place at high pressure after the combustion chamber. This minimises the volume of flue gas to
be purified relative to the amount of power produced,
providing near full CO2 capture (more than 95%) and
substantial reduction of NOx (5ppm).
The Sargas process flow sheet can be seen in Figure 1,
along with the corresponding model diagram in Figure 2. The air from the gas turbine compressor and
natural gas are combusted in the pressurized boiler.
The combustion process can take place at a low level
of excess air (2% O2 in exhaust gas). This will result in a higher concentration of CO2 in exhaust gas
Keywords: power plant modeling; OTM; CO2 - than in conventional gas-fired Combined Cycle Power
removal; oxy-fuel combustion;
Plants (CCPP). The combination of elevated pressure
In the first two types of processes Oxygen Transport Membrane (OTM) is the key component, as pure
oxygen is usually required to process reactions (e.g.
Integrated Gasification Combined Cycle IGCC, Advanced Zero Emission Plant AZEP). Post-combustion
removal processes can for example utilize adsorption/desorption in certain salt solutions. This paper will describe two different applications of CO2 emission-free processes, one using an OTM, the other
a high pressure post combustion removal process, the
Sargas process, which has been modeled in a project
with Siemens Industrial Turbomachinery AB and Alstom Power Sweden AB. All modeling work was carried out in the modeling language Modelica, which is
an open standard for equation-based, object-oriented
modeling of physical systems. System models have
been built using the CombiPlant library, a modeling library for combined cycle power plants from Modelon
AB.

The Modelica Association

17

Modelica 2006, September 4th  5th

J. Eborn, F. Selimovic, B. Sundn

Figure 1: Sargas process flow sheet.
and high CO2 concentration results in high CO2 partial pressure, thus increasing the efficiency of the CO2
separation process compared to conventional CCPP.
Steam produced in the boiler is used to generate electricity from a conventional steam turbine. The temperature of boiler exhaust gas is approximately 850 C,
somewhat lower than in CCPP. The exhaust gas is
cooled in heat exchangers down to the optimal temperature (70 C) for the CO2 separation process, which
is an absorption/desorption process employing a salt
solution as the working fluid.
After the CO2 separation process takes place (with an
efficiency of approximately 90% in this application),
the exhaust gas with less CO2 is reheated to about
840 C and expanded through the gas turbine to produce further electricity, before passing to the stack.

1.2 Oxy-fuel emission free power cycles
Compared to the capture processes which use complicated separation processes, the oxy-fuel power cycles uses pure oxygen in the combustion of fuel. Exhaust gases resulting from the combustion will therefore consist of mainly water and carbon dioxide. The
exhausts can easily be cooled to condense the water
leaving the carbon dioxide for further storage. OTM is
an important part of novel oxy-fuel power cycles such
as AZEP and Chemical Looping Combustion (CLC)
where OTM is integrated in the system to enable stoichiometric combustion with oxygen.
The key of AZEP concepts is subtitution of the conventional combustion chamber in a gas turbine by a
mixed conducting membrane (MCM) reactor, which
combines oxygen production, fuel combustion and
heat transfer [1, 2]. The MCM reactor contains oxygen transfer membrane being surrounded by two High
Temperature Heat Exchangers (HTHX), which supply energy needed for oxygen transfer process. The
The Modelica Association

18

Figure 2: Sargas process model diagram as shown in
Dymola window.

membrane is constructed of mixed ion electron conducting material and when heated it transfers the oxygen ions which are exchanged at surfaces with oxygen molecules [3, 4]. As can be seen from Figure 3,
compressed low temperature air (500 C) from compressor enters the reactor at the first of two HTHX
(Q arrows) which in turn increases the air temperature
up to the needed level for oxygen permeation reaction.
The oxygen migrates to the exhaust gas (called sweep
gas). From the membrane section the air enters the
second HTHX (upper Q arrows) where the temperature is raised to a value close to the hot exhaust gas
temperature from combustor (1200 C). The hot oxygen depleted air is then led to the power generating
turbine. As the oxygen is transferred to the sweep flow,
excess of mass on the sweep side and deficit on the air
side, respectively, will occur after the membrane section. The bleed gas heat exchanger compensates for
this and increases the sweep temperature which at the
final stage is used for generation of steam, in a HRSG,
which is then expanded in the steam turbine.
The advantage in the power systems using oxy-fuel
combustion is that it enables 100% CO2 capture. However, the need of expensive oxygen separation methods
(e.g. cryogenic separation of pressure swing absorption, PSA) would bring oxy-fuel method to its death
because of a decreased thermal efficiency, down to
only 10-20%. OTM is the key of oxy-fuel processes
as it separates oxygen from air at low costs.
Modelica 2006, September 4th  5th

Modeling and Dynamic Analysis of CO2-Emission Free Power Processes in Modelica using the CombiPlant Library

2 CombiPlant Library
The CombiPlant library is a commercial Modelica library for the unsteady (transient) simulation of Combined Cycle Power Plants and its components. The
CombiPlant library uses well-known, published correlations for heat transfer and pressure drop for fluegas,
steam and liquid water. Besides this more advanced
user-defined correlations can be easily integrated, and
also completely new models such as the oxygen membrane model built and used together with the library
components.
Both gas and fluid side models in heat exchangers uses
a discretized finite volume model with mass and energy balances for each volume. Two-phase behavior is Figure 3: AZEP process flow sheet, inside the dashed
captured using the integrated mean-density model [5] square is the reactor system. (from [2])
and by continuously tracking the phase boundary an
accurate description of two-phase heat transfer is ob- Pumps package holds pump models described by the
tained. The pipe and heat exchanger models can be
characteristic curve.
parametrized with different heat transfer and pressure
drop models, which even can be added by the user, e.g. Water This package contains components, sources
and sinks relevant for water/steam media, e.g.
using proprietary correlations.
two-phase pipes and volumes, boiler drum, spray
The library uses steam and fluegas medium models
attemperator, and steam turbine models described
from the new Modelica.Media library [6, 7], which alby the Stodola equation.
lows easy replacement of the medium models used in
component and system models. The library structure
SubComponents includes the subpackages, Geomcontains the following packages:
etry for heat exchanger geometry descriptions,
ControllersAndSensors This package contains conHeatTransfer for different heat transfer correlatrollers and sensors for gas/water stream propertions used in component models, and Visualizers
ties, needed for control of dynamic systems.
with component models used for dynamic visualization of the plant and section model diagrams.
Examples is a package with test models and also
some ready-to-use combined cycle plant section
examples.
FlueGas package contains components, sources and
sinks relevant for use with gas media, such as
pipe, volume and combustor models.

Valves package contains valves and pressure loss
models.

3 Developed Models

HeatExchangers This package contains general
models of heat exchangers for gas-gas or gaswater operations. Also models for steam/water
plate heat exchangers are represented here.

The CombiPlant library includes components for conventional combined cycle power plant models. For the
two applications described in this paper several specialized components and extensions to the CombiPlant
Interfaces package contains connectors for gas and library models were built. Some of the new compowater streams. It is basically a mirror of the Mod- nents and modeling assumptions used are described in
this section below.
elica.Fluid and Thermal connector definitions.
Internal consists of several subpackages, providing functions for characteristic numbers, such
as Reynolds, Nusselt, and Prandtl number, and
other useful numerical functions. Internal also
holds subpackages for user choices and component icons.
The Modelica Association

19

3.1 Performance trade-offs for heat exchanger models
Cross flow gas-water heat exchangers used in the
boiler, superheater and economizer sections of a power
plant are modeled using a discretized model. To get
Modelica 2006, September 4th  5th

J. Eborn, F. Selimovic, B. Sundn

3.2 Benfield process section model

Figure 4: Superheater section model, showing example of how to combine heat exchangers with steadystate balance equations and dynamic plenum volumes.

good steady-state performance it is desirable to have
high discretization, but a large number of dynamic
states would give very long simulation times. As a
trade-off that still retains all the relevant dynamics a
quasi-static discretized model is used on the gas side
of all HXs. The relevant thermal dynamics of the HX
are included in the thermal inertia of the metal walls.

The key feature of the Sargas process is to deliver
power from natural gas without the environmental impact of fossil CO2 emissions. This is achieved in the
CO2 removal unit, in the upper right corner of Figure 1. The process used is a so-called Benfield process, a standard commercial process using the adsorption/desorption properties of certain salt solutions to
remove CO2 . It consists of several stages of condensing and humidifying the flue gas using water, to keep
the gas at ideal conditions for the adsorption process.
The Benfield section model is a simplified description
of the CO2 removal process without the salt solution
circulation loop included. The main purpose of the investigation was to verify the dynamic behavior with
respect to the composition and thermal dynamics, and
thus no detailed description of the Benfield process
was needed. The important moisture and gas thermal
and volume dynamics are included via lumped models of the large volumes in the scrubber, condenser,
absorber/desorber and humidifer. Moisture condensation and evaporation is assumed to be instantaneous at
the current saturation temperature. The absorption itself is represented by a constant efficiency parameter.
The model includes the absorption heat taken from the
steam flow bled from the steam turbine, as this is important for the overall energy efficiency of the process.
Below are the additional mass balance equations for
the absorber volume, used to calculate the mass transfer of water and CO2 . The difference between the water saturation pressure and the actual mole fraction of
steam in the gas volume is used as the driving force for
mass transfer.

In the section models, several such HXs connected in
series on the gas side. This would result in an undesirable static coupling between gas side balance equations, giving large non-linear equation systems that
would also result in long simulation times. To avoid dy_sat=(WaterMedium.saturationPressure(T)/p
- mole_y[H2O]);
this situation, dynamic plenum volumes are introduced
feed.mXi_flow[H2O] + drain.mXi_flow[H2O]
between HXs as can be seen in Figure 4. Dynamic
+ absorb_flow[H2O] =
states p, T, X are forced on the plenum volumes, using
dy_sat*feed.mXi_flow[H2O];
the Modelica stateSelect attribute. The dynamic feed.mXi_flow[CO2]*eta_absorb
+ absorb_flow[CO2] = 0;
states provide the boundary conditions for the static
flow and heat transfer relations on the gas side of the
The names feed and drain refer to the gas flow conHX and breaks up the large non-linear equation sysnectors on the volume, the parameter eta_absorb is
tems. This combination is a trade-off that provides
the CO2 removal efficiency parameter.
both good steady-state and dynamic performance for
discretized models of this type.
In the figure it can also be noted that the plenum volumes are coupled directly to the inlet of each HX without any separate pressure drop description. This is possible due to automatic index reduction, and has no ill
effects since there are no gas volume dynamics inside
the heat exchanger model.
The Modelica Association

20

3.3 Oxygen transport membrane reactor
model
Oxygen Transport Membrane (OTM) consists of dense
ceramic membrane. It is generally accepted that such
dense membranes have significant future potential in
the gas and energy industries with a wide variety of
Modelica 2006, September 4th  5th

Modeling and Dynamic Analysis of CO2-Emission Free Power Processes in Modelica using the CombiPlant Library
Gas and Air are the flow connectors on each side of

the membrane, connected to the corresponding pipe
model. The code above takes care of mass flow rate
of oxygen and assigns this value to connector. Oxygen
permeation rate J_O2 has been traditionally calculated
by the Wagner equation:
Z

2s s s
1
i e
d
(1)
2
16F d 1s si + se
where j is the permeation flux density of molecular
oxygen, d is the membrane thickness, si and se are
the partial ionic and electronic conductivities,  is the
oxygen chemical potential. Oxygen chemical potenFigure 5: Model diagram view of the membrane reac- tial is expressed here as:
tor model: OTM -Oxygen transfer membrane, Air -air
 = RT log(pO2 )
(2)
flow model, Sweep -exhaust gas flow model, wall -wall
model for heat transfer.
Combination of eq. 2 and eq. 1 and integration of 1
with the fact that oxygen ions are much slower then
applications, such as, the separation of oxygen from electron gives following expression:
air and the conversion of natural gas to syngas. The
ci Da p1O2
OTM is usually constructed of mixed ion electron
jO2 =
ln 2
(3)
4d
pO2
conducting material and when heated it transfers the
oxygen ions which are exchanged at surfaces with where ci is the density of oxygen ions, Da represents
oxygen molecules [3]. Energy for heating the mem- ambipolar diffusion coefficient of oxygen ion-electron
brane can be exchanged from process exhaust gases. hole pairs, d is the thickness of membrane, p1 and
O2
The most attractive membrane materials today which p2 is the oxygen partial pressure for low and high
O2
have been employed successfully in membrane re- oxygen
partial pressure sides across membrane respecactors are: Ba0.5 Sr0.5 Co0.8 Fe0.2 O3d (BSCFO) and tively. The ambipolar conductivity was assumed to
BaCo0.4 Fe0.4 Zr0.2 O3d (BCFZO), [8].
have Arrhenius dependence on temperature:
The membrane reactor model was conducted from exEa 1
1
isting flow models from CombiPlant library with the
Da = D0a e R ( T  1273.15 )
(4)
exception of the model for oxygen transfer which in
0
its turn is developed and introduced into library. Since where Da is the preexponential factor and Ea is the
the oxygen transfer model involves mass transfer oper- activation energy for the ambipolar conductivity. The
ation of only oxygen as a single component, the Mod- BSCFO membrane possesses high oxygen ion conelica semiLinear function for calculation of the fluid ductivity. For 0the predominantly BSCFO mixedflow and fluid enthalpy in connectors is not suitable. conductor the Da is expected to be close to the ionic
The semiLinear function can only be applied to well self-diffusion coefficient Di (Da  Di ), and then the
mixed flows. Instead, the code below has been used. Nernst-Einstein equation is applicable to calculate the
Media model of air for this case has 5 different com- oxygen ionic conductivity of BSCFO:
ponents, (ex. Moist air with Ar, CO2, H20, N2, O2),
RT si
Di =
(5)
and the mass flow rates of the four non-permeable ones
4ci F 2
were set to zero.
The experimental measured oxygen flux in [8], has
been used to express correlation of ionic conductivity
m_flowO2 =
J_O2*memPars.A_mem*Medium.data[5].MM;
of BSCFO in this work, Figure 6.

jO2 =

Air.H_flow
Gas.H_flow
Gas.mXi_flow[1:4]
Gas.mXi_flow[5]
Gas.m_flow
Air.mXi_flow[1:4]
Air.mXi_flow[5]
Air.m_flow

= h_O2*m_flowO2;
=-h_O2*m_flowO2;
= 0,0,0,0;
=-m_flowO2;
=-m_flowO2;
= 0,0,0,0;
= m_flowO2;
= m_flowO2;

The Modelica Association

4 Simulation Results
Examples of transient simulations carried out on the
two types of CO2 free power processes presented are
shown here.
21

Modelica 2006, September 4th  5th

J. Eborn, F. Selimovic, B. Sundn

Figure 6: Oxygen ionic conductivity at different temperatures, from [8].

4.1 Load reduction transient on the Sargas
plant model
To see the effects of the volume lag from the CO2 removal plant on the power plant behavior, a load reduction transient has been conducted on the Sargas plant
model. The simulation was done on a plant model
without the gas turbine, with the load reduction performed by ramping the compressed air flow rate into
the boiler from 100% to 80% of the design flow rate.
Natural gas flow to the burners was reduced proportionally. A plot of the resulting mechanical power generated by the steam turbines is shown in Figure 7. Generators connected to the gas turbine would contribute
another 15 MW at 100% load conditions.
In Figure 8 the mole fraction of CO2 into and out of
the Benfield process section is shown. The process removes 92% of the carbon dioxide in the gas flow. Dur-

Figure 8: Mole fraction of CO2 into and out of the
Benfield plant section.
ing the load reduction transient between 400 and 520
seconds the inlet composition changes, but the outlet
composition follows with little lag. The high volumetric flow rate of about 10 m3 /s gives a hold-up of only a
few seconds in the gas heat exchangers of the Benfield
process.
Figure 9 shows the mass flow of H2 O in the flue gas
stream into and out of the Benfield process section. It
is important to maintain the water balance and avoid
adding or removing process water. In the simulation
a control valve hits the maximum limit. This is the
reason why the outlet steam flow is larger than the inlet
steam flow and thus the water balance can no longer be
kept.

4.2 OTM reactor startup transient
A transient simulation test was carried out for the
membrane reactor model shown in Figure 5 with the
OTM integrated into 3.5 mm OD tubes where one
side of the membrane was exposed to air (total air
flow 10kg/s), while the other side was exposed to exhaust/sweep gas (total gas flow 1kg/s). Design parameters for membrane tubes and size of reactor are easily
Figure 7: Total mechanical power generated by steam set in the standard geometry parameter dialog from the
turbines during load turn-down on Sargas plant model. CombiPlant library, Figure 10.
The Modelica Association

22

Modelica 2006, September 4th  5th

Modeling and Dynamic Analysis of CO2-Emission Free Power Processes in Modelica using the CombiPlant Library

Figure 9: Mass flow of steam in the gas flow into
and out of the Benfield plant section during load turndown. Humidity control tries to match the flows to
keep the plant water mass balance and avoid using
Figure 10: CombiPlant dialog for specifying heat exmake-up water.
changer geometry parameters. Friendly user interface
provides help to input all required design parameters
Simulations show that a steady state condition is used in simulations.
reached after approximately 3 hours, see Figure 11.
BSCFO membrane material shows relatively short [2] Griffin, T., S.G. Sundkvist, K. Asen, and T.
start up time compared to the SCFO materials which
Bruun, Advanced Zero Emissions Gas Turbine
can take 500 hours until reaching steady state operatPower Plant, In Proceedings of ASME Turbo
ing condition.
Expo 2003, Atlanta, USA, 2003.

5 Final Remarks
The paper shows how the CombiPlant library, with
components for standard combined cycle power
plants, can be extended and used to build component
and plant models for power plant concepts providing
CO2 emission free power. The library was used in
a project with Siemens Industrial Turbomachinery to
build a dynamic model of the Sargas power plant concept, which uses the commercial Benfield process to
separate up to 95% of the CO2 from the exhaust gases.
In another application example, mass transfer through
an oxygen transfer membrane has been described.
This is a critical component in oxy-fuel combustion
cycles such as AZEP.

References
[1] Sundkvist, S.G., T. Griffin, and N.P. Thorshaug,
AZEP - Development of an integrated air separation membrane - gas turbine, In Proceedings of
Second Nordic Minisymposium on Carbon Dioxide Capture and Storage, Gothenburg, Sweden,
2001.
The Modelica Association

[3] Selimovic F., B. Sunden, M. Assadi, and
A. Selimovic, Computational Analysis of an
O2 Separating Membrane for a CO2 -EmissionFree Power Process, In Proceedings of Asme,
IMECE2004-59382, 2004.
[4] Selimovic F., Modeling of Transport Phenomena in Monolithic Structures Related to CO2 Free Power Processes. Licentiate Thesis, ISSN
0282-199, Department of Energy Sciences, Lund
Institute of Technology, Sweden, 2005.
[5] Casella, F., Object-Oriented Modelling of Twophase Fluid Flows by the Finite Volume Method.
In Proceedings of 5th MATHMOD, Vienna, Austria. Argesim, Vienna, February 2006.
[6] Casella, F., M. Otter, K. Prol, C. Richter and H.
Tummescheit, The Modelica Fluid and Media library for modeling of incompressible and compressible thermo-fluid pipe networks. In Proceedings of the 5th International Modelica Conference, Vienna, Austria. Modelica Association,
September 2006.
[7] Tummescheit H., Design and Implementation of
Object-Oriented Model Libraries using Modelica. PhD thesis ISRN LUTFD2/TFRT1063SE,

22.1

Modelica 2006, September 4th  5th

J. Eborn, F. Selimovic, B. Sundn

Figure 11: Oxygen permeation flux of the of the membrane reactor as a function of time.
Department of Automatic Control, Lund Institute
of Technology, Sweden, August 2002.
[8] Lu H.,
Y. Cong,
and W.S. Yang,
Oxygen permeability and stability of
Ba0.5Sr0.5Co0.8Fe0.2O2-d as an oxygen
permeable membrane at high pressures, Solid
State Ionics, Vol.177, pp.595-600, 2006

The Modelica Association

22.2

Modelica 2006, September 4th  5th

Session 1b

Session 1b
Automotive Applications 1

The Modelica Association

23

Modelica 2006, September 4th  5th

Session 1b

The Modelica Association

24

Modelica 2006, September 4th  5th

Simulation of Hybrid Electric Vehicles

Simulation of Hybrid Electric Vehicles
Dragan Simic

Harald Giuliani Christian Kral Johannes Vinzenz Gragger
Arsenal Research
Giefinggasse 2, 1210 Vienna, Austria
phone +43-50550-6347, fax +43-50550-6595, e-mail: dragan.simic@arsenal.ac.at

Abstract
In this work the fuel consumption of two vehicles is
compared. For investigating the fuel consumption a
whole vehicle simulation is developed with the SmartPowerTrains library and the SmartElectricDrives library. Both librarys are written in Modelica language.
As a reference vehicle a conventional vehicle with
manual transmission is modeled. A parallel hybrid
electric vehicle with a starter/generator and two
transition machines at the front and rear drive train
wheels is compared with this reference vehicle. The
operating strategy of the hybrid electric vehicle is
explained. Furthermore, an analysis for finding
the optimal sizes of the electric machines for the
parallel hybrid electric vehicle using the developed
simulation tools and the developed operating strategy
is presented. The practical operation modes of the
parallel hybrid electric vehicle are considered with
regard to the implemented drive train configuration. A
dynamic operating method is developed to determine
the optimal power split between the internal combustion engine and the electric energy sources. The
computer simulation results show the improved fuel
consumption of the hybrid electric vehicle.
Keywords: hybrid electric vehicle; operational strategy; drive train configuration; optimization

1

hicle are modeled with the SPT library. The electrical
components in the HEV concepts are implemented using the SmartElectricDrives (SED) library. The used
components of the SED library are electric machines,
power sources, measurement devices, modern electric
drive control algorithms and power electronics.
Compatibility with other Modelica libraries such as,
the new SED library, the new VehicleInterfaces library
[2], the Modelica standard library and the Modelica.Thermal.FluidHeatFlow, can be guaranteed to the
user due to proper interfaces harmonization thoughout
the development process. This compatibility gives rise
to the development of simulation models with the potential to be expanded to hybrid- and fuel cell configurations of automotive vehicles and electric drives of
vehicle auxiliaries [3]. The SPT library is developed to
determine the energy flow in the entire vehicle including the energy consumption of electrical- and mechanical components. Furthermore, the fuel consumption
and the exhaust emissions of the vehicle and the internal combustion engine (ICE) can be calculated and
determined by using SPT library components.
An intelligent operation strategy for optimizing the
fuel consumption is essential in HEV concepts. A control signal exchange between the energy sources, energy consumers and all other components of the HEV
is facilitated by the implemented bus concept of the
SPT library. The energy flow in the HEV can be regulated and optimized independently of the drive mode
of each component.

Introduction

The focus of this paper is to compare the efficiency
and the fuel consumption of a conventional vehicle
and hybrid electric vehicles (HEVs) with scaled electric components. The SmartPowerTrains (SPT) library
focussing on hybrid electric vehicle concepts is used
for the presented investigations. The SPT library was
developed at Arsenal Research. It is written in Modelica language [1]. All mechanical components of a veThe Modelica Association

25

2 The SmartPowerTrains library
The SPT library, shown in Figure 1, is developed under the framework of Arsenal Research. This library
provides components for modeling and simulating
conventional vehicles and HEVs. The electrification
of conventional vehicles and vehicle components such
as the water pump, the cooling fan and air condition
Modelica 2006, September 4th  5th

D. Simic, H. Giuliani, C. Kral, J.V. Gragger

system give rise to higher efficiency compared to
conventional vehicle designs. Mild and full electric
vehicles are expected to have the highest efficiency.
The simulation of the entire vehicle is needed to find
the optimal drive strategy of an HEV. Particularly, the
coexistent simulation of the mechanical components
and electrical components of the vehicle is crucial.
Such simulations are possible with the developed SPT
library, the SED library and the Modelica standard
library respectively.
In the following the function and the structure of the
package components of the SPT library are explained:
Figure 1: The package browser of the SmartPower1. AuxiliaryComponents: This package contains the Trains library in Modelica.
basic components and partial models. Rotational
and translational mechanical friction models are
8. Fuels: In this package the fuels are defined.
included in this package. With the blocks and the
models of this package it is possible to implement
9. Interfaces: The Interfaces package groups the
the vehicle parts such as the friction of the bearModelica standard bus connectors, VehicleIntering, the clutch and the rooling resistance of the
faces bus connectors and advanced bus connecvehicle.
tors.
2. Chassis: The Chassis package includes different chassis models with drive resistances such as
rolling-, aerodynamic-, climbing-, and accelerating resistance.

10. ProcessControllers: This package contains the
different blocks und models for implementing the
necessary control algorithms such as the virtual
driver, the operating strategy for vehicles, etc.

3. DriveTrains: Models of belt drives, mechanical
and automatical gear box concepts, differentials,
power split devices, cardan shafts, chain drives,
clutches, etc. are designed in this package.

11. Thermals: The Thermals package includes the
thermal models of the thermal management such
as for instance the cooler, the pipeline, the water
pump, etc.

4. Electricals: The electric components such as the
starter/generator (SG), the battery and the traction
machines can be found in this package. All components of this package are implemented using
the the SED library.
5. Engines: The Engines package contains components of the ICE and the interpolation tables
of the fuel consumption and the exhaust emissions. Only mechanical components of the ICE
are modeled in this package.

The communication between the SPT and SED libraries as well as the independent control of each component allow the highest flexibility in the design of
HEV concepts. In the SPT library, the components
of the power train and the remaining vehicle components are implemented by algebraic and differential
equations whereas the ICE is implemented by characteristic curves. All parameters of the algebraic differential equations are defined by geometrical data of the
specific components.

6. Environments: Two sub-packages are included in
this package: the Cycle package providing differ- 3 The SmartElectricDrives library
ent cycle models for the determination of the operation cycle and the Ambient package with dif- The SED library uses basic models of electric maferent ambient models. The cycle models are im- chines which already exist in the Modelica standard
library [4]. However, without suitable drive control
plemented with interpolation tables.
blocks, these machine models cannot be utilized in a
7. Examples: This package contains the different resourceful and easy way. Based on the machine library, the SED library facilitates the modelling of difconcepts of vehicles.
The Modelica Association

26

Modelica 2006, September 4th  5th

Simulation of Hybrid Electric Vehicles

Figure 2: Model of a conventional vehicle.

Figure 3: Model of a HEV.

ferent control structures and control strategies. Power
tire models considering slip, two brake models and
electronics and energy storage models are included as
a differential model considering losses. The vehicle
well [5].
handling is implemented in the chassis model.

4

The example of a conventional vehicle
5 The example of an HEV

Figure 2 shows a conventional vehicle concept with
front axle drive. All vehicle components are connected
by a expandable bus connectors. These bus connectors are extended models based on the VehicleInterfaces connectors [2]. The mechanical connection of
rotational components is indicated with solid lines and
circled flanges. The dashed lines show the mechanical
connection between the translational components.
In the block driver the behaviour of a virtual driver
is implemented. The virtual driver controls the state
of the following variables: the gas padel position, the
brake pedal position, the clutch pedal position and the
gear ratio of the transmission. The block cycle and
the block ambient define the desired vehicle velocity and the state of the environment temperature, the
pressure, the density, etc. The entire control unit of
the vehicle is implemented in the strategy block.
The drive train is realised using a conventional ICE
with a simple cooling circuit, a clutch, a conventional manual transmission, marked as trans., a
cardan and the front axle. Both axles include two
The Modelica Association

27

The model of the HEV is based on the Toyota Lexus
concept. In this HEV concept three electrical machines are used. One electrical machine is used as
the starter/generator, indicated as SG in Figure 3, the
two other machines are traction machines (machine
front and machine rear). The SG is coupled
with the sun shaft of the power split device (PSD)
and the ICE is coupled with the carrier shaft respectively. The machine front is coupled with the
axle front via the front differential input shaft
and the machine rear is coupled with the axle
rear via the rear differential input shaft, respectively.
A battery model taken from the SED library is
used as the energy source for the electrical components of the HEV model. The intelligent operational
strategy is implemented in the strategy block. The
operational strategy is implemented using the Modelica_LinearSystems library. All other components and
models of the HEV are the same as in the conventional
vehicle simulation.
Modelica 2006, September 4th  5th

D. Simic, H. Giuliani, C. Kral, J.V. Gragger

Standstill mode
If the vehicle is in standstill, the vehicle velocity is
zero and the ignition of the ICE is off. If the SOC
of the battery is low, or the battery and the ICE need
to be warmed up, the ignition of the ICE is on and
working near the idle speed to facilitate the charging
of the battery.
Creeping mode
If the vehicle speed is lower than 20 km/h, the crepping mode is active. In creeping mode the operation
strategy is devided into three sub-modes:
Figure 4: Bubble diagram of the operation strategy

6

The operational strategy of the
HEV

For the optimization of the energy consumption of an
HEV concept an intelligent operational strategy is essential. The operation of energy sources (ICE, SG and
traction machines ) in an HEV drive train is monitored
and controlled with the intelligent operation strategy.
Each energy source is regulated independently based
on the state of the entire HEV system.

1. If the desired torque is not large and the SOC
of the battery is not below the lower limit, the
desired torque is distributed to both traction machines.
2. If the desired torque is very large and the SOC
of the battery is above the lower limit, the desired torque is distributed to both traction machines and the SG.
3. If the SOC of the battery is below the lower limit,
the ignition of the ICE is on and the battery gets
charged.
Pos/neg mode

In pos/neg mode the ICE, the SG and the traction
machines are operated such way that maximum fuel
6.1 Operation modes
economy is achived. Depending on the SOC of the battery and the desired torque, the calculation of the disIn this HEV concept the operation modes of the ICE
tributed torque can be devided into three different suband the brake is defined as a state algorithm in the
modes: positive power split, parallel drive and negaintelligent operation strategy. In this HEV concept
tive power split.
the operation strategy is implemented using a state
algorithm that defines the main operation modes de1. Positive power split: In this sub-mode, the SG is
termined by the state of the ICE and the state of
operated as a generator. If the SOC of the battery
the brake. The following variables effect the ICE
is below the lower limit, the battery gets charged.
state and the brake state: the vehicle velocity, the veAs long as the SOC of the battery is not above
hicle acceleration and the state of charge (SOC) of
the upper limit, the battery gets charged. If the
the battery. Figure 4 represents basically the switch
SOC of the battery is between the lower and the
logic between the possible modes [6]. This operaupper limit, the distribution of the torque is used
tion strategy has four main modes: the standstill
to achieve higher efficiency of the ICE.
mode, the creeping mode, the regen mode and
2. Parallel drive: If the parallel drive mode is acthe pos/neg mode. In each mode the ICE state, intive, the vehicle is driven by both traction madicated as ign (ignition), and the brake state, indichines and the ICE. The distribution of the torque
cated as braking is defined. The switching between
is used to achieve higher efficiency of all power
the main modes is shown in Figure 4. The variable v,
sources (the ICE, the front and rear electric mawith the non-SI unit km/h, is the vehicle velocity and
chine and the battery).
the variable dv is vehicle acceleration.
The Modelica Association

28

Modelica 2006, September 4th  5th

Simulation of Hybrid Electric Vehicles

3. Negative power split: If the SOC of the battery is
very large, the SG is operated as a motor. In this
case the speed of the SG accelerates in the negative direction and the speed of the ICE becomes
much lower. If the vehicle velocity is very large,
this sub-mode is active.
Regenerative mode
This regenerative mode, indicated as regen in Figure
4, is active if the brake pedal is applied or the deacceleration of the vehicle is determined. In this case the
ignition of the ICE is off, and consequently, the ICE
gets stopped. Both traction machines are operated as
generators. If the vehicle is in the regenerative mode Figure 5: The simulated values of vehicle velocity and
and the SOC of the battery is below the upper limit the battery SOC
battery gets charged.

6.2

Torque distribution

In each operation mode the desired torque (reference
system power, P) is distributed. This torque is defined
by the virtual driver and by the power split equation
(1). In this equation, wICE is the speed of the ICE and
tICE is the torque of the ICE, wSG is the speed of the
SG and tSG is the torque of the SG, wFM is the speed
of the front traction machine and tFM is the torque of
the front traction machine and wRM is the speed of the
rear traction machine and tRM is the torque of the rear
traction machine. The behaviour of the power split in
a planetary gear, PSD, in Figure 3, is extracted from
[7].
P = wICE  tICE  wSG  tSG + wFM  tFM + wRM  tRM
(1)

7

Sources data

The ICE of both investigated vehicle concepts is a
gasoline engine. The following parameters are taken
for modeling and parameterizing the ICE [8]: 1.5 cc
displacement, 43 kW maximum power at 4000 rpm,
102 Nm maximum torque at 4000 rpm, four cylinders.
The fuel consumption map of this ICE is defined according to [9].
The following parameters are taken for modeling
and parameterizing the Ni/MH battery of the HEV
concept: 1.2 V cell voltage, 6 cells per module,
38 modules, 273.6 V battery package voltage, 6.5 Ah
rated capacity.
The Modelica Association

29

Both traction machines are 3 phase alternating current
(AC) permanent magnet synchronous machines with
an output power of 33 kW. The SG has an output power
of 13 kW and is also implemented as an permanent
magnet synchronous machine. All electric machines
are modeled using the SED library.
The parameters of the front axle and the rear axle
(brakes, differentials, inertia of rotational parts, etc.)
are defined using [10]. Basically, the Toyota Prius
component data are used to parameterize the HEV
components. The only difference between the proposed HEV concept and the Toyota Prius is that the
proposed HEV concept is featured with one electric
traction machine for each axle. Both traction machines
have the same rated power.

8 Energy balance
Investigating the fuel consumption of a vehicle it is
necessary to assure that the system energy at the start
and the end of a test cycle is the same. In this work
both vehicle concepts are simulated in the New European Driving Cycle (NEDC). The new NEDC defines vehicle velocity profiles for one urban drive cycle
(UDC) as well as one extra-urban drive cycle (EUDC).
The simulation time of the HEV simulation is chosen
so long that the SOC reaches a steady state. The upper diagram in Figure 5 shows the vehicle velocity of
a vehicle concept driving 15 NEDC. The SOC of the
battery is represented in the lower diagram in Figure
5. It can be seen that the SOC of the battery is in balance on the last cycle. This value of the SOC is used as
the initial value of the SOC for the fuel consumption
calculation in one NEDC.
Modelica 2006, September 4th  5th

D. Simic, H. Giuliani, C. Kral, J.V. Gragger

Figure 6: The decrease in the fuel consumption at different nominal speeds of the electric machines in HEV

9

Simulation results

For the optimization of the HEV the nominal operation points of the SG and the front- and rear machine
are varied. All other design parameters of this components are kept constant. The nominal speed of the
SG, WSG , shown in Figure 6, is varied from 200 rad/s
to 800 rad/s and the nominal speed, WM , of the front
and rear electric machine is varied from 270 rad/sec to
700 rad/s. The size of the used battery is kept constant
and the components of the drive train in the HEV are
not varied.
Figure 6 shows the simulated results of the HEV with
different nominal operation points of the traction machines and the SG. The decrease in the fuel consumption (fuel consumption decrease) is given in
percent and shows the economic gain compared to
the conventional vehicle concept. The possible decrease in fuel consumption is in the range from 20 % to
31.4 % for this varied range of the nominal speeds of
the electric machines. The best efficiency of the HEV
is at WSG = 310 rad/s and WM = 298 rad/s. In this point
the decrease in fuel consumption is 31.4 %.
Here the best design point of an HEV concept is calculated and defined. In the simulations a number of
NEDCs is used. Therefore, the simulation results can
not be applied to other drive cycles. The simulation
results are valid for the performed NEDC only.

idence of economic savings potential by using alternative drive train concepts  in this case a HEV. Different
vehicle drive train concepts and operating cycles can
rapidly be analized and tested on fuel consumption and
efficiency. Based on the presented results, the design
point of the energy sources and the energy consumption of each vehicle component can be calculated and
determined. It is shown that the presented libraries can
be used to accelerate the design process of innovative
vehicle concepts significantly.
This investigation can only be used for the design of
vehicles, which are driven in an exact operating cycle
such as the exact city drive, the exact reiteration drive,
etc.
Based on the calculated decrease in fuel consumption
the reduction of energy and emissions of a vehicle on
European level can be projected. Focus of the developed process is the realisation of integrated and optimized electric components in autmotive industry. For
demonstration purpose selected electrical components
such as an SG will be built and integrated in a test vehicle in the near future.

11 Abbreviations
HEV

hybrid electric vehicle

SPT

SmartPowerTrains

SED

SmartElectricDrives

ICE

internal combustion engine

SG

starter/generator

PSD

power split device

SOC

state of charge

AC

alternating current

NEDC

New European Driving Cycle

UDC

urban drive cycle

EUDC

extra-urban drive cycle

References
10

Conclusions

The implemented vehicle simulation allows the determination of the actual fuel consumption and shows evThe Modelica Association

30

[1] Peter Fritzson, Principles of Object-Oriented
Modeling and Simulation with Modelica 2.1,
IEEE Press, Piscataway, NJ, 2004.
Modelica 2006, September 4th  5th

Simulation of Hybrid Electric Vehicles

[2] M. Dempsey, H. Elmqvist, M. Gaefvert, P. Harman, C. Kral, M Otter, and P. Treffinger, Coordinated automotive library for vehicle system
modelling, 5th International Modelica Conference 2006, 2006.
[3] D. Simic, H. Giuliani, C. Kral, and F. Pirker,
Simulation of conventional and hybrid vehicle
including auxiliaries with respect to fuel consumption and exhaust emissions, SAE World
Congress 2006, April 2006.
[4] C. Kral and A. Haumer, Modelica libraries
for dc machines, three phase and polyphase machines, Modelica Conference, pp. 549558,
2005.
[5] H. Giuliani, C. Kral, J.V. Gragger, and F. Pirker,
Modelica simulation of electric drives for vehicular applications . the smart drives library,
ASIM, 2005.
[6] Y. Zhu, Y. Chen, and Q. Chen, Analysis and design of an optimal energy management and control system for hybrid electric vehicles, Electric
Vehicle Symposium, EVS19, Busan, Corea, October 2002, October 2002.
[7] W. Beitz and K.H. Kttner, Dubbel Taschenbuch
fr den Maschinenbau, Springer Verlag, Berlin,
14 edition, 1981.
[8] G.C. Kim and Y.J. Lee, The influence of driving
conditions on fuel economy and exhaust emissions of the toyota PRIUS HEV, The 20th International Electric Vehicle Symposium and Exposition, 2003.
[9] National Renewable Energy Labaratory (NREL),
Advisor documentation, advisor data file fc
prius jpn, www.ctts.nrel.gov, 2002.
[10] Toyota Motor Corporation, Prius II Service Manual, Toyota Motor Corporation, 2003.

The Modelica Association

31

Modelica 2006, September 4th  5th

D. Simic, H. Giuliani, C. Kral, J.V. Gragger

The Modelica Association

32

Modelica 2006, September 4th  5th

Coordinated Automotive Libraries for Vehicle System Modelling

Coordinated automotive libraries for vehicle system modelling
Mike Dempsey1, Magnus Gfvert2, Peter Harman3,
Christian Kral4, Martin Otter5, Peter Treffinger6
1
4
Claytex Services Limited, Hatton, UK
arsenal research, Vienna, Austria
2
5
Modelon AB, Lund, Sweden
DLR, Oberpfaffenhofen, Germany
3
6
Ricardo UK Limited, Leamington Spa, UK
DLR, Stuttgart, Germany
vi@claytex.com
and provide easy ways to integrate user-developed
models.
This work is based on previous work carried out by
the authors and also builds on the work done on the
Modelica Vehicle Model Architecture published by
Tiller et. al.[6].
The approach adopted in developing this library has
been to focus on standardising the subsystem interfaces rather than developing a standard vehicle
model architecture. Several different example architectures based on these interfaces are provided as
examples in the VehicleInterfaces library. A typical
example is shown in Figure 1 where all the main
subsystems (driver, driverEnvironment, engine,
transmission, driveline, chassis, brakes, accessories,
road, atmosphere, etc.) are included at the top level
of the model. In this example it is assumed that the
controllers for the respective subsystems are part of
the subsystem model. In other architectures, the controllers might be on the same level as the subsystems.
All subsystem models in the architecture are de-

Abstract
A new free Modelica library, called VehicleInterfaces, has been developed to promote compatibility
between Modelica automotive libraries. The library
provides standard system interface definitions that
enable the whole vehicle system to be conveniently
modelled. Example vehicle models are also provided to illustrate the use of the interface definitions.
Practical applications and examples of how these
interface definitions can be used are presented.

1

Motivation

A number of Modelica library developers are working independently on automotive libraries focused on
different vehicle systems such as PowerTrain [1],
Transmission [2], VehicleDynamics [3] and SmartElectricDrives [4]. For many simulation activities it
is desirable to be able to create whole system models
[5] that combine elements from the different libraries

Figure 1: Example vehicle model using VehicleInterfaces shown in Dymola 6.0b
The Modelica Association

33

Modelica 2006, September 4th  5th

M. Dempsey, M. Gfvert, P. Harman, C. Kral, M. Otter, P. Treffinger

clared as replaceable. When instanting an archictecture model, the desired subsystem model can be
selected via a redeclaration. In Dymola there are two
ways to redeclare components using the graphical
user interface as shown in Figure 2.
The dialog box shown at the top of Figure 2 is accessed through the model browser by right-clicking
on the base class being extended. The scroll down
menus show the available subsystem models that can
be selected. As usual, these menus are automatically
constructed via the annotation choicesAllMatching
= true (all model components are shown that are
loaded into the Modelica simulation environment
and are derived by inheritance from the respective
superclass).
In Dymola 6 redeclarations can be made by right
clicking on a replaceable subsystem, the context
menu then allows the user to select an option from
the list of matching types. The list is determined

using the same annotation as the dialog box method.

2

Interface Definitions

The subsystem decomposition used within the VehicleInterfaces package follows the same basic structure as used in the Modelica VMA developed by
Tiller et al [6]. In the following sections we will discuss the subsystems and modelling methods introduced with the VehicleInterfaces package.
2.1

Conditional Connectors

The VehicleInterfaces package makes extensive use
of conditional connectors so that a single subsystem
interface definition can be used for a wide range of
applications. A conditional component, such as a
connector, is one that is only instantiated in the
model if the corresponding Boolean condition is true.
The Modelica code for an example conditional component is shown in Figure 3. In this example the
component shaft is only instantiated in the model if
the user sets the parameter includeInertia=true, if
the parameter is false then the component and all
related connections are completely removed from the
model.
If we consider the engine subsystem, this includes
conditional connectors for the engineMount and acceleratorPedal connections. The engineMount connector models the physical connection between the
engine block and the engine mounting system as a
MultiBody connection. This is not always required,
for example when modelling the engine as a simple
1D system. Similarly the acceleratorPedal, which is
a 1D translational connector provides a physical
connection between the engine subsystem and the
driver environment, which isnt required in a driveby-wire vehicle.
By using conditional connectors these components
are completely eliminated from a model when they
are not required. If they were not eliminated it
would be necessary to add additional components to
ensure that all the flow variables within the connectors were being properly defined. This would add
additional overhead to the simulation task and should
model Example
parameter Boolean includeInertia=false;
Rotational.Inertia shaft if includeInertia;
...
end Example;

Figure 2: Two methods for the redeclaration
of subsystem models in Dymola 6
The Modelica Association

Figure 3: Example of a conditionally instantiated
Inertia component.
34

Modelica 2006, September 4th  5th

Coordinated Automotive Libraries for Vehicle System Modelling
model Base
MultiBody.Interfaces.FlangeWithBearing
TransmissionFlange(
final includeBearingConnector=
includeTransmissionBearing);
VehicleInterfaces.Interfaces.ControlBus
ControlBus
MultiBody.Interfaces.Frame_a drivelineMount
if includeMount;
protected
parameter Boolean
includeWheelBearings=false;
parameter Boolean includeMount=false;
parameter Boolean
includeTransmissionBearing=false;
end Base;

be avoided whenever possible.
Conditional connectors are used wherever a connector might not be needed in every application. These
include all MultiBody connectors and all the physical connections between the driver environment and
the subsystem models.
2.2

Modelling Rotating Components

Within VehicleInterfaces rather than limiting ourselves to modelling rotating components as a simple
1D rotation we have built in the flexibility to model
rotating components as MultiBody systems. This
has been possible through the development of a new
connector called FlangeWithBearing. This is a hierarchical connector that contains a 1D rotational connector and a conditional MultiBody connector. The
use of the MultiBody connector is controlled by a
parameter in the connector. This enables the
FlangeWithBearing connector to model rotational
effects as a purely 1D system or it can correctly include MultiBody effects. The Modelica definition of
this new connector is shown in Figure 4 and the
connector is now available within the MultiBody.Interfaces package of the Modelica Standard
Library 2.2.1.
Where this connector is used in an interface definition the parameter includeBearingConnector is
linked to a parameter at the model level so that the
model developer can easily activate this connector if
required. An example of how this is used is shown
in Figure 5 where the driveline interface definitions
for a 2-axle vehicle are shown. In the Base class we
can see that three Boolean parameters are declared
as protected parameters. This means they are only
available to the model developer as they create the
subsystem model and cannot be changed when the
model is used.
The use of the bearing connectors needs to carefully
considered to avoid inadvertently creating mechanical loops in the model. The following example
guidelines for the engine and transmission subsystems should help highlight the issues so that the

model TwoAxleBase
extends Base;
MultiBody.Interfaces.FlangeWithBearing
WheelHub_1(
final includeBearingConnector=
includeWheelBearings);
MultiBody.Interfaces.FlangeWithBearing
WheelHub_2(
final includeBearingConnector=
includeWheelBearings);
MultiBody.Interfaces.FlangeWithBearing
WheelHub_3(
final includeBearingConnector=
includeWheelBearings);
MultiBody.Interfaces.FlangeWithBearing
WheelHub_4(
final includeBearingConnector=
includeWheelBearings);
end TwoAxleBase;

Figure 5: Modelica code for the
driveline interface definition

model developer can determine when it is appropriate to use the bearing connectors. For the engine and
transmission subsystem models:
1. When they are modelled as a pure 1D rotational
system then no bearing connectors are required.
2. When they are modelled as a 1D rotational system with reactions on to a MultiBody system
then no bearing connectors are required
3. When they are being modelled as a MultiBody
system but they are rigidly connected together
then the bearing frame between the engine and
transmission should not be included. In this case
the transmissionMount connector should support
the MultiBody elements of the transmission.
The rest of the model then needs to be considered before deciding whether to include the bearing between the transmission and driveline or between the engine and accessories subsystems.
4. When they are being modelled as a MultiBody
system but they are not rigidly connected to-

connector FlangeWithBearing
parameter Boolean
includeBearingConnector=false;
Rotational.Interfaces.Flange_a flange;
MultiBody.Interfaces.Frame bearingFrame
if IncludeBearingConnector;
end FlangeWithBearing;

Figure 4: Modelica code and icon for
the FlangeWithBearing connector
The Modelica Association

35

Modelica 2006, September 4th  5th

M. Dempsey, M. Gfvert, P. Harman, C. Kral, M. Otter, P. Treffinger

gether then the bearing frame between the engine
and transmission will be required to support the
intermediate drive shaft.
2.3
tems

another that supports the differential. The modelling
of the mounting systems in this way reflects the
physical reality of a rear-wheel drive vehicle in
which the engine and transmission are rigidly connected together and mounted as one system at the
front of the vehicle and the differential in the rear
axle is independently mounted. Vehicles with different driveline configurations would require a different arrangement for the mounting systems.
The mounting subsystems are all defined by extending a base class that includes a MultiBody connector
that should be connected to the vehicle body. There
are 3 mounting subsystem templates provided within
the VehicleInterfaces package that can be used to
support differing numbers of powertrain subsystems.
The connections to the powertrain subsystems are
modelled using MultiBody connectors.
When the mounting systems are not being modelled
these subsystems can be removed from the model
architecture to simplify the vehicle model.

Driver and Driver Environment Subsys-

The driver and the physical interaction between
driver and vehicle can be modelled as separate subsystems or combined as a single subsystem within
the VehicleInterfaces package. The decision is down
to the model developers and will influence the extent
to which models are reusable in other applications.
The physical interactions, such as steering and throttle controls and feedback signals, are referred to as
the driver environment within VehicleInterfaces.
When the driver and driver environment are modelled as separate subsystems the driver environment
model is responsible for converting the normalised
instructions passed from the driver model in to the
correct values for this particular vehicle model. For
example, a driver model should demand normalised
steering wheel angles between 1 and 1 and this
should be translated by the driver environment subsystem in to the appropriate steering wheel angle for
the current vehicle. This enables the driver model to
be defined in a generic way for use on many different vehicles.
The interaction between the driver and driver environment subsystem is modelled using an expandable
connector known as the driver interaction bus. The
connections passed across this bus are a combination
of signal values and normalised physical connections. A normalised physical connection contains
both the normalised position and the actual force or
torque being applied across the connection. The
naming and types for the signals that are exchanged
between these two subsystems is defined within the
VehicleInterfaces package to ensure compatibility
between driver models and driver environment models from different libraries.
When only the driver environment subsystem is present this should also include the driver model and it
is the responsibility of the individual model developers to provide a logical separation between the environment and driver models.
2.4

2.5

The road subsystem is used to define the road surface and supports varying friction coefficients, curvature, gradients and banking. The road is defined
as a series of replaceable functions that are used to
determine the position along the road, the normal to
the road surface, the current heading of the road centre line and the friction coefficient. By redeclaration
of these functions a wide range of road models from
a straight flat road through to a curved undulating
road can be created.
When a road is used at the top level of a model it
should be declared with the prefix inner so that it can
be referenced from any subsystem or component
within the model that needs to determine information
about the road surface. When a subsystem needs to
refer to the road subsystem it should contain an outer
version of the road subsystem and this will then enable it to access the road definition from the toplevel of the model.
2.6

Atmosphere Subsystem

The atmosphere subsystem defines the ambient conditions including temperature, pressure, humidity,
wind speed and direction. The atmosphere is defined
as a series of replaceable functions that determine
these conditions at a specified point in space. This
enables the ambient conditions to vary with the vehicle position so effects such as wind can be varied as
the vehicle drives along a track.

Powerplant Mounts Subsystem

Unlike in the Modelica VMA the Powertrain mounting systems are modelled as separate subsystems
when they are required in a model. In Figure 1 we
see that there are two separate mounting systems,
one for supporting the engine and transmission and
The Modelica Association

Road Subsystem

36

Modelica 2006, September 4th  5th

Coordinated Automotive Libraries for Vehicle System Modelling

2.7

Example Vehicle Architectures

Using these interface definitions we can create a variety of vehicle model architectures to suit different
applications. Figure 1 shows an example architecture for a rear-wheel drive automatic transmission
passenger car that includes a separate driver model
and powertrain mounting systems. Figure 6 shows
some other possible model architectures including
(from top to bottom) a manual transmission vehicle;
an alternative layout for an automatic transmission
vehicle; a power-split hybrid vehicle model. In all
these cases it is possible to re-use the same subsystem models because the interface definitions are consistent even though the top-level model appears very
different.

3
3.1

Control Bus Structure
Overview

Within the VehicleInterfaces library every subsystem
that forms part of the vehicle model has a connection
to the control bus. The control bus is used to pass
information between the subsystems that would
normally be passed along the CAN bus or similar
vehicle communication network. The VehicleInterfaces control bus does not model how the vehicle
network communication actually works but instead
provides a structure by which the same information
can be exchanged between the various subsystems.
The control bus is modelled using a series of hierarchical expandable connectors, which means that the
user can place any signal they need on to the control
bus. As part of the VehicleInterfaces library a minimum set of signals and a structure for the control bus
is recommended so that systems that follow these
recommendations can easily be coupled together.
A hierarchical structure to the control bus is proposed where the subsystem name is used to help
structure the signals on the bus. For example signals
placed on to the control bus from the chassis subsystem should be placed within the chassisBus structure
of the controlBus, see Figure 7 for an illustration of
the current minimum set of signals for the control
bus. A full naming convention is included with the
VehicleInterfaces package.
3.2

Figure 6: Example model architectures

structure. To access a signal within the control bus
hierarchy it is first necessary to add the appropriate
sub-bus connector to the model as a node, i.e. a protected connector. Signals within this part of the control hierarchy can then be accessed by connecting to
the sub-bus connector. Figure 8 shows how the longitudinal velocity signal within the chassisBus subbus on the vehicle controlBus can be accessed. The
Modelica code for this example is also shown. This
methodology is necessary due to the way the Modelica language specification defines expandable connectors [7].

Working with the Control Bus

Every subsystem within the VehicleInterfaces package contains a controlBus connector that will allow
the subsystem access to the complete control bus

The Modelica Association

37

Modelica 2006, September 4th  5th

M. Dempsey, M. Gfvert, P. Harman, C. Kral, M. Otter, P. Treffinger

model controlBusDemo
extends TwoAxleBase;
protected
VehicleInterfaces.Interfaces.ChassisBus
chassisBus;
public
Modelica.Blocks.Math.Gain gain;
equation
connect(controlBus.chassisBus,
chassisBus);
connect(gain.u,
chassisBus.longitudinalVelocity);
end controlBusDemo;

Figure 7: Current minimum set of
signals in the control bus

Figure 8: Accessing signals on the control
bus (model diagram in Dymola)

3.3

The Sub-bus Connectors

trol signal bus in appropriate ways for their library
and to have the names automatically appear in models.

The sub-bus connectors are defined within the VehicleInterfaces.Interfaces package and are all defined
as expandable connectors. As such the connectors
dont contain any signal names and yet we would
like it to be possible to generate a list of pre-defined
names to make it easier for the user to connect to the
control bus and access the appropriate signal.
To enable this to happen, within the VehicleInterfaces package each expandable connector has been
extended and the standard signals have been defined
within these extended connectors. These connectors
are not intended for use directly within a model but
are necessary to enable a Modelica tool to generate a
list of possible signal names. Within Dymola, when
a connection to an expandable connector is made a
dialog box is generated with a list of signal names.
The list of signal names is now determined by
searching through the open libraries to find connectors that extend from the type of expandable connector used in the current connection. All the signals
that are defined within the connectors that extend
from the base connector are then added to the list and
the user can select the appropriate one.
This functionality means that the user can easily
connect to one of the standard signal names but also
means that it is not absolutely necessary for them to
assign values to every signal that is defined as part of
the standard VehicleInterfaces control bus. It also
allows different library developers to extend the conThe Modelica Association

4

Usage Examples

Three different usage examples are presented to illustrate different ways that the interface templates
can be used to model vehicles with different levels of
detail. The first two examples illustrate two different
approaches to modelling a rear-wheel drive driveline
and the third example illustrates how the different
commercial model libraries that are adopting these
interface definitions can be coupled together.
4.1

Rear-Wheel-Drive Vehicle as a 1D System

The simplest way to model a vehicle powertrain is as
a 1D rotational system. This approach does have
many uses, such as fuel economy studies, and this
example illustrates how the interface templates can
be used in this way. Figure 9 shows the driveline
model diagram for a rear-wheel drive vehicle modelled as a purely 1D rotational system. Components
in this model are taken from the Modelica Standard
Library and the PowerTrain library.
In this example the parameters that control the conditional connectors for the driveline interface class are
all left with their default values of false. This means

38

Modelica 2006, September 4th  5th

Coordinated Automotive Libraries for Vehicle System Modelling

Figure 9: Simple 1D Rotational model
of a rear-wheel drive driveline

Figure 10: 1D Rotational model of a rear-wheel
drive driveline with reactions on to a MultiBody
system

that the bearing frame connectors within the
FlangeWithBearing connectors (transmissionFlange,
wheelHub_1, etc.) are not instantiated in the model
and neither is the drivelineMount connector. This
leaves us with a simple model using just the 1D rotational connectors for the transmission and wheel
hubs.
When modelling a 1D rotational system it is sometimes necessary to include the reactions of the 1D
rotational system on a MultiBody system [8].
Adapting the rear-wheel-drive model to include MultiBody effects would lead to the diagram in Figure
10. To enable this model to be built the drivelineMount connector needs to be enabled so that the
MultiBody reactions can be transmitted in to the vehicle body. The bearing frame connectors within the
transmissionFlange and wheelHub connectors are
not required in this model as the driveline is not being modelled as a MultiBody system.

In the case of a rear-wheel drive vehicle the propshaft is supported by the transmission and the differential. So in this case the bearing frame in the
transmissionFlange needs to be included so that this
end of the propshaft is correctly supported. The differential is also being modelled as a MultiBody system so this will support the other end of the propshaft. The differential itself is typically supported by
an elastic mounting system that would be connected

4.2
Rear-Wheel-Drive Vehicle as a MultiBody
System
The same driveline interface template can be used to
model the complete driveline as a MultiBody system.
In this case the use of the bearing connectors within
the FlangeWithBearing connectors needs to be
thought about carefully in order to make sure mechanical loops arent inadvertently created. Consideration needs to be given to the way in which the
MultiBody components are being supported both in
the physical system and in the model itself.
The Modelica Association

Figure 11: MultiBody model of
a rear-wheel drive driveline
39

Modelica 2006, September 4th  5th

M. Dempsey, M. Gfvert, P. Harman, C. Kral, M. Otter, P. Treffinger

to the driveline model via the drivelineMount connector.
Finally it needs to be considered how the halfshafts
are supported, one end is attached to the differential
and supported by the output bearings of the differential, the other end is attached to the wheel hub and
supported by the wheel bearing. This means the
bearing frames in the wheel hub connectors need to
be included. An example of how this subsystem
might look is shown in Figure 11.
4.3

parameter is set to true the bearing connectors within
the wheelHub connectors are included and zero
forces and torques are applied to these bearing connectors.
The driveline control system model within the PowerTrain library provides parameters to enable or disable the control of the active differentials. When
disabled the driveline behaves as a conventional,
passive four-wheel-drive system so this model can
easily be used to assess the benefits of active versus
passive four-wheel-drive.
The vehicles are tested by accelerating from rest to
100kmh and then negotiating a tight chicane at
100kmh whilst trying to maintain this speed. Figure
13 shows how the yaw rate, steering angle and longitudinal speed of the two cars varies during the test.
As a chassis model from the VehicleDynamics library is being used the behaviour of the cars during
the test can be animated, Figure 14 shows a comparison of how the two cars behave.

Active 4WD Vehicle Model

By combining models from the PowerTrain and VehicleDynamics libraries it is possible to study the
handling benefits of active four-wheel-drive systems
and compare this to the handling of the same vehicle
with a conventional, passive four-wheel drive system.
The vehicle model is created using various subsystem models from the PowerTrain library and the VehicleDynamics library. The PowerTrain library contains an active four-wheel drive system model shown
in Figure 12. The driveline is modelled as a 1D rotational system and includes the reactions on to the
vehicle body. To make this 1D driveline model
compatible with a MultiBody chassis model from the
VehicleDynamics library we need to activate the flag
usingMultiBodyChassis in the Advanced menu of
the driveline component parameter dialog. When this

5

The first version (1.0) of the VehicleInterfaces library has been presented. Future developments and
refinements will be based on feedback from automotive library developers and users of the VehicleInter-

Figure 13: Comparing Active and Passive FourWheel Drive. Yaw-rate (top), Longitudinal velocity (middle) and Steering angle (bottom).

Figure 12: Active four-wheel drive system
from the PowerTrain library
The Modelica Association

Outlook

40

Modelica 2006, September 4th  5th

Coordinated Automotive Libraries for Vehicle System Modelling

References
[1] Schweiger C., Dempsey M., Otter M.: The PowerTrain Library: New Concepts and New Fields of Applications. Proceedings of Modelica 2005 Conference. http://www.modelica.org/events/Conference2005/online_proceedings/Session6/Session6a1.pdf
[2] Brandao F., Harman P.: An Integrated Simulation
Approach: Ricardo Transmission and Driveline Dynamic Simulation Library. IMechE Integrated Powertrain and Driveline Systems 2006
[3] Andreasson J., Gfvert M.: Vehicle Dynamics Library. Proceedings of Modelica 2006 Conference.
[4] Giuliani H., Kral C., Gragger J.V, Pirker F.;. Modelica Simulation of Electric Drives for Vehicular Applications  The Smart Drives Library. ASIM conference, 2005
[5] Alexander T., Liu C.S., Monkaba V.: Multi-Body
Dynamic Modeling Methods and Applications for
Driveline Systems. SAE 2002-01-1195
[6] Tiller M., Bowles P., Dempsey M.: Development of a
Vehicle Modeling Architecture in Modelica. Proceedings of the Modelica 2003 Conference.
http://www.modelica.org/events/Conference2003/pap
ers/h32_vehicle_Tiller.pdf
[7] Modelica: Language Specification 2.2. Feb. 2005.
Section 3.3.8, pp. 54  59 (expandable connectors).
http://www.modelica.org/documents/ModelicaSpec2
2.pdf

Figure 14: Visualising the behaviour of
the two cars in Dymola. The green car
has active four-wheel drive and the red
car has passive four-wheel drive.

faces library. Currently only a small set of standardised signals have been defined on the control bus and
it is likely that this will need to be extended significantly to meet the needs of users.

6

Acknowledgements

[8] Schweiger C., Otter M.: Modelling 3D Mechanical
Effects of 1D Powertrains. Proceedings of Modelica
2003 Conference,Nov. 2003.
http://www.modelica.org/events/Conference2003/pap
ers/h06_Schweiger_powertrains_v5.pdf

A number of automotive library developers and consultants have co-operated to develop this release of
the VehicleInterfaces Library. The developers can all
be contacted by emailing vi@claytex.com. In addition to the authors of this paper the following people
have also contributed:
Arsenal Research: Franz Pirker, Anton Haumer,
DLR Oberpfaffenhofen: Christian Schweiger, Jakub
Tobolar.
DLR Stuttgart: Marcus Baur, Jrg Ungethm
Modelon AB: Johan Andreasson
Ricardo UK Ltd: Mark Ingram
This library has been developed from work on the
original Modelica VMA [6] developed by Michael
Tiller et al. Additional ideas from intermediate work
by members of DLR Oberpfaffenhofen and Modelon
has also been incorporated.
Hilding Elmqvist from Dynasim AB is responsible
for bringing this group of developers together with
the objective of developing a standard automotive
model architecture. Dynasim have funded much of
the development of this library.

The Modelica Association

41

Modelica 2006, September 4th  5th

M. Dempsey, M. Gfvert, P. Harman, C. Kral, M. Otter, P. Treffinger

The Modelica Association

42

Modelica 2006, September 4th  5th

The VehicleDynamics Library - Overview and Applications

The VehicleDynamics Library  Overview and Applications
J. Andreasson and M. Gafvert
MODELON AB

{johan.andreasson,magnus.gafvert}@modelon.se

Abstract

2

Model and Library Structure

The VehicleDynamics Library provides a foundation

A road vehicle contains a multitude of parts and sub-

for model-based vehicle dynamics analysis, in parti-

systems.

cluar related to road-vehicle handling. This commer-

hierarchy. For example, a car contains a chassis, that

cial new library is a major improvement and expan-

contains front and rear suspensions, that contains left

sion of the previously available free vehicle dynamics

and right suspension linkages and steering, etc.

library. This paper gives an introduction and overview

analogy with this, it is natural to structure a model of a

of the new library and gives some example use-cases.

vehicle similarly and that is also reected in how mod-

Conceptually, these can be organized in a

In

els in the VehicleDynamics Library and the library it-

1

self are organized as illustrated in gure 1 which con-

Introduction

tents are discussed more in section 3.

The potential of Modelica as a mean to efciently describe vehicle models has been recognised for quite
a while [1, 2, 3, 4, 5] and lead to the initiative to
develop a library for vehicle dynamics studies [6].

There are also vital models that are not reected in
neither of these illustrations that are gathered in special
sub-packages throughout the package hierarchy:

Interfaces

The Interfaces sub-packages contain

This resulted in the free VehicleDynamics library that

common connector and parameter denitions and

was developed and maintained by Johan Andreasson

are used as base classes to ensure compatibility.

during 20002004, on the initiative and with support

Advanced users that dene their own component

from Hilding Elmqvist (Dynasim AB) and Martin Ot-

models should use these classes, when applica-

ter (DLR Research Center Oberpfaffenhofen).

ble.

The great interest in the free VehicleDynamics library and increased requirements and demands on new

Templates

features, continuity in maintenance and support, and

ards to create more complex component mod-

not the least complete documentation triggered the de-

els, vehicles, and experiments.

cision to develope the library into a commercial prod-

actual component models, new models can be im-

2004, and has resulted in the commercial VehicleDy-

plemented in an efcient way that is easy to main-

namics Library. The current version 1.0 of the library

tain.

is a substantial extension and improvement of the now
The VehicleDynamics Library, or VDL, is in-

By extending a

template model and lling the placeholders with

uct. This initiative was taken by MODELON AB in

deprecated free VehicleDynamics library.

The Templates sub-packages contains

template classes that can be regarded as wiz-

Components

The Components sub-packages con-

tain models that are used to build component

tended for vehicle dynamics analysis related to me-

models in the corresponding package.

chanical design and control design of automotive chas-

models can be used by advanced users that build

sis. Handling behaviour is the primary target, but the

their own component models.

library is also well suited for studies of other vehicle
properties. The sequel will enlighten the contents and

Internal

These

The Internal packages contains models

use of the library, pinpoint some key issues in the de-

of no normal interest for the user, and these mod-

velopment and outline some expected enhancements.

els should not be directly used by the user.

Experiments

Models in VDL that are complete

and meaningful to simulate are called Experiments and are indicated by a specic icon. Templates for experiments are located throughout the

The Modelica Association

43

Modelica 2006, September 4th  5th

J. Andreasson, M. Gfvert

Figure 1: Hierarchy of an experiment model (top) and part of the hierarchical library structure (bottom).

The Modelica Association

44

Modelica 2006, September 4th  5th

The VehicleDynamics Library - Overview and Applications
library structure and include setups like full vehicle or chassis on a road, as well as test-rigs for
analysing individual components or subsystems
as discussed in section 5.

3.3

Roads and RoadBuilder

The Roads package contains road models and related
components.

The at ground with optional inclina-

tion is useful for open-loop studies, while the ver-

As for the sub-packages, there are also component

satile 3-dimensional table-based road model can be

types that are found throughout the library:

used with closed-loop driver models to analyze ma-

Base

Base class for group of components in a sub-

neuver responses and driving on road-segments with

package. Located in Interfaces subpackage. Par-

user-dened geometry. The road models also contain

tial (incomplete) classes that must be extended

reference trajectories for drivers without planning abil-

before being instantiated.

ities. Obstacles such as cones and wind indicators can

Standard

Base class for group of components in a

subpackage.

The Standard base classes differs

from the Base base-classes in that they are less
general.

Standard base classes are designed to

provide a standard connector interface that covers the most common variants for the component
type.

Standard base-classes extend from Base

base-classes.

None

be used to make animations more illustrative.
The RoadBuilder sub-package contains utilities to
create tables for the 3D-road model, either specialized
for e.g. a double lane change or more generic, gure 2
illustrates typical input for the latter: Curvature is the
inverse of the radius of the center line (1), road slope at
the center line is the altitude increment along the road
heading direction (2) and banking is the altitude increment perpendicular to the road center line (3). Road

No (empty) implementation of a component

is the downwards-outwards increment from the center

that still simulates. Null components are mainly

line which is present on roads to allow efcient water

used in templates as a way to leave out compo-

drainage (4). Left (5a) and right (5b) road edges are

nents.

dened so that positive values denes the offset to the

Typical

left of the center line. Note that the right edge always
Component that represents a typical vari-

ant.

should have a greater value than the left edge.

The

start position (6) and heading angle (7) is the position

Basic

Basic model of a component.

Ideal

Ideal model of a component.

and angle of the center line at zero distance, respectively. The track position (11) is dened as an offset
from the road's center line that a driver model may
follow by varying the steering input. If the offset is 0,

3
3.1

the driver will follow the road center line and accord-

Library Contents

ingly there is a velocity reference (11). The user can
also specify the maximum error that is allowed due

Atmospheres

to linear approximation of a curve segment (8) and a
The Atmospheres package contains models of atmospheric conditions such as wind speed, humidity and
density.

This information is useful for analysis in-

volving aerodynamic resistance or downforce, and responses to wind disturbances.

It can also be used

for other models that requires atmospheric information

maximum allowed distance between two consecutive
grid points, this only occur for long straights (9). The
resolution (10) denes the minimum distance between
two grid points that RoadBuilder consider as separate
when merging the input tables. Additionally there are
cones that can be positioned along the road.

such as engine cooling.

3.2

3.4

Drivers

The Drivers package contains congurable open-loop,
closed-loop, and event-driven driver models.

The

open-loop models has an extended set of sources to
also be able to handle standard maneuvers such as
instability triggering sine with dwell time or sine increasing amplitude. The closed-loop models use road
information (se below) for positioning on and speed
control. More complex sets of instructions are handled
by the event driven driver model that allows changing

Vehicles

The Vehicles package contains models of whole vehicles and related components. Vehicle models are partitioned into the subsystems: chassis, driver, environment, engine, transmission, driveline, and brakes. The
focus of VehicleDynamics Library is on chassis models, but there are also models of other subsystems such
as driver, environments, engines, transmissions, drivelines, and brakes. The Vehicles package contains one
sub-package for each subsystem.

between and combining open and closed loop tasks.

The Modelica Association

45

Modelica 2006, September 4th  5th

J. Andreasson, M. Gfvert
allow the same models throughout the chassis delity
range which allow convenient conguration and comparison of results.

3.9

Sensors

Sensors can be freely located on the vehicle to be used
as feedback signals for controllers or observers. VDL
includes a set of sensors that are easy to congure and
extend.

3.10
Figure 2: An example of possible RoadBuilder user
inputs, note that the inputs in the example are exaggerated to make them clearer.

3.5

Drivelines and Brake Systems

The driveline and brake system models in VDL include 3D-position and orientation as described in section 4.1.

Models of joints, shafts, differentials and

more resolve driveline effects in a detail suitable for
handling analysis.

Chassis

VDL also includes ideal and ba-

sic hydraulic brake systems and also allow inclusion

The Chassis package is further partitioned into sub-

of user-dened models based on any Mechanics inter-

packages for bodies, suspensions, wheels, etc. It con-

face from the Modelica Standard Library (MSL).

tains a set of typical chassis congurations that represent standard cars like compacts, sedans, and SUV:s.
In particular, there are models of different delities
with the same interface and it is thus possible to use
them with e.g. the same driveline and brake models.
This minimizes modeling effort.

3.6

3.11

Engines and Transmissions

The engine package contains map-based and MVEM
engine models and basic models of manual, automatic
and CVT transmissions. Again, the adaption of a rotational interface with 3D capabilities, user dened
models based on both the Rotational and the Multi-

Suspensions

Body interfaces in MSL can be adapted.

VDL includes a wide range of suspension models of
both independent, semi-independent, and rigid axle
types.

The delity level spans from planar models

with xed roll and pitch centers, to table-based and
geometric kinematic and elasto-kinematic models. As
described in section 5, there are full-edged kinematics and compliance (K&C) experiments of full suspensions as well as sub-components for analysis and
model reduction.

3.7

3.12

The Modelon Package

The Modelon Library contains classes that complements the MSL. The structure of the library follows
MSL whenever possible to facilitate navigation. Components that have a corresponding component in MSL
are in general modied/improved versions but with the
same basic functionality as the MSL version. The next
section highlights some of the contents.

Bodies

The Bodies package contains body models including
inertial and aerodynamic properties as well as anima-

4
4.1

Development key issues
Rotational3D

tion shape. Bodies can also conveniently be congured
There has been some development to describe the

for different payloads.

three-dimensional effects of components in the ro-

3.8

tational library such as coriolis forces [7] but there

Wheels and Tyres

was no satisfactory approach available for slightly

The main content of this package is the tyre models.

more complex components such as shafts with dif-

VDL includes a selection of well-known and com-

ferent joint geometries. To overcome this, a package

monly used tyre models for handling such as variants

Rotational3D was introduced with a composite inter-

of Magic Formula, Pacejka models, Rill models, and

face denition consisting of a 1D rotational ange re-

semi-empirical models based on brush-model mechan-

solved in a MultiBody frame.

ics. An advantage is that the partitioning of the models

rotations of the axle mounts to be separated for the

The Modelica Association

46

This allow the minor

Modelica 2006, September 4th  5th

The VehicleDynamics Library - Overview and Applications

Figure 4: State selection for a kinematic (left) and an
elasto-kinematic (right) double wishbone suspension
linkage.

Figure 3: Rotational3D package contents.

axle spin which allows a consistent interface to both
MSL.Rotational and MSL.MultiBody and a snapshot
of the library contents is seen in gure 3.

4.2

State Selection in Suspensions

Unlike many other tools, Dymola use symbolic manipulation to resolve kinematic constraints which essentially mean that for a linkage model without included elasticities, the number of states correspond to
the number of degrees of freedom that needs to be chosen with care. This is best illustrated with an example; consider the double wishbone linkage in gure 4.

Figure 5: If s would be chosen as state, it is difcult
to separate between wanted (left) and unwanted (right)
congurations. Chosing

 instead makes the congu-

rations unique.

The leftmost version is completely rigid and the ve
links used constrain ve of the original six degrees of
freedom and there are thus two states that needs to be

specify the only degree of freedom which can be set

selected. If Dymola is able to select the states by its

in either of the joint pairs. Using bushings instead of

own, there are at least four combinations that could

inner joints gives ten additional degrees of freedom,

come up but only two of these turn out to be reason-

i.e. eleven in total. However, since each of the pair

able. Having the state in the unsuspended body is not

of bushings have twelve potential states, 22 out of 24

reasonable for at least three reasons: First the numer-

have to be selected.

ical accuracy, if the vehicle is moved a considerable

The standard MultiBody library has been designed

distance from its reference position, the resolution of

with ease of use in mind [8] so the available mod-

the wheel travel would be low since it means subtract-

els have the state selection lumped for all degrees of

ing two large numbers from eachother. Secondly, since

freedom which in the above case only would allow the

the motion of the upright would be dened relative to

user to specify 12 of the 22 states and leaving the rest

the world frame which would mean that if the vehicle

for Dymola to gure out which works in some cases

would roll enough, the representation would be numer-

but not always. To overcome this issues, a set of joint

ically tough and eventually singular. The third reason

models were developed with advanced users in mind,

is common with having the state in the strut and allow

where each joint state candidate can be set indepen-

multiple solutions according to gure 5. For some sus-

dently of the others. Additionally, a body model with-

pension linkages, multiple solutions could also occur

out potential states was implemented, which enforces

when having the state selection in the joints but ex-

the possible states to be relative motion in joints. Also

perience has shown that this is far easier to deal with

the quaternion representation was disabled since it re-

simply by just supplying reasonable start values.

quire additional code and events for the dynamic state

As seen from the discussion above, the ability to

selection.

explicitly chose states is of signicant important and
it is not enough to be able to select all or no states in
a joint as illustrated by the elasto-kinematic linkage in
gure 4.

The kinematic linkage needs two states to

The Modelica Association

47

4.3

Signal Bus

Any complex modeling involving some kind of control
sooner or later run into the need to structure informa-

Modelica 2006, September 4th  5th

J. Andreasson, M. Gfvert
which allow efcient diagnosis. By introducing a debug mode with a cardinality variable, the bus model
can ensure that one and only one transmitter is connected to each signal and also replaced undened signals with dummies. In this way warnings can be given
if two or more transmitters try to send the same signal
to the bus, if a receiver tries to access a variable that is
not sent by a transmitter etc.

5

Library Usage

This section highlights some issues relating to the library usage.

5.1

Figure 6: Choice of protocol in a transmitter.

VDWorkbench

VDWorkbench is a user-writable area that is installed
tion exchange. More specically, the following desires
were identied: 1) Being able to predene a set of possible signals on the bus. 2) Being able to replace this
set. 3) Being able to have several sets at the same time.
4) Allowing efcient diagnosis for fault detection of
connections. 5) Allowing GUI support from the tool.
6) Being able to model the dynamics of the actual bus

together with the VehicleDynamics Library.
opened from the File|Libraries menu.

It is

In this area

users can work with examples and store their own
models and experiments. The structure of VDWorkbench is laid out to mimic the one in VehicleDynamics and users that produce a lot of custom models and
components are encouraged to continue this.

(e.g. delay). 7) No need to draw extra connections to

5.2

have components exchange signals with the bus.
The suggested implementation use the dynamic
name lookup using the

inner and outer constructs

that allow coupling of models throughout the hierarchy. The actual bus denition is built around a base
package denition containing a bus and a protocol and
this package is declared as a

replaceable type

in the receiver and transmitter models.
By this construction, a user can dene any own
protocol by extending the base package denition and
complement with the signal names that should be
available. When connecting a component to the bus
using a transmitter or a receiver component, the user
can select what of the predene protocols should be
used and there is also enough information for a tool
such as Dymola to actually display a list of the available signals in the selected protocol, see gure 6.

Summary Records

Many

standard

components

contain

a

Summary

record, indicated with an icon in the diagram layer.
There are different summary records for different
classes of components.

The summary record con-

tains variables that are of general interest for postsimulation analysis and plotting.

For example, the

summary record for a standard engine contains the
variables for engine speed, torque, and power.
Summary records are convenient to use in the
Variable Browser in the Simulation tab. By clicking
the Advanced button and entering summary in the
search lter the variable list is restricted to summary
records as illustrated in 7.

5.3

Custom Vehicles

Despite any bus denition, the actual signal ow

The library provides templates for building models of

remain complex and being able to support the user in

standard cars. Non-standard vehicles are built either

fault detection and debugging is crucial for efcient

directly from the component base classes.

usage. Since a general Modelica model is free from

possible to dene custom templates for non-standard

causalities, it occurs as systems of equations and thus

vehicles. The library contains a large number of com-

if a signal on the bus is not dened or dened more

ponents that can be used in the templates and it pos-

than once, the whole model will become singular and

sible for users to dene their own components to use

it is hard for a tool to give useable feedback on these

in templates. For example, parts like A-arms, bush-

types of errors.

ings, struts, links, gears etc. are available in the Sus-

It is also

The suggested construction allow multiple busses

pensions package for users that denes their own sus-

but require that there is only one set of signals per bus

pensions. Figure 8 shows the the implementation of a

The Modelica Association

48

Modelica 2006, September 4th  5th

The VehicleDynamics Library - Overview and Applications

Figure 7: An example of using a summary record.
Figure 9: Active stabilizers can be used to prevent rollinduced instability.
vehicle with autonomous corner modules (ACM), [9],
where each wheel is steered, cambered, suspended and
driven/braked individually.

5.6

Component Analysis

A vital part in any system design is a thorough understanding of the involved subsystems and an analysis of a full vehicle is often useless if the behavior
of involved subsystems is not sufciently understood.
To isolate component behavior and to avoid unnecessary computational cost, test rig experiments are great
aids.

In VDL they are designed, parameterized and

animated as real test rigs where applicable. To a test
rig, various controller can be attached to govern the
experiment and facilitate the test procedure. Figure 10
illustrates a typical K&C experiment with the corresponding user settings.
Figure 8: Custom vehicle design exemplied with the
ACM concept.

5.7

Wheels and Tyres

The tyres are critical components to determine the response of a road vehicle to driver inputs.

5.4

Tyres are

also infamously difcult to model and calibrate with

Migration

The ParsleConverter utility is used for migrating
models from the Parsle format used by CarSim into
VehicleDynamics Library. The utility can handle hierarchical Parsles that are split into multiple les as
well as at single-le Parsles. The ParsleConverter
is a stand-alone executable that is supplied with VDL.

experimental data. VDL include several of the most
well-known and established tyre models for handling
studies. It is important to understand the differences
between the different models, and to have full insight
into the properties of different data-sets for the model
parameterizations in order to correctly interpret experiment results on chassis.

To support the users in

this, VDL includes versatile test rigs where wheels and

5.5

Vehicle Control

tyres can be studied in isolation. The test rig in g-

A major area of application for VDL is vehicle control.
This example illustrates how active stabilizers that can
be used to enhance stability are incorporated in a VehicleDynamics model.

Figure 9 shows the response

ure 11 can be used to study quasi-static and dynamic
properties under combinations of sweeps and constant
levels of slip-angle, slip ratio, camber, load, and velocity.

of an evasive lane change performed by a closed loop
drivers for two full loaded vehicles, with and without
roll control.

The Modelica Association

49

Modelica 2006, September 4th  5th

J. Andreasson, M. Gfvert

Figure 10: K&C experiment (right) with user settings (left).

Figure 12: Vehicle mounted in a test rig.

ics, spring and damper settings and roll moment disFigure 11: Tyre test rig.

tributions. Additionally, it can for example be used to
analyze driveline motion and study joint angles, shaft

5.8

lengths, and other variables during various suspension-

Vehicle Analysis

travel scenarios to verify or tune the geometric design.
Vehicle analysis can be performed both on road using
a driver or robot to control the vehicle which allow
simulations to mimic real test procedures to generate
e.g. cornering characteristics diagram. Additionally,
there are also ideal models of e.g. drivelines that allow
precise wheel spin velocities or torques to be applied.
Additionally, just as for a component, the vehicle can
be constrained in different test rigs to generate various
kinds of measures that requires extensive laboratory
equipment to be performed in reality.
In gure 12 such an experiment is exemplied using a shaker rig. The model allow the level under each
wheel to be adjusted individually and depending on
the input used, this can be used to analyze chassis outof-plane characteristics such as roll and pitch dynam-

The Modelica Association

6

Ongoing and Future Extensions

This section enlightens some of the extensions of
the VDL that are ongoing and/or under consideration.

Two other Modelon libraries, PneuLib and

HyLib, opens up for incorporation of more detailed
hydraulics and pneumatic models.

Hydraulics mod-

els are relevant for especially brake systems but also
other hydraulic systems found in e.g. power steerings.
Pneumatics is highly relevant for the ongoing enhancement to also consider heavy vehicles, gure 13, both
for brake systems and air spring suspensions. For this
extension, exible elements are of increased impor-

50

Modelica 2006, September 4th  5th

The VehicleDynamics Library - Overview and Applications



Dynasim AB, for extensive support and enhancements of Dymola to form an optimal platform for
vehicle dynamics modeling and simulation. Particular thanks to President Dr. Hilding Elmqvist.

References
[1] J. Andreasson, A. Moller, and M. Otter.

Modeling

of a racing car with Modelicas MultiBody library. In
Proc. of the 1st Int. Modelica Workshop, Lund, October 2000. The Modelica Association and Lund University.
[2] S. Drogies and M. Bauer. Modeling Road Vehicle Dynamics with Modelica. In Proc. of the 1st Int. Modelica Workshop, Lund, October 2000. The Modelica

Figure 13: Tractor with semitrailer negotiating a turn.

Association and Lund University.
[3] B. Jacobson et al. Modelica usage in automotive problems at Chalmers.

In Proc. of the 1st Int. Modelica

Workshop, Lund, October 2000. The Modelica Association and Lund University.
[4] M. Tiller et al.

Detailed vehicle powertrain model-

ing in Modelica. In Proc. of the 1st Int. Intermational
Modelica Workshop, Lund, October 2000. The Modelica Association and Lund University.
[5] M. Dempsey et al. Coordinated automotive libraries
for vehicle system modelling. In Proc. of the 5th Int.
Modelica Conf., Wien, September 2006. The Modelica Association and arsenal research.
[6] J. Andreasson.

VehicleDynamics library.

In Proc.

of the 3rd Int. Modelica Conf., Linkoping, November

Figure 14: Cornering characteristics test of a Formula

2003. The Modelica Association and Linkoping Uni-

SAE chassis.

versity.
[7] C. Schweiger and M. Otter. Modelling 3D Mechanical Effects of 1D Powertrains.

tance and this is discussed in more detail in [10].

In Proc. of the 3rd

Int. Modelica Conf., Linkoping, November 2003. The

A racing extension is also considered, requiring

Modelica Association and Linkoping University.

mainly different types of suspensions and analyzes,
gure 14 shows a test run of a Formula SAE chassis.

[8] M. Otter, H. Elmqvist, and S.E. Mattson.
Modelica MultiBody library.

The new

In Proc. of the 3rd

Int. Modelica Conf., Linkoping, November 2003. The

Acknowledgements

Modelica Association and Linkoping University.
[9] S. Zetterstrom.

The development of the VehicleDynamics library has
included the generous support and encouragement of
many people and organizations.



ular Technology Conference, volume 3, pages 1856 

Especially, the au-

thors would like to thank:

Electromechanical steering, suspen-

sion, drive and brake modules. In Proc. of 56th Vehic1863. IEEE, 09 2002.
[10] N. Philipson. Leaf spring modeling. In Proc. of the

DLR, Oberpfaffenhofen, main author of the Modelica MultiBody library, in particular Prof. Mar-

5th Int. Modelica Conf., Wien, September 2006. The
Modelica Association and arsenal research.

tin Otter, for support and cooperation in realizing
a Modelica vehicle dynamics library



Royal Institute of Technology, Division of Vehicle Dynamics, Stockholm, Sweden, for generous
support in the realization of the library

The Modelica Association

51

Modelica 2006, September 4th  5th

J. Andreasson, M. Gfvert

The Modelica Association

52

Modelica 2006, September 4th  5th

Session 1c

Session 1c
Language, Tools and Algorithms 1

The Modelica Association

53

Modelica 2006, September 4th  5th

Session 1c

The Modelica Association

54

Modelica 2006, September 4th  5th

Modelica CVD - A Tool for Visualizing the Structure of Modelica Libraries

Modelica CDV
A Tool for Visualizing the Structure of Modelica Libraries
1

Martin Loeffler1, Michaela Huhn1, Christoph Richter2, Roland Kossel3
Technical University of Braunschweig, Institute for Programming and Reactive Systems, Germany
2
Technical University of Braunschweig, Institute for Thermodynamics, Germany
3
TLK-Thermo GmbH, Germany
m.loeffler@tu-bs.de, m.huhn@tu-bs.de, ch.richter@tu-bs.de, r.kossel@tlk-thermo.de

sustainability of the library might be in danger while
it should be improved by using object oriented
techniques. Having been in this situation gave us the
idea to develop a tool that helps to analyze the
structure of Modelica libraries. The developed tool,
Modelica CDV, enables the Modelica developer to
improve the structure of the developed library and
offers the user of the library a simple way to
understand its structure. The tool will be available as
freeware.

Abstract
The simulation language Modelica is an object
oriented language with all the advantages and
potential drawbacks that are characteristic for object
oriented programming languages. The reusability of
source code and the possibility to develop nicely
structured libraries using inheritance, aggregation
and polymorphism are two of the main advantages
object oriented languages have to offer. Although
there are good mechanisms given to structure
libraries, one of the drawbacks is that it can become
very hard to understand large libraries especially for
users who just want to use them to carry out
simulations without getting into all the details. The
presented work has the goal to provide an easy to use
tool that is capable of graphically visualizing the
structure of Modelica libraries and that therefore
enables the developer as well as the end user of
Modelica libraries to better control and understand
the structure of libraries.
Keywords: Object oriented modeling; visualization;
class diagram

1

2

To build and maintain models on the basis of
Modelica libraries the developer needs a clear and
detailed understanding not only of the library
elements but also of the object oriented structure of
the library and in particular of the relations among
the elements. The Modelica Association coordinates
the development of free libraries. There are for
example libraries available to simulate multi-body
systems, to model fuel cells and to model magnetic
actuators and drives. For more information about
available libraries see [1]. The structuring concepts
of
Modelica
like
multiple
inheritance,
polymorphism, aggregation, and composition are a
prerequisite for the compatibility and reuse of
submodels (for details see [2]). Consequently, they
considerably contribute to the efficiency and
conciseness of modeling in Modelica. However, if
the structuring concepts are used in combination in a
large library, the overall structure may become far
from trivial.
Modelica is based on a Cardelli type system [3] and
supports multiple inheritance. In difference to
nominal type systems like in Java [4], subclasses
cannot only be declared explicitely by a keyword
like extends, e.g. model A extends model B, but
also implicitly by the fact that a class extends the set
of public attributes of another class. For building a

Introduction

The object oriented character of Modelica is one of
its very important features. It enables the developer
to reuse code in a very efficient way, improves team
work in the design process of a library and helps the
user to easily exchange components in a simulation.
There are other advantages that could be added to
this list. But there also are drawbacks that almost
every Modelica developer and user knows from his
own experiences. A growing aggregation depth and
multiple inheritance can make a library almost
illegible. Tracking bugs, implementing new models
or changing existing models might become very
difficult for developers that are not completely
familiar with the library and its structure. The
The Modelica Association

Modelica Libraries

55

Modelica 2006, September 4th  5th

M. Loeffler, M. Huhn, C.C. Richter, R. Kossel

class when instantiating an object of the generic
resistor results in changing the base class of the
generic resistor. The advantage compared to the
other mechanisms is that the exchange of an object is
not only possible inside its container class.
The keyword redeclare cannot only be used for
exchanging objects. The expression redeclare
record extends GeometryData for example allows
the extension of the already existing record
GeometryData. Additional attributes can be
created easily that way.
Member variables (also called attributes) are typed.
They are either simple or complex. Complex
attributes representing associations between objects
further enhance the structuring concepts of Modelica
libraries. An association represents a dependency
relation between objects. Of particular interest are
aggregation and composition as two specific
associations that express whole/part relations. For
instance, a car can be modeled as composition of a
motor, wheels, etc. In Modelica, composition is
mainly used to assemble complex objects.
Composition, the stronger form, is most appropriate
in the context of physical objects where the
components are assigned to a unique compositum,
e.g. a motor object is part of a particular car.
Whether a complex attribute represents an
aggregation or composition is hardly to analyse
statically because it results from the context in which
the attributes will be used.
The structuring concepts of Modelica significantly
ease the work of a library developer but they
complicate the analysis of a library for the user.
Modelica libraries are stored in hierarchically
structured directories. The position of a file reflects
the affiliation of the classes stored in this file with
respect to a package, because directories represent
packages. Thus the structure of the repository
partially reflects the structure of the library.
Alternatively, all classes of a library can be stored
within one file. Then the affiliation to packages only
depends on the arrangement of the classes inside the
file.
For analyzing the object oriented structure of
Modelica libraries it is important to understand the
structure of the classes, objects and dependencies
among each other. Because the algorithms and
equations inside a class are less relevant for the
structure of the library, they are neglected in this
paper.
To summarize, Modelica provides a great variety of
structuring concepts that may be used in combination
and lead to complex library structures that are hardly
understandable on the basis of pure code review.

subtype this way, all public attributes of the desired
base class have to be implemented (using the same
names and types) manually. Hence, to reconstruct
the inheritance hierarchy within a library the
information about the explicitly stated extensions has
to be joined with the analysis on extensions
implicitly given by inclusion of public attributes.
Modelica provides powerful mechanisms for
polymorphism which are an essential device for
compositionality and exchangeability of submodels.
The first mechanism for polymorphism concerns
exchangeable objects, i.e. using the keyword
replaceable an exchangeable object is built as an
attribute of a class. When the class gets instantiated
the type of the object can be changed in the class
modifier. This way an element of a circuit (for
example a resistor) can easily be replaced by another
element (for example a capacitor).
The second mechanism for polymorphism is local
classes. A local class is used if one wants to replace
a number of objects within a complex model but all
replacements have to coincide on the type, e.g. in an
electric circuit several resistors may be replaced
under the condition that all of them belong to the
same resistor type. Technically, exchangeability is
achieved by declaring a local class as a parameter of
the model. The parameter is set to a concrete type
when instantiating the model and all submodels
(objects) that are derived from the local class within
the model are set to that concrete type.
The third and most complex mechanism for
polymorphism is variable inheritance. It is used for
modeling generic objects that can assume the shape
of all objects of a category.
model GenericResistor
replaceable model ResistorModel =
CeramicResistor extends Resistor;
protected
extends ResistorModel
end GenericResistor;
model Circuit
GenericResistor resistor(redeclare model
ResistorModel = SyntheticResistor);
end Circuit;

Figure 1: Modelica code example for variable
inheritance
Figure shows the implementation of a generic
resistor using variable inheritance. The generic
resistor is derived from the exchangeable local class
ResistorModel. Changing the type of the local
The Modelica Association

56

Modelica 2006, September 4th  5th

Modelica CVD - A Tool for Visualizing the Structure of Modelica Libraries

3

to represent the affiliation to packages. If the classes
are stored in several files, there needs to be a file
package.mo in each folder declaring the package.
All other classes declared in files within this folder
or in sub-folders belong to this package. The parser
takes the path of the folder that contains the library
as an input and checks, whether a file package.mo
exists in the specified path. The parser will then read
in the package.mo and all dependent files in the
same folder and will register the package affiliation
for each file read in. This process is repeated for
each subfolder containing a package.mo. If there is
only one file containing the whole library, the
content of this file can be read in without analyzing
the package affiliation.

Parsing

Parsing is the transformation of text files into an
internal data representation. Most of the Modelica
parsers are used in commercial applications and are
not available for developers. However, there are
some free parsers available. An example is
ModelicaXML that parses Modelica code to an XML
representation [5]. We still did not use one of the
free parsers to be as independent as possible. The
parser that was developed within the scope of this
work only parses information that is required for an
object-oriented analysis of the library but could
easily be extended to parse more information.
In our application the goal of parsing is the creation
of an internal data structure that contains all
information of a Modelica library that is required for
drawing a class diagram. Therefore every class of a
library will be represented by an object containing
the following information
 name and type (i.e. package, model,)
 path of the text file that contains the class
 code
 local classes
 all attributes (member variables)
 all associations (inheritance, aggregation)
 version of the class (if specified)
 package(s) the class belongs to
The process of parsing a Modelica library can be
decomposed into the following steps
 read in the code
 format the code
 detect classes
 detect attributes of classes
 detect associations
 analyze redeclarations
 perform name lookup
 analyze dependencies caused by Cardelli type
system
The steps have to be performed in the given order
due to their interdependence. Detecting associations
for example cannot be performed before all classes
have been detected.
The following passage explains the parser in more
detail.
Reading in a Modelica library starts with reading in
the required text files. There are in general two ways
to store Modelica libraries: all classes and packages
of a library can be stored in one file or they can be
split up into different files that are nested in folders
The Modelica Association

Figure 2: Example for formatting process during
parsing
The entire library is internally available as a
character string after this first step. The parser
formats the code in a second step carrying out the
following operations:
 word-wraps get removed
 superfluous space characters get removed
 annotations other than version information
get
removed
(i.e.
annotations
for
documentation, icon information)
This second step simplifies the following process by
transforming the unformatted string into a well
formatted character string containing only the
information necessary to perform an object-oriented
analysis. Figure 2 shows an example for the
formatting process.
The next step is to detect all classes and to create
objects representing them. This step requires
considering the nested structure of classes in
Modelica. Classes are detected recursively starting at
the top level. The beginning and the end of a class is
detected on the base of keywords. If a class has been
57

Modelica 2006, September 4th  5th

M. Loeffler, M. Huhn, C.C. Richter, R. Kossel

will later be displayed as derived from
GeometryData.
All information collected until now is represented as
character strings. As mentioned earlier, it is very
often necessary to have a link to an object
representing a certain class. The already described
situation of inheritance is a very good example in
which all attributes of the super class have to be
copied to the derived class. If there is a definition
like model GasCar extends Car the parser has to
resolve the class Car. The problem arising here is
that there might be several classes with the name
Car within the analyzed library because Modelica
allows different classes having the same name. Name
lookup ensures that the correct class is used within
the given context. In general all classes within the
package containing the class whose name has to be
resolved are possible choices. It is also possible to
give a bit more specific information when extending
a class. One could for example write model GasCar
extends Basics.Car Basics is in this case the
package that the class Car belongs to. Another
important case to be considered is the import
statement. With this keyword, namespaces can be
defined or used. If there is a definition like import
myCar = Basics.Car the name lookup has to be
performed with Basics.Car instead of myCar.
It is also possible to use short notations such as
package C = B; in Modelica. In this case all
classes of package B get duplicated and copied
into package C. The declaration can be interpreted
as equivalent to its long form package C extends
B. The associations of a class are stored inside the
representing object. Thereby associations from and
to another class are available.
Modelica uses the Cardelli type system which is a
structural type system. Many other object oriented
languages such as Java use a nominal type system
(see [3] for more information). There has been a
discussion within the Modelica language group to
change the Modelica type system in a future version
but no decision has been made so far. To analyze
type equivalence of classes or to find subtypes of a
class it is necessary to compare all public attributes
of each class. If two classes have the same public
attributes they are type equivalent within the scope
of a Cardelli type system. If they have at minimum
the same public attributes the class with more public
attributes is a subtype of the other class. When there
is a large number of classes with many attributes,
comparing all of them with each other can take quite
some time.

found, an object with all necessary attributes for its
representation is generated. Not all attributes of the
represented object can be generated at this time
because some information (associations, member
variables) is not yet available. The name of the class,
its source code, comments and information about its
package affiliation are stored. The code of a nested
Modelica class is not stored within the containing
class if it is not a local class. Local classes are for
example used for polymorphism. The model
ResistorModel from Figure 1 is a local class.
Detecting attributes of each class includes detecting
the type and the name of each attribute as well as its
default value and the comment if specified. Start
values and further attributes such as min and max
values are omitted but could be included in a future
version.
The keyword extends defines inheritance in
Modelica. A derived class inherits all attributes from
its super class, implying that all attributes of the
super class have to be copied into the derived class
However, this is not possible at that point because all
classes are represented by an object but thery are not
linked to each other. This means that copying the
attributes from super to derived classes has to be
perfomed after the name lookup. If an attribute is not
primitive it is handled as aggregation.

Figure 3: Modelica code example for redeclaration
The keyword redeclare indicates in Modelica that
the type of the object can be changed. Figure 3
shows the extension of a record GeometryData
within the package Cylinder GeometryData is
extended by the attribute diameter. If the class
GeometryData from Cylinder is used
somewhere, it contains the attribute diameter. The
parser handles this just like inheritance. A new class
is internally generated that contains all attributes
from GeometryData plus the attribute diameter.
This class belongs to the package Cylinder and

The Modelica Association

58

Modelica 2006, September 4th  5th

Modelica CVD - A Tool for Visualizing the Structure of Modelica Libraries

small but it might contain a lot of crossing edges.
Moreover, runtime of the Spring Embedder may
become a critical issue.
The third group of algorithms minimizes the set of
crossing edges.
The Spring Embedder and the algorithm for
minimizing crossing edges do not care about the
direction of edges and the right adjustment of classes
that inherit from another. Each algorithm has its
advantages and drawbacks. In order to get a good
layout, it is necessary to use two algorithms in
combination.
Modelica CDV generates a class diagram closely
related to the UML notation (see [6]). The most
important elements, the classes, are represented by
rectangular boxes containing the name, the attributes
and the operations. Here we will omit the operations,
i.e. equations and algorithms of a model.
The layout module in Modelica CDV is still subject
of discussions and experiments as the advantages
and disadvantages of different variants have to be
balanced carefully.
A class diagram is considered as a directed graph
where a node represents a class and an edge
represents an association, i.e. inheritance or
aggregation.
For a good layout of a Modelica library several
partially contradicting criteria have to be taken into
account.
Usually, derived classes are placed below their super
class. Consequently, the algorithm tries to do this the
same way. Another optimization criterion is a short
distance between classes having a relation since one
often needs to look at the associated classes as a
whole to understand the aggregation or inheritance
structure. Hence, minimizing the distance improves
readability. But when minimizing the distance
between nodes one also decreases the area on which
classes are placed. Unfortunately, in larger diagrams
with a lot of complex associations you often will not
see the end of an association without changing the
point of view. Additionally, crossing edges are
complicating readability. To simplify the detection
of crossing edges, associations are restricted to
horizontal and vertical straight lines.

After all parsing steps have been performed the
internal data representation is available and can be
used for displaying the object oriented structure of
the library in the style of a UML class diagram (see
[6]).

4

Layout

For the automated graphical representation of the
structure of Modelica libraries, the selection and
tuning of the layout algorithm is crucial. Thus, we
consider three types of layout algorithms for drawing
the object oriented structure of Modelica libraries.
Layout algorithms rely on graph theory. The object
oriented structure of libraries is interpreted as a
directed graph where a node represents a class and
an edge represents an inheritance relationship or
aggregation. The selected layout algorithms optimize
the graphical representation according to the
following goals:
 Minimization of the area used for the resulting
chart because libraries can be large.
 Minimization of the number of crossing edges
supports the understanding and conceives the
diagram. If there is no crossing edge the graph
is called planar. The direction of edges is also
an important fact: A class that inherits from
another should be placed below the class it
inherits from.
 Computational efficiency is important so that
even for large libraries the class diagrams are
generated in an acceptable time.
The first group of layout algorithms relevant for the
representation of structural information is the group
of the so-called tree algorithms [7] which are
available in many variations. They are especially
suited to illustrate the inheritance relationships of
classes while their runtime is linear. A class is
represented by a node and all derived subclasses
become children of this node. However, tree
algorithms are less appropriate for the layout of
aggregation relationships since the generated trees
can become wide and might need a large area.
Another way to layout graphs is the Spring
Embedder [8].The graph represents a physical
model where nodes repulse each other. The closer
two independent nodes get, the larger the mutual
force of repulsion becomes. Nodes also gravitate
towards each other in case of a common edge. This
algorithm works iteratively. All forces are calculated
and the nodes are relocated according to the affecting
forces. After a certain number of iterations all forces
will be balanced. The size of the resulting chart is
The Modelica Association

59

Modelica 2006, September 4th  5th

M. Loeffler, M. Huhn, C.C. Richter, R. Kossel

B

another one otherwise. The width of the class
representation results from the longest word that has
to be displayed inside a class. For inheritance
associations a hyper edge notation is used (see
Figure 4). Aggregation associations are characterized
by their multiplicity. Therefore an inscription would
be needed which might be misleading at the hyper
edge. For this reason aggregation is displayed as
distinct edges.

A

A

C
distinct

B

C

hyper edge

Figure 4: Edge notation for inheritance
After several experiments we decided that the user
should direct the layout to his point of interest: Thus,
the user may select the elements of a class he wants
to see. This way, the user may choose the level of
detail he is interested in. If detailed information is
faded out, the user will see more classes and
associations on the screen.
The size of a class is calculated dynamically before
the layout algorithm starts. The size of classes
depends on the settings given by the user. Specifying
that additional attributes should be shown in the
diagram will change the dimension of classes. Every
time settings are modified all calculations have to be
repeated because the algorithm calculates the
absolute position of every class on the panel. If a
class becomes larger it probably would overlap with

Figure 6: Swapping leaves for minimizing crossing
edges
The algorithm for lay outing the classes first
calculates the size of every class. Thereafter
inheritance associations are analysed and layouted by
a tree algorithm from bottom to top and the
dimension of the resulting tree is calculated.
The algorithm for adding aggregation associations is
still under investigation. After all aggregation
associations have been added a swap procedure will

Figure 5: Screenshot of the Modelica Class Diagram Visualizer
The Modelica Association

60

Modelica 2006, September 4th  5th

Modelica CVD - A Tool for Visualizing the Structure of Modelica Libraries

seconds. The user just has to be aware that he is
using a pre-computed version of the library when
using the saved version. A warning is displayed to
remind the user of the current operation status.

remove crossing edges by swapping some leaves
(inherited classes) of a tree or the trees itself (see
Figure 6). Now nails for the associations will be
calculated and all elements will be displayed. The
algorithm for swapping and rearranging the leaves
(classes) is still in a prototype state at the moment.

5

Using Modelica CDV

The purpose of Modelica CDV is to help the
Modelica user as well as the Modelica developer
with getting an overview over the structure of
libraries.
The graphical user interface that was completely
developed in Java using Swing [9] can be configured
to best suite the users preferences. The user may
select color and font for each type of class and also
choose to display or hide additional information that
is usually not displayed in a class diagram but might
be handy when analyzing libraries. Figure 7 shows a
screenshot of the current configuration dialog. The
user can decide to display parameters, constants and
variables for both, the public and the protected
section, in the class diagram.
Figure 5 shows a screenshot of a class diagram
generated by Modelica CDV. The package Blocks
from the Modelica Standard Library 2.2 was parsed
and displayed for this example. Note that only the
inheritance associations are displayed in the example
screenshot. The different class types such as blocks
(i.e. LogicalSwitch) or models (i.e. And) are
discriminated by their graphical appearance both in
shape and color and according to the users settings.
Information about the variables contained in each
class is also displayed. The final version of Modelica
CDV will also display connectors as small icons.
The package tree containing all classes of the parsed
library is displayed on the left hand side of the class
diagram as shown in Figure 5. When selecting a
class with the mouse the respective block in the class
diagram on the right hand side is highlighted and
centered.
An important aspect when using Modelica CDV is
the time it takes to parse, layout and display a
library. The Modelica Standard Library in the
version 2.2 containing about 2500 classes was parsed
as a representative example which took about two
minutes on a standard laptop computer. While the
Modelica Standard Library is very likely much larger
than most libraries that will be displayed with
Modelica CDV, two minutes still is too long. The
user can therefore choose to save the parsed library
which cuts down the time requirements to a few
The Modelica Association

Figure 7: Screenshot of the option dialog in
Modelica CDV

6

Conclusions

Modelica CDV is a tool to help Modelica developers
and users to better understand the structure of
libraries by generating class diagrams closely related
to the UML notation. It uses a combination of
different layout algorithms to automatically generate
a class diagram that is as readable as possible. In the
class diagram additional information (i.e. about
variables) may be displayed and it can be configured
according to the users preferences.
Visualizing the structure of libraries is the first step
towards improving the readability which ensures its
sustainability. The developed tool is available as
freeware to the Modelica community. The current
version only parses and displays information that is
required for an object-oriented analysis. Additional
61

Modelica 2006, September 4th  5th

M. Loeffler, M. Huhn, C.C. Richter, R. Kossel

information about equations and algorithms and
enhanced analysis that might be of interest is
currently neglected but might be included in a future
version.

References
[1]

[2]

[3]

[4]
[5]

[6]

[7]

[8]

[9]

Modelica  Modeling of Complex Physical
Systems,
Modelica
Libraries,
http://www.modelica.org/library/
ModelicaAssociation, 2005, Modelica  A
Unified Object-Oriented Language for
Physical Systems Modeling, Language
Specifications, Version 2.2
A.B. Tucker (Ed.), The Computer Science
and Engineering Handbook, CRC Press,
1997
B. Eckel, Thinking in Java, 4th Edition,
Prentice Hall, 2002
A Pop and P. Fritzon, 2004, ModelicaXML:
A Modelca XML Representation with
Application, Proc. of 4th International
Modelica Conference, Hamburg, Germany
M. Jeckle, C. Rupp, J. Hahn, Barbara
Zengler, S. Queins, UML 2 glasklar, Hanser
Verlag Mnchen, Wien, 2004
M.Kaufmann, D. Wagner, Drawing Graphs
 Methods and Models, Springer Verlag,
2001
Guiseppe Di Battista, Peter Eades, Roberto
Tamassia und Ioannis G. Tollis, Graph
Drawing  Algorithms for the Visualization
of Graphs, Prentice Hall, 1999
Sun Microsystems, Java Foundation Classes,
http://java.sun.com/products/jfc/

The Modelica Association

62

Modelica 2006, September 4th  5th

Advanced Modeling and Simulation Techniques in MOSILAB: A System Development Case Study

Advanced modeling and simulation techniques in MOSILAB:
A system development case study
Christoph Nytsch-Geusen1
Thilo Ernst1
Andr Nordwig1
2
Peter Schwarz
Peter Schneider2
Matthias Vetter3
Christof Wittwer3
4
Andreas Holm
Thierry Nouidui4
Jrgen Leopold5
Gerhard Schmidt5
6
Alexander Mattes
1

Fraunhofer Institute for Computer Architecture and Software Technology
Kekulstr. 7, D-12489 Berlin, christoph.nytsch@first.fhg.de

Fraunhofer IIS/EAS2, Fraunhofer ISE3, Fraunhofer IBP4, Fraunhofer IWU5, Fraunhofer IPK6

1

solar energy plant model, a building model, a model
for the control strategy and an environment model
for the climate parameters (see Figure 1).

Abstract

The design and the optimization of complex technical systems can be supported efficiently by using
simulation methods and tools. For this reason, the
generic simulation tool MOSILAB (Modeling and
Simulation Laboratory) is being developed by a consortium of six Fraunhofer institutes in the GENSIM
project. For the modeling process, MOSILAB uses
the object- and equation-oriented model description
language Modelica, with a backwards-compatible
extension to incorporate elements for describing
model structure dynamics [1].
In this article we will use illustrate how MOSILABs
advanced modeling and simulation techniques support the user, with the help of two case studies: a
complex energy system and a cutting tool system.
Thus, the case studies illustrates very different uses
MOSILAB.

2

Figure 1: Energy system for solar heating system
The solar energy plant model consists of a primary
solar cycle with the collector field, the solar pump
and some tubes. The solar energy is transferred by a
counterflow heat exchanger to the secondary storage
cycle, where a storage pump loads the thermal storage. A discrete two-point controller switches on both
mentioned pumps, if the temperature difference between the collector output is higher than the fluid
temperature in the lowest point of the storage. The
other side of the storage provides the building model
with heating energy by a heating cycle. A continuous
controller regulates the mass flow between zero and
a maximum value, subject to the difference of the
current room temperature and the set room temperature. An auxiliary heater delivers additional thermal
energy, if the set flow temperature isnt achieved by
the storage output temperature.

Case studies
2.1

Complex energy system

The case study of a solar heating system will demonstrate MOSILABs advanced modeling and simulation techniques, such as model-based development,
model structure dynamics, external simulator coupling, or the distributed execution of simulation experiments. The considered system model includes a
The Modelica Association

63

Modelica 2006, September 4th-5th,2006

C. Nytsch-Geusen, T. Ernst, A. Nordwig, P. Schwarz, P. Schneider, M. Vetter, C. Wittwer, A. Holm, T. Nouidui, J.
Leopold, G. Schmidt, A. Mattes

2.2

der to the traditional component diagrams (compare
Figure 2), which give overviews about the structures
of the plant- or sub-models, further UMLH - diagram
types are available. The class diagrams are used to
organize classes and their relationships in libraries.
Statechart diagrams can be used to model reactive
behaviour of components, e.g. the drivers for model
structural dynamics. An integrated meta-model ensures model consistency for all diagram types [8].
Thus, the behaviour of a solar thermal plant during
normal operation or in different unscheduled states
can be represented in an integrated state-dependent
structure variable model. Unscheduled states could
be the plant behaviour whilst damaged pumps or
self-activated pressure control valves, when the solar
collector becomes overheated.

Cutting tool system

At present high performance and high precision cutting tools often are designed as modular systems
with a complex mechanical behavior. Static and dynamic tool deformations or deflections affect the reliability of the technological process as well as the
quality of the workpiece. Tool designers need convenient modeling techniques to predict the tool behavior under working conditions in order to optimize
the tool design. Simulation can also help users to
choice the most suitable tool and to optimize the cutting conditions.

Figure 2: Coupling of FEM-simulators and MOSILAB for cutting tool systems
In the case study of a machining tool, MOSILAB is
coupled with two external domain-specific FEM (Finite-Element-Methods) simulators. To simulate the
behaviour of high performance cutting machine
tools, the machining processes are considered to determine the loading conditions, the tool deformation,
the cutting edge displacement and possible malfunctions caused by overloads. Non-linear effects at interfaces between components of a modular cutting
tool are also included.
The mechanical and thermal tool loads undergo
changes while complex workpiece geometries are
machined e.g. dies and molds. Detailed knowledge
of the occurring forces and temperatures caused by
the chip building for any section of the tool path enables an adjustment of the process parameters to the
specific cutting conditions. Thus, the feed rate is optimized by using FEM and analytically based simulation approaches.
This coupled consideration of tool loading and the
corresponding tool behaviour enables the choice of
the most suitable tool, an estimation of the workpiece quality and provides significant improvements
in the efficiency of machining operations.

3

Figure 2: Solar heating system as component Diagram in the MOSILAB-IDE
To support a gap-free model-based development
process, a code generator plug-in can be used to produce native embedded system code for controller
relevant sub-models.
With this feature, a newly designed controller algorithm can be tested in combination with the virtual
model of the controlled system. After successful testing, the same controller algorithm can work on the
real controller hardware.
Technically, the description of such controller models uses Modelicas block and algorithm concepts.
Each block implementation can be automatically
transformed into controller code for the target operating system. The approach was tested on the embedded Linux derivate BOSS [2].

Model-based development with the
4
MOSILAB-IDE

Using model structural dynamics [1], MOSILAB is
able to adapt the model description, depending on
the model state. One example of MOSILABs flexi-

An integrated development environment offers users
support at every step of the simulation  from model
building to simulation to post-processing [6]. In orThe Modelica Association

Use of model structural dynamics

64

Modelica 2006, September 4th-5th,2006

Advanced Modeling and Simulation Techniques in MOSILAB: A System Development Case Study

bility is its capability to switch between simulation
models varying in local resolution. We have chosen
the application of a 1D-thermal storage model, embedded in the solar heating system model to illustrate
this advantage.
During periods of low collector temperatures or
when the storage pump is off, the thermal stratification in the storage can be calculated sufficiently with
few numerical nodes (n_zones = 4). When hot water
enters the storage, it is necessary to use a storage
model with substantially more numerical nodes for
the thermal gradient calculation (n_zones = 12, compare Figure 3).

The first equation in the equation-section is true,
if the difference of the collector temperature and the
temperature in the lowest storage zone exceeds 3 K
(and the solar pump is on). Then the storage model
has to switch from 4 to 12 zones for a better reproduction of the thermal gradient.
The following code illustrates that only the static
connect-equations are available in the equation-section. All dynamic connects between the
storage model and its surrounding components are
not closed:
// controller solar and storage cycle
collector.out.T = controller_solar.in1;
pump_storage.in.T = controller_solar.in2;
pump_solar.alpha = controller_solar.out;
pump_storage.alpha = controller_solar.out;
// controller heating cycle
building.T_air = controller_heating.in2;
273.15 + 20.0 = controller_heating.in1;
pump_heating.alpha = controller_heating.out;
...
// solar circle:
connect(collector.out, tube1.in);
connect(tube1.out, heat_exchanger.in1);
connect(heat_exchanger.out1, tube2.in);
connect(tube2.out, pump_solar.in);
connect(pump_solar.out, collector.in);
// storage solar circle:
// no static connect between
// heat_exchanger.out2 and storage.in_supply1
// no static connect between
// storage.out_supply1 and pump_storage.in
connect(pump_storage.out,heat_exchanger.in2);
// heating circle:
// no static connect between
// storage.out_load_1 and heater.in
connect(heater.out, tube3.in);
connect(tube3.out, building.in);
connect(building.out, tube4.in);
connect(tube4.out, pump_heating.in);
// no static connect between
// pump_heating.out and storage.in_load1
...

Figure 3: Structural variable storage model, which
uses a different number of zones in dependency of
the current thermal layering.
The following code fragments of the system model
show the implemented strategy for switching between both models. The first part includes the declaration of the component models.
model SolarHeatingSystem
...
ThermalCollectorDynamic collector(...);
Pump pump_solar(...), pump_storage(...),
pump_heating(...);
Tube tube1(...), tube2(...), tube3(...),
tube4(...);
HeatExchangerCounterflow heat_exchanger(...);
TwoPointController controller_solar(...);
TanhController controller_heating(...);
FlowHeater heater(...);
ThermalBuildingHeatEx building(...);
dynamic Storage storage, tempStorage;
event Boolean finer(start=false);

In the statechart-section, which is responsible
for the model structure dynamics, the states of the
system model (startState, lowResolution, highResolution) are declared and the transitions between the
states (startState -> lowResolution, lowResolution ->
highResolution) are modelled:
statechart
state SolarHeatingSystemBasic
extends State;
State lowResolution, highResolution;
State startState(isInitial = true);

The dynamic parts of the system model are marked
with the prefix dynamic, in our use case the storage
model. Further, the Boolean-variable finer has the
prefix event, which is needed to trigger the replacement from the coarser to the finer storage
model.

entry action
storage := new Storage(n_zones = 4,
volume = 30.0,
...);
end entry;

equation
finer = pre(finer) or
collector.out.T-pump_storage.in.T > 3.0
and controller_solar.out > 0;

The Modelica Association

65

Modelica 2006, September 4th-5th,2006

C. Nytsch-Geusen, T. Ernst, A. Nordwig, P. Schwarz, P. Schneider, M. Vetter, C. Wittwer, A. Holm, T. Nouidui, J.
Leopold, G. Schmidt, A. Mattes
end transition;
end SolarHeatingSystem_SC;
end SolarHeatingSystem;

At the beginning of the simulation experiment
(startState -> lowResolution) the storage model is
added to the system model and the connections of
the storage model to its surrounding components are
closed.

The simulation experiment with MOSILAB for this
system model for a summer day is shown in Figure
4. The diagram shows the implemented behaviour.
During the morning hours, the solar controller
switches the pumps on first (third curve). Two hours
later the temperature between the collector output
and the temperature in the lowest layer of the storage
is greater than 3 K. (This temperature is equal to the
input temperature of the storage pump.) As a result,
MOSILAB exchanges the coarse storage model with
the higher-resolution model (n_zones = 4 -> n_zones
= 12, fourth curve).

transition startState -> lowResolution
add(storage);
connect(heat_exchanger.out2,
storage.in_supply1);
connect(storage.out_supply1,
pump_storage.in);
connect(storage.out_load1, heater.in);
connect(pump_heating.out,
storage.in_load1);
end transition;

If the transition lowResolution -> highResolution is
triggered by the variable finer during the simulation
experiment, the connections from the storage model
are cut by using disconnect(a.p,b.p) and the old
storage model is removed.
transition lowResolution -> highResolution
event finer action
disconnect(heat_exchanger.out2,
storage.in_supply1);
disconnect(storage.out_supply1,
pump_storage.in);
disconnect(storage.out_load1, heater.in);
disconnect(pump_heating.out,
storage.in_load1);
remove(storage);

Figure 4: Simulation experiment for a summer day:
MOSILAB switches to the detailed model, when hot
water enters the storage model and its thermal gradient has to be recalculated in a finer resolution.

Now a new storage model is instantiated with new in
a higher resolution (n_zones = 12). The start values
of the new storage model are determined from the
current state of the old storage model:
tempStorage := new Storage(n_zones = 12,
volume = 30.0,
...):
tempStorage.content.T_zone[1] :=
storage.content.T_zone[1];
tempStorage.content.T_zone[2] :=
storage.content.T_zone[1];
tempStorage.content.T_zone[3] :=
storage.content.T_zone[1];
tempStorage.content.T_zone[4] :=
storage.content.T_zone[2];
...
tempStorage.content.T_zone[10] :=
storage.content.T_zone[4];
...

5

Building on the MOSILAB platform, reusable components for simulator coupling have been developed
within the GENSIM project. The components support integration with standard tools, such as MATLAB/Simulink or FEMLAB/COMSOL Multiphysics
and also domain-specific FEM-Tools such as MARC
and DEFORM. This represents a departure from and
an improvement upon the typical separate handling
of system simulation and FEM (Finite Element
Method) simulation.

Then the new storage model substitutes the old
model, must be added to the system model and the
connection to its adequate components are closed
again.

5.1

storage := tempStorage;
add(storage);
connect(heat_exchanger.out2,
storage.in_supply1);
connect(storage.out_supply1,
pump_storage.in);
connect(storage.out_load1, heater.in);
connect(pump_heating.out,
storage.in_load1);

The Modelica Association

Numerical coupling with external
simulators

MATLAB/Simulink

MOSILAB offers an optional generic interface for
MATLAB/Simulink [3]. Thus, it is possible to develop control strategies for embedded systems within
MATLAB/Simulink and combine them with a
Modelica model of the mixed-continuous discrete
system environment. In this scenario each sub66

Modelica 2006, September 4th-5th,2006

Advanced Modeling and Simulation Techniques in MOSILAB: A System Development Case Study
pump_storage.alpha = ctrl_solar.outp[1];

system is modelled in with the appropriate modelling
paradigm within adequate simulation engineering
tools.
For a smooth integration of both modelling views, a
proxy object is introduced in each view. Within a
view, the proxy object represents the wrapped simulator which is realized in the other view. This leads
to symmetric model perspectives, which are close to
the mental model of the engineer.
In MATLAB/Simulink a generic MOSILAB proxy
model can be imported and parameterized via the
block parameter dialog. (Compare with Figure 5.)

// solar cycle:
connect(collector.out, tube1.in);
connect(tube1.out, heatexchanger.in1);
connect(heat_exchanger.out1, tube2.in);
connect(tube2.out,pump_solar.in);
connect(pump_solar.out,collector.in);
// storage solar cycle:
connect(heatexchanger.out2,storage.in_supply1);
connect(storage.out_supply1,pump_storage.in);
connect(pump_storage.out,heat_exchanger.in2);
...
end SolarHeatingSystems;

In this configuration the simulation is driven by
MATLAB/Simulink as the master simulator. Figure
6 illustrates a coupled simulation experiment for the
solar heating system during a simulation period of
one week in spring. The top screen shows the output
signal of the discrete controller, calculated in MATLAB/Simulink. This signal switches the solar pump
depending on the temperature difference between the
collector output temperature and the temperature in
lowest level within the water storage.

Figure 5: Simulink with an embedded MOSILABmodel
The controlled system model itself (in the case study,
the solar energy plant and the building model) is developed using MOSILAB and will be associated
with this proxy model, which is shown in the following code fragment:
block RemoteModel
constant Boolean isRemoteModel=true;
parameter Integer nInp, nOutp;
input Real inp[nInp];
output Real outp[nOutp];
end RemoteModel;

The constant isRemoteModel indicates the presence
of a further simulator/driver behind this model. Thus,
the numeric algorithms can handle the input and output vectors correctly. The number of input and output variables can be given by nInp and nOutp. The
vectors itself are given by inp and outp.
The following code illustrates the direct use of this
generic remote interface within a Modelica model:
model SolarHeatingSystem
ThermalCollectorDynamic collector
Pump pump_solar(...);
StorageSimple storage(...);
...
// the Simulink interface model
RemoteModel ctrl_solar(nInp=2, nOutp=1);
...
equation
...
// controller solar cycle
collector.port_out.T = ctrl_solar.inp[1];
storage.content.T_zone[4] = ctrl_solar.inp[2];
pump_solar.alpha = ctrl_solar.outp[1];

The Modelica Association

Figure 6: Coupled simulation of MOSILAB with
MATLAB/Simulink.

67

Modelica 2006, September 4th-5th,2006

C. Nytsch-Geusen, T. Ernst, A. Nordwig, P. Schwarz, P. Schneider, M. Vetter, C. Wittwer, A. Holm, T. Nouidui, J.
Leopold, G. Schmidt, A. Mattes

The bottom screen illustrates the dynamic behaviour
of the controlled system, calculated in MOSILAB,
for the same time period. The curves represent both
state variables, which are the input signals of the
controller (collector output and storage temperature).
5.2

5.3

The finite element code MARC can be used to model
complex nonlinear mechanical and thermomechanical structures such as machining tools consisting of different components with contact and friction problems. Thus, it is possible to simulate complex system behavior which cannot be adequately
described by analytical functions. For example, nonlinear load dependent contact behavior between tool
components may results in non-linear tool deformations which require an expensive finite element
analysis (FEA). Because of long computing times
with FEA the coupling between MOSILAB and
MARC will be off-line in most cases. For that purpose a special interface has been developed. The
coupling of MOSILAB with MARC will enable to
opt between analytical models for relatively simple
cutting tools or the more complex FEM-models. That
way it is possible to optimize the accuracy of the
description of the tool behavior and the expense of
the calculations.
Finite element analyses will run outside of MOSILAB and the input and output streams to respectively
from the MOSILAB databases will be realized by
readData() and writeData() commands. Using that
interface it will also be possible to use predefined
FEM-models from a tool model library without special knowledge of finite element modeling.
The loading conditions required by analytical or finite element analyses are provided by the simulation
of the cutting process (see chapter 5.4).

FEMLAB/COMSOL Multiphysics

One other aspect within the project was the development of a numeric coupling between the simulators MOSILAB and FEMLAB [4]. For simulator
couplings which incorporate FEMLAB, two basic
principles exist:
1.
Coupling within the MATLAB Framework 
here the MATLAB engine is used in a Cprogram or a dedicated coupling model is implemented based on the MEX-interface.
2.
FEMLAB is used as a stand-alone simulator 
within FEMLAB Java-API models can be
loaded, the simulation can be controlled, and
the data exchange can be organized.
The second principle is used for this implementation.
Figure 7 illustrates the basic structure of the coupling.

Figure 7: Numerical coupling between MOSILAB
and FEMLB/ COMSOL Multiphysics
The communication between the two sides is handled by TCP/IP sockets. This extends the usage of
the simulator coupling for a distributed computer
environment. Due to a lean coupling implementation,
the communication time for the data exchange is
much shorter than the simulation time for simple
FEM-models. This allows an effective simulation
including realistic transient boundary conditions
even in combination with models requiring small
simulation time steps.
Hence, simulator coupling is suitable for a wide
range of applications. This enables the analysis of
control systems with a detailed consideration of the
controlled process. Furthermore, components in a
complex system can be analysed in detail using the
MOSILAB-FEMLAB environment, e.g. the multidimensional flow within the heat storage as a part of
a solar heating system.

The Modelica Association

MARC

5.4

DEFORM

Originally developed for metal forming processes,
the FEM-tool DEFORM is also suited for simulation
of the chip formation during the machining process.
DEFORM is advantageous for an efficient handling
of the mesh distortion, which is caused by the high
strains within the chip formation zone. Through the
remeshing function it is possible to generate a new
mesh and to transfer the interpolated values for each
node. Thereby the program is able to simulate the
mechanical and thermo-mechanical behavior.
In addition, a simplified and fast model for the chip
building process in Modelica was developed, which
is based on analytical equations (e.g. cutting force
calculation according to Kienzle [5]). First of all, the
parameters of the simplified Modelica-model have to
be calculated with a large number of detailed DEFORM simulations. As a result, the fast Modelica
model can be used in the area of validity of these
DEFORM calculations.
68

Modelica 2006, September 4th-5th,2006

Advanced Modeling and Simulation Techniques in MOSILAB: A System Development Case Study

LAB-developed simulators to be controlled from a
wide variety of software environments such as Java,
C++, C#/.NET, MATLAB, Python, Perl, and Ruby.
MOSILAB also supports a more bandwidth-efficient
proprietary stream command interface, a direct C++
API, and a Python API. The Python layer abstracts
from the underlying transport mechanism; i.e. the
same Python experiment script can be used to control
a simulator running as a local subprocess and communicating via OS standard I/O pipes, or to control a
simulation web service running on a remote machine
but having been generated from the same Modelica
model (compare figure 8).

The cooperation between MOSILAB and DEFORM
for the determination of these parameters has been
fully automated. First, a routine for automated preand post processing for DEFORM was developed.
The execution of DEFORM by an external program
is possible using the text mode of the software. This
enables set up and run of simulations without going
through the graphic user interface. The routine needs
initial input information about tool geometry and
machining parameters provided in a text file. To
transfer amongst others, the values for the angles of
the cutting wedge or for the feed rate and width of
cut from MOSILAB the commands readData() and
writeData() are applied.

parameter String fname = "inputData.txt" ;
parameter String fnameOut = "outputData.txt";
Kienzle k;
algorithm
when initial() then
readData(fname, k);
end when;
when terminal() then
writeData(fnameOut,k);
end when;
end DataExchange;

Distributed execution of simulation
experiments

6.2

Simulators developed using MOSILAB can be generated in various configurations  from a barebone
variant suitable for constrained environments, such
as embedded systems, to a regular desktop application, to a web service for distributed simulation.
6.1

Steering
Server

Simulation
Kernel

Numerical
Solver

Runtime
System

Speeding up parameter studies by distributed simulation

Often, the system design task at hand requires a large
number of simulation runs with differing parameter
values, e.g. to obtain knowledge about the systems
behaviour under parameter variations (robust design), or to approximate a certain desired property
of the system being designed (optimization). In the
system model from the case study, it makes sense to
consider variations of the model parameters collector area, heat store volume or building orientation, as well as parameters of the controller model.
The following Figures 9 and 10 illustrate a variation
of the collector area parameter.

Simulator Services and Interoperability

MOSILAB follows a service-based architectural
style. For all configurations except the minimal one,
the simulators generated by MOSILAB are created
as services communicating through a standard interface. The standard interface is based on the
W3C/OASIS web services protocol suite (most importantly, HTTP and SOAP), which allows MOSIThe Modelica Association

Simulator
Service

Figure 8: MOSILAB steering interface options
These interfaces are all manifestations of one and the
same abstract protocol (called the MOSILAB unified
steering protocol), which is only expressed in different programming languages. The generic interfaces
to other simulators described in section 5 have been
developed using these interfacing options specific to
MOSILAB, in addition to Modelicas standard external function interface.

These loose coupling of MOSILAB with DEFORM
helps to combine the advantages of both methods:
First, the short computation time, when solving analytical equations in Modelica and second, the manifold possibilities by analyzing the chip building
process through FEM-Analysis.

6

SOAP

C++ API

model DataExchange
model Kienzle
...
end Kienzle;

Stream

Python API

69

Modelica 2006, September 4th-5th,2006

C. Nytsch-Geusen, T. Ernst, A. Nordwig, P. Schwarz, P. Schneider, M. Vetter, C. Wittwer, A. Holm, T. Nouidui, J.
Leopold, G. Schmidt, A. Mattes

TCP/IP

Modeling
Support

Development
Environment
(Mosilab IDE)

Experiment
Support

Visualization

Simulation
Kernel

Numerical
Solver

Runtime
System
Node_1

...

SOAP

Simulator
Service

Steering
Server

Stream

C+ -API

SOAP

Stream

C++ API

Desktop PC

Simulator
Service

Steering
Server

Simulation
Kernel

Numerical
Solver

Runtime
System
Node_N

Figure 10: Executing simulator services in the Grid
For very large numbers of parallel experiments, central steering limits scalability, and interactive supervision becomes impractical. In this case, MOSILABgenerated simulators can be distributed in the Grid as
independent batch jobs. For more information on
MOSILAB and Grid computing, see [7].

Figure 9: Multiple simulation experiments in the
MOSILAB-IDE for varying the collector area

Figure 10: Impact of different collector areas on the
storage temperature during a period of 3 days
Variations of multiple parameters lead to multidimensional variant spaces, the size of which (i.e. the
total number of simulation runs needed) soon becomes impractical, due to the sheer computation time
needed. Statistics-based methods exist to achieve a
substantial reduction of the variant space with only a
marginal loss of result quality, but even with such
methods in place, a large number of necessary simulation experiments are likely to remain. MOSILABs
service-based architecture allows for distribution of
simulation experiments as independent, parallel jobs
in clusters and computational grids, thus empowering the user to make optimal use of the computational resources available. The individual distributed
simulators can nevertheless be interactively controlled and supervised from the MOSILAB-IDE (see
Figure 10).

The Modelica Association

70

Modelica 2006, September 4th-5th,2006

Advanced Modeling and Simulation Techniques in MOSILAB: A System Development Case Study

References
[1]

[2]

[3]

[4]

[5]

[6]
[7]

[8]

Nytsch-Geusen, C. et al. MOSILAB:
Development of a Modelica based
generic simulation tool supporting
model structural dynamics. Proceedings of the 4th International Modelica Conference TU HamburgHarburg, 2005.
Nordwig, A. et. al: Codegenerierung
aus Simulationsmodellen von heterogenen technischen Systemen am Beispiel einer Pendelsteuerung, VSEKReport. FKZ01ISC65, 2005.
Nordwig, A.: Coupling of Modelica
and Matlab/Simulink models. Technical Report, Fraunhofer FIRST
2006.
Clau, C. et. al: Simulatorkopplung
mit FEMLAB. Proceedings of the
1th FEMLAB Conference, Frankfurt
am Main, 2005.
Knig, W.: Fertigungsverfahren 
Band 1: Drehen, Frsen, Bohren.
VDI-Verlag, 1990.
MOSILAB-Homepage:
http://www.mosilab.de
Ernst, T. et al.: MOSILAB: Modelica Simulation from Desktop to Grid.
2. Workshop "Grid-Technologie fr
den Entwurf technischer Systeme",
Dresden, 2006.
Nordwig, A.: Integration von Sichten
fr die objektorientierte Modellierung hybrider Systeme, Verlag dissertation.de, ISBN 3-89825-692-8,
2003.

The Modelica Association

71

Modelica 2006, September 4th-5th,2006

C. Nytsch-Geusen, T. Ernst, A. Nordwig, P. Schwarz, P. Schneider, M. Vetter, C. Wittwer, A. Holm, T. Nouidui, J.
Leopold, G. Schmidt, A. Mattes

The Modelica Association

72

Modelica 2006, September 4th-5th,2006

Quantised State System Simulation in Dymola/Modelica Using the DEVS Formalism

Quantised State System Simulation in Dymola/Modelica
using the DEVS Formalism
Tamara Beltrame
VTT, Industrial Systems
PO Box 1000, VM3
02150 Espoo, Finland
Tamara.Beltrame@vtt.fi

Francois E. Cellier
Institute of Computational Science
ETH Zurich
8092 Zurich, Switzerland
FCellier@Inf.ETHZ.CH

Abstract
Continuous-time systems can be converted to discreteevent descriptions using the Quantised State Systems
(QSS) formalism. Hence it is possible to simulate
continuous-time systems using a discrete-event simulation tool, such as a simulation engine based on the
DEVS formalism.
A new Dymola library, ModelicaDEVS, was developed that implements the DEVS formalism.
DEVS has been shown to be efficient for the simulation of systems exhibiting frequent switching operations, such as flyback converters. ModelicaDEVS contains a number of basic components that can be used
to carry out DEVS simulations of physical systems.
Furthermore, it is also possible - with some restrictions - to combine the two simulation types of ModelicaDEVS and Dymola (discrete-event and discretetime simulation) and create hybrid models that contain
ModelicaDEVS as well as standard Dymola components.
Keywords: DEVS formalism; Quantised State Systems; Event-Based Simulation; Numerical Integration

1 Introduction

of the new integration approach was to replace the
discretisation of time by a quantisation of state.
The DEVS formalism turned out to be particularly
well suited for implementing such a state quantisation
approach, given that it is not limited to a finite number
of system states, which is in contrast to many other
discrete-event simulation techniques.
The Quantised State Systems (QSS) introduced by
Kofman [6] in 2001 improved the original quantised
state approach of Zeigler by avoiding the problem of
ever creating illegitimate models, and hence gave rise
to efficient DEVS simulation of large and complex
systems.
The simulation of a continuous system by a (discrete) DEVS model comes with several benefits:
When using discretisation of time, variables have to
be updated synchronously1 . Thus, the time steps have
to be chosen according to the variable that changes the
fastest, otherwise a change in that variable could be
missed. In a large system where probably very slow
but also very fast variables are present, this is critical
to computation time, since the slow variables have
to be updated way too often. The DEVS formalism
however allows for asynchronous variable updates,
whereby the computational costs can be reduced
significantly: every variable updates at its own speed;
there is no need anymore for an adaptation to the
fastest one in order not to miss important developments between time steps. This property could be
extremely useful in stiff systems that exhibit widely
spread eigenvalues, i.e., that feature mixed slow and
fast variables.
The DEVS formalism is very well suited for problems
with frequent switching operations such as electrical

Since Dymola/Modelica was primarily designed to
deal with continuous physical problems, numerical
integration is central to its operation, and therefore,
the search for new algorithms that may improve the
efficiency of simulation runs is justified.
Toward the end of the nineties, a new approach for
numerical integration by a discrete-event formalism
has been developed by Zeigler et al. [13]: given
the fact that all computer-based continuous system
simulations have to undergo a discretisation of one
1 Note that this is not true for methods with dense output. Howform or another as digital machines are not able ever, the above statement holds for the majority of todays integrato process raw continuous signals the basic idea tion methods, since they rarely make use of dense output.
The Modelica Association

73

Modelica 2006, September 4th  5th

T. Beltrame, F.E. Cellier

external event has been received. int (s) is the internal
transition that is executed as soon as the system has
spent in its current state the time indicated by the
time-advance function.
ta(s) is the so-called time advance function that
indicates how much time has to pass until the system
undergoes the next internal transition. The timeadvance function is often represented by variable 
which holds the value for the amount of time that the
system has to remain in its current state in the absence
of external events.
The -function is the output function. It is executed
prior to performing an internal transition. External
transitions do not produce output.
Figure 1 illustrates the functioning of a DEVS model:
the system receives input (top graph) at certain time
Since the mid seventies, when Zeigler introduced the instants, changes its states according to the internal
DEVS formalism [11], there have emerged several and external transitions (center graph), and produces
DEVS implementations, most of them designed to output (bottom graph).
simulate discrete systems. However, one simulation/modelling software system aimed at simulating
continuous systems is PowerDEVS [8]: it provides
a library consisting of block diagram component
models that can be used for modelling any system
described by ODEs (DAEs), thereby allowing for the
simulation of continuous systems.
The implementation of ModelicaDEVS has been
kept close to the PowerDEVS simulation software. Hence ModelicaDEVS can be considered a
re-implementation of PowerDEVS in Modelica.
power systems. Given that the problem of iteration at
discontinuities does not apply anymore, it even allows
for real-time simulation.
For hybrid systems with continuous-time, discretetime, and discrete-event parts, a discrete-event method
provides a unified simulation framework: discretetime methods can be seen as a particular case of
discrete-event methods [6], and continuous-time parts
can be transformed in a straightforward manner to
discrete-time/discrete-event systems.
When using the QSS approach of Kofman in order to
transform a continuous system into a corresponding
discrete system, there exists a closed formula for the
global error bound [2], which allows a mathematical
analysis of the simulation.

2 Continuous
with DEVS
2.1

System

Simulation

The DEVS Formalism

Figure 1: Trajectories in a DEVS model.

The DEVS formalism has been introduced by Zeigler
in 1976 [11]. It was the first methodology designed
for discrete-event system simulation that is based on
In theory, DEVS models can describe arbitrarily
system theory.
complex systems. The only drawback is that the more
complex the system is, the more difficult it will be
A DEVS model has the following structure:
to set up the correct transition functions describing
the system. Fortunately, complex systems can be
M = hX,Y, S, int (s), ext (s, e, x), (s),ta(s)i
broken down into simpler submodels that are easier to
where the variables have the following meaning (see handle. The fact that DEVS is closed under coupling
also [2], Chapter 11):
[2] makes such an approach viable.
X represents all possible inputs, Y represents the Figure 2 illustrates this concept: the model N consists
outputs, and S is the set of states.
of two coupled atomic models Ma and Mb . N can be
The variable e indicates the amount of time the system said to wrap Ma and Mb and is indistinguishable from
has already spent in the current state. ext (s, e, x) the outside from an atomic model.
is the external transition that is executed after an
The Modelica Association

74

Modelica 2006, September 4th  5th

Quantised State System Simulation in Dymola/Modelica Using the DEVS Formalism

be the set of piecewise continuous trajectories, and
let x   be a continuous trajectory. The mapping
b :    is a hysteretic quantisation function if the
trajectory q = b(x) satisfies:

Qm
if t = t0



Qk+1 if x(t) = Qk+1  q(t  ) = Qk  k < r
q(t) =
Q
if x(t) = Qk    q(t  ) = Qk  k < 0


 k1

q(t ) otherwise
and:

Figure 2: Coupled DEVS models [2].

2.2


 0 if x(t0 ) < Q0
r if x(t0 )  Qr
m=

j if Q j  x(t0 ) < Q j+1

Quantised State Systems

For a system to be representable by a DEVS model,
it must exhibit an input/output behaviour that is describable by a sequence of events. In other words,
the DEVS formalism is able to model any system
with piecewise constant input/output trajectories, since
piecewise constant trajectories can be described by
events [2].
Continuous state variables are being quantised. Consider the following system represented by the statespace description:
x(t) = f(x(t), u(t),t)
where x(t) is the state vector and u(t) is the input
vector, i.e. a piecewise constant function. The corresponding quantised state system has the following
form:
x(t)  f(q(t), u(t),t)
where q(t) is the (componentwise) quantised version
of the original state vector x(t). A simple quantisation
function could be:
q(t) = floor(x(t)).
Unfortunately, the transformation of a continuous
system into its discrete counterpart by applying an
arbitrarily chosen quantisation function can yield an
illegitimate model2 . Thus, the quantisation function
has to be chosen carefully, such that it prevents
the system from switching states with an infinite
fequency. This property can be achieved by adding
hysteresis to the quantisation function [6], which
leads to the notion of a Quantised State System (QSS)
as introduced by Kofman [6] providing legitimate
models that can be simulated by the DEVS formalism.
A hysteretic quantisation function is defined as
follows [2]: Let Q = {Q0 , Q1 , ..., Qr } be a set of real
numbers where Qk1 < Qk with 1  k  r. Let 
2 Definition

[2]: A DEVS model is said to be legitimate if it
cannot perform an infinite number of transitions in a finite interval
of time. Illustrative examples of illegitimate models can be found
in [2] and [6].

The Modelica Association

The discrete values Qi and the distance Qk+1  Qk
(usually constant) are called the quantisation levels
and the quantum, respectively. The boundary values Q0 and Qr are the upper and the lower saturation
values, and  is the width of the hysteresis window.
Figure 3 shows a quantisation function with uniform
quantisation intervals.

Figure 3: Quantisation function with hysteresis [2].
The QSS described above is a first-order approximation of the real system trajectory. Kofman however
has also introduced second- and third-order approximations that may reduce the error made by the
approximation. These systems are referred to as QSS2
[7] and QSS3 [9], respectively.

3

ModelicaDEVS

The average block of the ModelicaDEVS library exhibits the following basic structure:

75

Modelica 2006, September 4th  5th

T. Beltrame, F.E. Cellier
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34

by an equation

block SampleBlock
extends ModelicaDEVS.Interfaces. ... ;
parameter Real ... ;

dext = uEvent;

where uEvent is the Boolean component of the connector that represents an input event. Suppose now
that block A produces an output event at time t = 3.
At this precise instant, it updates its output vector with
the appropriate values (the coefficients of the Taylor
series) and sets A.yEvent to true:

protected
discrete Real lastTime(start=0);
discrete Real sigma(start=...);
Real e;
Boolean dext;
Boolean dint;
[...other variable declarations...]

when dint
yVal[1]=
yVal[2]=
yVal[3]=
end when;
yEvent =

equation
dext = uEvent;
dint = time>=pre(lastTime)+pre(sigma);
when {dint} then
yVal[1]= ...;
yVal[2]= ...;
yVal[3]= ...;
end when;
yEvent = edge(dint);

then
...; //new output value 1
...; //new output value 2
...; //new output value 3
edge(dint);

Still at time t = 3, block B notices that now B.uEvent
has become true (note that B.uEvent = A.yEvent
because the two blocks are connected), and therefore
dext has become true, also. Consequently, Block B is
executing its external transition [4].

when {dint, dext} then
e=time-pre(lastTime);
if dint then
[..internal transition behaviour..]
else
[..external transition behaviour..]
end if;
lastTime=time;
end when;

A DEVS model must contain code to perform
internal and external transitions, as well as execute the
time advance and output functions at the appropriate
instants. All of these functions have to be explicitly or
implicitly present in the ModelicaDEVS blocks.
The time advance function is normally represented
by a variable sigma. It is a popular trick in DEVS
end SampleBlock;
to represent the current value of the time advance
function by sigma [2].
The following sections will offer more insight into the The internal transition is executed when dint is true.
reasons for this specific block structure.
An internal transition depends only on sigma. Hence
the value of dint can be calculated as:
In accordance with the PowerDEVS implemen- dint = time >= pre(lastTime) + pre(sigma);
tation, ModelicaDEVS event ports (connectors) where lastTime holds the time of the last execution of
consist of four variables representing the coefficients a transition (internal or external).
to the first three terms (constant, linear, and quadratic) The external transition is executed when dext is true.
of the functions Taylor series expansion, and a The variable dext is defined as follows:
Boolean value that indicates whether a block is
dext = uEvent;
currently sending an event.
The internal and external transitions are represented
Dense output can then be approximated as:
by a when-statement.
The reason for packing
yout = y0 + y1  (t  tlast ) + y2  (t  tlast )2
the internal and external transitions into a single
whereby the coefficient of the quadratic term of when-statement instead of having two separate whenthe Taylor series, y2 = yVal[3], is only used by statements, one representing the internal transition
the third-order accurate method, QSS3, whereas the and the lambda function, the other one representing
linear term, y1 = yVal[2], is used by QSS2 and QSS3. the external transition, is due to a rule of the Modelica
language specification that states that equations in
Let us now consider a small example in order to gain different when-statements may be evaluated simulincreased insight into the role of the Boolean variable taneously. Hence, if there are two when-statements
of the port. Let us assume a two-block system consist- each containing an expression for a variable X, X
ing of block A and block B, where the only input port is considered overdetermined. This circumstance
of block B is connected to the only output port of block would cause a syntactical problem with variables that
A. Every block features a variable dext accompanied have to be updated both during the internal and the
The Modelica Association

76

Modelica 2006, September 4th  5th

Quantised State System Simulation in Dymola/Modelica Using the DEVS Formalism

external transition and thus would have to appear in
both when-statements. For this reason, we need to
have a when-statement that is active if either dint
or dext becomes true. Subsequently, an additional
discrimination is done within the when-statement,
determining whether it was an internal (dint is true)
or an external transition (dext is true) that made the
when-statement become active, and as the case may
be, updating the variables with the appropriate value.
The lambda function is executed right before an
internal transition. Lines 17-22 of the block basic
structure code (beginning of Section 3) constitute
the typical lambda function part, containing a whenstatement and a separate instruction for the yEvent
variable. The right hand side of the equations in the
lambda function normally depends on pre() values
of the used variables. This is due to the fact that
the lambda function has to be executed prior to the
internal transition. The variable yEvent has to be
true in the exact instant when an internal transition
is executed and false otherwise. This behaviour is
obtained by using the Modelica edge() operator.
There is one particular situation that can occur
in a model that requires special attention: let us
assume two connected blocks, where both block A
and block B have to execute an internal transition
simultaneously (Figure 4). Whereas block A simply

Figure 4: Concurrent events at block B.
executes its internal transition, block B is confronted
with the problem of concurrent events: from block
A it receives an external event, but at the same time,
it was about to undergo its own internal transition.
Which event should be processed first? This question
is to be answered by the priority settings between the
two blocks.
In our simple two-block example there are only
two possible priority orderings with the following
consequences: either block A is prior to block B, and
block A will produce the output event before block
B executes the internal transition (block B will first
execute an external transition triggered by the external
event it received from block A), or block B is prior
The Modelica Association

to block A, such that block B will first undergo its
internal transition and receive the external event right
afterwards, when A will be allowed to execute its
internal transition.
The problem of block priorities can be solved in
two ways: by an explicit, absolute ordering of all
components in a model (e.g., a list), or by letting
every block determine itself whether it processes the
external or the internal event first, in case both of them
occur simultaneously. ModelicaDEVS implements
the latter approach. As can be seen in the block
basic structure code, internal transitions take always
priority over external transitions (line 26: the code
checks first whether dint is true).
The reason for this choice is quite simple. As internal
events are processed before external events, and since
internal events are accompanied by output events,
the variable yEvent can be computed as a function
of dint alone. If we were to force external events
to be processed before internal events, we would
need to make sure that yEvent is only set true in the
case that the internal event is not accompanied by
a simultaneous external event. Thus yEvent would
now be a function of both dint and dext. Yet, dext
is a function of uEvent. Thus, if ModelicaDEVS
blocks were connected in a circular fashion, as this is
often the case, an algebraic loop in discrete (Boolean)
variables would be created, which would get the
Dymola compiler into trouble.
By forcing the internal events to always take preference over external events, ModelicaDEVS blocks
can be interconnected in an arbitrary fashion without
ever creating algebraic loops in the Boolean eventindication variables.
Note that since Dymola/Modelica is already aimed at
object-oriented modelling, which includes the reuse
of multi-component models as parts of larger models,
the issue of hierarchically coupled models did not
require any special treatment in ModelicaDEVS.
Dymola can trigger two types of events: state
events that require iteration to locate the event time,
and time events that make Dymola jump directly to
the point in time when the time event takes place.
The only expressions responsible for activating the
when-statements in the models, namely:
dext = uEvent;

and:
dint = time >= pre(lastTime) + pre(sigma);

both trigger time events and hence avoid the computationally more expensive state events.

77

Modelica 2006, September 4th  5th

T. Beltrame, F.E. Cellier

An earlier version of ModelicaDEVS used an approach that triggered mostly state events. Inspired by
the book of Fritzson [4], a number of small modifications have been applied that converted all state events
to time events. Performance comparisons carried out
between the two versions showed that the time-event
approach is roughly four times faster than an equivalent approach triggering state events.

4 Results
4.1

Efficiency

In order to compare the run-time efficiency of ModelicaDEVS to other simulation software systems
(PowerDEVS and standard Dymola), a system with
frequent switching operations was modelled using
each of the three tools (PowerDEVS, ModelicaDEVS
and Dymola), and the execution times of the three
codes were compared against each other.
The chosen system is the flyback converter example
presented in [5].
The flyback converter can be used to transform a
given input voltage to a different output voltage. It
belongs to the group of DC-DC converters.
A very simple electrical circuit with a voltage source
connected to the primary winding of the converter
and a load to its secondary winding looks as shown in
Figure 5.

Figure 6: The flyback converter output.
or PowerDEVS, the behaviour of the converter needs
to be converted to a causalised block diagram3 , which
then can be modelled using component models of the
PowerDEVS/ModelicaDEVS libraries.
Figure 7 shows the flyback converter model built in
ModelicaDEVS. The structure of this block diagram
is also valid for the PowerDEVS model.

Figure 7: The ModelicaDEVS flyback converter.
Table 1 provides the average simulation CPU time
for a simulation of 0.002 seconds of the flyback converter model in standard Dymola, ModelicaDEVS,
and PowerDEVS, respectively. The Dymola and ModFigure 5: The flyback converter in Dymola.
elicaDEVS model were simulated setting the numerical integration method to LSODAR4 . Testing has been
Figure 6 shows the first two milliseconds of a simula- carried out on an IntelCeleron 2.6 GHz Laptop with
tion run of the flyback converter circuit given in Figure 256MB RAM. The resulting CPU time may vary from
3 For more details on the causalising process in the flyback con5. The rapid switching is a result of the high switching
rate of the ideal switch.
verter example, see [1].
4 Although ModelicaDEVS does not make use of LSODAR diThe flyback converter is described by a set of acausal
equations in Dymola. However, in order to be able to rectly, the event handling behaviour of Dymola is somewhat influmodel the flyback converter in either ModelicaDEVS enced by the selection of the numerical integration algorithm.
The Modelica Association

78

Modelica 2006, September 4th  5th

Quantised State System Simulation in Dymola/Modelica Using the DEVS Formalism

one computer system to another, but the relative ordering is expected to remain the same.
Table 1: Execution efficiency comparison.
CPU
time
result
time [s] events points
Dymola
0.062
239
738
QSS1
3.55
6363 11829
M-DEVS QSS2
0.688
958
2299
QSS3
0.656
833
2164
QSS1
0.064
N/A
N/A
P-DEVS QSS2
0.019
N/A
N/A
QSS3
0.018
N/A
N/A
Table 1 shows a clear ordering of the three different
systems in terms of performance: PowerDEVS is
faster than Dymola, which in turn is faster than
ModelicaDEVS.
First, it needs to be remarked that standard Dymola
simulates this model very efficiently. The switching
(BooleanPulse) block leads to time events only,
whereas the diode should lead to state events. Yet, this
is not the case.
Switching at the input leads immediately to a switching of the diode as well. Since Dymola iterates after
each event to determine a consistent set of initial
conditions, the switching of the diode is accomplished
at once without need of first triggering a state event.
Second, the model is quite trivial. The execution
time is almost entirely dictated by the number of time
events handled. What happens in between events is
harmless in comparison.
Standard Dymola performs exactly one time event
per switching. In contrast, ModelicaDEVS performs
considerably more time events. Time events take here
the role of integration steps.
Figure 8 shows the constant term of the Taylor series
expansion of the load voltage as a function of time
for QSS1 and QSS3. QSS1 requires a new time event
as soon as the constant output no longer represents
the true output, whereas QSS3 requires an event
only, when the second-order accurate Taylor series
expansion no longer approximates the true output.
QSS1 requires roughly eight times as many events
as QSS3, and is therefore between five and six times
slower. Yet, even QSS3 requires roughly three times
as many events as standard Dymola. In addition, the
ModelicaDEVS model contains roughly three times
as many variables as the standard Dymola model.
All of these variables are being stored at every event.
Consequently, QSS3 is roughly nine times slower than
standard Dymola.
The Modelica Association

Figure 8: QSS3 simulation vs. QSS1 simulation.

Yet, QSS3 in PowerDEVS is roughly three times
faster than standard Dymola for comparable accuracy. A comparison between PowerDEVS and
ModelicaDEVS is not straightforward. PowerDEVS
implements Zeiglers hierarchical simulator [12],
whereas ModelicaDEVS operates on simultaneous
equations and synchronous information flow [10].
Consequently, PowerDEVS suffers from requiring
message passing to implement the communication
between blocks, but enjoys the advantage of only
having to process those equations that are directly
involved with the event being handled. In contrast,
ModelicaDEVS needs to visit all equations of all
blocks whenever an event takes place. Which variables are to be updated in each case is decided by
Boolean expressions associated with the various
when-statements.
Yet the true difference in speed has probably more
to do with the event handling itself. Dymola has
been designed for optimal speed in the simulation
of continuous models and for optimal robustness in
handling hybrid models.
The algorithms implemented in Dymola for robust
event handling are important in the context of hybrid
modelling. In the context of a pure discrete-event
simulation, these algorithms are an overkill. For
example, in a pure discrete-event simulation there is
no need for iteration after each event to determine a
new consistent set of initial conditions. In Dymola,
many variables are being stored internally in order
to allow LSODAR to integrate continuous state
equations correctly across discontinuities. In a pure
discrete-event simulation, variables need to be stored
for output only.

79

Modelica 2006, September 4th  5th

T. Beltrame, F.E. Cellier

4.2

Mixed Systems

du=der(u);

Mixed systems contain both Dymola and Modelica
blocks. Figure 9 shows an example of a simple electrical circuit modelled in Dymola, and in a mixed version with a ModelicaDEVS capacitor. Figure 10 illus-

Figure 9:
Two versions (Dymola and Dymola/ModelicaDEVS) of a simple electrical circuit.
trates the implementation of the ModelicaDEVS capacitor. On its outside, this block looks like a normal
electrical Dymola component, but internally it consists
of ModelicaDEVS blocks that model the behaviour
of a capacitor: The Gain block multiplies the incoming signal by the value of C1 , where C is specified
by a parameter, and passes it on to the Interpolator.
Taken as a whole, the ModelicaDEVS blocks constitute nothingR more than the well known capacitor formula v = C1 i dt.

when sample(start,period) then
yVal[1]=u;
yVal[2]=if method>1 then du else 0;
yVal[3]=if method>2 then der(du) else 0;
end when;

Given that the input of the SamplerTime block depends algebraically on the output of the Interpolator
in the DEVS capacitor, Dymola would have to differentiate discrete variables, which it is unable to do.
An attempt to solve this problem was made using Dymolas User specified Derivatives feature described
in the Dymola Users Manual [3]: functions for the
first and second derivatives have been inserted into the
Interpolator, but due to unknown reasons, this did not
resolve the issue either.
In order to be able to perform mixed simulations
nonetheless, another trick has been applied: supplementary to the standard ModelicaDEVS SamplerTime
block that uses the Modelica der() operator, an additional block has been programmed: the SamplerTimeNumerical block avoids the problem caused by
the der() operator by means of the delay() function
that is used to differentiate the input variable numerically. Instead of the first and second derivatives of
the input signal, the SamplerTimeNumerical returns a
numerical approximation:
Du = delay(pre(u),D);
D2u= delay(pre(u),2*D);
yVal[1]= pre(u);
yVal[2]= if method>1 then
(pre(u)-Du)/D else 0;
yVal[3]= if method>2 then
(pre(u)-2*Du+D2u)/(D*D) else 0;

Figure 10: The internal structure of the ModelicaDEVS capacitor.
Unfortunately, it is not as straightforward as it may
seem at first glance to replace a component from
the Dymola standard electrical library by its ModelicaDEVS equivalent: since the electrical components
do not assume a certain data flow direction (they are
described by acausal equations), whereas the ModelicaDEVS components do (DEVS components feature
input and output ports), the ModelicaDEVS capacitor
must turn acausal equations into causal ones. It assumes the capacitive current i to be given, and hence
computes the capacitive voltage v. Note that such a capacitor would not work anymore correctly if we were
to connect it to a voltage source instead of a current
source.
An even more severe problem is caused by the SamplerTime block applying the der() operator to the signal that it receives through its input port:
The Modelica Association

Using the new sampler block, the mixed simulation
could be carried out without any problems, and the results differ only slightly from the simulation with conventional Dymola components (see Figure 11).

4.3

Hybrid Systems

Hybrid systems contain mixed integration methods:
standard Modelica integrators and ModelicaDEVS Integrator blocks. An example of a hybrid system is
for instance an electrical circuit with at least one
ModelicaDEVS capacitor/inductor (using the ModelicaDEVS Integrator block) and at least one Dymola
capacitor/inductor (using the Modelica der() operator). The flyback converter of Section 4.1, where the
capacitor in the secondary winding is replaced by an
equivalent ModelicaDEVS capacitor, may serve as an

80

Modelica 2006, September 4th  5th

Quantised State System Simulation in Dymola/Modelica Using the DEVS Formalism

5

Conclusions

A new Dymola/Modelica library implementing a
number of Quantised State System (QSS) simulation
algorithms has been presented. ModelicaDEVS duplicates the capabilities of PowerDEVS. The graphical
user interfaces of both tools are practically identical.
However, the underlying simulators are very different.
Whereas PowerDEVS implements Zeiglers hierarchical DEVS simulator, ModelicaDEVS operates on
simultaneous equations and synchronous information
flows.
The embedding of ModelicaDEVS within the DyFigure 11: Standard Dymola (blue) and mixed (red) mola/Modelica environment enables users to mix
simulation of the simple electrical circuit (Figure 9).
DEVS models with other modelling methodologies
that are supported by Dymola and for which Dymola
offers software libraries.
example of a hybrid system.
Unfortunately, ModelicaDEVS is much less efficient
Note that the ModelicaDEVS capacitor applies numerin run-time performance than PowerDEVS. The loss
ical differentiation in order not to obtain DAE index
of run-time efficiency is probably caused by Dymolas
reduction error messages (see previous section).
event handling algorithms that have been designed for
optimal robustness in the context of hybrid system
simulation rather than run-time efficiency in the
context of pure discrete-event system simulation.
Although ModelicaDEVS offers a full implementation
of a DEVS kernel and can therefore be used for the
simulation of arbitrary discrete-event systems, the
modelling blocks that have been made available so far
in ModelicaDEVS are geared towards the simulation
of continuous systems using QSS algorithms.

References
Figure 12: Standard Dymola (blue) and mixed (red)
simulation of the flyback converter.
Figure 12 shows the output of the mixed simulation
compared to the result of the standard Dymola simulation. Just as it was the case with the simpler example
of Section 4.2, the output of the hybrid simulation differs only slightly from the Dymola simulation.
Thus, it is also possible to perform not only accurate5
mixed simulations, but also hybrid simulations.
5 Note that due to the numerical differentiation used in the Sam-

plerTimeNumerical block, the result is not as accurate as if analytical differentiation had been used. However, the accuracy is sufficient for most purposes, and also adjustable through selection of
the width parameter, D.

The Modelica Association

81

[1] Beltrame, T. (2006), Design and Development of
a Dymola/Modelica Library for Discrete Eventoriented Systems using DEVS Methodology, MS
Thesis, Institute of Computational Science, ETH
Zurich, Switzerland.
[2] Cellier, F.E. and E. Kofman (2006), Continuous
System Simulation, Springer-Verlag, New York.
[3] Dynasim AB (2006), Dymola Users Manual,
Version 6.0, Lund, Sweden.
[4] Fritzson, P. (2004), Principles of ObjectOriented Modeling and Simulation with Modelica 2.1, Wiley-Interscience, New York.
[5] Glaser, J.S., F.E. Cellier, and A.F. Witulski
(1995), Object-Oriented Switching Power ConModelica 2006, September 4th  5th

T. Beltrame, F.E. Cellier

verter Modeling Using Dymola With EventHandling, Proc. OOS95, SCS Object-Oriented
Simulation Conference, Las Vegas, NV, pp.141146.

Biographies
Tamara Beltrame received her
MS degree in computer science
from the Swiss Federal Institute
of Technology (ETH) Zurich in
2006. She recently started working
at VTT (Finland), where she deals
with problems of simulation aided
automation testing.

[6] Kofman, E. and S. Junco (2001), Quantised
State Systems: A DEVS Approach for Continuous Systems Simulation, Transactions of SCS,
18(3), pp.123-132.
[7] Kofman, E., A Second Order Approximation for
DEVS Simulation of Continuous Systems, Simulation, 78(2), pp.76-89.
[8] Kofman, E., M. Lapadula, and E. Pagliero
(2003), PowerDEVS: A DEVS-based Environment for Hybrid System Modeling and Simulation, Technical Report LSD0306, LSD, Universidad Nacional de Rosario, Argentina.
[9] Kofman, E., A Third Order Discrete Event
Method for Continuous System Simulation,
Latin American Applied Research, 36(2),
pp.101-108.
[10] Otter, M., H. Emqvist, and S.E. Mattsson (1999),
Hybrid Modeling in Modelica Based on the
Synchronous Data Flow Principle, CACSD99,
IEEE Symposium on Computer-Aided Control
System Design, Hawaii, pp.151-157.
[11] Zeigler, B.P. (1976), Theory of Modeling and
Simulation, John Wiley & Sons, New York.
[12] Zeigler, B.P. (1984), Multifacetted Modelling
and Discrete Event Simulation, Academic Press,
London.
[13] Zeigler, B.P. and J.S. Lee (1998), Theory of Quantized Systems: Formal Basis for
DEVS/HLA Distributed Simulation Environment, SPIE Proceedings, Vol. 3369, pp.49-58.

The Modelica Association

Francois E. Cellier received his BS
degree in electrical engineering in
1972, his MS degree in automatic
control in 1973, and his PhD degree in technical sciences in 1979,
all from the Swiss Federal Institute
of Technology (ETH) Zurich. Dr.
Cellier worked at the University of
Arizona as professor of Electrical and Computer Engineering from 1984 until 2005. He recently returned to
his home country of Switzerland. Dr. Celliers main
scientific interests concern modeling and simulation
methodologies, and the design of advanced software
systems for simulation, computer aided modeling, and
computer-aided design. Dr. Cellier has authored or coauthored more than 200 technical publications, and he
has edited several books. He published a textbook on
Continuous System Modeling in 1991 and a second
textbook on Continuous System Simulation in 2006,
both with Springer-Verlag, New York. He served as
general chair or program chair of many international
conferences, and serves currently as president of the
Society for Modeling and Simulation International.

82

Modelica 2006, September 4th  5th

Session 1d

Session 1d
Mechanical Systems and Applications 1

The Modelica Association

83

Modelica 2006, September 4th  5th

Session 1d

The Modelica Association

84

Modelica 2006, September 4th  5th

The DLR FlexibleBodies Library to Model Large Motions of Beams and of Flexible Bodies Exported from Finite
Element Programs

The DLR FlexibleBodies library to model large motions of beams
and of flexible bodies exported from finite element programs
Andreas Heckmann , Martin Otter , Stefan Dietz and Jose Daz Lopez
Aerospace Center (DLR), Institute of Robotics and Mechatronics
Oberpfaffenhofen, 82234 Wessling, Germany
 INTEC GmbH, Argelsrieder Feld 13, 82234 Wessling, Germany
 Dynasim AB, Ideon Research Park, SE-223 70 Lund, Sweden

 German

Abstract

2 Modelling Capabilities

The DLR FlexibleBodies library is a commercial
The new DLR FlexibleBodies library enables and supModelica package. It provides two basic Modelica
ports the object-oriented and mathematically efficient
model classes: the Beam model and a general Modalmodelling of flexible bodies as components of multiBody model, see Figure 1.
body and of arbitrary physical systems. It provides
Modelica model classes to model (a) beams and (b)
general flexible bodies exported from finite element
programs. The motion of a flexible structure is defined by superposition of a in general large, non-linear
motion of a reference frame with small elastic deformations. This paper gives an overview on the background, concepts and ideas on which the library is
based and how the Modelica user may take advantage
Figure 1: Icons of Beam and ModalBody models.
of it.
Keywords: Flexible body, modal representation,
standard input data (SID), floating frame of reference

If a Beam object is instantiated, a dialogue menu,
see Fig. 2, supports the definition of the geometrical
and physical properties of a straight, homogenous and
isotropic beam. For the specification of the cross section an additional menu offers predefined cross section
1 Introduction
profiles such as tubes, U-pipes or T-beams, see Fig. 3.
The parameters defined there are also used for animaThe DLR FlexibleBodies library is based on the Stan- tion purposes. The choice general in Fig. 3 enables
dard Input Data of flexible bodies (SID) which is an the direct input of the mechanical essentials, i.e. the
object-oriented data structure that was developed at the geometrical moments of inertia of the cross section.
DLR-Institute of Robotics and Mechatronics to generally describe the properties of elastic bodies, see [13].
It facilitates the use of data which may originate from
a finite element description or from continuum models and has been used by various multibody codes, especially by SIMPACK [10], in industrial applications
since the early 1990s. The implementation of this
general, stable and well-established approach offers
new possibilities for multiphysical modelling tasks in
Modelica and is nevertheless open for further development and improvements, e.g. concerning multifield Figure 2: Cutout of the user interface to specify parameters of the Beam model.
problems [6].
The Modelica Association

85

Modelica 2006, September 4th-5th,2006

A. Heckmann, M. Otter, S. Dietz, J.D. Lpez

cessing step from finite element data of the body. We
recommend the preprocessor FEMBS, see Sec. 4 and
[5], from the DLR spin-off company INTEC GmbH
that is capable to prepare data from the FE-programs
ABAQUS, ANSYS, MSC.Nastran, NX Nastran, IDEAS, PERMAS.
For both the Beam and the ModalBody
model the frame connectors of the Modelica.Mechanics.MultiBody library are used to define
the connection of the flexible body instance to other
system components such as joints, force or sensor
elements. Besides the two frames at both ends an arbitrary number of intermediate frames may be defined
as parameters of the Beam model. E.g. the parameter
xsi={0.5} in Figure 2 specifies an additional frame at
the center of the beam. The ModalBody model has
one vector of frame connectors that are associated
with nodes of the finite element model.

Figure 3: Input for predefined cross section profiles of
the Beam model.
The beam model takes bending in two planes,
lengthening and torsional deflections into account.
The deformations are discretised by eigenforms, i.e.
the analytical solutions of the eigenvalue problem of
the Euler-Bernoulli beam, see Sec. 3.
Only those eigenforms and eigenfrequencies respectively that are specified by their ordinal numbers
are considered in the model. In Fig. 4 the first, third
and fifth eigenmode are selected, whereas a damping coefficient of 0.02 is assigned to the first, 0.03 to
the second and 0.01 to the third eigenfrequency. This
feature gives the experienced modeller the possibility
to reduce the number of degrees of freedoms, since
some eigenmodes might not contribute to the modelling problem.
Additionally, appropriate boundary conditions
that constrain the deformation field of the beam with
respect to its floating frame of reference have to be defined. As a general rule, the boundary condition should
correspond to the joint where the beam is attached to.
If a ModalBody is instantiated, a file name has to
be specified by the user in which the SID structure is
present. This SID-file has to be generated in a prepro-

3 Mechanical Background
The mechanical description is based on the floating
frame of reference approach, i.e. the absolute position r = r (cc ,t) of a specific body particle is subdivided
into three parts: the position vector r R = r R (t) to the
bodys reference frame, the initial position of the body
particle within the bodys reference frame, i.e. the Lagrange coordinate c 6= c (t), and the elastic displacement u (cc,t):
r = r R +cc +uu ,
(1)
where all terms are resolved w.r.t. the bodys floating
frame of reference (R). Thats why the angular velocity of the reference frame  R have to be taken in
account when the kinematic quantities velocity v and
acceleration a of a particle are derived:
R r + rr = v R + 
R (cc +uu) + uu ,
v = 
 R + 
R 
 R ) (cc +uu) + 2 
R uu + uu ,
a = a R + (

(2)
(3)

(R)

c
rR
(I)

u

Figure 5: Vector chain of the floating frame of reference.

Figure 4: Menu to specify modes of the beam model.
The Modelica Association

r

86

Modelica 2006, September 4th-5th,2006

The DLR FlexibleBodies Library to Model Large Motions of Beams and of Flexible Bodies Exported from Finite
Element Programs

where the (  )-operator is used to replace the vector
cross product using the appropriate skew-symmetric
c
matrix instead so that e.g. the identity   c = 
holds.
The decomposition in (1) makes it possible to superimpose a large non-linear overall motion of the reference frame with small elastic deformations.
The displacement field is approximated by a second order Taylor expansion with space-dependent
 x (cc),
 y (cc ),
 z (cc)  Rn,n
mode shapes  (cc )  R3,n ,
and time-dependent modal amplitudes q (t)  Rn [13]:

qT x
1
u =  q +  qT y  q .
2
qT z


If, for the sake of demonstration, the body is assumed to be rigid, those rows and columns in (6)
vanish that are associated with the generalised elastic acceleration qq. Since (6) is formulated in terms of
the translatory and angular acceleration of the floating
frame of reference, such reduction leads to the classical Newton-Euler equations of a rigid body. Therefore, S HABANA calls (6) the generalised NewtonEuler equations of an unconstrained deformable body
in [11, Sec. 5.5].
On the other hand, if the motion of the reference
frame is constrained to be zero, (6) is reduced to the
classical structural equation (see Sec. 6.2 and (12) for
(4) the definition of f q ):
De qq +K
Ke q = f q .
M e qq +D

The focus of the second order expansion is not to depict large deformations e.g. for crash analysis but the
incorporation of stress stiffening and softening effects,
e.g. the weak bending behaviour of a slender beam under the influence of a large axial thrust force, see Sec.
6.2.
The kinematic quantities together with the vector
of applied forces f e are inserted into Jourdains principle of virtual power:
vvT

Z

(d f e aa dm) = 0 .

(7)

Applying the classical deformation assumptions of
R AYLEIGH and B ERNOULLI, it is possible to describe
the displacement field of a beam up to second order
terms analytically, see [2, (4.104)]:


Rx

 12 (v02 + w02 )dx

 
0

u
 Rx Rx 00
Rx 0 0

u =  v +
  0 0 w dx dx + 0 u v dx

w
 Rx Rx 00
Rx
v dx dx + u0 w0 dx


(5)

0 0

body

0






,




(8)

where u denotes the lengthening deformation, v the
Subsequently, the equations of motion of an unbending deflection in xy-plane, w the bending deflecconstrained flexible body are formulated neglecting
tion in xz-plane and  the torsional deformation of a
deflection terms of higher than first order [13, (38)]:
point on the beams x-axis. The ( )0 -operation com


plies with the partial derivation w.r.t. the x-coordinate.
mII 3
sym.
aR
Eq. (8) may be formulated in the manner of (4), if
 m dd CM J
  
R  =
a Rayleigh-Ritz approach such as
qq
Ct
Cr Me


v = v qv
(9)
0


= h 
0
+hhe , (6)
is made not only for v but for all four deformation
De qq
K e q +D
types u, v, w and . The deformation state of the beam
where the following quantities and symbols appear: may then be characterised by q = [qq Tu q Tv q Tw q T ]T .
m
body mass
The DLR FlexibleBodies library uses the analytI3
3  3 identity matrix
ical solutions i of the spatial problem to the eigend CM (qq )
position of center of mass
value i l of an Euler-Bernoulli beam with length l:
J (qq )
inertia tensor

T 

C t (qq )
inertia coupling matrix
cosh(i x)
c1
 sinh(i x)   c2 
C r (qq )
inertia coupling matrix

 


=
(10)
i
 cos(i x)   c3 
 ,qq , qq ) gyroscopic and centripetal forces
h  (
he
external forces
sin(i x)
c4 i
Me
structural mass matrix
to form a set of spatial shape functions for each of the
Ke
structural stiffness matrix
deformation coordinates. Hereby, c 1 to c4 represent
De
structural damping matrix
The Modelica Association

87

Modelica 2006, September 4th-5th,2006

A. Heckmann, M. Otter, S. Dietz, J.D. Lpez

constants associated to specific boundary conditions,
see [12, Ch. V].
To summarise, the Beam model class is based on
an analytical continuum description of beams via (8)
to (10). Contrary, the ModalBody class is supposed
to represent bodies with an arbitrary geometry derived
from a finite element description The FE- model of the
body is transformed and utilised in such a way that (1)
to (6) also hold for the ModalBody class.
We recommend the use of the pre-processor
FEMBS from INTEC GmbH that enables this transformation of FE-data as a reliable and sophisticated process, controlled via its own graphical user interface.

4

 The eigenmodes which are to be obtained by
a modal analysis of the reduced finite element
model.
 Geometric stiffening matrices which are to be obtained by extra static analyses of the reduced finite element model. These analyses consider the
pre-stresses which are relevant for the application.
 The mesh of finite element model. This data is
taken from the FEA input file that contains the
elements and nodes of the original, non-reduced
model.

FEMBS an Interface between MBS
and FEA-tools

FEMBS the time-tested interface between the multibody system code SIMPACK and the most important finite element codes can also be used as a preprocessor for Modelica.
The number of degrees of freedom of multi-body
systems is small, when compared with finite element
models. Therefore, the main task of flexible body integration is the reduction of the number of degrees of
freedom. Currently, this is to be done in two steps.
First, standard reduction schemes like Guyan reduction or Craigh-Bampton reduction are used to export the model from the finite element code into
FEMBSs flexible body input file.
Reduction in finite element codes is performed
based upon a user defined set of degrees of freedom
at nodes which are to be retained. When using the
Craigh-Bampton method proper dynamic behaviour of
the reduced finite element model can be guaranteed
within the frequency range of the application. This
additionally requires the specification of a number of
so-called dynamic degrees of freedom. They are the
eigenmodes of the flexible body, whose retained degrees of freedom were fixed by constraints.
Once the time consuming reduction has been finished the finite element model has less than 1500 degrees of freedom. This first reduction step is to be
done in order to keep FEMBSs flexible body input
file small. The contents of the FEMBS input file are:

Based on this data, the second reduction step [9] in
FEMBS is to be performed by selecting modes for
multi-body simulation. The user is recommended to
select all eigenmodes which correspond to the frequency range which is important for the current application.
Additionally the user should calculate so-called
frequency response modes in FEMBS in order to improve the accuracy of the modal representation [3].
Frequency response modes represent local deformations which may occur near the attachment points of
the flexible body, where it is connected by force elements, constraints and joints with the surrounding
multi-body system.
To generate the frequency response modes (11) in
FEMBS the user selects first the nodes and then the
directions of the forces and moments which may be
transmitted by the force elements or constraints. The
frequency response modes u i
K  2M )uu i = p i
(K

(11)

are based upon the unit load cases p i for each coupled
degree of freedom i, the mass matrix M the stiffness
matrix K and an excitation frequency  which is set to
the half of the minimum eigenfrequency of interest.
Frequently, only a subset of the frequency response modes has significant influence on the flexible body deformation. The superfluous frequency response modes may be detected by their large frequencies, which follow from a modal analysis which is
automatically performed in FEMBS. Thus, FEMBS
can automatically select the important frequency response modes based on a cut-off frequency, whose de The mass and stiffness matrix of the reduced fault value is five times greater than the maximum frequency of interest.
model.
As described, the finite element model with say
 the retained nodes
millions of degrees of freedom is transformed to a

The Modelica Association

88

Modelica 2006, September 4th-5th,2006

The DLR FlexibleBodies Library to Model Large Motions of Beams and of Flexible Bodies Exported from Finite
Element Programs

Figure 6: The multi-body system model with the flex- Figure 7: Correlation of the model to measured data:
ible chassis
Seat rail acceleration at the right hand side

5 Animation of Modal Bodies

modal representation of typically about fifty to hundred degrees of freedom. This modal representation is
stored in the standard input data file [9] that is input
for SIMPACK and Modelica, respectively.
The static deflection of many different flexible
bodies such as railway and automotive car bodies,
chassis, engine parts, subframes etc. was calculated
in the multibody system code SIMPACK. They were
compared with the results of static analyses performed
in the finite element code based upon the original, nonreduced model. For the static deflection a difference
less than one percent can be expected between the results of the finite element model and the multi-body
system. Also the eigenfrequencies of the flexible body
calculated in SIMPACK are very close to the eigenfrequencies, which are obtained by corresponding finite
element analyses.
Thus FEMBS provides efficient and accurate input for multi-body system analyses.
Detailed FEM models of a sport utility vehicles
chassis and also its front and rear subframes were
integrated into the multi-body system model which
was created using SIMPACK for comfort analyses,
see Figure 6. The chassis consisted of about 2.4 millions degrees of freedom. All finite element models
were dynamically reduced within NASTRAN. Different sets with 30 to 40 modes consisting of eigenmodes
and frequency response modes were used for multibody system analyses. CAD files of the finite element
mesh were also generated by FEMBS and used for the
graphical representation.
Fig. 7 shows the good correlation of the model to
measured data in the frequency domain up to 25 Hz.
The Modelica Association

In this section, we describe briefly some visualisation
aspects of the ModalBody. The visualiser object used
in FlexibleBodies library has been designed to meet
the specific requirements of flexible bodies animation
in MBS context. It can be accessed from a Modelica
model via a built-in function provided by the Modelica
modelling and simulation environment Dymola [4].

5.1 Interpolation scenario
Consider a body . The typical animation scenario for
 is depicted in Fig. 8. As stated in (1), the numerical
simulation of this modal body provides the position
vector r R and the orientation of the bodys reference
frame as well as the elastic displacements u (cc i ,t) of
a finite set of nodes c i on the body. The set of space
points that can be obtained from this information and
setting u (cc ,t)  0 is called simulation points set.
On the other hand, the preprocessor FEMBS provides a Wavefront file [14] that contains the mesh definition of the FE description in the undeformed state
with respect to the reference frame of the body. This
data is the basis for the flexible body animation. The
set of node points of this description is called animation points in this section.
The basic interpolation problem is discussed at
hand of the simple rectangular plate shown in Fig. 8.
The animation set consists of the points in the grid.
The simulation points are only the four corners of ,
that is,
c 1 = (0, 0, 0), c 2 = (1, 0, 0),
89

Modelica 2006, September 4th-5th,2006

A. Heckmann, M. Otter, S. Dietz, J.D. Lpez

c 3 = (0, 1.3, 0), c 4 = (1, 1.3, 0)
and we define as deformation field u (cc i ,t) the following
u 1 = (0, 0, 0), u 2 = (0, 0, 0),
u 3 = (0, 0, 0), u 4 = (0, 0, sin 20t)
This is the typical scenario for animation of flexible bodies. The discretisation of a flexible body, in
the general case, ends up with a set of nodes such that
the error of the FE discretisation is minimised. Then,
a modal analysis is performed. For some special geometries, the resulting modes can be deduced in closed
form on c , but it is a difficult task in general, [9]. That
is why in general, each mode is defined in discretised
Figure 9:
Interpolation result using the
form, i.e. by the related displacements that are given at
ModalBodyVisualizer
the node points only.
With these constraints in mind, the visualiser used
in FlexibleBodies meets the following design criteria 5.2 ModalBodyVisualizer in Flexible The solution of the equations of motion results
in the displacements u i at simulation points c i for
t  t0 . The visualiser has to determine the absolute position of the animation points whereas the
instantaneous positions of the simulation points
and the positions the animation points in the undeformed configuration are given.
 The topological information is just provided for
the animation points. That is, the simulation point
set is just a set of non-structured points in R 3 .
 The ModalBodyVisualizer uses a special
interpolation technique that results in visually
appealing images under the assumption that the
simulation and animation point sets describe an
elastic deformation field. No general interpolation technique (like polynomial interpolation or
splines) is used. Instead, an approach inspired by
potential theory applied to elasticity is used, [8].

Bodies library

To show how ModalBodyVisualizer works, we
applied it to  in the setup described before. The results are depicted in Fig. 9. The body  is originally
defined in the plane xy, The outer most right point (cc 4 )
is now moved up and down.
The initial position is depicted in the left upper
figure. Then, when the elongation is maximally positive in the y-axis in the right upper figure. After some
time, the deformation is maximally negative, depicted
in the left lower figure. Finally, and to give some feeling about the animation, we present a frame with 4
past positions.
In this example, 165 nodes are interpolated from
the information in the four corners of the rectangle.
More general interpolation techniques are not so suitable for elastic deformation fields. The main reason is
the lack of smoothness and loss of connectivity in the
single body, making artificial cracks, peaks or weird
artifacts to be shown as part of the simulation.
Taking just the simulation point set for animation
can make hard to imagine the body behaviour, so a
larger set of animation points is needed for good visualisation.

6 Example Models
The DLR FlexibleBodies library contains several exFigure 8: Interpolation problem setup with the rectan- amples that demonstrate the use of the provided capagle plate
bilities.
The Modelica Association

90

Modelica 2006, September 4th-5th,2006

The DLR FlexibleBodies Library to Model Large Motions of Beams and of Flexible Bodies Exported from Finite
Element Programs

Slider Crank Model

a

y

n={0,0,1}
a

b

revolute1

n={0,0,1}
actuatedRevolute

world

b

conrod

n={0,0,1}
a

b

4

0.04

2

0.02

0

0

f [N]

crank

x [m]

constSpeed

revolute2

conrod: q []

2
x

prismatic
n={1,0,0}
a

b

0.02

crank: q []
slider
a

friction force [N]

4

b

0

friction

Figure 10: Diagram layer of the slider crank model.

0.04

slider position [m]

r={0.1,0,0}

2

4

time [s]

6

8

10

Figure 12: Slider Crank simulation results.

One of theses examples is a model of a slider
crank mechanism with two beam instances that represent the crank and the conrod. The crank rotates with
constant angular velocity.
Gravity forces are applied to all bodies of the system and an additional Coulomb friction force acts on
the slider that has one translational degree of freedom.
The bending behaviour of the conrod is represented by one mode that is related to 1 Hz eigenfrequency, while the crank bending mode corresponds to
3.9 Hz eigenfrequency. The model aligns with an example from literature and may therefore also be used
for verification purposes [9, Sec. 6.5.5].
Figure 10 depicts the graphical set-up of this
model in Modelica. The model 3D animation is shown
in Figure 11, where the menu option to show an additional exaggerated displacement field beside the exact
in-scale deformations is activated.
Fig. 12 shows the simulation results of this plane,
closed-loop mechanism with discontinuously applied
friction force. For the integration of the 10-s-scenario
0.671 CPU-s were spent with 106 integration tolerance on a 1.6 GHz Intel Pentium Laptop with WindowsXP.

6.2 Buckling of a beam

Figure 13: Set-up of the model Beam Buckling.
Considered is a bending beam with 18.8 Hz eigenfrequency that is supported but not clamped on both
ends. At one end an external force is applied and is
increased linear in time until the classical Euler buckling force (in this case: 16.6 kN ) is reached. This is
the scenario of the model Beam Buckling of Fig. 13.
It is supposed to document that the present approach
is capable to cover the bending behaviour of the beam
until buckling occurs, see Fig. 14. This requires to include stress stiffening terms in (6) that originate from
the second order displacement field description, here.
Consider the physical force vector f  R3 that is
applied on the structure at the point c f . The equations
of the model Beam Buckling then get the form of (7)
whereas f q has to be defined using (4) and the Jacobian J :
f q = JT f

(12)

qT x
uu (cc f ,t)
= c f +  qT y  .
with J :=
qq
qT z c


Figure 11: Animation of the slider crank model. The
grey animations are scaled versions of the red animations and exaggerate the deformations of the beams.
The Modelica Association

q []

6.1



f

91

Modelica 2006, September 4th-5th,2006

A. Heckmann, M. Otter, S. Dietz, J.D. Lpez

6.3 Helicopter Rotor

Figure 14: Animation of the model Beam Buckling in
the instant the bifurcation occurs.
Consequently, an increasing force f may be additionally amplified by the increasing deflection q , so
that the stability of the system may be affected. This is
in particular the case for axial loads on slender beams
as it is given in this model.
Since the deformation behaviour is not determined beyond the bifurcation point, an additional
small harmonic excitation torque with 1 Nm and 1 Hz
is applied at the other end at the beam. This is necessary to ensure that the buckling actually occurs and
can be animated as it is done in Fig. 14.
The results of the simulation are shown in Fig.
15. At the beginning the harmonic excitation hardly
influences the state of the beam. With increasing
thrust force the bending behaviour is weakened until
the buckling occurs after about 10 s. These results
perfectly correspond to the theoretical prediction. The
nonlinear characteristics of the beam are reproduced
until buckling. However, it should be pointed out that
beyond this point the model is no more valid.

Figure 16: Set-up of the model Helicopter Rotor.
The model Helicopter Rotor in Fig. 16 mainly
consists of a rheonom driven, cylindrical rotor base,
two joints and one blade. The rotor base rotates around
its cylinder axis that coincides with the global z-axis,
while the lag joint allows for a rotation around the local z-axis at the outer radius of the rotor base. The flap
joint defines a angular motion around the local y-axis
at the circumference of the rotor base.
In its initial state the rotor base does not move
and the flap stop, a bump stop modelled as a nonlinear
spring, applies the torque to counterbalance the gravity of the blade. A linear spring-damper element actuates according to the state of the lag joint. The 6 m
long blade is modelled as a flexible beam with 7 bending modes in its xz-plane and 2 bending modes in its
xy-plane so that a frequency range up to 270 Hz is covered.
Fig. 17 visualises the initial, static deformation
state of the blade which is dominated by the first xz-

20
thrust force [kN]
16

excitation torque [ Nm]

[]

8

[kN]

12

[Nm]

amplitude: q * 500 []

4
0
0

2

4

6
time [s]

8

10

Figure 17: 3D-View: Helicopter Rotor in its initial
state with red in-scale and grey exaggerated deflection.

Figure 15: Simulation results: Buckling of a beam.
The Modelica Association

92

Modelica 2006, September 4th-5th,2006

The DLR FlexibleBodies Library to Model Large Motions of Beams and of Flexible Bodies Exported from Finite
Element Programs

ear spring-damper element. Generally, all modal amplitudes decrease with the increasing angular velocity
and clarify its stabilising influence. Note that the stabilising effect again relies on the second order description (4). Neglecting these terms would lead to completely wrong results for this scenario.

flap joint angle [ ]

[ ]

0

[rad s2]

5

5

2

drive acceleration [rad s ]

6.4 Piston Rod
lag joint angle [ ]

10

15
0

2

4

time [s]

6

8

10

Figure 18: Time plot of joint variables of the model
Helicopter Rotor.
Figure 20: ANSYS finite element model of a piston rod.

bending mode at 7.9 Hz. The design, the geometrical
and physical parameters of the model correspond to a
typical helicopter configuration of the 1960s, see [7].
The result plot Fig. 18 shows the applied, smooth
rotor drive acceleration of the simulated start-up scenario. The flap joint angle tends against zero with
increasing rotor rotation so that the blade moves towards its vertical alignment. The instantaneous lag
joint angle is associated to the torque applied by the
linear spring-damper element witch transmits the drive
torque to the blade.
Fig. 19 presents the dominance of 7.9 Hz mode
at the initial static configuration. The plot of xy-plane
bending modes clearly correspond to the lag joint plot
which is again due to the torque applied by the lin-

0.05

In order to demonstrate the use of DLR FlexibleBodies library with body data that originate from finite
element data, a simplified piston rod was modelled in
Ansys with 2.788 tetrahedral elements of type Solid95
[1] and 15.492 degrees of freedom, see Fig. 20.
The model was preprocessed in FEMBS and three
eigenmodes with 809 Hz, 1040 Hz and 1244 Hz eigenfrequency were selected to represent the deformation
field of the piston rod on the multibody side. 97 of the

5

0.03

3

4

4

bending in xyplane: q * 10 []

bending in xzplane: q []

7.9 Hz
0.04

0.02

78 Hz

0.01 26 Hz

1

53 Hz

252 Hz

0
0.01
0

2

0

2

4

time [s]

6

8

1
10

Figure 19: Plot of modal deformation amplitudes q(t)
for 2 bending modes in xy-plane (78 Hz, 252 Hz) and Figure 21: Modelica 3D-View of one cylinder com3 bending modes in xz-plane (7.9 Hz, 26 Hz, 53 Hz). bustion engine with flexible piston rod.
The Modelica Association

93

Modelica 2006, September 4th-5th,2006

A. Heckmann, M. Otter, S. Dietz, J.D. Lpez

80

8

gas force

6

20

4

angular
velocity

2
0

0
809 Hz: q[1]
1244 Hz: q[3]
0.2

0.3

8 Acknowledgements

2

1040 Hz: q[2]

0.1

6

40

q * 10 []

 [rad / s]

f [hN]

60

4
0.4
time [s]

0.5

0.6

A first preliminary version of the ModalBody model
was implemented by Gerhard Schillhuber with advice
by Professor Dr. Oskar Wallrapp.
We would like to thank Hans Olsson from Dynasim for helping with some implementation details.
This work was partly funded by the Bayerisches
Staatsministerium fur Wirtschaft, Verkehr und Technologie which supported the Conceptual Design
Labratory (CDL) project. The authors are grateful for
this support.

0.7

Figure 22: one-cylinder-combustion engine: simulation results.
5164 finite element nodes were selected in FEMBS so
that the animation scheme has to map the motion of 97
simulation nodes on 5164 animation nodes.
Fig. 21 gives a 3D-View of a one cylinder combustion engine where the flexible piston rod is assembled. The dark-red, solid structure depicts the unscaled deformation state while the blue mesh exaggerate the deflections of the piston rod.
A start-up manoeuvre of this engine has been simulated applying a simplified gas force and no load. The
plot of the gas force and the increase of the angular
velocity of the crank shaft are given in Fig. 22. For
each of the eigenmodes the related modal amplitude
as function of time is plotted there as well.

7

References
R
[1] ANSYS
Release 7.1 Theory Reference, ANSYS, Inc., Canonsburg, USA, 2003.

[2] H. Bremer and F. Pfeiffer:
Elastische
Mehrkorpersysteme, TeubnerVerlag, Stuttgart,
1992.
[3] S. Dietz: Vibration and Fatigue Analysis of
Vehicle Systems Using Component Modes,
Fortschritt-Berichte VDI Reihe 12, Nr. 401,
VDIVerlag Dusseldorf, 1999.

Conclusion

This paper presents the new DLR FlexibleBodies library, that is based on the Standard Input Data (SID)
file format for flexible bodies. The library provides the
intrinsic capability to generate this data for beam-like
bodies. For more general bodies, this data has to be
supplied by an external tool on the basis of an available
finite element model. This preprocessing is performed
using the FEMBS-Software of the INTEC GmbH in
Wessling, Germany, that supports all major FE programs.
The animation of general flexible bodies is based
on new features provided in Dymola. Especially,
wavefront files are supported in Dymola and a sophisticated algorithm is included to map the movement of
simulation to animation nodes.
Furthermore, the mechanical background and the
graphical user interface of the FlexibleBodies library
The Modelica Association

have been presented. In several application examples,
the usage of the model classes Beam and ModalBody
have been demonstrated.
As a final conclusion it may be stated that this library opens new chances for the set-up of multibody
models in Modelica since flexible components may
now be included and so that future application fields
are numerous.

[4] Dynasim: Dymola Version 6. Dynasim AB,
Lund, Sweden, 2006, http://www.dynasim.se/
[5] FEMBS: http://www.simpack.com/downloads/pdf/datasheet fembs.pdf
[6] A. Heckmann. The modal multifield approach
in multibody dynamics. Fortschritt-Berichte VDI
Reihe 20, Nr. 398. VDIVerlag, Dusseldorf,
2005.
[7] W. Just:
Hubschrauber und Vertikalstartflugzeuge,
Verlag Flugtechnik Stuttgart,
Stuttgart, 1963.
[8] Perdomo, Y. Reproducing kernels and Potential
theory for the Bergman Spaces Doctorate thesis
in Mathematics, Lund University, 2004.
94

Modelica 2006, September 4th-5th,2006

The DLR FlexibleBodies Library to Model Large Motions of Beams and of Flexible Bodies Exported from Finite
Element Programs

[9] R. Schwertassek and O. Wallrapp: Dynamik
flexibler Mehrkorpersysteme, Vieweg Verlag,
Braunschweig, 1999.
[10] SIMPACK: http://www.simpack.com.
[11] A.A. Shabana: Dynamics of Multibody Systems, Cambridge University Press, Cambridge,
2nd ed., 1998.
[12] S. Timoshenko: Vibration Problems in Engineering. D. Van Nostrand, Princeton, 1955.
[13] O. Wallrapp: Standardization of Flexible Body
Modeling in Multibody System Codes, Part 1:
Definition of Standard Input Data, Mechanics of
Structures and Machines 22(3):283-304, 1994.
[14] Wavefront: http://www.fileformat.info/format/wavefrontobj/egff.htm.

The Modelica Association

95

Modelica 2006, September 4th-5th,2006

A. Heckmann, M. Otter, S. Dietz, J.D. Lpez

The Modelica Association

96

Modelica 2006, September 4th-5th,2006

3D Flexible Multibody Thin Beams Simulation in Modelica with the Finite Element Method

3D Flexible Multibody Thin Beam simulation in Modelica with the
Finite Element Method
Xabier Murua, Felix Martinez, Aron Pujana, Jon Basurko, Juan Manuel Pagalday
Ikerlan S.Coop.
P. JM. Arizmendiarrieta N2, Mondragn (Basque Country), Spain
{xmurua, Felix.Martinez, APujana, JBasurko, JMPagalday}@ikerlan.es

one particular scenario: a beam containing two connection points, one at each end.

Abstract
This paper presents the development, simulation and
validation of 3 dimensional flexible beam models
using Modelica. The models are based on finite element method (FEM) application, following mathematical calculations proposed by Shabana [2], and
are 3D extensions to the 2D model developed by F.
Schiavo [3]. The element formulation is independent
of applied boundary conditions, making the element
suitable for any 3D multibody simulation.
All models use standard connectors defined in the
Modelica multibody library, thereby guaranteeing
full compatibility with library components. Mathematical modelling details are fully analyzed, indicating motion equation development. Models also feature a graphical interface, and visualization of simulation outcomes using the same 3D environment as
the multibody library, providing the user with immediate visual feedback. Finally, models are analyzed
and validated by means of selected simulation experiments, with reference to theoretical predictions
and comparison with results obtained with commercial FEM code.

In this paper the linear elasticity theory for thin beam
modelling are considered, ignoring shear deformation effects and assuming uniform cross sectional
properties throughout the element length. Cross sectional dimensions compared to element length rigid
configuration deflection are also assumed to be
small.
Taking into account the object-oriented capability of
the Modelica language, some parametric features
have been implemented in the model, for example:
cross sectional beam shape (rectangular or cylindrical), hollow or full section, and mesh length density
(from 1 to N elements). This provides a parametric
mesh of the element enabling computation of points
along the element length and precisioncomputational cost control.
The implementation of other shape sections can be
easily carried out, but are not included in the model
in order to simplify the user interface menu.
It has been also developed a model that for importing
mass and stiffness matrix values from condensed FE
models to 12 degrees of freedom (dof).

Keywords: flexible beam; Multibody; FEM; finite
element formulation

1

Introduction

2

Whilst 2D flexible model development is widely
covered by literature [2], its application to 3 Dimensional models normally only goes as far as the initial
stages of the mathematical development. This paper
presents the application of 2D model redevelopment
and implementation [3] to 3D models using Modelica. At times shall descriptions made by Schiavo [3]
are used.

Consider a generic multibody system (Figure 1). The
position, in body coordinates, of a point in a specific
deformable body is expressed as follows:
u = u0 + u f

(1)

where u0 is the undeformed (i.e., rigid) position
vector and uf is the deformation contribution to position (i.e., the deformation field).

With the aim of creating a reusable parametric element, is has been considered only the modelling of

The Modelica Association

Degrees of Freedom (dof)

97

Modelica 2006, September 4th  5th

X. Murua, F. Martinez, A. Pujana, J. Basurko, J.M. Pagalday

[

q = qr q f

Xi2
Xi3

Xi1
ui
O

O

Ri

P

uif

3

X1

X3

(4)

Motion Equations

 m RR





Figure 1: Flexible body reference systems

~
S tT

&& 
S  R
  
I f      =
m ff   q&& f 

I 

 O3  QvR  QeR 


   
=  O3  +  Qv  +  Qe 
  K ff q f  Qvf  Qe f 

   


The mathematical description of a bodys generic
deformation requires that the deformation field belong to an infinite dimensional functional space, requiring, in turn, an infinite number of deformation
degrees of freedom.

(5)

Equations are valid for a general deformable body,
though many of the quantities involved (e.g., the Kff
matrix) depend on specific body characteristics such
as the shape and material properties, but do not depend on element deformation.

In this paper, the deformation field is described by an
approximation to the functional basis space it belongs to, assuming that such space has a finite dimension, say M, so that vector uf can be expressed
by the following finite dimensional product:

The mass matrix obtained using the formulation of
[3], takes the following form:

(2)

where S is the [3M] shape function matrix (i.e., a
matrix of functions defined over the body domain
and used as a basis to describe the deformation field
of the body itself) and qf is the M-dimensional vector
of deformation degrees of freedom.

i
 M RR

T
M i =  M i R
 i T
 M fR

The position of a point in a deformable body can
then be expressed in world reference as follows:
r = R + Au = R + A(u 0 + Sq f ) = R + Au 0 + ASq f

T

f

The equations are solved using a classical Lagrangian approach. The equation for flexible element
motion, in body axes, can be expressed as [2],[3] (a
general demonstration to motion equations in [2] and
in more detail in [3]):

ri

u f = Sq f

T

where R and  represents unreformed body position
and orientation angles and qf is a vector containing
flexible degrees of freedom.

i

ui0
X2

] = [R  q ]

M Ri 
i
M 

M

i T
f

i

M Rf

M i f 

M iff 

(6)

Where mass matrix components (6) are calculated in
the following manner, assuming that the body is a
3D elastic continuum, with constant cross-sectional
properties, isotropic material behaviour and is perfectly elastic.

(3)

where R is the vector identifying the origin of the
body local reference system and A is the rotation matrix for the body reference system.



i
M RR
=  i IdV i
Vi



T
M Ri  = M iR =  Ai   i u~ i dV i  G i
V i




The representation of a generic deformable body in
world reference requires then 6+M d.o.f. (i.e., 6 corresponding to rigid displacements and rotations and
M to deformation fields):



i
M Rf
= Ai  i S i dV i = Ai S i

(7)
(8)
(9)

Vi

The Modelica Association

98

Modelica 2006, September 4th  5th

3D Flexible Multibody Thin Beams Simulation in Modelica with the Finite Element Method

 (

i
M 
=  i A i u~ i G i

) (A u~ G )dV
T

i

i

i

(10)

the beam and the height and width they are not taken
into account.

(11)

It also implies that the following terms vanish in the
mass matrix formulation (see appendix B)

i

Vi

M if = G i

T

  u~ S dV
i

i

i

i

Vi

T



i
M iff =  i S i S i dV i = S11i + S 22
+ S 33i

(12)

ij



Q =   da  = 0
a


Vi

ij

Where the 3D shape matrix is:

ij



Q =   da  = 0
a

ij

1 

 6   ( )2 

 6   ( )2

0

 1  4 + 3( )2 l

2
1  4 + 3( ) l
= 


2
 6   + ( ) 
 6   + ( )2 


0

2

2
+
3( ) l


  2 + 3( )2 l

[
[

S ij

T

0

]
]

[
[

0

1  3( ) + 2( )
2

3

0
1  3( ) + 2( )
2

0
 (1   )l

3

 (1   )l

]
[  + 2( )
0
] [  2( ) + ( ) ]l
0

[
[

2

2

[
[

3

0

3( )  2( )

3

l

[( )  ( ) ]
2

0

[ ( ) + ( ) ]l
2

0
2

 l

]
]

3

0

3( )  2( )
2

 ( )

3

0

]
]

3

3

0







l












ij

]

ij

ij

ij

I

u5

u12



u7

m
3
0

0

0
0

0
= m

6
0

0
0

0
0


u10

u9

u4
u6

X3

Figure 2: Beam extremities

By means of this assumption the general matrices are
simplified applying the following assumption:

 ij =
 ij =
 ij =

x1ij
l ij
x 2ij
l ij
x3ij
l ij

(21)



T
 S1 S1dV  =
V


A
u3



=   da  = 0
a


Following the procedure described in [3] and the
matrix in appendix B, one can verify that the integrals that appear in the expression of Sklij are given
by:

B
X1

(20)

ij

u11
u2

(19)

ij



2
I =    ( ) da  = 0
a


(13)

u8

X2

(18)

ij



2
I  =    ( ) da  = 0
a

ij

To be able to perform the calculation at the right
beam extremity (point B, Figure 2) it has been supposed that it is calculated exactly at the average point
of the element in order to simplify matrices that intervene in the mass matrix calculation.

u1

(17)

=1

(14)

=0

(15)

=0

(16)

m

0 0 0 0 0
6
0 0 0 0 0 0 0 0 0

0 0 0 0 0 0 0 0 0

0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0

0 0 0 0 0 0 0 0 0
m
0 0 0
0 0 0 0 0

3
0 0 0 0 0 0 0 0 0

0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0

0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0

ij

0 0 0 0 0
0 0
0 0
0 0
0 0
0 0
0 0
0 0
0 0
0 0
0 0
0 0

(22)

In the end, by using these assumptions, the beam is
simplified to a line due to the fact that the length of

The Modelica Association

99

Modelica 2006, September 4th  5th

X. Murua, F. Martinez, A. Pujana, J. Basurko, J.M. Pagalday
ij

ij



T
 S 2 S 3 dV  =
V




T
 S 2 S 2 dV  =
V






0
0
13m

0
35
0
0

0
0

0
0
0 11ml

210
=
0
0

9m
0
70

0
0
0
0

0
0

13ml
0


420


0 0 0
0 0 0
0 0 0
0 0 0
0 0 0
0 0 0
0 0 0
0 0 0
0 0 0

0
11ml
210
0

0

0
0
m(l )2
105
0
13ml
420
0

0
0

0
9m
70
0

0 0 0

0
0
13ml
420
0
13m
35
0

0 0 0
0 0 0

0
0

0
0
0
0

0 0 0
0 0 0

0
0
m(l )2
0 0 0 
140

0 0 0
0 0 0

0 0 0
0 0 0
0 0 0
0 0 0

0
0

0
0
11ml
0 
210

0 0 0
0 0 0
0 0 0

0 
13ml 

420 
0 

0 

0 
m(l )2 

140 
0 
11ml 


210 
0 
0 

0 
m(l )2 

105 

ij

(23)

0
0
0
0
0
0
0
0
0

0 0 0

0

0
11ml

210
0

0

0

0

0

0

0

0
11ml
210
0
9m
70
0

0

0

0

0
0
0

0

0
13ml
0 
420

0

0 0 0

0
9m
70
0

0

0 0 0

0

0

0

0 0 0

0 0 0

0
13ml
420
0
13m
35
0

0

0

0
2
m (l )

105
0
13ml

420
0

0

0
2
m (l )
140
0
11ml
210
0

0

0

0 0 0

0

0

0

0

0
2
m(l )
140

0 0 0

0

0
0
0

0

0 0 0

0 0 0
0 0 0
0 0 0

0
11ml
0 0 0 
210

0
0

0
0
0

0
13ml
420
0

0
0 

0
2
m(l )
105

0

0
0

0

0
0

0

0

0
0

0

0


ij

(26)

ij



0

0

0

0
13m
35
0



ij

0
0

0



T
 S1 S 2 dV  =
V




T
 S 3 S3 dV  =
V

0
0

0

0

0

0
= 
0

0

0
0

0

0

0

0
0

0

0
0

=
0

0

0
0

0

0


0
0
13m
55
0
11ml

210
0
0
0
9m
70
0
13m
420
0

0
0
0
0
0
0
0
0
0
0
0
0

0
0
11ml

210
0
2
m(l )
105
0
0
0
13ml

420
0
2
m(l )

140
0

0 0 0
0 0 0
0 0 0
0 0 0
0 0 0
0 0 0
0 0 0
0 0 0
0 0 0
0 0 0
0 0 0
0 0 0

0
0
9m
70
0
13ml

420
0
0
0
13m
35
0
11ml
210
0

0
0
0
0
0
0
0
0
0
0
0
0

0
0
13m
420
0
2
m(l )

140
0
0
0
11ml
210
0
2
m(l )
105
0

0
0
0

0

0

0
0

0

0
0

0

0

ij

(24)


0
0

0

0
0

= 0
0

0

0
0

0

0

7m
20
0

0 0 0

ml
20
0

0

3m
20
0

0

0 0 0

0

0

0

0 0 0

0
0

0 0 0
0 0 0

0
0

0
0

0
0

0 0 0
0 0 0

0
3m
20
0

0 0 0

0

0 0 0

0

0
7m
20
0

0 0 0

0 0 0

0
ml
30
0

0
0

0 0 0
0 0 0

0
0

0
0

0
0

0 0 0
0 0 0

0

0 0 0

0

0

0

0 0 0

0

0 0 0

0

0

0

0 0 0

0 0 0

0

0

ml 
30 
0 
0 

0 
0 

0 
ml 

20 
0 

0 
0 

0 

0 

ij

0 0 0 
0 0 0

0 0 0
0 0 0

(27)

It can be seen that the mass matrix depends on element deformation, and needs to be re-calculated for
each simulation instance.

ij



T
 S1 S3dV  =
V





0
0

0

0
0

= 0
0

0

0
0

0
0


0
0
0
0
0
0

7m
20
0
0

0
0

0
0
0
3m
20
0
0

0
0
0

0
0
0

0

0 
0
0

ml
20
0
0

0
0
0

0 0 0
0 0 0
0 0 0

3m
20
0
0

0 

0
0
0
0
0

0
0
0
ml
20
0
0

0
0
0

0
0
0

0
0
0
ml
0 
30
0
0
0
0

0 0 0
0 0 0
0 0 0
0 0 0
0 0 0

0
0
0
7m
20
0
0

0
0
0

0 0 0
0 0 0
0 0 0

0
0
0

0
0
0

0 0 0

0
0

0

ml
30
0
0


0
0

0

0
0

0
0

0

0
0

0
0

The speed quadratic vector is a non-linear function
of the widespread system of coordinates and speeds
and includes the Coriolis effect and the effect of centrifugal forces.

ij

(Q )

i
v R

(25)

(Q )

i
v 

(Q )

i
v f

( )

2
=  A i  w i S ti + 2 w j S j q& if 


i
wi
= 2G iT I i w i  2G iT I if q& if  G iT I 

(28)

( )

2
=   i S iT  w i u i + 2 w& i u if   dV i
 
 
i



V

3.1

The element point of view

The finite element method is based upon a discretization of the beam into N elements. It is then possible
to define the local dimensionless abscissa as =x/l,
where x is the longitudinal local coordinate and l is
the element length.
For a single element, the generic equations of motion
(5) can be expanded as follows:
The Modelica Association

100

Modelica 2006, September 4th  5th

3D Flexible Multibody Thin Beams Simulation in Modelica with the Finite Element Method

u f ,el

 u f 1,el 


= u f 2 ,el  = S el q f ,el
u f 3,el 




 q f 1,el 

q


 f 2 ,el 

 q f 3 ,el 




 q f 4 ,el 

 q f 5 ,el 




 q f 6 ,el 
T
q f ,el =  q


 f 7 ,el 

 q f 8 ,el 



 q f 9 ,el 

 q f 10 ,el 




 q f 11,el 

q


 f 12 ,el 



 S el1 

 S = S 
el
 el 2 

 S el 3 


where u0j is the position of the root of the jth element,
Sel is the shape functions matrix defined by (31), Bj is
the so-called connectivity matrix and qf is a vector
containing the deformation degrees of freedom for
the whole beam. Matrices Bj have the following
form:

[

B j = O6 ,3( j 1)

(29)

The Modelica Association

Modelica Implementation

Figure 4: Component icon

The motion equations for the entire beam can be obtained by assembling the motion equations for beam
elements as defined in the previous subsection. The
body reference system will be the local reference
system located at the root of the first element, so that
the rigid degrees of freedom, common to all the elements, will refer to such a coordinate system.
Let then m and L be the mass and length of the entire
beam, and N the number of elements used, so that
r
l=L/N. With X indicating the reference system unit
vector along the beam axis, the expression of the
generic position uj of a point of element j can be expressed as:

]

(32)

The finite element model formulation has been implemented using the Modelica language, creating
thus a new component, called FlexBeamFem3D
(Figure 4). The component interfaces are two standard mechanical flanges from the new MultiBody
library [4]. The choice of connector makes the component fully compatible with the Modelica Multibody library, so that it is possible to directly connect
the flexible beam component to the predefined models, such as mechanical constraints (revolute joints,
prismatic joints, etc.), parts (3D rigid bodies) and
force elements (springs, dampers, forces, torques).

Finite Element Method Equation Assembly

[

(31)

The connectivity matrices are used to relate vector qf,
which contains the deformation degrees of freedom
for the entire beam, to the corresponding jth element,
according to the expression:

4

Figure 2 depicts the element coordinate systems associated with the deformation degrees of freedom:
qf1,el and qf7,el are associated with axial compression,
qf2,el and qf8,el with transversal displacement, qf3,el and
qf9,el with Z axis displacement, qf4,el and qf10,el with
beam extremities rotation around the X axis, qf5,el and
qf11,el with beam extremities rotation around the Y
axis and qf6,el and qf12,el with beam extremity rotation
around the Z axis.

r
u j = u0 j + Sel B j q f =  j l + ( j  1)l X + Sel B j q f

]

O6 ,3( N  j ) ,  j = 1,K , N

q f ,el j = B j q f

where the subscript el is used to refer the quantities
of a single element.

3.2

I6

(30)

The models also have a graphical interface, with a
visualization of simulation outcomes within the same
3D environment used in the Multibody library, providing the user with immediate visual feedback.
Mathematical modelling details are partially indicated below in Modelica characteristic language:
parameter SI.Density rho=7800 "Material Volume
Density";
parameter SI.Length L=0.2 "Beam Length";
parameter SI.Height a=0.005 "Height of section";
parameter SI.Breadth b=0.02 "Breath of section";
parameter SI.ModulusOfElasticity E=210e9 "Material Youngs modulus";
parameter SI.ShearModulus G=8.077e10 "Material
Shear modulus";

101

Modelica 2006, September 4th  5th

X. Murua, F. Martinez, A. Pujana, J. Basurko, J.M. Pagalday

parameter SI.SecondMomentOfArea J1=7.025e-10
"Cross sectional inertia 1";
parameter SI.SecondMomentOfArea J2=3.33333e-9
"Cross sectional inertia 2";
parameter SI.SecondMomentOfArea J3=2.08333e10 "Cross sectional inertia 3";
parameter Real Alpha=1e-3 "Rayleigh structural
damping proportional to mass [sec^-1]";
parameter Real Beta=5e-5 "Rayleigh structural
damping proportional to stiffness [sec]";
parameter Integer N(min=2) = 2 "Number of Elements";

Figure 5:Beam 3D

Beam displacement and rotation analytical form calculation follows:

Dynamic equations for the 3D flexible beam model
are as follows:
[m*identity(3), transpose(StbarCross), Sbar]*[aa g_0; za; ddqf] = QvR +matrix(fa + fb_a);
[StbarCross, Ithth_bar, Ithf_bar]*[aa - g_0; za;
ddqf] = QvAlpha + matrix(ta + tb_a +
cross(({L,0,0} + S1*B[N, :, :]*qf), fb_a));

(33)

ML
=
=
EI

2EI
L
L
= 2
EI

(34)

Variable
Rho (kg/m3)
L (m)
a (m)
b (m)
E (Pa)
G (Pa)
J1(m4)
J2(m4)
J3(m4)
Alpha
Beta
N
Applied moment M (N.m)

Using the degrees of freedom qf and the derivate of
degrees of freedom dqf, information can be passed
from Frame B to Frame A as indicated in the following equations:
FrameB.R=Modelica.Mechanics.MultiBody.Frames.
absoluteRotation(FrameA.R, R_rel);

5

2EI 2
L
L
= L
2 EI

Variables used in the simulation are expressed in the
following table:

[transpose(Sbar), transpose(Ithf_bar), mff]*[aa g_0; za; ddqf] = Qvf + Qef - matrix(Kff*qf) - matrix((Alpha*mff + Beta*Kff)*dqf);

R_rel=Modelica.Mechanics.MultiBody.Frames.axes
Rotations({1,2,3},{qf[(6*N)-2],qf[(6*N)-1],qf[6*N]}
,{dqf[(6*N)-2],dqf[(6*N)-1],dqf[6*N]});

M L2
=
=
2E I

Value
7800
1
0.02
0.06285
210e9
8.077e10
1.33242e-7
4.138e-7
4.19e-8
1e-3
5e-5
2
2**E*I/L

The simulation has been performed by connecting 10
elements in series (Figure 6), to overcome the assumption of small displacements in the internal development of the element.

Simulations

The different flexible beam models have been validated by several simulation analyses performed in
the Dymola simulation environment [1] and compared with a general purpose commercial FEM code
(ANSYS).

5.1

First example (Static)

As a preliminary result, a 3D simulation has been
performed applying movement to the free extremity
of a cantilever beam (Figure 5).

The Modelica Association

102

Modelica 2006, September 4th  5th

3D Flexible Multibody Thin Beams Simulation in Modelica with the Finite Element Method

Z
X

g

Figure 8: Articulated pendulum

Figure 9 shows the comparison of the results obtained with Dymola, ANSYS code and considering a
rigid element. The mechanical properties of the beam
are the same as in the previous example except L
being 0.2. This simulation can be performed with
one or more elements because the large displacement
of the end is mainly governed by the revolute joint,
the flexibility acting only in the longitudinal direction of the beam.

Figure 6: Modeling in Dymola

Figure 7 shows the results obtained where the 3D
position of the beams extremities is plotted at the
end of the simulation. As expected, X and Y positions describe a circle since as this was verified in
the theoretical analysis. The same results are obtained, irrespective of the direction of movement
applied.

0
-0.25

-0.2

-0.15

-0.1

-0.05

0

0.05

0.1

0.15

0.2

0.25

-0.05

-0.1

-0.15

-0.2

0.35
-0.25

Rigid
Flexible DYMOLA
ANSYS

0.3

Figure 9: Results obtained with different programs

0.25
0.2

Between the rigid model and the flexible model there
is a lack of coordination in frequency where the rigid
element is advanced with regard to the flexible
model. The results concur with those obtained in
ANSYS.

0.15
0.1
0.05
0
-0.35

-0.25

-0.15

-0.05

0.05

0.15

0.25

0.35

6

Figure 7: Results obtained

By means of this simulation correct element response to static flexion has been obtained.

5.2

Second example (Dynamic)

In this example (Figure 8) the dynamical operation
of a flexible pendulum articulated to one of its ends
has been analysed. The initial position of the flexible
element is horizontal (X direction) and gravity is
applied in the vertical direction (Z direction).

The Modelica Association

Generalization and model versions

In the general and parametric 3D model created,
modifications have been performed in order to introduce mass and stiffness (matrices calculated for example using ANSYS). In this case the matrix of mass
becomes constant along the simulation as well as it
happens with the matrix of stiffness and besides
Coriolis's terms though they appear are not updated.
By means of this simplification the computational
cost decreases because the reduction in the calculation of the equations of movement. It must be
pointed out that a calculation error is made, however
this error could be fully undertaken.

103

Modelica 2006, September 4th  5th

X. Murua, F. Martinez, A. Pujana, J. Basurko, J.M. Pagalday

7

Conclusions

B Mass Matrix Components

To date, there has been no evidence of a Dymola
model that can simulate flexible mechanisms in 3D
and therefore the importance of the model created, as
its correct operation has been verified, both statically
and dynamically.
This development in flexible element simulation,
based on Modelica programming language, enables
the simulation of flexible 3D mechanisms and the
integration of these model into other disciplines, for
example, control tasks.
The only drawback to the implemented model is the
large number of equations required to solve the problem, this slows down simulation and requires powerful simulation equipment. Although, compared to
other simulation programs, the 3D flexible model
created Dymola is about 100 times faster than the
same model simulated in ANSYS.
To overcome this limitation a simplified model has
been implemented that considers a fixed mass matrix
and a single element (no discretisation), that speeds
up simulation, and is suitable for preliminary modeling steps.
The developed model can be easily implemented for
any type of constant shape along its length.
Future work will include non-constant shape beams
and the development of a model based on the assumed modes theory [3] considering free boundaries.
This flexible model will be used for the development
of a wearable robotics where the mechanism mass is
key.

A Structural Stiffness Matrix

K iff

 EA
0
 l

12 EI 3
 0
(l )3


0
 0

 0
0


0
 0


6 EI 3
0

(l )2
=
  EA
0
 l

12 EI 3

 0
(l )3


0
 0

 0
0


0
 0

6 EI 3
 0

(l )2




EA
l

0

0

0

0

0

0

0

6EI 3

12EI 2
(l )3

0

0

GJ1
l
0

0

0

0

4EI 3
l

0

0

0

0

0

EA
l

0

0

0

0

0

12EI 2
(l )3

0

6 EI 2
(l )2

0

0

0





6EI 2
(l )2

0
6EI
 22
(l )
0



GJ1
l

0


12 EI3

0

0

0

0

0

0

12 EI 2
(l )3

0

(l )

0

0

0

0

0

0

0

0

0

4 EI 2
l

0

0

0

6EI 2
(l )2

0

2 EI 2
l

0

0

0

0

0

0

12 EI 3
(l )3

0

0

0

0

0

12 EI 2
(l )3

0

6EI 2
(l )2

0

0

0

GJ1
l

0

0

6EI 2
(l )2

0

4 EI 2
l

0

0

0



2

6 EI 2
(l )2



6 EI 3
(l )2

0

2 EI 2
l

0

0

0

0

2EI 3
l

0

The Modelica Association





(l )

3

6 EI 3
(l )2

6 EI 3
(l )2





GJ1
l



6EI 2
(l )2
0



6 EI 3 

2
(l ) 

0 

0 

0 

2EI 3 
l 
0 

6 EI 
 23 
(l ) 

0 

0 


0 

4EI 3 
l 
0



 S 1T S 1 dV 
V




m


3

Q
l


2
 Q l



2

0

2
 Q  (l )
 12

2
Q
(
l
 )

  12
=
m


6

Q l

 
2

Q l

 
2

0

 Q  (l ) 2

12

 Q (l ) 2

12


ij

=





























3
2I  (l ) 

15 

6I  l
5
6 I  l

6I l

5
0



I  (l )



10
2
I  (l )






2

5
0
2
I  (l )

0

0 

10
lQ n

10
Q l

2
6I  l

2
6 I  l



5
6I  l



5
0

I  (l )

2



10
2
I  (l )

15
2
Q (l )

10
2
I  (l )

0

5
0
2
I  (l )

2 I  (l )

15
2
Q (l )

12
2
I  (l )

0

5
6I  l

0


0

10
0
3
I  (l )

30
3
I  (l )

0

10

symmetric
3

15
3
2I  (l )



0

10
2
I  (l )

10

2I  (l )

0

10
2
I  (l )

30




3

m

12
2
I  (l )



10
2
I  (l )



10
0
3
I  (l )
30



I  (l )
30

3
Q l

6I  l

2
Q l

5
6I  l

2
0
2
Q  (l )

3



6I  l

5
0

I  (l )

12
2
Q (l )
12

10



I  (l )
10

5
0
2
I  (l )

2

10

2



I  (l )

0

2I  (l )

0
0 

10

3

15
3
2I  (l )

2

15

ij

ij



T
 S 2 S 2 dV  =
V




0

13m
0
35

0
0
2

7(l )
Q
0 
20

0
0

11ml
0
210
= 0
0


9m
0
70

0
0
2

3(l )
Q
0 
20

0
0

13ml

0
420


0

(l )3

0

I

3

0

0

symmetric
0

(l )

3

0



0
0 
0
0
0
0

Q

20
0
2
3(l )
20
0
(l )3

0
Q

I

0

30

0
0

6

(l )3

0

0
0

Q

0

m(l )

2

105
0
13ml
420
0
(l )3
Q

30
0
2
m(l )

140

0
0
0
0 
0
0

13m
35
0
2
7(l )

0
Q

(l )3

0

20
0
11ml

210

I

3

0

0

(l )3

0

20

Q

0
0






















2
m(l ) 

105 

ij

ij



T
 S 3 S 3 dV  =
V




0
0

0


0


0

0
=
0

0

0


0


0

0

104

0

0

13m
55
2
7(l )
Q
20
11ml

210
0

0

0

0

0

0

0
9m
70

0

0
13ml

420
(l )3

Q
30
m(l )2

140
0

0
0
0

0
0
0
0

3(l )

2

Q

20
13m
420
0

symmetric

(l )3
3



(l )3
20
0

I
Q

3(l )
Q
20
(l )3
I
6
(l )3
Q
30
0
2

m(l )2
105
0

0
0 0
0 0 0
0 0 0
0 0 0
0 0 0
0 0 0

13m
35
7(l )2
Q
20
11ml
210
0

(l )3
3

(l )3
20
0

I
Q

m(l )2
105
0

























0

ij

Modelica 2006, September 4th  5th

3D Flexible Multibody Thin Beams Simulation in Modelica with the Finite Element Method
ij



T
 S 1 S 2 dV  =
V


References




7m
0
20


l
Q
0
2

l

Q
0
2
0
0

2
0 (l ) Q


10
2

(
l)
0 
Q
10
=

3m
0
20


l
0  Q
2

l

0  Q 
2
0
0

2
0  (l ) Q


10

2
(
l
)
0
Q
10


(l )2

0 

(l )2

0 
0

0
0
0
0
0
0
0

I 

2



0
0

Q

3



(l )2

I

2
0
(l )3

I

12

(l )3

I 
12
(l )2
Q

6
(l )2
I 
2
(l )2
I
2
0
3
(l )
I
12
(l )3
I 

12

ml

0

(l )2

0

Q

10

(l )2

0

10

3m

0

20

l

0

Q

2
l

0

2

0

0

0

0

0

0 

0

0

0

ml

0

0

30

(l )2

0 

10

(l )2

0 

10
0
(l )3

0
0 

60

(l )3

0

60

Q
Q

0
0
0

Q

Q

0
0

0

20

Q

0

0

0

10

6

(l )2

0 

Q

(l )2

(l )2



Q

0

20
l
 Q
2
l
 Q
2
0
(l )2
Q
10
(l )2
Q

10

0
0

0

0

I

0

12
(l )3

I

0

I 

0

Q

0

12

(l )2



3

(l )2
2

I 

0

I

0

(l )2
2
0



(l )

0

3

I

12

(l )3
12




2
(l )

Q 

10

2
(l )

Q 

10

0

(l )3
Q 

60
(l )3 
Q


60
ml 


20 

(l )2
Q 
10

2
(l )

Q 
10

0


0



0


0

I 

0

ij

[1]

ml



0

(l )3

0
0

I 

2
0

0 

Q
10
7m

0

(l )2



0

(l )2

2

Q

30

[2]

[3]

[4]

ij



 S 1T S 3 dV  =
V





0


0


0
0

0


0
=

0


0


0

0
0


0


7m

0

20
l

0

2
l

0
0
0

2

(l )

Q
Q
0

2

Q
10
(l ) 2
0 
Q
10
3m
0
20
l
0  Q
2
l
0  Q
2
0
0
(l )2
0 
Q
10
(l )2
0
Q
10

(l )2
3

(l )2

I

2

(l ) 2

I 

2

(l )

0

3

I 
12
(l )3

I
12
(l )2
Q
6
(l )2

I
2
(l )2

I 
2
0
(l )3

I 
12
(l )3
I
12

ml



Q



20

(l )2
10

(l )2
10
0

Q
Q

0
0
ml



(l ) 2
10

(l )2
10

30
Q
Q

2
l

0 0 0

2

0 0 0

0 0 0
0 0 0
0 0 0
0 0 0

Q
60
(l )3

Q
60

0 0 0
0 0 0

6

Q

(l )

2

(l )2

(l )

I 

2

Q



2

(l )

Q
10
7m

20
l
 Q
2
l
 Q
2
0
(l )2
Q
10
(l )2
Q
10

3



I



(l )



2

2
0

I
I 

2

60

Q

(l )3

Q
60
ml

Q

(l )2
(l )2

Q

10

0

I 

12

(l ) 2

Q

10

(l )2

3

12
(l )3

30

(l ) 2

0

2

10

I

ml



Q

(l )2

Q

0

0 0 0 

0

(l )3

20
l

0 0 0

0 0 0

(l ) 2

3m

0 0 0

20



(l )2
10

(l )2



10
0

(l )3

I 
12
(l )3

I
12

Q
Q

0
0


0


0


0
0

0


0


0


0


0

0
0

0


ij

0

0

0

0

0

0
0

0

0

0

0

0


ij

Dymola. Dynamic Modelling Laboratory. Dynasim AB, Lund, Sweden.
A. A. Shabana. Dynamics of Multibody Systems. Cambridge University
Press, 1998.
F. Schiavo, G.Ferreti, L. Vigan.
Object-Oriented Modelling and
Simulation of Flexible Multibody
Thin Beams in Modelica with the Finite Element Method. In 4th International Modelica Conference, Hamburg, March 7-8, 2005.
M. Otter, H. Elmqvist, and S. E.
Mattsson. The new Modelica multibody library. In 3rd Modelica Conference, Linkoping, Sweden, November 3-4, 2003.

ij



T
 S 2 S 3 dV  =
V




0

0

0

0

0

0
=
0

0

0

0

0

0


0
0
0
0 
0
0

0
13m

0
2
7(l )

35
0
2
7(l )

20
0
(l )3

Q
20
0
11ml
210
0
9m

0
0
0
0 

70
0
2
3(l )

0
0



Q
20
0
13ml
420



3
0

(l )3

Q

I 

Q
20
0
2
3(l )
Q
20
0
(l )3

I 
6
0
3
(l )

Q
30



0
11ml
210
0

(l )3

Q
20
0
2
m(l )

105
0
13ml

420
0
(l )3
Q
30
0
2
m(l )
140

The Modelica Association

0 0 0
0 0 0
0 0 0
0 0 0 
0 0 0
0 0 0
0 0 0
0 0 0
0 0 0
0 0 0 

0
9m

0
2
3(l )

70
0
2
3(l )

20
0
(l )3

Q
20
0
13ml
420
0
13m

35
0
2
7(l )

0 0 0
0 0 0



Q
20
0
11ml
210



6
0

(l )3

0
13ml

Q

I 

Q
30
0
2
7(l )
Q
20
0
(l )3

I 
3
0
2
(l )

Q
20

420
0



(l )3

Q
30
0
2
m(l )
140
0
11ml
210
0

(l )3

Q
20
0
2
m(l )

105

105

Modelica 2006, September 4th  5th

X. Murua, F. Martinez, A. Pujana, J. Basurko, J.M. Pagalday

The Modelica Association

106

Modelica 2006, September 4th  5th

A Modelica Library for Space Flight Dynamics

A Modelica Library for Space Flight Dynamics
Tiziano Pulecchi Francesco Casella Marco Lovera
Dipartimento di Elettronica e Informazione, Politecnico di Milano
Piazza Leonardo da Vinci 32, 20133 Milano, Italy

Abstract
The Modelica Space Flight Dynamics Library has
been developed as a unified environment to be used
throughout the design cycle of the Attitude and Orbit
Control System (AOCS) for a generic multibody, possibly flexible, spacecraft. The library architecture has
been recently redesigned, exploiting at its best Modelicas reusability, flexibility and modularity features. In
this contribution the main benefits of the Space Flight
Dynamics Library are discussed with special emphasis posed upon flexibility and advantage of exploiting
Modelicas nonlinear dynamic inversion capability for
preliminary assessment of disturbance torques in nominal orbit and attitude.
Keywords: space flight dynamics; replaceable model;
flexibility; simulation

1 Introduction
There is an increasing need for efficient design tools in
every domain involved in spacecraft design, and particularly in the area of control oriented modelling and
simulation. Specific tools have to be developed for the
design of both the system architecture and the Attitude
and Orbit Control System (AOCS), bearing in mind
the principles of reusability, flexibility and modularity. The main issue in the development of such tools
should be to try and work out a unified environment
to be used throughout the design cycle of the AOCS,
namely, the mission analysis stage, the preliminary
and detailed design and simulation phases, the generation and testing of the on-board code, the development of the AOCS Electrical Ground Support Equipment (EGSE) and the post-launch data analysis activities. A number of commercial tools are available to
support one or more of the above mentioned phases in
the development of AOCS subsystems, however none
of them seems capable of providing complete coverage of the whole development cycle in a sufficiently
flexible way. Moreover, the spacecraft architecture is
The Modelica Association

traditionally designed using domain specific software
packages that best solve their tasks with respect to the
different disciplines involved, e.g., flight mechanics,
propulsion, controls; as a drawback, it is quite cumbersome to link together the different model components
and exploit their reusability in the framework of future
missions.
The Modelica Space Flight Dynamics Library provides a systematic approach to simulation of spacecraft dynamics based on modern acausal objectoriented modelling techniques. The development of
simulation tools for satellite attitude and orbit dynamics within the object-oriented paradigm has been the
subject of previous work (see [14], where an overview
of the existing tools for AOCS modeling is presented).
Surprisingly enough, however, while the use of Modelica for aerospace applications has led to the development of a library for flight dynamics (see [8]), very
little activity in the spacecraft domain has been reported. Some preliminary results in the development
of a Modelica spacecraft modeling library have been
presented in [4, 11, 5]). More recently, the model components presented in the cited references have been revised in order to take advantage of the Modelica MultiBody library (see [9]) which turns out to be extremely
suitable to serve as a basis for the development of the
basic model components for the mechanical parts of
spacecraft models. In particular, a recent extension
of the above mentioned library (see [2, 13]) is proving specially beneficial for the simulation of spacecraft
with flexible appendages (see [12]).
In this paper the new Space Flight Dynamics Library
is described, emphasizing its flexibility and showing
the advantage of exploiting Modelicas nonlinear dynamic inversion capability for the preliminary assessment of disturbance torques acting upon a spacecraft in
nominal orbit and attitude. The paper is organized as
follows: first the Space Flight Dynamics Library will
be described in detail in Sections 2-3; subsequently,
the library flexibility will be exploited in Section 4
in a preliminary analysis of the external disturbance

107

Modelica 2006, September 4th  5th

T. Pulecchi, F. Casella, M. Lovera

 Finally, as the components of the library are independent from each other, one can exploit this
flexibility in order to build a simulation model
of increasing complexity and accuracy according
to the needs associated with each phase of the
AOCS development process.

torques acting on a spacecraft in its nominal orbit and
attitude. Finally, in Section 5 concluding remarks will
be outlined.

2 The Space Flight Dynamics Library
Modelica turns out to be specially suited for the modelling of spacecraft dynamics under many respects:
 Coordinate frames can be simply included in the
model in terms of connectors, describing kinematic transformations from one coordinate system to another.
 Spacecraft dynamics can be modelled by extending suitable classes available in the MultiBody
Library.
 Specific Modelica constructs are available to deal
with the modelling of physical fields and environmental quantities. This feature turns out to
be extremely useful in modelling the space environment and representing the interaction between
the environment and the spacecraft. In particular,
with a suitable choice of the environment interfaces, models of increasing complexity for each
of the relevant environmental fields can be implemented.

In addition, the availability of the Modelica MultiBody
Library (see [9]) leads to further advantages, since
the MultiBody components can be extensively reused.
Furthermore, recent developments to the library allowing the modeling and simulation of flexible multibody
systems (see [2, 13]) make it possible to deal with the
dynamics of spacecraft with flexible appendages such
as gravity gradient booms, antennas or solar panel arrays.
The Space Flight Dynamics Library encompasses all
necessary utilities to ready a reliable and quick-to-use
scenario for a generic space mission, providing a wide
choice of most commonly used models for AOCS sensors, actuators and controls. The Space Flight Dynamics Librarys model reusability is such that, as new
missions are conceived, the library can be used as a
base upon which readily and easily build a simulator.
This goal can be achieved simply by interconnecting
the standard Space Flight Dynamics Library objects,
possibly with new components purposely designed to
cope with specific mission requirements, regardless
of space mission scenario in terms of either mission
environment (e.g., planet Earth, Mars, solar system),
spacecraft configuration or embarked on board systems (e.g., sensors, actuators, controls).
Section 3 deals with a thorough description of the main
Space Flight Dynamics Library components.

 Sensors and actuators can also be easily represented in the Modelica paradigm. For instance,
a component for the simulation of magnetic torquers is modelled in terms of the interaction with
the geomagnetic field, while the momentum exchange between spacecraft and wheels is mod- 3 Basic model components
elled via a simple mechanical connector allowing
one rotational degree of freedom 1 .
The generic spacecraft simulator will consist of an
extended World model and one or more Spacecraft
 Packages of data sheets for each class can be conmodels:
structed and components easily modified within
each spacecraft model, using Modelicas ad1. Extended World model: a new World model,
vanced features (see, e.g., [10]).
extending Modelica.MultiBody.World has been
 C code can be easily linked to Modelica models, allowing the designer to reuse, for instance,
a wide range of available specific algorithms
and routines he is confident with, without going
through all the trouble of re-implementing them
in Modelica code.
1 Mounting

errors, which may give rise to inter-axis coupling
and vibrations, can be easily accounted for.

The Modelica Association

108

defined. It provides all the functions needed for a
complete representation of the space environment
as seen by an Earth orbiting spacecraft:
 Gravitational field models;
 Geomagnetic field models;
 Atmospheric models;
 Solar radiation and eclipse models;
Modelica 2006, September 4th  5th

A Modelica Library for Space Flight Dynamics

 Models for Sun and Moon ephemeris;

and of the expandable connector (see [1])
SensorBus toward replaceable model ControlBlock.

Such an extension to the basic World model
as originally provided in the MultiBody library
plays a major role in the realistic simulation of the
dynamics of a spacecraft as the linear and angular
motion of a satellite are significantly influenced
by its interaction with the space environment.

(c) ActuatorBlock: this replaceable model
consists in a reconfigurable set of attitude
control actuators to be chosen among custom Space Flight Dynamics Library ActuatorBlock implementations. Mathematical
models of different degree of complexity
for commonly employed actuators and actuators set have been implemented in the
Space Flight Dynamics Library, including
momentum and reaction wheels, magnetic
torquers and cold gas thrusters. The ActuatorBlock interface consists of a standard
Modelica library mechanical connector toward model SpacecraftDynamics and of
the expandable connector ActuatorBus toward replaceable model ControlBlock.
Note, in passing, that sensor and actuator
models have been developed in a controloriented framework, i.e., at the current level
of refinement they are not based on physical
models of the measurement process. More
advanced models can however be included
in the considered framework if needed.

2. Spacecraft model: a completely reconfigurable
spacecraft including components:
(a) SpacecraftDynamics: this component has
been defined by extending the rigid body
model on the basis of the already available
Modelica.MultiBody.Parts.Body component. The main modifications reside in the
selectable evaluation of the interactions between the spacecraft and the space environment and on the additional initialization option for the simulation via selection of a
specific orbit for the spacecraft. Data for
custom orbits and spacecraft inertial properties and geometry (influencing both aerodynamic and solar radiation behavior) are
stored in dedicated library packages. The
SpacecraftDynamics interface consists of
the standard Modelica library mechanical
connector.
(b) SensorBlock: this replaceable model consists in a reconfigurable set of attitude sensors to be chosen among custom Space
Flight Dynamics Library SensorBlock implementations. The model replaceable feature is active on all levels, such that, for
instance, the same basic Spacecraft model
can be instantiated as having a custom star
tracker sensor (corresponding to a specified
suppliers serial number), model (such as
ideal measure, measure corrupted by simple white noise and bias, optional time delay
and availability bit) and configuration (defined by star trackers number, location and
orientation with respect to the spacecrafts
reference frame).
The Space Flight Dynamics Library encompasses mathematical models of different degree of complexity for star sensors, gyroscopes, magnetometers and GPS receivers.
The SensorBlock interface consists of a
standard Modelica library mechanical connector toward model SpacecraftDynamics
The Modelica Association

(d) ControlBlock: this replaceable model implements the spacecraft Attitude Control
System (ACS), including blocks supervising the basic attitude determination, attitude control and control allocation functions. The ControlBlock interface consists
of two expandable connectors, SensorBus
and ActatorBus, toward replaceable models SensorBlock and ActuatorBlock respectively.
Note that the spacecraft can be either modeled as
a rigid body or as a multibody system, possibly
with flexible appendages (see [12] for details).
A short description of the Space Flight Dynamics Librarys World, Spacecraft and SpacecraftDynamics
models is given in the following subsections; SensorBlock, ActuatorBlock and ControlBlock models are
omitted for brevity.

3.1

Extended World model

The user interface for Extended World Model component is shown in Figure 1; as can be seen from the
Figure, the user can define the initial date and time of

109

Modelica 2006, September 4th  5th

T. Pulecchi, F. Casella, M. Lovera

Figure 1: User interface for the Extended World model.
the simulation and choose among the available models for the Earths gravity field (J2 , J4 or the more
general JGM-3 model for the Earths gravitational potential, see [7]), for the Earths magnetic field (dipole,
quadrupole and the IGRF model, see [16]), for the atmospheric density model and for the Sun and Moon
ephemeris tables.
As is well known, the Earths gravitational potential
Ug may be described by the function

approximation can be obtained by choosing the order
of the expansion in a suitable way. The Earth gravitational field components (expressed in spherical coordinates) are then given by
g =  Ug = {

Similarly, the geomagnetic potential Um , is described
by the function



Re
Ug (r, q, l) =  {1 + ( )n Jn Pn (cos(q))+
r
n=2 r


n

+

(
n=2 m=1

Um (r, q, l) =

Re n m
) Pn (cos(q))(Cnm cos(ml)+Snm sin(ml))}
r

m
(gm
n cos(ml) + hn sin(ml))

1 dn 2
(x  1)n
2n n! dxn

Pnm (x) = (1  x2 )m/2

Pn,0 (x) = Pn0 (x)

d m Pn (x)
dxm

Pn,m (x) = (

Re is the mean equatorial Earth radius, r,q and l are
the points spherical coordinates and coefficients Jn ,
Cnm , Snm are the zonal, sectoral and tesseral coefficients.
Depending on the mission characteristics and on the
purpose of attitude control simulations, a satisfactory
The Modelica Association

Re  n Re n+1
( ) Pn m (cos(q))
 n=0 m=0 r

m
where gm
n and hn are the Gauss coefficients appropriate
to the Schmidt polynomials Pn m

where Pnm are the Legendre polynomials
Pn (x) =

Ug 1 Ug
1 Ug
,
,
}.
r r q r sin(q) l

2(n  m)! 1/2 m
) Pn (x).
(n + m)!

The coefficients for the geomagnetic potential adopted
in the simulation environment correspond to the
so-called International Geomagnetic Reference Field
(IGRF) model for the Earths magnetic field (see [16]).
The components of the geomagnetic field (expressed

110

Modelica 2006, September 4th  5th

A Modelica Library for Space Flight Dynamics

in spherical coordinates) are then given by
B =  Um = {

Um 1 Um
1 Um
,
,
}.
r r q r sin(q) l

Similar models for the atmospheric density and the
Sun and Moon position have been implemented, according to [7, 15].

3.2

Spacecraft model

The Spacecraft model is structured according to the
diagram in Figure 2: the component associated with
the (perturbed) linear and angular dynamics of the
satellite (described in Figure 3) is connected to the actuators and sensors blocks via a standard Modelica mechanical connector, whilst the interconnection among
sensors, actuators and control blocks is realized via
suitably defined data buses. For instance, the default
choice for the replaceable model SensorBlock, comprising a single star tracker, gyroscope, GPS receiver
and magnetometer, is depicted in Figure 4. As can be
seen from the Figure, models for each of the on-board
sensors are included; in particular, each sensor is characterized by a mechanical interface, corresponding to
the physical mounting of the instrument on the satellite body (taking into account the definition of the local
sensor reference frame via a suitable change of coordinates) and by a signal interface. The sensors data
bus is therefore defined by the collection of output signals coming from each of the available sensors (using
Modelica expandable connectors, see [1]).

Figure 3: Layout of the SpacecraftDynamics model.
ideal, continuous-time measurements to more refined
models taking into account measurement errors and
the actual sampling rate of the sensors.

Figure 4: Default choice for replaceable model SensorBlock, comprising a single star tracker, gyroscope,
GPS receiver and magnetometer.
Let us stress the point that the Space Flight Dynamics Library Spacecraft model is completely customizable for what concerns actuators, sensors and controls,
which can be selected among standard library models via dedicated popup menus from the model Spacecraft graphical user interface (see Figure 5). The possible customization are virtually countless: Limiting
the discussion only to possible sensors customization,
the present Space Flight Dynamics Library implementations allows for choosing among all possible combinations arising from:

Figure 2: Structure of the Spacecraft model.
Note that the sensor and actuator models have been
defined by taking full advantage of the object orientation of the modeling language: the core definition for each sensor/actuator model is at the interface
level; mathematical models of increasing complexity
are available, ranging from ideal sensors providing
The Modelica Association

111

 3 star tracker models ;
 2 star tracker configurations ;
 2 GPS models;
 1 magnetometers models;
Modelica 2006, September 4th  5th

T. Pulecchi, F. Casella, M. Lovera

 2 gyroscope models;

a single exposed surface is given by the momentum
exchange law

 4 sensors block instances.
Figure 6 provides an idea of the customization made
possible by the Space Flight Dynamics Library for
what attains the SensorBlock only.
More freedom yet is available within the SpacecraftDynamics model for what attains the interaction of
the spacecraft with the space environment as defined
in the extended World model, via the options for activation/deactivation of magnetic residual dipole, aerodynamic and solar radiation disturbance forces and
torques.
The Spacecraft model extreme flexibility was
achieved by setting Dymola provided annotation option choicesAllMatching to true for all the replaceable
models. In such a way, a model is a candidate for redeclaration of a given replaceable model if and only if
it extends a suitable base interface thisModelFamilyInterface. If a new model candidate is designed, Dymola will automatically update the candidate model
list with the new entry, provided it is an extension of
the proper interface. Finally, the choicesAllMatching
annotation adoption prevents the user from unsuitable
redeclarations.

d qsc
(1 AU)2 #sur f
= p
Ai cos(qi )
dt
kRk2 i=1
[(1  ei )(R) + 2ei cos(qi )(next,i )]
where qsc is the spacecrafts momentum, p =
4.56e6 Jm2 is the mean solar radiation pressure at 1
Astronomic Unit (AU), R is the relative position vector from the spacecraft center of mass to the Sun, Ai ,
ei and next,i are the single surface area, reflectivity coefficient and external surface unit vector, respectively.
Finally, qi = acos(R  next,i ).
When a body interposes between the spacecraft and
the Sun, the former is partially or totally eclipsed, and
the force reduces accordingly by a factor2
 2

a a + b b2  ac sina
n(rsun , rs/c ) = 1 
p b2
where


b sinb
,
a = arcsin
a

c2 + b2  a2
b = arc cos
2bc




a, b are the Sun and occulting body apparent radii respectively, and c is the apparent distance between the
3.3 SpacecraftDynamics model
geometrical centers of Sun and occulting body.
This
new
component
uses
the
Model- Thus, the overall force acting on the spacecraft is
ica.MultiBody.Parts.Body model to account for
d qsc
(1 AU)2 #sur f
the interaction between the spacecraft and the en= n  p
Ai cos(qi )
dt
kRk2 i=1
vironment. In particular, the following disturbance
forces and torques can be selectively included in the
[(1  ei )(R) + 2ei cos(qi )(next,i )]
spacecraft model:
while the associated torque is computed accordingly,
 Gravity gradient torques;
once the center of pressure of each and every surface
composing the spacecraft geometry is defined.
 Magnetic torques, arising from the presence of a The layout of the SpacecraftDynamics model is denon zero spacecrafts residual magnetic dipole;
picted in Figure 3. As can be seen from the Figure, the core of the component is the Body compo Aerodynamic forces and torques, produced by the
nent of the Modelica MultiBody library, which deinteraction with the planets atmosphere;
scribes the linear and angular motion of a rigid body.
 Solar radiation pressure originated disturbance The component interface is constituted by a mechanical connector, to which mathematical models for the
forces and torques.
forces and torques arising from the interaction with the
Specifically, the latter contributions to the disturbance space environment are attached. Finally, a function for
forces and torques requires the definition of the inter- the computation of classical orbit parameters from the
action between the spacecraft geometry, defined as an cartesian representation of the spacecraft position and
assembly of planar and possibly cylindrical surfaces, velocity is included in the component model.
2 The shadow function n(r , r ) is derived under the asand the average solar radiation pressure F. When the
sun s/c
spacecraft is fully illuminated, the force acting upon sumption of occulting body infinitely far from the spacecraft

The Modelica Association

112

Modelica 2006, September 4th  5th

A Modelica Library for Space Flight Dynamics

Figure 5: Spacecraft graphical user interface.

Figure 6: Selection of star tracker instance for SensorBlock replaceable model.

The Modelica Association

113

Modelica 2006, September 4th  5th

T. Pulecchi, F. Casella, M. Lovera

The spacecraft data (i.e., inertial properties, geometry, surface reflectivity, material, etc.) can be easily
retrieved from appropriate spacecraft records. Moreover, to cope with classic space mission requirements,
two initialization options are allowed:
 standard Modelica.Mechanics.MultiBody.Body
initialization;
 a new initialization based on current simulation
Universal Time (set within the extended World
model), nominal orbit (specified by six orbital parameters, retrieved from appropriate records), angular rate and Modelica Orientation object relative to the orbital reference frame.

4

A case study

The Spacecraft Dynamics Library has been already
used in a number of spacecraft modelling and simulation problems (see, e.g., [6] and the references
therein). In this paper, the focus will be on the application of the library in the AOCS preliminary design stage, i.e., when the spacecraft architecture is not
yet completely defined and different options are being evaluated, depending on the specific mission profile. At this stage, it is indeed convenient to maintain for the spacecraft a higher level structure (i.e.,
one where only requirements are specified, not specific
equipments), to evaluate its interaction with the space
environment for different mission profiles and to be
concerned only afterwards about the choice of specific
equipment to be embarked. One of the main tasks in
this stage is to evaluate the external disturbance forces
and torques acting on the spacecraft, depending on the
mission profile. This task can be performed in many
different ways: the simplest approach would be to rely
on simple worst case formulas such as the ones given
in [3]; on the other hand, one could think of running
a closed-loop simulation using a simple attitude control algorithm to maintain the satellite near its nominal operating conditions (e.g., Earth pointing attitude).
Clearly, the former approach will introduce a significant conservatism in the analysis, while the latter requires a preliminary design of the attitude control law,
which may be time-consuming.
A better way of dealing with this task can be devised
by taking advantage of the acausal nature of Modelica
models: Dymolas symbolic dynamic inversion capability will be exploited for the preliminary assessment
of the disturbance torques acting upon the spacecraft
in its nominal orbit and attitude.
The Modelica Association

Taking advantage of the Space Flight Dynamics Library features, it is an easy task to derive a customization of the base Spacecraft model which can be used
to perform this preliminary analysis: it is sufficient
to assemble a new spacecraft model with no ControlBlock nor ActuatorBlock, to define an unknown control torque to be applied as input torque to the spacecraft and assign the desired spacecrafts angular rate
time-history. Dymola will then take care of solving
the resulting system of nonlinear equations to derive
the control torques time history necessary to keep the
spacecraft in its nominal attitude.
As an example, Figure 7 shows the computed disturbance torques experienced by an Earth-pointing satellite aligned with its orbital reference frame. The considered satellite is assumed to operate on a near polar
orbit (i = 86.9 inclination), eccentricity e = 0, altitude of 450 Km and a corresponding orbital period of
5614.8 seconds. The satellite inertial properties are:
 Satellite mass m = 500 kg
 Satellite inertia matrix [kgm2 ]


30
2
18
1080 0.1
I= 2
18 0.1 1070
A default cubic geometry was assumed for the satellite, comprising six surfaces, each with 1 m2 surface
area, reflectivity coefficient e = 0.02 and center of
pressure located at the surface geometric center.
For simulation purpose, aerodynamic drag, solar radiation pressure and a residual magnetic dipole of
1 A m2 upon each spacecrafts body axis were selected
as disturbance torques, while default choices were selected for geomagnetic and gravity fields (i.e., magnetic dipole and J2 respectively), Sun ephemeris and
atmosphere model (i.e., Harris-Priester). The simulation was initialized at GMT 12 : 00, March 21, 2007.
Note that the solar radiation disturbance torque experiences a sudden drop to zero when the Earth interposes
between the spacecraft and the Sun, and takes back a
nonzero value as soon as the spacecraft gets full Sun
illumination.

5

Concluding remarks

In this paper the main issues related to the modelling
and simulation of spacecraft dynamics have been described, the results obtained so far in developing Modelica tools for spacecraft simulation have been pre-

114

Modelica 2006, September 4th  5th

A Modelica Library for Space Flight Dynamics

Figure 7: Disturbance torques experienced by the satellite in its nominal orbit and attitude.
sented and a case study demonstrating Modelicas usefulness and flexibility as a design tool has been discussed.

References
[1] Modelica - a unified object-oriented language
for physical systems modelling. Language
specification. Technical report, Modelica Association, 2002.
[2] G. Ferretti, F. Schiavo, and L. Vigano. ObjectOriented Modelling and Simulation of Flexible
Multibody Thin Beams in Modelica with the Finite Element Method. In 4th Modelica Conference, Hamburg-Harburg, Germany, March 7-8,
2005.
[3] W.J. Larson, and J.R. Wertz, editors. Space mission analysis and design. Kluwer Academic
Publisher, 1992.
[4] M. Lovera. Object-oriented modelling of spacecraft attitude and orbit dynamics. In 54th International Astronautical Congress, Bremen, Germany, 2003.
The Modelica Association

115

[5] M. Lovera. Control-oriented modelling and
simulation of spacecraft attitude and orbit dynamics. Journal of Mathematical and Computer Modelling of Dynamical Systems, Special issue on Modular Physical Modelling,
12(1):7388, 2006.
[6] M. Lovera and T. Pulecchi. Object-oriented
modelling for spacecraft dynamics: a case
study. In IEEE International Symposium on
Computer-Aided Control System Design, Munich, Germany, 2006.
[7] O. Montenbruck and E. Gill. Satellite orbits:
models, methods, applications. Springer, 2000.
[8] D. Moorman and G. Looye. The Modelica flight
dynamics library. In Proceedings of the 2nd International Modelica Conference, Oberpfaffenhofen, Germany, 2002.
[9] M. Otter, H. Elmqvist, and S. E. Mattsson. The
new Modelica multibody library. In Proceedings of the 3nd International Modelica Conference, Linkoping, Sweden, 2003.
[10] M. Otter and H. Olsson. New features in Modelica 2.0. In Proceedings of the 2nd InternaModelica 2006, September 4th  5th

T. Pulecchi, F. Casella, M. Lovera

tional Modelica Conference, Oberpfaffenhofen,
Germany, 2002.
[11] T. Pulecchi and M. Lovera. Object-oriented
modelling of the dynamics of a satellite
equipped with single gimbal control moment
gyros. In Proceedings of the 4th International
Modelica Conference, Hamburg, Germany, volume 1, pages 3544, 2005.
[12] F. Schiavo and M. Lovera. Modelling, simulation and control of spacecraft with flexible appendages. In Proc. of the 5th International Symposium on Mathematical Modelling, Vienna,
Austria, 2006.
[13] F. Schiavo, L. Vigano, and G. Ferretti. Modular
modelling of flexible beams for multibody systems. Multibody Systems Dynamics, 12(1):73
88, 2006.
[14] A. Turner. An open-source, extensible spacecraft simulation and modeling environment
framework. Masters thesis, Virginia Polytechnic Institute and State University, 2003.
[15] D. Vallado Foundamentals of astrodynamics
and applications. Microcosm Press/Kluwer
Academic Press, 2001.
[16] J. Wertz. Spacecraft attitude determination and
control. D. Reidel Publishing Company, 1978.

The Modelica Association

116

Modelica 2006, September 4th  5th

Session 2a

Session 2a
Thermodynamic Systems for Power Plant Applications 2

The Modelica Association

117

Modelica 2006, September 4th  5th

Session 2a

The Modelica Association

118

Modelica 2006, September 4th  5th

Simulation of Components of a Thermal Power Plant

Simulation of Components of a Thermal Power Plant
Ren Schimon Dragan Simic Anton Haumer Christian Kral Markus Plainer
Arsenal Research
Gie nggasse 2, 1210 Vienna, Austria
phone +43-50550-6347, fax +43-50550-6595, e-mail: dragan.simic@arsenal.ac.at

Abstract
In this paper different models for simulating components of thermal power plants and other thermal or
thermodynamic processes are presented. The different
simulation results were performed with Dymola which
is based on Modelica. The models were realized with
time domain differential equations and algebraic equations. For all components the uid was modeled by
using the Modelica.Media library which is part of the
Modelica standard library.
The heat transfer for the heat exchanger component
was modeld by calculating the heat transfer coef cient 3
in dependency on the ow velocity of the medium in
3.1
the pipes.

1 Introduction
Arsenal Research currently works on the developement of a simulation library for thermal and thermodynamic processes. Elementary problems like heat transfer and uid dynamics will be processed. To a large
extent the Modelica_Fluid library already covers a lot
of important models, which are used to develop parts
of thermal power plants. The new library will complete the Modelica_Fluid library. Some of the presented models are based on components of the Modelica.Fluid library. For some special technical problems the Modelica_Fluid library was modi ed and extended.

2 Extended models to be developed

 An ideal pump based on physical parameters
 A pump with losses based on physical parameter
Simple pipe comprising pressure losses
Heat exchanger including pressure losses, thermal convection, thermal conduction
Turbine modeled with a characteristic curve

Components
Fluid ow machines

In a thermodynamic processes or thermal power plant
uids and different gases have to be transported
through pipes. Pipes cause pressure losses. To generate a constant mass ow, pumps are needed. Yet, in
some cases stationary density differences give rise to
a constant mass ow without having a pump, like in a
natural circulation boiler. For assistance or to start a
uid ow, pumps are the most important components
in thermal processes. Pumps are uid ow machines.
Mechanical shaft energy is transformed into kinetic
and potential ow energy. The impeller which is directly attached on the shaft, accelerates the uid elements. Because of the diffuser effect in the shovel
channels of the impeller wheel, the operating uid
leaves the impeller with increased pressure. Pumps
represent a link between pressure increase and ow
velocity or the mass ow. This context leads to the
characteristic of a pump. Each pump typ has its typical characteristic in dependency on its geometry and
rotation speed.

Arsenal Research is working on speci c problems related with heat transfer and uid dynamics. The development of the following components is currently
3.1.1 Ideal centrifugal uid ow machines
initiated:
An ideal pump is a uid ow machines with an in Centrifugal pump
nite number of shovels. The converted energy in the
The Modelica Association

119

Modelica 2006, September 4th  5th

R. Schimon, D. Simic, A. Haumer, C. Kral, M. Plainer

Figure 1: Characteristic of an ideal water pump

Figure 2: Characteristic of the cetrifugal water pump
with losses

impeller wheel of the water pump is the kinetic and
potential energy of the operating uid. Therefore the
main equation of the water pump represents the proportion between mechanical energy of the input shaft
with respect to the impeller wheel of the water pump
and the speci c energy of the operating uid [1].
m w = 2 p b2 r tan(b2 ) (r22 w2

Y )

A perviously developed model of an ideal pump [3]
was used to design a water pump with losses. The
new model now uses the Modelica.Media library to
model the uid. Figure 2 shows the characteristic of
this model.

(1)

In this equation r2 is the outer radius of the impeller
wheel of the water pump, b2 is the outer width of the
impeller wheel, r is the density of the operating uid
and b2 is the outlet angel of the shovel of the impeller
wheel. Furthrmore, m represents the mass ow of the
operating uid in the water pump and Y represents the
speci c energy of the impeller wheel for an in nite
number of impeller shovels. The ideal pump model
was implemented Modelica using Dymola as simulation tool. Figure 1 shows the linear characteristic of
the ideal water pump. Pumps as a special uid ow
machines is detailed processed in [2].

3.2

Initialization

In real thermal power plants, some components, like
the turbine, have to be brought up to operational conditions by a well de ned starting procedure. Reasons
for this starting procedure can be load limits of certain
components, cavitation of operating uids or restriction due to the process.

In computer simulations, certain start values de ne the
initial state of the simulation. Therefore, a simulation
usually can be started from any state. From the particular starting point, the system should then reach a
steady state condition. The initialization of a complex
3.1.2 Centrifugal Pump
model becomes more dif cult when using the ModelIn realistic pumps, friction, uid impacts and other ica.Media library.
uid dynamic effects cause losses in the water pump. The Modelica.Media library has certain operational
limits. Outside these limits an error occurs. For exThese losses can be split into:
ample, the start-up procedure of a real pump is very
Decrease of the speci c energy
complex. At the suction side of the pump the pressure
decreases during the start-up procedure. Without conHydraulic losses in shovel channels
trolling the process of starting up a simulation, like in
a real system, an error may occur. This, however, may
Impact losses
lead to a complex controlling due to the huge number
Friction losses of the impeller wheel
of physical quantities to be controlled.
The Modelica Association

120

Modelica 2006, September 4th  5th

Simulation of Components of a Thermal Power Plant

3.3

Pipe as an important part of Heat Exchangers

The pipe is one of the most elementary components.
A lot of thermal power plant components are based on
simple pipe models. One of these important components is the heat exchanger.
In a real pipe, the pressure drop of a uid owing
through the pipe, decreases due to the wall roughness
of the surfaces. The pressure drop also depends on the
ow velocity and on the roughness of the inner surface of the pipe. The cross-section of the pipe also
in uences the pressure losses. For circular pipes the
Figure 3: Coef cient of friction versus different ow
pressure drop can be calculated according to:
types
Dp = l

L r v2
D
2

(2)

v D
n

(3)

Figure 4 shows the pressure drop versus Re number.
The pressure drop Dp is a function of a coef cient of The discontinuity indicates the transition from lamifriction, l, the length of the pipe, L, the characteristic nar (at low Re numbers) to turbulent uid ow (at high
length, D, the density, r, and the velocity, v. The co- Re numbers).
ef cient of friction, l, depends on the Reynolds (Re)
number. The Re number is de ned by (3). The Re
number de nes the type of ow. The ow can be turbulent, laminar or in the transient area.
Re =

The pressure drop substantially depends on the ow
type. For the laminar area applies:
l=

64
Re

(4)
Figure 4: Prssuredrop in pipes versus ow velocity

For the turbulent area basically applies:
1
2:51
k
p = 2 log(
p +
)
l
Re l 3:71 D

(5)

3.4

In this equation k is the roughness of the inner pipe
surface. Figure 3 represents l versus the Re number
for different ow types.
The Modelica_Fluid library contains a lot of different
pipe models with different levels of abstractions. Arsenal Research develops extended models based on the
components of the Modelica_Fluid library. Simultaneously, Arsenal Research developed simpli ed models for easy handling and modeling of test cases, incorporating less parameters than the comprehensive models. Modelica_Fluid and the extended and the simplied models are using the same basic equations, with
respect to e.g. friction models, Reynolds equation, etc.
The Modelica Association

Heat Exchanger

Heat Exchangers are very important for nearly every
thermal process. In heat exchangers usually two interacting uid circuits are involved. The temperatures
of both uids are approaching. Yet a certain temperature difference is required to maintain the energy ow
from the higher temperature uid to the lower temperature uid. Figure 7 shows a scheme of a pipe heat
exchanger.
3.4.1 Heat propagation in Fluids
For modeling a heat exchanger it is necessary to understand how heat propagation in uids works. Heat

121

Modelica 2006, September 4th  5th

R. Schimon, D. Simic, A. Haumer, C. Kral, M. Plainer

propagation is described with partial differential equations in one dimension [4] . In standing uids heat is
transported by diffusion. The diffusivity a depends on
the operating uid. The thermal conduction equation
for one dimension is shown in (6). In this equation q
is an additional heat source, T is the temperature and
x is the location. The diffusivity a is a uid property,
which is a function of the heat conduction l, the density r and the speci c heat capacity c, according to (7)
T
2 T
=a
+q
t
x2

a=

l
c r

(6)

Figure 5: Nu number versus increasing ow velocity

(7)

In owing uids the heat is also transported with the
owing medium, which depends on the uid velocity.
This leads to a remodeling of the heat propagation (6).
Properties in a hydrodynamic ow depend on time and
location. The temperature is the important property
in this case. So the temperature depends on the time
and the place in the pipe. The total differential of the
temperature with respect to the time and the place has
to be calculated according to (8). To substitute this
context into (6) it is necessary to have an expression
[5] for:
T
t
So function (8) has to be divided by dt.

uid in the pipe to the outside surface. The heat transfer between the uid and the pipe wall has to be modeled. This heat transfer happens by means of convection. The heat transfer coef cient describes the heat
transfer between uid and pipe wall, and is de ned by
the Nusselt (Nu) number according to (11). The Nu
number is, however, a function of the Re number and
of the medium properties. The Re number describes
the type of ow (laminar, turbulent) and therefore, also
the Nu Number depends on the type of ow.
Nu =

a L
l

(11)

To determine out the quantity of heat, owing between
the uid and the pipe wall, the Nusselt-Number has to
T
T
dT =
dt +
dx
(8) be calculated. To transfer high quantities of heat ow
t
x
high Re numbers are necessary. Figure 5 shows the Nu
number versus the Re number.
The heat transfer coef cient a increases with increasT
T
dT
=
+v
(9) ing Re number. A salient turbulent ow is important to
dt
t
x
have a high quantity of heat transfer. In turbulent areas
the heat transfer increases linear with the Re number
After summarizing equation (9) and (6) we receive an
[6].
equation for the heat transport in axial direction:
T
T
+v
t
x

3.4.2

a

2 T
=q
x2

(10)

Heat Transfer caused by Convection

3.4.3

As in shown in (6), the diffusivity is responsible for the
heat propagation in uids. The Peclet (Pe) number is
the proportion between convective heat transport and
heat transport through conduction:

To design a heat exchanger model, different physical
effects have to be considered. It is necessary to know
the quantity of heat ow which is transported from a
The Modelica Association

Heat Transfer caused by Diffusion

122

Pe =

d v
= Re Pr
a

(12)

Modelica 2006, September 4th  5th

Simulation of Components of a Thermal Power Plant

The Peclet-Number determines whether the diffusion
is substantial or can be neglected.
3.4.4

Model of a Pipe

To design a detailed model of a heat exchanger, the
model should consider all the above described physical behaviors. Different types of heat exchangers lead
to different results. Every different types of heat exchanges needs different equations to describe the physical coherence.
Parallel ow heat exchangers
Counter ow heat exchangers

Figure 6: Model of an in nite small pipe segment

Cross ow heat exchangers
Plate heat exchangers
Each type of heat exchanger has a different ef ciency
because of their different heat transfer behavior. In
Modelica continuos heat transfer is modeled by heat
transfer between n in nite small pipes. Where n is
the number of elements. To get a model of a heat exchanger, an in nite small pipe segment could be the
main model. A simply unlagged pipe always has a
heat transfer with the environment. Figure 6 shows
a model of an in nite small pipe segment. The component pipe, models the pressure drop in this in nite small segment. The pressure drop is caused by
the friction between the uid and the inner wall of
the pipe. The additional connector is a real vector of
the size 5. This connector transmits the pressure p,
speci c enthalpy h, mass ow m_ ow, segment length
L and the characteristic length d to the component
heat transfer. The characteristic length is for
a circular cross-section the diameter. The component
heat transfer needs the parameter to calculate
the Nu number, which de nes the heat transfer coefcient a for an in nite small area. To get the whole
heat transfer through a pipe surface, a has to be multiplied with the pipe surface A according to (14). The
model heat transfer transmits Gx to the component convection. Now the energy ow Qx between
uid and the pipe wall in radial direction caused by
convection can be calculated by:
Qx = Gx DT

Gx = a A
The Modelica Association

The component thermal conduction simulates
the heat conduction through the wall of the pipe. The
red line which is drawn in in the component pipe
in Figure 6, indicates the heat transfer in axial direction caused by diffusion. The in uence on heat
propagation caused by diffusion is negligible small.
High Pe numbers show that for usual technical applications the diffusion can be neglected. To minimize
the CPU-Time, diffusion was not implemented in the
heat exchanger model. At the outer port of thermal
conductance an additional heat source could be
simulated, considering e.g. solar radiation or a cooling environment.
3.4.5

Model of a Heat Exchanger

In a heat exchanger, a second uid constitutes an additional heat source. Figure 7 shows the scheme of
a parallel heat exchanger. The second fluid A, circum ows the pipe which contains the fluid B. Heat
ow interchanges between both uids. The heat ows
from the uid with higher temperature to the uid with
lower temperature. In a parallel heat exchanger the
uids ow in the same direction. At the inlet the temperature gradient is on its highest level and decreases
towards the ow outlet. The temperatures of both uids are approaching. Figure 7 shows that heat ow
is transported from the hot fluid A to the second
fluid B. The pipe has a mass which also has to be
(13) heated up, and therefore, the heat capacity of the pipe
has to be considered. The ef ciency of a heat exchanger is at its maximum, if the heat ow between
both uids is as high as possible. For this reason it is
(14) important that the pipe is a good heat conductor. The
123

Modelica 2006, September 4th  5th

R. Schimon, D. Simic, A. Haumer, C. Kral, M. Plainer

Figure 7: Scheme of a parallel tube heat exchanger

wall of the pipe conducts heat also in axial direction.
This has to be respected in the heat exchanger model,
because for some types of heat exchangers, this effect
is very important. Figure 7 shows a scheme of a parallel pipe heat exchanger and Figure 8 shows the imple- Figure 8: Model of a segment of a parallel heat exmentation in a Modelica model.
changer
Figure 8 shows the model of an in nite small element
of a nitely long parallel tube bundle heat exchanger.
The model volume is directly taken out of the Modelica_Fluid library. It was equipped with an additional
connector. This connector transmits some geometrical parameter of the pipe to the volume, so that the
volume of the pipe segment can be calculated. The additional components, conduction and capacity,
model the pipe with heat conduction in axial and radial direction. For a parallel heat exchanger these
components do not have a signi cant effect. The second heat transfer component simulates the heat
ow, which is transmitted form the outer uid to the
pipe. In the heat exchanger model the number of elements and the length of the whole pipe bundle has to
be speci ed.
The model of one segment is connected n times one
after another to model a whole heat exchanger. Figure
9 shows the temperature versus the length of the heat
exchanger. This is an result taken out of a simulation
with only 10 element. The model contains over 2000
algebraic and differential equation.
Figure 9: Temperature distribution inside the heat exchanger

4 Conclusion
Simulations of components of thermal power plants or
of other thermal processes are very complex. Especially the consideration of the complex media of the
The Modelica Association

124

Modelica 2006, September 4th  5th

Simulation of Components of a Thermal Power Plant

Modelica.Media library leads to very detailed models
and precise results. Nevertheless, the Modelica.Media
library allows for a high precision of results. For some
applications, however, it makes sense to model some
components with a more simpli ed level of abstraction. Therefore it is necessary to carefully decide on
the detail of abstraction for each model.

Abbreviations
CPU

central processing unit

References
[1] J. F. Glich, Kreiselpumpen. Heidelberger Platz 3,
14197 Berlin: Springer Verlag Berlin Heidelberg
New York 2004, 2004.
[2] D. Simic, C. Kral, and H. Lacher, Optimization
of a cooling circuit with a parameterized water
pump model, 5th International Modelica Conference 2006, 2006.
[3] D. Simic, C. Kral, and F. Pirker, Simulation of the
cooling circuit with an electrically operated water
pump, IEEE Vehicle Power and Propulsion Conference, VPPC, 2005.
[4] H. Baehr and K. Stephan, Waerme- und Stoffuebertragung, vol. 5. Au age. Springer, 2006.
[5] G. Merker and C. Eiglmeier, Fluid- und Wrmetransport  Wrmebertragung.
Stuttgart,
Leipzig: B.G. Teubner, 1999.
[6] H. O. jr., Prandtl - Fhrer durch die Stroemungslehre Grundlagen und Phaenomene, vol. 11.
Au age. Vieweg, 2002.

The Modelica Association

125

Modelica 2006, September 4th  5th

R. Schimon, D. Simic, A. Haumer, C. Kral, M. Plainer

The Modelica Association

126

Modelica 2006, September 4th  5th

Pressurized Water Reactor Modelling with Modelica

Pressurized Water Reactor Modelling with Modelica
Annick Souyri
Daniel Bouskela
EDF/R&D
6 quai Watier, F-78401 Chatou Cedex, France
annick.souyri@edf.fr daniel.bouskela@edf.fr

Bruno Pentori
Nordine Kerkar
EDF/SEPTEN
12-14 avenue Dutrivoz, 69628 Villeurbanne, France
bruno.pentori@edf.fr nordine.kerkar@edf.fr

Abstract
In order to optimize and validate the design and the
operation of its nuclear power plants facilities, EDF
(Electricit de France) uses a proprietary tool called
LEDA to perform static and dynamic simulation at
the system level. EDF wishes to replace LEDA by
state-of-the-art off-the-shelf tools, mainly to reduce
maintenance cost while keeping up with the latest
trend in modeling and simulation technology.
To validate the feasibility of replacing LEDA by
Modelica based tools, several benchmarks models
have been chosen, that represent the variety of engineering studies made at EDF. The objective of this
work is to show that these tools are fit to dynamic
modeling and simulation of a PWR plant. To that
end, a reference LEDA model of such plant has been
successfully translated into Modelica and simulated
using Dymola. The results of the Dymola simulation
experiments are compared to those obtained with
LEDA.
This paper describes the structure of the Modelica
model, and the modeling and the numerical difficulties encountered during the translation and simulation process.

1

Introduction

For more than 20 years, EDF has been using modeling and simulation at the system level for the sizing,
design verification and validation, and the operation
of its nuclear and conventional thermal power plants.
To that end, EDF has developed and maintained
since the early 80s a modular code called LEDA.
LEDA is used for static (plant sizing) and dynamic
The Modelica Association

studies (modeling and simulation of the normal or
incidental plant transients). It is an efficient tool, that
has a complete model library and can solve direct
and inverse problems. But, because of its now ageing
architecture, it cannot keep up with the latest trend in
modeling and simulation technology.
So, to improve the efficiency of its simulation tools
while reducing their cost, EDF is studying the feasibility of using state-of-the-art readily available tools
instead of LEDA code.
The replacement tools should at least have the same
capabilities as LEDA, i.e. have an open component
library, be able to perform static and dynamic studies, compute steady states and solve inverse problems. They also should not induce an excessive dependency upon the tool providers.
Modelica based tools offer such characteristics. That
is why they are considered as good candidates to replace LEDA.
In order to evaluate the feasibility to replace LEDA
by Modelica based tools, benchmark cases have been
selected, which cover the variety of studies made at
EDF. The first case to be studied was the quasi-2D
modeling of a steam generator [1]. The next industrial case in the nuclear field to be studied, and objective of this work, is the dynamic modeling of a
1300 MW PWR power plant (P4).
The P4 LEDA model is a reference model used to
study the behavior of the plant wrt. the power grid
solicitations. In particular, it is useful for verifying
the design of the control system against important
transients, such as the house load operation.
This paper shows how the P4 LEDA model was
translated into Modelica and tested with Dymola.

127

Modelica 2006, September 4th  5th

A. Souyri, D. Bouskela, B. Pentori, N. Kerkar

2

2.1

Description of the P4 model

The EDF nuclear plants belong to the PWR (Pressurized Water Reactor) type. For such type of nuclear
plants, water acts both as the neutron moderator for
the nuclear reaction, and as the heat transport fluid.
Nuclear reaction occurs in fuel rods which are inserted into the vessel that contains water coming
from the primary loop. The primary water is heated
in the reactor core by the energy created from the
nuclear reaction, while being maintained at high
pressure in order to stay in the liquid phase. Hot water leaving the reactor vessel exchanges its heat with
water coming from another circuit called the secondary loop. This heat exchange occurs through the
steam generator, where primary water (in liquid
state) and secondary water (in boiling state) are separated. The primary water is thus cooled and goes
back to the nuclear reactor, while the secondary water heats up and becomes steam flowing to the turbine that drives the alternator to produce electricity.
Steam leaving the turbine passes then through a condenser to go back to the steam generator as liquid
feedwater.
The following circuits and components are included
in the model: the primary loop and the pressurizer,
point neutronic kinetics, the steam generator, the vapour line from the steam generator to the turbine
admission valve, the steam generator feed water line.
The main control systems are also taken into account
in the model: the mean primary temperature control,
nuclear power control, pressurizer pressure and level
control, steam generator water level control, secondary pressure control, secondary power control, turbine power control.
A Modelica library of 0D and 1D thermal hydraulics
components has been developed, based on the original equations of the equivalent Fortran LEDA model
components. These equations are the basic mass,
momentum and energy balance equations, completed
with closure equations derived from empirical correlations valid for the operating domain under consideration. Steam generator and vapour lines are described by 1D models. Empirical correlations (heat
transfer, pressure losses), adapted to the physical
range of operation of PWR, have also been translated
into Modelica. The Modelica components have even
been improved when necessary: more stable numerical scheme for 1D thermal hydraulics, inertial terms
added, more adequate correlations for heat transfer, ...

The Modelica Association

EDF Thermofluid Library

A thermofluid Modelica library is being developed at
EDF. The objective is to provide the physical and
technological model components needed for steadystate and dynamic simulation of nuclear and thermal
power plants under normal and incidental operating
conditions.
The library components must be able to describe single and two-phase flow, with heat transfer when
needed, deal with zero and reverse flow, compressible and incompressible flow for water/steam, and
smoke networks for thermal power plants.
The library uses a finite volume approach, based on
the staggered grid scheme for space discretization,
and the upwind scheme for the handling of flow reversal [2]. Both schemes are well suited for convection, which is the predominant energy transport law
within the network. Discretization is performed
along the main flow direction only (1D modelling).
The basic model components are divided into two
groups: nodes and edges. Nodes represent mixing
volumes such as tanks, boilers, splitters and mergers,
etc. They implement the mass and energy balance
equations. Edges represent flow resistant elements
such as valves, simple pressure loss pipes, etc. They
implement the momentum balance equations. The
network is built by connecting edges to nodes in order to obtain a complete set of mass, energy and
momentum equations with their closure equations,
and automatically fulfil the numerical scheme
requirements. Complex library components such as
heat exchangers, evaporator pipes or steam generator
are also built by assembling edge and node elements.
A more complete description of the modeling approach chosen by EDF for the thermofluid library is
presented in ref. [1].
It is also important to note that EDF has chosen not
to use the Modelica inheritance mechanism, in order
to keep the readability of the model: the complete set
of equations can be found directly in the component
model itself, instead of being scattered throughout
the library when they are partially derived from super-classes.
2.2

Components of the P4 model

In order to build the P4 model within the physical
limits described earlier, the following components
have been developed:
- fluid flow in pipes (primary and secondary
water loop),
- pressurizer (to maintain primary water as
liquid),

128

Modelica 2006, September 4th  5th

Pressurized Water Reactor Modelling with Modelica

-

turbine,
valve,
pump and motor (primary loop),
steam generator (secondary water loop), represented by a riser connected to an upper
part (the dome),
- point neutronic kinetics (modelling nuclear
reaction and resulting temperature).
As one of the main purposes of the model is to validate the response of the plant against the grid solicitations, the main control sub-systems of the plant
have been also modelled. They have been tested
separately in open loop, then connected to the P4
process model as shown in Figure 1.

Figure 1: EDF 1300 MW Pressurised Water Reactor
Modelica Model (P4)
2.3

Physics of the model

Fluid flow in pipes
A generic component has been developed. It can be
used for different parts of the plant, either for the
primary or the secondary loop. This model describes
the behavior of a single phase fluid flow in one or
several parallel conduits, where heat exchange can
occur between the fluid and the internal metallic pipe
wall, and between the external pipe wall and the outside environment. It is well adapted for the representation of connection circuits between the different
equipments of the plant. Two-phase flow is only
valid in the case of low vapor fraction, for no twophase flow correlation has been implemented yet.
The model is based on mass, momentum and energy
conservation equations, as 1-dimensionnal, partial
differential equations. Discretization is performed
along the main flow direction. The momentum conservation equation includes compressibility terms,
The Modelica Association

while fluid inertia and acceleration terms can be neglected as an option. Radial heat transfer in the pipe
metallic wall is not discretized (single radial cell),
and longitudinal conduction of heat is neglected in
the fluid flow and in the wall. As mentioned earlier,
like other components of the EDF Thermofluid library, a finite volume approach is used, based on the
staggered grid scheme for space disretization, to ensure a better stability of the numerical scheme. Two
types of cells are defined: edges, which solve momentum equations, and nodes, which solve mass
and energy equations for the fluid, with heat transfer
conduction equations in the metallic pipe wall.
The Dittus-Boelter correlation is used for the heat
transfer coefficient between the fluid and the wall.
The pressurizer
The role of the pressurizer is to maintain the primary
water pressure at a fixed level, in order to avoid vaporization within the primary loop. This is done by
ensuring that the liquid and vapour states are always
present in the pressurizer, so the pressure inside the
pressurizer (and hence inside the primary loop) can
be controlled by acting on the water temperature in
the pressurizer. To do so, the equilibrium between
water and steam is maintained in the pressurizer at
the saturation temperature corresponding to the pressure setpoint by heating or cooling the water in the
pressurizer. Heating is achieved by the electric heaters immersed in water, and cooling is achieved by
condensing the steam by aspersion of water extracted
from the primary loop.
So, there are two separate regions in the pressurizer:
a liquid region and a vapor region. The physical
model is based on a non-equilibrium formulation of
the fluid balance equations for each region. The
mathematical model is based on the mass and energy
balance equations for the liquid and the vapor, plus a
heat balance equation at the pressurizer wall, taking
into account the heat exchange between the wall and
the liquid, and between the wall and the vapor. Two
closure equations are used for the evaporation and
the condensation flow rates at the interface between
the liquid and the vapor regions. The evaporation
flow rate is related to the connected enthalpies (liquid and liquid and vapor at saturation conditions).
The condensation flow rate is related to the connected enthalpies (vapor and liquid and vapor at
saturation), to the heat exchanges wall/vapor and
wall/liquid, and to the conditions of aspersion (flow
rate and enthalpy). These two closure equations also
use empirical coefficients, related to the bubble rising time in the liquid and the droplet falling time in

129

Modelica 2006, September 4th  5th

A. Souyri, D. Bouskela, B. Pentori, N. Kerkar

the vapor. Water and steam properties are computed
from the IAPWS97 formulations.
The turbine
The model is based on the Stodola law, which relates
the flow rate through the turbine to the vapor conditions at the turbine inlet and outlet.
The valves
The model can represent the different types of valves
to be found in the PWR plant. It calculates the flow
rate through the valve as a function of the upstream
and downstream pressure, the upstream enthalpy and
the geometrical characteristics of the valve itself. It
can represent a single phase (liquid or vapor) or twophase flow. Special attention was given to the verification of the continuity between the different flow
regimes. To that end, a non dimensional parameter
analysis was used.
Pump and motor
The centrifugal pump model is based on the characteristic curves of the primary loop pumps in PWR
type plants. No mass accumulation inside the pump
is taken into account. Metal heat capacity and heat
exchange with the outside are neglected. The
mathematical model is based on the equation of
variation of internal energy of the system, taking into
account the mechanical power dissipation that heats
the water flowing through the pump. Algebraic equations are also used. The first one is the relation between the rotational kinetics energy of the pump and
the shaft speed, and the second is the energy balance
of the fluid between the inlet and the outlet of the
pump. The pump model is powered by an electric
motor model.
The steam generator (SG)
The steam generator is a key component for the operation and the safety of the plant, because it is responsible for the cooling of the reactor.
The primary water flows into U-tubes and yields its
heat to the secondary water. The secondary water,
circulating outside the U-tubes, is liquid at the inlet
of the SG, then flows down the outer part of the SG
and starts to boil when reaching the bottom centre
part of the SG, until the top of the boiling section.
There, the ratio between the total flow rate and steam
flow rate (circulation rate) reaches a value of 4 to 5
at nominal power. This part of the SG is called the
riser, where the flow is mainly two-phase (a mixture
of water and steam). Moreover, due to the non hoThe Modelica Association

mogeneity of heat exchange inside the riser, two regions must be considered. When secondary water is
flowing outside the first half part of U-tubes with hot
primary water flowing in, the region is called hot
leg. When flowing outside the other half part of Utubes with cooler primary water flowing in, the regions is called cold leg.
The water and steam mixture passes then through
separators where the two phases are separated in the
upper part of the SG. The liquid part goes back to the
SG feedwater, and the vapour part goes to the turbine. This part of the SG is called the dome.
The SG model has two different parts: the riser and
the dome. Dedicated components have been developed because of the complexity of the flow, and the
specificity of the geometrical characteristics of this
type of heat exchanger.
The SG riser
The basic equations for this model are the same as
the ones in the fluid flow model in pipes component
described earlier. Options have been added to meet
the specific needs of the riser:
- possibility to take into account two types of
heat exchange for one cell of flow (one for
the hot leg region, one for the cold leg
region),
- implementation of a heat transfer correlation
adapted to two-phase boiling flow for heat
transfer coefficient (Thom correlation [3]).
The SG dome
As there are two separate regions in the SG dome
(water and vapor), the basic equations for this component are the same as the ones modelling the pressurizer described earlier. The basic equations are the
same for each phase. Evaporation and condensation
flow rates are used as closure laws. Two equations
have been added to calculate the flow rate entering
the dome (pressure drop due to the separators between the riser and the dome), and the pressure at the
entrance of the SG (the altitude of the entrance is
lower than the dome, so there is a pressure drop due
to gravity).
Neutronic kinetics
The model calculates the neutronic power generated
in the fuel, as a function of the total reactivity of the
core due to the coolant density effect, the fuel Doppler effect and the effect of boron concentration. It is
a point reactor kinetics balance equation that describes the evolution of a neutron population, including the effect of precursors concentration leading to
delayed neutron sources.

130

Modelica 2006, September 4th  5th

Pressurized Water Reactor Modelling with Modelica

3
3.1

Simulation
Validation of the model

The reference benchmark test for this model is a
house load operation. It is a high amplitude transient,
that occurs when the plant is suddenly disconnected
from the normal energy discharge network. This
transient is used to check both the global operation
of the reactor with the control system in operation,
and the physics taken into account in the model.
The transient starts with neutronic and thermal hydraulic parameters set at values corresponding to the
full power operating conditions of the plant. This
means that before starting the transient, a stable regime must be reached at nominal conditions. To do
so, the initial state for the model is calculated by
(1) setting all the time derivatives to zero (simulation
must start from steady state) (2) performing inverse
calculations in order to adjust the parameter values to
start the simulation from the nominal conditions.
The transient scenario is the following:
- At t = 0, the plant is disconnected from the
grid by opening manually the electric circuit
breaker. The turbine control system then
closes the Turbine Admission Valve in about
1 minute. This leads to a vapor pressure rise,
and consequently the opening of the bypass
turbine condenser group valves.
- During the first minute, the nuclear power
decreases rapidly, because of the insertion of
the control rods in the core. During this
phase, the pressure, water level and temperature of the primary loop show sudden rises
due to the momentary deficit of the secondary load, then the thermal power balance
between the primary and secondary loops is
restored through the steam generator.
- After about 1 minute, the temperature control system leads to a stabilization, then a
partial extraction of the temperature control
rods. This slows down the decreasing rate of
nuclear power, which stabilizes at about
30% of nominal power at the end of the transient. This value is reached in about 10 minutes, which is the time needed for the control
rods to hit their setpoint.

The computing time is 600 seconds with a fixed time
step solver, about 3 times faster than real time. Calculations were performed on a Pentium 4, 2.4 Ghz,
with 512 Mo of CPU memory.
In order to reach this computing time, adjustments of
phenomenological time parameters describing the
actuators dynamics have been necessary. Also, numerical difficulties have been encountered due to the
computing of the control rods insertion. Rods are
inserted step by step. It is a discontinuous process
controlled with hysteresis that trigger frequent
threshold crossings. The number of resulting event
detections to be computed turned out to be very
large, leading to unacceptable computing time with
the variable time step solver DASSL. This is why
implicit fixed time step solver had to be used, in order to decrease the computing time of state event
detection to acceptable level.
A previous validation of the model was made with
the LEDA code against on-site experiments and transient recordings. Since the physical modelling is very
close to the one implemented in the LEDA model,
validation of the equivalent Modelica model was
performed on the basis of the results obtained with
LEDA. The following figures show the evolution of
the main variables of the model versus time (in seconds); dotted lines are for LEDA simulation results
and continuous lines for Modelica simulation results.
Figures 2 and 3 show the position of the control rods
in the core. The two groups are inserted first, then
the temperature control group is extracted again
when the nuclear power has sufficiently decreased,
trying to compensate for the primary loop mean temperature decrease (see also Figure 4 and 6).

Figure 2: Position of Temperature control rods
3.2

Results of dynamic simulation

In order to cover the whole transient, the simulation
time has been set at 2000 seconds.
The model has 7000 unknowns and 320 states.
The Modelica Association

131

Modelica 2006, September 4th  5th

A. Souyri, D. Bouskela, B. Pentori, N. Kerkar

peak. However, if the overall dynamic evolution is
correct, there is a noticeable difference between the
maximum temperature calculated with LEDA and
the one given by the Modelica model.

Figure 3: Position of Power control rods

Figure 6: Primary loop mean temperature

Figure 4: Nuclear Power
Figure 5 shows the evolution of the position of the
bypass turbine condenser group valves, that open at
the beginning of the transient, just after the closing
of the turbine valve.

Figure 5: Position of by pass turbine condensers
group valves
As previously written, the primary loop pressure and
temperature exhibit a sharp rise at the start of the
transient, due to the deficit of secondary load. Figure 6 shows the primary loop mean temperature

The Modelica Association

The SG level is an important variable of the secondary loop, which is taken into account in the control
and safety systems of the plant. The shrink and swell
phenomenon is a variation of the water level in a
two-phase fluid container, that occurs after a sudden
change in vapor pressure or flow rate entering the
container. This phenomenon is encountered in the
SG, and must therefore be described by the model.
As shown in Figure 7, the first shrink of water level
in the SG is simulated, followed by a swelling of the
water level before stabilization.

Figure 7: Water level in the Steam Generator
These results show that the dynamic response of the
plant process and control system modelled with
Modelica is quite satisfactory. However, a more
complete validation of the model is needed, with a
better (optimised) adjustment of the model parameters.
There are noticeable differences between the Modelica and the LEDA model. The LEDA model has a
1D neutronic model that takes into account the non

132

Modelica 2006, September 4th  5th

Pressurized Water Reactor Modelling with Modelica

homogeneity of nuclear power in the core, whereas
the Modelica model has a simple point neutronic
model. Figure 2 and 3 also show differences between
the control rod positions, which may be due to differences in the control rod calibrations.
These modelling approach differences could explain
the discrepancies observed in the simulation results
from the two models.

4

Conclusions

A full model of a PWR 1300 MWe plant has been
translated from LEDA to Modelica. It is a large dynamic model, that exhibits numerical difficulties due
to the large number of states, and the step-by-step
discontinuous operation of the control rods that lead
to frequent state events.
Computing time has been reduced to an acceptable
level by using an implicit fixed time step solver instead of the variable time step solver DASSL.
It would probably be possible to reduce computing
time even more by a thorough analysis of the model
equations, but due to the large number of equations,
this is a difficult task. So further development of
Modelica based tools should address the methodology issue of modelling large dynamic systems by
e.g. giving to the user the possibility to perform incremental model development and analysis.
However, this study shows that it is possible to perform dynamic simulations of a PWR plant with
Modelica. The next step will be to test the coupling
of such a Modelica model with an existing nonModelica code (e.g. neutronics code).

References
[1]

[2]

[3]

Avenas C. et al, Quasi-2D Steam
Generator Modelling with Modelica, ISC2004, Malaga, Spain.
Patankar S.V., Numerical Heat
Transfer and Fluid Flow, Hemisphere Publishing Corporation,
1980.
Thom J.R.S., Walker W.M., Fallon
T.A., Reisting G.F.S., Boiling in
subcooled water during flow up
heated tubes or annuli, Proc. IME
(London), vol. 180, pp 226-246,
1955-56.

The Modelica Association

133

Modelica 2006, September 4th  5th

A. Souyri, D. Bouskela, B. Pentori, N. Kerkar

The Modelica Association

134

Modelica 2006, September 4th  5th

Simulation of the Start-Up Procedure of a Parabolic Trough Collector Field with Direct Solar Steam Generation

Simulation of the Start-Up Procedure of a Parabolic Trough
Collector Field with Direct Solar Steam Generation
Tobias Hirsch
Markus Eck
German Aerospace Center (DLR)
Pfaffenwaldring 38-40, 70569 Stuttgart, Germany
tobias.hirsch@dlr.de, markus.eck@dlr.de

Abstract
Solar thermal power plants are one of the most interesting options for renewable electricity production.
For a plant based on parabolic trough collectors, the
start-up procedure of the solar field in the morning
has to be well defined in order to start electricity
production as soon as possible. In this paper, the
Modelica language is used to describe the thermohydraulic components of the collector field. A control system for the plant start-up is developed based
on the Modelica StateGraph library. With this simulation model a number of studies are performed to
estimate the time consumption of the start-up procedure.
Keywords: parabolic trough; solar; control

1

Table 1: Impact of plant start-up time on the costs of
electricity generation.

Introduction

Among the wide range of renewable energy technologies for electricity production, solar thermal
power plants are one of the economically most interesting options. Direct solar irradiation is concentrated into a focal point or focal line by curved mirrors. Parabolic trough collectors use the high temperatures to heat up a fluid in absorber tubes arranged in the focal line. The use of an organic oil as
a heat transfer fluid is state of the art. Benefits are
expected by directly evaporating and superheating
water in the absorber tubes (direct solar steam generation, DISS) [1]. For the implementation of a first
plant, the aspect of start-up and shut-down has to be
solved. While the power block itself might operate
through the night by using a thermal energy storage
or an auxiliary fossil boiler, the solar field cools
down at night.
As long as the solar field has not reached its operating point in terms of pressure and temperature, the
steam turbine can not be started. Table 1 illustrates
the impact of the start-up procedure duration on the
levelized costs of electricity. If the procedure can be
The Modelica Association

shortened by 1 hour a net gain of 7.9 % will be obtained.
This paper presents simulation studies covering the
topic of solar field start-up procedures for parabolic
trough fields with direct steam generation. Especially
the two-phase flow conditions inside the absorber
tubes necessitate the analysis with the help of detailed numerical simulations. Having a simulation
tool at hand, different start-up strategies can be
tested and evaluated to come to an optimal solution.
The Modelica language is used for the study since
combination of hydraulic, solar and control components can easily be achieved. Some central aspects of
the model and the results of the numerical simulation
will be presented in the following.

Start-up time
Relative costs

2

0 min
100.0 %

30 min
103.5 %

60 min
107.9 %

General structure of the model

To cover the central aspects of the simulation task,
the model is split into two parts,
- the plant layer and
- the control layer.
In the plant layer all hardware components like
pipes, absorber tubes, tanks and junctions are represented. The control layer incorporates all elements of
the control system, i.e. controllers, parameter definitions, set-point tables and the process sequence control. The control layer is defined as
model StartUp_Controller_Var1

end StartUp_Controller_Var1;

135

Modelica 2006, September 4th  5th

T. Hirsch, M. Eck

An instance of this model named Control is created in the plant layer.
model plant_layer_design_01
StartUp_Controller_Var1 Control;
end plant_layer_design_01;
The exchange of data between the two layers is enabled by a data bus which is defined as a connector
element.
connector Bus
Real Signal_Real[n_Signals_Real];
parameter String[:] Names_Real =
fill("n.a.",n_Signals_Real);
parameter Integer n_Signals_Real =
size(Names_Real,1);
end Bus;
The array Signal_Real hosts the data, while the
parameter Names_Real allows the specification of
names for the single data channels. An instance of
the connector class is defined as an inner variable in
the plant layer and as an outer variable in the control
layer. In Dymola, the size of the array and the descriptions can easily be defined via the graphical user
interface. For connecting real signals to the bus, a
port is defined as:
model BusPort_Real_In
outer DissDyn.Signal.Bus Bus;
Modelica.Blocks.Interfaces.
RealInput u;
parameter Integer SignalNumber
(min=1, max=Bus.n_Signals_Real);

equation
u=Bus.Signal_Real[SignalNumber];
end BusPort_Real_In;
The parameter SignalNumber identifies the bus
channel that should be connected to the signal
plugged to input u. To graphically distinguish between ports, that assign a signal to a bus variable and
ports that readout a bus variable, two port definitions

Real_In 1 and Real_Out 1 are used.
In parallel to the real bus variables, Integer and Boolean variables are included in the bus in the same
manner. The graphical annotation of the signal number is helpful for the setting-up and checking of the
model.

3

Plant layer

The central element of the plant layer is the hydraulic circuit composed of buffer tank, feedwater
header, absorber tubes and live steam header. Figure 1 illustrates the arrangement of the components
for the reference configuration of a 5 MWel solar
field [3]. From the seven parallel rows of the plant
layout, only one is modeled in the simulation together with mass flow multipliers at the inlets and
outlets. Between the evaporation and superheating
section a phase separator is arranged to allow recirculation operation. The water separated from the
steam is transported by means of a drainage line to
the buffer tank from where it is pumped back to the
inlet of the field. During normal operation, the connection from live steam header outlet to the buffer

pre-heating and evaporation

superheating

drainage line

feed water header

x7

buffer overflow

phase
separator

live steam header

x7

:7

steam injection

buffer
tank
feed
water

auxiliary
boiler

cooling
to the power block

Figure 1: diagram of the plant layer
The Modelica Association

136

Modelica 2006, September 4th  5th

Simulation of the Start-Up Procedure of a Parabolic Trough Collector Field with Direct Solar Steam Generation

tank is closed so that the superheated steam directly
flows to the power block. During the start-up phase
this connecting line is opened and the drainage line
closed. This allows recirculation of water over the
whole system (global recirculation). The recirculated
water is mixed with fresh feed water and, if necessary, with hot water produced by an auxiliary boiler.
Another input line for cold water is added to cool the
recirculation pump and thus to avoid cavitation in
this device. The buffer tank is designed to hold water
and steam at saturation conditions. There is one drain
for the water at the bottom and one for steam at the
top of the tank. Table 2 gives the geometrical parameters for the components used in this study.
The components models are taken from the DissDyn
library developed at DLR [2]. For all pipe components, a one-dimensional discretization is used with
the state variables pressure, specific enthalpy and
wall temperature in each control volume. As boundary conditions, mass flow and specific enthalpy have
to be provided at the inlet and pressure at the outlet.
For the plant configuration, this means that a time
dependent pressure boundary condition is required at
the outlet of the live steam header. In the first part of
the start-up procedure the flow from the field is sent
to the power block. In the later stage of global recirculation, the directional control valve is switched to
lead the flow into the buffer tank. For the first case, a
constant pressure can be used as a boundary condition. For the second case, the boundary condition is
directly coupled to the pressure in the buffer tank. A
special component is designed to switch the boundary condition from a constant value to the pressure in
the tank by means of a ramp. For the recirculation
pump it is assumed that the power always fits to the
pressure lift over the pump.
From the buffer tank steam can be extracted to the
power block. If the buffer pressure falls below a
given limit, steam from the field outlet can be inTable 2: Geometrical parameters of the plant components, length l, inner tube diameter di, outer tube
diameter da, number of elements for spatial discretization n.
di
da
l
n
[m] [mm] [mm]
[-]
feedwater header
210
60
70
12
evaporator
812
55
70
61
superheater
200
55
70
17
live steam header
210
100
120
12
drainage line
350
100
110
10
buffer tank
10.2 1000 1050
1

The Modelica Association

jected for stabilization. To keep the buffer liquid
level within the allowed limits, water can be taken
off into the buffer overflow line which leads to the
power block or to the inlet of the drainage line.
All valves shown in the plant diagram are implemented as mass flow definitions. This approach
avoids the high effort of using valve characteristics
and the corresponding controllers.

4

Control layer

The start-up procedure is treated as a directed sequence of processes which themselves consist of a
sequence of sub-processes. To model this structure,
the Modelica StateGraph library is applied where
each state element represents the corresponding
process or sub-process. A state can either be active
or inactive. A state element and its successor in the
chain are linked by a transition. In case the state is
active and its successor is inactive, the transition is
enabled. This means, that the transition will fire as
soon as a Boolean condition becomes true. After this
event, the successor is active and the state has fallen
back to inactive. Providing the first state with the
active attribute this attribute will be passed through
the whole sequence of states, and indicates which
process in the system is running at each moment.
The transitions between the states are linked to Boolean criteria described by system variables and
switching conditions. A possible transition might be
that a certain temperature or pressure is reached in
the system. Figure 2 shows a screenshot of the control layer with the 9 main processes passed through
during the simulation from top to bottom. Some of
the main processes are divided into sub-processes by
means of a parallel element. At this element, the
path, and with it the active attribute, diverges into
two branches where one of them exists of just a single state and the other is composed of a sequence of
states. The transition that follows the parallel element, becomes enabled not before the final states in
each branch both become active. This structure is
chosen, since some of the processes require a number of minor steps that have to be passed before the
process itself is finished. For analysis of the simulation results it is useful to define a subprocess identifier that represents the actual system state in terms of
a numerical value

S =  state[i ].active  weight[i ] ,
i

with the weight being an array with monotonically
increasing values.

137

Modelica 2006, September 4th  5th

T. Hirsch, M. Eck

While the described structure helps to define the actual state and its chronological sequence, the input
signals for the plant are generated in a number of
control systems. The following elements are used to
react on a change in the system state:
- On/Off switch that is triggered by two input
signals switch to on and switch to off
- Switch that chooses between two real inputs
depending on the status of the Boolean input
signal
- Set-point table that selects the output value
from a set of Boolean expressions and their
dedicated real values
- Real expressions incorporating Boolean expressions that checks if one of the assigned
states is active.
These components are completed by control elements that do not react on the system state itself but
on characteristic variables of the systems:
- Hysteresis and min/max elements that check
if real input signals extend given limits
- Proportional-integral controllers
- Algebraic expressions depending on a number of input variables
Without going into detail on the individual control
loops table 3 summarizes the main control activities
and the type of control applied for this task.

5

Simulation results

The developed start-up strategy will be described
together with the simulation results. Nevertheless,
some aspects like the boundary conditions should be
treated beforehand.
5.1

Table 3: Main control tasks and types of control
element used for them

Boundary conditions

It is assumed that from the shut-down procedure of
the last evening warm water is stored in the feed water tank (6 bar, 154C, 20 m3) and in the buffer tank
(60 bar, 275C, 6.4 m3). This water can be used to
pre-heat the solar field. An auxiliary boiler is available that generates water or steam at different pressure levels. In the morning, the temperature in the
field has fallen to 30C. The whole volume in the
field, except the buffer tank, is full of water.
5.2

Figure 2: Screenshot of the control layer composed
of state, transition and parallel elements
from the StateGraph library.

Simulation of the start-up procedure

Figure 3 shows the results of the start-up simulation.
At time t=0 the collectors are focused. Up to this
point, the field is pre-heated. The collectors are fo
The Modelica Association

138

feed water mass flow

feed water temperature
recirculation mass flow
buffer pressure
buffer overflow
recirculation cooling
auxiliary power
collector focusing
separator drainage

PI-controller
algebraic expression
on/off switch
set-point table
algebraic expression
set-point table
set-point table
PI-controller
hysteresis element
algebraic expression
algebraic expression
on/off switch
on/off switch

Modelica 2006, September 4th  5th

Simulation of the Start-Up Procedure of a Parabolic Trough Collector Field with Direct Solar Steam Generation

Figure 3: Start-up procedure in terms of important system variables.

The Modelica Association

139

Modelica 2006, September 4th  5th

T. Hirsch, M. Eck

cused at a solar altitude of 10 (at time t=0 min). Up
to an altitude of 20 (at time t=45 min) shading between collectors occurs. The direct solar irradiation
signal is corrected by these two effects that reduce
the effective solar input on the collectors. The impact
of the shading is illustrated in figure 4.
Pre-heating the field with warm water from the
feed water tank
As a first step, warm water from the feed water tank
is send into the field (t=-42 min). Form the temperature signal it can be seen that the pre-heating does
not reach the end of the field when the feed water
tank is completely emptied (at t=-27 min). The pressure is remained on a low level since evaporation in
the field should start as early as possible. The water
pushed out from the field is directed to the power
block.
Pre-heating the field with hot water from the
buffer tank
The water from the buffer tank is mixed with additional cold water to bring the temperature below the
saturation temperature in the field. This is necessary
to avoid evaporation in the feed water header which
would otherwise prevent a controlled distribution of
the water on the parallel channels. The flow into the
field is fixed at 10.5 kg/s from which about 4.5 kg/s
originate from the buffer tank. At t=-17 min the
buffer tank falls below its minimum level but the
temperature at the field outlet is still low. Redirecting the flow from the field outlet into the buffer tank
would lead to a pressure decrease in the tank. For
this reason, the pre-heating of the field is continued
with water from the auxiliary boiler (named backup
boiler in the figure) until the field outlet temperature
reaches 150C. This condition becomes true at
t=-3 min.
Global recirculation without solar input
The connection between field outlet and buffer tank
is opened and recirculation over the buffer tank is
started. The pressure signals from buffer tank and
field inlet are now linked. Since water of 150C is
mixed with the water of 165C in the buffer tank, a
slight temperature drop and, in the consequence,
pressure drop in the buffer occurs.
Global recirculation with solar input
After 3 min of waiting time, the collectors are focused and solar heat input into the system starts. No
steam is extracted from the system so the pressure in
the field continuously rises. When the first steam is
produced in the absorber tubes, large amounts of water are displaced and send to the buffer tank. Since
outflow of the tank is nearly constant, the liquid level
rises and finally triggers additional water extraction
The Modelica Association

time [min]
Figure 4: Impact of shading (- -) between two parallel collector rows on the effective direct irradiation
compared to a stand-alone collector (---).
from the tank. The maximum water temperature at
the field inlet is set to a value of 200C that corresponds to the nominal operating conditions. From a
tank pressure of 16 bar on, the recirculated water
exceeds this temperature limit. For maintaining the
desired temperature, cold feed water is mixed with
the hot water from the buffer tank. The mass flow of
recirculated water is reduced to maintain a constant
total flow. This effect can be clearly seen from the
feed water and recirculation water signals in figure 4.
Steam extraction to the power block
Having reached the nominal operation pressure
of 70 bar, saturated steam is extracted from the
buffer tank to keep the pressure constant. The automatic feed water control is activated although its
output does not yet reach the value provided by the
automatic cooling of the inlet water.
Switching from global to local recirculation
As soon as the drainage line is pre-heated to a temperature of 250C and the steam extraction from the
buffer tank reaches 3.5 kg/s, the separator drainage is
opened and water from the drainage line is send to
the buffer tank. The inlet of the superheating section
falls dry and the field outlet temperature rises. At a
steam temperature of 350C, the connection from the
field outlet to the buffer tank is closed and the steam
is directly sent to the power block. For the operation
of the drainage system, it is now important to maintain the pressure in the buffer tank constant. Parallel
to the steam extraction valve, a steam injection is
included to prevent the pressure from falling below
the limit.
End of the start-up procedure
When the steam temperature reaches 400C the startup procedure is considered as completed and plant

140

Modelica 2006, September 4th  5th

Simulation of the Start-Up Procedure of a Parabolic Trough Collector Field with Direct Solar Steam Generation

control can switch to nominal operation mode. This
point is reached 44 min after focusing the collectors.
5.3

Solar-only start-up

If hot water for pre-heating the field is not available
in the morning, the field has to be started in solaronly mode. Figure 5 shows the simulation results. In
addition, no auxiliary boiler is used in this configuration. The start-up time from focusing the collectors
is 55 min that means 11 min longer than with preheating. On the first glance, this seams to be not
much. From the pressure increase it can be seen that
the initial time lag at 7 bar pressure is 20 min which
reduces to a value of 13 min during the following
process. Since the process in solar only mode takes
place later, the solar input is already on a higher
level and more heat is provided into the system. Having reached the 70 bar, it takes 45 s in the solar-only
mode until the steam production meets 3.5 kg/s and
the switching to local recirculation is started. In contrast to that in the pre-heating version, the same procedure takes 252 s, since heat input into the system is
significantly less.
5.4

Start-up at low irradiation

ponents with a control system. Simulation runs show
that a start-up time of about 55 min is necessary to
reach nominal operation conditions. The long duration is mainly attributed to the low solar input after
sunrise which results from the shading between two
parallel collector rows. The start-up can be accelerated by 13 min when pre-heating the field with water
stored in the feed water tank and in the buffer tank
from the last evenings shut-down. The developed
control concept is stable even if a reduce level of
solar irradiation is assumed. Based on the cost estimate given in the introduction, the reduction
by 13 min would lead to 2% lower electricity costs.
Although this number is not high further potential is
expected by improving the start-up strategy.

Acknowledgements
The authors would like to thank the German Ministry
for the Environment, Nature Conservation and Nuclear Safety for the financial support given to the
SOLDI project under contract No. 16UM0024.

References

A reduced level of solar irradiation can e.g. be
caused by haze in the atmosphere. To estimate the
impact on the start-up procedure simulations are performed with a modified parameter in the solar irradiation model that represents a turbid instead of a
clear sky atmosphere. From figure 6 it can be seen
that the start-up time is increased by 12 min. The
procedure itself stays similar to the original configuration.

6

Conclusions

[2]

[3]

The developed Modelica simulation model has
proven its capability to simulate complex fluiddynamic processes like the ones taking place during
the start-up of a parabolic trough solar power plant.
The interdisciplinary approach of the Modelica language is used to combine the thermo-hydraulic com-

The Modelica Association

[1]

141

Eck M., Zarza E., Eickhoff M., Rheinlnder
J., Valenzuela L. Applied research concerning the direct steam generation in parabolic
troughs. Solar Energy, Vol. 74, 2003,
pp. 341-351
Hirsch T., Eck M., Steinmann W.-D. Simulation of transient two-phase flow in
parabolic trough collectors using Modelica. In:
Proceedings of the 4th Int. Modelica Conference, Hamburg, Germany, 7.-8. March 2005,
pp. 403-412.
Zarza E., Gonzlez L., Rojas M.E., Caballero
J., Rueda F.: Conceptual design of a 5 MWe
Direct Steam Generation System. In: Proceedings of the 12th Solar Paces International Symposium, Oaxaca, Mexico, 2004.

Modelica 2006, September 4th  5th

T. Hirsch, M. Eck

Figure 5: Start-up procedure with pre-heating of the field (---) and solar only start-up procedure (- -)

The Modelica Association

142

Modelica 2006, September 4th  5th

Simulation of the Start-Up Procedure of a Parabolic Trough Collector Field with Direct Solar Steam Generation

Figure 6: Start-up procedure with clear (---) and turbid (- -) atmosphere.

The Modelica Association

143

Modelica 2006, September 4th  5th

T. Hirsch, M. Eck

The Modelica Association

144

Modelica 2006, September 4th  5th

Session 2b

Session 2b
Automotive Applications 2

The Modelica Association

145

Modelica 2006, September 4th  5th

Session 2b

The Modelica Association

146

Modelica 2006, September 4th  5th

Modeling the Dynamics of Vehicle Fuel Systems

Modeling the Dynamics of Vehicle Fuel Systems
John J. Batteh
Patrick J. Kenny
Ford Motor Company, Research and Advanced Engineering
{jbatteh, pkenny}@ford.com

Abstract
This paper describes the development and application of a multi-domain, physical model in Modelica for the simulation of vehicle fuel systems. The
fuel system model includes components from the
electrical, mechanical, and hydraulic domains to represent the physical components in the vehicle fuel
system. A brief overview of the modeling background and formulation is provided. Following a
discussion of the model calibration and refinement
effort, sample simulations are shown with the full
system model for various transient tests. Additional
applications and usage scenarios of the fuel system
model are briefly discussed.
Keywords: hydraulics; mechanics; powertrain

1

omy. In particular, the majority of real world driving
is transient as are the drive cycles on which fuel
economy and emissions are measured.

(a) EPA Metro

Introduction

Drivability, emissions, and fuel economy, particularly during transient conditions, are the main
drivers for the design requirements cascaded to vehicle subsystems. As gasoline prices become more
volatile, vehicle fuel economy has become an increasingly important customer attribute. Fuel economy contributes strongly to customer satisfaction
and perceived quality relative to the competition.
Achieving fuel economy targets while also meeting
increasingly-stringent emissions regulations [1]
poses a significant engineering challenge to auto
manufacturers. While aggregate fuel economy is a
function of many factors, such as engine fuel consumption, vehicle weight, and the fuel control strategy, the basic components of the vehicle fuel system
are fundamental pieces in the overall fuel economy
picture.
In an effort to improve vehicle fuel economy,
there is an increased focus on the design and behavior of the vehicle fuel system components. While the
overall design of the fuel system must meet certain
steady-state requirements for fueling capacity, etc.,
transient operation is key for acceptable fueling system dynamic performance, emissions, and fuel econThe Modelica Association

(b) EPA Highway

(c) US06
Figure 1. Common US drive cycles

Figure 1 shows the highly transient nature of
three common US drive cycles: EPA Metro, EPA
Highway, and US06. The EPA tests are used for
emissions certification while the US06 is used to

147

Modelica 2006, September 4th  5th

J.J. Batteh, P.J. Kenny

represent a more aggressive driving style with higher
speeds. Similar transient characteristics are found in
the regulatory New European Drive Cycle (NEDC)
and Japanese drive cycles. The speed traces for
these and other drive cycles can be obtained from
[2].
While customer and regulatory drive cycles
point to the importance of transient performance,
balancing steady-state and transient design considerations at the fuel system level is a nontrivial task.
Cascaded requirements from the system and subsystem level lead to the design of the individual components, such as motors, pumps, and valves, but often
the only mechanism to test the transient response of
the system is late in the product development cycle
when prototype hardware is available. These physical prototypes are expensive and may have long lead
times to produce. Information obtained from physical testing may be obtained too late in the design
cycle to allow an opportunity for design changes or
iterative improvement. Rather than rely on the testing of physical prototypes, it is clearly desirable to
develop multi-domain physical models to simulate
the transient response of the system upstream in the
design process where design changes are most easily
accommodated.
This paper describes the development and application of a multi-domain physical model for a vehicle fuel system. Following some background information on this modeling effort, an overview of the
physical components from the electrical, mechanical,
and hydraulic domains is given. The processes for
calibrating the component models from bench data
and some model sensitivity results are shown. Furthermore, application and validation of the calibrated
model are described including some model improvements to better match the dynamic response of
the experimental data. Following the simulation results, some potential usage scenarios of the fuel system model are presented.

2

Fuel System Modeling

Modeling the dynamics of a vehicle fuel system
requires physical models that span multiple domains.
Figure 2 shows a generic schematic of a vehicle fuel
system [3]. The fundamental components of the system are the fuel tank, fuel motor and pump, fuel
lines, injector, various orifices such as a fuel filter,
and associated regulation valves. A basic, lumped
representation of these components requires elements in the mechanical, electrical, and hydraulic
domains. This section provides some background
The Modelica Association

information regarding this modeling effort and gives
an overview of the component models that comprise
a typical vehicle fuel system. The background information provides additional anecdotal evidence of
the benefits of component-based physical modeling.

Figure 2. Schematic of a vehicle fuel system [3]

2.1

Background

At its most basic level, modeling involves the
mathematical description of the physical behavior.
However, great care must be taken in the abstraction
of the physical system into its mathematic representation as relevant physical insight can be lost. While
Modelica has the advantage of component-based
physical models, other approaches that require direct
generation of the underlying mathematical equations
for use in equation-based solvers can be problematic.
To underscore this point, an example relevant to fuel
system modeling is presented.
The in-tank fuel pump, shown in the upper left
hand side of Figure 2, is a fundamental component of
the vehicle fuel system. The fuel pump is typically
an integrated motor and pump assembly. The assembly is often characterized by steady-state data
consisting of the voltage input to the motor, current
in the motor, pressure difference across the fuel
pump, pump speed, and pump flow rate. A common
approach when using steady-state data to formulate a
transient model is to establish a regression equation
with unknown coefficients, fit the coefficients with
the data, and then establish a semi-empirical transient form of the regression equation using applicable conservation laws. This technique when applied
to the motor yields a semi-empirical formulation for

148

Modelica 2006, September 4th  5th

Modeling the Dynamics of Vehicle Fuel Systems

Kirchhoff's current law (with some non-standard
units):

L

dI
= V  a o  a1 I  a 2 RPM
dt

(1)

where L is the motor inductance, V is the applied
voltage to the motor, I is the current in the motor,
and RPM is the motor shaft speed. A semi-empirical
conservation of angular momentum for the motor
shaft yields the following equation:

J

dRPM
= co + c1 I + c 2 RPM + c3 RPM 2 +
dt
(2)
VI
QdP
c4
 c5
RPM
RPM

where J is the shaft inertia, Q is the volumetric flow
through the pump, and dP is the pressure difference
across the pump. Those familiar with the modeling
of DC motors will recognize some of the terms in the
two equations above: the c1 term represents the
torque input from the motor, the c5 term is the work
done on the fluid, and the c2, c3, and c4 terms are
meant to account for losses in the system. While it is
certainly possible to generate values for the a and c
coefficients from the pump steady-state data, this
approach has severe flaws and can result in unstable
behavior. For example, this approach can result in
inconsistent formulations since the power supplied
by the electrical system is related to the torque input
to the shaft (i.e. a2 and c1 are not independent). Furthermore, losses in the motor represented by the c4
term should be related to the voltage drop across the
motor (i.e. the a2 term) not the voltage input to the
system. Using the steady-state regression coefficients based on the formulation above, the transient
equations implemented in SIMULINK [4] proved
unstable for obvious reasons. Unfortunately, these
types of modeling inconsistencies are extremely easy
to overlook when formulating the underlying system
conservation equations directly rather than modeling
the physical behavior of the individual components.
Given the issues with generating a consistent,
stable model for the entire system, a more fundamental, component-based approach was started using
Modelica. This approach, while still using regressions to describe some physical behavior, ultimately
proved more robust by sharply focusing the modeling on the physical behavior of the individual components. An overview of the Modelica models is
given in the sections that follow.
2.2

tor with components from Modelica Standard
Electrical library and the fuel pump connected
by a shaft. The dynamics of this model are similar to
those given by Eqs, (1-2) but with a consistent formulation. The regression coefficients generated for
Eq. (1) above were used to specify the parameters for
the electrical system.

Fuel Pump Assembly

The model for the fuel pump assembly is shown
in Figure 3. It consists of a model of the electric moThe Modelica Association

Figure 3. Modelica model of fuel pump assembly

A simple, efficiency-based formulation is used
for modeling the pump to account for the various
losses such as friction, leakage, etc.:

 pump =

 fluid
 shaft

(3)

where shaft is the pump shaft torque and fluid is the
torque imparted to the fluid. At steady-state, the
shaft torque is equal to the motor torque. Substituting the definitions for the shaft torque and the torque
imparted on the fluid yields the following equation
for the steady-state efficiency:

 pump =

QdP
Vm I

(4)

where Vm is the steady-state voltage drop across the
emf device and can be calculated from the electrical
system model by applying the voltage and shaft
speed from the steady-state data. In keeping with the
component-based approach, the pump efficiency is
regressed from the steady-state data based on the
pump operating conditions. A sample functional
form for the efficiency equation is as follows:

 pump = d o + d1 dP 2 + d 2 Q + d 3 Q 2 + d 4 RPM 2 (5)
Note that this equation is semi-empirical and could
be posed with different or additional terms based on
the pump operating conditions and available data.
The results from a regression to the pump data
are shown in Figure 4 and agree quite well with the
experimental data. The R2 value of the regression

149

Modelica 2006, September 4th  5th

J.J. Batteh, P.J. Kenny

can be increased semi-arbitrarily by including additional terms in the regression equation. The flowrate
through the pump was also regressed from the
steady-state experimental data using the following
functional form:

Q = bo + b1 RPM + b2 dP

(6)

The sample pump efficiency map in Figure 5 shows
that the efficiency is stable (i.e. between 0 and
100%) along the pump operating line shown in blue.
Note that while negative efficiencies from Eq. (5) are
shown in Figure 5, these regions do not intersect the
pump operating line; thus, the pump would never
encounter negative efficiencies during simulations.
The stability of this formulation was confirmed over
the entire pump operating range (i.e. RPM and dP).

Pump Efficiency (regression) [%]

30

hydraulics modeling. This library is targeted for
casual Modelica users and thus intentionally did not
employ advanced Modelica concepts such as the
MediumModel. It employs a standard hydraulic
formulation similar to the Modelica HyLib library
[5] but is targeted at novice users. Given previous
work in hydraulics modeling [6], it should be possible to develop a library of this scope from the forthcoming Modelica Fluid library [7]. A few of the
more interesting components in the vehicle fuel system will be highlighted.
Figure 6 shows an excerpt of the code from the
accumulator model including the effects of aeration
in the liquid. In lieu of the MediumModel a parameter record is used for the fluid properties.
The model includes the standard conservation equation:

V dP
= Q
 dt

25

where the effective  is calculated from the liquid
compressibility and the mole fraction of gas in the
liquid, ygas. Adjustments to these parameters can also
be used to account for flexibility in the lines and affect the overall system stiffness as will be shown in
subsequent sections.

20
15
10
y = 0.9588x + 0.9221
2
R = 0.9518

5

(7)

0
0

5

10

15

20

25

30

Pump Efficiency (data) [% ]

Figure 4. Sample regression for pump efficiency

Figure 6. Code excerpt from the accumulator model

Figure 5. Sample pump efficiency map

2.3

Hydraulics

A BasicHydraulics library was developed
consisting of accumulators, orifices, pumps, reservoirs, and various valves and flow devices for use in

The Modelica Association

The vehicle fuel system commonly contains
valves used for pressure regulation. Figure 7 shows
the model used for the valves. This model combines
elements from the hydraulic and mechanical domains
and consists of a pintle mass between two stops. The
pintle experiences a force from the hydraulic pressure and opposing preload and spring forces. The
dynamic pintle position is used for the variable flow
area calculation in the orifice. The mechanical components used in the valve are from the Modelica
Translational library.

150

Modelica 2006, September 4th  5th

Modeling the Dynamics of Vehicle Fuel Systems

Figure 7. Valve model

A simple model is used for the vehicle fuel injector. The model, shown in Figure 8, contains a
table similar to that in the vehicle control system.
Given the commanded pulse width and pressure difference across the injector, the fuel injection mass is
calculated and converted into a volumetric flowrate
based on the engine speed. Consequently, the dynamic pressure upstream of the injector is extremely
important as it has a direct impact on the quantity of
fuel injected.

(a) Icon

2.4

(a) Diagram
Figure 8. Injector model

Vehicle Fuel System

Figure 9 shows the vehicle fuel system model.
The system model contains the fuel pump assembly
shown in Figure 3 in conjunction with hydraulic
components for the various lumped volumes in the
system, fuel tank, fuel filter, injector, and valves.
The single injector model accounts for the cycleaveraged fueling to the entire engine rather than individual pulses for the injector in each cylinder. This
formulation is consistent with the overall model formulation and number of lumped volumes considered;
the pulsed flow formulation might be required in
other applications requiring higher fidelity representations of pressure pulsations in the system (i.e. fuel
rail dynamics).
The primary inputs to the model are those provided by the control system, namely the voltage input to the electrical system, the engine speed, and the
desired amount of fuel to be injected as determined
by the fuel pulse width from the engine controller.

The Modelica Association

Figure 9. Vehicle fuel system model

3

Results

Prior to the simulation of the fuel system model
in Figure 9, the relevant physical system parameters
must be provided. These parameters include volumes of the various accumulators; flow areas and
discharge coefficients of the various orifices; pintle
mass, maximum travel, preload force, and spring
constant in the various valves; and bulk properties of
the fuel including fuel density and an estimate of the
mole fraction of air dissolved in the fuel. While
many of these parameters can be obtained from detailed system specifications, some of the parameters
require calibration from experimental data. The following section gives an overview of the calibration
process for a few selected component models. The
simulation results in the following sections were obtained using Dymola [8].
3.1

Model Calibration

Another area where component-based modeling
has a distinct advantage over equation-based system
models is in model calibration and validation. Efforts to calibrate model behavior at the system level
typically prove frustrating and often lead to unphysical calibrations due to multiple calibration knobs and
dynamic interactions between components. Component-based physical modeling is ideally suited for
calibration on the component or sub-model since
unique, isolated test models can be easily constructed
to replicate experimental bench tests.
Due to the timing of the vehicle fuel system
model development effort, the only data that was
available for model calibration resulted from a bench
test of the entire fuel system. Careful extraction of

151

Modelica 2006, September 4th  5th

J.J. Batteh, P.J. Kenny

stream of the valve matches the experimental data
given the flowrate upstream of the volume and the
pressure downstream of the valve. Again, slight
tweaks to the valve parameters, namely the pre-load
force and the flow area, yield significant improvements in the steady-state behavior shown in Figure
13.

Pressure [psig]

Figure 12. Valve calibration model

3

Flowrate [m /s]

Figure 10. Pump flow calibration model

3

Flowrate [m /s]

Model

Original

Exp. data

Pressure [psig]

the relevant experimental data and construction of
unique test models allowed both the steady-state and
transient calibration of vital fuel system components.
While the regression provided in Eq. (6) provides good overall agreement with the pump data
provided, there can be small differences that arise in
steady-state values due to point-by-point regression
accuracy and prototype hardware variation. To dial
in the steady-state pump flow calculation at a given
operating condition, the test model in Figure 10 was
constructed. This model prescribes the pump speed
and pressure difference from experimental data and
allows for precise calibration of a flow multiplier to
match the steady-state experimental data. A small
adjustment in the flowrate gives the results shown
Figure 11 where good steady-state agreement is
achieved on each side of the transient test. It should
be emphasized that this test was used to calibrate
steady-state behavior, and thus the transient differences between the model and the data should be ignored.

Calibrated

Model
Time [s]

Exp. data

Figure 13. Valve flow calibration (steady-state) results

Original

3.2

Model
Exp. data
Calibrated
Time [s]

Figure 11. Pump flow calibration (steady-state) results

Figure 12 shows a model used for steady-state
calibration of the flow in a valve as shown in Figure
7. In this case, the valve flowrate is not directly
measured so the flow characteristics of the valve are
calibrated such that the steady-state pressure upThe Modelica Association

Model Sensitivity

Given the initial calibration of the components,
the system in Figure 9 was simulated to understand
the fuel system model sensitivities to estimated parameters. One key parameter in hydraulics modeling is the effective compressibility  in Eq. (7). This
parameter accounts for the compressibility of the
fluid, lines, and gas dissolved in the liquid. Figure
14 shows the effect of changing the system compressibility via the amount of air dissolved in the
fuel. Decreasing the amount of air dissolved in the
fuel results in a faster pressure response in the volume. It is not surprising that this value, which is difficult to estimate and often used as a model calibration factor, has a profound impact on the system
stiffness as shown in the rate of pressure rise upstream of the injector.

152

Modelica 2006, September 4th  5th

Modeling the Dynamics of Vehicle Fuel Systems

Exp. data

Pressure [psig]

Exp. data

Pressure [psig]

Decreasing ygas

Time [s]

Model

Figure 14. Sensitivity to effective compressibility

Pressure [psig]

Figure 15 shows the effect of changing the size
of the lumped volume upstream of the injector. As
expected, reducing the size of the volume also increases the rate of pressure rise but, in this simulation, does not affect the response as significantly as
changing the amount of dissolved gas in the liquid.
It should be noted that system volumes are not typically considered adjustable parameters as the values
are available from system/component design specifications. However, the sensitivity was explored here
as there was considerable uncertainty in the differences between the experimental setup and the vehicle configuration from which the system data was
obtained.

Exp. data

Decreasing
volume

Time [s]

Figure 15. Sensitivity to volume size

3.3

Time [s]

Figure 16. Transient simulations

Given the results from the model sensitivity
study and these initial transient tests, the vehicle fuel
system model was modified slightly to more accurately represent the dynamic response exhibited in
the experimental data. Figure 17 shows the modified
model as compared to the original in Figure 9. Note
the region highlighted in the box. The initial model
formulation considered a single, lumped volume in
front of the injector. Since this volume represents
the portion of the fuel system from the pump to the
injector, it was rather large. Thus, the simulated response represented a filtered value of the actual dynamic response. The revised model shown in Figure
17 replaces the single large volume with two smaller
volumes and models the fluid inertia between the
volumes to account for the underbody fuel lines.
Figure 18 shows the improved model results.
Though further improvement is possible, the revised
model clearly does a better job of capturing the detailed dynamic response of the fuel system.

Revised Model and Simulations

Following the sub-model calibration adjustments, the calibrated model was used in transient
simulations. Figure 16 shows an overall comparison
between the experimental data and the simulation for
the pressure upstream of the injector. While the
model captures the steady-state behavior reasonably
well, there are certainly some differences in the transient details, namely the rate of pressure rise and the
oscillatory response following the transient.
Figure 17. Fuel system model with inertia

The Modelica Association

153

Modelica 2006, September 4th  5th

J.J. Batteh, P.J. Kenny
_

64

p

g [p g]

p g_

g

[ ]

system, these excursions can lead to differences between the desired and actual fueling to the engine
and potentially degraded fuel economy, drivability,
and emissions.

62

Pressure [psig]

60
58

Exp. data

56
54
52
50

Model

48
46

7.0

7.5

8.0

8.5

Time [s]

Figure 18. Improved model results

3.4

Drive Cycle Simulations

Having established that the model does a reasonable job of simulating the dynamic response of
the vehicle fuel system subject to simple transient
inputs, the model in Figure 17 was used to simulate
drive cycle dynamics over a common US emissions
cycle. Figure 19 shows the vehicle speed during the
drive cycle (the first 1400s of the cycle shown in
Figure 1a). The dynamic inputs to the fuel system
model were provided by VPACS, a Ford-proprietary
tool that models the vehicle and control system
([9],[10]). The simulations ran faster than real time
though real time simulation was not a stated requirement for the system model.

Figure 19. Vehicle speed during drive cycle

Figure 20 shows the pressure upstream of the
injector and the engine fuel flowrate during the simulation. The dynamics are a result of the transient
operating conditions (i.e. vehicle speed, engine operating conditions, desired fueling from the engine
controller, etc.) combined with the dynamics of the
fuel system. In these sample simulations, the pressure upstream of the injector is nominally maintained
at a constant value, but some excursions can be seen.
Depending on the implementation of the fuel control
The Modelica Association

Figure 20. Drive cycle simulation results

3.5

Model Usage Scenarios

While this paper describes the initial model development for a multi-domain physical model of the
vehicle fuel system, this model capability can be
used in various applications. As an extension of the
model sensitivity analysis described previously, the
model can be used in conjunction with the NestedAnalysisToolkit [11] or the "Design Optimization"
feature in Dymola [8] for structured system robustness analyses. In addition, the model can be combined with detailed models of the liquid fuel behavior ([12],[13]) and cycle simulation dynamics ([14][16]) in the engine to understand the impact of the
injection dynamics on engine operation, drivability,
and emissions. While the complex dynamics considered in such comprehensive engine models may not
be suitable for simulation of entire drive cycles, the
combined fuel system and engine model can be useful for in detailed analysis of selected transient
events. In particular, the engine cranking and cold
start behaviors which are extremely important for
emissions compliance can be simulated while including the dynamics of the fuel system.

4

Conclusions

This paper details the formulation, development, calibration, and simulation of a multi-domain
physical model for a vehicle fuel system. Simulation

154

Modelica 2006, September 4th  5th

Modeling the Dynamics of Vehicle Fuel Systems

of the calibrated model shows good agreement with
experimental data. A sample simulation of the
model over a vehicle drive cycle is included to illustrate possible application usage. Several potential
applications of this model are discussed including
integration with other detailed models of the powertrain system. In addition to the modeling details, this
work provides additional anecdotal evidence of the
benefits of component-based physical modeling as
compared to equation-based system modeling approaches.

[8]
[9]

[10]

[11]

Acknowledgements
The authors would like to thank Larry Buch for his
upfront formulation work, system parameter identification, and ongoing support of this work, and Michael Tiller for his valuable discussions regarding
the proper modeling of the fuel pump assembly.

[12]

References
[1]

[2]
[3]
[4]
[5]

[6]

[7]

US light-duty vehicle emissions regulations,
http://www.dieselnet.com/standards/us/light.
html
Emissions test cycle description/speed traces,
http://www.dieselnet.com/standards/cycles/
http://www.autozone.com
Simulink. The Mathworks, Natick, MA,
USA.
Beater, P., 2000, "Modeling and Digital
Simulation of Hydraulic Systems in Design
and Engineering Education using Modelica
and HyLib", Modelica Workshop 2000 Proceedings, pp. 33-40,
http://www.modelica.org/events/workshop20
00/proceedings/Beater.pdf
Tiller, M., 2005, "Development of a Simplified Transmission Hydraulics Library based
on Modelica.Fluid", Proceedings of the 4th
International Modelica Conference, pp. 237273,
http://www.modelica.org/events/Conference2
005/online_proceedings/Session3/Session3b4
.pdf
Elmqvist, H., Tummescheit, H., and Otter,
M., 2003, "Object-Oriented Modeling of
Thermo-Fluid Systems", Proceedings of the
3rd International Modelica Conference, p.
269-286,
http://www.modelica.org/events/Conference2
003/papers/h40_Elmqvist_fluid.pdf

The Modelica Association

155

[13]

[14]

[15]

[16]

Dymola. Dynasim AB, Lund, Sweden,
http://www.dynasim.com.
DeLosh, R.G., Brewer, K.J., Buch, L.H.,
Ferguson,T.F.W., and Tobler, W.E., 1981,
"Dynamic Computer Simulation of a Vehicle
with Electronic Engine Control", SAE810447, Society of Automotive Engineers.
Strayer, B.A. and Trinker, F.H., 2005, "A
Predictive Model for Feedgas Hydrocarbon
Emissions: An Extension to Warm Engine
Maps", SAE-2005-01-3862, Society of
Automotive Engineers.
Batteh, J.J., Tiller, M. and Goodman, A.,
2005, "Monte Carlo Simulations for Evaluating Engine NVH Robustness", Proceedings
of the 4th International Modelica Conference,
p.
385-392,
http://www.modelica.org/events/Conference2
005/online_proceedings/Session5/Session5a1
.pdf
Puchalsky, C., Megli, T., Tiller, M., Trask,
N., Wang, Y., and Curtis, E., 2002, "Modelica Applications for Camless Engine Model
Development", 2nd International Modelica
Conference
Proceedings,
p.
77-86,
http://www.modelica.org/events/Conference2
002/papers/p11_Puchalsky.pdf
Batteh, J.J. and Curtis, E.W., 2003, Modeling Transient Fuel Effects with Variable Cam
Timing, SAE 2003-01-3126, Society of
Automotive Engineers.
Newman, C., Batteh, J., and Tiller, M., 2002,
"Spark-Ignited-Engine Cycle Simulation in
Modelica", 2nd International Modelica Conference
Proceedings,
pp.
133-142,
http://modelica.org/Conference2002/papers/p
17_Newman.pdf
Batteh, J., Tiller, M., and Newman, C., 2003,
"Simulation of Engine Systems in Modelica",
3rd International Modelica Conference Proceedings,
pp.
139-148,
http://www.modelica.org/events/Conference2
003/papers/h34_Batteh.pdf
Bowles, P. and Batteh, J., 2003, "A Transient, Multi-Cylinder Engine Model Using
Modelica", SAE-2003-01-3127, Society of
Automotive Engineers.

Modelica 2006, September 4th  5th

J.J. Batteh, P.J. Kenny

The Modelica Association

156

Modelica 2006, September 4th  5th

Motorcycle Dynamics Library in Modelica

Motorcycle Dynamics Library in Modelica
Filippo Donida, Gianni Ferretti, Sergio M. Savaresi, Francesco Schiavo, Mara Tanelli
Politecnico di Milano, Italy
Piazza Leonardo da Vinci 32, 20133 Milano

Abstract
This paper presents a Modelica library developed for
the dynamic simulation of a motorcycle, developed
within the Dymola environment (see [1], [2], [3])
and tailored to test and validation of active control
systems for motorcycle dynamics. As a matter of
fact, as a complete analytical model for two-wheeled
vehicles is not directly available due to the complexity
of their dynamic behavior, a reliable model should
be based on multibody modeling tools endowed with
automated symbolic manipulation capabilities. In this
work we illustrate the modular approach to motorcycle
modeling and discuss the tire-road interaction model,
which is the crucial part of the simulator. Moreover,
we propose a virtual driver model which allows to
perform all possible maneuvers.
Keywords: Automotive Systems, Motorcycle Dynamics, Multibody Modeling, Dynamic Simulation.

1 Introduction and Motivation
In this work we present a library for the dynamic simulation of a two-wheeled vehicle developed in Modelica, within the Dymola environment. This library is
tailored to be employed for test and validation of active control systems for motorcycle dynamics.
The design of a control oriented simulator for twowheeled vehicles is a very challenging task, as a complete analytical model is not directly available due to
its complexity and its high sensitivity to parameters
variations. Accordingly, a reliable model should be
based on multibody modeling tools endowed with automated symbolic manipulation capabilities (see e.g.,
[4], [5], [6]).
As a matter of fact, in two-wheeled vehicle one has
to handle strong dynamic coupling between the rigid
bodies (front and rear frames, front and rear wheels)
and the elastic joints (fork and front and rear suspensions), which make it difficult to devise appropriThe Modelica Association

ate reduced model for control purposes (see e.g., [7],
[8], [9]). The effort of analyzing well-defined driving
conditions on a complete dynamic simulation model
seems to be the key for a comprehensive control design for motorcycles. Such approach is well confirmed
in the available literature (see e.g., [7], [8], [9]).
In this work, we illustrate the modular approach to
motorcycle modeling and present the library architecture discussing all the different packages. In particular,
the core of the library lies in the tire-road interaction
model, which manages the interaction between tires
and road and has a major impact on both ride and handling properties of motorcycles (see e.g., [10]).
Moreover, we propose a virtual driver model which allows to track a predefined trajectory and keep a target
speed during different maneuvers.
The paper is organized as follows. Section 2 gives an
overview of the overall library architecture, while Section 3 and Section 4 describe in detail the wheel-road
interaction model and the chassis and suspension models, respectively. Section 5 discusses the employed
aerodynamic model, whereas in Section 6 the road surface model is discussed. Section 7 introduces the implemented Virtual Driver model and its functionalities.
Finally, in Section 8 some simulation results are presented to assess the validity of the proposed simulation
model.

2

Motorcycle
Overview

Dynamics

Library

The development of this library is based
on the Modelica Multibody library.
The
MotorcycleDynamics is a library package
for Dymola, developed in Modelica 2.2, which
offers all the capabilities needed to perform virtual prototyping for a two-wheeled vehicle. The
package shares basically the same structure of the
VehicleDynamics library, see [11], and it is
structured in a tree-based fashion. The root contains
the standard motorcycle model and nine sub-packages

157

Modelica 2006, September 4th  5th

F. Donida, G. Ferretti, S.M. Savaresi, F. Schiavo, M. Tanelli

Figure 1: The complete simulation model block diagram.
 Motorcycle: is the eleven degrees of freedom
motorcycle model with all the default components (e.g., wheels, suspensions, and so on). Figure 1 shows a the complete block diagram of the
motorcycle;

 the package Driver: it offers different drivers
models and capabilities which allow to perform
all the different maneuvers;
 the package Environments: it models the
road surface and handles also its animation rendering;

 the package Chassis: it contains the chassis
standard structure and the corresponding geometrical data. It is possible to define new Chassis
models and to customize the existing ones;

 the package Aerodynamics: it models the lift
and drag aerodynamics forces;

 the package Example: it contains some exam the package Suspension: it contains the baples which allow the user to explore the library
sic spring-damper model, Base_Suspension,
capabilities.
the front suspension (which also include the front
fork and the handlebars) and the rear suspension; In the following Sections we will describe in detail the
 the package Rear_Swinging_Arm: it defines structure of each package so as to highlight its pecuthe rear swinging arm, which, again, is fully para- liarities.
metrized and customizable;
 the package Wheel: it contains all the wheel
geometrical data, the Wheel Road Interaction
model, the friction model, the tire relaxation
model and the interface model between the wheel
and the road surface. Specifically, two different
friction models are available to the user. The first
is based on a linear approximation of the friction
forces and it is reliable at low slip, while the second relies on the Pacejka formula and its highly
nonlinear;

3

Wheel-Road Interaction

The core of the Motorcycle Dynamics library lies in
tire modeling and in defining the interaction between
tires and road, which has a major impact on both ride
and handling properties of motorcycles (see e.g., [10]).
In fact, the tire allows contact between the rigid part
of the wheel (the hub) and the road surface, and it is
the means for ensuring adherence to the road and for
transferring to the ground longitudinal (i.e., traction
and braking) and lateral friction forces, which guar the package Braking_Systems: it includes antee steerability.
the braking system model and an Anti-lock Brak- From the conceptual point of view, the
ing System ABS control;
Wheel_road_Interaction model (which is
The Modelica Association

158

Modelica 2006, September 4th  5th

Motorcycle Dynamics Library in Modelica

road tangent plane at the ideal contact point. The unit
vector zw completes the frame
yw = yh

Figure 2: Wheel reference frames: hub (green),
wheel (yellow), P (red) and POC
(blue).

xw =

yw  n
|yw  n|

zw = xw  yw .

The ideal contact point frame has the origin laying on
the road plane, along the direction identified by zw ,
the unit vector zi is the road normal unit vector n, xi
coincides with xw and yi simply completes the frame
zi = n

xi = x w

yi = zi  xi .

The location ri of the origin of the ideal contact frame
part of the package Wheel) computes the forces is computed as:
arising at the contact between tire and road and the
ri = rh  Dz zw ,
connection with the wheel holds explicitly through
a mechanical connector. In order to compute these
forces, it is fundamental to define the correct wheel with rh being the location of the origin of the hub
reference frames. Namely, as it is shown in Figure 2, frame and with Dz being the distance between the hub
origin and the road plane in the zw direction. The ideal
four reference frames are needed:
and real contact frames are aligned with each other and
 hub : is the frame integral to the rigid part of the differ only in the origin position; the location rr of the
real contact frame is displaced from ri (see e.g., [6],
wheel, that is the hub reference frame;
[12]) by the so-called tire trail. Hence
 wheel: is the frame to describe the forward mo

tion of the wheel;
dx
rr = ri + Rr  dy  ,
 P: is the frame of the ideal contact point between
0
wheel and ground, when no motion is applied to
the wheel;
where Rr is the rotation matrix from the real contact
frame to the absolute frame. In turn, the displacements
 POC: is the frame of the real contact point bed , d and dz have been computed1 as in [6]:
tween wheel and ground, when the wheel is mov- x y
ing.
dx = fw R sgn(vx ),
The said forces are in turn computed according to a
description of the road, defined in the road model,
which will be presented in Section 6. The connection between Wheel_road_Interaction model
and Road model (which is part of the package
Environments) is therefore performed implicitly,
through the inner/outer statement, generally used
to describe force fields. In this way, the description of
the road can be made available to all wheels and vehicles in the scene.
The hub frame is attached to the wheel hub, it rotates
with the wheel around the axis yh and it is the frame
associated to the connector trough which the wheel is
attached to its rotational joint. The wheel frame is attached to the wheel center, with unit vector yw coinciding with yh , while xw is the unit vector associated
with the wheel velocity direction - obtained as the intersection between the plane orthogonal to yw and the
The Modelica Association

dy = (Dz  R) sin(j),
dz = (Dz  R) cos(j),
where R is the wheel radius, vx is the forward wheel
ground contact point velocity and fw is the rolling friction coefficient [6], which can be computed as:
fw = A +

B C 2
+ v ,
p p x

where p is the tire pressure and vx the wheel forward
velocity, i.e.,



vx
 vy  = RTr vr = RTr drr ,
dt
vz
1 The sgn(x) function has been smoothed by replacement with
the function sgn(x)  p2 arctan(kx), with k  1010 .

159

Modelica 2006, September 4th  5th

F. Donida, G. Ferretti, S.M. Savaresi, F. Schiavo, M. Tanelli

and A, B, C are suitable non-negative parameters.
The wheel roll angle j is given by
j =  arctan

and
  T

0


l = R  1  RTr wr  vx  /vx .
0

zTw yr
.
zTw zr

The forces arising from the tire-road interaction can
be decomposed into a vertical force Fz , a longitudinal
force Fx and a lateral force Fy . The normal force Fz
can be computed as:


ddz
Fz =  Kel dz + Del
zr
dt

Finally, the lateral force Fy is computed as a linear
function of the tire side-slip angle (see e.g., [12]), i.e.,
the angle between the rotational equivalent wheel velocity wR and the wheel-ground contact point velocity
vx and of the roll angle. Namely


Fy = ka a  kj j Fz = Ka a  Kj j yr ,
(2)

with Kel and Del being the tire elastic and damping where a is the tire side-slip angle and j is the roll anconstants which describe the tire elasticity properties. gle. In Equation (2),
|Fy | 
|Fy | 
As for the longitudinal and lateral forces descripKj :=
,
Ka :=


a a=0,j=0
j a=0,j=0
are the cornering and camber stiffness, respectively.
In the Pacejka model, instead, both longitudinal and
lateral forces are highly nonlinear functions, namely

Figure 3: Plot of the longitudinal force Fx as a function
of the wheel slip computed with the nonlinear Pacejka formula (solid line) and its linear approximation
(dashed-dotted line).
tion, two different models can be employed, according
to the specific needs, namely a linear approximation
model or a nonlinear model based on the Pacejka formula presented in [10].
The user can select either the linear or the Pacejka
model, according to the current maneuver and to the
analysis purpose of the simulator (see Figure 3 for
a comparison between the longitudinal force Fx as a
function of the wheel slip computed with the nonlinear Pacejka formula and its linear approximation). The
longitudinal force Fx , is either a traction force Ft - during acceleration - or a braking force Fb . In the linear
model, both traction and braking forces are computed
as functions of the longitudinal wheel slip l (see Figure 3), as
Fx = 0x lxr ,
where

(3)

Fy = Fy (Fz , l, a, j).

(4)

The Pacejka formulas for Fx and Fy are based on a
semiempirical model, and the analytical expressions
of the forces depend on a huge number of parameters estimated from data. This model has been implemented according to the results proposed in [10],
where extensive tests on different tires have been carried out so as to estimate the needed parameters via
numerical optimization.
Moreover, the wheel-road interaction model has to
take into account the tire relaxation dynamics, which
describes the tire deformation due to elasticity properties of the tire material. This phenomenon is modeled
computing the real longitudinal and lateral forces as
1
(Fx  Fxreal )
t(t)
1
=
(Fy  Fyreal ) ,
t(t)

Fxreal =

(5)

Fyreal

(6)

where Fx and Fy are as in (1) and (2) if the linear force
model is selected, or as in (3) if the Pacejka model
is employed. The filter time-varying time constant is
t(t) = s0l /vx , where s0l is the tire-relaxation length,
usually set equal to half of the tire circumference, and
vx is the wheel-ground contact point velocity.
Finally, these interaction forces have to be balanced by
(1) the forces Fh (and torques t h ) at the hub frame, thus
0 = Fh + Fxreal + Fz + Fyreal
0 = th + (rr  rh )  (Fxreal + Fz + Fxreal ) .

|Fx | 
0x =

l l=0

The Modelica Association

Fx = Fx (Fz , l, a, j),

160

Modelica 2006, September 4th  5th

Motorcycle Dynamics Library in Modelica

4 Chassis and Suspensions Modeling

 PreLoad is a constant parameter which depends
on the spring tuning and allows to change the static load distribution of the motorbike.

In order to develop a reliable simulator, the geometry of the motorbike has to be carefully defined. As
a matter of fact, very small changes in the center of
gravity position may substantially alter the dynamic 5 Aerodynamics
vehicle behavior. Moreover, we designed the library
Two are the main aerodynamic forces which need to be
to be highly reusable and customizable.
taken into account in vehicle modeling, and are shown
in Figure 5
 the Drag Force which is directed along the longitudinal axis;

 the Lift Force which is directed along the vertical
axis.

Figure 4: Motorcycle and driver geometry and center
of gravity position.
To this end, each subpackage contains a record data
structure (see also Figure 1) to store and define all geometric data, e.g., masses, inertias and physical parameters for each component. For example, Figure 4 shows
the chassis and driver geometric data which are stored
in the Base_Dimension_MassPosition_Data
record. The Suspension package contains the basic damper model Base Suspension, the front
suspension Front Suspension (which comprises
the front fork, the handlebars and their hard
stops Steer Stopper) and the rear suspension
Rear Suspension.
Both front and rear suspension employ the same
mono-directional double spring-damper model

Figure 5: Lift and Drag Aerodynamic forces.
These forces are applied in a specified point called
pressure center which is generally shifted forward
with respect to the chassis center of gravity (see [6]).
The drag force affects the maximum speed and acceleration values and it is proportional to the square of the
forward speed. It is computed as

Fs = ks (x  x0 )

1
Fd = r Cx A v2 ,
2

Fd = cd x
Fsusp = Fs  Fc  PreLoad,

(7)

where r is the air density, Cx is the drag coefficient,
A is the section of the motorbike area in the forward
direction and v is the vehicle forward velocity.
 ks is the spring elastic constant and (x  x0 ) is the
The lift force (also proportional to the square of the
spring compression/deflection;
forward speed) reduces the vertical load on the front
 Fs is the spring elastic force and it is a function of and rear tire. It is computed as
the spring compression/deflection;
1
Fl = r Cl A v2 ,
(8)
 cd is the damping coefficient;
2

where

 Fd is the damper force and it is a function of the where Cl is the lift coefficient and all the other paracompression/deflection velocity x;
meters have the same meaning as in (7).
The Modelica Association

161

Modelica 2006, September 4th  5th

F. Donida, G. Ferretti, S.M. Savaresi, F. Schiavo, M. Tanelli

6 Road Surface Model and Rendering
The road model is part of the Environments package and it has been developed on the basis of the road
model given in the VehicleDynamics library [11].
However, we extended that model by adding the z co-

Figure 7: Example of a saddle-like road surface with
the normal unit vector and height.

7

Figure 6: Screenshot of the motorbike and of a road
model.
ordinate. Specifically, the z coordinate may vary as
a function of the (x, y) position, unlike in the model
available in the Dymola library, where the z coordinate can be set by the user but has to remain fixed for
the whole simulation.
The road characteristics, accessible through the Road
model, are the following:

Virtual Driver

For the effective simulation of two-wheeled vehicles
it is necessary to develop a virtual driver model.
To this end, we complemented our library with a
Driver package, which encloses all the control systems needed to perform a desired maneuver.
To this end, the motorcycle model is complemented
with two control loops which take care, on one hand,
of keeping a constant target speed throughout a specified maneuver and, on the other, of stabilizing the motorbike and following a predefined trajectory.
The closed loop speed control has been implemented
as a Proportional-Integral control of the form
R(s) =

kP s + kI
,
s

 the vector n, perpendicular to the surface tangent where the proportional and integral gain can be tuned
to the road at the tire-road contact point;
so to model different drivers behaviors. This controller takes as input the current forward vehicle ve the quote of the contact point z;
locity and outputs the appropriate traction or braking torque needed to follow the target speed set-point
 the friction coefficient , which allows to model value.
different road conditions (e.g., dry and wet as- The first task in order to model a virtual driver is to
phalt, icy road and so on).
be able of following a desired roll angle profile, which
allows to follow a road with turns. Accordingly, the
Hence, the road model is essentially defined by a sur- proposed controller computes the steering torque to be
face of equation f (x, y, z) = 0, from which the relevant applied as a function of the roll angle error, defined as
normal unit vector can be computed as n = f /| f |,
ej (t) = j(t)  jo (t),
and by the road surface characteristics (described via
the friction coefficient ). The computation of the
where the value of the set-point roll angle jo is comsurface gradient has been automatically performed
puted, at any given time instant, as
through the statement partialderivative(),
described in [13].
v(t)2C(t)
o
j
(t)
=
,
As for the rendering, it is possible to visualize the road
g
in the Dymola 3D animator via a dxf file created with
an ad hoc Matlab routine and the open source software where v(t) is the vehicle forward velocity, C(t) is
QuikGrid. Figure 6 and Figure 7 shows examples of the instantaneous curvature of the trajectory and g is
road surfaces created with this procedure.
the gravitational acceleration. Hence, the set-point
The Modelica Association

162

Modelica 2006, September 4th  5th

Motorcycle Dynamics Library in Modelica

roll profile is obtained as the concatenation of the instantaneous roll equilibrium values, computed assuming steady-turning conditions [6]. The roll-angle controller has the form
ts (t) = k0 j(t) + k1 j(t) + k2 ej (t),

(9)

where ts is the steering torque to be applied in order
to track the predefined roll. The presence of the first
and second derivatives of the roll angle come from the
observation that a real driver tunes his response not
only based on current roll angle, but also according to
the rolling velocity and acceleration.
If we consider, coherently with the steady turning assumption mentioned above, the set-point jo (t) to be Figure 8: Steering torque input from the driver (top),
steering torque applied by the stabilizer (middle), roll
constant, then we can rewrite (9) as
rate (bottom, solid) and roll angle (bottom, dashed).
ts (t) = k0 e(t) + k1 e(t) + k2 e(t),
The second possible driver model allows the simulator
so that the transfer function of the roll controller can
user to input the desired trajectory as through a joybe expressed in the more familiar form
stick, that is to provide as input to the simulator a steering torque profile to be followed. According to the
2
k0 + k1 s + k2 s
Rj (s) =
,
(10) given profile, then, a control loop has been designed
(1 + sT1 )(1 + sT2 )
which stabilizes the motorbike to a steady state tilt anwhere, again, the time constants T1 and T2 can be tuned gle with zero roll velocity. As far as the stabilizer deto obtain faster or slower tracking performance. Such sign is concerned, in fact, the user input steering torque
roll controller is then complemented with two more is treated as a measurable disturbance, and the stabiterms, accounting for the direction and position errors, lizer provides as output the steering torque needed to
which have to be taken into account in order to track achieve a steady state behavior of the roll angle. The
not only a roll profile, but also a desired trajectory, e.g., performance of such controller are shown in Figure 8,
to drive the bike on a race track. Accordingly, the final where the user input is a sequence of three steering
expression for the tracking controller (see also [14]) torque steps. As it can be seen, the stabilizer provides
as output the correct steering torque which allows the
has the form
motorbike to follow the profile entered by the user. As
ts (t) = k0 j(t)+k1 j(t)+k2 ej (t)+k3 DP(t)+k4 DY(t), a consequence, the roll angle and the roll rate experience a transient after each step input before stabilizing
where DP(t) represents the position error, while DY(t) to a steady state value.
the direction error. These are computed discretizing
the desired trajectory and evaluating the discrepancy
between the current position and the closest trajectory 8 Simulation Results
point. Such point, though, is chosen according to a
look-ahead rationale, i.e., as the closest point com- We now show some simulation result which assess the
puted over an error prevision time interval. It is worth validity of the MotorcycleDynamics library. First
noting that this trick is actually performed by human of all, to validate the trajectory tracking performance
riders, which tend to adjust the vehicle direction look- a simulation experiment is presented where the motoring forward on the road and not based on the current cycle is commanded to run a circular trajectory, with a
vehicle position. In our controller, we inserted the tra- radius of 12.5 m at a target speed of 8 m/s. The results
jectory tracking performance requirement by comput- obtained with the Dymola 3D-Animator are shown in
ing the overall desired roll profile considering also the Figure 9(a), where the solid line depicts the trajecposition and direction errors DP(t) and DY(t). Such tory of the rear hub frame origin, while the simulated
new set-point jo (t) is then fed as input to the con- trajectory of front wheel, rear wheel and chassis are
shown in Figure 9(b). Note in particular the large introller (10).
The Modelica Association

163

Modelica 2006, September 4th  5th

F. Donida, G. Ferretti, S.M. Savaresi, F. Schiavo, M. Tanelli
> 

= 

(a)

(a)

(b)

Figure 9: Simulated trajectory visualized via the Dymola 3D-Animator (top )and plot of the simulated trajectory of Front Wheel, Rear Wheel and Chassis (bottom).

(b)

Figure 10: Screenshot of a turning maneuver (top) and
plot of the steering angle, steering torque and roll anclination of the motorcycle (Figure 9(a)b), needed to gle in the same maneuver (bottom).
run a trajectory with such a high curvature. To better understand the virtual driver behavior, Figure 10(a)
shows, via the 3D animator, the four phases during a 9 Concluding Remarks
curve. Namely, the curve is entered with a countersteering, which makes the vehicle tilt correctly, then
there is a steering phase which takes to the steady state This work presented the development of the
cornering. Finally, the curve is exited and the vehicle MotorcycleDynamics library for Dymola,
is back to zero tilt angle. Figure 10(b) shows, in the developed in Modelica 2.2, which offers all the
same maneuver a plot of the steering angle, steering capabilities needed to perform virtual prototyping
torque and roll angle. We also show in Figure 11(a) a for a two-wheeled vehicle. The overall architecture
screenshot of the 3D animator when a dangerous brak- of the library has been thoroughly discussed, and its
ing maneuver (panic brake) on a curve is performed functionalities have been highlighted via simulation
and the subsequent fall of the motorbike. Figure 11(b) experiments.
shows the correct behavior of the simulated roll angle A controller for target speed and trajectory tracking,
and front wheel sideslip angle which correctly diverge based on a virtual driver model has been presented
when the bike falls. Finally, we command the motor- and simulation results assessed its validity.
bike to follow an eight trajectory on a hilly road, mod- Future work will be devoted to validate the motorcycle model with experimental data and to exploit
eled via a hyperbolic paraboloid of the form
the library capabilities for active control system
prototyping.
 x 2  y 2
Moreover, we plan to extend the driver model so to
z=
+
+ 0.55.
(11) insert the driver lean angle as an additional degree of
20
30
freedom in the motorcycle model, in order to model
the driver as active, capturing his real behavior and its
Figure 12 shows the various phases of the maneuver effects on the overall vehicle dynamics.
and the simulated trajectory.
The Modelica Association

164

Modelica 2006, September 4th  5th

Motorcycle Dynamics Library in Modelica

[7] D. J. N. Limebeer, R. S. Sharp, and S. Evangelou,
The stability of motorcycles under acceleration
and braking, Proc. I. Mech. E., Part C, Journal
of Mechanical Engineering Science, vol. 215, pp.
10951109, 2001.
[8] V. Cossalter, R. Lot, and F. Maggio, On the
Stability of Motorcycle during Braking, in SAE
Small Engine Technology Conference & Exhibition, Graz, Austria, September 2004, 2004, sAE
Paper number: 2004-32-0018 / 20044305.

(a)

[9] G. Ferretti, S. Savaresi, F. Schiavo, and
M. Tanelli, Modelling and simulation of motorcycle dynamics for Active Control Systems Prototyping, in Proceedings of the 5th MATHMOD
Conference, Vienna, Austria, 2006.
[10] R. S. Sharp, S. Evangelou, and D. J. N. Limebeer, Advances in the modelling of motorcycle
dynamics, Multibody System Dynamics, vol. 12,
pp. 251283, 2004.
(b)

[11] J. Andreasson, Vehicle dynamics library, in
Proceedings of the 3rd International Modelica
Figure 11: Animation of a motorcycle fall during a
Conference, Linkoping, Sweden, 2003.
braking maneuver on a curve (top) and corresponding
roll angle and front wheel sideslip angle (bottom).
[12] H. Pacejka, Tyre and Vehicle Dynamics. Oxford:
Buttherworth Heinemann, 2002.

References

[13] H. Olsson, H. Tummescheit, and H. Elmqvist,
Using automatic differentiation for partial
derivatives of functions in modelica, in
Proc. 4th International Modelica Conference,
[2] M. Otter, H. Elmqvist, and S. Mattsson, The
Hamburg-Harburg, Germany, March 7-84, 2005,
new modelica multibody library, in Proc. 3rd
pp. 105112.
International Modelica Conference, Linkoping,
Sweden, November 3-4, 2003, pp. 311330.
[14] L. Marescotti, Modellazione del sistema pilotaveicolo a due ruote in ambiente integrato Matlab[3] S. Mattsson, H. Elmqvist, and M. Otter, PhysAdams, Masters thesis, Universita di Pisa,
ical System Modeling with Modelica, Control
2003.
Engineering Practice, vol. 6, pp. 501510, 1998.
[1] M. Tiller, Introduction to Physical Modeling with
Modelica. Kluwer, 2001.

[4] R. Sharp, The stability and control of motorcycles, Journal of Mechanical Engineering Science, vol. 13, pp. 316329, 1971.
[5] V. Cossalter and R. Lot, A motorcycle multibody model for real time simulations based on
the natural coordinates approach, Vehicle System Dynamics: International Journal of Vehicle
Mechanics and Mobility, vol. 37, pp. 423447,
2002.
[6] V. Cossalter, Motorcycle Dynamics. Milwaukee,
USA: Race Dynamics, 2002.
The Modelica Association

165

Modelica 2006, September 4th  5th

F. Donida, G. Ferretti, S.M. Savaresi, F. Schiavo, M. Tanelli

Figure 12: Screenshot of an eight maneuver and of the simulated trajectory.

The Modelica Association

166

Modelica 2006, September 4th  5th

Development and Verification of a Series Car Modelica/Dymola Multi-body Model to Investigate Vehicle Dynamics
Systems

Development and Verification of a Series Car Modelica/Dymola
Multi-Body Model to Investigate Vehicle Dynamics Systems
Christian Knobel Gabriel Janin Andrew Woodruff
Group Research and Technology, Munich, Germany, christian.knobel@bmw.de
Ecole Nationale Superieure de Techniques Avancees, Paris, France, gabriel.janin@ensta.org
Modelon AB, Lund, Sweden, andrew.woodruff@modelon.se
BMW

Abstract
The development and the verification of a Multibody model of a series production vehicle in Modelica/Dymola is presented. The model is used to investigate and to compare any possible configuration of
actuators to control vehicle dynamics with a general
control approach based on model inversion and a nonlinear online optimization.
Keywords: Multi-body Vehicle Model, Vehicle Dynamics, Model Verification, Model Validation, Active Vehicle Dynamics Systems, Tire Model, Suspension Kinematics, Suspension Compliance

1 Introduction
Systems for control of Vehicle Dynamics went to series production for the first time in 1978 with the limitation of brake pressure to avoid locking the wheels to
ensure cornering under all braking conditions. Braking individual wheels (independently from the drivers
commands) to stabilize the vehicle at the driving limit
went to series production in 1995. In the last few
years, control systems for vehicle dynamics with additional actuators to control steering, drive torque distribution and wheel load distribution have entered the
market.
All of these systems acting on the force allocation
from the center of gravity (CG) to the four tire contact patches (TCP) and on the force transfer at the
TCPs. This strong interdependence between these
systems1 is the reason why independent operation
of more than one of them is only possible with
a loss of potential to prevent critical interferences.
In [2] (cf. also [3], [4], [5], [6] and [7]) a general approach was introduced to investigate the ref-

erence behavior (best possible allocation and transfer
of forces acting on the vehicle) for any configuration
of actuators controlling vehicle dynamics including all

T
steering angles  = 1 2 3 4 , brake/drive

T
torques M = M1 M2 M3 M4 , wheel loads

T
Fz = Fz1 Fz2 Fz3 Fz4 and even camber angles

T
 = 1 2 3 4 . The comparison of the reference operation of different configurations may support decisions in the future development of vehicle dynamics. The investigation of the reference behavior
also supports controller development and the dynamic
specification of the actuators, or makes it possible to
investigate the potential loss if the applied actuators
have less dynamics compared to the ideal required dynamics. The reconfigurable behavior of the general
approach allows further investigation of the impact of
actuator failures on vehicle dynamics for reliability investigations.
CG
v

&



3
Fz3
4

M3

3
3

2
1

Figure 1: Planar vehicle model with influencing variables and vehicle motion y

Because the approach presented in [2] is based on
model inversion of a plane vehicle model with the

T
plane motion y =   v described by the yaw
1 cf. [1] for an overview and a detailed classification of systems rate , the body slip angle  and the velocity v (cf.
for vehicle motion control.
Figure 1), a verified multi-body model is needed as veThe Modelica Association

167

Modelica 2006, September 4th-5th,2006

C. Knobel, G. Janin, A. Woodruff

the interdependence between the longitudinal and lateral tire forces is considered where the peak parameter D(Fz , ), the shape parameter C, the stiffness parameter B(Fz , ) and the curvature parameter E(Fz , )
are different for (1), (2) and for longitudinal and lateral directions, respectively. For the identification of
these parameters, an error minimization is used to fit
the model result to the test rig results of the tire used
(cf. Figure 2 and Figure 3). Because braking (negative
longitudinal tire forces) is more important for vehicle
dynamics control than accelerating (positive longitudinal tire forces), different weighting factors are used
to get a better correlation of the negative longitudinal
tire forces.
8000
6000
4000
2000
Fx [N]

hicle model to ensure that the control approach works
also with all effects neglected during the controller
design. Using the verified Modelica/Dymola Multibody vehicle model presented in this paper as a vehicle model for the control approach allows investigation
and comparison of all possible configurations of available actuators quickly and easily.
The possibility to model multi-body suspension assemblies, controllers, hydraulic and mechatronic actuators in one and the same environment was the reason to choose Dymola as the modeling and simulation
tool. Development and verification of the model was
done bottom-up. Multi-body front and rear suspension, tires, steering system, power train and the body
were modeled and then verified separately with test
rig results as shown in Section 2. Creating the multibody vehicle model by connecting those subsystems
together is presented in Section 3 as well as the verification process of the full vehicle through objective test
maneuvers with a series car equipped with additional
measurement technology. Finally, an application example is presented in Section 4.

0
Tire Test Rig
Model Simulation

2000

2 Development and Verification of
Subsystems

4000
6000
8000
30

20

10

0

10

20

30

Using the Multi-Body Library [8] and the Vehicle Dy [%]
namics Library [9], tire, suspension, body and environment for the multi-body model were constructed. Figure 2: Longitudinal force Fx over longitudinal slip
Simple models for the steering and the power train  for different wheel loads Fz
system are developed only for the verification of the
multi-body vehicle model with a conventional series
production vehicle.
7000

Tire

Fz = 6340N  = 9

6000

Pacejkas Magic Formula [10] is used to model the
plane transfer behavior of the tire, which calculates
first the pure forces
0
Fxoi
= D sin (C arctan (B  E(B  arctan B)))
0
Fyoi
= D sin (C arctan (B  E(B  arctan B)))
(1)
0

5000
Fy [N]

2.1

Fz = 4565N  = 9

4000
3000

Fz = 6340N  = 1

2000
1000

Fz = 4896N  = 1

i  {1 . . . 4} designated with to indicate the represen0
8000 7000 6000 5000 4000 3000 2000 1000
0
tation with the wheel coordinate system out of the inFx [N]
puts longitudinal slip , tire side slip angle , wheel
load Fz and camber angle . Secondly,
Figure 3: Lateral force Fy over longitudinal force Fx
(longitudinal slip  sweeps at different tire side slip an0
Fxi0 = Fxoi
cos (C arctan (B  E(B  arctan B)))
gles  and wheel loads Fz ) known as a Krempel Graph
0
Fyi0 = Fyoi
cos (C arctan (B  E(B  arctan B)))
(2)
The Modelica Association

168

Modelica 2006, September 4th-5th,2006

Development and Verification of a Series Car Modelica/Dymola Multi-body Model to Investigate Vehicle Dynamics
Systems

2.2

Suspension

The kinematics of the suspension models are verified
using a vertical travel sweep test rig which needs to be
For the front and rear suspension, ADAMS models modeled in Modelica/Dymola as well. Camber and toe
could be used as source to model the McPherson changes are plotted to verify the kinematic behavior of
front suspension (cf. Figure 4) and the semi-trailing the suspension models with the source model and the
real suspension of the used series vehicle (cf. Figure
6).
Strut
(damper)

Spring

100

Upright

80
ARB link

Suspension Travel (mm)

60

Rear Link

Steering Link
ARB

Front Link

Z

40
20
0
-20
-40
Dymola Model
Source Model
Test Rig Left
Test Rig Right

-60
-80

X

-100
-5

Y

-4

-3

-30

-20

-2

-1
 ()

0

1

2

3

-5

-4

-3

-2

-1
 ()

0

1

2

3

100

Suspension Travel (mm)

80

Figure 4: McPherson front suspension design
arm rear suspension design (cf. Figure 5) in Modelica/Dymola.

60
40
20
0
-20
-40
-60
-80

-100
-40

Spring
Damper
Trailing Arm

Upper Link

ARB link

Lower Link
Z

Y

Figure 5: Semi-trailing arm rear suspension design
The default models for those suspension designs in the
Vehicle Dynamics Library [9] could not be used without customizing and modifying the design, the joint
location and the kinematic relationships to match the
behavior of the source models in ADAMS.
The McPherson front suspension used independent
lower rods instead of the conventional control arm in
[9]. The rear suspension used a trailing arm design
with two guiding links, and the body spring and antiroll subsystems were attached to the upper guiding link
(cf. [11]). Non-linear bump stops were added on the
dampers tube of the front and rear suspension.
The hard points for all joint locations of the model
need to be adjusted to agree with the ADAMS source
model.
The Modelica Association

10

20

30 -40

-30

-20

-10
0
t (min)

10

20

30

Figure 6: Kinematic analysis: camber in degrees and
toe in angular minutes for front (left) and rear suspension (right)

ARB

X

-10
0
t (min)

Simulation of the rigid suspension model (without any
bushings) was impossible and caused singularity errors. After the implementation of bushings, simulation of the multi-body front and rear suspensions was
possible. However, a pure investigation of the rigid
kinematics was only possible using very stiff bushings, which is the reason for the differences between
the source model and the Modelica/Dymola model in
Figure 6.
The kinematics of the real suspension could only be
verified with bushings, which is again the main reason
for the differences between the model results and the
real test rig results shown in Figure 6.

2.3

Further Subsystems of the Vehicle

After modeling the tires and suspensions, adding body,
power train and steering system models, as well as the
vehicles environment, is necessary to the complete
multi-body vehicle model.
The vehicles body is considered to be rigid and its
mass is distributed as follows: one summarized sprung

169

Modelica 2006, September 4th-5th,2006

C. Knobel, G. Janin, A. Woodruff

sw []

d/dt [/s]

mass, including the driver, one passenger and fuel is
in the body whereas the unsprung mass of the wheels
including brake caliper and rotor and their links is distributed to the four wheels. The vehicles inertias at
the CG are identified on a pendulum test rig.
The complexity and accuracy of the power train
and steering models are rather low because they are
only used to get reasonable connections between the
drivers inputs and the brake/drive torques M and the
wheel steer angles . The former uses a speed con- Figure 7: Chassis representation of the multi-body vetroller and a differential gear to distribute the torques hicle model
to the four wheels similar to the series production vehicle. The latter consists a rack-and-pinion steering system including a rotational spring in the steering shaft.
180
30
The study of a full-vehicle model requires the model160
25
ing of its environment. The equations of motion can
140
20
only be solved by having a complete description of
120
15
physical system. Therefore, the interaction between
100
10
the vehicle and the world must be taken into account.
80
It consists the interactions between vehicle and driver,
5
60
Model Simulation
Test Maneuver
vehicle and air, and tire and road. The road is modeled
40
0
0
1
2
3
4
5
6
7
8
9
0
1
2
3
4
5
6
7
8
9
a [m/s ]
a [m/s ]
by a flat surface with with a road friction coefficient
3
0
. The aerodynamic drag force Fxaero =  12 Acx v2 ap2
1
plied at the center of gravity simplifies the interaction
1
between air and vehicle. These environments are from
2
the Vehicle Dynamics Library [9]. Only driver models
0
3
need to be built up to be able to simulate the objective
1
test maneuvers for the verification in Section 3.
4
2
The active control actuators are modeled by ideal rev3
5
0
1
2
3
4
5
6
7
8
9
0
1
2
3
4
5
6
7
8
9
olute joints inserted at the rigid connection between
a [m/s ]
a [m/s ]
the suspension and wheel subsystems. This meant the
wheels could be manipulated directly and without al- Figure 8: Steady state cornering, r=40m, dry road =1
tering the suspension geometry. Passive systems are
represented by constant values as inputs for the ideal
actuators.
are measured indirectly by suspension travel sensors
all four wheels, and all translational accelerations
3 Development and Verification of at
ax , ay , az as well as the rotational rates , ,  are meathe Multi-body Vehicle Model
sured by a sensor cluster located at the CG. The steering wheel angle sw and the steering wheel torque Msw
Connecting the subsystems from Section 2 creates the are measured using an instrumented steering wheel.
multi-body vehicle model.
Important steps are the definition, design and imple- The results of the verification without any fitting of
mentation of the model. A more important step is uncertain parameters like stiffness of the bushings, or
to check if the model matches real vehicle behav- friction coefficient  of the road are presented in Figure
ior. Therefore, the vehicle and the model behavior 8 and Figure 9.
are compared with objective test maneuvers such as
steady state cornering (steady state behavior), steering The main reason for the higher yaw rate generated by
steps (dynamic behavior in the time domain) and sine- the model in both maneuvers is the uncertain road fricsweeps (dynamic behavior in the frequency domain). tion coefficient . The higher roll in both maneuvers
Body side slip angle  and velocity v are measured is caused by different stiffnesses of the body springs
using an optical Correvit sensor, roll  and pitch  used in the model and the real vehicle.
2

2

y

 []

 []

y

2

y

The Modelica Association

170

2

y

Modelica 2006, September 4th-5th,2006

Development and Verification of a Series Car Modelica/Dymola Multi-body Model to Investigate Vehicle Dynamics
Systems
18

40

16

35

14

30

12

25

10

sw []

d/dt [/s]

45

20
15

y xb xg
Msw
sw

8

HMIcontroller

Static Inversion
y

y
yd

Controller

ud

Force
Allocation

6

y
Fz

4

10

2

5
Model Simulation
Test Maneuver

0
5

Dynamic Inversion

0

0.5

1

1.5

2 2.5
t [s]

3

3.5

4

0
2

4.5

0.5

0

0.5

1

1.5

2 2.5
t [s]

3

3.5

4

4.5

Figure 10: Control loop with the multi-body vehicle
model

0.5
0

 []

 []

with the optimization objective

0.5

0

1

min max i

1.5
0.5

2
2.5

1

0

0.5

1

1.5

2 2.5
t [s]

3

3.5

4

4.5

3

0

0.5

1

1.5

2 2.5
t [s]

3

3.5

4

4.5

Figure 9: Step steer, v=70 km/h, dry road =1

4 Application of the Model
Exchanging the conventional steering and power train
system of the verified vehicle model and using the
ideal actuators as described in 2.3 leads to a generic
configuration for vehicle dynamics control. All steering angles , drive/brake torques M , wheel loads Fz
and camber angles  (cf. Figure 1) could be used passively or actively controlled by the general allocation
approach presented in [2]. A non-linear online optimization calculates the arbitrary parameters for the
under determined inverses of the over-actuated2 plane
motion vehicle model (cf. 1). The number of the arbitrary parameters depends on the available actuators for
the influencing variables. These arbitrary parameters
are always used by the non-linear online optimization
to minimize the maximum adhesion potential utilization

2 
2
Fyi
Fxi
2
i =
+
(3)
Fxi max
Fyi max
(0  i  1) of the four tires i  {1 . . . 4} is approximated by an elliptic relation. The forces Fxi max and
Fyi max depend on the wheel load Fzi and the camber angles i . The control commands out of these optimization are used as inputs for the multi-body vehicle (cf.
Figure 10). Inputs for the optimization are the torque

T
and forces u = MzCG FxCG FyCG acting on the
center of gravity. The allocation of these forces to the
TCPs and the force transfer in the TCPs are optimized
2 cf.

[12] for definition and examples

The Modelica Association

(4)

This setup facilitates investigation into the reference
behavior (best possible allocation and transfer of
forces acting on the vehicle) of the vehicle dynamics
for every configuration of available actuators influencing vehicle dynamics for the verified multi-body vehicle model.
Changing the number of available actuation during a
driving maneuver allows investigation into the impact
of actuator failures on vehicle dynamics, which may
support reliability investigations of active vehicle dynamics systems.
Such an investigation is presented as an exemplary application of the presented multi-body vehicle model
(cf. Figure 11, Figure 12 and Figure 13). The front
right steering actuator of a vehicle (equipped with four
steering actuators, four drive torque actuators and four
actuators to control the wheel load distribution) fails.
The failure occurs after one second of driving an open
loop single lane change at a constant speed v=70 km/h
(cf. Figure 13). All actuators and actuator dynamics are limited for the optimization (4) to values of actual available actuators. The actuator fails in the worst
case situation at maximum steering angle of  = 1.8
degrees and is assumed to be self-locked after the failure occurred. To compensate this fixed steering error, the vehicle exhibits the same amount of body slip
angle as can be seen in Figure 13. Steering back to
straight driving again the failure wheel becomes the
outer wheel (with respect to the center of the corner)
with more wheel load. Therefore, the optimization reduces the wheel load at this wheel as much as possible. However, the steering angles and drive torques
at the other wheels are much higher compared to the
usual driving condition without failure (right side of
Figures 11, 12 and 13). The maneuver presented is
close to the physical driving limit since two tires have
already reached their maximum possible adhesion potential utilization (cf. Figure 12). The lateral acceler-

171

Modelica 2006, September 4th-5th,2006

C. Knobel, G. Janin, A. Woodruff

ation ay is reaching 4 m/s2 at the minimum and maximum of the yaw rate . This performance meets the
actual specification of flat run-flat tires.

1

 []

4

Wheel 1
Wheel 2
Wheel 3
Wheel 4

3
2

Wheel 1
Wheel 2
Wheel 3
Wheel 4

0.8
0.6
0.4
0.2
0

0

0

0.5

1

1
2

2.5

0

1

2

3

0

1

2

0.5

15

1

1.5
2
t [s]

2.5

3

3.5

 [deg]

d/dt [deg/s]

5
0

1

5

0

Failure
Usual

10
15

0

1

2

3

0

1

2

80

0

10

M [Nm]

3.5 0

3

500

500

3

Figure 12: Adhesion potential utilization of failure
(left) and usual vehicle (right)

3
4

1.5
2
t [s]

v [km/h]

 [deg]

1

0

1

t [s] 2

3

2

0

1

t [s] 2

3

50

0

1

t [s] 2

3

Figure 13: Plane vehicle motion of the vehicle with
steering actuator failure (-) and usual working vehicle
(:)

3

8000

Fz [N]

6000

4000

2000
0

1

t [s] 2

3

0

1

t [s] 2

3

Figure 11: Influencing variables of vehicle with steering actuator failure (left) and usual working vehicle
(right)

5 Conclusion and Outlook
The development and the verification of a multi-body
model of a series production vehicle is presented. This
vehicle model was used to investigate and compare
any possible configuration of actuators to control vehicle dynamics. In this context, Modelica/Dymola has
proven to be a practical environment for future development of vehicle models including mechatronic and
hydraulic actuators, multi-body suspensions and controllers. To develop, verify and use Modelica/Dymola
models in an efficient way, however, interfaces to
CAD systems to import CAD model data and interfaces to real time environments are desirable. Especially for this project, a library for non-linear optimization was missed, which was the reason why
The Modelica Association

this part of the presented control approach was realized in MATLAB/Simulink. The presented Modelica/Dymola multi-body model was implemented into
MATLAB/Simulink using the Simulink Interface of
Dymola.
The outlook of the presented project is to improve the
matching of the model by using an error minimization.
Parameters for the error minimization are probably the
uncertain stiffness of the bushings and the road friction
coefficient .
The presented example of steering actuator failure
could be improved by adding a strategy of actively
controlled camber (assuming the availability of such
a system) for steering actuator failures which counteracts the failure force generated by the tire side slip angle i of the failure wheel.

References

172

[1] J. Andreasson, C. Knobel, and T. Bunte. On
Road Vehicle Motion Control - striving towards
synergy. In Proc. of 8th International Symposium
on Advanced Vehicle Control AVEC, 2006.
[2] C. Knobel, A. Pruckner, and T. Bunte. Optimized Control Allocation - A General Approach
to Control and to Investigate the Motion of OverModelica 2006, September 4th-5th,2006

Development and Verification of a Series Car Modelica/Dymola Multi-body Model to Investigate Vehicle Dynamics
Systems

actuated Vehicles. Submitted paper for 4th IFAC
Symposium on Mechatronic Systems, 09 2006.
[3] Y. Hattori, K. Koibuchi, and T. Yokoyama. Force
and Moment Control with Nonlinear Optimum
Distribution for Vehicle Dynamics. In Proc. of
6th International Symposium on Advanced Vehicle Control AVEC, 2002.
[4] E. Ono, Y. Hattori, Y. Muragishi, and
K. Koibuchi.
Vehicle Dynamics Control
Based on Tire Grip Margin. In Proc. of 7th
International Symposium on Advanced Vehicle
Control AVEC, 2004.
[5] R. Orend. Steuerung der Fahrzeugbewegung mit
minimaler Kraftschlussausnutzung an allen vier
Radern. In Proc. of Steuerung und Regelung von
Fahrzeugen und Motoren - Autoreg. VDI, 2004.
[6] J. Andreasson and T. Bunte. Global Chassis Control Based on Inverse Vehicle Dynamics Models. Presented at XIX IAVSD World Congress,
10 2005.
[7] T. Bunte and J. Andreasson. Integrierte Fahrwerkregelung mit minimierter Kraftschlussausnutzung auf der Basis dynamischer Inversion. In
Proc. of Steuerung und Regelung von Fahrzeugen und Motoren - Autoreg, Wiesloch, 2006.
[8] M. Otter, H. Elmqvist, and S. E. Mattsson. The
New Modelica MultiBody Library. In Proc. of
the 3. International Modelica Conference, pages
311330, 2003.
[9] J. Andreasson. Vehicle dynamics library. In
Proc. of the 3rd International Modelica Conference. Modelica Association, 2003.
[10] H. B. Pacejka. Tyre and Vehicle Dynamics.
Butterworth-Heinemann, Oxford, 2002.
[11] A. Woodruff.
Camber Prevention Methods
using a Modelica/Dymola Multi-body Vehicle
Model. Masters thesis, Mechanical and Materials Engineering Department, Queens University,
Kingston, ON, Canada, 2006.
[12] M. Valasek. Design and Control of UnderActuated and Over-Actuated Mechanical Systems - Challenges of Mechanics and Mechatronics. Vehicle System Dynamics, 40:3750, 2003.

The Modelica Association

173

Modelica 2006, September 4th-5th,2006

C. Knobel, G. Janin, A. Woodruff

The Modelica Association

174

Modelica 2006, September 4th-5th,2006

Session 2c

Session 2c
Language, Tools and Algorithms 2

The Modelica Association

175

Modelica 2006, September 4th  5th

Session 2c

The Modelica Association

176

Modelica 2006, September 4th  5th

Modeling and Simulation of Differential Equations in Scicos

Modeling and simulation of differential equations in Scicos
Masoud Najafi Ramine Nikoukhah
INRIA-Rocquencourt, Domaine de Voluceau,
78153, Le Chesnay Cedex France

Abstract
Block diagram method is an old approach for the modeling and simulation of differential equations. Modeling and simulation of some kind of differential equations such as differential-algebraic equations (DAE) is
cumbersome, difficult, or even impossible with this
approach. Scicos which is a modeling and simulation software based on Block diagram approach has recently been developed to simulate Modelica programs.
In this paper, it will be explained the way different
classes of DAE can easily be specified in Modelica and
simulated in Scicos.
Keywords: hybrid differential equations; numerical
solver; simulation; Modelica; Scicos

1

ferential Equations (ODE) or Differential Algebraic
Equation (DAE) and applies an ODE or a DAE solver
in order to perform a simulation. A block diagram system representation can only be used to model ODEs
and a special class of DAEs, while the solvers used in
Scicos support a larger class of DAEs [9]. In this paper
we will explain the way Scicos environment has been
developed to write and simulate a large class of differential equations, called hybrid differential equations.
To get an idea what a Scicos model looks like, a model
of a simple control system implemented in Scicos has
been shown in Figure 1. In Figure 1 the Clock block

Introduction

Num(s)

Den(s)

sinusoid
generator

Num(s)

Den(s)

Reference

Controller

Plant

Scilab1

is a free, and open-source software for scientific calculation. Scicos2 is a toolbox of Scilab
and provides an environment for modeling and simulation of dynamical systems [6, 4]. For many applications, the Scilab/Scicos environment provides an
open-source alternative to Matlab/Simulink and MatrixX [14, 15]. Scicos includes a graphical editor for
constructing models by interconnecting blocks, representing predefined or user defined functions, a compiler, a simulator, and code generation facilities. A
Scicos block diagram is composed of blocks and connection links. A block corresponds to an operation and
by interconnecting blocks through links, we can construct a model, or an algorithm.
The Scicos blocks represent elementary systems that
can be used as model building blocks. They can have
several inputs and outputs, continuous-time states,
discrete-time states, zero-crossing functions, etc. Scicos allows customization with regard to incorporating
user C, Fortran, or Scilab codes. Scicos translates the
block diagram model into a system of Ordinary Dif-

3
Feedback

Figure 1: A Scicos model of a control system
generates a periodic activation signal (event) that activates the Scope block. At event times the scope reads
its input signal and displays them.

2 Mathematical Background
A differential equation expressed either by an Ordinary Differential Equations (ODE), i.e.,
x

where x denotes the derivative of x, the state variables,
with respect to the time variable t, and u is the input
vector variable, or by Differential Algebraic Equations
(DAE) [2, 3, 5], i.e.,

1 www.scilab.org
2 www.scicos.org

The Modelica Association



f x u t 

177



x
0



f  x  y u  t 
g x  y u  t 

(1)

Modelica 2006, September 4th  5th

M. Najafi, R. Nikoukhah

where (1-a) is the differential part and (1-b) is the algebraic part of the DAE. The equation set (1) is a semiexplicit DAE, where the differential and the algebraic
parts are decomposed. If we cast (1) in the form of
0



F z  z  t  z 

x
y

(2)

DASKR and L SODAR require that the system be sufficiently smooth over an integration period. This means
that simulator must make sure to stop and reinitialize
the solver at each potential point of non-smoothness
(discontinuity, discontinuity in the derivative, etc.) of
the ODE/DAE. These ODE/DAEs require some additional solver features, such as event detection or root
finding.
Event detection: The ability to detect the time when a
discontinuity occurs, or more precisely, the time when
a function crosses some given value (by default considered zero) is of capital importance in simulation of
DAEs. For this purpose, the discontinuity function is
given to the solver as a zero-crossing function. When
a zero-crossing occurs, the solver stops the integration
and returns the exact crossing time to the main program. So, it is important to halt the solver and restart at
the discontinuity point. The numerical solver can also
provide the direction in which a function has crossed
the zero.

This system is called a fully implicit DAE. Note that if
F
is non-singular, then it is possible to formally solve
z
z as a function of z in order to obtain an ODE. However, if it is singular, this is no longer possible and the
solution z has to satisfy certain algebraic constraints.
DAEs are characterized by their index. The index of
a DAE , e.g.,(2), is the smallest number of differentiation of (2) to obtain an ODE by algebraic manipulations [7]. In general, the higher the index, the greater
the numerical difficulty one encounters, when trying
to integrate the DAE numerically. In a semi-explicit
index-1 DAE (1), variables whose derivatives appear
in DAE are called differential variables and the other
ones are called algebraic, i.e., x in (1-a) is differential 2.2
and y in (1-b) is algebraic [16, 17].

2.1

Numerical solvers of Scicos

In order to integrate differential equations or simulate any model, Scicos uses two numerical solvers;
Lsodar [8, 16] and DASKR [16, 2]. Lsodar is an
ODE solver which is used when the Scicos diagram
represents an ODE. If a diagram represents a DAE,
DASKR is used. DASKR is a variable step, variable
order index-1 DAE solver. The solver properties discussed here are those of DASKR and L SODAR; however these properties are common to most modern
solvers. The most important of these properties will
be explained in the following subsections [11].
Consistent initial condition: Most of the problems in
using standard solvers are common to both ODE and
DAE solvers. However, there is an additional difficulty
with the DAE case: the problem of re-initialization and
finding consistent initial conditions. Simulation of an
ODE can be started from any initial state, but simulation of a DAE should be started from a consistent initial state. This is an additional difficulty in simulation
of DAEs.
Continuity criteria for numerical solver: DASKR
and L SODAR use a variable order variable step-size
BDF (backward differentiation formula) method to integrate. The BDF methods normally need continuity
in variables and their derivatives [1]. Consequently,
The Modelica Association

Discontinuity handling in the simulator
of Scicos

DAEs may have discontinuities or may be variable
structure or may change at certain points in time. Such
types of DAEs are called hybrid DAEs. A hybrid DAE
is a way of describing non-smooth multi-model systems in terms of a finite number of smooth systems.
The idea is to divide the state space of the system into
different regions. It is assumed that the system is described in terms of a single smooth DAE within each
region. A simple example of a multi-model DAE is:
	






g x  0 




f1  x  x  u  t 
f2 x  x  u  t 

0
0

(3)

where  the
DAE has two models: the first one is on

when g x  0  and the second is when the condition
is not true. This switching may cause a discontinuity in
the signals, so they cannot be integrated by the numerical solvers. In order to cope with this problem, the discontinuity should be detected and the solver be reinitialized after the discontinuity point. To detect and localize the discontinuity time, solvers use zero-crossing
functions that cross zero over the discontinuity point.
For example, for (3), we use g x  as the zero-crossing
function [11].
For localizing the discontinuity point, the simulator associates Mode variables with each zero-crossing functions in Scicos. Mode variables are used to assign
and fix an ODE/DAE in every time interval between

178

Modelica 2006, September 4th  5th

Modeling and Simulation of Differential Equations in Scicos

each two discontinuities. In general, when the numerical solver is called, the system of equation should
not be changed. During integration, the zero-crossing
functions that indicate the conditions for the model
change are examined by the solver. In case of any
zero-crossing, the Mode variables should be updated
to feed another ODE/DAE to the solver. It should be
note that Mode variables are defined in the Scicos simulator and is transparent to the user. In Scicos, a Mode
variable is assigned systematically to each discontinuity point, characterized by an If-then-Else block.
Scicos considers the system (3) in the following form:


0
$

%
$
%



f1  x  x  u  t 
f2 x  x  u  t 
















Block diagram consists of blocks that are connected by
arrows and each block is a transducer that transforms
the incoming signals to one or more output signals.
A block can represent simple arithmetic operations or
functions without memory, but also operations whose
results are dependent on previous inputs to the block,
i.e., with memory. Several software tools such as Scicos, Simulink, SystemBuild, etc. use block diagram
method to model and simulate dynamical systems. As
an example the diagram in Figure 2 displays the graphical representation of equation (5).

 !
 #"

22

x1
x2

3
22
224


 )

 +"

g x '& 0 (%
 

%
g x '* 0 (

122






-,

0 5 04x1 . 104 x2 x3
0 5 04x1 , 104 x2 x3 , 3 6 107 x22

1 . sin 0 5 1t  , x2 , x1  0 5 5 
7% x3 -, 10x1 
10x1 5
8 x3

(5)

By default, for any discontinuity in the model,
a Mode is used.
But it should be noted that
any If-then-Else, not resulting in a discontinuity, can be used without Mode. If the resulting if-then-else expression is smooth, the modeler has the possibility to give this extra information
to the simulator in order to avoid these unnecessary
solver reinitialization. That is why there is a parameter in If-then-Else blocks that lets the user define whether the block is used with or without zerocrossing. The Mode variables should not be used in
some cases. For example, when a function is not deFigure 2: Block diagram implementation of DAE (5)
fined everywhere and might be called near the limit of
in Scicos
validity. In DAE (4),
x -,  xy , x . y
, 1 .0/ x
y
, 1. / , x









x& 0
x* 0

(4) 3.1

Shortcomings in the block diagram approach

It is often possible to model differential equations via
block diagram approach, but in fact it is not an easy
and efficient way. There are several shortcomings. In a
block diagram model a small change in the differential
equations follows with another study to rearrange the
entire structure of the block diagram which may have
little similarity to the previous version. Furthermore,
most of the general-purpose simulation softwares on
the market such as ACSL, Simulink and SystemBuild
3 Implementing differential equa- that use block diagram approach assume that a system
tions with block diagram approach can be decomposed into block diagram structures with
causal interactions. This means that the models should
Block diagram implementation is an old method to be expressed as an interconnection
of models on semi

represent differential equations. In this method, explicit
form,
i.e.,
M
t
x
f
x
t
,

  where the matrix

through the use of multipliers, adders, integrators, M t  is singular [18]. Although theoretically any DAE
etc. a differential equations is constructed graphically. index-1, can be transformed into a semi-explicit DAE,

if the Mode variable is used the first model (i.e., / x)
is employed until the discontinuity point x 0 is detected. During the search process the solver uses / x
for x * 0 to localize the crossing point. This will
cause a failure in the integration, so the Mode variable
should not be used to permit the solver probe beyond
the discontinuity point.

The Modelica Association

179

Modelica 2006, September 4th  5th

M. Najafi, R. Nikoukhah

since such a transformation is done manually, it is time
consuming and sometimes it is practically impossible.
With these shortcomings, there is a rising need to have
an appropriate framework for DAE representation. A
convenient way is to work with the DAEs as the text.
The reader may think of simulation methods in which
DAEs are expressed in a textual environment, such as
writing computer programs and invoking the numerical solvers, or writing Scilab or Matlab script files.
But these methods are not efficient and do not provide
a proper framework to control and interact with the numerical solver. In fact, the numerical solver considers
the DAE as a black box and the internal discontinuities
remain hidden. For example, if a discontinuous DAE
is simulated directly by Dassl function in Scilab or
by ode15s function in Matlab, the simulation would
fail. As an example, when we tested DAE (5) with
Matlab, the simulation failed and the following error
message raised:
>> Warning: Failure at t=5.235698e+00.
Unable to meet integration tolerances
without reducing the step size
below the smallest value allowed
(1.860093e-14) at time t.

The problem lies in the solver control, i.e., a discontinuous DAE cannot be integrated by the numerical solver without discontinuity handling and a good
restart managements. Scicos has recently been developed to simulate non-casual models and the user
can write physical models symbolically with a new the
Modelica language [10].

4

Modelica.
3

3 www.Modelica.org

The Modelica Association

224

x x , xy
y  yx , 2y
x  0
1
y 0
2

(6)

This DAE consists of two differential variables, i.e., x
and y. They are continuous-time Real type variables
and their initial value at beginning (time=0) are 1 and
2, respectively. Here is the Modelica program:
class Oscillator "Oscillator model"
Real x(start =1), y(start=2);
equation
der(x) = x-x*y;
der(y) = x*y-2*y;
end Oscillator;

In the first part of the program, two variables and their
initial values are declared. The next part of the program contains the equations. In this section, there are
two equations for two unknowns, i.e., der(x) and
der(y) the time derivatives of x and y. In Modelica,
equations are composed of expressions both on the left
hand side and the right hand side. It is neither required
to write the equations in form of assignments, nor to
write the equations in a specified order. It is, however,
important to provide equal number of unknowns and
equations. For instance, here is the above program that
has been rewritten without changing the model mathematically:
class Oscillator2 "Oscillator model"
Real x(start =1), y(start=2), v;
equation
der(x)-x+v=0;
0=-der(y)-2*y+ v;
x*y=v;
end Oscillator2;

Modelica language

Modelica3 is a freely available, object oriented, general purpose language for modeling of physical systems, e.g., mechanical, electrical and control systems. The Modelica language allows a direct and
convenient specification of systems with continuoustime and discrete-time dynamics. Although Modelica is a rich language having the capacity to handle
continuous-time and discrete-time behaviors, in this
paper we will focus mainly on modeling hybrid differential equations. A Modelica program or model like
any other computer language is composed of a variable or component declaration section and an equation
section. Suppose that we want to model DAE (6) in

122

Note that in this program, v is an algebraic variable. In
Modelica the initial value of all variables can be specified. Theoretically specifying initial value of algebraic
states is not required. This, however, would help the
numerical solver to find the consistent initial condition
for highly nonlinear DAEs or in case where there are
several solutions it acts as a guess value to help the
solver to catch the desired solution [13].
In Modelica models that are in fact the mathematical equations, it is not possible to classify (at least apriori) the variables as inputs and outputs. This type of
models are called acausal models. That is in contrast
with causal models where there are explicit inputs and
outputs and the outputs are computed as function of inputs and other internal variables. To make an analogy

180

Modelica 2006, September 4th  5th

Modeling and Simulation of Differential Equations in Scicos

with computer programming languages, causal models
correspond to the use of assignment statements where
the right-hand sides of the equations are evaluated and
the result of the evaluation is assigned to the variables
on the left-hand side of the equations [10].
An acausal model cannot be simulated directly, it
should be transformed into a causal model. In general,
it is possible to convert an acausal model into a causal
model by rewriting the equations and finding the appropriate causality structure in equations. In Scicos
this is done by the Modelica compiler. The Modelica
compiler receives the Modelica program and extracts
the necessary information for the numerical simulation
and generates a usable C program for Scicos.

5

Hybrid DAE modeling in Modelica

In block diagram approach one cannot model fullyimplicit DAEs directly. In Modelica this constraint
does not exist and any DAE4 can be expressed without
making any effort to transform them into an explicit
form. A multi-model DAE or a DAE with discontinuity is defined with If-then-else constructs. Note
that an If should always be used with an else. As
an example, a Modelica Code for the DAE (5) follows:
class DAE2
Real x1(start=1.0), x2 (start=0.0), x3,xs;
equation
der(x1) = -0.04*x1 + 1e4*x2*x3;
der(x2) = 0.04*x1 - 1e4*x2*x3 - 3e7*x2*x2;
x3 = if (xs>0.5) then -10*x1 else 10*x1;
xs = 1 + sin(0.1*time)-x2-x1;
end DAE2;

By default, the Modelica compiler of Scicos associate
Mode variables with discontinuity points. When a discontinuity does not need any special treatments, the
compiler should be informed with noEvent() operator. For example, for DAE (4) we write
der(x)=-y*x-x+y;
y=if noEvent(x>=0) then -1+sqrt(x)
else -1+sqrt(-x);

In this case, the Modelica compiler does not consider
the condition as a zero-crossing functions and during
the simulation, the solver does not stop at x=0. For
(x>0), / x is evaluated and for (x<0), / , x is used.
In general, noEvent() performs two things: First,
it inhibits the solver to probe for solutions beyond
the limit of validity. Then, it prevents the solver
from halting the integration and doing an unnecessary
restart.
Modelica can also be used for mixed continuous-time
and discrete equations. For the discrete-time parts,
the synchronous data flow principle with the single
assignment rule is used. Discrete event and discretetime models are supported by when statements. The
equations in a when clause are conditionally activated at instants (called event) where the when condition becomes true. Here is an example to show the
way a discrete-time equation is written in Modelica.
The difference equation should be updated whenever x
crossed zero with a positive to negative direction, i.e.,


x -, 4x 
:; <
 z k . 1 


05 9 z k , 05 2

For this DAE, the Modelica compiler automatically we can write the following modelica program.
extracts (xs-0.5) as the discontinuity or zeroSine
crossing function and assigns a Mode variable during class
Real x(start=1), y(start=0);
the generation of the C program. If-then-else
discrete Real z(start=3), z1(start=-1);
constructs can also be used to define multi-model equation
der(x)=y;
DAEs. For example, for the following multi-model
der(y)=-4*x;
when (x<0) then
DAE









0
0

x & 0 9


x3 , xyx , x . y2 . 1
yx . yx , x

z=0.9*z-0.2;
end when;
end Sine;

The Modelica compiler deduces the direction of the
y , 2yx . y . x2 , 1 
zero-crossing form the condition (x<0). Because this
5x . 2 , 2yx . yx . sin t 
condition becomes true when the x becomes negative.
we can write this Modelica code:
So far, Scicos provides a minimum support for Modelica discrete models. That is because the discrete time
0=if (x>=0) then der(x)3-x*y*der(x)-x+y*y+1
else der(y)-2*y*der(x)+y+x*x-1;
models can be modeled in the Scicos environment. It
is
however envisaged to improve Modelica compiler
0=if (x>=0) then der(y)*der(x)+y*x-x
else der(x)*5+2-2*y*x+der(y)*x+sin(time);
of Scicos to support Modelica discrete models.
4 In the current version of the Modelica compiler of Scicos only In when clauses, continuous-time variable can also
index-1 DAEs are accepted
be initialized. A special operator reinit(state,


The Modelica Association

0
0

181

Modelica 2006, September 4th  5th

M. Najafi, R. Nikoukhah
NewValue) can be used to assign new values to the

continuous states of a model at an event time. reinit
can only be employed in the body of a when-clause.
As an example, consider the bouncing ball system.
Whenever the ball hits ground, i.e., its height becomes negative, the velocity changes sign and dampens down. Here is a Modelica code for this hybrid
system.
class Bounce
Real y(start=10), v(start=0);
equation
der(y) = v;
der(v) = -9.8;
when y < 0 then
reinit(v, -0.9*v);
end when;
end Bounce;

2
~
Source

R=0.2

L=0.0001
+

C= 0.1

Ammeter
A

Voltmeter
V
MScope

Figure 3: A Modelica block for Oscillator3.mo

simplifies the equations and eliminates the unnecessary variables if possible. In the final stage a C program that has the input/output behavior of the Modelica program is generated [13]. Most of the time, the
simplification and elimination of variables reduces the
6 Simulation of Modelica programs size of DAE that consequently reduces the integration
time. In addition, a semi-explicit DAE form may be
Modelica is a language that provides an environ- obtained that simplifies the numerical integration [12].
ment to express the differential and algebraic equa- In order to demonstrate the simulation of a complete
tions. Note however that the main goal is simulat- example, consider this Modelica program
ing the models. In order to simulate Modelica modclass Oscillator3 "Oscillator model"
els, they should be transformed into a causal proReal x(start =1), y(start=2), u;
gram. For that, the Modelica models should be comequation
piled. There are several Modelica compilers such as
der(x) = x-x*y;
Dymola5 and Open-Modelica6 . Scicos has its own
der(y) = x*y-u*y;
Modelica compiler called Modelicac (acronym of
end Oscillator3;
Modelica compiler) for a subset of the Modelica language. Modelicac is an external tool, i.e., it is inde- where u is unknown and is defined by user or anpendent of Scilab. By default, Modelicac comes with other block. To simulate Oscillator3, we use a
a module that generates a C code for Scicos blocks. Modelica block (see Fig. 4) . In the dialog box of
However, since Modelicac is free and open source, it the block (see Fig. 5) an input variable u and two outis possible to develop code generators for other targets put variables x,y are defined. After clicking on OK,
another window lets the user write the program (see
as well.
A Modelica program is associated with a Scicos block. Figure 6).
A Scicos block whose behavior is written in Modelica is called an implicit block [10]. With the associated implicit block the input/output variables of the
Modelica program can be defined or visualized. This
block may be connected to other blocks to build a bigger model, see for example Figure 3 in which a simple electrical circuit has been built with implicit blocks
Modelica
MScope
and some output variables are visualized with ordinary
Block
or explicit blocks..
The Modelica compiler uses the input and output variables to establish a causality between the variables in
Figure 4: A Modelica block for Oscillator3.mo
the Modelica program. In the next stage, the compiler
5 www.dymola.com

6 www.modelica.org

The Modelica Association

When the program is compiled, a C program is generated. Here is a fragment of the generated code.
182

Modelica 2006, September 4th  5th

Modeling and Simulation of Differential Equations in Scicos

Figure 5: Defining the Modelica program input/output
variables

3.0
2.7
2.4
2.1
1.8
1.5
1.2
0.9
0.6
0.3 +
0.0
0

4

8

12

16

20

24

28

32

36

40

5.0
4.2
3.4
2.6
1.8
1.0
0.2
0.6
1.4
2.2 +
3.0
0

4

8

12

16

20

24

28

32

36

40

4.0
3.6
3.2
2.8
2.4
2.0
1.6
1.2
0.8
0.4 +
0.0
0

4

8

12

16

20

24

28

32

36

40

Figure 7: Simulation results for the Scicos diagram in
Figure 4

Modelica
Block

MScope

Figure 8: A Modelica block for the DAE (5)
Figure 6: Modelica program in a Modelica block
modeling DAEs, i.e., using the Modelica language. In
this paper, with some examples we explained the way
hybrid DAEs are simulated in Scicos. The Modelica
language and its use in Scicos in modeling and simulation of hybrid DAEs were explained. In the last part
of the paper, a simple Scicos block is introduced to
write and simulate Modelica programs in Scicos.

if (flag == 0) { // generated DAE code
res[0] = xd[0]+x[0]*x[1]-x[0];
res[1] = u[0]*x[1]+xd[1]-x[0]*x[1];
}else if (flag == 1) { //output update
y[0][0] = x[0];
y[1][0] = x[1];
}else if (flag == 4) {// initial values
x[0] = 1.0;
x[1] = 2.0;
}

The simulation result is given in Figure 7.
As another example, consider the DAE (5) whose
block diagram implementation is depicted in Figure 2.
In this case, the Modelica block has only three outputs, see Figure 8-10. The simulation result is given in
Figure 11.

7

References

Conclusion

Modeling and simulation of DAEs via block diagram
approach has several shortcomings. Scicos which is a
simulation software based on block approach has recently been developed to provide another approach for
The Modelica Association

183

[1] B RENAN , K. E., C AMPBELL , S. L., AND P ETZOLD , L. R.
Numerical solution of initialvalue problems in differential-algebraic equations. SIAM pubs., Philadelphia (1996).
[2] B ROWN , P. N., H INDMARSH , A. C., AND P ETZOLD , L. R. Consistent initial condition calculation for differential-algebraic systems. SIAM
Journal on Scientific Computing 19, 5 (1998),
14951512.
[3] C AMPBELL , S. L. Numerical methods for unstructured higher index daes. Annals of NumeriModelica 2006, September 4th  5th

M. Najafi, R. Nikoukhah

Figure 9: Defining the Modelica program input/output
variables

1.30
1.16
1.02
0.88
0.74
0.60
0.46
0.32
0.18
0.04 +
0.10
5.00

5.05

5.10

5.15

5.20

5.25

5.30

5.35

5.40

5.45

5.50

5.0e03
4.4e03
3.8e03
3.2e03
2.6e03
2.0e03
1.4e03
8.0e04
2.0e04
4.0e04 +
1.0e03
5.00

5.05

5.10

5.15

5.20

5.25

5.30

5.35

5.40

5.45

5.50

12.0
9.6
7.2
4.8
2.4
0.0
2.4
4.8
7.2
9.6 +
12.0
5.00

5.05

5.10

5.15

5.20

5.25

5.30

5.35

5.40

5.45

5.50

Figure 11: Simulation result for the diagram in Figure 4
solvers. ACM-Signum Newsletter 15 (1980), 10
11.
[9] NAJAFI , M., A ZIL , A., AND N IKOUKHAH , R.
Implementation of continuous-time dynamics in
scicos. 15th ESS Conference, Delft, the Netherlands (October 2003).
Figure 10: Modelica program in a Modelica block
cal Mathematics 1 (1994), 265278.

[10] NAJAFI , M., A ZIL , A., AND N IKOUKHAH ,
R. Extending scicos from system to component
level simulation. ESMC2004 international conference, Paris, France (October 2004).

[4] C AMPBELL , S. L., C HANCELIER , J.-P., AND [11] NAJAFI , M., AND N IKOUKHAH , R. The use of
the numerical integrator in scicos, a user friendly
N IKOUKHAH , R. Modeling and simulation
graphical based simulation software. European
Scilab/Scicos, 1st ed. Springer Verlag, 2005.
Journal of Automation (JESA) Special issue on
modeling, formalism, methods and simulation
[5] C AMPBELL , S. L., M OORE , E., NAKASHIGE ,
tools (2006), 95111.
R., Z HONG , Y., AND Z OCHLING , R. Constraint
preserving integrators for unstructured higher index daes. Zeitschrift fuer Angewandte Mathe- [12] NAJAFI , M., N IKOUKHAH , R., AND C AMP BELL , S. L. The role of model formulation in
matik und Mechanik (ZAMM) 76 (1996), 8386.
dae integration: Experience gained in developing
[6] C HANCELIER , J. P., D ELEBECQUE , F.,
scicos. 17th IMACS World Congress MathematG OMEZ , C., G OURSAT, M., N IKOUKHAH ,
ics and Computers in Simulation, Paris, France
R., AND S TEER , S. An introduction to Scilab,
(July 2005).
1st ed. Springer Verlag, Le Chesnay, France,
[13] NAJAFI , M., N IKOUKHAH , R., S TEER , S., AND
2002.
F URIC , S. New features and new challenges in
[7] G EAR , C. W. Differential-algebraic equation inmodeling and simulation in scicos. IEEE conference on control application, Toronto, Canada
dex transformations. SIAM. J. Sci. Stat. Comp. 9
(2005).
(1988), 3947.
[8] H INDMARSH , A. C. Lsode and lsodi, two [14] N IKOUKHAH , R., AND S TEER , S. Hybrid sysnew initial value ordinary differential equation
tems: modeling and simulation. In COSY: MathThe Modelica Association

184

Modelica 2006, September 4th  5th

Modeling and Simulation of Differential Equations in Scicos

ematical Modelling of Complex System, Lund,
Sweden (September 1996).
[15] N IKOUKHAH , R., AND S TEER , S. Scicos: A dynamic system builder and simulator, users guide
- version 1.0. Tech. Rep. RT-0207, INRIA Technical Report, Le Chesnay, France, June 1997.
[16] P ETZOLD , L. R. Automatic selection of methods for solving stiff and nonstiff systems of ordinary differential equations. SIAM J. Sci. Stat.
Comput 4 (1983).
[17] P ETZOLD , L. R. Order results for implicit
runge-kutta method applied to differential algebraic systems. SIAM. J. Numer. Anal. 23 (1986),
837852.
[18] S HAMPINE , L., R EICHELT, M. W., AND
K IERZENKA , J. A. Solving index-1 DAEs in
MATLAB and Simulink. j-SIAM-REVIEW 41, 3
(1999), 538552.

The Modelica Association

185

Modelica 2006, September 4th  5th

M. Najafi, R. Nikoukhah

The Modelica Association

186

Modelica 2006, September 4th  5th

How to Dissolve Complex Dynamic Systems for Wanted Unknowns with Dymola / Modelica

How to dissolve complex dynamic systems for wanted unknowns with
Dymola / Modelica
Jochen Khler
ZF Friedrichshafen AG
Graf-von-Soden-Platz 1, D-88046 Friedrichshafen, Germany

EM2

EM1

Gear_EM2=i_EM2

Flange_...

ratio=-i_0

187

Flange_in

-1

The Modelica Association

bus

Planetary

One main issue in control theory is to drive a system
in an optimal way. One task is to find an optimal
trajectory to get to a final desired state that is known.
If this final state is not known or if there is no final
another way is to optimize just the present working
point of the system. These optimal working points
for different working conditions can be found by an
optimization process. To be able to optimize it you
have to describe the model mathematically. In principle, Modelica is a very good language to describe
complex systems in a mathematical form and Dymola is a good and easy to use solver for it. With
Modelica you can build up models very quickly and
its easy to modify these models.
But the normal way to use Modelica is to build models of complex systems to simulate them in time.
This does not help here, because we need to dissolve
such systems at one point in time for wanted unknowns under the assumption that certain values are
known. In this case, it is no simulation issue any-

The prior task of a hybrid driveline is to save fuel
and minimize emissions. Furthermore there are many
other conditions that have to be taken into account

w

Introduction

Optimizing the work point of a hybrid driveline

w InSens1

1

2

w

For developing optimized hybrid driveline strategies
a way was found to make complex models of these
systems available in an optimization process. The
challenge here is to make models built up with Modelica available for an optimization process in other
tools like Matlab. The simulation feature of Dymola
does not help here because the optimization is done
in one point in time.
After describing the optimization problem for these
drivelines the special way of implementing it in
Modelica is emphasized.
When the model is built it had to be exported into
Matlab as a MEX-funtion to make it available for
optimization algorithms.
Keywords: Dissolving equations; C-Interface;
dsblock; Matlab Mex File

more! This is not only useful for optimizing working
points of dynamical systems (e.g. minimum consumption at a specified output power) but also for
finding extreme working points of it (e.g. maximum
possible Output torque of a driveline). It would be
nice to benefit from Modelica also for this type of
task.
In principle, Dymola does all the critical work to
solve this problem: It manipulates the originally
given equations to make the numeric system dissolvable and generates C-Code, but there is no standard
way to make it useable for the described task.
The following approach to do this is elucidated on
the basis of optimizing the operation of hybrid drivelines.

w InSens

Abstract

ZBF
PositiveP...

Negative...

Figure 1: Model of a Prius driveline

Modelica 2006, September 4th  5th

J. Koehler

like State of charge of the battery, performance demands and comfort issues. To get the best compromise of these goals you need a driving strategy that
operates the hybrid system always on an appropriate
working point.

the actual consumption of the ICE and the current
through the battery.

2.1

To be able to optimize the hybrid system a performance index G (Eq. 3) has to be defined. In the end it
depends on the actual consumption C of the ICE and
the current I through the battery that in turn depend
on the demanded torques and speeds given from the
driving strategy.

Task of a hybrid driving strategy

A driving strategy must interpret the driver command given by the accelerator  and brake pedal

 as a demanded torque TOut at the actual driving
speed  Out .
TOut = TOut ( ,  )

2.2

Components that effect a performance index

(

G (C , I ) = G TOut ,  Out , & Out , TICE ,  ICE , & ICE

Out

Eq. 3

Eq. 1

Dependant on the driveline topology there are many
possibilities to perform this torque. Taking the Toyota Prius system (Figure 1) as an example of a
power split transmission, this torque can be delivered
as a combination of torques from the internal combustion engine (ICE), and both electric machines.
You could define the work point with some heuristic
rules in the driving strategy but then its very difficult to get the over all optimum of the whole system.
Another approach is to get this optimum using an
optimizing process. Therefore you need all the
torques and speeds of the ICE and all EMs.
When desired speed  ICE , acceleration & ICE and
torque TICE of the ICE, furthermore the desired acceleration of the vehicle, represented as angular acceleration at the gearbox output & Out , are selected as
degrees of freedom, a well-defined system can be
dissolved to this form.

(TEM 1, EM 1 , TEM 2 , EM 2 ) =

(

 TOut , Out , & Out , TICE ,  ICE , & ICE

)

There are a lot of components that have effect on
these values:
 Vehicle with its driving resistance
 ICE
 EMs
 Battery
 Gears in the driveline
The mathematical description of each component can
be rather complex. Just as complex is the interaction
between these components. For a Modelica user the
obvious way to address this problem would be to
build a model of the complete driveline using detailed models of the components. Its the task of the
Modelica Interpreter / Solver to build a system of
nonlinear equations that can be dissolved numerically.

3

)
3.1

Modeling the hybrid driveline for
numeric solving
Defining knowns and unknowns

Eq. 2

You dont have to describe the system in steadystate! However by setting the accelerations to zero,
you get this special case.
This equation can be used to get the torques, speeds
(and accelerations) of the EMs and in consequence

The Modelica Association

Having the mentioned components as model component in Modelica it is easy to build a model of the
complete hybrid driveline. By using the block
Modelica.Blocks.Math.TwoInputs,

188

Modelica 2006, September 4th  5th

How to Dissolve Complex Dynamic Systems for Wanted Unknowns with Dymola / Modelica

WaveP...

5

GEAR
integer...

ZBF

FuelMa...
bus

Re...
1

Table... TIC...
ZB...

RampWOUT
T...

1

Tice

S_w i...

duration=1

T...

S_w ice

RampWICE

duration=1

2

LossyGear1=1
H...

Jice

TICE
CTICE J=ZFlib.ZBF.Functions.GP(use.DB, "JMot", true)
Re...
Transmission
0.0

Tout
tau

TOUT ...
CTOUT

4

Battery

3
Ground1

P=const
Figure 2: Modelica model of a hybrid driveline with given inputs and out put

The input values from function  (Eq. 2) can be
defined as inputs to this model. It turned out to be the
best way to declare the inputs as parameters in Modelica. The block
Modelica.Blocks.Sources.Ramp
is the best way to define the speeds and accelerations
by putting the parameters in here.
In Figure 2 the Ramp for the ICE speed and acceleration can be found in circle No. 1 that is connected to
the TwoInputs block. Accordingly the speed of
the output shaft is defined in the circle No. 2 of
Fiqure 2. The desired torque of ICE and output are
defined in a Modelica expression block.
As output a connector (circle No. 3 in Figure 2) with
the wanted unknowns is defined and connected to the
appropriate components or bus signals.
The main driveline is represented by the transmission model in circle No. 4 of Figure 2. You can just
replace this component by another transmission if
you want to. The frame around it just keeps the
same.

The Modelica Association

In this special case, to calculate the unknown values
for a certain point in time the initialization feature of
Modelica / Dymola is used.
3.2

Modifications of components for numeric
solving

Depending on the possibly variable structure of the
transmission, the number of degrees of freedom can
change. This has to be handled in the initial
equation block of the complete model. Another
possible problem can be inconsistent speeds because of any ratios within the driveline or clutches.
The simpliest case is a clutch that is known to be
stuck. Here it is useful to replace it by a fixed connection.
If there is a clutch used as launching unit in a parallel
hybrid, it is a bit more complicated. We have inconsistent speeds if the given speeds of the ICE  ICE
and the output Out does not match the condition

189

Modelica 2006, September 4th  5th

J. Koehler

4.1

 ICE = iGear  Out
Eq. 4

where iGear is the gearbox ratio. In this case the
launching clutch has to be in a slipping state. Otherwise it has to be stuck. With the standard clutch
model in the Modelica standard library, Dymola is
not able to solve the problem. Introducing a special
clutch just as a torque element, the system is solvable for Dymola (See Figure 3).
Doing it this way, Dymola calculates the needed
torque f_normalized to satisfy the given inputs.

Dymola provides an export to Matlab Simulink in
form of a so called S-Function. To do this it embedds
the C-Code generated during the translation process
in the S-Function interface of Simulink. But this does
not help her because the model shall not be simulated but be called for one point in time with certain
inputs. To provide this functionality one reasonable
way is to import the generated C-Code into Matlab
as a so called MEX-function. Instead of the SFunction interface the MEX gateway function
void mexFunction(int nlhs, mxArray
*plhs[],
int nrhs, const
mxArray *prhs[])

model Clutch_OutT extends
Modelica.Mechanics.Rotational
.Interfaces.Compliant;
public
Modelica.Blocks.Interfaces.RealInput
f_normalized;
equation
tau = f_normalized;
end Clutch_OutT;

Figure 3: Modelica Code of specialized clutch

Another point to be taken care of are possible delays
in form of FirstOrder or SecondOrder blocks
that are inserted in the model to make its behaviour
smooth. In normal simulation mode they start normally at a zero initial state and get rather fast to their
steady state, but if you want to get this steady
result just at initialization of the model you have to
think of eliminating these blocks or to define some
extra initial equations to avoid this problem.

4

Generate the numeric solver

After doing the steps described above, a Modelica
model exists, that can be used to calculate the wanted
unknowns with a defined input. You can perform
this calculation within Dymola interactively by just
starting the model for a short period of time and look
for the results at initial time. But if you want to optimize working points you have to do this very often.
In addition to this you should be able to make this
calculation available for an optimizing algorithm as
they are implemented for example in Matlab. Therefore the Modelica model built above has to be exported into an appropriate environment.

The Modelica Association

MEX-function generation in Matlab

has to be used. To dissolve the hybrid driveline, the
code generated from Dymola (dsmodel.c) is
called within this gateway function. In the generated
code a function
dsblock(&idemand, , inputs, parameters, , outputs)
is implemented that contains all system equations.
The function dsblock can perform different tasks like
initialization, calculating derivatives, handling events
and so on. For this task, only the initialization functionality is needed. Heres the calling sequence:
1. Set inputs and parameters of the
model from prhs of mex function.
2. Call initialization of dsblock
3. Put the wanted values from outputs of
dsblock into plhs of mex function.
You can compile this MEX-gateway function with
the MEX-compiler and get a DLL that can be called
from the Matlab command line or in a Matlab MScript as any other Matlab function. In this form you
can use it for example within a fitting function for
the Matlab Optimization Toolbox.
4.2

Parametrizing the function

For one kind of driveline the mex function should be
built only once. As a consequence the parameters
must not be defined within the model. Therefore all
application dependable parameters are defined in
ASCII files that can be read by the model itself during initialization. This is described in [1]. When including the generated code from Dymola, we have to
insert a string variable to define the name of the ASCII file that shall be read by the model, because there
is no possibility to define this as a variable within
Modelica. This string variable is an input variable of
the MEX-function and is propagated to the model.

190

Modelica 2006, September 4th  5th

How to Dissolve Complex Dynamic Systems for Wanted Unknowns with Dymola / Modelica

5

Conclusions

The main goal to make the efforts described above is
to get optimized driving strategies for many variants
of hybrid drivelines in a short period of time.
Modeling complex systems in Modelica / Dymola is
easy to do and fast. So this is the most efficient way
to describe them and make them available for optimization issues. A lot of hybrid drivelines could be
provided to optimization process this way. The final
results when using the optimized working point in a
simulation are very good.
The possibility to dissolve such systems not only
for time simulation is a great enrichment in many
other engineering tasks apart from optimizing hybrid
driving strategies.

References
[1]

Khler J., Banerjee, A. Usage of Modelica in
modeling transmissions in ZF, ZF Friedrichshafen AG, 2005.

The Modelica Association

191

Modelica 2006, September 4th  5th

J. Koehler

The Modelica Association

192

Modelica 2006, September 4th  5th

Using Modelica Models for Complex Virtual Experimentation with the Tornado Kernel

Using Modelica Models for Complex Virtual Experimentation
with the Tornado Kernel
Filip H.A. Claeys
Department of Applied Mathematics,
Biometrics and Process Control (BIOMATH)
Ghent University
Coupure Links 653
B-9000 Gent
Belgium
E-mail: fc@biomath.ugent.be

Peter Fritzson
Programming Environments
Laboratory (PELAB)
Linkoping University
Campus Valla
SE-581 83 Linkoping
Sweden
E-mail: petfr@ida.liu.se

Abstract
Tornado is a software kernel for virtual experimentation on the basis of ODE/DAE models. Recently,
a model compiler has been developed that converts
flat Modelica code to executable models suitable for
use with the Tornado kernel. As a result, a subset of
Modelica models can now be used for tasks such as
parameter estimation, scenario analysis, Monte Carlo
simulation, sensitivity analysis and steady-state analysis. The inherent computational complexity of the
virtual experiment types implemented by Tornado can
be efficiently handled by the kernels semi-automated
distributed execution capabilities.
Keywords: Model compiler; Virtual experimentation;
Tornado; Modelica

1 Introduction
Tornado [1] is an advanced kernel for modelling and
virtual experimentation (i.e., any evaluation of a model
such as simulation, optimization, scenario analysis,
. . . ) that was recently jointly developed by BIOMATH
(Ghent University) and HEMMIS N.V. (Kortrijk, Belgium). Although the kernel is generic in nature, it is
mostly adopted in the water quality domain. In water
quality research, the biological and/or chemical quality of water in rivers, sewers and wastewater treatment
plants (WWTP) is studied. Research in this domain is
facilitated by a number of models that have received
a formal or de facto standardization status. Most notable are River Water Quality Model No.1 (RWQM1)
[2] and the Activated Sludge Model (ASM) series [3].
Water quality models typically consist of large sets
of non-linear Ordinary Differential Equations (ODE)
The Modelica Association

Peter A. Vanrolleghem
modelEAU
Departement de genie civil
Universite Laval
Pavillon Pouliot
Quebec, G1K 7P4
QC, Canada
E-mail: peter@modelEAU.org

and/or Differential-Algebraic Equations (DAE). These
equations are mostly well-behaved, although discontinuities occur regularly. The complexity of water quality models is therefore not in the nature of the equations, but in the sheer number. In WWTP, smaller
models such as the well-known Benchmark Simulation Model (BSM) [4] consist of approximately 150
derived variables. Larger systems have up to 1,000
derived variables and over 10,000 (partly coupled) parameters. On a typical workstation, a simulation run
usually lasts minutes to hours.
The modelling language that has thus far been used
in the scope of Tornado is MSL (Model Specification
Language) [5]. This language is similar to Modelica
[6] in the sense that it is high-level, declarative and
object-oriented. In fact, both MSL and Modelica were
designed according to the ideas resulting from the
1993 ESPRIT Basic Research Working Group 8467 on
Simulation for the Future: new concepts, tools and
applications [7]. Although similar in nature, MSL
lacks some of the readability and expressiveness of
Modelica. Therefore, it was decided to work towards
inclusion of support for Modelica-based modelling in
the Tornado framework.
The most recent result of our efforts to bridge the gap
between Modelica and Tornado is a model compiler
that converts flat Modelica (i.e., a Modelica model description that does not rely on inheritance nor decomposition) to executable models suitable for use with the
Tornado kernel. At the moment, this compiler is a prototype that supports basic functionalities of the Modelica language. However, it does allow for a subset of
Modelica models to be used in the context of Tornado.
Since solutions already exist that generate flat Modelica from full Modelica (e.g., omc - the OpenModelica
Compiler), only the conversion from flat Modelica to

193

Modelica 2006, September 4th  5th

F.H.A. Claeys, P. Fritzson, P.A. Vanrolleghem

executable model code had to be implemented.
The sequel of this paper is structured as follows: Section 2 and Section 3 respectively provide a further introduction to Tornado and its complex virtual experimentation capabilities. Subsequently, Section 4 explains how Modelica models can be used in Tornado.
Section 5 discusses two simple Modelica models for
which virtual experiments were run with Tornado. Finally, Section 6 contains some conclusions and references to future work.

2 Tornado
The Tornado kernel for modelling and virtual experimentation attempts to offer a compromise between the
computational efficiency of custom hard-coded (typically FORTRAN or C) model implementations and
the flexibility of less computationally efficient generic
tools such as MATLAB. In Tornado, hierarchical models are specified in high-level, declarative, objectoriented modelling languages such as MSL [5] and since recently - also Modelica. From these high-level
specifications, efficient executable code is generated
by a model compiler. Using the dynamically-loadable
executable models generated by the model compiler,
Tornado allows for running a variety of so-called virtual experiments. Virtual experiments are the virtualworld counterpart of real-world experiments, similar
to the way models relate to real-world systems. A
highly simplified conceptual diagram of Tornado is
shown in Figure 1.

generators. Output will be accepted by any combinations of data files, internal data buffers and plot handles (Note: since Tornado is merely a kernel, it does
not have any data visualization interface of its own).
In order to allow for the kernel to be deployed in a diverse array of applications, it has been equipped with
multiple interfaces. Next to its native C++ interface,
Tornado currently also has a C, .NET and MATLAB
MEX interface (cf. Figure 2). The kernel is portable
across platforms and was designed according to the
three-tier principle. Most persistent representations
of information types are XML-based. The grammar
of these representations is expressed in XSD (XML
Schema Definition) format and mimics very closely
the internal representation of the respective types of
information. An interesting feature of Tornado is the
fact that it allows for dynamic loading of numerical
solvers for tasks such as integration, optimization and
Latin Hypercube Sampling. In order to support this
principle, a generalized framework has been set up [8].

Figure 2: Tornado-based Interfaces and Applications

Figure 1: Tornado Conceptual Diagram
The Tornado kernel relies on a flexible input provider
and output acceptor mechanism to deal with I/O for
virtual experiments. Input can be provided by any
combination of data files, internal data buffers and data
The Modelica Association

Several applications (graphical and other) can be built
on top of Tornado. Examples include the next generR
ation of the WEST
[5] commercial modelling and
simulation tool for WWTPs, its research-oriented
counterpart named EAST and DHIs MOUSE-TRAP
(cf., http://www.dhigroup.com/Software/Urban.aspx).
However, the most direct way of using the kernel is
through the Tornado CUI (Command-line User Interface) suite, which is a comprehensive set of tools that
is included with the kernel distribution. Full-fledged
R
graphical applications such as WEST
are conceived
to be used by all types of users (expert, intermediate,
novice). The Tornado CUI suite however focuses on
experts only. Table 1 gives an overview of the most
commonly used command-line tools. The results dis-

194

Modelica 2006, September 4th  5th

Using Modelica Models for Complex Virtual Experimentation with the Tornado Kernel

cussed further in this paper were obtained through the egee.org). Tornado generates generic job descriptions
Tornado CUI suite.
for dynamic execution. Typhoon is capable of directly
interpreting these generic job descriptions, whereas for
LCG-2, an additional conversion step has to be apTable 1: Tornado CUI Suite
plied.
Program
Description
Using Tornados powerful complex virtual experimentbuild
Compiles and links executable model code to a
tation capabilities, large risk/cost/benefit analyses for
dynamically-loadable binary object (.dll / .so)
integrated water systems were carried out, including
tcreate
Creates an empty XML description of a virtual
Latin Hypercube Sampling from multi-dimensional
experiment
parameter spaces and the automated execution of
texec
Executes virtual experiments described in XML
1,000s of simulations [10], each requiring an average
tinitial
Dumps all model quantity values after initialization
of 0.5h of computation time.
tmsl

Compiles a high-level MSL model to executable
model code

tobj

4

Computes aggregation functions and other criteria

Using Modelica Models in Tornado

from simulation trajectories
tproject

Manages sets of related experiments and
connection graphs

tsort

Sorts a Tornado-generated data file

t2msl

Converts a connection graph to MSL code

3 Complex Virtual Experimentation
Tornado consists of strictly separated modelling and
virtual experimentation environments. Virtual experiments can either be atomic or compound. The latter are hierarchically structured whereas the first cannot be further decomposed. Atomic experiment types
that are available in Tornado are dynamic simulation
and steady-state analysis. The most straightforward
types of compound experiments are optimization, scenario analysis, Monte Carlo analysis (e.g. using Latin
Hypercube Sampling) and sensitivity analysis. More
convoluted types of compound experiments are also
available, such as combinations of scenario / Monte
Carlo analysis and optimization. Thanks to the objectoriented nature of Tornado, new virtual experiment
types can easily be added. Several types of virtual experiments are based on the computation of objective
values. As far as possible, the same set of objective
types is available for each objective-based experiment
type, thereby promoting orthogonality.
Given the hierarchical nature of compound virtual experiments, computational complexity can be substantial. Tornado therefore allows for coarse-grained gridification of certain types of compound virtual experiments. Supported distributed execution environments
include BIOMATHs Typhoon cluster software [9] and
CERNs LCG-2 grid middleware (cf., http://public.euThe Modelica Association

In Tornado, executable models consist of two distinct
parts. The first part is represented in C and is made up
of the actual model equations, in addition to a number
of flat arrays containing data containers for parameters
and variables. The second part is a XML representation of meta-information, i.e., information regarding
names, descriptions, units, constraints, . . . of parameters, variables and models. The relationship between
these hierarchically structured meta-information items
and the respective elements of the flat C arrays is
also expressed in XML. The availability of metainformation in executable models allows for the latter
to be self-describing, which is a requirement given the
strict separation between modelling and experimentation in Tornado.
In the Tornado framework, model compilers are to
generate executable models in the format that was described above. The MSL model compiler that is part
of the Tornado suite generates these executable models directly from MSL input. In the case of Modelica however, the approach is two-phased. During
the first phase, the OpenModelica Compiler is used to
generate flat Modelica (.mof) from full Modelica input (.mo). During the second phase, a new Tornado
CUI tool called mof2t is used to convert flat Modelica to the Tornado executable model format. This
approach was mainly inspired by practical considerations (lack of resources for the re-implementation of
the non-trivial full-to-flat Modelica conversion). At
the moment mof2t only supports a subset of flat Modelica.
For the development of the mof2t compiler, the
same technologies and libraries were used as for
the remainder of the Tornado framework, i.e., C++,
flex/bison, and Elcel Technologies OpenTop (cf.,
http://www.elcel.com). The mof2t compiler nicely

195

Modelica 2006, September 4th  5th

F.H.A. Claeys, P. Fritzson, P.A. Vanrolleghem

completes the Tornado CUI suite, which in all consists
of approximately 20 tools. The relationship between
mof2t and the most important other CUI tools is depicted in Figure 3.

VanDerPol.mof:
--fclass VanDerPol
Real x(start = 1.0);
Real y(start = 1.0);
parameter Real mu = 1;
equation
der(x) = y;
der(y) = -x + mu * (1.0 - x * x) * y;
end VanDerPol;
---

Given the fact that this model does not rely on inheritance nor decomposition, there is no difference between its full and flattened version. In order to generate executable code for Tornado and convert this code
into a dynamically-loadable object, the mof2t and
tbuild CUI tools are to be used:
> mof2t VanDerPol.mof
Flat Modelica to Tornado Convertor (Build: Jun 23 2006)
I
I
I
I
I

Loading license spec: Tornado.lic|.Tornado
Checking MAC address...
Starting executable model code generation...
Executable model code generation ended
Total execution time: 0 seconds

> tbuild -p win32-msvc7.1 VanDerPol
Tornado Model Builder (Build: Jun 23 2006)
I
I
I
I
I

Loading license spec: Tornado.lic|.Tornado
Checking MAC address...
Starting build...
Build ended
Total execution time: 0 seconds

The executable C code and XML meta-information
that is generated by mof2t is as follows:
Figure 3: Relationship between the Main Tornado CUI
Tools

VanDerPol.c:
--#include <math.h>
#include <stdlib.h>
#include "Tornado/EE/Common/DLL.h"
#include "Tornado/EE/MSLE/MSLE.h"
#define
#define
#define
#define
#define
#define

5 Examples
In this section, two simple cases are presented that illustrate the use of Modelica models in Tornado. The
first case is based on the ubiquitous Van der Pol system, which is frequently found as an example in modelling and simulation textbooks when stiff systems are
discussed. The second case is based on the ARGESIM
- C1 simulator comparison. In both cases, results
were obtained using the Tornado CUI suite. Evidently,
when using Tornado through one of the GUI applications that it supports, most of the technical details
shown below are hidden from the user.

5.1
5.1.1

void ComputeInitial(struct TModel* pModel) {}
void ComputeState(struct TModel* pModel)
{
_D_x_ = _y_;
_D_y_ = -_x_ + _mu_ * (1 - _x_ * _x_) * _y_;
}
void ComputeOutput(struct TModel* pModel) {}
void ComputeFinal(struct TModel* pModel) {}
void* GetID() { return (void*)L"Tornado.MSLE.Model.VanDerPol"; }
void* Create()
{
struct TModel* pModel;

Van der Pol
Model

The Van der Pol system can be described in Modelica
as follows:
The Modelica Association

_mu_ pModel->Params[0]
_time_ pModel->IndepVars[0]
_x_ pModel->DerVars[0]
_D_x_ pModel->Derivatives[0]
_y_ pModel->DerVars[1]
_D_y_ pModel->Derivatives[1]

196

pModel = (struct TModel*)malloc(sizeof(struct TModel));
pModel->Type = L"ODE";
pModel->NoParams = 1;
pModel->NoIndepVars = 1;
pModel->NoInputVars = 0;
pModel->NoOutputVars = 0;
pModel->NoAlgVars = 0;
pModel->NoDerVars = 2;
pModel->NoDerivatives = 2;
pModel->NoPrevious = 0;
pModel->NoResidues = 0;
pModel->NoSolveSets = 0;
pModel->NoEvents = 0;

Modelica 2006, September 4th  5th

Using Modelica Models for Complex Virtual Experimentation with the Tornado Kernel

iment executor. Specs must conform to the respective
XML schemas that have been defined in the scope of
Tornado. When using the Tornado CUI suite, empty
specs can be generated by the tcreate program
and must then be further completed manually. Below
is a simulation experiment spec for the Van der Pol
model that was generated by invoking tcreate -t
Simul VanDerPol and further completed through
manual editing:

pModel->Params =
(double*)malloc(sizeof(double) * pModel->NoParams);
pModel->IndepVars =
(double*)malloc(sizeof(double) * pModel->NoIndepVars);
pModel->InputVars =
(double*)malloc(sizeof(double) * pModel->NoInputVars);
pModel->OutputVars =
(double*)malloc(sizeof(double) * pModel->NoOutputVars);
pModel->AlgVars =
(double*)malloc(sizeof(double) * pModel->NoAlgVars);
pModel->DerVars =
(double*)malloc(sizeof(double) * pModel->NoDerVars);
pModel->Derivatives =
(double*)malloc(sizeof(double) * pModel->NoDerivatives);
pModel->Previous =
(double*)malloc(sizeof(double) * pModel->NoPrevious);
pModel->Residues =
(double*)malloc(sizeof(double) * pModel->NoResidues);
pModel->SolveSets =
(TSolveSetP)malloc(sizeof(struct TSolveSet) *
pModel->NoSolveSets);
pModel->Events =
(TEventP)malloc(sizeof(struct TEvent) * pModel->NoEvents);
pModel->ComputeInitial = ComputeInitial;
pModel->ComputeState = ComputeState;
pModel->ComputeOutput = ComputeOutput;
pModel->ComputeFinal = ComputeFinal;
return (void*)pModel;
}
--VanDerPol.SymbModel.xml:
--<Tornado>
<Model>
<Exec FileName="VanDerPol"/>
<Symb>
<Model Name="">
<Params>
<Param Name="mu" DefaultValue="1"/>
</Params>
<IndepVars>
<IndepVar Name="time" DefaultValue="0"/>
</IndepVars>
<InputVars>
</InputVars>
<OutputVars>
</OutputVars>
<AlgVars>
</AlgVars>
<DerVars>
<DerVar Name="x" DefaultValue="1"/>
<DerVar Name="y" DefaultValue="1"/>
</DerVars>
<Models>
</Models>
</Model>
</Symb>
<Links>
<Link Name=".mu" ValueType="Params" ValueIndex="0"/>
<Link Name=".time" ValueType="IndepVars" ValueIndex="0"/>
<Link Name=".x" ValueType="DerVars" ValueIndex="0"
DerivativeType="Derivatives" DerivativeIndex="0"/>
<Link Name=".y" ValueType="DerVars" ValueIndex="1"
DerivativeType="Derivatives" DerivativeIndex="1"/>
</Links>
</Model>
</Tornado>
---

The exact semantics of these representations are beyond the scope of this paper and will therefore not be
further discussed. Important to note however is that
the format of the generated C code has been kept as
simple as possible in order to be able to compile the
code with as many C compilers as possible. The compilers that have been shown to work so far are Borland
C++ 5.5, MS Visual C++ 6.0, 7.1 & 8.0, LCC, INTEL
C++ 9.0 and g++.
5.1.2

Simulation

In order to simulate the generated model code, a simulation experiment spec is to be provided to the experThe Modelica Association

VanDerPol.Simul.Exp.xml:
--<Tornado>
<Exp Version="1.0" Type="Simul">
<Props>
<Prop Name="Author" Value="PCFC1\fc"/>
<Prop Name="Date" Value="Wed Jun 28 14:58:02 2006"/>
<Prop Name="Desc" Value="Van der Pol simulation"/>
<Prop Name="FileName"
Value="VanDerPol.Simul.Exp.xml|.Tornado"/>
<Prop Name="UnitSystem" Value=""/>
</Props>
<Simul>
<Model Name="VanDerPol" CheckBounds="false">
<Quantities>
<Quantity Name=".mu" Value="100"/>
<Quantity Name=".x" Value="2"/>
</Quantities>
</Model>
<Inputs Enabled="false">
</Inputs>
<Outputs Enabled="true">
<Output Name="*Calc*">
<CalcVars Enabled="false">
</CalcVars>
</Output>
<Output Name="*Plot*">
<Plot Enabled="false">
<Props>
<Prop Name="CommInt" Value="0"/>
<Prop Name="Info" Value=""/>
<Prop Name="Interpolated" Value="false"/>
<Prop Name="StartTime" Value="-INF"/>
<Prop Name="StopTime" Value="+INF"/>
<Prop Name="UseDisplayUnits" Value="true"/>
</Props>
<Quantities>
</Quantities>
</Plot>
</Output>
<Output Name="File">
<File Name="VanDerPol.Simul.out.txt" Enabled="true">
<Props>
<Prop Name="CommInt" Value="0"/>
<Prop Name="CommIntType" Value="Linear"/>
<Prop Name="DecSep" Value="."/>
<Prop Name="Interpolated" Value="false"/>
<Prop Name="Precision" Value="8"/>
<Prop Name="StartTime" Value="-INF"/>
<Prop Name="StopTime" Value="+INF"/>
<Prop Name="UseDisplayUnits" Value="true"/>
</Props>
<Quantities>
<Quantity Name=".x"/>
<Quantity Name=".y"/>
</Quantities>
</File>
</Output>
</Outputs>
<Time>
<Start Value="0"/>
<Stop Value="300"/>
</Time>
<Solve>
<Integ Method="CVODE">
<Props>
<Prop Name="AbsoluteTolerance" Value="1e-006"/>
<Prop Name="CVBandLowerBandwidth" Value="0"/>
<Prop Name="CVBandUpperBandwidth" Value="0"/>
<Prop Name="CVSPGMRGSType" Value="ModifiedGS"/>
<Prop Name="IterationMethod" Value="Newton"/>
<Prop Name="LinearMultistepMethod" Value="BDF"/>
<Prop Name="LinearSolver" Value="Diag"/>
<Prop Name="MaxNoSteps" Value="0"/>
<Prop Name="RelativeTolerance" Value="1e-005"/>
</Props>
</Integ>
</Solve>
</Simul>
</Exp>
</Tornado>
---

197

Modelica 2006, September 4th  5th

F.H.A. Claeys, P. Fritzson, P.A. Vanrolleghem

For a simulation experiment, XML specs basically
allow for specifying initial values (hereby overruling initializations that were specified through the
models meta-information), defining input providers
/ output acceptors, specifying the simulation start /
stop time and configuring integrator solver settings.
In this case, initial values were given for .mu and
.x, input was disabled and one output file acceptor was defined. The simulation will be run from
0 to 300 and the CVODE stiff system solver (cf.,
http://www.llnl.gov/CASC/sundials) will be used as
an integrator. Important to note is that the settings
of the CVODE integrator are given through a flexible
attribute-value pair mechanism instead of through tags
that are part of the XML grammar. This is required to
support dynamic loading of solver plugins. The fragment below shows the output of the experiment executor, when applied to the VanDerPol simulation spec.
One will notice that before execution starts, a number
of solver plugins are dynamically loaded (in this case
only a subset of the 35 solver plugins that are provided
with Tornado are loaded):

I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I

#DerVars = 2
#Derivatives = 2
#Previous = 0
#Residues = 0
#SolveSets = 0
#Events = 0
Building model symbol table...
Checking model linkage...
Creating simulator...
Setting integration solver: Tornado.Solve.Integ.CVODE
Experiment information:
Type = Simul
Embedded = true
Author = PCFC1\fc
Date = Wed Jun 28 14:58:02 2006
Desc = Van der Pol simulation experiment
FileName = VanDerPol.Simul.Exp.xml|.Tornado
UnitSystem =
Initializing model...
Opening simulation output file: VanDerPol.Simul.out.txt
Simulation from 0 to 300
Starting simulation...
Simulation ended
Closing simulation output file: VanDerPol.Simul.out.txt
Executable model statistics:
#ComputeInitials: 1
#ComputeStates: 3240
#ComputeOutputs: 1686
#ComputeFinals: 1
Total execution time: 0 seconds
Thread ended
Unloading plugins

The Tornado CUI suite does not contain any data visualization mechanism, however one can easily use tools
such as MS Excel, MATLAB or GNUPlot to display
the simulated trajectories. Figure 4 shows the result of
invoking the following commands in GNUPlot:

> texec VanDerPol.Simul.Exp.xml
Tornado Experiment Executor (Build: Jun 13 2006)
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I

Loading license spec: Tornado.lic|.Tornado
Checking MAC address...
Loading main spec: Tornado.Main.xml|.Tornado
Loading plugin: Tornado.Solve.Integ.CVODE
Loading plugin: Tornado.Solve.Integ.Euler
Loading plugin: Tornado.Solve.Integ.RK4
Loading plugin: Tornado.Solve.Integ.RK4ASC
Loading plugin: Tornado.Solve.Optim.GA
Loading plugin: Tornado.Solve.Optim.Praxis
Loading plugin: Tornado.Solve.Optim.SA
Loading plugin: Tornado.Solve.Optim.Simplex
Loading plugin: Tornado.Solve.Root.Broyden
Loading plugin: Tornado.Solve.Root.Hybrid
Loading plugin: Tornado.Solve.Scen.Cross
Loading plugin: Tornado.Solve.Scen.Fixed
Loading plugin: Tornado.Solve.Scen.Grid
Loading plugin: Tornado.Solve.Scen.Plain
Loading plugin: Tornado.Solve.Scen.Random
Loading plugin: Tornado.Solve.Sens.Plain
Loading plugin: Tornado.Solve.CI.Nelder
Loading plugin: Tornado.Solve.CI.Richardson
Loading plugin: Tornado.Solve.MC.IHS
Loading plugin: Tornado.Solve.MC.CVT
Loading plugin: Tornado.Solve.MC.LHS
Loading plugin: Tornado.Solve.MC.PR
Main information:
Author = PCFC1\fc
Date = Thu Oct 13 16:08:06 2005
Desc = Main spec
EnableHashOutputHeaders = true
EnableWESTInputHeaders = true
EnableWESTOutputHeaders = false
FileName =
KernelAuthor = Filip Claeys, Dirk De Pauw
KernelDesc = Advanced Kernel for Modelling and Virtual Ex...
KernelVersion = 0.22
LimitMRE = 0.7
LimitSRE = 0.0235
Precision = 8
New job: VanDerPol.Simul.Exp.xml
Starting thread...
Loading experiment spec: VanDerPol.Simul.Exp.xml|.Tornado
Loading simulation experiment spec: VanDerPol.Simul.Exp.xml...
Loading symbolic model spec: VanDerPol.SymbModel.xml|.Tornado
Loading executable model: Tornado.MSLE.Model.VanDerPol
Executable model information:
Type = ODE
#Params = 1
#IndepVars = 1
#InputVars = 0
#OutputVars = 0
#AlgVars = 0

The Modelica Association

set xlabel "t"
set ylabel ".x"
plot VanDerPol.Simul.out.txt using 1:2 with lines

Figure 4: Van Der Pol for .mu = 100

5.1.3

Parameter variation

More interesting it becomes if we wish to run the same
simulation for different initial values. For instance,
suppose we wish to run the simulation for values of
.mu that are logarithmically spaced between 1 and 100
with a spacing of 2. Suppose also that for each simulation, we want to determine the maximum value and

198

Modelica 2006, September 4th  5th

Using Modelica Models for Complex Virtual Experimentation with the Tornado Kernel

standard deviation of the trajectory of .y, in addition to
the value of .y at t = 50. The scenario analysis experiment shown below provides a solution to this problem:
VanDerPol.Scen.Exp.xml:
--<Tornado>
<Exp Version="1.0" Type="Scen">
<Props>
<Prop Name="Author" Value="PCFC1\fc"/>
<Prop Name="Date" Value="Wed Jun 28 15:37:57 2006"/>
<Prop Name="Desc" Value="VanDerPol scenario analysis"/>
<Prop Name="FileName"
Value="VanDerPol.Scen.Exp.xml|.Tornado"/>
<Prop Name="UnitSystem" Value=""/>
</Props>
<Scen>
<Obj>
<Exp Version="1.0" Type="Simul"
FileName="VanDerPol.Simul.Exp.xml|.Tornado"/>
<Props>
<Prop Name="CommInt" Value="0"/>
<Prop Name="DecSep" Value="."/>
<Prop Name="EnableNoComputeStates" Value="false"/>
<Prop Name="EnableRetrieval" Value="false"/>
<Prop Name="EnableStorage" Value="true"/>
<Prop Name="Interpolated" Value="false"/>
<Prop Name="OutputFileName"
Value="VanDerPol.Scen.Simul.out.txt.{}"/>
<Prop Name="Precision" Value="8"/>
<Prop Name="ThousandSep" Value=","/>
<Prop Name="TyphoonBaseName" Value="Typhoon"/>
</Props>
<Quantities>
<Quantity Name=".y">
<Props>
<Prop Name="Criterion" Value="AbsSquared"/>
<Prop Name="EnableAvg" Value="false"/>
<Prop Name="EnableDiffMax" Value="false"/>
<Prop Name="EnableDiffSum" Value="false"/>
<Prop Name="EnableEndValue" Value="false"/>
<Prop Name="EnableInt" Value="false"/>
<Prop Name="EnableMax" Value="true"/>
<Prop Name="EnableMin" Value="false"/>
<Prop Name="EnableStdDev" Value="true"/>
<Prop Name="EnableTIC" Value="false"/>
<Prop Name="EnableValueOnTime" Value="true"/>
<Prop Name="Time" Value="50"/>
<Prop Name="Weighted" Value="false"/>
</Props>
</Quantity>
</Quantities>
</Obj>
<Log Name="VanDerPol.Scen.log.txt" Enabled="true">
<Props>
</Props>
</Log>
<Inputs Enabled="false">
</Inputs>
<Outputs Enabled="true">
<Output Name="*File*">
<File Name="VanDerPol.Scen.out.txt" Enabled="true">
<Props>
<Prop Name="DecSep" Value="."/>
<Prop Name="Precision" Value="8"/>
</Props>
</File>
</Output>
<Output Name="*Plot*">
<Plot Enabled="false">
<Props>
<Prop Name="Info" Value=""/>
</Props>
</Plot>
</Output>
</Outputs>
<Vars>
<Var Name=".mu">
<Props>
<Prop Name="DistributionMethod" Value="Logarithmic"/>
<Prop Name="LowerBound" Value="1"/>
<Prop Name="NoValues" Value="0"/>
<Prop Name="RefValue" Value="1"/>
<Prop Name="Spacing" Value="2"/>
<Prop Name="StdDev" Value="0"/>
<Prop Name="UpperBound" Value="100"/>
<Prop Name="UpperBoundPolicy"
Value="IncludeUpperBound"/>
<Prop Name="Values" Value=""/>
</Props>
</Var>
</Vars>
<Solve>
<Scen Method="Grid">
<Props>
<Prop Name="EnableRef" Value="false"/>
<Prop Name="Generate" Value="true"/>

The Modelica Association

<Prop Name="UseTyphoon" Value="false"/>
</Props>
</Scen>
</Solve>
</Scen>
</Exp>
</Tornado>

As one can see, this scenario analysis spec refers
to a simulation spec that resides in an external file
(VanDerPol.Simul.Exp.xml). Directly embedding the
XML content of this file into the scenario analysis
experiment is however also possible. One will also
notice that other types of objectives and aggregation
functions (next to the Min, StdDev, ValueOnTime functions that are needed for our application) such as Avg
(average) and Int (integral) are also possible. Table 2
shows the contents of the VanDerPol.Scen.out.txt file
that is generated during the execution of the scenario
analysis.
Table 2: Results of the VarDerPol.Scen.Exp.xml Experiment
RunNo

.mu

Max(.y)

StdDev(.y)

ValueOnTime(.y)

1

1

2.6865596

1.4272097

-1.5137494

2

2

3.8300373

1.4645402

-0.034409599

3

4

6.3463996

1.5316644

0.58337344

4

8

11.553678

1.593544

-0.092195286

5

16

22.097001

1.6317544

0.058550465

6

32

43.305241

1.6404037

0.052380761

7

64

85.828672

1.5529595

-0.0439915

8

100

133.68028

1.4986709

-0.010200556

5.2

ARGESIM - C1

ARGE Simulation News (cf., http://www.argesim.org)
is a non-profit working group providing the infrastructure and adminstration for dissemination of information on modelling and simulation in Europe. ARGESIM is located at Vienna University of Technology,
Dept. Simulation and publishes Simulation News Europe (SNE), which features a series on comparisons of
simulation software. Based on simple, easily comprehensible models special features of modelling and experimentation within simulation languages, also with
respect to an application area, are compared. Features are, for instance: modelling technique, eventhandling, numerical integration, steady-state calculation, distribution fitting, parameter sweep, output analysis, animation, complex logic strategies, submodels,
macros, statistical features etc. Approximately 20
comparisons have thusfar been defined, the first was
199

Modelica 2006, September 4th  5th

F.H.A. Claeys, P. Fritzson, P.A. Vanrolleghem

published in November 1990, the last in December
2005.
5.2.1

Model

As a second example of the use of Modelica models in
Tornado, the C1 ARGESIM comparison will be used.
The model that is at the basis of this comparison can
be represented in Modelica as follows:
C1.mof:
--fclass C1
parameter Real kr = 1;
parameter Real kf = 0.1;
parameter Real lf = 1000;
parameter Real dr = 0.1;
parameter Real dm = 1;
parameter Real p = 0;
Real f(start = 9.975);
Real m(start = 1.674);
Real r(start = 84.99);
equation
der(r) = -dr * r + kr * m * f;
der(m) = dr * r - dm * m + kf * f * f - kr * m * f;
der(f) = dr * r + 2 * dm * m - kr * m * f 2 * kf * f * f - lf * f + p;
end C1;
---

The comparison requires the following tasks to be performed:
 Simulation of the stiff system over [0,10].
 Parameter variation of lf from 1.0e2 to 1.0e4 and
a plot of all f(t; lf), logarithmic steps preferred.
 Calculation of steady states during constant bombardment (p(t) = pc = 1.0E4) and without bombardment (p(t) = 0).
5.2.2

Simulation

As in the first example, a dynamically-loadable executable model for Tornado can be generated using
mof2t and tbuild. Afterwards, an empty simulation experiment can be generated with tcreate and
then be completed through manual editing:
C1.Simul.Exp.xml:
--<Tornado>
<Exp Version="1.0" Type="Simul">
<Props>
<Prop Name="Author" Value="PCFC1\fc"/>
<Prop Name="Date" Value="Fri Jun 30 12:28:12 2006"/>
<Prop Name="Desc" Value=""/>
<Prop Name="FileName"
Value="C1.CVODE.Simul.Exp.xml|.Tornado"/>
<Prop Name="UnitSystem" Value=""/>
</Props>
<Simul>
<Model Name="C1" CheckBounds="false">
<Quantities>
</Quantities>
</Model>
<Inputs Enabled="false">
</Inputs>
<Outputs Enabled="true">
<Output Name="*Calc*">
<CalcVars Enabled="false">
</CalcVars>
</Output>
<Output Name="*Plot*">

The Modelica Association

<Plot Enabled="false">
<Props>
<Prop Name="CommInt" Value="0"/>
<Prop Name="Info" Value=""/>
<Prop Name="Interpolated" Value="false"/>
<Prop Name="StartTime" Value="-INF"/>
<Prop Name="StopTime" Value="+INF"/>
<Prop Name="UseDisplayUnits" Value="true"/>
</Props>
<Quantities>
</Quantities>
</Plot>
</Output>
<Output Name="File">
<File Name="C1.Simul.out.txt" Enabled="true">
<Props>
<Prop Name="CommInt" Value="1.2"/>
<Prop Name="CommIntType" Value="Logarithmic"/>
<Prop Name="DecSep" Value="."/>
<Prop Name="Interpolated" Value="true"/>
<Prop Name="Precision" Value="8"/>
<Prop Name="StartTime" Value="1e-007"/>
<Prop Name="StopTime" Value="+INF"/>
<Prop Name="UseDisplayUnits" Value="true"/>
</Props>
<Quantities>
<Quantity Name=".f"/>
<Quantity Name=".m"/>
<Quantity Name=".r"/>
</Quantities>
</File>
</Output>
</Outputs>
<Time>
<Start Value="0"/>
<Stop Value="10"/>
</Time>
<Solve>
<Integ Method="CVODE">
<Props>
<Prop Name="AbsoluteTolerance" Value="1e-006"/>
<Prop Name="CVBandLowerBandwidth" Value="0"/>
<Prop Name="CVBandUpperBandwidth" Value="0"/>
<Prop Name="CVSPGMRGSType" Value="ModifiedGS"/>
<Prop Name="IterationMethod" Value="Functional"/>
<Prop Name="LinearMultistepMethod" Value="Adams"/>
<Prop Name="LinearSolver" Value="Dense"/>
<Prop Name="MaxNoSteps" Value="0"/>
<Prop Name="RelativeTolerance" Value="1e-006"/>
</Props>
</Integ>
<Root Method="Broyden">
<Props>
<Prop Name="MaxNoSteps" Value="0"/>
<Prop Name="MaxStepSize" Value="1"/>
</Props>
</Root>
</Solve>
</Simul>
</Exp>
</Tornado>
---

Important to notice in this simulation experiment is
that for the output file acceptor, the communication interval type (CommIntType) was set to logarithmic. In
this case, logarithmic spacing of output timepoints is
required in order to be able to accurately represent the
dynamics of the simulated trajectories during the initial phase of the simulation (without generating huge
amounts of irrelevant data). After running the simulation with texec, one could for instance use GNUPlot
to display the results (see Figure 5) onto logarithmic
axes using the following commands:
set logscale xy
set xlabel "t"
set ylabel ".f"
plot C1.Simul.out.txt using 1:2 with lines

5.2.3

Parameter variation

The parameter variation that is requested by the comparison can easily be implemented in Tornado us200

Modelica 2006, September 4th  5th

Using Modelica Models for Complex Virtual Experimentation with the Tornado Kernel

The following describes a steady-state experiment for
the ARGESIM C1 model where p = 1e4:

Figure 5: Simulation results for the ARGESIM C1
model

C1.p=1e4.SS.Exp.xml:
--<Tornado>
<Exp Version="1.0" Type="SS">
<Props>
<Prop Name="Author" Value="PCFC1\fc"/>
<Prop Name="Date" Value="Fri Jun 30 15:39:27 2006"/>
<Prop Name="Desc" Value=""/>
<Prop Name="FileName" Value="C1.p=1e4.SS.Exp.xml|.Tornado"/>
<Prop Name="UnitSystem" Value=""/>
</Props>
<SS>
<Model Name="C1" CheckBounds="false">
<Quantities>
<Quantity Name=".p" Value="1e4"/>
</Quantities>
</Model>
<Solve>
<Root Method="Hybrid">
<Props>
<Prop Name="Tolerance" Value="1e-008"/>
</Props>
</Root>
</Solve>
</SS>
</Exp>
</Tornado>
---

ing the scenario analysis experiment type. However,
in contrast to the Van der Pol example, no post- Execution of this experiment with texec will inprocessing functions (such as Min, StdDev, . . . ) are stantly yield the correct steady state values for .f, .m
needed in this case. Important however is that the vari- and .r :
ation of .lf is to be set to Logarithmic, as requested. > texec "C1.p=1e4.SS.Exp.xml"
Figure 6 shows the results of a 10-shot scenario analy- Tornado Experiment Executor (Build: Jun 13 2006, 10:32:40)
sis experiment defined in this way.
I
Loading license spec: Tornado.lic|.Tornado

Figure 6: Scenario analysis results for the ARGESIM
C1 model

5.2.4

Calculation of steady states

For the calculation of steady states, the steady-state
(SS) experiment type can be used. In Tornado, the
steady-state of a system is directly computed through
the application of a root finding solver to the system
equations, where the derivatives (i.e., the left hand
sides) of state equations are used as residues (that are
to be brought to zero).
The Modelica Association

I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I

201

Checking MAC address...
Loading main spec: Tornado.Main.xml|.Tornado
Loading plugin: Tornado.Solve.Integ.CVODE
Loading plugin: Tornado.Solve.Integ.Euler
Loading plugin: Tornado.Solve.Integ.RK4
Loading plugin: Tornado.Solve.Integ.RK4ASC
Loading plugin: Tornado.Solve.Optim.GA
Loading plugin: Tornado.Solve.Optim.Praxis
Loading plugin: Tornado.Solve.Optim.SA
Loading plugin: Tornado.Solve.Optim.Simplex
Loading plugin: Tornado.Solve.Root.Broyden
Loading plugin: Tornado.Solve.Root.Hybrid
Loading plugin: Tornado.Solve.Scen.Cross
Loading plugin: Tornado.Solve.Scen.Fixed
Loading plugin: Tornado.Solve.Scen.Grid
Loading plugin: Tornado.Solve.Scen.Plain
Loading plugin: Tornado.Solve.Scen.Random
Loading plugin: Tornado.Solve.Sens.Plain
Loading plugin: Tornado.Solve.CI.Nelder
Loading plugin: Tornado.Solve.CI.Richardson
Loading plugin: Tornado.Solve.MC.IHS
Loading plugin: Tornado.Solve.MC.CVT
Loading plugin: Tornado.Solve.MC.LHS
Loading plugin: Tornado.Solve.MC.PR
Main information:
Author = PCFC1\fc
Date = Thu Oct 13 16:08:06 2005
Desc = Main spec
EnableHashOutputHeaders = true
EnableWESTInputHeaders = true
EnableWESTOutputHeaders = false
FileName =
KernelAuthor = Filip Claeys, Dirk De Pauw
KernelDesc = Advanced Kernel for Modelling and Virtual...
KernelVersion = 0.22
LimitMRE = 0.7
LimitSRE = 0.0235
Precision = 8
New job: C1.p=1e4.SS.Exp.xml
Starting thread...
Loading experiment spec: C1.p=1e4.SS.Exp.xml|.Tornado
Loading steady-state analysis experiment spec: C1.p=1e4...
Loading symbolic model spec: C1.SymbModel.xml|.Tornado
Loading executable model: Tornado.MSLE.Model.C1
Executable model information:
Type = ODE
#Params = 6
#IndepVars = 1
#InputVars = 0
#OutputVars = 0
#AlgVars = 0
#DerVars = 3
#Derivatives = 3

Modelica 2006, September 4th  5th

F.H.A. Claeys, P. Fritzson, P.A. Vanrolleghem
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I

In the forthcoming months, the mof2t will be further
stabilized and enhanced.

#Previous = 0
#Residues = 0
#SolveSets = 0
#Events = 0
Building model symbol table...
Checking model linkage...
Creating steady-state analyser...
Setting root solver: Tornado.Solve.Root.Hybrid
Experiment information:
Type = SS
Embedded = true
Author = PCFC1\fc
Date = Fri Jun 30 15:39:27 2006
Desc =
FileName = C1.p=1e4.SS.Exp.xml|.Tornado
UnitSystem =
Initializing model...
Initializing model...
Starting steady-state analysis...
Steady-state analysis ended
Executable model statistics:
#ComputeInitials: 8
#ComputeStates: 8
#ComputeOutputs: 0
#ComputeFinals: 0
Final variable values:
.f = 10
.m = 10
.r = 1000
Total execution time: 0 seconds
Thread ended
Unloading plugins

Acknowledgement
Peter A. Vanrolleghem is Canadian Research Chair in
Water Quality Modelling.

References
[1] F. Claeys, D. De Pauw, L. Benedetti, I. Nopens, and P.A. Vanrolleghem. Tornado: A versatile efficient modelling & virtual experimentation kernel for water quality systems. In Proceedings of the
iEMSs 2006 Conference, Burlington, VT, 2006.
[2] P. Reichert, Borchardt D., Henze M., Rauch W., Shanahan P.,
Somlyody L., and P.A. Vanrolleghem. River Water Quality Model
No.1. Scientific and Technical Report No.12. IWA Publishing, London, UK, 2001.
[3] M. Henze, W. Gujer, T. Mino, and M. van Loosdrecht. Activated
Sludge Models ASM1, ASM2, ASM2d, and ASM3. Scientific and
Technical Report No.9. IWA Publishing, London, UK, 2000.

For p = 0, one can proceed in a similar way. However,
in this case the process is more sensitive to the initial value of the state variables. The experiment below
therefore shows that for .f, a differing initial value had
to be chosen to ensure convergence of the algorithm.
C1.p=0.SS.Exp.xml|.Tornado:
--<Tornado>
<Exp Version="1.0" Type="SS">
<Props>
<Prop Name="Author" Value="PCFC1\fc"/>
<Prop Name="Date" Value="Fri Jun 30 15:39:20 2006"/>
<Prop Name="Desc" Value=""/>
<Prop Name="FileName" Value="C1.p=0.SS.Exp.xml|.Tornado"/>
<Prop Name="UnitSystem" Value=""/>
</Props>
<SS>
<Model Name="C1" CheckBounds="false">
<Quantities>
<Quantity Name=".f" Value="0.1"/>
</Quantities>
</Model>
<Solve>
<Root Method="Hybrid">
<Props>
<Prop Name="Tolerance" Value="1e-008"/>
</Props>
</Root>
</Solve>
</SS>
</Exp>
</Tornado>
--...
I
I
I
I
I
...

Fri
Fri
Fri
Fri
Fri

Jun
Jun
Jun
Jun
Jun

30
30
30
30
30

15:59:44
15:59:44
15:59:44
15:59:44
15:59:44

2006
2006
2006
2006
2006

[4] J.B. Copp, editor. The COST simulation benchmark. European Commission, 2002.
[5] H. Vanhooren, J. Meirlaen, Y. Amerlinck, F. Claeys, H. Vangheluwe,
and P.A. Vanrolleghem. WEST: modelling biological wastewater
treatment. Journal of Hydroinformatics, 5(1):2750, 2003.
[6] P. Fritzson. Principles of Object-Oriented Modeling and Simulation
with Modelica 2.1. Wiley-IEEE Press, February 2004.
[7] H. Vangheluwe, F. Claeys, S. Kops, F. Coen, and G.C. Vansteenkiste.
A modelling simulation environment for wastewater treatment plant
design. In Proceedings of the 1996 European Simulation Symposium,
Genoa, Italy, October 24-26 1996.
[8] F.H.A Claeys, P.A. Vanrolleghem, and P. Fritzson. A generalized
framework for abstraction and dynamic loading of numerical solvers.
In Proceedings of the 2006 European Modeling and Simulation Symposium, Barcelona, Spain, 2006.
[9] F. Claeys, M. Chtepen, L. Benedetti, B. Dhoedt, and P.A. Vanrolleghem. Distributed virtual experiments in water quality management. Water Science and Technology, 53(1):297305, 2006.
[10] L. Benedetti, D. Bixio, F. Claeys, and P.A. Vanrolleghem. A modelbased methodology for benefit/cost/risk analysis of wastewater systems. In Proceedings of the iEMSs 2006 Conference, Burlington,
VT, 2006.

Final variable values:
.f = 0
.m = 0
.r = -2.47032822920623e-323
Total execution time: 0 seconds

6 Conclusions and Future Work
Through the development of the mof2t compiler, Tornados powerful complex virtual experimentation capabilities have become available for a subset of Modelica models. To facilitate maintenance and further integration, mof2t was implemented using the same technologies as the remainder of the Tornado framework.
The Modelica Association

202

Modelica 2006, September 4th  5th

Session 2d

Session 2d
Mechanical Systems and Applications 2

The Modelica Association

203

Modelica 2006, September 4th  5th

Session 2d

The Modelica Association

204

Modelica 2006, September 4th  5th

Leaf Spring Modeling

Leaf spring modeling
Niklas Philipson
Modelon AB
Ideon Science Park SE-22370 Lund, Sweden
niklas.philipson@modelon.se

Abstract
Although leaf springs are one of the oldest suspension
components they are still frequently used, especially
in commercial vehicles. Being able to capture the leaf
spring characteristics is of significant importance for
vehicle handling dynamics studies. The conventional
way to model leaf springs is to divide the spring into
several rigid links connected to each other via rotational stiffnesses. This can easily be done with the
Modelica Standard Library, but it results in hard-touse models with long simulation times. The models in
this paper are designed as generalized force elements
where the position, velocity and orientation of the axle
mounting gives the reaction forces in the chassis attachment positions.
Keywords: Leaf spring; Vehicle dynamics; Commercial vehicle suspensions

 The effective length of the leaf spring varies with
deflection causing a varying spring rate. The
models in this paper require large deflections
for the effect to be seen, but this effect can be
higher for other shapes and mounting types of the
spring [3].
The basic idea for the model is to use five massless
links connected with rotational elasticities with the
axle mounted at the center of the middle link. A massless approximation is reasonable since the masses involved in rigid axles, wheels and the body of the vehicle are considerably higher than the mass of the leaf
spring. The implemented leaf spring can easily be extended with masses connected to the frames at the leaf
springs three mounting positions. The shape of the

1 Introduction
The commercial VehicleDynamics Library [1] is currently undergoing expansions to suite heavy vehicles
(figure 1), requiring models of new components such
as leaf springs. This paper covers one technique to
generate a leaf spring that has good simulation performance and still captures the following characteristics.
 The axle attachment position will deflect in an arc Figure 1: Tractor with leaf spring suspension in a
shape in the longitudinal-vertical plane under ver- shaker rig
tical loading conditions [3].
leaf spring will be determined by the rotations between
 Leaf spring suspension designs have two anti roll each link, except for the roll angles. These angles are
bar effects. The springs are stiff in roll (twist) left out of the equations of motion since they have very
which counteracts the vehicles roll motion if the little impact on the leaf springs shape. The roll resisspring is mounted to a rigid axle as in figures 8 tance is handled as a rotational stiffness added to the
and 10. If the axle is mounted asymmetrically, torque equilibrium equations instead.
that is not centered on the middle of the spring,
the axle will twist as the vehicle rolls. This will
resist vehicle roll as well [4].

The Modelica Association

205

Modelica 2006, September 4th  5th

N. Philipson

2 Reference MultiBody model

generalized coordinates, giving

i
The model used as a basis for comparison is designed
1
R =   di  q2i
(3)
with components from the Multi-body package. The
i=1 2
model consists of six rigid links connected by rotational stiffnesses that allow the center position to de- where qi and di denotes each generalized coordinate
flect in a plane. This design forms a planar loop and is and the corresponding damping coefficient.
only useful for vertical plane comparison.
Figure 2 illustrates a primitive suspension model
assembled from two multi-body leaf springs. A translational joint is used to handle the distance variations
in length between the mounting positions against the
leaf springs. A spring is applied to the translational
joint to control the lateral motion of the axle. The simulation time increases significantly with a stiffer translational spring. A more realistic model can be assembled by adding revolute joint for the lateral and roll
motion as well, but the simulation time for just one
Figure 3: Definition of generalized coordinates and
planar leaf spring is already long.
geometry properties.

Figure 4: Parameters for stiffness and damping.

Figure 2: Multi body rigid axle suspension

The potential energy stored in the spring is given
by

3 Equations of motion

1
1
1
cP1x w2P1x + cP1y w2P1y + cP1z w2P13
2
2
2
1
1
1
2
2
+ cv1 p2y + cv2 p2y + cv3 p32y
2
2
2
1
1
1
+ cv4 p42y + cl1 p12z + cl2 p22z
2
2
2
1
1
1
2
2
+ cl3 p3z + cl4 p1z + cP2l w2P2l
2
2
2
1
+ cP2r w2P2r
2

U=
Lagranges method, equation (1), is used to derive
the equations of motion resolved in the generalized
coordinates (p1y ...p4y , p1z ...p4z ) as illustrated in figure 3. Together with the stiffnesses indicated in figure 4, these form the expressions for the potential energy U in equation (2).
dL L L R

+
= Fqi
dt q q q

(1)

(4)

(2) where wP1x,y,z and cP1x,y,z are the displacements and
stiffnesses of the front eye bushing. wP2r,l denote the
In the sequel, it is assumed that the spring is massless lateral and radial displacement of the shackle with
giving T = 0. Viscous damping is applied over the cP2r,l as the corresponding stiffnesses.
L = T U

The Modelica Association

206

Modelica 2006, September 4th  5th

Leaf Spring Modeling

A non linear bushing description including a linear and
and a cubic stiffness gives the forces
Z w

F=
0

k1  w2 + k2 dw
| {z }

(5)


cos(pXy )  sin(pXy ) 0
Tz =  sin(pXy ) cos(pXy ) 0
0
0
1

(10)

c

and the potential energy
Z w

E=

F dw

(6)

0

which can be used in equation (2) instead of the linear model. The forces will in this case depend on

Figure 5: Force deflection diagram for front bushing
c(p1y,p2y,p1z,p2z) and w(p1y,p2y,p1z,p2z) for the front bushing. This results in a force deflection diagram for the
front bushing seen in figure 5.
The displacements for the front eye bushing and
the shackle are given by
wP1 = rrel1  (a1 + Ty1  Tz1  a2
+ Ry1  Rz1  Ty2  Tz2  a3 )

(7)

and
wP2 = rrel2  (a4 + Ty3  Tz3  a5
+ Ty3  Tz3  Ty4  Tz4  a6 )

(8)

respectively. Since the leaf spring is assumed to be
rigidly mounted to the axle, it is convenient to resolve
the equations for motion and force balance in the axle
frame. The vectors rrel1 and rrel2 are expressed in the
axle frames coordinate system. The transformation
matrices used to describe the end positions depending
on the generalized coordinates used in equation (7) and
(8) are given by


cos(pXy ) 0 sin(pXy )

0
1
0
Ty = 
(9)
 sin(pXy ) 0 cos(pXy )
The Modelica Association



where X represents the respective generalized coordinate. L from equation (2) is now completely described
with the eight generalized coordinates and the stiffness
parameters. When solving equation (1) with respect
to the generalized coordinates, two sets of non-linear
equations appear. Since these sets do not depend on
each other but only are a function of the axles position, they can be used separately if there is a need to
model half a leaf spring in conjunction with, for instance, an air spring.
The complexity of the equation system increases
rapidly with added degrees of freedom. If, for instance, roll stiffness is added to the leaf spring in
the same way as the other elasticities, it will expand
the equation systems from two systems with four unknowns to two systems with six unknowns. Each expression in the equation systems will also expand since
equations 7 and 8 must be modified with additional
transformation matrices for the roll angles.
Instead of adding the roll degree of freedom, the
roll torque is added externally as described in the next
section by terms in equation 17 and 18. This approach
is considered valid since the roll angles are small under normal operation conditions and the spring is relatively stiff in roll compared to the bushings.
Five links seem to be a reasonable compromise
that achieve a fast simulated model but still captures
the essential spring characteristics, this discretization
is also used in [2]. Possibly, a larger number of links
could be used if the equations of motion were to be
linearized. This might cause problems with the initial curvature which requires large angles between the
links.

4

Force generation

The displacements and the displacements derivative
together with the stiffness and damping coefficients
give the forces in the mounting positions to the chassis.
The forces in the chassis mounts are given by equation
(11) and (14),

207

fP1 = CP1  wP1 + w P1  dP1  f0P1
fP2r = cP2r  (wP2r  sP0) + wP2r  dP2r  f0P2z
fP2l = cP2l  wP2l + wP2l  dP2l

(11)
(12)
(13)

Modelica 2006, September 4th  5th

N. Philipson

fP2 = fP2r  nP2r + fP2l  nP2l

(14)

pr  cr  nx = tP1 .

(17)

rP3 = (r1x , r1z )

(25)

as the resulting torque. The force is calculated in the
lower shackle mount and must be transformed as

rP4 = (r2z , r2z )

(26)

The transformation matrix T in which the planar
positions are resolved is given by the base vectors
where C is a diagonal (3x3) matrix with the transla(nx, ny).
tory stiffnesses for the front eye bushing. The dampnx
 = r0CS  r0PS
(19)
ing of the front bushing is currently set as one value
ny
 = (r0PS  r0BS )  (r0CS  r0BS )
(20)
for all directions. nP2l,r denote unit vectors in the radial and lateral directions of the shackle. The length Equation (20) is unsolvable when the vectors are parof the shackle used for describing the shackles radial allel. This is taken care of by an assertion which endisplacement in equation (12) is named s0P.
courages the user to enter ny manually.
The force and torque equilibria are given by
 =T (r0PS  r0CS )
r1
(21)



0 = fP4 + fP1 + fP2
(15)
 =T (r0BS  r0CS )
r2
(22)
and
The vectors (r1, r2) resolved in T have y-values equal


0 = tP4 + tP1 + tP3 + rrel1  fP1 + rrel2  fP3 (16) to zero, and can thus be used to extract the positions
for the four hard points used in the primitive model
respectively. The roll stiffness is modeled as a rota- according to equations (23) though (26).
tional spring and added to the torque equilibrium. The
roll angle is the only variable that has an impact on the
rP1
 = 0
(23)
torque acting on the front bushings. This gives
rP2 = rP3 + s0P  (sin(p0P ), cos(p0P ))
(24)

The leaf springs curvature is defined as 1/R where
R is the radius of the leaf springs shape. The impletP2 = fP3  nP2  s0P + pr  cr nx
(18) mented models have a curvature that depends on the
hard points for the three mounting positions. There is
.pr is the springs roll angle with the corresponding roone curvature for the rear part generated from the axle
tational stiffness cr . The unit vector in the x direction
and the lower shackle mounts position and one for the
of the axle frames coordinate system is denoted nx .
front part generated in the same way as for the rear.

5 Implementation
The primitive model of the leaf spring requires geometry positions in a two dimensional plane. For the
model to be useful, a wrapper is needed to translate
the initial three dimensional positions to parameters
for the leaf spring. This is done according to equation
22 though 29. The location of the primitive models

Figure 7: Pretension forces
To enable an easy way to determine the shape of
the leaf spring and the ride height of the vehicle at the
design configuration it is necessary to specify a pretension value corresponding to the load when the vehicle
is at rest. The forces from pretension are given by
Figure 6: Leaf spring primitive and wrapped model
hard points are illustrated in figure 6.
The Modelica Association

208

f0P1x + f0P3x = 0

(27)

f0P1z  f0 + f0P3z = 0

(28)

Modelica 2006, September 4th  5th

Leaf Spring Modeling

f0P3z  rP3P1x  f0P3x  rP3P1z  f0  rP4P1x = 0
r0P3P2z
f0P3z = f0P3  
|r0P3P2 |
r0P3P2x
f0P3x = f0P3  
|r0P3P2 |

(29)
(30)
(31)

and indicated in figure 7. These forces are calculated
initially and added as static values in equation (11) and
(12).

Figure 8: Semi trailer boogie suspension
Figure 10: Diagram view of leaf spring axle carriage

6

Parametrization

The parameters needed for the leaf spring consists of
positions, stiffnesses, dampings, and animation properties.

Figure 9: Leaf spring and double wishbone suspension
The implemented leaf spring models can be used
in numerous designs, here presented in a semi trailer
boogie suspension, figure 8, and in a double wishbone
design, figure9. One of the axles in the semi trailer
suspension is assembled as shown in figure 10. Figure 9 illustrates another leaf spring model without a
shackle mounted between two wishbones and with the
center attachment mounted to the chassis. This model
is based on the same technique as the standard leaf
spring model.
Figure 11: Elasticity parameters
The Modelica Association

209

Modelica 2006, September 4th  5th

N. Philipson

Figure 11 displays the elasticity parameters for the
primitive model. The default value for the internal
rotational stiffnesses are calculated from the vertical
and lateral stiffness under the assumption that the leaf
spring will deflect in the shape of an arc. The internal
rotational stiffnesses can be set manually to enable the
user to customize the deflection profile.
The parametrization can easily be changed to suite
different specific types of leaf springs in terms of shape
and asymmetric stiffness.

7 Validation and results

multi-body model. The vertical plane dynamics for the
different models are very similar to each other as long
as the excitation does not consist of high frequency
components as in figure 14.
The fact that the standard model has both stiffness and damping in the mount positions makes it a
bit complicated to compare these results, but without fine tuning of the stiffness and damping they perform as shown in figure 13.The differences can easily
be related to the bushings in the mount positions and
the massless approximation used in the standard leaf
spring.

Figure 12: Leaf spring test rig
The validation of the standard leaf spring has been
carried out by comparing the model to a reference
multi-body model described in section 2. A test rig,
figure 12, has been used to generate the dynamic and
kinematic comparison. As seen in figure 13 the verti-

Figure 13: Vertical plane kinematics comparison

Figure 14: Vertical plane dynamics

Figure 15: Cpu time used for simulation of the different suspension models

cal plane kinematics of the leaf spring modeled with
A suspension assembled as in figure 10 simulates
rigid elements are virtually the same as for the model approximately 18 times faster then the reference susdescribed by Lagranges equation. Both models are pension, as shown in figure 15.
damped via viscous damping over each generalized
A comparison of the kinematic and dynamic becoordinate and corresponding revolute joint for the havior of two multi body leaf springs with five versus
The Modelica Association

210

Modelica 2006, September 4th  5th

Leaf Spring Modeling

is superior to the multi-body reference model with respect to simulation time and it is much easier to parameterize the geometry positions and to implement
it in suspension designs. The model is equipped to
deal with the specific characteristics of a leaf spring.
It is possible to add forces through the same equations
as the pretension but varying over time. This enables
a user to add additional force elements as damping
via hysteresis or air springs. The standard leaf spring
model fulfills all the requirements specified in section
1.

References
Figure 16: Kinematic comparsion between nine and
five link leaf spring

[1] J. Andreasson, M. Gavert. The VehicleDynamics Library  Overview and Applications
Modelon., Homepage: http://www.modelon.se/.
In Proceedings of Modelica2006, Vienna,
Sep. 2006.
[2] Georg Rill, Norbert Kessing, Olav Lange and Jan
Meier: Leaf Spring Modelling for Real Time Applications In the 18th IAVSD-Symposium in Atsugi, Japan 2003, 2003.
[3] SAE: Spring Design Manual ISBN: 1-56091680-X, 1996.
[4] A grimm, C. Winkler and ,R. Sweet Mechanics of
Heavy Duty Truck Systems. University of Michigan transportation research institute, UK , 2004.

Figure 17: Dynamic comparison between nine and five
link leaf spring
nine links is illustrated in figure 16 and 17. The differences between the models are small which implies
that the five link leaf spring meets the requirements for
vehicle handling simulations.
The shackle has big influence on the leaf springs
kinematics. The shape of the leaf spring in the comparison results in larger deflection in bounce than in
rebound, figure 16. This because the shackles lower
mount towards the spring always moves upwards with
deflection. Other geometries would give different results.

8 Summary
The leaf spring model is essential for heavy vehicle
handling dynamics simulations. The proposed model
The Modelica Association

211

Modelica 2006, September 4th  5th

N. Philipson

The Modelica Association

212

Modelica 2006, September 4th  5th

Multibody Systems Dynamics: Modelica Implementation and Bond Graph Representation

Multibody Systems Dynamics: Modelica Implementation and
Bond Graph Representation
Ivan I. Kosenko1 , Maria S. Loginova2 , Yaroslav P. Obraztsov2 , Mayya S. Stavrovskaya1
1 Moscow State University of Service, Department of Engineering Mechanics
Glavnaya str. 99, Cherkizovo-1, Moscow reg., 141221, Russia
2 Moscow State Academy of Instrument Making and Computer Science
Department of Applied Mathematics, Stromynka str. 20, Moscow, 107646, Russia

Abstract
Using an example of the snakeboard, a vehicle with
four wheels and nonholonomic constraints, the process
of construction and verification for the sparse dynamical models of the multibody systems is analyzed. Two
approaches for the formal representation of the models: object-oriented, and bond graph based are considered. Energy based similarities between these approaches are analyzed.
A detailed description of the bond graph representation for the most general type of constraint is presented. It turned out the resulting total bond graph
model of the multibody system dynamics always has
exactly a canonical junction structure. This representation has a tight correspondence with our recent object-oriented implementation of the mechanical constraint architecture. As an example Modelica
implementation of the joint classes family is investigated. Finally these classes are applied to construct
the snakeboard dynamic model.
Keywords: vechicle; nonholonomic; disc; wheelset;
snakeboard; object-oriented modeling; bondgraph;
canonical junction structure; joint; servoconstraint

1 Introduction
When developing a computer model of the multibody
system (MBS) dynamics it is interesting to have a unified technology to construct the models in an efficient
way. It turns out Modelica language provides a tools
to resolve such a problem successively step by step
using its natural approaches. One of them is connected tightly with the so-called multiport representation of the models initially based on the bond graph
use. These latter in turn based on the idea of energy
interaction, and substantially on energy conservation
The Modelica Association

for physically interconnected subsystems of any engineering type.
Moreover, Modelica introduces the notions similar to
ones of the bond graph theory, but in a way more natural for the usual engineering approaches with forces,
interfaces, parameters, equations etc. Consider in the
sequel a technology to construct a model of MBS dynamics with constraints of any specific type in a unified way. Note that the unilateral constraints can also
be included in the further consideration process.

2 Constraint representation via bond
graphs
Previously, when considering a unified model of the
constraint, or, in a more general way, any physical interaction between two rigid/deformable bodies we defined [1, 2] two classes of the kinematic and the effort
ports. These ones are the kinematic and wrench connectors. It turned out the connections of such types
make it possible to construct a model of the bodies interactions based on the causality physically motivated.
Namely, the constraint object imports the kinematic
information accepting it from the objects of interacting bodies and reciprocally exports it in the opposite
direction. Thus the constraint computes an efforts
the bodies interact by.
On the other hand geometric formalisms to represent the MBS dynamics are known [3] which operates with the similar information objects: twists and
wrenches. In our approach twist is defined by the
KinematicPort class, and wrench obviously corresponds to our WrenchPort class. The representation under consideration is tightly connected with the
power based approach to modeling, so-called bond
graphs [4].
Indeed, let the rigid body kinematics be defined by the

213

Modelica 2006, September 4th  5th

I.I. Kosenko, M.S. Loginova, YA.P. Obraztsov, M.S. Stavrovskaya

twist (v, w ), where v is the mass center velocity, and w resentation of the constraint in any MBS may be deis the body angular velocity. Further let all the forces picted as it shown in Figure 2.
acting upon the body be reduced to the wrench (F, M)
with the total force F and the total torque M. Thus
the total power of all the forces acting on the body is
computed by the known formula
w, M)
W = (v, F) + (w
using to represent a multibond in the bond graphs
simulating the MBS dynamics. We have in such the
case an evident canonical duality between twists and
wrenches.
Sometimes wrenches are selected as flow variables. In
other cases twists play this role. For instance similarities between electricity and mechanics cause the parallelism for electric current and forces/torques in one dimensional powertrains of mechanisms. In this case we
can set a correspondence between the Kirchhoff law
for currents and the dAlembert principle for external
forces and forces of inertia acting upon the body.
In our opinion it may be interesting enough to apply an
approach dual to the first one mentioned above. Such
an approach is more natural in traditional classical mechanics and assumes twist for the flow variable in the
multibond. In the further course we present an illustration for this approach and demonstrate its convenience to construct the mechanical constraints of different types. Moreover, object-oriented implementation may be interpreted in both above dual approaches
in a symmetric ways.
Let us trace now the similarities between the bond
graphs and our MBS models. Evidently the pair of
classes KinematicPort/WrenchPort plays a role
of the multiport notion, and corresponding pairs of
connections in Figure 1 stand for the notion of a bond.

Figure 1: Architecture of Constraint
Furthermore, in this way we can associate an object of the RigidBody class with 1-junction, while
0-junction is associated with the object of the class
Constraint. The relevant general bond graph repThe Modelica Association

Figure 2: Architecture of Constraint: Bond Graph
Representation
All multibonds here consist of the twist (v, w ) signals representing the flow component, and the wrench
(F, M) signals as an effort. Causality of an inertance elements arranges according to the Newton
Euler system of ODEs. Left and right transformers are to shift the twist from the mass center to the
contact point according to the known Euler formula:
w, r], w ), where the vector r begins at
(v, w ) 7 (v + [w
the corresponding center of mass and ends at the contact point. Reciprocally the wrenches shift to the body
mass center from point of the contact in a following
way: (F, M) 7 (F, M + [r, F]). As one can see easily
the transformers conserve the power.
Central transformer is responsible for the transfer to
orthonormal base at the contact point with the common normal unit vector and two others being tangent
ones to both contacting bodies surfaces supposed regular enough. For definity we interpret here the case of
usual contact interconnection between the bodies by
their outer/inner surfaces. If the inertial coordinates of
these vectors compose columns of the orthogonal rotational matrix Q then shifting from bottom to top across
the transformer in Figure 2 we will have for the flow
w). Likewise when shifting
signals: (v, w ) 7 (Qv, Qw
in a reverse direction we have a transformation of the
efforts: (F, M) 7 (Q1 F, Q1 M) also conserving the
power. Organization of the 0-junction depicted in Figure 2 provides a possibility to compute exactly the relative velocities at the constraint contact point.
Note that it is a usual practice to attach the inertance element to 1-junction, in particular because of its causality nature, see for example [5, 6]. Figure 2 in some
degree can remind us an element of the lumped model
for the flexible beam dynamics.
Causality for some multibonds inside the constraint
object is defined individually for each particular scalar

214

Modelica 2006, September 4th  5th

Multibody Systems Dynamics: Modelica Implementation and Bond Graph Representation

bond [7] depending on the type of the constraint and
is assigned finally after the whole MBS model compilation. For instance, if the constraint is of the slipping type at a contact then supposing decompositions
of the relative velocities and contact forces v = vn +vt ,
F = Fn + Ft we have the following flow constraint, element FC, vn = 0 representing one scalar kinematic
equation for the normal relative velocity, and the effort
constraint, element EC, Ft = 0, M = 0 representing
two scalar equations for the tangent contact force plus
three scalar equations for the contact torque. Nonzero
tangent force at the contact may arise due to the resistive element, see the bottom right multibond. If
we will continue to build the bond graph model for
the whole MBS in a proposed way then finally we
can arrive exactly to the so-called canonical junction
structure [7] useful for the formal procedures of the
bond graph optimal causality assignment. For this we
have to add an intermediate 0-junctions for elements
attached to 1-junction in the constraint component C,
see Figure 2.
Leaving some multibonds without the causality assignment and trusting this work to compiler we apply
a so-called acausal modeling [8]. On the other hand
if we will act in a manner close to the real cases of
constraints with the flexibility then instead of the constraint elements FC/EC, we have to use an element
of the compliance with the causality uniquely determined, see Figure 3.

Figure 3: Bond Graph of Constraint with Compliance
Further we analyze one example of the constraint frequently occurring in engineering applications: we consider an object classification of the joint constraint.

3 Implementation of the joint constraint
For simplicity and clearness we will apply the component library to simulate the dynamics of MBSs with biThe Modelica Association

lateral constraints [1]. Application of the components
for the unilateral constraints [2] doesnt change anything in principle. The only difference is that dynamics of the moving bodies becomes more complicated.
For example in the latter case a vehicle under simulation get an ability to bounce over the uneven surface it
rolls on. In addition, its wheels can slip while moving.
Thus in frame of the current paper we suppose that
nonholonomic constraints implemented exactly, without any slip or separation with respect to (w. r. t.) the
surface.
Remind that according to our technology of the constraint construction [1] two connected bodies are identified by convention with the letters A and B fixed for
each body. All kinematic and dynamic variables and
parameters concerned one of the bodies are equipped
with the corresponding letter as a subscript.
Class Joint plays a key role in the future model of a
vehicle we will build. Joint is a model derived from
the base class Constraint. Remind [2] that in order
to make a complete definition of the constraint object
behavior for the case of rigid bodies one has to compose a system of twelve algebraic equations w. r. t. to
twelve coordinates of vectors FA , MA , FB , MB constituting the wrenches acting upon the connected bodies.
First six equations always present in the base model
Constraint due to Newtons third law. For definity suppose these six equations are used to express six
components of FB , MB depending on FA , MA . Thus
six components of FA , MA remain as unknowns. To
determine them each constraint of rigid bodies need in
six additional independent algebraic equations. These
equations can include components of force and torque
directly, or be derived from the kinematic relations
corresponding to specific type of the constraint.
In the case of the joint constraint being investigated
here let us represent the motion of the body B as a
complex one consisting of the body A convective motion w. r. t. an inertial frame of reference which is
similar to the Modelica Standard MultiBody Library
model World, and a relative motion w. r. t. the body
A. An absolute motion is one of the body B w. r. t.
inertial system.
Define the joint constraint with help of the following
parameters: (a) a unit vector nA defining in the body A
an axis of the joint; (b) a vector rA fixed in the body
A and defining a point which constantly stays on the
axis of the joint; (c) a vector rB fixed in the body B
and defining a point which also constantly stays on the
axis of the joint. The main task of the base joint class
is to keep always in coincidence the geometric axes

215

Modelica 2006, September 4th  5th

I.I. Kosenko, M.S. Loginova, YA.P. Obraztsov, M.S. Stavrovskaya

where w r , e r are the relative angular velocities and acfixed in each of the bodies.
First of all one has to compute the radii vectors of the celerations.
The Modelica code of the class Joint reads
points fixed in the bodies w. r. t. inertial system
Ra = rOa + Ta ra (a = A, B),
where [2] rOa is the position of the a-th body center
of mass, Ta is its current matrix of rotation. The joint
axis has the following components
nAi = TA nA
in the inertial frame of reference. According to the
equation for relative velocity for the marked point of
the body B defined by the position RB we have
vBa = vBe + vBr ,
wB , TB rB ] ,
vBa = vOB + [w
wA , RB  rOA ] ,
vBe = vOA + [w

(1)

where vBa , vBe , vBr are an absolute, convective, and
relative velocities of the body B marked point, w A , w B
are the bodies angular velocities.
Furthermore, according to the computational experience of the dynamical problems simulation the precompiler work is more regular if the kinematic equations are expressed directly through accelerations. Indeed, otherwise the compiler tries to perform the formal differentiation of equations for the velocities when
reducing an index of the total DAE system. Frequently
this leads to the problems either in time of translation
or when running the model.
In the first case usually diagnostics of the compiler essentially helps the developer. In the second case the
model has an unpredictable behavior, and only manual preliminary reduction regularizes the simulation
process. Thus we differentiate equations (1) and obtain an equations for the relative linear acceleration in
the form
wB , [w
wB , TB rB ]] ,
aBa = aOB + [eeB , TB rB ] + [w
wA , [w
wA , RB  rOA ]] ,
aBe = aOA + [eeA , RB  rOA ] + [w
wA , vBr ] + aBr ,
aBa = aBe + 2 [w
aBr = nAi ,
(2)
where aBa , aBe , aBr are an absolute, convective, and
relative accelerations of the body B marked point, e A ,
e B are the bodies angular accelerations.
We also need in an analytic representation of the conditions that the only projections of the bodies angular
velocities and accelerations having a differences are
ones onto the joint axis. Corresponding equations have
a form
wB = wA + wr ,
wA , w r ] + e r ,
e B = e A + [w
(3)
e r = lnAi ,
The Modelica Association

partial model Joint
extends Constraint;
parameter Real[3] nA;
parameter SI.Position[3] rA;
parameter SI.Position[3] rB;
SI.Position[3] RA;
SI.Position[3] RB;
SI.Velocity[3] vBa;
SI.Velocity[3] vBe;
SI.Velocity[3] vBr;
SI.Acceleration[3] aBa;
SI.Acceleration[3] aBe;
SI.Acceleration[3] aBr;
SI.AngularVelocity[3] omegar;
SI.AngularAcceleration[3] epsilonr;
Real[3] nAi;
SI.Force F; // Force along axis
SI.Torque M; // Torque about axis
SI.Acceleration mu;
SI.AngularAcceleration lambda;
equation
RA = InPortA.r + InPortA.T*rA;
RB = InPortB.r + InPortB.T*rB;
nAi = InPortA.T*nA;
vBa = InPortB.v +
cross(InPortB.omega,
InPortB.T*rB);
vBe = InPortA.v +
cross(InPortA.omega,
RB - InPortA.r);
vBa = vBe + vBr;
aBa = InPortB.a +
cross(InPortB.epsilon,
InPortB.T*rB) +
cross(InPortB.omega,
cross(InPortB.omega,
InPortB.T*rB));
aBe = InPortA.a +
cross(InPortA.epsilon,
RB - InPortA.r) +
cross(InPortA.omega,
cross(InPortA.omega,
RB - InPortA.r));
aBa = aBe + aBr +
2*cross(InPortA.omega, vBr);
aBr = mu*nAi;
omegar = InPortB.omega InPortA.omega;
epsilonr = InPortB.epsilon InPortA.epsilon cross(InPortA.omega, omegar);
epsilonr = lambda*nAi;
F = OutPortA.F*nAi;
M = OutPortA.M*nAi;
OutPortA.P = RA;

216

Modelica 2006, September 4th  5th

Multibody Systems Dynamics: Modelica Implementation and Bond Graph Representation
OutPortB.P = RA;
end Joint;

Besides the kinematic scalars , l we will need in their
reciprocal values F = (FA , nAi ), M = (MA , nAi ) correspondingly. Note that the class described above is a
partial one and can be used to produce any imaginable
model of the joint type constraint. To obtain a complete description of the joint model one has to add to
the behavioral section exactly two equations. One of
them is to define one of the values , F (translatory
case). Other equation is intended to compute one of
the values l, M (rotary case).
Regarding the general scheme depicted in Figure 2 we
can conclude that the equations (1), (2), (3) together
implement implicitly the constraint transformer to the
joint local coordinate system and four scalar flow constraints forbidding relative translatory and rotary motions in the direction orthogonal to the joint axis. For
derived classes only two free scalar bonds remain.
Here we encounter the known complementarity rules
once more in a way similar to one described in [2]. In
our context the variables in the pairs (, F), (l, M) are
mutually complement, where one of , l is to be utilized for the flow constraint and one of F, M is used to
compose the effort constraint. All the variables mentioned complete the set of constraints for the remaining yet unused joint axis creating thus two final scalar
constraint elements in the bond graph of Figure 2.
Namely, the equations (2) implementing the Coriolis
theorem for accelerations simultaneously implement,
in an implicit manner, two scalar flow constraints, FCelements, from the bottom left corner of the multibondgraph model in Figure 2. These flow constraints
due to compiler restrictions constructed using accelerations instead of the velocities being used in a classic
bond graph approach. The constraints have an obvious kinematic sense: they prevent the relative motion
of the body B marked point in two directions normal
to the joint axis fixed in the body A.
In addition, the equations (3) implement two other
scalar flow constraints, this time for the rotary motion. These constraints forbid the relative rotation of
the body B w. r. t. body A about two axes each normal to the joint axis mentioned above which is rigidly
connected with the body A.
Note, that the construct of equations (2) and (3) is such
that they allow the body B relative motion along and
about the joint axis of the body A thus implementing the kinematic pair with two DOFs. Returning to
Figure 2 of the general constraint multi-bondgraph we
can conclude that the vertical multibond attached to 0The Modelica Association

junction implements flow variables corresponding to
the relative body B motion w. r. t. body A in inertial coordinates. Such a description supposes an existence of the special coordinates reference frame connected with the body A at its joint constraint marked
point. The transformation to these coordinates is implemented exactly via corresponding transformer, central in the triangle block C. The transformer itself nests
in formulae of equations (2) and (3).
Consider several examples of the classes derived from
the Joint model for the several particular types of
joints. The model FixedIdealJoint is defined by
the equations
 = 0, M = 0
and prevents the relative motion along the joint axis
but allows free rotation about it. It is exactly a revolute
joint without any control for the rotary motion. The
model FreeIdealJoint is defined by the equations
F = 0, M = 0
permitting free translation along and free rotation
about the joint axis. Class SpringIdealJoint described by the equations
F = cn + d n, M = 0, n = 
with an initial data n (t0 ) = 0, n (t0 ) = 0 for the relative
translatory position n provides a viscoelastic compliance with the stiffness c and damping d. The rotary
motion remains free. This model is useful to simulate
almost rigid constraints to avoid the potential problems
with so-called statically undefinable systems of forces
acting upon the ideal rigid bodies.
The model FixedControlledJoint with the behavior defined by the equations
 = 0, M = f (t, j, j) , j = l

(4)

provides the rotating torque as a control effort with
the prescribed control function f (t, j, j). Initial data
j (t0 ) = j0 , j (t0 ) = j0 are prepared according to the
initial data concerning the joint. From the bond graph
viewpoint the second equation in (4) can be implemented as a combination of the source effort, compliance, and resistance elements. This type of joint corresponds to the Revolute joint constraint of Modelica Standard Library from the ModelicaAdditions
package. Such a joint can be driven by the electromotor.
The model FreeSlideJoint defined by the equations
F = 0, l = 0

217

Modelica 2006, September 4th  5th

I.I. Kosenko, M.S. Loginova, YA.P. Obraztsov, M.S. Stavrovskaya

provides free, without any resistance, relative sliding
along the joint axis without any rotation about it. As
one can see this is a prismatic type of joint.
We can reformulate the FixedControlledJoint
model creating the model FixedServoJoint in a
following useful way
 = 0, l = f (t, j, j) , j = l
thus composing a kinematic restricting constraint, socalled servoconstraint. The function f (t, j, j) supposed as a prescribed one. Initial data for the angle
j of the relative rotation are prepared in the same way
as for (4). It is clear one can create a lot of other different combinations of equations to construct the joint
constraints needed in engineering applications.
The derived joint classes described here are to close
the system of kinematic equations (2) and (3) completing them mainly by two scalar additional equations,
each playing a role of an either FC-element, like  = 0,
or EC-element, like F = 0. Any time to be able to
construct a consistent system of equations for the total
model we have to follow the guidelines of the complementarity rules.
These latter correspond to the notions of the bond
graph theory in a natural way. Indeed, the theory of
bond graphs is based on the energy interactions. Every
our multibond being an energy/power conductor reflects complementarity by its twist/wrench duality. To
close the total DAE system for the model under development we have to close or rather to seal each free
scalar bond in EC/FC-element of the block C in Figure 2 by the corresponding one scalar equation for flow
or effort variable. Thus here we outline the main rule
to compose equations for the models of constraints for
MBS of any type in a consistent way when applying
the object-oriented approach. In the further course we
present an example for the systematic application of
the rules mentioned.

4 Example of the snakeboard
The snakeboard [9], see Figure 4, represents a four
wheeled vehicle moving in field of gravity on a horizontal surface due to the servocontrol of a relative rotation of wheelsets and a flywheel located at the midpoint of the coupler and having a vertical axis of rotation. The flywheel simulates a torso of the snakeboard
rider.
We will construct the model hierarchically step by step
verifying and integrating the parts into an assembly
units. Ideal mechanical system of the snakeboard has
The Modelica Association

Figure 4: The Snakeboard
three degrees of freedom (DOF). But we will add new
DOFs on some stages of modeling either to make the
model more physically oriented or to apply any procedures of regularization.

4.1 Dynamics of the rolling disc
This problem is a classic one of dynamics [10] and has
a visual representation depicted in Figure 5

Figure 5: Visual Model of the Rolling Disc
Disc, the Body B, supposed an axisymmetric rigid
body which is able to roll on the another body, horizontal surface, only by the curve fixed in the Body B.
In our case this curve supposed a circle relocated in
the plane
zB = 0
(5)
of the Body B coordinate system OB xB yB zB and has
the fixed radius R, see Figure 6. In the current paper
we assume that the nonholonomic constraints are implemented in an accurate sense as bilateral constraints.
The horizontal plane, Body A, is defined by its normal
unit vector such that radius vector rP = {xP , yP , zP } of
the contact point P has to satisfy an equation of the
horizontal plane
(rP , nA ) = 0.

(6)

Further denoting the Body B current orientation matrix
by TB and by rOB its center of mass position vector we

218

Modelica 2006, September 4th  5th

Multibody Systems Dynamics: Modelica Implementation and Bond Graph Representation

The simulations showed a high degree of accordance
between the two above models of the rolling disc dynamics. Errors increase inevitably and for the vectors
w , M, g components are of the order 107 over the
time interval of the several hundreds units.

4.2 Model of the wheelset

Figure 6: Rolling Disc
obtain the system of three equations
TB r = rP  rOB

(7)

defining the dependence between the vector rP and the
vector r of the contact point position in the Body B
coordinate system.
On the other hand the vector t tangent to the circle
at the contact point can expressed in the disc coordinates as t = {yB , xB , 0} because the vectors t and
r = {xB , yB , zB } are to be orthogonal mutually and to
be situated in the disc plane permanently. In addition,
in inertial system the path vector TB t has to lie in the
horizontal plane. Then also holds the condition
(nA , TB t ) = 0.

This model plays an important role when constructing the simplest vehicle models. It is assembled using
the considered model of the rolling disc. Visual model
of the wheelset depicted in Figure 7, where the Rotate
and Flip commands were applied to symmetrize the diagram. Application of the model FixedIdealJoint
for the joints connecting the wheels and a rod of the
wheelset axis is impossible due to the uncertainty for
forces acting along this axis. If the contact points with
a floor supposed without slipping then introduction of
the compliance in the joints is a natural way to avoid
the degeneracy mentioned. Making this we add two
DOFs to the mechanical system of the wheelset. One
else additional DOF has the rod rotating independently
about its, and of the wheelset, axis. Compliances are
implemented by the model SpringIdealJoint.

(8)

The system of six equations (5), (6), (7), (8) together
compose the one w. r. t. six variables xP , yP , zP , xB , yB ,
zB and implements in a simple and effective way the
model Disc on Base derived from the class Roll[1].
Verification of the model outlined above was based on
the comparison of its simulation results with ones obtained for the corresponding classic problem defined
by the system of ODEs [10]
w, r]] + mg[r, g ],
M = [M, w ] + m [r, [w
gg = [gg, w ]
expressed w. r. t. the Body B rotating system. Here
w + m[r, [w
w, r]] is the vector of the disc angular
M = Iw
Figure 7: Visual Model of the Isolated Wheelset
momentum computed w. r. t. the contact point, I =
diag (Ixx , Iyy , Izz ) is the central principal inertia tensor To verify the wheelset model built the following sysof the disc, w is its angular velocity, r is the vector tem of DAEs was applied
already mentioned above, g is the unit vector nA but
max = X1 + X2 + Xext , may = Y1 +Y2 +Yext ,
(9)
expressed w. r. t. the Body B system such that satisfy
maz = Z + Zext ,
the relations

R
R2  2
Rg
Rg
y
x
a
=

(
j
+
j
)
,
a
=
0,
a
=
j1  j22 ,
x
1
2
y
z
xB =  q
, yB =  q
, zB = 0.
2
2L
1  g2z
1  g2z
(10)
The Modelica Association

219

Modelica 2006, September 4th  5th

I.I. Kosenko, M.S. Loginova, YA.P. Obraztsov, M.S. Stavrovskaya

(11)
Idz j2 = RX2 , Irz jr = 0,
j [Idz (j1 + j2 ) + Irz jr ] = L
2 (Y2 Y1 )  RZ + Mextx ,
L
Irz j = 2 (X1  X2 ) + Mexty ,
(12)
Lj = R (j1  j2 )
(13)
Idz j1 = RX1 ,

which is written w. r. t. moving coordinate system connected with the wheelset according to Figure 8 in an
evident way. This system of coordinates performs a
convective motion tracing the motion of the rod which
plays a role of the wheelset axis shaft.

Figure 8: Top View of the Wheelset
The DAE system consists of twelve equations w. r. t.
twelve unknowns: j1 , j2 , j, jr , ax , ay , az , X1 , X2 , Y1 ,
Y2 , Z. Let us give a more detailed explanations to these
DAEs. The subsystem of equations (9) represents the
theorem for the center of mass motion of the wheelset.
Here m = 2md + mr is the total mass of the wheelset,
md , mr are the masses of the wheel simulated by the
disc and the rod of the wheelset axis, R is the wheels
radius, L is the rod length. The variables ax , az , ay
are correspondingly the tangent, normal, and binormal
components of the masscenter acceleration.
The variables X1 , X2 , Y1 , Y2 are the projections to the x,
y axes of the contact forces acting to the wheels from
the surface. The value Z = Z1 + Z2 is used because
z-projections of the contact forces cant be computed
individually for the reason of degeneration of the problem along the z-axis. This discussed above problem
is resolved due to the compliance introduced for the
joints.
The Modelica Association

In the kinematic equations (10) all signs are adjusted
such that j1 , j2 are the angles of the wheels relative
rotation, j1 , j2 , j1 , j2 are their relative angular velocities and angular accelerations. Point C is a center of
velocities for the rigid planar convective motion of the
Ozx coordinate system.
The equations (11) represent z-projections of the Euler
dynamic equations for the discs and the rod considered
separately. We conclude from the third equation that
the rod relative angular velocity is the integral of the
motion: jr = const. Remind we consider rotations in
the joints as an ideal, without friction, ones.
First of the equations (12) is the dynamical one for
the angular momentum of the whole wheelset w. r. t.
the axis Ox. The second equation is the projection of
the same vector equation to the axis Oy. Further the
parameters Idz , Irz are the moments of inertia for the
wheel and rod w. r. t. the axis Oz, Iy = 2Idy + Iry where
Idy , Iry are the moments of inertia for the disc and shaft
w. r. t. the axis Oy. The angle j is one of the convective rotation about the Oy axis. The kinematic equation (13) is derived from a simple geometric considerations, see Figure 8.
We can add an external force Fext = {Xext ,Yext , Zext }
and rotating torque Mext = {Mextx , Mexty , Mextz } to the
right hand sides of equations (9), (11), (12). Regarding
the equations (11) one can distribute the torque Mextz
between all three bodies of the wheelset in an any desirable way.
Computational experiments show a high degree of
concordance between our physically oriented model
of the wheelset and the ideal model described above
if the parameters of stiffness c and damping d in the
joint objects of class SpringIdealJoint are large
enough. Namely, in simulations we have used the values c = 1000, d = 5000.

4.3 Model of the vehicle
Let us construct at last a complete model of the snakeboard. Its visual representation see in Figure 9, where
rotation and flipping were applied to the graphic images of the objects as it has been done for the wheelset
visual model. Similar to the wheelset case we have
here a static indeterminacy along the coupler axis if
one supposed a rigid body. To avoid this degeneration we splitted it into two equal parts and connected
them via viscoelastic joint, with an axis along the coupler, using the model SpringIdealJoint with the
stiffness and damping large enough for the longitudinal compliance of the snakeboard.

220

Modelica 2006, September 4th  5th

Multibody Systems Dynamics: Modelica Implementation and Bond Graph Representation

1. drive: ab = a f , w f = wb = wy ;
2. rotate: ab = a f , 2w f = 2wb = wy ;
3. parking: ab = a f , 3w f = 3wb = 2wy .
The simulations results showed a full coincidence of
the gait types for our regularized model and the idealized model of the paper [9]. All types of the behavior are demonstrated in Figures 10, 11, 12, where
the flywheel masscenter projections to the xz plane are
presented. In [9] for the ideal model when deriving
the DAEs of the snakeboard motion for simplicity of
the model the wheels rotary motion and the wheelsets
translatory motion werent taken into account. In such
a sense from the dynamical point of view our model is
more complete.

Figure 9: Visual Model of the Snakeboard
To perform a comparison with the known results [9] three servoconstraints were introduced to
the model. These servoconstraints imitate the control of the robot-snakeborder and are implemented by
the FixedServoJoint class which defines a relative
rotation of the bodies by the prescribed angle. To
be more precise in the class mentioned the control
is given by a law of the relative acceleration with a
proper initial values of the angle and the angular velocity.
Servoconstraints are mounted at the joints between
the coupler and the wheelsets, and between the flywheel and, for definity, the left part of the coupler. The joints mentioned correspond to the objects
LeftJoint, RightJoint, and CJoint in Figure 9.
All three servoconstraints can be described by the
equations

Figure 10: Masscenter Trajectory for Drive Gait

j f = a f sin (w f t + b f ),  jb = ab sin
 (wbt + bb ),
y = ay sin wyt + by ,
where j f , jb are the angles of the front and rear (back)
wheelsets relative to the coupler rotation correspondingly, y is the angle of the flywheel rotation w. r. t. the
coupler, to be more exact relative to its left (rear) part,
the object LBar in Figure 9, a f , ab , ay are the corresponding amplitudes of libration, w f , wb , wy are their
frequencies, and b f , bb , by are their initial phases.
According to [9] three types of the snakeboard gait
were under verification:
The Modelica Association

Figure 11: Masscenter Trajectory for Rotate Gait
If we introduce a small parameter playing a role of the
scaling multiplier for the inertia moments and masses
for the motion types neglected in [9] then if its value
is small enough, 107 for our simulations, the motions compared become practically indistinguishable,

221

Modelica 2006, September 4th  5th

I.I. Kosenko, M.S. Loginova, YA.P. Obraztsov, M.S. Stavrovskaya

Figure 12: Masscenter Trajectory for Parking Gait

Figure 14: Animation of Drive Gait

see for instance the plot of the snakeboard masscenter
x-components difference for the models under comparison, Figure 13, in the case of the Rotate gait.
Animation shot in the case of the drive type gait see
in Figure 14.

to inject into the system any amount of energy needed
to hold the desired motion. On the other hand energy
loses due to the resistance elements encapsulated in
the objects
Spring,
LeftWheels.Joint1, LeftWheels.Joint2,
RightWheels.Joint1, RightWheels.Joint2,

Figure 13: Closeness of Models

of the class SpringIdealJoint.
Thus the class FixedServoJoint implements two
scalar FC-elements from the general bond graph depicted in Figure 2 for the rotary and translatory motions, while the class SpringIdealJoint implements one C-element, ideal elastic compliance, in
combination with R-element, resistance due to viscosity, for the translatory motion plus one EC-element for
the rotary motion. Remind that all motions supposed
here as a relative ones of the body B w. r. t. body A in
each of the constraint objects considered.

A set of different laws of the snakeboard control performed by the robot-snakeborder generating the mass- 5 Conclusion
center trajectories like astroid, cycloid, eight, 3-rose,
4-rose is presented in [11]. The port-controlled Hamil- We can make now our brief list of conclusions in the
tonian representation of the simplified ideal snake- following form:
board model from [9] with its bond graph implemen A unified multi-bondgraph representation of the
tation is investigated in [12].
MBS dynamics in a sufficiently simple way with
Considering balance of energy in the total model one
the canonical junction structure is possible.
can remark here that servodrives applied between the
coupler on one side and the flywheel and wheelsets on
 The representation depicted in Figure 2 can be
the other one are implemented correspondingly in the
used as a guideline to construct the consistent sysobjects
tem of DAEs in a systematic way. In other words
CJoint, LeftJoint, RightJoint
we can say that multi-bondgraph constructs like
of the class FixedServoJoint. Such kinematic conones of Figure 2 are to be used as a regular basis
straints are known in the bond graph theory to be able
for more informal object-oriented approach.
The Modelica Association

222

Modelica 2006, September 4th  5th

Multibody Systems Dynamics: Modelica Implementation and Bond Graph Representation

 An object-oriented representation makes it possible to develop the constraints models adopted to
the specific types of the bodies interconnections
in a fast and effective manner implementing the
corresponding bond graph formalisms in a more
natural and informal way mainly by chains of inheritance for the behavior (equations) and properties thus gradually filling the complete multibondgraph description.
 An acausal modeling accelerates the modeling releasing a developer from the problem of causality assignment if s/he takes into account some requirements like complementarity rules.
 Introducing the compliance into the model may
be useful and effective preserving the principal
properties of the MBS like anholonomity etc.
Enumerate also some possible directions of the further
work:
 Development of the vehicle models more complicated then considered here.
 Development of the more complicated contact
models taking into account friction and a unilateral nature of the constraints.
 Account of the road uneven surfaces of different
types.

6 Acknowledgement

[3] Stramigioli, S., Blankenstein, G., Duindam, V.,
Bruyninckx, H., Melchiorri C., Power Port Concepts in Robotics. The GeometricalPhysical
Approach. Tutorial at 2003 IEEE International
Conference on Robotics and Automation. 
IEEE, 2003.
[4] Paynter, H. M., Analysis and Design of Engineering Systems.  The M. I. T. Press: Cambridge, Massachusetts, 1961.
[5] Cellier, F. E., Continuous System Modeling. 
SpringerVerlag: New York, 1991.
[6] Mukherjee, A., Karmakar, R., Modelling and
Simulation of Engineering Systems through
Bondgraphs.  Alpha Science International
Ltd.: 2000.
[7] Golo, G., Interconnection Structures in PortBased Modelling: Tools for Analysis and Simulation. PhD Thesis.  University of Twente: Enschede, The Netherlands, 2002.
[8] Dymola. Dynamic Modeling Laboratory. Users
Manual. Version 5.3a.  Lund: Dynasim AB,
Research Park Ideon, 2004.
[9] Lewis, A. D., Ostrowski, J. P., Murray, R. M.,
and Burdick, J. W. Nonholonomic Mechanics
and Locomotion: The Snakeboard Example //
Proceedings of the IEEE International Conference on Robotics and Automation, San Diego,
May 1994, IEEE, pp. 23912400.

The paper was prepared with partial support of Rus- [10] Borisov, A. V., Mamaev, I. S., Kilin, A. A., Dynamics of Rolling Disk // Regular and Chaotic
sian Foundation for Basic Research, projects 0508
Dynamics, 2003, Vol. 8, No. 2, pp. 201212.
65470, 050100454, SS6667.2006.1.
[11] Golubev, Yu. F., Motion Design for a RobotSnakeborder // Keldysh Institute of Applied
Mathematics, the Russian Academy of Science,
[1] Kossenko, I. I., and Stavrovskaia, M. S., How
Preprint No. 65, 2004.
One Can Simulate Dynamics of Rolling Bodies Via Dymola: Approach to Model Multibody [12] Duindam, V., Blankenstein, G., Stramigioli S.,
Port-Based Modeling and Analysis of SnakeSystem Dynamics Using Modelica // Proceedboard Locomotion // Sixteenth International
ings of the 3rd International Modelica ConferSymposium on Mathematical Theory of Netence, Linkopings universitet, Linkoping, Sweworks and Systems, Katholieke Universiteit Leuden, November 34, 2003, pp. 299309.
ven, Belgium, July 59 2004.
[2] Kossenko, I. I., Implementation of Unilateral
Multibody Dynamics on Modelica // Proceedings
of the 4th International Modelica Conference,
Hamburg University of Technology, Hamburg
Harburg, Germany, March 78, 2005, pp. 1323.

References

The Modelica Association

223

Modelica 2006, September 4th  5th

I.I. Kosenko, M.S. Loginova, YA.P. Obraztsov, M.S. Stavrovskaya

The Modelica Association

224

Modelica 2006, September 4th  5th

NowaitTransit Concept Assessment. Modeling of Trains on Complex Track Geometry

NowaitTransit concept assessment.
Modeling of trains on complex track geometry
Jan Tuszyski, Niklas Philipson, Johan Andreasson, Magnus Gfvert
Nowaittransit AB, Modelon AB
jan@nowaittransit.com, niklas.philipson@modelon.se, johan.andreasson@modelon.se, magnus.gafvert@modelon.se

Abstract
This paper presents modeling and verification of
Nowaittransits concept of mass passenger transportation for big cities. Cars of the train, coupled in a
closed loop, move continuously along the track but
slow down in station areas due to the special scheme
of car folding. Concept verification through modeling was requested by the investors.
Keywords: Mass city transportation; Train dynamics
modeling; Vehicles in complex constraints; Investment in new technology

1
1.1

To show that design team of the Nowaittransit has
capacity and tools to handle complexity of mechanical and control systems of the train.
The interesting aspect of the project presented was
that modeling was required by investors as a proof
that a new concept is trustworthy enough to invest in
the test track.
1.2

Short introduction of the NowaitTransit

The underlying principle of the NowaitTransit invention is a continuous train movement with a reduction of the traveling speed at the stations.

Introduction
Background

Nowaittransit AB has developed and patented new
concept of mass passenger transportation for big cities. The closed loop of interconnected cars moves
continuously along the track slowing down in station
areas by the special scheme of folding cars.
The concept has advantages of high transport capacity of modern subway but at much lower costs for
investment and exploitation providing that way attractive alternative to subway. The company has several Asian cities interested, but closing final contracts requires formal assessment proving that proposed functionality of the system can be achieved.
The assessment is run presently in two stages;
through computer modeling and through physical
verification on the test track in Sweden. The computer modeling reported here was performed by
Nowaittransit and Modelon and had two main objectives:
To prove that the concept has no show stoppers
which may be hidden in dynamics of the long chain
of the cars moving along the complex rail geometry.
Requirements on the orderly start-up and braking
shall be achieved and potential hazards identified.

The Modelica Association

Figure 1: Nowaittransit mass transportation system

The length of the NowaitTransit car is reduced
through a 90-degree horizontal folding shown in
Figure 1. The cars traveling out of the station areas
have a normal transport speed, which during the
folding is reduced by the factor 1:12 when the cars
enter the station. The passengers can now board and
disembark the train at the end of each slowly moving
car. This speed at the station corresponds to the high
end of normal walkway speeds. The passengers entry and exit is further facilitated through use of moving walkways, making it acceptable for disabled persons.

225

Modelica 2006, September 4th  5th

J. Tuszynski, N. Philipson, J. Andreasson, M. Gfvert

Due to this continuous boarding/disembarking principle, station loads will be evenly distributed with no
crowds of passengers waiting. Traditional systems
have passengers gathering on the platforms and
whole trainloads of people boarding and disembarking simultaneously. Accordingly NowaitTransit
stations can be smaller with capacities of stairs, elevators and stairways reduced. Small stations, light
modular structures and simplicity allow reduction of
investment costs to approximately 25 MEUR/km
compared to 85-125 MEUR for conventional subway.

long chains of cars acting on each. Long chains
meant huge number of equations to solve and difficulties in defining initial conditions, which led to
extremely long simulation times. We had to simplify
the whole train model worked accordingly with two
main types of models:

2

CRM model will not allow studies of the rail bogy
interaction but is a good approximation for studies of
car propulsion and car interaction in open and closed
loops of coupled cars covering at least one car transition zone (e.g. station of folding zone, station platform zone and un-folding zone).

2.1

Objectives of the modeling and
tests performed
Objectives

The main objective for modeling was proving that
the concept can be realized. We concentrated accordingly on the following:


Analysis of train structural singularity or system
over-determination.
Mainly aspects of the train dynamics where
movements of the interconnected cars are bound
to 3D geometry of the rail



Structural loads on the train components.
Load analysis was required to prove that the
train can be accelerated and slowed down, and
that the main train structures will hold intact
through pre-identified hazard situations



Identification and evaluation of factors of passenger comfort and train controllability

Centre Rail Model (CRM): where the cars, which
travel on the central rail can turn round z-axis vertical to the rail line. The cars can now be forced into
folding and un-folding according to angle , predefine function of car position (s) on the track. This
scheme replaces here car-turning forced by changing
of the rail gauge of the original concept.

Figure 2: Cars and distance beams of the CRM

Assessment of the NowaitTransit concept reported
model
here should be seen as the final stage of the concept
introduction to investors. The Modelica models will
Figure 2 shows part of the CRM animation, with
be further developed and verified to become eventumiddle (red) line representing centre rail, and two
ally design tool of the full scale projects of the fuexternal lines showing trajectory of wheel-rail conture.
tact points.
2.2

Requirements on tests and introduction to
main models developed

Final Rail Model (FRM): where at least one basic
car structure is run through various rail zones linked

The objectives above were addressed by specifying
simulation experiments required, which led to the
final requirements on train models.
A couple of cars moving on rail of free definable
geometry and coupled by a single distance beam was
found the basic structure of the model. That structure
was pretty straight forward to model, but it showed
up quickly that the main problems came from the

The Modelica Association

226

Figure 3: Two car couples ascending rail of FRM

Modelica 2006, September 4th  5th

NowaitTransit Concept Assessment. Modeling of Trains on Complex Track Geometry

with rest of the train represented by CRM. This
model allows us study of car wheel interaction with



Exponential, according to function
y = C*exp(-|s-s0|^nExp)

Exponential form allows symmetrical track geometry
only, and has a convenient property of continuous
derivatives. The track geometry may be varied in x-,
y- and z-direction of the world.
Changes in z-direction (altitude) are required mainly
for slowing down / acceleration of the folding / unfolding cars by transfers between kinetic and potential car energy. This z-compensation can be complete
(100% kinetic energy at normal train velocity transferred to the potential energy) or partial only. Examples of the polynomial and exponential geometry are
shown in Figures 5 and 6, presenting car folding angle, velocity and elevation of both cases.

Figure 4: Complete train loop of FRM

the rail. Figure 3 shows FRM of the cars ascending
rail, while Figure 4 shows complete rail loop of the
same simulation.

3
3.1

Selected aspects of Nowait models
General

We present here the following aspects of NowaitTransit modeling:


Tools for selection and testing of track geometry



NowaitLib: Modelica library for simulation of
train cars on the complex track geometry



Car and rail components of the library

3.2

Figure 5: Profiles of car folding angle, velocity and zelevation for exponential track geometry

Generating track geometry

As it was already implied train of Nowait cars is basically over-determined. Due to the folding and unfolding schemes length of the closed loop of the train
can vary. It becomes accordingly crucial to match
dimensions of car components and car geometry to
reduce those length variations until they could be
absorbed by elasticity of train components and rail.
This complex process of selecting car geometry was
facilitated by development of the package of Matlab
functions, transforming input data (e.g. lengths of the
zones) into output matrix trackTab with description
of rail geometry. The trackTab is read as a table of
Modelica models.
Two basic forms for track building are available:
 Polynomial, of continuous 1st, 2nd and 3rd derivatives

The Modelica Association

Figure 6: Profiles as car angle, v and z, for polynomial
track geometry

Matrix trackTab is used for centre and final rail
models. It can be noted from Figure 2, that required
geometry of each rail (upper and lower lines) can be

227

Modelica 2006, September 4th  5th

J. Tuszynski, N. Philipson, J. Andreasson, M. Gfvert

unequivocally decided from centre line geometry,
dimensions of car components and angles of the car
in relation to car centre. All this information is available in matrix trackTab.
3.3

Testing of track geometry

Matlab-generated track geometry must be tested.
Initial testing is done using special Matlab functions,
the final testing through Modelica models. There are
three criteria which can be evaluated in Matlab: 1)
length of the train between any two cars holding the
same angle shall be constant, 2) number of cars between any two points of the track shall be constant,
and 3) velocity of moving cars shall comply with
constant car passing frequency (number of cars /
sec).
Results from testing track geometry of Figure 6 are
shown in Figure 7.

Figure 7: Testing results of polynomial geometry of
Figure 6

The testing showed positive results concerning third
criteria; final velocity variation was contained in approximately +/- 0.1 %. The vertical lines on the upper plot of Figure 7, indicate initial position of cars
in the transition zone. Vector of initial positions is
used for initialization of Modelica simulations.
3.4

NowaitLib Library

All modeling NowaitTransit trains follow formal
Modelica instructions, considering initial development of the system library including formal verification of library modules. The name of the library is
NowaitLib and library structure is shown in Figure 8.

The Modelica Association

Figure 8: Structure of the NowaitLib library

The components of the library are universal in a
sense they can be applied to various kind of bodies
moving in boundaries of any track geometry defined
in pre-defined table (here trackTab)
3.5

Main models of the NowaitLib

Main train components modeled are cars, distance
beams for car coupling and finally track/rail elements. Models of the cars and beams built on the
standard Modelica Mechanics of MultiBody Library.

228

Modelica 2006, September 4th  5th

NowaitTransit Concept Assessment. Modeling of Trains on Complex Track Geometry

One of the main problems encountered was placing
free body of the car in constraints of the track.

generalizing modification of the
MultiBody.Joints.Internal.Prismatic joint where
r_b = n*s + r_a. The following modifications are

Figure 9: Main components of the track - car interconnection

Figure 9 shows main components of the ContactPoint model used in FRM for interconnection of the
wheel contact point (CP) and rail, where:
 CP of the wheel is connected through MultiBody
frame bogieFrame
 ActuatedPrismatic component models lateral (ydirection) movements of the rail
 LateralForce component calculates forces acting
on the CP (and car bogie), there mainly centering
force of wheel crowning, and friction
 Track geometry is enforced through actuatedRailJoint getting trackTab data through axis
connector.
RailJoint model describes the (translational) motion along a track defined in space by vectors of
frames a and b (Figure 10), as
r_b = r(s) + r_a. It can essentially be considered as a

The Modelica Association

essential for train modeling:
 The track is able to follow any (two times differentiable) trajectory in space given via the outer
function track.position. This means that also
the orientation of frame_b relative frame_a
must be given (for the prismatic it is assumed
that there is no relative rotation), here via the
outer function track.orientation.

Figure 10: RailJoint as extension of Prismatic joint

229

Modelica 2006, September 4th  5th

J. Tuszynski, N. Philipson, J. Andreasson, M. Gfvert



To allow efficient symbolic manipulation of the
functions track.position and track.orientation,
the differentiations are provided through trackTab table. Note especially that for this application, it is assumed that dr_rel/ds points in the xdirection of frame_b. The differentiation has to
be possible at least three times to resolve the motion equations on acceleration level of both rotational and translational loops.

As a result, the relative velocity and d'Allembert's
principle are always in the heading direction dr/ds
which is the x-axis of frame_b. This model is extended as MultiBody.Joints.Internal.Prismatic to allow addition of Translational flanges.

4

Summary of experiments run on
the models

The experiments run on the models covered three
main groups:


Tests/generation of the track geometry and dimensioning of cars and car coupling elements



Tests of the longitudinal forces acting between
cars in dynamic situations of train runs, start-ups,
and different cases of braking down



Tests of complete train sets including bogie and
wheels moving along the complex rail geometry.

The first group was run through package Matlab
functions as reported already above. The Matlab results were confirmed by Modelica/Dymola experiments.
Tests of the longitudinal forces required models of
the long chain of cars and were run accordingly on
the centre rail models.
Tests of complete train sets required simulations on
the final rail models.

the track (z/s), and cars on the curves in x-y plane.
The following groups of experiments were run:
 Cars run in constant base velocity,
 Cars of the starting train; accelerated from v= 0
to base v,
 Cars of the braking train; slow down from base v
to 0.
 Cars in let free situation, cars are left over
without any external forces testing car behaviour
on the raising and falling part of the track
 Train emergency brake down (according to international standards)
 Train in accidental brake down (i.e. hazard)
In addition to the above tests concerning mainly
identification of the dynamic behaviour of the
NowaitTransit train, the following tests were added:


Test of passenger comfort. Comfort factors were
selected measuring forces acting on passengers.



Test of car controllability (only initial evaluations)

4.2

List of experiments run on the final rail
model

Experiments run on the final rail model were essentially the same as for CRM. The focus of testing was
moved here on the following:
 Verification of compatibility between CRM and
FRM (does CRM reflect real behavior of cars on
the variable gauge track?)
 Verification of the wheel movement on the rail.
E.g. prove that wheel friction across the rail will
limit lateral sliding of the wheel
 Verification of train controllability during selected phases of the train operation. This to estimate complexity of the train control system
(Note: here identify potential problems only)

All tests were run on the representative track geometry, covering mainly two basic profiles; one of
complete station zone, and second of 90o curve with
cars folding and un-folding in order to manage
curves of relatively small radii required for adoption
of the train track to existing city environment.
4.1

Experiments run on the centre rail model

Experiments of this group concentrate on demonstration of forces between cars, and forces required to
drive/brake cars through raising and falling parts of

The Modelica Association

230

Modelica 2006, September 4th  5th

NowaitTransit Concept Assessment. Modeling of Trains on Complex Track Geometry

5

Examples of experiments run on
the centre rail track

Experiments listed above are exemplified here on
three case only:

Figure 11: Cars of the CRM in normal operation passing station area

Case 1 (Figure 11): shows, velocities of cars, forces
on distance beams and car turning torques during a
normal car passage of the station area. Note that the
case reflects the special situation when cars in transition are not propelled but only pushed through by the
cars still on straight part of the track

Case 2 (Figure 12): shows the same car configuration as for case 1. Here cars are slowed down from 5
to 0 m/sec. This case is special as well as cars in
transition are braked but slowing down of the cars on
straight part of the track. Note pulsing character of
forces and torques implying that control is required.

Figure 12: Cars in CRM during train stop from 5 to 0 m/sec

The Modelica Association

231

Modelica 2006, September 4th  5th

J. Tuszynski, N. Philipson, J. Andreasson, M. Gfvert

Figure 13: Cars of FRM during normal operation in station area

Case 1 (Figure 13): shows, velocities of cars, lateral
forces on the rail and forces in distance beam acting
on the selected cars of the train during normal passage of the station area.

6

Summary of results and conclusions

The study presented here had the main purpose to
show for investors deep knowledge of the proposed
NowaitTransit concept. The study resulted accordingly in the models which allow driving Nowait
train along various track geometry. The study had
the ambition to identify the process of driving long
trains along complex track geometry, which implies
that the modeling effort shall be continued. We can
tell today that no distinct show stoppers were identified, but at the same time we see difficulties to be
met. There are clear tendencies to longitudinal car
oscillations. Main effort of the studies was to generate track geometry reducing those oscillations to the
minimum, which showed up feasible. The coming
modeling stages should concentrate on design and
verification of the train propulsion system, on finding optimal algorithms for train control (done partially in ref [1]) and on verification of the auxiliary
systems for train start-up and brake-down. We are
pretty advanced in further model development allowing study of the complete loops of the interconnected
cars (Figure 14). Modelica models and package of
Matlab functions are already powerful tools but must
be developed further to ensure that train design and
design verification will be effective and trustworthy.

The Modelica Association

Figure 14: Animation of the complete closed loop of
Nowait train model

7
[1]

232

References
Dynamic Simulation of the Train Concept
Nowait Transit. Master Thesis, Daria Madjidian, Arash Majedi. 2005. Department of
Automatic Control. LTH

Modelica 2006, September 4th  5th

Session 3a

Session 3a
Thermodynamic Systems for Energy Storage and Conversion

The Modelica Association

233

Modelica 2006, September 4th  5th

Session 3a

The Modelica Association

234

Modelica 2006, September 4th  5th

Analysis of Steam Storage Systems using Modelica

Analysis of steam storage systems using Modelica
J. Buschle, W.D. Steinmann, R. Tamme
German Aerospace Center (DLR), Institute of Technical Thermodynamics
Pfaffenwaldring 38-40, 70569 Stuttgart, Gemany
jochen.buschle@dlr.de

Abstract
Modelica is used for the analysis of steam accumulators used as energy storage systems in power plants
and process industry. The analysis includes varying
pressure accumulators and steam accumulators with
latent heat technology. Physical models for the phase
change material (PCM) and for the vertical discretisation of stacked volume elements are implemented
in Modelica. Modelica is used for the analysis of
new PCM enhanced steam accumulators which are
not state of the art. The results of this analysis help to
design these novel storage systems.
Keywords: thermal energy storage; steam accumulator; phase change material

1

Introduction

2

Due to increasing costs for fossil energy, systems for
thermal energy storage have become attractive for
process heat applications. Especially in cyclic processes, energy storage systems offer an additional option for efficient energy usage. An example for such
a cyclic process is the production of gas concrete.
Here the produced stones are hardened under a steam
atmosphere in an autoclave. During a hardening cycle, the pressure in the autoclave is raised to 15 bar
for several hours. Between two production cycles,
the steam is partially stored in varying-pressure accumulators (Figure 1), so called Ruths steam accumulators, which represent the current state-of-the-art
technology in medium temperature thermal energy
storage.

Industrial process heat applications have been identified as a promising new area of application for thermal energy storage systems. Storage systems improve the efficiency by the reuse of energy in cyclic
processes. The bulk of process heat applications require steam at pressures between 1 and 20 bar with
corresponding saturation temperatures between
100C and 210C. While the application of phase
change materials (PCMs) is straightforward for isothermal energy storage, no commercial system is
available in this temperature range today.
Modelica is used to analyse different kinds of steam
storage systems for applications in power plants and
process industry. The analysis includes varying pressure steam accumulators, which are state of the art,
and a novel kind of steam accumulator with a phase
change material (PCM). For the various storage systems physical models are implemented in Modelica.

The Modelica Association

Steam accumulator

Discharge pipe
Savety valve

Water level
gauge

Charging pipe

Charging nozzle
Feed pipe

Circulation pipe

Drain

Figure 1: Varying pressure accumulator [1]
Varying-pressure accumulators use hot pressurised
water as storage medium. Liquid and gas phases are
in thermodynamic equilibrium. During the discharge
process , the systems provides saturated steam at decreasing pressure.

235

Modelica 2006, September 4th  5th

J. Buschle, W.D. Steinmann, R. Tamme
replaceable record MultiPhasePropertiesRecord

Connection to the
distribution pipe

extends Modelica.Icons.Record;
MassFraction x[nPhase];
SpecificVolume v[nPhase];

Circulation
pipe

MassFraction[nPhase, nX] X;
MassFraction[nPhase, nXi] Xi;
SpecificEnthalpy h[nPhase];
SpecificInternalEnergy u[nPhase];

Holes

SpecificHeatCapacity R[nPhase];
MolarMass MM[nPhase];
end MultiPhasePropertiesRecord;

Figure 2: Charging nozzle with circulation pipe [1]
During the charging process, steam is blown into the
liquid contained in the accumulator. The incoming
steam bubbles condense in the liquid or pass into the
steam space, depending on the thermodynamic equilibrium in the vessel. The bubbles which rise to the
steam space increase the pressure and lead to a
higher saturation temperature, so that the next bubble
might condense. To use the entire storage content,
the charging process requires circulation. Ruths invented a method that consists of nozzles (Figure 2)
which turn the flow of steam upwards. The nozzles
are surrounded by a circulation pipe, wherein the
water flows upwards. The minimum temperature loss
is composed of the difference between the steam
space and the uppermost liquid layer as well as the
difference between the saturation temperatures due
to the additional pressure of the water at lower
depths. Depending on the accumulator pressure and
the steam intake, there is a certain depth for the nozzles which minimizes the overall temperature loss.
[1]

In this record, the thermodynamic properties of the
different phases of the medium are included. Compared to the BasePropertiesRecord, as defined in
the PartialMedium package of the Modelica.Media
library, the mass fraction of the different phases is
added and the specific volume is used instead of the
density. The PartialMultiPhaseMedium package
extends the PartialMedium package of the Modelica.Media library. The BaseProperties model in the
PartialMultiPhaseMedium package is extended in
the following way.
redeclare replaceable partial model extends BaseProperties
"Base properties (p, d, T, h, u, R, MM and,
if applicable, X) of a medium"
MultiPhasePropertiesRecord MultiPhase;
equation
/*
d = 1/(MultiPhase.v*MultiPhase.x);
for i in 1:nX loop
X[i] = MultiPhase.X[:, i]*MultiPhase.x;
end for;
for i in 1:nXi loop

3

Xi[i] = MultiPhase.Xi[:, i]*MultiPhase.x;
end for;

MultiPhase Media Library

h = MultiPhase.h*MultiPhase.x;

The Modelica.Media package provides a standardized interface to fluid media models and specific
media models based on this interface. For the handling of multiphase applications, a general media
package was developed based on the Modelica.Media package. An additional properties record
called MultiPhasePropertiesRecord is used in the
BaseProperties model to provide the thermodynamic properties of the different phases to the models using the Modelica.Media package.

The Modelica Association

u = MultiPhase.u*MultiPhase.x;
R = MultiPhase.R*MultiPhase.x;
MM = MultiPhase.MM*MultiPhase.x;
*/
end BaseProperties;

It is possible to use the MultiPhase medium models
with single phase models. The required base properties are calculated as a mixture of the different
phases.

236

Modelica 2006, September 4th  5th

Analysis of Steam Storage Systems using Modelica

4

Downflow model

I

For the analysis of steam accumulators, a vertical
discretisation of the storage vessel is elemental.
Based on the Modelica.Fluid library, models for the
simulation of multiphase flows are developed. The
drainage and flooding of vessels can be reproduced
as well as the vertical stacking of control volumes.
Between two volume elements stacked one above the
other, two kinds of mass exchange mechanisms are
identified. One type of mass exchange results from
the pressure difference between these two elements
and the other mass exchange occurs due to downflowing water and upflowing steam caused by the
density difference of these two phases. The mass
flow of the downflowing water is calculated in the
following way:

I

Figure 3: simulation models for Ruths accumulator
and single control volume
The ambience model is initialized with a pressure of
3 bar. The volumes of the pressure vessel are initialized with a pressure of 4 bar and an enthalpy of 610
kJ / kg. The height of the pressure vessel is 3 m and
the diameter is 1 m. The pressure vessel is filled up
to 50 percent with water. The single control volume
and steam accumulator model have the same dimensions. In the beginning, the control valve is closed.
After 1000 seconds it is opened.
In Figure 4 the simulation results are presented. In
the beginning the water is flowing down in the
stacked volumes of the Ruths accumulator.

if noEvent(y_liq > y_min and y_vap > y_min) then
m_flow= V_upper*V_lower*f_flow*
(y_liq - y_min)*(y_vap - y_min);
else

pressure [bar]

m_flow = 0.0;
end if;

The mass flow of the upflowing steam is not calculated separately. This mass transport mechanism is
covered by the mass transport due to the pressure
difference. The required volume fraction, y, can be
calculated from the MultiPhase Modelica.Media
models in the following way:

4.0

Single Volume
Ruths lower
Ruths upper

3.8
3.6
3.4
3.2
3.0
0

400

800

1200

1600

provided heat [kWh]

medium_u.MultiPhase.x[nPhase] *
medium_u.d;

2800

14
12
8
4

Single Volume
Ruths accumulator

0
0

Simulation steam accumulator

400

800

1200

1600

2000

2400

2800

time [s]

In Figure 3 the simulation models for a Ruths accumulator and a single control volume are shown. They
are connected to an ambience model by a control
valve, an enthalpy flow rate sensor and a MultiPhase
flange which ensures that only vapour is leaving the
volumes. The enthalpy flow rate is integrated over
time. The steam accumulator is dicretised in the vertical direction into control volumes. The water vapour exchange between the volume elements is calculated with the downflow model as presented in
section 4.

The Modelica Association

2400

time [s]

y = medium.MultiPhase.v[nPhase] *

5

2000

Figure 4: simulation results of pressure and provided
heat for Ruths accumulator and single control volume
Because of the static pressure of the water column,
the pressure in the lower volume element is increasing and the pressure in upper volume element is decreasing. After 1000 seconds, the control valve is
opened and the pressure vessels are discharged to the
ambience model. The pressure in the single control
volume and in the upper volume of the Ruths accumulator is lowered to 3 bar. The pressure in the
lower volume element of the Ruths accumulator re-

237

Modelica 2006, September 4th  5th

J. Buschle, W.D. Steinmann, R. Tamme

6

Phase change materials (PCM)

Linear interpolation method
The heat capacity in the liquid and in the solid state
is assumed to be constant and increases from the onset temperature of phase change to a maximum at the
transition temperature followed by a decrease until
the constant value of the liquid state is reached at the
final phase change temperature. In Figure 5 heat capacity and enthalpy are plotted against the temperature.

6.1

cpupper
cplower
temperature
Tonset Ttransition Tfinish

Figure 5: heat capacity and enthalpy plotted against
temperature for the linear interpolation method
The latent heat of melting can be calculated in the
following way:

Calculation of enthalpy

Three ways to calculate the enthalpy in the Modelica.Media models are compared. The first method is
the linear interpolation using If-, Elseif- and Elseclauses, the second method is the usage of the arc
tangent function and the third method is the usage of
the error function. Using the arc tangent method no
If-clauses are needed. The arc tangent function can
be calculated by series expansion as provided by
Euler in the following way:
arctan x =

enthalpy
heat capacity

cpmax

Materials

For the temperature range of interest, various materials can be used as PCMs. Examples of inorganic materials are technical salts and eutectic mixtures of
these salts such as: lithium nitrate (LiNO3), lithium
chloride (LiCl), potassium nitrate (KNO3), potassium nitrite (KNO2), sodium nitrate (NaNO3), sodium nitrite (NaNO2) and calcium nitrate
(Ca(NO3)2). In the group of organic PCMs an interesting material is Pentaerythritol. It undergoes a
solid-solid transition at 189C with an enthalpy of
269 kJ/kg [Benson, 1985]. The melting point of this
plastic crystal is about 50 Kelvin above the solidsolid transition temperature.
6.2

heat capacity

Isothermal energy storage increases the storage efficiency. This can be achieved by using a PCM as
storage material. Due to the latent heat of melting
thermal energy can be stored in a very small temperature range.

enthalpy

mains above 3 bar due to the static pressure. More
heat is provided by the single control volume compared to the stacked volumes. The reason for this is
the higher pressure in the lower volume elements of
the Ruths accumulator which matches the real behavior of the varying-pressure accumulator.

x
2
x3
+

1+ x2 3 1+ x2

(

)

2

+

24
x5

3 5 1+ x2

(

)

3

+ ...

The error function is calculated according to W J
Cody [3] as an approximation. In this implementation different approximations are combined by Ifclauses.

The Modelica Association

h trans = c p,low  (Ttrans  Tons ) + c p,up  (Tfin  Ttrans )

(
)  (c

+ 0.5  (Ttrans  Tons )  c p, max  c p,low
+ 0.5  (Tfin  Ttrans

p, max

 c p, up

(

)

)

)

 c p,low  (Tfin - Tons )  0.5  c p, up - c p,low  (Tfin - Tons )

If the transition temperature, the onset temperature of
phase change, the final temperature of phase change,
the heat capacity in the liquid state, the heat capacity
in the solid state and the latent heat of melting are
known, the maximum heat capacity can be calculated
from the latent heat of melting.
c p, max =

2  h trans  c p,low  (Ttrans  Tons )  c p,up  (Tfin  Ttrans )
Tfin  Tons

+ c p,low + c p,up

The calculation of the enthalpy in the Modelica.Media package is implemented with if, elseif
and else clauses in the following way:

238

Modelica 2006, September 4th  5th

Analysis of Steam Storage Systems using Modelica

In Figure 7 enthalpy and heat capacity calculated
with the arc tangent method are plotted against temperature. The thermodynamic properties of an eutectic mixture of potassium nitrate, sodium nitrate and
sodium nitrite are used. The latent heat of melting,
htransition, is 83 kJ/kg, the melting temperature ,Ttransition, is 415 Kelvin, the heat capacity ,cp, is 1.5 kJ/(kg
K) and the reference temperature ,T0,is 273 Kelvin.
The melting range coefficient ,CMR,is 2.

h = cp,lower*(T - T0);
elseif noEvent(T > Tfinish) then
h = cp,lower*(Tonset-T0)+htransition+cp,upper*(T-Tfinish);
else
if noEvent(T < Ttransition) then
h = cp,lower*(Tonset - T0) + cp,lower*
(T - Tonset) + 0.5*(cp,max -cp,lower)*
(T - Tonset)^2/(Ttransition - Tonset);
else

400

enthalpy [kJ/kg]

h = cp,lower*(Tonset - T0) + cp,lower*
(Ttransition-Tonset)+0.5*(cp,max - cp,lower)*
(Ttransition-Tonset)+cp,max*(T-Ttransition)-0.5*
(cp,max - cp,upper)*(T-Ttransition)^2/
(Tfinish-Ttransition);
end if;
end if;

Arc tangent method
The arc tangent function is used to reproduce the
behavior of the PCMs enthalpy at the melting point.

30

enthalpy

350

25

heat capacity

300

20

250

15

200

10

150

5

100
410

412

414

416

418

heat capacity [kJ/(kg K)]

if noEvent(T < Tonset) then

0
420

temperature [Kelvin]

Figure 7: enthalpy and heat capacity calculated with
the arc tangent method plotted against temperature

y
/2

Error function method
The Gauss error distribution curve is used to reproduce the behavior of the heat capacity of the PCM at
the melting point.

x
- /2

Figure 6: arc tangent curve

y

For the calculation of the enthalpy curve the arc tangent function is standardized to one and moved in y
direction by 0.5 and in the x direction by the melting
temperature, Ttransition. The resulting curve is multiplied with the latent heat of melting, htransition. The
sensible heat, cp*, is added in the second term. The
melting range coefficient, CMR, is used to adjust the
width of the melting range.

a

 arctan((T  Ttransition )  C MR )

+ 0,5
h = h transition  



+ c p * (T  T0 )

The effective heat capacity is calculated by differentiating the enthalpy function.
cp =

(

h transition

)+c

  ((T  Ttransition )  C MR ) + 1

The Modelica Association

2

p

y = a  e  b ( x  x0 )

x0

2

x

Figure 8: Gauss error distribution curve
For the calculation of the heat capacity curve the coefficients of the Gauss error distribution curve are
adapted. The coefficient a is the maximum heat capacity, cp,max, at the melting temperature, x0 is the
melting temperature Ttransition and b is the melting
range coefficient, CMR, which is used to adjust the
width of the melting range. The sensible heat, cp*, is
added in the second term.

*

c p = c p max  exp[- C MR  (T - Ttransition )] + c p *

239

Modelica 2006, September 4th  5th

J. Buschle, W.D. Steinmann, R. Tamme

h = h transition 

erf

[C

MR

]

 (T - Ttransition ) + 1
2

temperature [K]

The enthalpy is calculated by integrating the heat
capacity function.
+ c p * (T - T0 )

440

presc. temp.
Volume 1
Volume 25
Volume 50
Volume 100

436
432
428
424
420
416

The error function is implemented according to W J
Cody [3]. The heat capacity cp,max in the melting
point can be found with the following equation.

412
408
404
400

cp max = h transition 

C MR

0

enthalpy

50

heat capacity

40
30

200

20

150

10

412

8000

10000

The results of simulation time of the three methods
to calculate the enthalpy of the PCM are presented in
the following table:

60

250

100
410

6000

Figure 9: temperature profile of radial discretised
cylinder

414

416

418

heat capacity [kJ/(kg K)

enthalpy [kJ/kg]

400

300

4000

time [s]

In Figure 8 the enthalpy and the heat capacity calculated with the error function method are plotted
against temperature. The thermodynamic properties
of the eutectic salt mixture, as presented in the arc
tangent method, are used. The melting range coefficient CMR is 1.

350

2000



CPU-time for
integration [s]
CPU-time for one
GRID interval [ms]
Number of
(successful) steps

Linear
interpol.

Error
function

40,7

179

1250

81,4

358

2500

197444

28846

25471

The arc tangent method is 4.5 times faster than the
linear interpolation method and more than 30 times
faster than the error function method.

0
420

temperature [Kelvin]

Figure 8: enthalpy and heat capacity calculated with
the error function method plotted against temperature
Comparsion enthalpy methods
For the comparison of the three suggested methods
the thermal behaviour of a cylinder of PCM is simulated. The cylinder is discretised into 100 radial layers. The inner diameter is 1cm and the outer diameter
is 2cm. The prescribed temperature at the inner side
of the cylinder is switched between 440 and 400
Kelvin every 1000 seconds. Again the thermodynamic properties of the eutectic salt mixture, as presented in the arc tangent method, are used. The resulting temperature profile is plotted in Figure 9.
Volume 1 is the PCM layer at the inner side of the
tube and Volume 100 is the PCM layer at the outer
side of the tube.

The Modelica Association

Arc
tangent

7

Simulation PCM enhanced steam
accumulator

A concept to increase the energy efficiency of an
existing varying-pressure steam accumulator is to
connect a tube register with externally arranged
PCM to the pressure vessel (Figure 10). A pump assures the circulation between the tube register and
pressure vessel. The charging and discharging operations are the same as for a varying pressure accumulator, as presented in section 2. With the PCM the
capacity of the storage system can be increased. The
same amount of thermal energy can now be stored in
a smaller temperature range. The heat transport inside of the PCM is a limiting factor to the power of
the storage system.

240

Modelica 2006, September 4th  5th

Analysis of Steam Storage Systems using Modelica

In the beginning, the control valve is closed. After
1000 seconds it is opened and the storage vessel is
discharged. The pump is switched on all the time.

Figure 10: PCM enhanced steam accumulator

20

3.8

15

3.6

pressure upper
pressure lower
provided heat

3.4
3.2

10
5
0

3.0
0

400

800

1200

1600

2000

2400 2800
time [s]

Figure 12: simulation results of pressure and provided heat for the PCM enhanced steam accumulator
In Figure 13 the temperature in the lower part of the
storage vessel and in the PCM layer around the tubes
is plotted against time. Only parts of the PCM are
solidified after 2000 seconds of discharging. The
melting temperature is 415 Kelvin.
temperature [Kelvin]

In Figure 11 the model of the PCM enhanced steam
accumulator is shown as it is implemented in Modelica. The ambience model is initialized with a pressure of 3 bar. The volumes of the pressure vessel are
initialized with a pressure of 4 bar and an enthalpy of
610 kJ / kg. The height of the pressure vessel is 3 m
and the diameter is 1 m. The pressure vessel is filled
up to 50 percent with water. The inner diameter of
the 10 tubes connected to the pressure vessel is 20
mm and the outer diameter is 25 mm. The outer diameter of the PCM layer is 100 mm. The tubes have
a length of 5 meter. The thermodynamic properties
of the eutectic salt mixture, as presented in section
6.2, are used. The temperature of the PCM is initialized to 416 Kelvin. This means that the PCM is completely molten.

4.0

provided heat [kWh]

pressure [bar]

In Figure 12 simulation results of pressure and provided heat are plotted against time. The pressure in
the upper part of the storage vessel is decreasing after the control valve is opened to 3 bar. The provided
heat is higher compared to the simulation results of
the varying-pressure accumulator in section 5.

I

416
414
PCM inner
PCM middle
PCM outer
Ruths lower

412
410
408
0

400

800

1200

1600

2000

2400

2800

time [s]

Po... true

Figure 13: simulation results of the temperature in
the lower control volume of the pressure vessel and
the temperatures in the PCM cylinders around the
tube register

-100

8
10

10

Figure 11: simulation model PCM enhanced steam
accumulator

The Modelica Association

Conclusions

With the simulation models presented in this work,
PCM steam storage concepts can be analyzed.
Simulation results of a PCM steam accumulator with
a tube register and externally arranged PCM are presented. In the next step, different simulation models
will be developed for comparison. These simulation
models will focus on using macro-encapsulation of

241

Modelica 2006, September 4th  5th

J. Buschle, W.D. Steinmann, R. Tamme

the storage material, composite materials and the
integration of layers made of materials showing a
high thermal conductivity to increase the power of
the storage system. Further validation of the models
will be done using laboratory scale experiments. Using a tube register with externally arranged PCM, the
number of tubes and their distance has to be defined,
depending on the steam process the accumulator is
integrated into. The aim of the work is to provide a
dimensioning tool that enables to design the thermal
behavior of the steam accumulator.

References
[1]

Goldstern, Walter Steam storage installations.
Springer-Verlag OHG, Berling / Gttingen / Heidelberg, 1970.

[2]

Steinmann, W.D., Buschle, J. Analysis of thermal
storage systems using Modelica. Proceedings of
the 4th International Modelica Conference, Hamburg, March 7-8, pp 331-337, 2005.

[3]

Cody, W. J. Rational Chebyshev approxima-

tions for the error function, Mathematics of
Computation, pages 631-638, 1969.
[4]

Benson, D.K., Burrows, R.W., Webb, J.D. Solid
state phase transitions in Pentaerythritol and related polyhydric alcohols. Solar Energy Materials
13, pp 133-152, 1985.

The Modelica Association

242

Modelica 2006, September 4th  5th

An Enhanced Discretisation Method for Storage Tank Models within Energy Systems

An Enhanced Discretisation Method for Storage Tank Models within
Energy Systems
Dr.-Ing. Stefan Wischhusen
XRG Simulation GmbH
Kasernenstrae 12, 21073 Hamburg, Germany
wischhusen@xrg-simulation.de

Abstract
This article presents a new dicretisation function that
can be applied to flow models using Finite-VolumeMethod. The function is required since the commonly applied UPWIND disrectisation yields a low
accuracy when convection is small with regard to
volume size, e. g. for storage tank models. The new
approach is compared to measurement data and it
shows a much higher accuracy incorporating the
same number of control volumes so that the user
may decrease the problem size considerably.
Keywords: discretisation method; UPWIND; tank
model; cogeneration; energy system

1

Introduction

By means of simulation tools like HKSim [1] it is
possible to model complex energy supply system
layouts in order to find improvement potential in the
development or optimisation phase of a project.
HKSim integrates Dymola/Modelica for modelling
and simulation. It is used by Imtech Deutschland
GmbH & Co. KG and is currently extended by XRG
Simulation GmbH for performing simulation of
steam and compressed air systems.
Storage tanks are a necessary part of each cogeneration and regenerative power supply system. Those
energy systems like shown in Fig. 1 have become
very popular for large but also small applications.
From the energetic point of view it is of big interest
to model the transient behaviour of such tanks in order to determine temperatures in feed and return
lines precisely. Since control algorithms for such
plants rely on actual temperatures measured at different tank levels a correct temperature prediction
influences the result of a simulation for power supply, switch-on times, etc., strongly.

The Modelica Association

A hot water storage tank fulfils two functions at the
same time. First, hot water can be stored when demand and supply is incoherent (e. g., in cogeneration
and regenerative applications). Second, a degree of
freedom is introduced to the hydraulic layout so that
pumps may operate independently for consumers and
heat suppliers. For example, the storage tank in Fig.
1 is charged with hot water when the mass flow rate
of water through the CHP is greater than that in the
return line (boilers are considered to be off)  this
happens when heat demand is low and power is required. On the other hand, a discharge is automatically initiated when the CHP is switched off and
consumers are still fed. Due to the positive gradient
of the specific volume w.r.t. temperature (above
4C) a very good separation of water with different
temperatures can be achieved when the tank is fed
with hot medium at top and colder medium at bottom
level. For that reason this kind of storage tank always
shows an aspect ratio which is greater in vertical direction.
In general, a more or less sophisticated system control (cascade connexion) is implemented which
switches CHP and boiler with regard to the actual
heat demand and tank temperatures. At low heating
demand the tank outlet temperature will rise after a
period of time and therefore the CHP has to be shutdown to prevent an overheat of the engine. Of course
a switch-on is possible again when heat demand rises
but the shutdown interval and the number of powerup sequences influences the durability of the engine
(note, that the CHPs are usually adapted from vehicle engines which have an average lifetime of a few
thousands of hours). It is therefore of big interest to
decrease the number of (cold-)starts at a maximum
power output. An optimum performance can be
achieved by also defining the right tank size. This
can be done by means of the simulation tool HKSim.

243

Modelica 2006, September 4th  5th

S. Wischhusen

ture T. The heat capacity may be a function of temperature or can be set constant which is a good approach for pure water in the usual range of operating
conditions.

Natural gas supply

Charge
Tank

~

Discharge

Combined
heat and power
(CHP)

U = m  c(T )  T

Boiler

(3)

Therefore one may simplify Eq. (2) to the following
term:
Consumer

Fig. 1: Simplified schematic of a cogeneration plant
with integrated hot water storage tank

mc

dT
= min  c  Tin  mout  c  Tout + Qs . (4)
dt
H in

H out

Discretisation methods for thermohydraulic system modelling

Usually, mass and energy balance equations are coupled by a momentum balance but in the incompressible case the pressure is not a parameter for medium
properties.

Physical systems are always described by partial differential equations which consist of derivatives w.r.t.
time and space. Applying simulation tools like Dymola/Modelica it is possible to model and solve the
dynamic part of those equations  but all derivatives
w.r.t. space have to be simplified using finite methods (e.g., Finite-Volume-Method or Finite-ElementMethod [2]).

If Eq. (4) has to be solved in order to receive an explicit differential equation one must determine the
outflow temperature (or outflow enthalpy) of the
volume applying known states calculated for the center of each volume. That is the reason why a discretisation method has to be applied.

2

The balance equations for an incompressible medium
with constant density (e.g. liquid water) can be derived from volume integrals [3]. The mass balance is
rather simple due to constant density and constant
volume size.

dm
= min  mout = 0
dt

(1)

For the energy balance follows assuming low kinetic
energy (total energy internal energy U):

 down =  ,  = h, T , d . (4)

dU
= min  hin  mout  hout +
. (2)
Qs
dt
heat source/sink
convection

For incompressible media the specific internal energy u = U/m is a function of temperature as well as
the specific enthalpy h (since the density is considered to be constant). Both variables are computed by
the specific heat capacity c which is equal to the derivative of specific internal energy u w.r.t. tempera-

The Modelica Association

Usually, for thermo-hydraulic models like pipes,
pumps and heat exchangers an UPWIND discretisation scheme is chosen since it is numerically robust
and easy to implement at the same time. Validation
reveals that such a discretisation is appropriate for
plant components which show a large mixing behaviour [4] (e.g., stirrer tanks). Pipes are modelled by a
number of serial control volumes which are connected by the UPWIND discretisation (Fig. 2). The
equation for calculating state variables (like specific
enthalpy h, temperature T or density d) on downstream volume boundaries is simple:

But the numerical mixing behaviour of this method
shows a large diffusion (refer to temperature slope in
30th and 31st of Aug. in Fig. 3) of heat for tanks
which are designed to store hot water in vertical layers. In order to prevent this one has to model each
tank with a large number of control volumes (usually
more than 40 volumes) if UPWIND is applied.
Therefore, the tank model generates a high computa-

244

Modelica 2006, September 4th  5th

An Enhanced Discretisation Method for Storage Tank Models within Energy Systems

tional effort when it comes to plant simulations for
one year simulation time.
z
h

m0

n-1

n

n+1

n

n-1

The result of such a step response is visualised in
Fig. 4. It clearly shows that the state (e. g. temperature) of a finite volume immediately rises due to a
sudden change of enthalpy flow at the upstream
boundary. Therefore, the outgoing flow changes its
temperature at the same time the step or any change
occurs at the inlet boundary.

n+1

100

H
90
80

z

70

[C]
60

h

m<0

n-1

n

n+1

n

n-1

50

n+1

40

H

30

Another very common discretisation method is the
linear interpolation of states between two volumes.
Unfortunately, this method results in an unstable or
even false solution when it comes to transient simulations. Therefore, UPWIND is still widely used
even when storage tanks have to be modelled.
A typical outcome of such a simulation is shown in
Fig. 3. One can easily see, that the temperatures during discharge (31st of Aug.) are not predicted very
well by the model which consists of 40 discrete volumes. In fact, there is a strong deviation with regard
to time. In addition, the bottom temperature is rising
quicker than measured during charging periods (28th
of Aug.). Since the volume of the tank is known precisely, and the mass flow rate is available from
measurements the discretisation method remains as
one significant failure potential.
Another indication is following from control theory:
Calculating the transfer function of Eq. (4) and furthermore carrying out a Fast Fourier Transformation
for a step response the following equation is yielded.

The Modelica Association



tm
m

(5)

26.8

27.8

28.8

29.8

Date

30.8

31.8

1.9

2.9

Fig. 3: Comparison of simulation (Sim) and measurement (Mes) of hot water temperatures at bottom and
top level of a storage tank  Simulation is carried out
by using UPWIND method
80

Inlet temp.
Center and outlet temp.

75
70

Temp. in C

Fig. 2: UPWIND-discretisation for an one-dimensional
flow and different directions of mass flow

Tout  Tout ,t = 0 = Tstep ,in  1  e

 Sim
top
 Mes
top
bot Sim
bot Mes

65
60
55
50
45
40
0

10

20

Time in s

30

40

Fig. 4: Step response (Eq. 5) with a weight factor
m / m = 0.3

3

An enhanced discretisation approach

The requirements for a new discretisation method for
storage tank models are listed below:
1. Most important, the approach shall deliver a better prediction for enthalpy flows over control
volume boundaries w.r.t. time.

245

Modelica 2006, September 4th  5th

S. Wischhusen

2. Standard interfaces which are used for UPWIND
models shall be compatible.
The main idea of the new discretisation method is to
achieve a gradient-dependent outflow state. Therefore, the gradient between the adjacent upstream
control volume and the center state is taken as a criteria for the interpolation between downstream and
center state. The interpolation function is chosen to
be of exponential type:

out = (center   down )  e

 a  up   center

+  down . (6)

4

Validation of tank model

For the validation of the tank model measurement
data is available. It shows the flow rate through a
storage tank as well as the temperatures for top and
bottom duct. The tank model looks like displayed in
Fig. 6.
Measurement
t_u=2...
L=1.0...
d_i=0...

Measurement

This function is valid for both possible flow directions in one-dimensional flow modelling. While the
upstream gradient is not close to zero the outlet
boundary state is almost equal to the downstream
state. But when the upstream gradient is small the
exponential function turns zero and therefore the corresponding volume is considered to be charged.
From that point the outflow state will be equal to the
center state. By increasing the tuning parameter a it
is possible to decrease the numerical diffusion of
that method (see Fig. 5).
100

a=104
a=105
a=0

90

Temperature in C

80
70

Bottom duct

Gain

Measurement...

Top_duct

Tank

T_oben
V=80.0
T_unten
Storage_tank

Feed

Measurement...

Top duct

t_u=2...
L=1.0...
d_i=0...

k={1/3.6,1,1}

Return

Bottom_duct

Fig. 6: Validation model for the storage tank model

The storage tank has a liquid volume of 80 m and
the thermal insulation can be considered to be ideal
(adiabatic conditions). Buoyancy effects in flow direction (gravity vector is parallel to flow vector) are
taken into account. Since the mass flow rate is provided in terms of a volume flow rate a gain block
divides this input by 3.6 (conversion from m/h to
kg/s for water). The measurement data was obtained
from the beginning of a heating period in September
and was recorded from a large cogeneration plant
with a time step interval of 15 min. The tank model
applies the new discretisation approach (a=10-4) for
n  4 volumes. This means that the first two and last
two volumes refer to UPWIND-scheme.

60

An operation of one week is investigated.

50
40
30
0

5000

10000
Time in s

15000

Number of
volumes n

20000

Fig. 5: Discharge temperature of the storage tank
model shown in Fig. 6 for different tuning factors a

It has to be mentioned that the tank model also displays buoyancy effects (which are an important feature) and therefore the unstable case of different gradient signs w.r.t. upstream and downstream directions is not resulting into problems. If this function
should be applied for modelling of other flow problems provisions in Eq. (6) should be made in order to
encounter those possible problems.

The Modelica Association

Nondimensional
simulation
time

10 new

10 UPW

20 UPW

40 UPW

2.60

1.00

3.92

11.82

sim [-]

Tab. 1: Effect of both discretisation methods and
number of volumes on non-dimensional simulation
time

246

Modelica 2006, September 4th  5th

An Enhanced Discretisation Method for Storage Tank Models within Energy Systems

(due to interface compatibility, note remark on previous page) are applying the new discretisation
scheme. This fact explains a visible deviation on 7th
day in Fig. 9 which is due to the two uppermost volumes using UPWIND discretisation. Adapting hydraulic interfaces in order to enable a calculation of
the upstream gradient will lead to a better anticipation of the measurement.

100
95

85
80
75
70
65
60
55
50
45
0

n=10 new
n=10
n=20
n=40
Mes
1

100

2

3

4

5

Time in d

6

Fig. 7: Comparison of discharge temperature with
measurement data

First, the effect of a different number n of discrete
volumes is evaluated. The result is shown in Fig. 7.
One can see that the accuracy of the solution with
regard to the measurement of the top duct temperature is rising when the number of volumes is increased. But with the number of control volumes
also the simulation time increases as Tab. 1 reveals.
Deviations for the top temperatures are high when
convection is small w.r.t. volume size (see day 6 to
7). But also the bottom temperature shows higher
deviations when the number of control volumes is
decreased (refer to peaks in Fig. 8 on 2nd, 3rd and 4th
day).

Discharge temp in C

Discharge temp in C

90

70
60

0

n=10 new
n=Mes

1

2

3

4

Time in d

5

6

Fig. 9: Comparison of new discretisation approach
with measurement data

In addition, also the bottom temperature is predicted
more precisely so that the temperature peaks obtained with a discretisation of 10 or 20 volumes vanish (compare Fig. 8 and Fig. 10).
100

n=10 new
n=10
n=20
n=40
Mes

90
80

Bottom temp in C

Bottom temp in C

80

50

100

70
60

90

n=10 new
Mes

80
70
60
50

50
0

90

1

2

3

4

Time in d

5

0

6

Fig. 8: Comparison of bottom temperature with measurement data

1

2

3

4

Time in d

5

6

Fig. 10: Comparison of new discretisation approach
with measurement data

Using the new discretisation it is possible to achieve
a much higher accuracy. Comparing Fig. 7 and Fig. 9
reveals that the top temperature is following the
measurement much better although just 6 volumes
The Modelica Association

247

Modelica 2006, September 4th  5th

S. Wischhusen

5

Evaluation for cogeneration plant

What are possible consequences of the discretisations implementation within a transient simulation
model of a typical cogeneration plant? As mentioned
before the purpose of a hot water storage tank is to
decouple power and heat supply. In case of a high
power requirement the tank will be charged until the
maximum capacity is reached. At this point CHPs
heat production must be cut down or even completely shut down. Thus, possible power peaks can
not be decreased resulting in high power charges
(actually, it is not the energy rate which dominates in
such a case). So, from the energetic point of view
one could tend to integrate larger tanks in such
plants. But from the financial point of view this
strategy is obviously restricted to defined limits. Of
course, it is possible to integrate heat exchangers for
removing waste heat to ambience but this option is
not desirable from the energetic point of view.
In Fig. 11 a simulation model of a typical industrial
cogeneration plant is shown. Two CHPs are installed for providing power (power priority control)
while the boilers are used in order to control the feed
temperature and backup heat production in case
CHPs are off. The heat consumers are represented by
a simple consumer model on the right side of that
figure. The profile of the heat consumption may
change dynamically and almost any signal source
from the Modelica.Blocks library may be used.

In this evaluation a simple constant power and heat
demand was applied while the power demand (1200
kWel) is larger than the heat demand (600 kWth) forcing the tank (volume V = 30 m) to be charged when
CHPs are on. A very ordinary flip-flop control is
used to prevent overheating at CHPs hot water inlet.
Basically, both engines are switched off when a temperature of 87 C at the bottom level and 100 C at
the top is exceeded. A restart is possible again when
top temperature drops below 90 C. The tuning parameter adis was set to either 0 for UPWIND or 1e-4.
Results reveal that with the same tank volume but
different discretisation schemes the operational time
at the same power output is different. Actually, the
CHP models can be operated 15 to 20 % longer than
with UPWIND discretisation (see Fig. 12 and Fig.
13). The difference is depending on the supplied
CHP control logic. So, the chosen discretisation may
result in considerably smaller tank sizes when a certain operation time interval has to be guaranteed 
another evaluation reveals that the same mean continuous operation interval (time between switch on
and switch off) is reached with new discretisation
when tanks are approx. 25 % smaller in volume.
Also, it is important knowing the number of powerup sequences during a certain period of time which
has to be lower than the requirement from the CHP
manufacturer when warranty conditions shall be respected.

Feed

CHP Control

Tank

Boilers

k

Consumer

Pufferspeicher

CHPs

Return
Fig. 11: Simulation model of a cogeneration plant with temperature dependent CHP control

The Modelica Association

248

Modelica 2006, September 4th  5th

An Enhanced Discretisation Method for Storage Tank Models within Energy Systems

For the simulation of one week the total number of
engine starts (for a single engine) was determined
with 37 for UPWIND and 31 for new discretisation
approach. For both simulations it must be pointed
out that the total power and heat production of all
moduls was basically equal indicating that the energy balance of the system was conservative (this
statement applies also for a simulation of one year
under the same boundary conditions).
100

Top temp.

Temp in C

90
80
70
60
50

Bottom temp.
Top UPW
Bottom UPW
Top new
Bottom new

40
0

6

12

Time in h

18

24

Fig. 12: Tank temperatures for both discretisation approaches

With the new discretisation method it is possible to
obtain smaller tank sizes while assuming identical
boundary conditions. The results difference could
reduce investment costs when large plants are
planned by means of simulation tools. For example
the savings in acquiring a 30 m instead of a 40 m
tank could be approx. 8.000  [5].

References

6

Number of engine starts

temperatures during slow discharge are displaying a
much sharper gradient than with UPWIND method.
It is possible that the new method may also be used
for other flow problems which show the same behaviour: convective flow and very low dissipation.
(sharp border front flow) like for example in some
kind of evaporators in cooling plants. The influence
of dissipation which is displayed in the gradient of a
step change is adjusted by a single parameter. This
tuning parameter can be changed so that mathematically the UPWIND method is applied. It must also be
stressed that the method is compatible with control
volume models which apply UPWIND. If this
method should be applied for every component
model the interfaces must be changed in order to access downstream and upstream states for first and
last control volume in any component model.

[1]

5
4
3

[2]

2
1
0
0

CHP switch UPW
CHP switch new

6

12

Time in h

18

[3]

24

Fig. 13: Number of CHP engine starts

6

Conclusions

[4]

The new discretisation scheme enables a more accurate modelling of storage tank models although far
less control volumes are required than for a conventional UPWIND discretisation that yields almost
same results. Thus, computation times are reduced
considerably. Validation shows that temperatures at
standard positions for temperature measurements are
predicted with a very good agreement. Especially,
The Modelica Association

249

[5]

Ldemann, B.; Wischhusen, S.; Engel, O.;
Schmitz, G.: Optimierte Energiesysteme,
BWK, Bd. 55, No. 9, Springer VDI-Verlag,
Dsseldorf, Germany, 2003.
Casella F. and Schiavo F.: Modelling and
Simulation of Heat Exchangers in Modelica
with Finite Element Methods. In Proceedings
of 3rd Modelica conference, Linkping, Sweden, pp. 343-352.
Wischhusen, S.: Dynamische Simulation zur
wirtschaftlichen Bewertung komplexer Energiesysteme. Cuvillier Verlag, Gttingen,
Germany: PhD thesis, Department of Thermodynamics, Hamburg University of Technology, 2005.
Mhlthaler, G. Anwendung objektorientierter
Simulationssprachen zur Modellierung von
Kraftwerkskomponenten,
VDI
Verlag,
Dsseldorf, Germany: PhD thesis, Department of Thermodynamics, Hamburg University of Technology, 2001.
KFServer  Online-Server for cost functions
of energy supply system components:
http://kfserver.kaiserstadt.de.
Modelica 2006, September 4th  5th

S. Wischhusen

The Modelica Association

250

Modelica 2006, September 4th  5th

HydroPlant  a Modelica Library for Dynamic Simulation of Hydro Power Plants

HydroPlant  a Modelica Library for Dynamic Simulation of
Hydro Power Plants
Kristian Tuszynski, Jan Tuszyski, Karl Slttorp
Modelon AB, Datavoice HB, Tactel AB
kristian.tuszynski@modelon.se, jantuz@tele2.se, karl.slattorp@tactel.se,

Abstract
This paper presents a library for simulation of hydro
power plants. The library is designed to be an effective tool for commissioning, testing of new control
strategies and verifying complete hydro plants or
selected plant systems only.
Keywords: Hydro Power; Simulation; Turbine; Penstock; Reservoir

The library structure builds on four main groups of
models: hydro components, electrical power system,
mechanical machinery and control components. This
paper covers mainly hydro components and hydro
turbines exemplifying mechanical machinery. Models of the electrical power system with generator and
grid address active power only and are more or less
conventional but still very useful for study of the
complete plant system.

2
1

Introduction

2.1

The hydro plant process is on first sight easy to understand and well documented. Development of new
control strategies could be accordingly based on that
knowledge verified through trial and error during the
commissioning. This traditional approach shows to
be time consuming and expensive. Plant models
available are often obsolete as they are simplified for
the narrow linear range of the working area and not
directly executable. Intuitive knowledge of the original developers is practically not available. Real
plants are run under stringent economical demands
and thus not available for testing.
The library was initially designed to test control
strategies and make commissioning more efficient,
and it proved to be useful for evaluation of complete
plants (Figure 1).

Flow Transfer
Theory

The simulation of thermo hydraulic systems is based
on three equations of mass (1), energy (2) and momentum (3) conservation in a control volume:

dM
= m _ doti  m _ doto =  m _ dot
dt

(1)

dU
dV
= m _ doti hi  m _ dotoho + q +Ws  p
(2)
dt
dt
dG
= m _ doti vi  m _ dotovo + ( Ai pi  Ao po  Ff )
(3)
dt
+A g(zi  zo )
where; m_dot - mass flow, h - specific enthalpy, q heat flow from (+) the environment, Ws - external
mechanical energy flow, p - the media pressure in
the control volume, G - the media momentum, v media velocity, A - intake/outtake area, Ff - the friction force, z - elevation of the intake/outtake. Indices
i, o symbolize entering or exiting flows to/from the
control enclosure.
Conservation principles were expressed initially as
partial differential equations for an infinitely small
control volume (local form) and then converted into
the above global formulation of differential equations of the physical enclosure modeled (Leibniz
rule).

Figure 1 Component Overview

The Modelica Association

251

Modelica 2006, September 4th  5th

K. Tuszynski, J. Tuszynski, K. Slttorp

Pressure p, and temperature T, are selected as state
variables of the media in a control volume, allowing
calculation of all other media properties from tabulated Modelica water properties.
2.2

Basic Structure of the Flow Transfer

The basic element of the flow structure is built of
two containers (control volumes) exchanging media
through a single connecting module. The thermodynamic states, p and T, of control volumes are calculated from the mass and energy exchange through
connecting module and from/to the environment.

Figure 2. General concept of interconnected control
volumes and connecting modules

Considering length and complexity of the plant water
ways, modeling of the longitudinal pressure transfer
in an elastic media was found essential.
A basic element of two volumes was accordingly
expanded into a media transmission line developed
initially by Heaviside as telegraph line formulation.
Water conduits of the library are sliced into a number of interconnected volumes (Figure 2). Inductance
and resistance are represented by water inertia and
flow resistance (equation (3)), while capacitance is
represented by media elasticity in the control volume.
2.3

Modeling challenges. Nonlinearities

The well established theory of the models would imply green light for easy implementation in the hydro plant library. In spite of that several modeling
challenges were met.
Vector of media flow velocity: Assuming control
volumes part of the water conduit requires completion of the enthalpy with the kinetic energy factor
v2/2. Transfer of that energy to the next segment of
the conduit depends on the direction of the velocity
vector. The problem was addressed by inclusion of
the flow recovery parameter. An additional challenge of the flow velocity concerns mainly turbines,
where flow vortex is an essential part of turbine design.

The Modelica Association

Nonlinearity of forces acting on the water flow:
The momentum equation includes highly nonlinear
force components. These are mainly momentum
forces, m_dot*v, and friction forces, Ff, depending
on the flow direction and flow velocity (Reynolds
number) in laminar and turbulent regions. Library
models were based on forms presented in reference
[1].
Flow calculation in open channels/reservoirs: Flow
in open channels was modeled from the same momentum equation as for enclosed channels, subject to
the following:
 Pressure drop, the main force moving the mass,
is calculated from media level difference between the adjacent volumes. Level variations depend strongly on the volume geometry.
 The main flow caused by the mass inertia is
completed by additional components as e.g. water sliding along the slopes of the waves.
 Friction calculation depends strongly on the
channel geometry, e.g. bottom and coast lines.

3

Basic Hydro Components

The library is built on two main types of hydro components: containers, basic models representing control volumes in open and closed containers, and connecting modules, models representing media conduits.
Closed volumes represent a single container or an
enclosed water segment of a long media conduit.
Open volumes represent containers with free surface
between the media and the gas above allowing media
compressibility to be neglected.
Generally standard Modelica connectors are used,
but with FlowPort and MediaPort added. FlowPort
connects flows of mass and enthalpy, while
MediaPort carries vector of media property. Input
and output ports of both connectors are separated.

4

Hydro Subsystems

Hydro subsystems include a reservoir, penstock and
surge tank. All of those models are built of interconnected segments of control volumes and connecting
modules. The number of segments is parameterized
allowing automatic segment interconnection into
complete subsystem. By increasing the number of
segments, higher flow/pressure frequencies can be

252

Modelica 2006, September 4th  5th

HydroPlant  a Modelica Library for Dynamic Simulation of Hydro Power Plants

studied, but at the expense of simulation execution
time.
4.1

Reservoir

The library allows simple parameterization of reservoirs fulfilling almost any desired geometry.

Water inlets and outlets can be connected to any
segment of the reservoir, allowing study of the hydro
plants in cascade. Wave propagation through the reservoir caused by transients in the upstream or downstream plant can be studied. Coordination of plants
can be tested to prevent the water level to exceed the
maximum level allowed.

Figure 5. Wave propagation in reservoir of 5 segments
and k = 1. The start level is 25m in all segments except
33m for the first one

4.2

Figure 3. Parameters for dimensioning of the reservoir

Main parameters are: middle and side shore-to-shore
width, height of each segment over a reference level,
start water level and temperature, maximum container height and a contour factor that decides the
shape of the reservoir coast line. The contour factor k (Figure 4), represents coast line as a generalized
ellipse:
k

Water ways. Penstocks and surge tanks

Water of the plant can be transported through enclosed or open conduits. The latter are basically
identical to the reservoirs but of the suitable prolonged shapes. The main enclosed conduit is a penstock model. Penstocks are sliced in segments as described above and are treated by the system as flow
connecting modules. Surge tank models represent
vertical water columns with the upper end opened to
the ambient environment.

k

 x  y
  +  =1
a b

(4)

Figure 6. Example of the interconnected penstocks and
surge tank

Penstocks and surge tanks can be connected directly
(Figure 6), and different groups of penstocks can be
coupled through interconnecting volumes. In that
way almost any shape and configuration of the waterways on both the inlet and outlet side of the turbine can be modeled.

5

Figure 4. Some examples of reservoir coastlines depending on the contour factor k

The Modelica Association

Electrical Power System

There are two modes of the generator modeling: unsynchronized/no-load turbine-generator and generator synchronized to the grid, in load operation. The
first mode is basically non-electric, as the turbinegenerator represents only a speed-controlled rotating
mass. The second mode requires modeling of the

253

Modelica 2006, September 4th  5th

K. Tuszynski, J. Tuszynski, K. Slttorp

active power of the grid, where the local turbine
governor reads whole grid frequency and power output of the local generator. The frequency signal
represents dynamics of the whole grid, or the angular
speed of all rotating units of the grid.
Figure 7 introduces the main components of the
power grid. Generator and Synchronizer represents
rotating masses of the turbine-generator driven by
the power from the turbine shaft, and loaded/driven
by the balance of the grid production  grid load.
Synchronizing part of this model generates pulses for
adoption of the turbine-generator speed to the grid
frequency. The Main Circuit Breaker (MCB) models
switch between no-load to load operation allowing
simulation of load rejection and connection to the
grid after a synchronization phase handled by the
synchronizer.

bine models are complete with guide vanes and runner angle actuators.
6.1

The actuators are
modeled as first order
transfer
functions
with a time constant
representing the actuator response time.
Transfer functions are
complemented
by
multiple speed limits
Figure 9: Kaplan servo
to allow simulation of
multi-step
opening
and closing of the guide vanes and runner angles.
Adding play and hysteresis allows analysis of the
influence of obsolete equipment. The model of the
Kaplan servo motors includes a Kaplan Cam curve
adjusted for the actual head of the water.
6.2

Figure 7. Overview of the power grid

The load model, Grid Load, represents the active
power demand of the grid. The load of the grid is
divided into three groups: resistive, frequency dependent and quadratic frequency dependent. The
number of units within each group is decided
through parameterization. The response to step
changes of the load is simulated by using first order
transfer functions.
As the grid load is constantly changing a normal distributed random number generator was added to the
load of each group. In addition to this there is also
the option to add a disturbance at any given time.
The Grid Production model is the representation of
all other production units connected to the grid. The
grid production units are divided into different
groups depending on their response time. This enables simulation of different behavior depending on
the types of power plants connected to the grid.

6

Actuators and servo motors

Models of water turbines

The simple approach to models of water turbines
builds on the assumption that flow through the turbine can be estimated the same as for orifices, i.e. QT
= Cv sqrt(pT), where Cv is the guide vane opening
factor. Power on the turbine shaft would be accordingly PT = QT pT , where  is the total turbine efficiency. The pressure drop over the turbine, pT, is
available from the models of water ways. This simple approach could be satisfactory but only if there is
tabulated data of Cv and  available. Both factors are
functions of runner speed, water head, runner angle,
etc. The problem will complicate further in case
modeling interest is bound to phenomena of unusual
runner situations, as at the turbine start-up, shutdown or load rejection. In reality such detailed information is not available or it would take a considerably long time and cost to get it.
HydroPlant library provides models according to this
simple approach above or alternatively as detailed

Mechanical machinery

Models of mechanical machinery cover main types
of water turbines, Pelton, Francis and Kaplan. TurFigure 8. Icon of detailed Kaplan model

The Modelica Association

254

Modelica 2006, September 4th  5th

HydroPlant  a Modelica Library for Dynamic Simulation of Hydro Power Plants

models calculating water velocity vectors on the inlet
and outlet of the turbine runner.
The detailed model (shown schematically as Modelica icon in Figure 9) covers three essential volumes
of the turbine; scroll case, guide vane and runner
(GVR) volume and draft tube. Flows are calculated
separately for guide vanes, for runner and for leakage through runner circumference from GVRvolume to draft tube.
Vectors of water flow velocities are shown in Figure
10 (from ref [3]); u is the velocity of the runner (1:
inlet, 2: outlet), v is the velocity of the water flow in
relation to the runner, c is the external velocity of the
water entering (1) and leaving (2) the runner.

Figure 10: Angles of Kaplan water flow velocities

Power on the turbine shaft is now calculated from
the change of the momentum on the runner:

PT = m _ dot    (r1  cu1  r2  cu 2 )

(5)

Vectors cu = c cos(), for  angle between c and u
vectors. One will ask naturally if information on all
angles required here is easier to get than for factors
Cv and ? This information is calculated automatically by assuming the runner and guide vanes are
well designed; it means mainly the following:
 Maximum efficiency is assumed at the nominal
power at the nominal head and speed
 Vector v1 is assumed at the nominal conditions
to coincide with angle 1.
 Vector c2 at the nominal conditions enters draft
tube at 2 = 90o

The Modelica Association

7

Control Challenges

The implemented controller is a standard PID turbine
governor, complete with a feed forward for power
change control. The error signal to the PI is:

e = f + ep  P

(5)

where f is the frequency error, P is the power error and ep is the speed regulation factor.
Setting of PID parameters depends on various control challenges.
Water level control: Each hydro power plant has an
assigned maximum water level allowed in the reservoir for environmental reasons. If this level is exceeded the hydro plant is normally fined. Since the
amount of water stored corresponds to stored energy,
the power plants will try to be as close to this level as
possible. Problems arise when the water reservoir
level is close to the max allowed level and the power
demand is low. In situations like this the plant will
be forced to let a certain amount of water through the
gates which is a waste of money for the plant and
produces environmental costs of dumping large
amount of water down the river. Tuning this kind of
control system takes a long time due to the long time
factor of a large reservoir which often results in settings of the controller for the worst case scenario.
Using models to tune this kind of system would both
save time and improve the performance of the controller.
Scheduling of turbine governor settings: Conventional turbine governors have normally two sets of
PID parameters; one for no-load mode of operation
and one for the generator synchronized to the grid.
Digital governors allow a practically unlimited number of PID settings, but logic switching between
those settings will become complex, error prone and
difficult to verify. HydroPlant library was developed
initially for testing different methods of adapting
PID settings to the actual mode of operation, actual
water way configuration and to the actual system
load and dynamics. An adaptive approach requires
on-line identification of the dynamics of both the
power grid and the local plant.
Nonlinear plant behavior: Plants having complex
waterways can be difficult to control. It will change
dynamics depending on the power generated (nonlinearities). HydroPlant library will allow development
of the simplified real-time models of the plants allowing continuous tuning of the PID settings.
Varying power grid: When tuning PID parameters or
developing alternative control schemes, it is of im-

255

Modelica 2006, September 4th  5th

K. Tuszynski, J. Tuszynski, K. Slttorp

portance to know the dynamics of both the power
grid and the local plant simulated. Identification of
the grid is more complicated as the main grid information is provided in frequency signal only. Identification considers mainly grid size in relation to the
size of the local generator. If that relation is large,
the power plant will not affect the grid frequency
noticeably (stiff grid) and the PID settings can be
chosen more aggressively. But in the other case (soft
grid), precautions need to be taken. In this case overshoots and oscillations in the local plant will affect
the grid frequency and the PID settings should consider mainly grid stability. The problem gets more
complicated as the grid changes, and the local generator works both on the stiff and soft grid. The HydroPlant library facilitates development of techniques for continuous, on-line, grid identification.
Schemes of joint control of plant units: The majority
of plants run several turbine-generator units on the
common water ways. There are serious control problems to be solved here to allow most efficient plant
operation or to avoid certain power divisions causing
vibrations, pressure oscillations or other forbidden
working situations.

8

ing and the grid frequency is falling below the nominal level (Figure 12).
The turbine starts and the governor (in no-load mode
of operation) controls turbine speed to the generators nominal frequency as it can be seen during the
first 110s of simulation.
After 110s synchronization is initialized, by sending
pulses to frequency set point in order to match the
generator frequency to frequency of the power grid.
After 300s the frequency of the generator is synchronized to the grid frequency, the MCB is closed, the
power reference is set to 50MW and new set of PID
parameters is applied. Generator power output increases until new load balance is reached.

Figure 12. Frequency of the grid and local generator
during start and synchronization

Simulation Results

Figure 13: Loading of the local generator

Figure 14: Pressure drops at the turbine runner due to
the water acceleration in the penstock.
Figure 11. Model of a complete hydro power plant

8.2
Simulation results from the example of a simple hydro power plant (Figure 11) are briefly presented
here. For a more in-depth result analysis please refer
to [4], and to the HydroPlant manual [5].
8.1

No-load, synchronizing and loading

This example will illustrate a hydro power plant acting under no load and when connected to the power
grid. Simulation starts when the grid load is increas-

The Modelica Association

Load Rejection

The particular shape of the turbine velocity profile
during load rejection is normally a guaranteed issue
and the ultimate test of turbine governor quality and
its settings.
Figure 15 presents opening of the MCB in 500s of
simulation. The speed rises but after approximately
100 sec is controlled back to normal. Behavior of the
guide vane and Kaplan angle servos can be studied
on Figure 16. As the guide vane servo is faster then

256

Modelica 2006, September 4th  5th

HydroPlant  a Modelica Library for Dynamic Simulation of Hydro Power Plants

angle servo, a large combination error can be seen.
The combination error means a discrepancy exists
between optimum angles leading water through the
turbine, which affects the turbine efficiency drastically.

Figure 15: Generator frequency at the load rejection

Figure 16: Guide vane position, Kaplan angle and angle reference

References
[1]

[2]

Elmqvist, H, Tummescheit, H and Otter, M
(2003): Object-Oriented Modeling of
Thermo-Fluid Systems. Dynasim Sweden,
UTRC, USA and DLR, Germany.
Roberson, Cassidy, Chaudhry (1998): Hydraulic Engineering. Second edition John
Wiley & Sons, New York, USA.

[3]

Kjlle, A.: Hydropower in Norway. Mechanical Equipment. A survey

[4]

Slttorp, K, Tuszynski, K (2005): Model of
a Hydro Power Plant  New Algorithm for
Turbine Governors, Master Thesis. Dept. of
Automatic Control, Lund Inst, of Technology, Lund, Sweden
HydroPlant Library. The Manual

[5]

(may be distributed on request)

The Modelica Association

257

Modelica 2006, September 4th  5th

K. Tuszynski, J. Tuszynski, K. Slttorp

The Modelica Association

258

Modelica 2006, September 4th  5th

Session 3b

Session 3b
Hardware in the Loop

The Modelica Association

259

Modelica 2006, September 4th  5th

Session 3b

The Modelica Association

260

Modelica 2006, September 4th  5th

Interacting Modelica using a Named Pipe for Hardware-in-the-loop Simulation

Interacting Modelica using a Named Pipe for Hardware-in-the-loop
Simulation
Arno Ebner

Anton Haumer
Dragan Simic
Franz Pirker
Arsenal Research
Giefinggasse 2, 1210 Vienna, Austria

phone: +43 50550 6663, fax: +43 50550 6595, e-mail: arno.ebner@arsenal.ac.at

Abstract
The paper presents a concept and an implementation
of Modelica simulation interaction using the operating system inter-process communication method of
the Named Pipe. The main aim of this presented
work is to implement a hardware-in-the-loop simulation (HILS) environment based on Dymola which
runs on a normal Microsoft Windows Personal Computer.
An energy storage test bench is connected by an analogue and digital data input/output card with the Dymola simulation computer. With this proposed system, particularly long-time simulations with sample
rates up to 30 Hz can be executed very cost effective.
Typical applications are simulations of drive cycles
to test energy storage systems in electrified vehicles
such as batteries or fuel cells. Other application examples are the verification of battery models, thermal management models or battery management system (BMS) models.
In this paper all methods used for implementation are
described in detail. Especially the concept of interprocess communication and the concept for real-time
and simulation time synchronization is discused.
An application example which uses the provided
concept is also shown at in this paper. In this example a longitudinal simulation of a vehicle is presented. The startup phase of the internal combusting
engine model and a short drive cycle in combination
with a connected real battery is shown.

1

Introduction

The traditional approach for simulating technical or
physical systems is to describe real systems in
mathematical models. These systems are described
with discrete equations or with continuous algebraic
and differential equations. The simulation environment has a solver algorithm which generates a soluThe Modelica Association

tion for the system model considering the initial values.
In some cases the user or other applications have to
interact with the simulation, for example to:
 Start or interrupt the simulation
 Change parameters or variables during the simulation
 Communicate with other applications, for example with another simulation environment
 Exchange data with an input/output-card or a peripheral communication interface
 Build up a hardware-in-the-loop simulation environment
Hardware-in-the-loop (HIL) is the integration of real
components and system models in a common simulation environment [1]. This means that some parts
of a system, which should be tested, are virtual and
other parts are real. HIL simulations are an important
method for the development of mechatronic systems.
An important advantage of HIL is that it allows function tests of mechatronic systems or components of
such systems under simulated real conditions. Therefore HIL helps to save cost and time compared to
conventional test runs on a real prototype.
There are three important consideations for the implementation of a hardware-in-the-loop simulation:
 The simulation of the dynamic system, in other
words the mathematical or physical models must
be processed in real-time.
 There must be synchronization between the time
in the real world (the so called real-time) and the
digital simulation-time of the simulation tool.
 The simulation tool must be able to communicate
e.g. with others applications or an I/O communication interface.
The Monitoring, Energy and Drives division at Arsenal Research does research and development on
components for Hybrid Electric Vehicles (HEV`s)
and electrified auxiliaries for vehicles. For that they
acquire know-how in the simulation of electric

261

Modelica 2006, September 4th  5th

A. Ebner, A. Haumer, D. Simic, F. Pirker

drives, of energy storage systems and in vehicular
simulations. A great deal of simulation models was
built up in Modelica and simulated with Dymola [2],
[3]. In order to verify and validate the implemented
models and the developed system components, a
connection to a hardware-in-the-loop simulation environment has to be implemented.
In that way in the provided paper an interaction of a
Modelica/Dymola simulation with components outside of the simulation tool is shown. At this proposed
HIL system the Dymola application runs on a standard Microsoft Windows Personal Computer. Actually two important processes run on the simulation
PC: one process is the Dymola application and one
process provides the input and output functionality
for the peripheral card. Details on implementation
for both tasks, first for the Dymola application using
external functions and furthermore for the peripheral
card application are given below.
This two processes communicate together using the
inter-process communication (IPC) methods provided by the operating system. In the proposed case
the tasks communicate via a so-called Named Pipe
mechanism. Through the first-in first-out behavior of
the Named Pipe communication method there is an
implicit synchronization between the two processes.
In this paper is described how to create and to open,
how to write to and how to read from the Named
Pipe and how to close it.

2

Inter-process Communication with
Named Pipes

The IPC method that is used in this work is the socalled Named Pipe mechanism. This IPC method is
available both on UNIX systems and on Microsoft
Windows systems. The semantic and the function
calls differ in the operating systems but the concepts
are the same [4], [5]. Only the implementation on a
Microsoft Windows operating system is shown in this
paper.
Named Pipes are designed for the communication
between the pipe server and one or more pipe clients.
They have first-in first-out behavior and can be accessed like a file.
Stdio.h standard C library functions for file handling,
such as fopen(), fclose(), fread() or fwrite() can be
used to deal with Named Pipes. However, the usage
of Microsoft Windows Software Development Kit
(SDK) functions gives a more powerful access on the
functionalities of Named Pipes. Specifically, using
the SDK a pipe server calls the CreateNamedPipe()
function to create an instance of a Named Pipe. The
The Modelica Association

client calls the CreateFile() or CallNamedPipe()
function to connect to an instance of the Named
Pipe. ReadFile() and WriteFile() functions allow
reading and writing to a specified Named Pipe.
In the presented work the Dymola process corresponds to the server process, which generates the
pipe and waits for a connection with a client (for instance the I/O process). This process then executes
the simulation steps, puts data in the communication
pipe and gets data from the client process.

3

Implementations in Modelica and
Time Synchronisation

The described mechanism of inter-process communication is implemented as an external function written in ANSI/ISO C. At Arsenal Research two main C
functions for the communication of Modelica with
other processes using Named Pipes are developed.
The AllocateResources() function creates and connects a Named Pipe. The function PipeIO() computes a string from the simulation variables array
calculated by Dymola and writes this string in the
Named Pipe. Then the function gets the data string
from the Named Pipe and computes an array of Real
variables for the Dymola simulation solvers.
In Figure 1 the flow chart of the functionalities of the
server process is shown. Specifically, the function
AllocateResources() and the function PipeIO() are
described. For these functions a static library is
build. This library is linked to the model using the
function definitions. In Dymola a wrapper function
to convert the external C function to a Modelica
function is defined.
For a working HILS it is important, that the simulation time in the simulation application is synchronized with the real time. This synchronisation in
Modelica is achieved by using the when clause in an
algorithm statement:
...
when (time >= SimuNext) then
(SimuNext, input) := PipeIO(time, output);
end when;

In this short code fragment time means the simulation time in Dymola and SimuNext means the realtime. input means an array of Real variables taken
from external C code to Modelica and output means
an array of Real variables taken from Modelica to
external C code.

262

Modelica 2006, September 4th  5th

Interacting Modelica using a Named Pipe for Hardware-in-the-loop Simulation

Figure 2: Flow chart of the client process.

Figure 3: Icon and parameter settings of the Pipe
block.
Figure 1: Flow chart of the server process, which
runs as an external function call of Dymola.
The simulation process gets the real-time information from the client process via the Named Pipe IPC.
As long as the real-time is greater than the simulation time in Dymola a new inter-process communication cycle get processed and the function PipeIO()
gets called. As long as the real-time is smaller than
the simulation time new simulation steps of the Dymola solver get executed.
In figure 2 the client process of Named Pipe IPC is
shown. In this process the data in- and output functions and the calculation of real-time information for
the simulation application using functions from the
ANSI/ISO C library time.h are executed.

The Modelica Association

All inter-process and simulation time synchronization functionality are combined in the so called Pipe
block. This block is shown in figure 3.

4

Application Example: Hardwarein-the-loop Energy Storage Test
Bench

The HILS environment presented in this paper is a
very cost efficient system which is based on a normal Windows PC platform.
The communication between the simulation PC and
the energy storage test bench is realized by an analogue inputs and outputs card. Specifically, a commercial data acquisition (DAQ) Card from National
Instruments (NI) was used for the implementation.
By using the DAQ functions from NI the simulation

263

Modelica 2006, September 4th  5th

A. Ebner, A. Haumer, D. Simic, F. Pirker

tool can communicate with the interface card [6].
The main components of the energy storage test
bench are a stack of electronic power supplies and a
stack of electronic loads.
The technical data of the energy storage test bench
is:
 Voltage:
0V-600V
 Current:
600A charge and 750A discharge
 Peak Power: 96 kW
The target applications of this HIL-test bench are the
development and the test of energy storage, thermal
management and battery management models.
The concept diagram for this HILS-environment is
shown in Figure 9. In this application example the
vehicle model calculates the loads for the battery.
During the simulation the instantaneous real battery
conditions (Voltage, Current, and Temperatures) are
considered by Dymola. The electric drives are modelled using the SmartElectricDrives library [7], [8].
The following simulation results show the first 30
seconds of the New European Drive Cycle (NEDC)
of a conventional vehicle. After 2 second the internal
combustion engine of the vehicle is started for 2 seconds, which is illustrated in Figure 4. Figure 5 shows
the shaft speed of the ICE. It appears that the motor
is running with idle speed after 4 seconds. During the
starting process the starter motor has a defined current demand for the battery. In figure 6 this current
demand is shown. At time t=4s the ICE is running in
idle speed and at time t=10s the vehicle begins to
drive following the NEDC. In these phases the alternator produces electrical power, which charges the
battery of the vehicle.
With the proposed HIL interface the electronic load
creates a real electric current drain for the real battery. The electronic power supply generates a real
charging current for the real battery connected to the
energy storage test bench. In figure 7 the measured
current in the battery pins and in figure 8 the real
voltage at the battery pins is shown.

Figure 5: Simulation result, shaft speed of the ICE

Figure 6: Reference current for battery  output of
the HIL simulation

Figure 7: Real current in battery input of the HIL
simulation

Figure 8: Real voltage at battery input of the HIL
simulation

Figure 4: Starting the ICE after 2 seconds for 2 seconds and simulate first 30 seconds of the NEDC

The Modelica Association

This HIL simulation experiment was executed on a
MS Win32 PC with Intel Pentium Mobile processor
with 1.8 GHz clock. In Dymola the Dassl integration
method is used with a tolerance of 0.001. 25Hz Input/Output communication frequency was chosen.

264

Modelica 2006, September 4th  5th

Interacting Modelica using a Named Pipe for Hardware-in-the-loop Simulation

Figure 9: Application example, functional diagram of the HILS energy storage test bench

5

Conclusions

References

The Modelica hardware-in-the-loop simulation
approach using Named Pipes inter-process communication methods was shown in this paper. This
proposed system does not need an expensive
true real-time platform. It bases on a normal
Windows PC with a Dymola simulation environment and a communication interface card for inputs and outputs. Complex models can be simulated with an in-/output sample rate up to 30 Hz.
The HIL energy storage test bench which was
proposed as application example in this paper is
under operating conditions at Arsenal Research
since the begin of 2006. With this HIL test platform particularly long-time simulations such as
drive cycles test of energy storage systems or verifications of battery models, thermal and battery
management models was done.
As future work Arsenal Research will implement
the proposed inter-process communication algorithm also on a Dymola application which runs on
a Linux PC.

[1]

[2]

[3]

[4]

[5]

[6]

[7]

Abbreviations
BMS
DAQ
HEV
HIL(S)
ICE
I/O
IPC
NEDC

Battery Management System
Data Acquisition
Hybrid Electric Vehicle
Hardware-in-the-Loop (Simulation)
Internal Combustion Engine
Input/Output
Inter-process communication
New European Drive Cycle

The Modelica Association

[8]

265

Verein Deutscher Ingenieure, VDI Richtline 2206, Entwicklungsmethodik fr mechatronische Systeme  Design methology
for mechatronic systems, June 2004.
Dymola, Dynamic Modeling Laboratory,
Users Manual, http://www.Dynasim.com:
Dynasim AB, 2004.
P. Fritzson, Principles of Object-Oriented
Modelling and Simulation with Modelica
2.1. Piscataway, NJ: IEEE Press, 2004.
Microsoft MSDN Library,  Interprocess
Communication

Named
Pipes,
http://msdn.microsoft.com/library/enus/ipc/base/named_pipes.asp, 2006.
Elmenreich W., Systemnahes Programmieren  C Programmierung unter Unix
und Linux, 2002.
National Instruments Document, DAQ Traditional NI-DAQ User Manual, Version 7.0, April 2003.
D. Simic, H. Giuliani, C. Kral and F.
Pirker, Simulation of Conventional and
Hybrid Vehicle including Auxiliaries with
Respect to Fuel Consumption and Exhaust
Emissions, SAE World Congress, Detroit,
2006.
H. Giuliani, C. Kral, J.V. Gragger, F.
Pirker, Modelica Simulation of Electric
Drives for Vehicular Applications - The
Smart Drives Library, ASIM, Erlangen,
2005.

Modelica 2006, September 4th  5th

A. Ebner, A. Haumer, D. Simic, F. Pirker

The Modelica Association

266

Modelica 2006, September 4th  5th

Parameterisation of Modelica Models on PC and Real Time Platforms

Parametrization of Modelica Models on PC and Real time platforms
Matthias Kellner

Martin Neumann
Alexander Banerjee
Pritesh Doshi
ZF Friedrichshafen AG
Graf-von-Soden-Platz 1, D-88046 Friedrichshafen, Germany
matthias.kellner@zf.com
martin.neumann@zf.com
alexander.banerjee@zf.com

Keywords: model based development, dynamic
model parametrization, SW-Tests, ZBF-Parameter,
Realtime

1

2

Introduction

Throughout the development process of control units
for new transmission system, computer models are
needed to perform different tasks, such as concept
evaluation and the design and testing of controllers
in MiL, HiL and SiL environments. These models
will be used within different CAE-tools and different
environments. To avoid redundancies and sources of
errors the parametrization of these models using the
same set of parameters is preferred, since these will
change during the development process. Furthermore, the parameters will be kept within at one location. The only possibility to deal with this problem is
to keep models and parameters separated, which
means that models have to be parameterized using a
set of files. Unfortunately, some environments do not
allow file I/O operations. Even though no file I/O
operations are available, for example on Real time
platforms, there is still a strong need for flexible parametrization. Several approaches have been developed to overcome these challenges, especially for
Dymola/Modelica models which will be presented
within this paper.
In the following chapter the integrated use of vehicle
models within ZF electronics development will be
introduced. In chapters 3 and 4 the ZBF-parameter
format will be discussed as well as the different parametrization approaches. With the help of an example the use of one of the approaches will be illustrated. Finally the results will be summarized and
open questions will be addressed.

Integrated use of powertrain models within ZF electronics developments

Within this chapter the use of simulation models
within the ZF electronics development will be illustrated, concentrating on passenger car applications.
The focus will be an integrated use of these models
from specification phase up to series application. The
use of Dymola models within Hardware in the Loop
(HiL)-simulation requires some adaptations within
Dymola for parametrizing models on real time platforms.
Rising demands for better comfort, more power and
lower fuel consumption as well as increased integration of different systems lead to a higher weighting
on software developement. Although the development period has to decrease, the quality of the software and the level of customer satisfaction have to
be continuously improved. For validation and verification purposes almost 40% of the total budget for
software development has to be invested [1].

Test
expenditure
 ReUse
 Automation
 Optimization

Quality and scope of software

Figure 1: Test Expenditure of Transmission Software

The Modelica Association

267

Modelica 2006, September 4th  5th

M. Kellner , M. Neumann, A. Banerjee, P. Doshi

As can be seen in Figure 1 the necessary testing expenditures increase disproportionately due to higher
quality requirements. These ever increasing demands, which are closely linked to costs, can only be
taken care of by improving efficiency. The application of ReUse, automation and optimization of testing processes can reduce the testing expenditures up
to about 30% [2].
In order to reduce the time used for developing a
new product the parallelization and decoupling of
mechanic, electronic and software development is
needed. By reusing models within different testing
environments the service expenditures can be reduced. Testing at an early stage in development will
also lead to a decrease in development expenditures.

Figure 2: Testing as part of the software
development process
To ensure a development of software in parallel and
independently, appropriate environments for development and testing are needed. These should also
include simulation capabilities. In order to service
the software development process, different simulation and development tools are in use, which allow
the simulation of complex full vehicle models as
well as for testing control units on HiL test rigs. All
tools have to be suitable for an integrated model
based development process orientated along the Vmodel approach and also must provide thorough
analysis possibilities which can facilitate the finding
of errors at an early stage. For the modelling of powertrains the software tool Dymola is thought to be the
standard.
The electronic development simulation models are
primarily in use for testing the functionality and suitability for the series application of control unit software [4]. These tests are an essential part of the
software development process.
The Modelica Association

Dynamic models are needed to test software independently without involving the mechanic and electronic hardware. With the help of different testing
environments the software can be tested at each level
of
maturity.
Figure 2 shows the development phases and the adjoined testing environment and methods. The testing
environments Model-in-the-Loop (MIL), Softwarein-the-Loop (SIL) and HIL cover the whole process
of software development. Hence models are not only
needed in the conceptual phase, the left part of the
V-model, but rather in the testing phase, presented
on the right side of the V-model. In order to minimize service expenditures a unitary use of simulation
models within all testing environments must be
stipulated. The consequent application of the ReUseconcept does not only reduces the service expenditures for about 50%, but also reduces expenditures
for integrating these models in the development
process while heavily simplifying the version management.
Since in reality the integration of ZF products
strongly varies among the different customer applications, a vast amount of different models are
needed. One major objective is then to generate a
universal model that can be configured for the appropriate customer application by solely changing
model parameters.
One major disadvantage of Modelica is the inability
to easily parametrize models for different development platforms. Therefore, an approach has been
developed in ZF that has the ability to separate models from the parameters. The model parameters are
stored within standardized ZF-ASCII-files, which
will then be loaded at initialization [3]. In order to
ensure a parametrization of models with ZBF-data
on platforms without file I/O, e.g. dSPACE, modifications and adaptations within Dymola have been
done. These procedures will be described in the following chapters.

3

ZBF-Format and Parametrization
of models on platforms With File
I/O

The ZBF-Format will be discussed in chapter 3.1,
with an emphasis on its advantages in comparison to
other parameter formats. In the following paragraphs
an approach will be discussed which enables a parametrization of models by using ZBF-data within
environments with File I/O.

268

Modelica 2006, September 4th  5th

Parameterisation of Modelica Models on PC and Real Time Platforms

3.1

ZBF-Parameter
NetCDF:

As stated in the previous chapter, there is a strong
need to separate models from parameters. A detailed
description of the ZBF-format can be found in [3].
For the sake of completeness an example of the
ZBF-format is included in Figure 3.
J1
[kgm^2] 0.1
; scalar parameter
InU [-]
0
1
2
OutY [-]
0
1
2
; two vectorial parameters
Test_Table2D[
[-] U1 [-] 0
1
2
2
Y [-] -2 -1
0
1
Y [-] -1
0
1
0
Y [-] 0
1
2
Test_Table2D]
; Two-Dimensional-Table

3.2

Figure 3: Parameterization with File I/O
ZBF originated from the strong need for exchange of
formatted data between different Excel-programs.
Thereinafter a broad use has been promoted for C
und C++ calculation programs. It has been finally
declared as a standard within ZF.
A big advantage of the ZBF-format is that it allows
the provision of parameters which do not comply
with SI-units, something usual for transmission design (e.g. [rev/min] instead of [1/s]) New approaches
such as XML are not in use, since a large amount of
programs are already able to read ZBF-data files.
Furthermore, it is quite simple to transfer ZBF-datafiles to Excel and edit these data files by using simple test editors.
With the help of an easy example, the differences of
these different formats can be illustrated. A scalar
parameter in ASCII such as the moment of inertia of
the engine can be given as:
ZBF:

JMot [kgm/s^2] 1.5
XML:

<Identifizierer>
<name>JMot</name>
<einheit>kgm/s^2</einheit>
<wert>1.5</wert>
</Identifizierer>
The Modelica Association

netcdf
motor{
dimensions:
One = 1;
variables:
float JMot(One);
JMot:long_name = "Motortrgheitsmoment";
JMot:units = "kgm/s^2";
data:
JMot = 1.5;
}

Parametrization of models on platforms
with File I/O

For the development of control function, models are
used by CAE-tools running on PC-platforms with a
file I/O operating system. A description of the approach on how to parameterize models on platforms
with file I/O has been given in [3]. A short summary
of the approaches in the forthcoming chapter, together with the necessary terms, will be presented
next.
The parameters which are usually scalars, vectors
and matrices are stored separately form the model at
a central location (Figure 4). In order to read these
data files, an appropriate parser will be linked to the
model at the time of compilation. With the help of
the parser, the model then reads all the necessary
data at initialization and all parameters will be stored
within a special data structure.

Model

Parser

I/O

Parameter

Figure 4: Parameterization with File I/O
The use of self developed C-Functions which will be
linked to the model during compiling help to find the
parameter and assign it to the component. Hence the
model can be implemented within different CAEapplications, which run on an operating system with
file I/O. The big advantage is that there is no need to
modify the parametrization process based on what is
required for the present application.

269

Modelica 2006, September 4th  5th

M. Kellner , M. Neumann, A. Banerjee, P. Doshi

4

Parameterization of models on
platforms Without File I/O

For controller testing, Dymola models have to be
implemented in environments, such as SiL and HiL,
with programs that do not allow for file I/O operations, such as dSPACE. Therefore another method
has to be used. Moreover, the strong need for rapid
prototyping calls for flexible parameterization within
these environments. In the following chapter two
realizations will be discussed. The first one will be
referred to as static parameterization and the second dynamic parameterization.
4.1

which has been applied in dSPACE for easy reparameterization of models on their hardware.
For this purposes the Dymola model will be imported into Matlab/Simulink as an S-Function. An
extra parameter will be added to the S-Function during its generation by modifying the SimStruct to
Dymola interface file ss2dym.c. Using this additional
parameter the new set of ZBF parameter files can be
passed on to the model in the form of an array of
double values. An array is generated by Matlab from
the default set of parameter in order to locate the parameter memory which will be needed later for reparameterization (Figure 6).

Static Parameterization
Model

Within environments that do not allow file I/O operations one straight forward approach is to attach
the parameter files to the existing Code. This will be
done by converting the ZBF-files into C-code files
and storing the parameters in a single characterstring. Afterwards, these files will be linked to the
model including the Parser throughout compilation
(Figure 5).

Parser
Parser

Parameter
Memory

dSPACE with RT-OS

PC
with
Win-OS

Parameter

PythonScript

Figure 6: Dynamic Parameterization
Model

Parser
Parser

Parameter

Figure 5: Static Parameterization
A slight extension of the existing Parser algorithm
allows for proper parsing of the string and hence
parameterization of the model at initialization. This
approach is very useful in situations where parameters do not change very often or the model has to be
exported as a single binary source.
4.2

Dynamic Parameterization

In order to test the robustness of a controller for
various model settings, the static approach can be
extended. This is done by changing the parameters
directly within the code. Therefore a method is used

The Modelica Association

The model with the additional S-function parameter
(Figure 7) is exported into the dSPACE Real-Time
platform using the Matlab RTI workshop. While exporting the model into dSPACE, the double array is
converted into C-Code and subsequently linked to
the model. This guarantees that the appropriate
memory space can be accessed for dynamic reparameterization. An SDF-file for dSPACE simulator is generated as well.
Finally the parameters can be transferred from the
PC to the computer with the RT-OS with the help of
Control-Desk. Fortunately, the re-parameterization
can be done outside of Matlab. With the help of a
python script the model parameter files will be reparsed on the PC-platform with a regular file I/O,
where the parameters will be converted into a double
array of the same structure as the one for exporting
purpose.

270

Modelica 2006, September 4th  5th

Parameterisation of Modelica Models on PC and Real Time Platforms

With the help of commercialized model packages,
for example PowerTrain and MultiBody, as well as
ZF-specific packages, as ZFLib, Hybrid and CarSim,
powertrain models can be developed for different
testing purposes (vgl.Figure 8).
In Figure 9 a vehicle model is shown as it is used for
HIL-Simulation at ZF. It consists of the following
sub-modules: engine, alternator, torque converter
with torque converter clutch, ZF automatic transmission, rear axis, simple vehicle model with brakes,
Control units (electrical/hydraulical), signal bus and
I/O-interfaces.

Figure 7: Additional S-Function Parameter
In order to reload the new parameters, the default
parameters within the Real-Time model are accessed
by another python script using the read/write routines from rtplib and ControlDesk. The length of the
array is matched with that of the default array and
the default parameter in the model is overwritten
with new one. Finally, the initialization flag is activated and the model is re-initialized.

5

Dynamic ZBF-Parametrization of a
passenger car model on dSPACEHIL-Simulator

For Dymola vehicle models at ZF, all relevant mechanical, electrical and hydraulic modules needed for
software development and HiL testing have been
modelled.

Figure 8: Modelica Libraries for HIL Tests

The Modelica Association

Figure 9: Dymola-Vehicle used in MIL, SIL and
HIL environments
The degree of detail in the powertrain modules has to
be adapted according to the field of application.
Models which are used for testing purposes require a
thorough consideration of internal interactions. For
example the interaction of a set of clutches while
doing a change in ratio requires a detailed application of system hydraulics modelling. Whereas the
vehicle module has been simplified to a minimum
and the engine has been represented by look-up tables in order to guarantee real time capability.
Due to the fact that ZF products will be implemented
in different vehicle settings there will be a vast variety of models. The only possibility for dealing with
this situation is following a modular approach, storing modules in libraries and separating models from
data. The models can be parametrized by using data
sets which relate to a specific version of vehicle set
up. The basis for the parameter format is the ZBFformat, which has been described in chapter 3.1. The
parametrization process of a vehicle model which is
used for HiL-testing of a control unit on a dSPACE
is explained in the following section.
The parameters have to be stored in ZBF-data files
as well as an appropriate allocation within the model
has to be done. Afterwards the model will be in-

271

Modelica 2006, September 4th  5th

M. Kellner , M. Neumann, A. Banerjee, P. Doshi

cluded in a Simulink block. For the first time generating the model S-function the parameters will be
read from file and stored in a double array within
Matlab. At the same time the S-function will be supplemented by an additional parameter, which most
often is referred to as the third parameter. This parameter is the essential link to the double array.
Whenever the model is transferred to dSPACE by
applying the RTI-Workshop the double array will be
converted into a C-File and afterwards linked to the
model. All described steps will be done automatically.
With the help of the described dynamic parametrization approach (see chapter 4.2) model parameters can
be changed on the dSPACE-simulator. This is done
by applying appropriate Python-scripts which allow
for an easy change of parameters without starting the
implementation process once again. This approach is
quite essential, since not all dSPACE-HiL-simulators
at ZF provide a Matlab development environment.

Bild 10: ControlDesk Interface
Appyling ControlDesk a graphical I/O user interface
is set up, which interactes with the model on the
dSPACE board. All necessary inputs and outputs of
the testing environment can easily be monitored or
changed. Typically the hardware configuration, e.g.
the control unit variant and CAN-Bus-system can be
selected. All control inputs of the Dymola-model
such as ignition, selection of gear ratio, throttle and
brake pedal position can be changed manually or
automatically.

The Modelica Association

Finally by applying the mentioned Python-scripts
within the windows-OS the appropriate set of ZBFparameters of a vehicle variant will be read from file.
By activating the third parameter within the modelSDF-file, parameters will be mapped into the allocated memory space of the model which is implemented on the dSPACE platform. Hence parameters
can easily be changed while the model is operating at
running time.

6

Summary and Outlook

In order to use models within different tools and environments models and parameters have to be kept
separate from each other. Within ZF these parameter
files are set up according to a standardized description referred to as ZBF. Approaches have been developed which enable a uniform and unanimous use
of these files on all simulation platforms independent
of whether they provide file I/O routines or not. For
environments with file I/O, typically PC platforms,
an approach based on linking a Parser algorithm to
the model has been outlined in [3]. For environments
without file I/O two realizations referred to as static
and dynamic parameterization have been developed,
where the latter allows for flexible parameterization.
The static method generates a single source from
model, parser and parameters. The dynamic method
utilizes the method used by dSPACE. With the help
of a Python script, the parameters will be read from
ZBF files and directly mapped into the parameter
memory of the model, hence facilitating the modification of parameters on Real-Time platforms.
Future work includes the issue of overruns occurring
at initialization, presenting opportunities for improvements, especially for some specific environments which do not allow for overruns even at initialization. The optimization of code can also be possibility by applying the parameter evaluation feature
within Dymola, which changes parameters into
numbers and hence simplifies the code. Presently,
his is not possible whenever parameter-files are in
use. An extension which allows for optimization
even when parameter files are in use can be very
helpful if a more efficient Dymola code is to be developed.

272

Modelica 2006, September 4th  5th

Parameterisation of Modelica Models on PC and Real Time Platforms

7

References
[1]

[2]

[3]

[4]

G. Bauer, M. Gromus, M. Neumann
and C. Tapia. Model-based software
development in production applications with a closed-loop controlled
lockup clutch in a ZF 6-speed transmission, Fisita 2004
H. Deiss, B. Aumann, T. Schober
Time to Market in der Softwareentwicklung - Reuse und Standardisierung bei Getriebesteuerungen - Elektronik im Kraftfahrzeug, BadenBaden 2000, Germany
J. Khler and A. Banerjee Usage of
Modelica for transmission simulation in ZF, pp. 587-592, Gerhard
Schmitz, Editor, Proceedings of the
4th International Modelica Conference, Hamburg March 7-8, 2005,
Germany
R. Gonzelez-Ramos, M. Neumann,
A. Banerjee and J. Khler Standard
drive train models for increased
Testing Efficiency, pp. 243, Proceedings of the 4th IAV Symposium,
Berlin Juli 9-10, 2005, Germany

The Modelica Association

273

Modelica 2006, September 4th  5th

M. Kellner , M. Neumann, A. Banerjee, P. Doshi

The Modelica Association

274

Modelica 2006, September 4th  5th

Synchronising a Modelica Real-Time Simulation Model with a Highly Dynamic Engine Test-Bench System

Synchronising a Modelica Real-Time Simulation Model with a
Highly Dynamic Engine Test-Bench System
R


Dietmar Winkler Clemens Ghmann
Technische Universitt Berlin
Department of Electronic Measurement and Diagnostic Technology
Sekr. EN13, Einsteinufer 17, 10587 Berlin
{Dietmar.Winkler,Clemens.Guehmann}@TU-Berlin.de

Hardware-in-the-Loop system

This section provides some more details about the applied HiL system.
The HiL system consists of a highly dynamic engine
test-bench and a HiL simulator. The principle setup is
depicted in Fig. 1.

Introduction

Dynamometer Control
Speed
Torque

Drive

1

2

Physical I/O

The modeling language ModelicaR is widely used
by the automotive industry. In connection with
Hardware-in-the-Loop (HiL) testing it can accelerate
the development process enourmously. This paper
presents the application of ModelicaR models for a
Hardware-in-the-Loop simulation using a highly dynamic engine test-bench system. Certain steps have
to be taken to be finally able to connect the real-time
ModelicaR model to the test-bench system. One of the
most important issues when connecting a simulation
model to a hardware device is the synchronisation process between them. This includes the determination of
interface signals, the adaption of the models according
to existing interfaces, and the actually online test of
the new real-time adjusted model. All these parts shall
be explained in this paper.
Keywords: Hardware-in-the-Loop simulation, realtime, RT-LAB, engine test-bench system

a very early development phase using an engine testbench for example.
Because of a cooperation of our Department of Electronic Measurement and Diagnostic Technology of the
Technische Universitt Berlin with the IAV GmbH
Berlin, our department has access to a highly dynamic engine test-bench system. This test-bench system is used in connection with the model based calibration of electronic control units (ECU) of engines
and transmissions [1]. As a next step object-oriented
ModelicaR models1 will now be used to simulate the
behaviour of all parts of the vehicle except the engine.

Control loops & Limits

Abstract

PVS

The Modelica Association

275

Engine

Dynamometer

Virtual I/O

Data
acquisition

Nowadays the car manufacturers try to reduce the development times of new cars in order to cut the costs
and therefore stay competitive. At the same time the
manufacturer is interested in the potentials of new
TCP/IP
Model of vehicle
engine developments in terms of fuel efficiency and
Schedule
exhaust-gas emissions. This results in engine tests beHiL
ing carried out on so-called engine test-benches inPC Workstation
Control System
Simulator
stead of using roller test-benches or expensive test
drives. The advantage of an engine test-bench is that
one does not need a prototype car into which the en- Figure 1: Principle setup of the highly dynamic engine
gine has to be mounted. A detailed model of the test-bench system  Test-Bench of the Future
cars drive-train is sufficient to yield fuel saving and
R
1 Modelica
exhaust-gas emissions measurements from the engine
is a free modelling language developed by the
test-bench. Engine calibrations can be carried out at Modelica Association  www.modelica.org
Modelica 2006, September 4th  5th

D. Winkler, C. Ghmann

2.1

Test-bench system

The highly dynamic engine test-bench system consists
of a combustion engine which is directly coupled with
an electric Dynamometer which in turn is controlled
by a power electronic converter (Drive). In addition to
that a Control System is needed to supply the needed
control signals (e.g. Pedal Value Source  for the engine, Dynamometer Control for the Drive) and to acquire the measurement data (e.g. speed and torque
signals of the shaft). All this is done by the physical input/output cards (i.e. Analogue/Digital and Digital/Analogue cards).

2.2

transmission drive line model of the Power Train
Library [4] (see Fig. 2).

Real-time system

Figure 2: Graphical presentation of the drive line
The real-time system consists of a standard PC hard- model
ware running the real-time operating system QNX R 2
and the real-time software RT-LAB3 . This HiL SimAs driving cycle an excerpt of the New European Drivulator is connected with the Control System via an
ing Cycle (NEDC) was used (The only reason for not
ether-net (UDP/IP) connection. To guarantee loss-less
using the whole NEDC was to speed up the simulacommunication a watchdog is implemented in the simtion work, since for this work no additional informaulation model.
tion could be gained by using the complete NEDC.).
Figure 3 shows the velocity in km/h over time of the
2.3 PC Workstation
NEDC excerpt when simulated offline with DymolaR .
R

The PC Workstation is also a standard PC. On this The standard Modelica model has no input and outPC the ModelicaR simulation models are created with put connectors so far. These connectorsRare needed
DymolaR 4 . These models are not suitable for real- when integrating the model into Simulink . In a next
step we have to define which signals the test-bench
time yet.
system needs and which signals the ModelicaR model
R

In order to adjust them for real-time the Dymola
model has to be included in a MATLABR /SimulinkR needs in order to function correctly as a unit. Also the
model5 (this is done by using the DymolaBlock). The exact mode of interaction of the simulation model and
real-time software RT-LAB then automatically trans- the test-bench system has to be defined.
lates the resulting model with the RealTimeWorkshopR 5 , transfers the C-code to the HiL Simulator via 3.1 Requirements for test-bench application
FTP and starts the compilation process. For another
In our application we came across four main issues to
example of how to use DymolaR in connection with
clarify:
RT-LAB see [3]. Once that is finished the compiled
model can be loaded and executed via the RT-LAB
1. Which parts are simulated and which exist as
main control panel on the PC Workstation.
hardware?

3

2. What control strategy is used?

Simulation models

3. How to synchronise the model and the testbench?

To demonstrate the synchronisation of a ModelicaR
model, we choose a standard 6-gear automatic

4. What interface signals are needed depending on
the control strategy?

R
2 QNX

Software Systems  www.qnx.com
3 RT-LAB
is a real-time software of Opal-RT
 www.opal-rt.com
R
4 Dymola
is a dynamic modelling software of Dynasim AB
 www.dynasim.se
R
R
R
5 MATLAB
/Simulink
/RealTimeWorkshop
is a simulation package of The Math Works, Inc.  www.mathworks.com

The Modelica Association

3.1.1

Used hardware

The answer to the first question is quite simple. We
want to simulate a drive line model in connection with

276

Modelica 2006, September 4th  5th

Synchronising a Modelica Real-Time Simulation Model with a Highly Dynamic Engine Test-Bench System

Figure 3: Excerpt of NEDC

engine test-bench system. Therefore our hardware If we would use a manual shift gearbox a speed signal
device is the engine. So the parts which will be simu- for controlling the dynamometer of the test-bench can
lated in real-time on the HiL simulator will be:
not be obtained so easily for certain modes of operation. One of these modes being the shifting of the gear.
 Driver (modified)
When a gear is shifted the clutch (which is located
between the engine and the transmission) is opened.
 fake Engine (modified)
When the clutch is opened it is difficult to determine
 Transmission
the speed of the free spinning engine side of the
clutch. To do this correctly some parameters such as
 Axle (modified)
the internal friction and the inertia of the engine have
to be known in detail. Obtaining these parameters is
 Car
not very easy (if not sometimes impossible) and comes
Some more details on the kind of modification applied with a lot of measureing effort. On the other hand the
will be given later in Section 3.2.
applied load torque of the engine side of the clutch during gear shift is known to be zero (this is true when neglecting the inertia of the clutch for now). So by using
3.1.2 The right control strategy
the M  -control strategy whilst shifting the gear we
The second question is bit harder to answer. Depend- can overcome the uncertainties of not knowing the coring on the used test-bench system there might differ- rect control speed (as needed by n  -control). Now
ent control strategies available. A control strategy de- the reader may ask why not using M  -control durfines the kind of signals with which the test-bench ing all states of operation?
system is controlled. In our case we have the choice One reason for this is the safety issue that it is always
of controlling the dynamometer with either a torque good to know and to check the speed set-point rather
signal (M for moment of torque) or a speed signal than handing over a torque set-point from which a ac(n). The engine is always controlled via the pedal celeration or deceleration will result. A too big torque
value source (). These control strategies are there- request and hence a too big acceleration might lead to
fore called M  - or n  -control. Depending on the speed too high for the test-bench system even before
operation mode one is more preferable to the other.
the system itself can react. Obviously things like this
In our case the drive line simulation model includes an can be avoided by an appropriate design of the testautomatic gear transmission with a torque converter. bench system. But in most cases this leads to a very
This hydraulic torque converter connects the engine complicated control structure. So in practice one uses
outlet (pump) with the transmission inlet (turbine). A the M   control strategy for modes where n  speed difference of the pump and the turbine of the control is not suitable. See [1] for more on this topic.
converter yields a transfer torque and vice-versa. So
whenever there is a torque on the load side (transmis3.1.3 How to synchronise
sion) the inlet speed of the torque converter can be
computed. So we can use the speed signal to control Section 2.2 described in short the coupling between
the test-bench system (the dynamometer to be more the test-bench system and the real-time computer on
precise) at all times of simulation.
which the drive line model is running. We will give a
The Modelica Association

277

Modelica 2006, September 4th  5th

D. Winkler, C. Ghmann

short example to get a better understanding of how the
whole synchronisation process between the test-bench
system and the drive line model works.
At first the the test-bench engine is started and put
into idle mode (this can differ if someone is interested
in measurement results of a cold-start and run cycle). In our example the engine is now running in
idle speed and controlled by the control software of
the test-bench system. In the meantime the drive line
simulation model was loaded into the HiL-simulator
(see again Fig. 2). For now both the test-bench system and the HiL-simulator are already communicating
with each other via UDP. But until now they are just
listening to each other. The next step would be to
connect the simulation model to the test-bench system
so that the drive line model controls the pedal value
source  of the real engine and the set-point of the
torque or the speed (depending on the control strategy)
of the dynamometer. But before this connection can be
made the difference of the control signals (i.e. , n, M)
between the measured values of the test-bench system
and the calculated values of the simulation model may
not exceed a certain boundary. To ensure this we use
the Boolean signal syncTBS6 which when activated
forces the drive line model to accept the engine torque
and engine speed as input set-point for the torque converter (or clutch in case of a manual shift transmission). This way the drive line model is running at the
same speed like the engine regardless of the measured
input torque from the engine.
Once the engine and the drive line model are running
at the same speed the drive line model can take over
the control of the engine. This is done by a software switch of the test-bench system. After setting the
syncTBS signal to false the HiL simulator controls
now the engine via the pedal value source  and the
speed signal n or the torque signal M, depending on
the control strategy.

control strategies and the signal to switch the drive line
model into synchronisation mode.
It follows a list of the the inputs used (extra signals are
marked with *).
Inputs to the simulation model:
 speed of the test-bench engine [rpm]
 torque of the test-bench engine [Nm]
 start of driving cycle [boolean]*
 n  -control active [boolean]*
 synchronize model to test-bench [boolean]*
As outputs again we needed some additional signals to
display the current state of the simulation model (again
marked with *). These are optional and not required
by the test-bench system.
Outputs to the test-bench system:
 drive line speed [rpm]
 drive line torque [Nm]
 pedal value source  [p.u.]
 vehicle speed [km/h]*
 cycle speed set-point [km/h]*
 selected gear*

3.2

Modification of simulation models for
HiL

The previous section showed the interface signals necessary to couple the HiL simulator(drive line model)
to the test-bench system. Now this section will give
some more more details in which way the drive line
model had to be adapted in order to be able to provide
3.1.4 Interface signals
the interface signals or to react accordingly to them.
Up to now we should have identified all necessary in- The Driver, the Engine and the Axle models had to
terface signals. These depend also on the used con- be modified:
trol strategy. To keep a certain degree of freedom in
terms of which control strategy is used, we choose to 3.2.1 Modifications to the driver model
supply interface signals suitable for both, M  - and
n  -control. We also need some extra signals to con- The Boolean signal startCycle had to be added
trol the DymolaR model embedded in the real-time en- in order to start the driving cycle at a given time.
vironment. These extra signals are the signal to start This means that the original CombiTimeTable block
the driving cycle, the signal to switch between the two from the Modelica Standard Library (MSL 2.2.1)
had to be replaced by the two blocks Timer and
6 = synchroniseTestBenchSystem
CombiTable1Ds (see Fig. 4).
The Modelica Association

278

Modelica 2006, September 4th  5th

Synchronising a Modelica Real-Time Simulation Model with a Highly Dynamic Engine Test-Bench System

Figure 5: Picture of the FakeEngine model
Figure 4: Picture of TriggerdDriver model

Finally the driving cycle table had to be adjusted as
well because CombiTable1Ds only accepts monotonically increasing data vectors. The Timer block on the
other hand accepts two different function values at one
time instant.
3.2.2

Modifications to the engine model

Since the engine exists as hardware part within our
HiL simulation we only need some kind of fake engine. This fake engine will be used as interface to
the torque or speed signal coming from the test-bench
system. We did not want to break with the drive line
architecture of the Power Train Library. Therefore a FakeEngine model was created based on the
PowerTrain.Engine frame (see Fig. 5).
The governor had to be removed since the test-bench
system includes an idle-speed control of its own. Also
the torque measurement of the drive line torque is done
in this model.
The FakeEngine model includes the subcomponent TBSsyncEngineMalphaN instead of the original
BaseEngine subcomponent (see Fig. 6).
In the model TBSsyncEngineMalphaN all the synchronisation and control strategy functions are implemented.
When the signal syncTBS is active both coupling
clutches Malpha and Nalpha are closed making sure
that the drive line synchronises to the test-bench system. When the synchronisation process is complete
the syncTBS signal can be deactivated. Depending
The Modelica Association

Figure 6: Picture of the TBSsyncEngineMalphaN
model

on the state of the signal nAlphaActive either the
Malpha or the Nalpha clutch stays closed after deactivating syncTBS. To avoid sudden changes (which in
turn can cause instabilities) the closing and opening
process of the clutches is done via triggered ramp signals.
The engineTorque signal is multiplied with zero as
long as the M   control strategy is activated. This
is to avoid a constant speed-up of the left hand side of
the then open n   coupling clutch.
3.2.3

Modifications to the axle model

When simulating the drive line model with the
CarResistance2 component of the Power Train
Library included we noticed a phenomenon. At
the beginning of the simulation the CarResistance2
model calculates a small erroneous torque which is applied at the axle flange. This in turn causes a small deceleration of the vehicle model (i.e.the car rolls back-

279

Modelica 2006, September 4th  5th

D. Winkler, C. Ghmann
Online HiL simulation of NEDC (excerpt)

wards). This backward rolling behaviour causes the
real-time HiL model to become unstable. A quick solution to avoid this was to activate the brakes as long
as the driver is not starting to drive (see Fig. 7).

vehicle speed [km/h]

150

100

50

0

50

0

50

100

150

200

250
time [s]

300

350

400

450

500

0

50

100

150

200

250
time [s]

300

350

400

450

500

engine speed [rpm]

4000

3000

2000

1000

0

Figure 8: Online simulation of NEDC cycle (excerpt)

Figure 7: Picture of the ModifiedAxle model

Phase 1: At the start the syncTBS signal is false.
This means that the drive line model receives
the torque signal of the test-bench engine. As
mentioned before the test-bench engine is idling
4 HiL simulation results
at the beginning. The torque is something near
zero Nm. This small torque causes now the
Finally after all necessary interface signals have been
free-spinning torque converter (control lever podefined and the modification to the drive line model
sition is still Neutral) to accelerate slightly (see
has been done it is time to test the model with the testdriveLineSpeed in Fig. 9).
bench system. In order to generate real-time capable
code the DymolaR model is included in a SimulinkR Phase 2: After about 10 seconds the syncTBS signal
model as a wrapper using the DymolaBlock. The reis activated. Now the drive line model is forced
sulting SimulinkR model is then arranged to fit the
to the speed of the test-bench engine. Within
real-time structure of RT-LABR . More on one how
this phase the test-bench engineer also activates
to do a real-time simulation using DymolaR in cona switch on the test-bench system to hand over
nection with RT-LABR can be found in [5].
the control to the HiL simulator (i.e. the coupling
Figure 8 shows the velocity in km/h and the engine
process is completed and n and  are now prospeed in rpm over time of the NEDC excerpt when
vided by the drive line model).
simulated online. By online we mean the DymolaR
model runs in real-time on the HiL simulatorand com- Phase 3: We can now deactivate the syncTBS signal once the two systems are coupled. Everymunicates with the test-bench system via the UDP/IP
thing is now ready to start the driving cycle (i.e.
interface. Since we are using a automatic gear transstartCycle=true). The synchronisation promission the n   control strategy was used during the
cess is therefore complete.
simulation (i.e. nAlphaActive=true).

4.1

Synchronisation

5

To demonstrate the synchronisation process a plot of
roughly the first 30 seconds is displayed in Fig. 9.
Prior coupling the HiL simulator and the test-bench
system together we need the drive line speed of the
simulation model and the engine speed of the testbench to be the same. We can divide process in Fig. 9
into three phases.
The Modelica Association

Conclusions

In this paper we have demonstrated the process of synchronising a standard ModelicaR model to a highly
dynamic engine test-bench system. Different interface signals had to be added to the original simulation
model so it can communicate with the test-bench system. This led to an adaptation of the simulation models

280

Modelica 2006, September 4th  5th

Synchronising a Modelica Real-Time Simulation Model with a Highly Dynamic Engine Test-Bench System
Process of synchronisation
1000
driveLineSpeed
engineSpeed

800

speed [rpm]

600
true

false
true
syncTBS
startCycle

false

5

10

15
time [s]

20

25

30

Figure 9: Synchronisation process in detail

which was presented in detail. In the end the simulaECUs Using a Highly Dynamic HiL Test Bench
tion results of a working synchronisation process were
System, in Design of Experiments (DoE) in Enshown.
gine Development II (K. Rpke, ed.), vol. 49 of
Haus der Technik Fachbuch, (Berlin), pp. 268
The test-bench system can be used to simulate a vari277, Haus der Technik Essen, expert verlag, June
ety of drive line models. Starting from conventional
2005.
drive lines up to drive lines with a double-clutch transmission and even a hybrid electric vehicle (HEV) drive
line. At all times the switching between the two dif- [2] Modelica Association, Modelica is a free modelling language.
ferent control modes (i.e. n   and M  ) is a very
delicate issue especially when done online.
[3] H. Elmqvist, S. Mattsson, H. Olsson, J. AndreasOur Department will continue to investigate the chalson, M. Otter, C. Schweiger, and D. Brck, Reallenges of HiL simulation in connection with the
time Simulation of Detailed Automotive Models,
engine-test bench. The focus lies hereby on the simin Proceedings of the 3rd International Modelica
ulation of hybrid electric vehicles power trains. The
Conference, pp. 29  38, 2003.
test-bench system gives here the opportunity to gain
measurement data of fuel consumption and exhaust- [4] M. Otter, C. Schweiger, and M. Dempsey, PowerTrain Library 1.0. German Aerospace Center
gas emissions for different HEV applications.
(DLR), Oberpfaffenhofen, 1.0 ed., 2002.

References

[5] Dynasim AB, Dymola 5 - User Manual. Lund,
2004.

[1] D. Winkler, C. Ghmann, B. Barzantny, and
M. Lindemann, Model Based Calibration of
The Modelica Association

281

Modelica 2006, September 4th  5th

D. Winkler, C. Ghmann

The Modelica Association

282

Modelica 2006, September 4th  5th

Session 3c

Session 3c
Language, Tools and Algorithms 3

The Modelica Association

283

Modelica 2006, September 4th  5th

Session 3c

The Modelica Association

284

Modelica 2006, September 4th  5th

A Numeric Library for Use in Modelica Simulations with Lapack, SuperLU, Interpolation, and MatrixIO

A Numeric Library for Use in Modelica Simulations with
Lapack, SuperLU, Interpolation and MatrixIO
Anders Sandholm\,],

Peter Bunus\,

Peter Fritzson\,

\

PELAB - Programming Environment Lab
Dept. Computer Science, Linkoping University
S-581 83 Linkoping, Sweden
]

eHealth Institute
Dept. Health and Behavioural Sciences, University of Kalmar
Kalmar, Sweden

Abstract

linear equations, eigenvalue problems, curve and surface fitting, interpolation, etc. Finite element methods
is a well-known group of methods for solving PDE
problems, which typically are rather computation intensive.
This paper introduces a new wrapper library called
Numeric intended for Modelica users who want to use
standard common numeric libraries as well as methods
and routines for saving and loading matrixes to/from
files.

This paper introduces a numerical Modelica library
that provides access to some of the most well-known
powerful libraries for numerical methods. Our approach has been to develop wrappers that allow Modelica users easy access as functions both from textual
and graphical Modelica environments [9], [10]. This
library also includes additional external functions with
corresponding Modelica wrappers to interpolate data
and to read/write matrix data from/to files.
Keywords: Matrix, Lapack, SuperLU, Matrix Market 1.1 Small Example of Using the Library
File Format, Harwell-Boeing Matrix Format, InterpoAssume that the user wants to calculate the eigenlation
values for an N-by-N real nonsymmetric matrix
stored in the Matrix Market file format. The first
task would be to load the matrix file, here called
1 Introduction
matrix.mtx. This is done by using the functions
One important area of research is developing and im- getMatrixSize and getMatrixFile where the first one
plementing fast numerical methods that can be used returns the size of the matrix and the other one reto simulate physical phenomena. Researchers who turns the matrix data, both taking the file name as
are working with simulation usually do not want to a string argument. Functions for loading and savspend time and resources implementing, debugging, ing matrices in Matrix Market is located in package
and maintaining new numerical libraries. Instead they Numeric.MatrixIO.MatrixMarket along with other
want to use existing libraries that are recognized as sta- Matrix Market functions.
Below Modelica pseudo code is shown for loading the
ble and efficient.
Numerical methods can be divided into different areas matrix.
such as: optimization, solution of ordinary and partial Integer n = getMatrixSize("matrix.mtx");
differential equations, mesh generation, numerical in- Real A[n,n];
tegration, solution of nonlinear equations, solution of A=getMatrix("matrix.mtx");
 andsa@ida.liu.se
 petbu@ida.liu.se
 petfr@ida.liu.se

The Modelica Association

More information about loading and saving data can
be found in the MatrixIO section. For the calculation
of eigenvalues Lapack [2] containsa function dgeev
285

Modelica 2006, September 4th  5th

A. Sandholm, P. Bunus, P. Fritzson

that calculates the eigenvalues along with the left and
Numeric
right eigenvectors of a general matrix. The dgeev routine uses double precision but the Lapack library also
contains a corresponding function for single precision
calculations, named sgeev.
Lapack SuperLU MatrixIO Interpolation
In the library outlined in this paper all Modelica wrapper functions for Lapack are stored in subpackages.
The wrapper for the dgeev function is located in
Numeric.Lapack.SimpleDriver, for further detail se
Figure 1: Structure of numeric package
the section dealing with the structure of the library.
Below Modelica pseudo code is shown that outlines
the call to the calcEigenValGeneralMatrix dgeev loading matrix data. The Interpolation subpackage
which uses the Lapack dgeev function for the calcu- contains subpackages with methods both developed
natively in Modelica code but also Modelica wrapper
lations of the eigenvalues.
functions to interpolation library routines.
Real eigenvReal[size(A, 1)];
Real eigenvImag[size(A, 1)];
Real eigenVectors[n,n];
(eigenvReal, eigenvImag,
eigenVectors) =
calcEigenValGeneralMatrix_dgeev(A1);

2.2 Structure of the Lapack Subpackage

Lapack

The
Modelica
wrapper
function
calcEigenValGeneralMatrix dgeev
allows
the
user to specify more input data and receive more
information from Lapack than is shown here, which is
further outlined in the Lapack section.

SimpleDriver

ExpertDriver

ComputionalDriver

Examples

Figure 2: Structure of the Lapack subpackage and it
subpackages

2 Structure of the Numeric Library
The design of this library focuses on two major issues:

The Lapack subpackage can be seen in Figure 2. This
 It should be easy to locate libraries and functions package contains four subpackages, SimpleDriver, ExpertDriver, ComputionalDriver and Examples. For
 The package should be easy to maintain with all more information about SimpleDriver, ExpertDriver
the external library dependencies
and ComputianalDriver se the Lapack section. In the
 The package structure should allow easy addi- Examples library different examples have been imtion of new external libraries and native Modelica plemented which explain how the Lapack subpackage
can be used in Modelica code. These examples are
functions
mostly constructed for users who know the Modelica
This library contains both functions that are imple- language but are new to the Lapack library.
mented natively in Modelica and functions that act as
wrappers to C and FORTRAN 77 functions [9],[1].
The top level structure of the Numeric library can be 2.3 Structure of SuperLU package
seen in Figure 1 with the subpackages Lapack, SuThe SuperLU subpackage has been divided into liperLU, MatrixIO, and Interpolation
brary subpackages, Driver, Computation, Utility as
well as a section called Examples that has been added.
2.1 The Structure of the Numeric Package
The packaged structure can be view in Figure 3. For
The subpackages Lapack and SuperLU contain Mod- detailed information about the Driver, Computation
elica wrapper functions that call corresponding exter- and Utility subpackages se the SuperLU subpacknal functions in each external library. The MatrixIO age. In the Example subpackage to SuperLU different
subpackage is further divided into subpackages that Modelica examples have been implemented that show
implement different matrix file formats for saving and how the SuperLU library can be used
The Modelica Association

286

Modelica 2006, September 4th  5th

A Numeric Library for Use in Modelica Simulations with Lapack, SuperLU, Interpolation, and MatrixIO

package is divided into two subpackages, CubicSpline
and Examples, se Figure 5. The CubicSpline subpackage contains both native Modelica function implementations and Modelica wrapper functions for use of external cubic spline function implemented in C code.
Driver Computation Utility Examples
The Examples subpackage contains easily understandable examples that show both how the Modelica implemented versions and the external version can be called
from Modelica code.
Figure 3: Structure of Lapack package with its subFor further details about cubic spline se the Interpolapackages
tion subpackage section.

SuperLU

2.4 Structure of MatrixIO package

3 Library Design Issues

As already mentioned, the main idea is to create a
Modelica package where different numerical methods,
format handling functions, and solvers can be readily
available for use from Modelica. Several design issues
have been addressed on how to handle documentation
MatrixMarket HarwellBoeing Examples
from the external libraries and variable nameing in the
external functions. Without the library documentation
the package would be hard to use and a user who
is familiar with the corresponding non-Modelica
Figure 4: Structure of Lapack package
package will be confused if the input/output variable
The MatrixIO packages implement support for differ- has changed name in the Modelica wrapper function.
ent matrix file formats. Currently the Matrix-Market
and the Harwelll-Boeing subpackages are supported
with functions for saving and loading dense and sparse
3.1 Naming Conventions
matrix data. An overview of the MatrixIO package can
be viewed in Figure 4. For more detailed information The Modelica Numeric library uses function and variabout the Matrix Market and the Harwell-Boeing se able names from the original package as a postfix part
corresponding sections. Examples that show how ma- of the name along with a more explanatory Java-style
trix data can be loaded and saved are implemented in name comprising the beginning of the name. This will
the Examples subpackage.
give new users more understanding of functions and
variables, without reading the detailed documentation
2.5 Structure of the Interpolation subpack- for each variable. Users who are familiar with the
corresponding non-Modelica libraries will recognize
age
functions and variables due to the postfix part of the
name.
An example is the Modelica wrapper function
Interpolation
calcEigenValGeneralMatrix dgeev which is introduced in the Introduction part of this paper. The first
part of the function name tells the user that it calculates
the eigenvalues for a general matrix and the postfix
CubicSpline Examples
part specifies that the dgeev function is used. The same
naming convention is used for variables. The dgeev
function has a variable named JOBVL that specifies
Figure 5: Structure of the Interpolation subpackage it the left eigenvalues should be calculated or not. In
the Modelica wrapper function this variable is named
The Interpolation subpackage is designed with the calcLeftEigenV_JOBVL which are a more self
same idea as the other packages. Currently the sub- explanatory Java-style name along with the Lapack

MatrixIO

The Modelica Association

287

Modelica 2006, September 4th  5th

A. Sandholm, P. Bunus, P. Fritzson

variable name as a postfix part of the name.

=======

DGEEV computes for an N-by-N real
nonsymmetric matrix A, the
The issue about documentation has been ad- eigenvalues and, optionally,
dressed by including the external function docu- the left and/or right eigenvectors.

3.2 Documentation

mentation into the Modelica wrapper function documentation node.
Below the first part of the
documentation for the Modelica wrapper function
calcEigenValGeneralMatrix dgeev is shown.
First in the documentation comes a specification of
the difference between the native function call and
the Modelica wrapper function call. In the Modelica
wrapper function the LDA, LDVL and LDVR variables are not needed, and therefore have been removed
from the Modelica interface. After the library annotation the Fortran function declaration follows along
with version and argument documentation. Further
down comes the purpose and argument documentation. In this example only four arguments are shown.
annotation( Documentation(info="Lapack

The right eigenvector v(j) of A
satisfies
A * v(j) = lambda(j) * v(j)
where lambda(j) is its eigenvalue.
The left eigenvector u(j) of A satisfies
u(j)**H * A = lambda(j) * u(j)**H
where u(j)**H denotes the conjugate
of u(j).
The computed eigenvectors are
normalized to have Euclidean norm
equal to 1 and largest component real.
Arguments
=========
JOBVL

(input) CHARACTER*1
= N: left eigenvectors of
A are not computed;
= V: left eigenvectors of
A are computed.

JOBVR

(input) CHARACTER*1
= N: right eigenvectors of
A are not computed;
= V: right eigenvectors of
A are computed.

N

(input) INTEGER
The order of the matrix A. N >= 0.

A

(input/output) DOUBLE PRECISION
array, dimension (LDA,N)
On entry, the N-by-N matrix A.
On exit, A has been overwritten.

#### Numerical Library annotation ###
Variables that has been excluded
in Numerical Library
LDA
LDVL
LDVR

= size(A,1);
= size(A,1);
= size(A,1);

#####################################
SUBROUTINE DGEEV( JOBVL, JOBVR, N, A,
LDA, WR, WI, VL, LDVL, VR,
LDVR, WORK, LWORK, INFO )
-- LAPACK driver routine (version 3.0)
Univ. of Tennessee, Univ.
of California Berkeley, NAG Ltd.,
Courant Institute, Argonne National
Lab,and Rice University
December 8, 1999
.. Scalar Arguments ..
CHARACTER JOBVL, JOBVR
INTEGER
INFO, LDA, LDVL, LDVR,
LWORK, N
..
.. Array Arguments ..
DOUBLE PRECISION
A( LDA, * ),
VL( LDVL, * ), VR( LDVR, * ),
WI( * ), WORK( * ), WR( * )
..
Purpose

The Modelica Association

4 Lapack
Lapack is one of the most widely used libraries for
solving many common numerical problems in linear algebra. The library includes routines for solving systems of simultaneous linear equations, finding least square solutions of overdetermined systems of equations, solving eigenvalue problems, and
solving singular value problems [2]. The Modelica
Numeric.Lapack sublibrary is divided into three different parts: Basic Routines, Advanced Routines and
Computational Routines.
288

Modelica 2006, September 4th  5th

A Numeric Library for Use in Modelica Simulations with Lapack, SuperLU, Interpolation, and MatrixIO

 Basic Routines solves a specified problem with a "Left eigenvectors of A
few options. Examples of functionality in basic are not computed";
routines are finding the eigenvalues of a matrix input String calcRighEigenV_JOBVR = "V"
"Right eigenvectors of A
or solving a set of linear equations.
 Advanced Routines allows the user to control the
calculations more by taking more options and returning more information than the simple driver
routines. An example can be calculation of error
bounds or normalizing matrices to improve accuracy.

are computed";
output Real eigenReal_WR[size(A, 1)]
"Real part of eigenvalues";
output Real eigenImag_WI[size(A, 1)]
"Imaginary part of eigenvalues";
output Real leftEigenVectors_VL
[size(A, 1),size(A, 1)]
"Left Eigenvectors";
output Real reightEigenVectors_VR
[size(A,1), size(A,1)]
"Right Eigenvectors";
output Integer INFO
"=0 successful computation";

 Computational Routines shall more be seen as
routines designed to perform a specific task, such
as a LU factorization or reduction of a real system matrix to tridiagonal form. Usually these
functions are used to construct more advanced
protected
functions in the Basic and Advanced routines li- Integer N=size(A, 1)
braries. The routines are categorized in systems "The order of the matrix";
of linear equations, eigenvalue problems, orthog- Integer LWORK=10*N
onal factorization, and singular value decomposi- "MAX size if JOBVL = V or
JOBVR = V LWORK >= 4*N";
tion.
Real WORK[LWORK];

4.1 Example
An example of the simple driver routines is the dgeev
function that calculates right and left eigenvalues and
eigenvectors for an N-by-N real nonsymmetric matrix.
This calculation can be described as finding the eigenvalues  and corresponding eigenvectors z6=0 as equattion (1) and (2) describe.
Az = z

(1)

A = AT where A is real

(2)

external "Fortran 77" dgeev(
calcLeftEigenV_JOBVL, calcRighEigenV_JOBVR,
N, A, N, eigenReal_WR, eigenImag_WI,
leftEigenVectors_VL, N,
reightEigenVectors_VR, N,
WORK, LWORK, INFO)
annotation (Library="lapack");
end calcEigenValGeneralMatrix_dgeev;

The first argument is the Matrix A which the eigenvalWhen all eigenvalues and eigenvectors have been calues and eigenvectors are to be calculated for. The folculated equation (3) is solved.
lowing two arguments, calcLeftEigenV JOBVL and
calcRighEigenV JOBVR, determine if the right or/and
A = ZZ T
(3)
left eigenvalues/eigenvectors are to be calculated. In
Where  is a diagonal matrix whose diagonal elements the default setting only the right eigenvalues are calcuare the eigenvalues, Z is an orthogonal matrix whose lated.
In the output section the eigenvalues variable comes
columns are the eigenvectors [3].
As
described
previously
the
Model- first then the left and right eigenvectors and last an inica wrapper function for dgeev is called formation flag that tells if the calculation could be percalcEigenValGeneralMatrix dgeev and is shown be- formed.
low, where the documentation part has been removed Variables that dont add to the functionality of the
Modelica wrapper function but are needed for the Lain this example.
pack implementation have been placed in the protected
function calcEigenValGeneralMatrix_dgeev section. For the function outlined above the working
variables LWORK and WORK have been placed here,
along with the variable N that specifies the order of the
input Real A[:, size(A, 1)];
input String calcLeftEigenV_JOBVL = "N" matrix.
The Modelica Association

289

Modelica 2006, September 4th  5th

A. Sandholm, P. Bunus, P. Fritzson

5 SuperLU
For solving large, sparse, nonsymmetric systems of
linear equations the SuperLU library is commonly
used [11]. The SuperLU library is available either in C
or in Fortran code. Here our Modelica implementation
uses the Fortran interface for maximum performance.
The SuperLU library starts by performing an LU
decomposition [15] with partial pivoting and triangular systems solved through forward and backward
substitution.
The LU decomposition can handle non-square matrices, but it is only for square matrices the triangular
solver is used. For improving backward stability
interactive refinement subroutines are used. The
library also contains routines provided to equilibrate
the system, estimate the condition number, calculate
the relative backward error and estimate error bounds
for re-fined solutions.
The SuperLU subpackage is divided into three parts:
Driver, Computation, and Utility. In the Driver
subpackage functions for solving systems of linear
equation are provided. In the Computation subpackage specified computational routines are provided
instead of a complete driver as in the Driver package.
Using this pack-age the user can develop a new computation driver in the Modelica environments. The
last package is the Utility subpackage that supplies the
user with routines for creating and destroy SuperLU
matrices.

5.1 Examples
Take the function dgstrf as an example in the
Numeric.SuperLU.Computational sublibrary.
It
performs a LU factorization of a general sparse mby-n matrix, A, using partial pivoting with row interchanges. Factorization has the form of equation (4)
Pr  A = L U

(4)

where Pr is a row permutation matrix, L is lower triangular with unit diagonal elements and U is upper
triangular. The documentation for the function call
dgstrf can be found in the SuperLU documentation
[11], [12].

6 Interpolation

ulations where data is created at certain time intervals.
Interpolation is a technique which uses the sequence
of known values to estimate the value of an unknown
point [14]. Given a sequence of known sample points,
xk , and the corresponding values, yk , the interpolation tries to fit a function, f , that which when given
an value in xk , returns the corresponding value in yk ,
shown in equation (5).
f (xk ) = yk

where k = 1, 2, 3, .....n

(5)

This method of trying to find f is commonly known as
curve fitting and the function f is then called the interpolant.
When calculating a value for an unknown data point,
, a control has to be made that ,, lies inside the sequence of known values, se equation (6).
min(xk )max(xk )

(6)

No interpolation can be performed if the data point is
lying outside the sequence xk . To calculate the interpolated value the point is inserted in the interpolation
function, f () and the function is evaluated. In the
Numeric package a cubic spline interpolation scheme
has been implemented both in native Modelica code
and by using external library. The external library can
be reached through a Modelica function that acts as a
wrapper.

6.1 Cubic Spline
A cubic spline is a function that is defined as a piecewise third-order polynomial function which passes
through a set of points. To create a solvable system a
boundary condition is commonly placed on the second
derivate of each polynomial end point. If the boundary condition is that the second derivative is equal
to zero the spline is commonly called a natural cubic spline which gives a tridiagonal system that easily can be solved. Different boundary conditions can
be used for creating other spline interpolation scheme
[4] [7]. Suppose that the function f is to be interpolated, given by the data (xi , fi ), i = 0, ...., N where
fi = f (zi ) and zi form an order of sequence such as
a = x0 < x1 < ... < xN = b. From this the cubic interpolation function SC2 [a, b] can be described for each
interval [xi , xi+1 ] as equations (7) and (8) along with
the fact that the polynomials are smoothly adjusted
(10) and that the interpolation condition (13) is satisfied [13].

In many engineering and science areas data is gathered either from sampling real observations or by simThe Modelica Association

290

Modelica 2006, September 4th  5th

A Numeric Library for Use in Modelica Simulations with Lapack, SuperLU, Interpolation, and MatrixIO

7.2 Matrix Market Format
S(x)Si (x)
Si (x) = ai,0 + ai,1 (x  xi )
+ai,2 (x  xi )2 + ai,3 (x  xi )3
for x[xi , xi + 1] , i = 0, ....., N  1

r
Si1
(xi  0) = Sir (xi + 0)

i = 1, ..., N  1
r = 0, 1, 2

r
Si1
(xi  0) = Sir (xi + 0)

i = 1, ..., N  1
r = 0, 1, 2

(7) The Matrix Market format provides a powerful and
simple file format for storing and exchanging matrix
(8) data. The format is based on an ASCII file format
that is based on a collection of affiliated formats which
(9) share certain design elements. So far, we have focused on supplying routines for accessing two of these
design elements, general sparse matrices and general
dense matrices.
(10) In the general sparse matrices version only the non(11) zero entries are stored, and for each value the cor(12) responding matrix coordinates is stored. For general
dense matrices the array format is the most efficient,
and the data is provided in a column-oriented order.
In both of the formats an arithmetic field is defined
that specifies the matrix entries, i.e, real, complex, in(13)
teger, pattern. The format also specifies the symmetry
(14) structure such as general, symmetric, skew-symmetric
(15) or Hermitian [6].

7.3 Examples

7 MatrixIO
While working with numerical applications the ability
to save and load matrix data in an efficient file format
is often needed. Here we decided not to create our
own file format but rather to build in support for the
most common formats. This gives the user the ability
to work with existing data and to easier exchange data
with other users. We have chosen to support the Matrix
Market [6] [5] and Harwell-Boeing [8] formats.

7.1 Harwell-Boeing Matrix Format
The Harwell-Boeing format is today one of the most
popular text-file exchange formats for sparse matrixes.
The file format starts with a header block where the
first line contains the title and an identifier. The second line contain the number of lines for each of the
data blocks and the total number of lines in the file,
excluding the header. The third line contains a three
character string denoting the matrix type and the number of rows and column entries. The fourth line contains the variable Fortran format for the following data
block and the fifth line is only present if there is a right
hand side of the matrix. The data is stored in an 80column, fixed length format where each matrix begins
with a multiple line header block, which is followed
by two, three or four data blocks.
Using this information the correct storage can be allocated before the actual matrix data is accessed [8].
The Modelica Association

The easiest way to read a Matrix Market file is using
the functions getMatrixSize and getMatrixFile.
getMatrixSize takes the file name as argument and
reads the size of the matrix so that the a matrix
with the correct size can be allocated. The function
getMatrixFile also takes the filename as argument and
reads the matrix data and store it in the corresponding
data structure. A Modelica pseudo code example can
be seen below where a matrix is loaded from a file
called matrix.mtx.
Integer n = getMatrixSize("matrix.mtx");
Real A[n,n];
A=getMatrix("matrix.mtx");

During the process of reading the file and storing it
in the MatrixMarket format messages are provided
through the ModelicaMessage() function.

Acknowledgements
This work was supported by Kalmar eHalsoinstitut, by
Vinnova in the GRIDModelica project, and SSF in the
VISIMOD project.

References

291

[1] The Modelica Language specification version
2.2. The Modelica Association, March 2005.
http://www.modelica.org.
Modelica 2006, September 4th  5th

A. Sandholm, P. Bunus, P. Fritzson

[2] E Anderson, Z Bai, C Bischof, J Demmel, J Don- [13] Boris I Kvasov. Methods of Shape-Preserving
garra, J Du Croz, A Greenbaum, S Hammarling,
Spline Approximation. World Scientific, 2000.
A McKenney, S Ostrouchov, and D Sorensen.
[14] Erik Meijering. Chronology of interpolation:
LAPACK Users Guide. 1995.
From ancient astronomy to modern signal and
image processing. volume 90, pages 319342.
[3] George B. Arfken, Hans J. Weber, and HansIEEE, March 2002.
Jurgen Weber. Mathematical Methods for Physicists. Academic Press, 1985.
[15] William H. Press, Saul A. Teukolsky, William T.
Vetterling, and Brian P. Flannery. Numerical
[4] Richard H. Bartels, John C. Beatty, and Brian A.
recipes in FORTRAN (2nd ed.): the art of sciBarsky. An Introduction to Splines for Use in
entific computing. Cambridge University Press,
Computer Graphics and Geometric Modeling.
New York, NY, USA, 1992.
Morgan Kaufmann, 1995.
[5] Ronald F. Boisvert, editor. The Matrix Market: A
Web Resource for Test Matrix Collections, London, 1997. Chapman & Hall.
[6] Ronald F. Boisvert, Roldan Pozo, and Karin
Remington. The matrix market exchange formats: Initial design. Technical Report NISTIR 5935, National Institute of Standards and
Technology, Gaithersburg, MD, USA, December
1996.
[7] Carl De Boor. A Practical Guide to Splines.
Springer, 2002.
[8] Iain Duff, Roger G. Grimes, and John G. Lewis.
Users guide for the harwell-boeing sparse matrix collection (Release I). Technical Report TR/PA/92/86, CERFACS, October 1992.
[9] Peter Fritzson. Principles of Object-Oriented
Modeling and Simulation with Modelica 2.1.
Wiley-IEEE Press, 2004. ISBN 0-471-471631.
[10] Peter Fritzson, Peter Aronsson, Hakan Lundvall,
Kaj Nystrom, Adrian Pop, Levon Saldami, and
David Broman. The Openmodelica modeling,
simulation, and software development environment. Simulation News Europe, 44/45, 2005.
[11] John Gilbert James W. Demmel and Xiaoye S.
Li. Superlu users guide. Technical Report
UCB/CSD-97-944, EECS Department, University of California, Berkeley, 1997.
[12] John R. Gilbert Xiaoye S. Li James W. Demmel, Stanley C. Eisenstat and Joseph W.H. Liu.
A supernodal approach to sparse partial pivoting. Technical Report UCB/CSD-95-883, EECS
Department, University of California, Berkeley,
1995.
The Modelica Association

292

Modelica 2006, September 4th  5th

Online Application of Modelica Models in the Industrial IT Extended Automation System 800xA

Online Application of Modelica Models in
the Industrial IT Extended Automation System 800xA
Rudiger Franke
ABB AG, Power Technology Systems
Kallstadter Str. 1
68309 Mannheim, Germany

Jens Doppelhamer
ABB Corporate Research
Wallstadter Str. 59
68526 Ladenburg, Germany

Abstract

these activities online.
Keywords: Modelica, 800xA, Industrial IT, control
The Modelica technology and the increasing availabil- system, online optimization, NMPC
ity of model libraries allow an efficient modeling of
complex dynamic processes. Having a good process
model at hand one might want to apply the model on- 1 Introduction
line to improve the operation of the real process. These
online applications range from the generation of high- The Modelica technology clearly separates between
level information like performance indices from pro- model specification and model solution. This way not
cess measurements over the estimation of unmeasured only existing models can be used with different tools,
quantities in a so called soft sensor up to model based but also different kinds model based activities can be
performed for one and the same model. Such activities
control and online optimization.
include, besides the solution of initial-value simulation
This paper discusses the online application of Modelproblems, also the estimation of model parameters, the
ica models in an industrial control system. The modoptimization of the design of a modeled process and
els are developed and tested using a standard Modelmodel-based control.
ica tool. Afterwards they are imported into the control
Also the increasing availability of libraries for fluid
system. Here the model variables can be associated
processes is making Modelica more and more suitable
with process signals. This way a model can be initialfor process applications, see also [5, 8, 4].
ized with current process values. A numerical solver
Additional things that have to be treated in a real
performs simulation, estimation or optimization activmodel based application include the signal exchange
ities. Solution results can either be used for diagnoswith the process, concepts for security and redundancy
tics or they can be fed back to the process as manipuas well as real-time scheduling of model based activilated variables.
ties and the operator user interface.
The Dynamic Optimization system extension has been
This paper discusses the integration of dynamic opdeveloped for the Industrial IT System 800xA. Extimization with the Industrial IT System 800xA by
ploiting Aspect Object technology, the required funcABB, allowing a rapid online deployment of model
tionality for model-based applications can be intebased applications once appropriate models and model
grated seamlessly with the control system. Model
based activities have been set up offline.
based applications can be set up in a modularly structured way.
The Dynamic Optimization system extension has been 2 System 800xA overview
used to deploy different model-based applications. A
Nonlinear Model-based Predictive Controller (NMPC) The architectural framework for the Industrial IT Sysfor the start-up of steam power plants is discussed as tem 800xA is built upon ABBs Aspect Object techan example. The overall NMPC application consists of nology [1]. Aspect Objects relate plant data and funcseveral model-based activities, including preprocess- tions  the aspects, to specific plant assets  the obing of process values, estimation of model states, pre- jects. Aspect objects represent real objects, such as
diction of optimal operations, and post-processing of process units, devices and controllers. Aspects are inoptimization results. A scheduler periodically triggers formational items, such as I/O definitions, engineering
The Modelica Association

293

Modelica 2006, September 4th  5th

R. Franke, J. Doppelhamer

Figure 1: Plant Explorer Workplace showing the Functional Structure of an NMPC.
drawings, process graphics, reports and trends that are window. The upper right pane shows the aspects of an
assigned to the objects in the system.
object and the lower right pane views a selected aspect.
Aspect Objects are organized in hierarchical structures
that represent different views of the plant. One object
may be placed multiple times in different structures. 3 Integration of model based control
Examples for different types of structures are:
Functional Structure: Shows the plant from the process point of view.

3.1

Example for a complex model-based control application

Figure 1 shows how the functional structure is set up
Location Structure: Shows the physical layout of
for an Nonlinear Model-based Predictive Controller
what equipment is located where in the plant.
(NMPC) using Aspect Object technology and the DyControl Structure: Shows the control network in namic Optimization system extension discussed in this
terms of networks, nodes, fieldbuses, and sta- section. Different Aspect Objects represent the major
processing steps of the NMPC algorithm.
tions.
The idea of placing the same object in multiple structures is based on the IEC standard 1346 [9, 2]. A controller is a typical example: the real controller is represented by an Aspect Object. This object is placed in
the control structure showing the logical arrangement
of the controller in the control system, in the location
structure showing the actual location, and in the functional structure showing the function of the controller
for the operation of the process.
The Plant Explorer Workplace is the main tool used
to create, delete, and organize Aspect Objects and aspects. It is based on a structural hierarchy, similar to
Windows Explorer, as demonstrated in Figure 1. The
object hierarchy is visible on the left hand side of the
The Modelica Association

294

1. The Preprocessor reads current measurements,
validates the data, and generates a guess for the
model state. Furthermore a short term history is
assembled.
2. The State Estimator uses the short term history
and estimates the initial model state.
3. The Optimizer predicts the optimal control into
the future, starting from the estimated initial state.
4. The Postprocessor checks optimization results
and communicates set points to the underlying
control system.
Modelica 2006, September 4th  5th

Online Application of Modelica Models in the Industrial IT Extended Automation System 800xA

Figure 2: Software architecture of the Dynamic Optimization system extension.
An additional scheduler activity periodically triggers
the other activities and supervises their successful
completion.
The state estimator and the optimizer are based on
the same plant model. This model is built efficiently
on available model libraries [5]. Moreover, specific
preprocessor and the postprocessor models are formulated as computational algorithms in Modelica. The
scheduler model is formulated as a state graph [12].
Based on the models, the activities are formulated as
estimation (State Estimator), optimization (Optimizer)
or initial-value simulation (Preprocessor, Postprocessor, Scheduler). The Dynamic Optimization system
extension provides the required aspects.

3.2

Dynamic Optimization system extension

history logs of process values. Additional functionality is added through system extensions.
The Dynamic Optimization system extension provides
two new aspects: the Model aspect and the Dynamic
Optimization solver aspect. The new aspects allow
the seamless integration of model-based applications.
Moreover a configuration GUI is provided as an add-in
for Microsoft Excel, allowing the efficient engineering
of model based activities. Last but not least the Dynamic Optimization service manages the instantiation
of solver activities in online applications.
The model integration exploits the principle of Modelica to clearly separate model specification and model
analysis [10]. For the applications conducted so far,
the tool Dymola [3] is used for model editing and
translation. The implementation of the executable
model is treated as a Simulink S-function [13]. The
used solver HQP [6] allows the treatment of different
model based activities, including initial value simulation, estimation of model parameters and initial states
as well as nonlinear optimal control with constraints
on model inputs and outputs.

Figure 2 shows the Dynamic Optimization system extension in the context of System 800xA. The framework underlying the Industrial IT System 800xA contains a scalable client-server object oriented database
as one of its key components, seen as Aspect Directory in Figure 2. This database is generally used to
store configuration data.
3.3 The Model Aspect
The System 800xA provides multiple predefined aspects that cover the basic functionality of a control sys- The model aspect of an aspect object provides applicatem, such as control connection, process graphics and tions with the necessary information to apply a model
The Modelica Association

295

Modelica 2006, September 4th  5th

R. Franke, J. Doppelhamer

based activity in the context of the aspects object. A
model aspect thus augments the aspect object representation of a real-world object with model meta-data.
The responsibilities of the model aspect are:
1. Persistent Storage of the model meta-data
2. Exposing a convenient API for the programmatic
retrieval and manipulation of the model metadata and
3. Providing a user interface to allow viewing and
manipulating the model meta-data.

use these generic interfaces. Another key component
of the Industrial IT System 800xA can make data exposed as aspect properties available for clients using
the widely recognized OPC standard for data access.
For the convenience of model based applications, the
model meta-data is also made available in a more
structured way, using collections of complex types for
model variables, their connection to process signals
and other model meta-data. These API can be seen as a
facade of the underlying, lower-level data structure exposed via the generic interfaces described above. Support for resolving references to process variables especially suited for modeling applications is added on this
layer.

The Model aspect does not provide any functionality
nor does it deal with implementation details. Instead
it references an external implementation. In this way
available modeling tools can be applied, such as Dy- 3.3.3 User Interface Integration
mola, and expensive re-implementation is avoided.
The framework underlying the Industrial IT System
800xA strongly supports user interface integration of
3.3.1 Persistent Storage of the Model Meta-Data the constituent applications. A consistent look and
The responsibility of actually storing the model meta feel, support for services like drag-and-drop or copydata delegated by the model aspect to the Aspect and-paste and the seamless integration of an applicaDirectory, ensuring qualities like security, redun- tions user interface into workplaces like the Plant Exdancy and scalability and providing functionality like plorer Tool can be easily achieved based on that supbackup/restore and import/export of data. The stored port as well as role based customization and security of
a workplace, i.e. the ability to adapt and restrict the apdata includes:
plications user interfaces depending on the role of the
 Declaration of model variables in categories (Pa- current user of the system. Based on this framework
rameter, Input, Output, State, Generic),
features, and analog to the two levels model meta-data
API described above, the model aspect provides three
 Values for model variables, e.g. for parameters,
views of the model meta-data:
 References to process signals, e.g. for inputs and The first one reflects the lower-level data structure as
a set of aspect object properties that can be viewed
outputs,
and individually manipulated (if sufficient permission
 Structural information for hierarchical sub-model is granted). This generic UI component is not specific
structure,
to modeling application; it actually ships with the Industrial IT System 800xA Core and is reused by the
 Reference to the implementation of the model.
model aspect to provide users with a well known view
of the underlying data.
3.3.2 APIs for Retrieval and Manipulation of
The second view specially presents information about
Model Meta-Data
the model variables in an Excel-like grid. Model variThe 800xA framework also defines a generic means ables can be sorted and filtered by their category (inof exposing the data of aspect objects: Aspects can put, output, parameter, state or generic) and associated
make their data available as a set of named proper- with process variables by drag-and-drop of aspect obties with values of simple types (String, Real, Boolean, jects, e.g. from a tree view in a Plant Explorer, and
etc). Through these framework defined, generic inter- selection of control connection aspects and properties
faces to aspect properties, the model data can be made from combo boxes in the grid. Features like undo
available to generic applications, i.e. non model-based functionality, sorting and Excel-like auto fill of this
ones. These generic interfaces were specially designed variable table is provided by the underlying, 3rd party,
to ease access from many programming environments grid implementation.
and languages. As an example, a tool providing im- Last but not least the third view embeds an Internet
port and export of aspect data to and from Excel could Explorer control that can be configured with an URL.
The Modelica Association

296

Modelica 2006, September 4th  5th

Online Application of Modelica Models in the Industrial IT Extended Automation System 800xA

 Initial value simulation for specified initial states
x(t0 ) and model inputs,

This view can e.g. be used to launch the modeling application Dymola to view the Modelica model graphically.
3.3.4

 Estimation of model parameters and initial states,
 Nonlinear optimal control with constraints on
model inputs and outputs,

Mathematical view on a model

Mathematically, a model has the form of a hybrid differential algebraic equation system (hybrid DAE)
0 = F[x(t), x(t), m(t), u(t), z(t), y(t), p,t],
nx

nx

nm

nu

nz

F : IR  IR  IR  IR  IR  IR

 Steady-state simulation, estimation and optimization at one time instant.

(1)

ny

IRn p  IR1 7 IRnx ,
m(t) := G[x(t), m(t), u(t), z(t), y(t), p,t],

An initial-value simulation covers hybrid DAEs
(1),(2). However, optimization and estimation problems can currently only be solved for a simplified hy(2) brid DAE F, G0 of the form:

G : IRnx  IRnm  IRnu  IRnz  IRny
np

1

m(t) := G0 [m(t), z(t),t],

nm

IR  IR 7 IR .

0

The Dynamic Optimization solver Aspect

A model can be applied to perform one or more modelbased activities. A second aspect, the Dynamic Optimization aspect has been developed to interface a
numerical solver, hold the solver configuration, and
to exchange data between the solver and the control
system. The exchanged data includes: configuration
data, current process values (like sensor values and
controller set-points), and history logs. Predictions are
written back to the control system as history logs with
future time stamps. Each aspect is working with its
own instance of the numerical solver, allowing multiple model-based activities to run at the same time.
The integrated solver HQP is primarily intended for
structured, large-scale nonlinear optimization [6]. It
implements a Sequential Quadratic Programming algorithm that treats nonlinear optimization problems
with a sequence of linear-quadratic sub-problems. The
sub-problems are formed internally by simulating the
model and by analyzing sensitivities. They are solved
with an interior point method that is especially suited
for a high number of inequality constraints, e.g. resulting from the discretization of path constraints. See [7]
and [6] for more details about the solver.
Based on the system model (1),(2), several modelbased activities can be formulated and solved numerically over a time horizon [t0 ,t f ]. The treated model
based activities include
The Modelica Association

nz

1

(3)
nm

G : IR  IR  IR 7 IR ,

Here x denote continuous-time states, m are discrete
modes, u and z are controlled and not-controlled inputs, respectively, y are outputs and p are model parameters. Discrete modes are variables that change
their values only at discrete time instants, so called
event instants te , see [10].

3.4

nm

where discrete modes do not depend on states or optimized variables.
3.4.1

Simulation Problem

The model behavior is completely determined by the
system equations F and G, if initial states x0 = x(t0 ),
external inputs u(t), z(t),t  [t0 ,t f ], and parameters p
are given. The outputs y(t),t  [t0 ,t f ] can then be obtained by solving the system of differential equations
using initial-value simulation.
However, often some of the required information is not
explicitly known, but can be obtained by minimizing
a cost function. In many of those cases, a feasible solution can be further specified by constraining model
variables. Optimization is a universal tool for treating
those inverse problems.
3.4.2

Estimation Problem

An example for an inverse problem is the estimation of
unknown parameters p and/or initial states x0 based on
measured inputs and outputs. The estimation problem
can be solved by minimizing a least squares criterion
ny

ky(ti )  y(ti )k2  min

(4)

x0 ,p

i=1

for the set of measurement data {y(ti ),ti  [t0 ,t f ], i =
1, . . . , ny }.
3.4.3

Optimization Problem

The control inputs u(t),t  [t0 ,t f ] or the initial states
x0 might be free to be chosen so that a criterion

297

Z tf

F0 [t f , x(t f )] +

t0

f0 [t, x(t), u(t)] dt  min , (5)
x0 ,u(t)

Modelica 2006, September 4th  5th

R. Franke, J. Doppelhamer

F0 : IR  IRnx 7 IR,

and the additional constraints
ckmin  ck (xk , uk )  ckmax ,

f0 : IR  IRnx  IRnu 7 IR.

cKmin  cK (xK )  cKmax ,

(9)

is minimized subject to constraints on model inputs
umin (t)  u(t)  umax (t) and outputs ymin (t)  y(t) 
ymax (t), t  [t0 ,t f ].
Generally it cannot be guaranteed that a solution exists
for an optimization problem with output constraints as
the model outputs are determined by model states and
model inputs. This is why output constraints should be
relaxed to soft constraints, augmenting the optimization criterion (5) with penalties for violations. The
HQP solver provides support for soft constraints.

Note that initial conditions of the system model are
formulated as general constraints (9) as well. Discretization formulae, known parameter values, and
predetermined disturbances are included into the
discrete-time functions F K , f0k , fk , ck , and cK . The
discrete-time functions are assumed to be two times
continuously differentiable with respect to their variables.

3.4.4

3.6

Steady-state problem

k

n

m

mk

K

n

mK

c : IR  IR 7 IR , c : IR 7 IR

Large-Scale
Problem

Nonlinear

.

Programming

The dynamic estimation and optimization problems
discussed above can also be formulated as steady-state Discrete-time optimal control problems can be solved
problems at one time instant t = t0 = t f . The steady- as structured large-scale nonlinear optimization problems. This has the main advantage that powerful methstate condition
ods for large-scale nonlinear optimization can be apx(t) = 0
(6) plied to their efficient solution [11].
The discrete-time control and state variables for all
is formulated as constraint for the HQP optimization
stages k are collected to one large vector of optimizasolver.
tion variables


x0
3.5 Discrete-Time Optimal Control Problem
 u0 


 x1 


Dynamic Optimization and Estimation problems are
 u1 


treated internally as discrete-time optimal control
v =  . .
(10)
.


problems, applying multi-stage control vector param . 
 xK1 
eterization. The time horizon [t0 ,t f ] is divided into


0
1
K
 uK1 
K stages with t0 = t < t < . . . < t = t f . The controls u(t) are described in each interval [t k ,t k+1 ], k =
xK
0, . . . , K  1 as function of the discrete-time input variOne specific feature of the optimization approach disables uk  IRm . The unknown parameters p are concussed here is that the discrete-time state variables at
verted to state variables with the state equation p = 0
all stages are treated as optimization variables as well,
and with unknown initial values p0 = p(t0 ). They
even though they are determined by initial conditions
are described together with the continuous-time model
and the control parameters. This leads to a signifistates x(t) with the discrete-time state variables xk 
cant increase of the size of the optimization problem.
IRn , n = nx + n p . The state equation (1) is solved for
However, the consideration of states as constrained
the stage k with the initial values xk and the controls
optimization variables generally improves robustness
uk using a numerical integration formula.
and efficiency of the solution. For instance trajectory
This results in the multistage optimization problem:
constraints can be formulated directly on the discreteF K (xK ) +
f0k (xk , uk )  min,
(7) time state variables. Furthermore the separation of the
uk ,x0
overall problem into multiple stages often leads to a
k
K
n
1
k
n
m
1
reduction of the required number of nonlinear iteraF : IR 7 IR , f0 : IR  IR 7 IR
tions. The computational overhead is relatively low if
the number of state variables nx is not too high, comwith respect to the discrete-time system equations
pared to the number of control variables nu and if the
xk+1 = fk (xk , uk ),
(8) sparse multistage structure of the large-scale nonlinear
fk : IRn  IRm 7 IRn
optimization problem is exploited appropriately.
The Modelica Association

298

Modelica 2006, September 4th  5th

Online Application of Modelica Models in the Industrial IT Extended Automation System 800xA

Figure 3: Simplified process diagram of a power plant.

4 Application example
A Nonlinear Model-based Predictive Controller
(NMPC) for power plant start-up serves as example.
The start-up problem is challenging as it is highly nonlinear in the covered large range of operation. Thermal
stress occurring in thick walled components needs to
be kept in given limits. Multiple manipulated variables
have to be coordinated. A long prediction horizon is
required to fulfill the constraints during a start-up.
Figure 3 shows a process diagram of a power plant.
Feed water enters through pre-heaters and the economizer into the evaporator (lower left side). Saturated steam leaving the evaporator gets super-heated
within several super-heater stages (the example diagram shows five super-heater stages and 4 parallel
streams in the upper left part). The live steam leaving the boiler goes to the turbine (the example shows 2
turbine sections). There the thermal energy gets transformed to mechanical energy, driving the generator.
Afterwards the steam gets condensed and water flows
back to the feed water tank (lower right side of the diThe Modelica Association

agram).
During start-up, the boiler first has to produce steam as
required for starting the turbine. Within this phase, the
steam bypasses the turbine through the high-pressure
(HP) and low pressure (LP) bypass valves. The boiler
gets heated up by several hundred degrees centigrade.
This causes spatial temperature differences in thick
walled parts, in particular headers behind the superheaters and spherical fittings in the live steam pipe.
Depending on the material properties, the spatial temperature differences cause thermal stress, which again
causes fatigue up to destruction. This is why the thermal stress needs to be carefully observed and kept in
prescribed limits.
A boiler model was built using the Modelica technology [5]. The model needs to be carefully designed so
that is expresses the relationship between optimized
control actions (fuel flow rate and valve positions) and
constrained process values (pressures, temperatures
and thermal stresses). In the example described here, a
system of differential-algebraic equations (DAE) with
about 1000 variables was built. The Dynamic Opti-

299

Modelica 2006, September 4th  5th

R. Franke, J. Doppelhamer

Figure 4: Traditional start-up. The dots show actual process values and limits, the light lines show predictions
of process values over 90 minutes that are recalculated every minute. The dark lines show the most recent
prediction.

Figure 5: Optimized start-up performed with the NMPC online in closed loop.

The Modelica Association

300

Modelica 2006, September 4th  5th

Online Application of Modelica Models in the Industrial IT Extended Automation System 800xA

Figure 6: Operator display showing the optimal start-up predicted by the NMPC, in addition to current process
values and history logs.
mization aspect system was used offline to identify
model parameters based on data logs available for historical start-ups.
Figure 4 shows major process values for a start-up that
was performed using well tuned standard control. The
plant model was used online, open loop to check its
ability to predict the future behavior of the process.
The fuel flow rate and the HP bypass position are manipulated variables. The most important process variables are the furnace temperature, live steam pressure,
temperature and flow rate, as well as thermal stresses.
It can be seen that the allowed limits for thermal stress
are not exploited during long time periods on the one
hand side and that they exceed the allowed limits at
other times (in particular DT HP header). The model
was able to predict the behavior of the plant sufficiently well.
During a run of the NMPC, an optimization problem is
solved online every minute. The time horizon (prediction and control) is 90 minutes in the example. It gets
divided into 90 sample periods. The optimized manipulated variables are parameterized piecewise linear.
All other model variables are evaluated at the sample
time points. This means that overall about 91000 variThe Modelica Association

ables are present in the online optimization problem.
The solution time is about five minutes for a cold start
of the solver and about 40 seconds for a subsequent
solver run.
Figure 5 shows the results of a start-up performed with
the NMPC. Due to optimized use of the manipulated
variables fuel flow rate and HP bypass position, the
constraint on thermal stress of the HP header stays active during almost one hour. After about 50 minutes
the fuel flow rate accidentally shot over, resulting in a
violation of the thermal stress constraint. It can be seen
how the NMPC reacted by immediately throttling the
HP bypass valve and by reducing the fuel flow rate.
Overall the start-up time could be reduced with the
NMPC by about 20 minutes and the start-up costs by
about 10% in a 700 MW coal fired power plant.
Figure 6 shows an operator display for boiler start-up
optimization. Traditionally an operator display shows
current process values and history logs. As a byproduct of model predictive control, the operator can
additionally see the prediction of the future behavior
of the plant. As the NMPC runs integrated with the
control system, this display can easily be configured.

301

Modelica 2006, September 4th  5th

R. Franke, J. Doppelhamer

5 Conclusions

References

The Modelica technology and the available model libraries allow an efficient modeling of many processes.
Nevertheless nowadays the application of the models
normally remains restricted to simulation studies conducted offline. A considerable additional effort is required to bring a model online and to deploy a mature
model-based application.
The Dynamic Optimization system extension has been
developed for the Industrial IT System 800xA by ABB
to integrate model-based applications. Exploiting the
powerful framework of the System 800xA, the effort
for the development of the Dynamic Optimization system extension could be restricted to few additional
software components. The new Model aspect exposes
model data to the System 800xA. An additional modeling application like Dymola is used to build a Modelica model and to export C-code. The C-code is compiled to a stand-alone executable Dll and loaded by
the HQP optimization solver at runtime. The new Dynamic Optimization aspect configures the HQP solver
for a specific model based activity and it exchanges
data like model parameters, process values and history logs between System 800xA and the HQP solver.
The new aspects can be combined with other existing aspects in Aspect Objects. This allows the flexible structuring of complex model-based applications,
consisting of multiple models and model-based activities. A configuration GUI has been developed as Excel add-in, which turned out to be a good compromise
between development effort and achieved productivity. The Dynamic Optimization service manages the
instantiation of solver activities in online applications.
The Dynamic Optimization system extension has been
applied so far in a number of different model-based applications. Nonlinear Model-based Predictive Control
(NMPC) for the start-up of power plants is discussed
in this paper as an example. The overall controller consists of four different model-based activities, including
the pre-processing of process signals, the estimation of
the model state, the prediction of the optimal start-up,
and the post-processing of optimization results. The
process models are based on the Modelica.Media and
Modelica.Fluid libraries. The scheduling and supervision of the four activities has been implemented in
the same framework as additional model-based activity, based on the Modelica.StateGraph library.
After the successful application of the NMPC to the
start-up of a 700 MW coal fired power plant, several
more start-up optimizations are currently being deployed in gas, oil and coal fired power plants.
The Modelica Association

[1] ABB Automation Technologies.
Industrial
IT System 800xA  System Architecture
Overview.
http://www.abb.com, Document Id:
3BUS092080R0101, 2005.
[2] L.G. Bratthall, R. van der Geest, H. Hoffmann, E. Jellum, Z. Korendo, R. Martinez, M. Orkisz, C. Zeidler,
and J. S Andersson. Integrating hundreds of products
through one architecture  the Industrial IT architecture. In International Converence on Software Engineering. Orlando, Florida, USA, 2002.
[3] Dynasim AB. Dymola: Dynamic Modeling Laboratory. http://www.dynasim.se.
[4] J. Eborn, H. Tummescheit, and K. Prol. Airconditioning  a Modelica library for dynamic simulation
of AC systems. In Proceedings of the 4th International Modelica Conference. Modelica Association,
Hamburg-Harburg, Germany, March 2005.
[5] H. Elmqvist, H. Tummescheit, and M. Otter. Modeling of thermo-fluid systems  Modelica.Media and
Modelica.Fluid. In Proceedings of the 3rd International Modelica Conference. Modelica Association,
Linkoping, Sweden, November 2003.
[6] R. Franke, E. Arnold, and H. Linke. HQP: a solver
for nonlinearly constrained large-scale optimization.
http://hqp.sourceforge.net.
[7] R. Franke, K. Kruger, and M. Rode. Nonlinear model
predictive control for optimized startup of steam boilers. In GMA-Kongress 2003. VDI-Verlag, Dusseldorf,
2003. VDI-Berichte Nr. 1756, ISBN 3-18-091756-3.
[8] R. Franke, K. Kruger, and M. Rode. On-line optimization of drum boiler startup. In Proceedings of the 3rd
International Modelica Conference. Modelica Association, Linkoping, Sweden, November 2003.
[9] International Electrotechnical Commission. Industrial
systems, installations and equipment and industrial
products  structuring principles and reference designations. IEC Standard 61346, 1996.
[10] Modelica Association. Modelica  A Unified ObjectOriented Language for Physical Systems Modeling,
Version 2.2. http://www.modelica.org, 2005.
[11] Walter Murray. Sequential quadratic programming
methods for large-scale problems. Computational Optimization and Applications, 7(1):127142, 1997.
[12] M. Otter, J. Arzen, and A. Schneider. StateGraph 
a Modelica library for hierarchical state machines. In
Proceedings of the 4th International Modelica Conference. Modelica Association, Hamburg-Harburg,
Germany, March 2005.
[13] The MathWorks, Inc. Simulink: for model-based and
system level design. http://www.mathworks.com.

302

Modelica 2006, September 4th  5th

Types in the Modelica Language

Types in the Modelica Language
David Broman

Peter Fritzson

Sebastien Furic

Linkoping University, Sweden
davbr@ida.liu.se

Linkoping University, Sweden
petfr@ida.liu.se

Imagine, France

Abstract

types and type systems. This may result in incompatible compilers and unexpected behavior when
Modelica is an object-oriented language designed using the language.
for modeling and simulation of complex physical
systems. To enable the possibility for an engineer
The purpose of this paper is twofold. The first
to discover errors in a model, languages and com- part gives an overview of the concept of types,
pilers are making use of the concept of types and states concrete definitions, and explains how this
type checking. This paper gives an overview of relates to the Modelica language. Hence, the first
the concept of types in the context of the Model- goal is to augment the computer science perspecica language. Furthermore, a new concrete syntax tive of language design among the individuals infor describing Modelica types is given as a starting volved in the Modelica language design. The longpoint to formalize types in Modelica. Finally, it is term objective of this work is to provide aids for
concluded that the current state of the Modelica further design considerations when developing, enlanguage specification is too informal and should hancing and simplifying the Modelica language.
in the long term be augmented by a formal defin- The intended audience is consequently engineers
ition.
and computer scientists interested in the foundaKeywords: type system; types; Modelica; simulation; modeling; type safety

1

Introduction

One long term goal of modeling and simulation
languages is to give engineers the possibility to
discover modeling errors at an early stage, i.e.,
to discover problems in the model during design
and not after simulation. This kind of verification is traditionally accomplished by the use of
types in the language, where the process of checking for such errors by the compiler is called type
checking. However, the concept of types is often not very well understood outside parts of the
computer science community, which may result in
misunderstandings when designing new languages.
Why is then types important? Types in programming languages serve several important purposes
such as naming of concepts, providing the compiler with information to ensure correct data manipulation, and enabling data abstraction. Almost
all programming or modeling languages provide
some kind of types. However, few language specifications include precise and formal definitions of
The Modelica Association

tion of the Modelica language.
The second purpose and likewise the main contribution of this work is the definition of a concrete
syntax for describing Modelica types. This syntax
together with rules of its usage can be seen as a
starting point to more formally describe the type
concept in the Modelica language. To the best of
our knowledge, no work has previously been done
to formalize the type concept of the Modelica language.
The paper is structured as follows: Section 2
outlines the concept of types, subtypes, type systems and inheritance, and how these concepts are
used in Modelica and other mainstream languages.
Section 3 gives an overview of the three main forms
of polymorphism, and how these concepts correlate with each other and the Modelica language.
The language concepts and definitions introduced
in Section 2 and 3 are necessary to understand the
rest of the paper. Section 4 introduces the type
concept of Modelica more formally, where we give
a concrete syntax for expressing Modelica types.
Finally, Section 5 state concluding remarks and
propose future work in the area.

303

Modelica 2006, September 4th  5th

D. Broman, P. Fritzson, S. Furic

2

Types, Subtyping and
Inheritance

by the run-time system or by a language construct, such as exception handling.

There exist several models of representing types,
where the ideal model [3] is one of the most wellknown. In this model, there is a universe V of all
values, containing all values of integers, real numbers, strings and data structures such as tuples,
records and functions. Here, types are defined as
sets of elements of the universe V . There is infinite number of types, but all types are not legal
types in a programming language. All legal types
holding some specific property, such as being an
unsigned integer, are called ideals. Figure 1 gives
an example of the universe V and two ideals: real
type and function type, where the latter has the
domain of integer and codomain of boolean.

Figure 1: Schematic illustration of Universe V and
two ideals.
In most mainstream languages, such as Java and
C++, types are explicitly typed by stating information in the syntax. In other languages, such as
Standard ML and Haskell, a large portion of types
can be inferred by the compiler, i.e., the compiler
deduces the type from the context. This process is
referred to as type inference and such a language
is said to be implicitly typed. Modelica is an explicitly typed language.

2.1

A programming language is said to be safe if no
untrapped errors are allowed to occur. These
checks can be performed as compile-time checks,
also called static checks, where the compiler finds
the potential errors and reports them to the programmer. Some errors, such as array out of bound
errors are hard to resolve statically. Therefore,
most languages are also using run-time checks,
also called dynamic checking. However, note that
the distinction between compile-time and run-time
becomes vaguer when the language is intended for
interpretation.
Typed languages can enforce language safety
by making sure that well-typed programs cannot
cause type errors. Such a language is often called
type safe or strongly typed. This checking process
is called type checking and can be carried out both
at run-time and compile-time.
The behavior of the types in a language is expressed in a type system. A type system can
be described informally using plain English text,
or formally using type rules. The Modelica language specification is using the former informal
approach. Formal type rules have much in common with logical inference rules, and might at
first glance seem complex, but are fairly straightforward once the basic concepts are understood.
Consider the following:
G ` e1 : bool
G ` e2 : T
G ` e3 : T
(t-if)
G ` if e1 then e2 else e3 : T

which illustrates a type rule for the following ModLanguage Safety and Type Systems elica if-expression:

When a program is executed, or in the Modelica
case: during simulation, different kinds of execution errors can take place. It is practical to distinguish between the following two types of runtime
errors [2].
 Untrapped errors are errors that can go unnoticed and later cause arbitrary behavior of
the system. For example, writing data out of
bound of an array might not result in an immediate error, but the program might crash
later during execution.
 Trapped errors are errors that force the computation to stop immediately; for example division by zero. The error can then be handled
The Modelica Association

if e1 then e2 else e3

A type rule is written using a number of premises
located above the horizontal line and a conclusion
below the line. The typing judgement G ` e : T
means that expression e has type T with respect
to a static typing environment G. Hence, the rule
(t-if) states that guard e1 must have the type of
a boolean and that e2 and e3 must have the same
type, which is also the resulting type of the ifexpression after evaluation. This resulting type is
stated in the last part of the conclusion, i.e., : T .
If the language is described formally, we can attempt to prove the type soundness theorem [15].
If the theorem holds, the type system is said to be
sound and the language type safe or or just safe.

304

Modelica 2006, September 4th  5th

Types in the Modelica Language

Language
Standard ML
Java
Common LISP
Modelica
Pascal
C/C++
Assembler

The concept of type safety can be illustrated by
Robin Milners famous statement Well-typed programs cannot go wrong[9]. Modern type soundness proofs are based on Wright and Felleisens
approach where type systems are proven correct
together with the languages operational semantics [15]. Using this technique, informally stated,
type safety hold if and only if the following two
statements holds:

Type Safe
yes
yes
yes
yes
almost
no
no

Checking
static
static
dynamic
static1
static
static
-

Table 1: Believed type safety of selected lan Preservation - If an expression e has a type T guages.
and e evaluates to a value v, then v also has
type T .
2.2 Subtyping

 Progress - If an expression e has a type T
then either e evaluates to a new expression e0
or e is a value. This means that a well typed
program never gets stuck, i.e., it cannot go
into a undefined state where no further evaluations are possible.

Subtyping is a fundamental language concept used
in most modern programming languages. It means
that if a type S has all the properties of another
type T , then S can be safely used in all contexts
where type T is expected. This view of subtyping is often called the principle of safe substitution
[12]. In this case, S is said to be a subtype of T ,
which is written as

Note that the above properties of type safety corS <: T
(1)
responds to our previous description of absence
of untrapped errors. For example, if a division by This relation can be described using the following
zero error occurs, and the semantics for such event important type rule called the rule of subsumption.
is undefined, the progress property will not hold,
i.e., the evaluation gets stuck, or enters an unG`t :S
S <: T
(t-sub)
defined state. However, if dynamic semantics are
G`t :T
defined for throwing an exception when the division by zero operation occurs, the progress propThe rule states that if S <: T , then every term 2
erty holds.
t of type S is also a term of type T . This shows a
For the imperative and functional parts of the special form of polymorphism, which we will furModelica language, the safety concept corresponds ther explore in Section 3.
to the same methodology as other languages,
such as Standard ML. However, for the instan- 2.3 Inheritance
tiation process of models, the correspondence to
Inheritance is a fundamental language concept
the progress and preservation properties are not
found in basically all class based Object-Oriented
obvious.
(OO) languages. From an existing base class, a
Table 1 lists a number of programming lan- new subclass can be created by extending from
guages and their properties of being type safe the base class, resulting in the subclass inheriting
[10][2]. The table indicates if the languages are all properties from the base class. One of the main
primarily designed to be checked statically at purposes with inheritance is to save programming
compile-time or dynamically at run-time. How1 One can argue whether Modelica is statically or dynamever, the languages stated to be statically type
ically checked, depending on how the terms compile-time
checked typically still perform some checking at and run-time are defined. Furthermore, since no exception
runtime.
handling is currently part of the language, semantics for
Although many of the languages are commonly
believed to be safe, few have been formally proven
to be so. Currently, ML [9] and subsets of the Java
language [14] [7] has been proven to be safe.
The Modelica Association

handling dynamic errors such as array out of bound is not
defined in the language and is therefore considered a compiler implementation issue.
2 The word term is commonly used in the literature as
an interchangeable name for expression.

305

Modelica 2006, September 4th  5th

D. Broman, P. Fritzson, S. Furic

and maintenance efforts of duplicating and reading
duplicates of code. Inheritance can in principle be
seen as an implicit code duplication which in some
circumstances implies that the subclass becomes a
subtype of the type of the base class.
Figure 2 shows an example3 where inheritance
is used in Modelica. A model called Resistor
extends from a base class TwoPin, which includes
two elements v for voltage and i for current. Furthermore, two instances p and n of connector Pin
are public elements of TwoPin. Since Resistor
extends from TwoPin, all elements v, i, p and
n are copied to class Resistor. In this case,
the type of Resistor will also be a subtype of
TwoPins type.
connector Pin
SI.Voltage v;
flow SI.Current i;
end Pin;
partial model TwoPin
SI.Voltage v;
SI.Current i;
Pin p, n;
equation
v = p.v - n.v;
0 = p.i + n.i;
i = p.i;
end TwoPin;
model Resistor
extends TwoPin;
parameter SI.Resistance R=100;
equation
R*i = v;
end Resistor;

A famous example, originally stated by Alan
Snyder [13], illustrates the difference between subtyping and inheritance. Three common abstract
data types for storing data objects are queue, stack
and dequeue. A queue normally has two operations, insert and delete, which stores and returns
object in a first-in-first-out (FIFO) manner. A
stack has the same operations, but are using a
last-in-first out (LIFO) principle. A dequeue can
operate as both a stack and a queue, and is normally implemented as a list, which allows inserts
and removals at both the front and the end of the
list.
Figure 3 shows two C++ classes modeling the
properties of a dequeue and a stack. Since class
Dequeue implements the properties also needed
for a stack, it seems natural to create a subclass Stack that inherits the implementation
from Dequeue. In C++, it is possible to use
so called private inheritance to model inheritance
with an exclude operation, i.e., to inherit some, but
not all properties of a base class. In the example, the public methods insFront, delFront,
and delRear in class Dequeue are inherited to
be private in the subclass Stack. However, by
adding new methods insFront and delFront
in class Stack, we have created a subclass, which
has the property of a stack by excluding the
method delRear. Stack is obviously a subclass
class Dequeue{
public:
void insFront(int e);
int delFront();
int delRear();
};

Figure 2: Example of inheritance in Modelica,
class Stack : private Dequeue{
where a new subclass Resistor is created by ex- public:
tending the base class TwoPin.
void insFront(int e)
However, a common misunderstanding is that subtyping and inheritance is the same concept [10].
A simple informal distinction is to say that subtyping is a relation on interfaces, but inheritance is a relation on implementations. In the
resistor example, not only the public elements
v, i, p and n will be part of class Resistor,
but also the meaning of this class, i.e, the equations v = p.v - n.v, 0 = p.i + n.i and
i = p.i.

{Dequeue::insFront(e);}
int delFront()
{return Dequeue::delFront();}
};

Figure 3: C++ example, where inheritance does
not imply a subtype relationship.

of Dequeue, but is it a subtype? The answer is
no, since an instance of Stack cannot be safely
used when Dequeue is expected. In fact, the op3 These classes are available in the Modelica Standard posite is true, i.e., Dequeue is a subtype of Stack
Library 2.2, but are slightly modified for reasons of read- and not the other way around. However, in the
ability.
following section we will see that C++ does not
The Modelica Association

306

Modelica 2006, September 4th  5th

Types in the Modelica Language

treat such a subtype relationship as valid, but the declarations are used. Type equivalence is contype system of Modelica would do so.
trolled by checking that the same declared name
is used. Furthermore, the subtype relation in
2.4 Structural and Nominal Type Sys- OO languages is checked by validating the inheritance order between classes. The C++ language is
tems
mainly using a nominal type system, even if parts
During type checking, regardless if it takes place at of the language does not obey the strict nominal
compile-time or run-time, the type checking algo- structure.
rithm must control the relations between types to
Consider the listing in Figure 4, which illussee if they are correct or not. Two of the most fun- trates a C++ model similar to the resistor exdamental relations are subtyping and type equiva- ample earlier given as Modelica code in Figure 2.
lence.
In this case, Resistor is a subclass of TwoPin
Checking of type equivalence is the single most and the type of Resistor is therefore also a
common operation during type checking. For ex- subtype of TwoPins type. However, the type
ample, in Modelica it is required that the left and of Inductor is not a subtype to the type of
right side of the equality in an equation have the TwoPin, since Inductor does not inherit from
same type, which is shown in the following type TwoPin. Moreover, Resistor2 is not type
rule.
equivalent to Resistor even if they have the
same structure and inherits from the same base
G ` e1 : T
G ` e2 : T
class, since they are opaquely declared.
(t-equ)
G ` e1 = e2 : Unit
Note that type equivalence has nothing to do with
equivalence of values, e.g., equation 4 = 10 is
type correct, since integers 4 and 10 are type
equivalent. However, this is of course not a valid
equation, since the values on the right and left side
are not the same.
The Unit type (not to confuse with physical
units), shown as the resulting type of the equation, is often used as a type for uninteresting result
values.
A closely related concept to type equivalence is
type declaration, i.e., when a type is declared as
a specific name or identifier. For example, the
following Modelica record declaration
record Person
String name;
Integer age;
end Person;

class Pin{
public:
float v, i;
};
class TwoPin{
public:
TwoPin() : v(0),i(0){};
float v, i;
Pin p, n;
};
class Resistor : public TwoPin{
public:
Resistor() : r(100) {};
float r;
};

class Resistor2 : public TwoPin{
public:
Resistor() : r(200) {};
float r;
declares a type with name Person. Some lan};
guages would treat this as a new unique type that

is not equal to any other type. This is called
opaque type declaration. In other languages, this
declaration would simply mean that an alternative
name is given to this type. However, the type can
also be expressed by other names or without any
name. This latter concept is commonly referred
as transparent type declaration.
In a pure nominal type system, types are compared (subtyping and type equivalence) by using
the names of the declared types, i.e., opaque type
The Modelica Association

class Inductor{
public:
TwoPin() : v(0),i(0){};
float v, i;
Pin p, n;
const float L;
};

Figure 4:
C++.

307

Resistor inheritance example in
Modelica 2006, September 4th  5th

D. Broman, P. Fritzson, S. Furic

In a structural type system [12], declarations are
introducing new names for type expressions, but
no new types are created. Type equivalence and
subtype relationship is only decided depending on
the structure of the type, not the naming.
The Modelica language is inspired by the type
system described by Abadi and Cardelli in [1]
and is using transparent type declarations, i.e.,
Modelica has a structural type system. Consider the Resistor example given in Figure 2
and the two complementary models Inductor
and Resistor2 in Figure 5. Here, the same
relations holds between TwoPin and Resistor,
i.e., that the type of Resistor is a subtype of
TwoPins type. The same holds between TwoPin
and Resistor2. However, now Resistor and
Resistor2 are type equivalent, since they have
the same structure and naming of their public
elements. Furthermore, the type of Inductor
is now a valid subtype of TwoPins type, since
Inductor contains all public elements (type and
name) of the one available in TwoPin.
model Resistor2
extends TwoPin;
parameter SI.Resistance R=200;
equation
R*i = v;
end Resistor;

posite is not always true. Recall the Dequeue
example listed in Figure 3. The class Stack has
a subclass relation to Dequeue, but a subtype relation cannot be enforced, due to the structure of
the class. The converse could be true, but the
type system of C++ would not allow it, since it
is nominal and subtype relationships are based on
names. Hence, a structural type system can be
seen as more expressive and flexible compared to
a nominal one, even if both gives the same level of
language type safety.

3

Polymorphism

A type system can be monomorphic in which each
value can belong to at most one type. A type system, as illustrated in Figure 1, consisting of the
distinct types function, integer, real, and boolean
is a monomorphic type system. Conversely, in a
polymorphic type system, each value can belong
to many different types. Languages supporting
polymorphism are in general more expressive compared to languages only supporting monomorphic
types. The concept of polymorphism can be handled in various forms and have different naming
depending on the paradigm where it is used. Following John C. Mitchells categorization, polymorphism can be divided into the following three main
categories [10]:

model Inductor
Pin p, n;
SI.Voltage v;
SI.Current i;
parameter SI.Inductance L=1;
equation
L*der(i) = v;
end Inductor;

 Subtype Polymorphism
 Parametric Polymorphism
 Ad-hoc Polymorphism

There are other similar categorizations, such as
Cardelli and Wegners [3], where the ad-hoc catFigure 5:
Complementary Inductor and egory is divided into overloading and coercion at
Resistor2 models to the example in Figure 2. the top level of categories.
It is important to stress that classes and types in
a structural type system are not the same thing,
which also holds for Modelica. The type of a class
represents the interface of the class relevant to the
languages type rules. The type does not include
implementation details, such as equations and algorithms.
Note that a nominal type system is more restrictive than a structural type system, i.e., two
types that have a structured subtype relation can
always have a subtype relation by names (if the
languages semantics allows it). However, the opThe Modelica Association

3.1

Subtype Polymorphism

Subtyping is an obvious way that gives polymorphic behavior in a language. For example, an instance of Resistor can be represented both as an
TwoPin type and a Resistor type. This statement can also be shown according to the rule of
subsumption (t-sub) described in Section 2.2.
When a value is changed from one type to some
supertype, it is said to be an up-cast. Up-casts
can be viewed as a form of abstraction or information hiding, where parts of the value becomes

308

Modelica 2006, September 4th  5th

Types in the Modelica Language

invisible to the context. For example, an up-cast
from Resistors type to TwoPins type hides
the parameter R. Up-casts are always type safe,
i.e., the run-time behavior cannot change due to
the upcast.
However, for subtype polymorphism to be useful, typically types should be possible to downcast, i.e., to change to a subtype of a types value.
Consider function Foo
function Foo
input TwoPin x;
output TwoPin y;
end Foo;

where we assume that down-casting is allowed4 . It
is in this case valid to pass either a value of type
TwoPin (type equivalence) or a subtype to the
type of TwoPin. Regardless if a value of TwoPins
or Inductors type is sent as input to the function, a value of TwoPins type will be returned. It
is not possible for the static type system to know
if this is a TwoPin, Resistor or a Inductor
type. However, for the user of the function, it
might be crucial to handle it as an Inductor,
which is why a down-cast is necessary.
Down-casting is however not a safe operation,
since it might cast down to the wrong subtype.
In Java, before version 1.5 when generics were introduced, this safety issue was handled using dynamic checks and raising dynamic exceptions if
an illegal down-cast was made. Subtype polymorphism is sometimes called poor-mans polymorphism, since it enables polymorphic behavior, but
the safety of down-casts must be handled dynamically [12].
The Modelica language supports subtyping as
explained previously, but does not have any operation for down-cast. Since the language does not
include this unsafe operation, only a limited form
of subtype polymorphism can be used with functions. For example, a function can operate on a
polymorphic type as input, such as TwoPin, but
it only makes sense to return values of a type that
can be instantly used by the caller.
However, subtype polymorphism is more extensively used when reusing and replacing components in models, i.e., by using the redeclare
keyword.

3.2

Parametric Polymorphism

The term parametric polymorphism means that
functions or classes can have type parameters, to
which types or type expressions can be supplied.
The term parametric polymorphism is often used
in functional language communities, while people
related to object-oriented languages tend to use
the term generics.
The C++ template mechanism is an example of explicit parametric polymorphism, where
the type parameter must be explicitly declared.
Consider for example Figure 6, where a template function swap is implemented. The type
parameter T must be explicitly stated when
declaring the function. However, the type argument is not needed when calling the function, e.g., both int x,y; swap(x,y); and
float i,j; swap(i,j) are valid usage of the
function.
template<typename T>
void swap(T& x, T& y){
T tmp = x;
x = y;
y = tmp;
}

Figure 6: Explicit parametric polymorphism in
C++.

Standard ML on the other hand is making use
of implicit parametric polymorphism, where the
type parameters do not need to be explicitly stated
when declaring the function. Instead, the type inference algorithm computes when type parameters
are needed.
A notable difference of parametric and subtype
polymorphism is that all type checking of parametric polymorphism can take place at compiletime and no unsafe down-cast operation is needed.
Standard ML and and C++ are internally handling parametric polymorphism quite differently.
In C++ templates, instantiation to compiled code
of a function is done at link time. If for example function swap is called both using int and
float, different code of the function is generated
for the two function calls. Standard ML on the
other hand is using uniform data representation,
where all data objects are represented internally as
4 This function type or example is not valid in the cur- pointers/references to objects. Therefore, there is
rent Modelica standard. It is used only for the purpose of no need to create different copies of code for difdemonstrating subtype polymorphism.
ferent types of arguments.
The Modelica Association

309

Modelica 2006, September 4th  5th

D. Broman, P. Fritzson, S. Furic

Modelica can be seen to support a limited ver- distinction between overloading and type coersion of parametric polymorphism, by using the re- cion is not always clear, and the two concepts are
declare construct on local class declarations.
strongly related. Consider the following four expressions of multiplication [3]:

3.3

Ad-hoc Polymorphism

7
6.0
In parametric polymorphism the purpose is to de- 6
clare one implementation that can be used with 6.0

different types of arguments. Ad-hoc polymorphism, by contrast, allows a polymorphic value to
be used differently depending on which type the
value is viewed to have.
There are several language concepts that fall
under the concept of ad-hoc polymorphism [3],
where Overloading and Coercion are most notable.
Other related concepts that also fall under this
category are Javas instanceOf concept and different form of pattern matching [12].
3.3.1

3.3.2

Coercion

Another form of ad-hoc polymorphism is coercion or implicit type conversion, which is run-time
conversion between types, typically performed by
code automatically inserted by the compiler. The
The Modelica Association

9
9.1
5.2
8

//Integer * Integer
//Real * Real
//Integer * Real
//Real * Integer

All four of these expressions are valid Modelica expressions, but they can in the context of coercion
and overloading be interpreted in three different
ways:
 The multiplication operator is overloaded
four times, one for each of the four expressions.
 The operator is overloaded twice; one for each
of the the first two expressions. If the arguments have different types, i.e., one is Real
and the other one Integer, type coercion is
first performed to convert the arguments to
Real.

Overloading

A symbol is overloaded if it has two or more meanings, which are distinguished by using types. That
is, a single function symbol or identifier is associated with several implementations.
An example of overloading that exists in many
programming languages is operator overloading
for built in types. For example, the symbol +
is using infix notation and have two operands associated with it. The type of these operands decide how the operation should be carried out, i.e.,
which implementation that should be used.
Overloading can take place at either compiletime or at run-time. Overloading used at runtime is often referred to as dynamic lookup[10], dynamic dispatch or multi-method dispatch. In most
cases, the single term overloading refers to static
overloading taking place at compile-time. The distinction becomes of course vague, if the language
is interpreted and not compiled.
Another form of overloading available in some
languages is user-defined function overloading,
where a function identifier can represent several implementations for different type arguments.
Modelica is currently not supporting any form of
user defined overloading.

*
*
*
*

 Arguments are always implicitly converted to
Real, and the operator is only defined for
Reals.
Type conversions can also be made explicit, i.e.,
code is inserted manually by the programmer that
converts the expression to the correct type.
In Modelica, implicit type conversion is used
when converting from Integer to Real. Of the
three different cases listed above, the second one
applies to the current Modelica 2.2 standard.

4

Modelica Types

In the previous sections we described different aspects of types for various languages. In this section we will present a concrete syntax for describing Modelica types, followed by rules stating legal
type expressions for the language.
The current Modelica language specification
[11] specifies a formal syntax of the language, but
the semantics including the type system are given
informally using plain English. There is no explicit definition of the type system, but an implicit
description can be derived by reading the text describing relations between types and classes in the
Modelica specification. This kind of implicit specification makes the actual specification open for
interpretation, which may result in incompatible

310

Modelica 2006, September 4th  5th

Types in the Modelica Language

compilers; both between each other, but also to
the specification itself. Our work in this section
should be seen as a first step to formalize what a
type in Modelica actually is. Previous work has
been performed to formally specify the semantics
of the language [8], but without the aim to more
precisely define the exact meaning of a type in the
language.
Why is it then so important to have a precise
definition of the types in a language? As we have
described earlier, a type can be seen as an interface
to a class or an object. The concept of interfaces
forms the basis for the widely accepted approach
of separating specification from implementation,
which is particularly important in large scale development projects. To put it in a Modelica modeling context, let us consider a modeling project
of a car, where different modeling teams are working on the wheels, gearbox and the engine. Each
team has committed to provide a set of specific attributes for their component, which specifies the
interface. The contract between the teams is not
violated, as long as the individual teams are following this commitment of interface (the specification) by adding / removing equations (the implementation). Since the types state the interfaces in
a language with a structural type system, such as
Modelica, it is obviously decisive that they have a
precise definition.
Our aim here is to define a precise notation of
types for a subset of the Modelica language, which
can then further be extended to the whole language. Since the Modelica language specification
is open for interpretation, the presented type definition is our interpretation of the specification.

4.1

Concrete Syntax of Types

Now, let us study the types of some concrete Modelica models. Consider the following model B,
which is rather uninteresting from a physical point
of view, but demonstrates some key concepts regarding types.
model B
parameter Real s=-0.5;
connector C
flow Real p;
Real q;
end C;
protected
Real x(start=1);
equation
der(x) = s*x;
end B;

The Modelica Association

What is the type of model B? Furthermore, if B
was used and instantiated as a component in another model, e.g., B b;, what would the resulting
type for element b be? Would the type for B and
b be the same? The answer to the last question is
definitely no. Consider the following listing, which
illustrates the type of model B.
model classtype //Class type of model B
public parameter Real objtype s;
public connector classtype
flow Real objtype p;
nonflow Real objtype q;
end C;
protected Real objtype x;
end

This type listing follows the grammar syntax
listed in Figure 7. The first thing to notice is that
the name of model B is not visible in the type. Recall that Modelica is using a structural type system, where the types are determined by the structure and not the names, i.e., the type of model B
has nothing to do with the name B. However, the
names of the elements in a type are part of the
type, as we can see for parameter s and variable
x.
The second thing to observe is that the equation part of the model is missing in the type definition. The reason for this is that equations and
algorithms are part of the implementation and not
the model interface. Moreover, all elements s, C
and x are preserved in the type, but the keywords
model, connector and basic type Real are followed by new keywords classtype or objtype.
This is one of the most important observations to
make regarding types in a class based system using structural subtyping and type equivalence. As
we can see in the example, the type of model B
is a class type, but parameter s is an object type.
Simply stated: A class type is the type of one
of Modelicas restricted classes, such as model,
connector, record etc., but an object type is
the type of an instance of a class, i.e., an object.
Now, the following shows the object type of b,
where b represents an instance of model B:
model objtype //Object type of b
parameter Real objtype s;
end

Obviously, both the type of connector C and
variable x have been removed from the type of b.
The reason is that an object is a run-time entity,
where neither local classes (connector C) nor protected elements (variable x) are accessible from
311

Modelica 2006, September 4th  5th

D. Broman, P. Fritzson, S. Furic

outside the instance. However, note that this is
not the same as that variable x does not exist in
a instance of B; it only means that it is not visible
to the outside world.
Now, the following basic distinctions can be
made between class types and object types:
 Classes can inherit (using extends) from class
types, i.e., the type that is bound to the name
used in an extends clause must be a class
type and not an object type.
 Class types can contain both object types and
class types, but object types can only hold
other object types.
 Class types can contain types of protected elements; object types cannot.

Let us now take a closer look at the grammar
listed in Figure 7. The root non-terminal of the
grammar is type, which can form a class or object type of the restricted classes or the built in
types Real, Integer, Boolean, String, or
enumeration. The grammar is given using a
variant of Extended Backus-Naur Form (EBNF),
where terms enclosed in brackets {} denote zero,
one or more repetitions. Keywords appearing in
the concrete syntax are given in bold font. All
prefixes, such as public, flow, outer etc. can
be given infinitely many times. The correct usage
of these prefixes is not enforced by the grammar,
and must therefore be handled later in the semantic analysis. We will give guidelines for default
prefixes and restrictions of the usage of prefixes in
the next subsection.
Now, let us introduce another model A, which
extends from model B:

 Class types are used for compile time evaluamodel A
tion, such as inheritance and redeclarations.

type

::=

|
|
kindo f type ::=
pre f ix ::=

enumlist ::=
access ::=
causality ::=
f lowpre f ix
modi f iability

::=
::=

variability

::=

outerinner

::=

extends B(s=4);
C c1;
equation
c1.q = -10*der(x);
(model | record | connector | end A;
block | function | package)
The question is now what the type of model A
kindo f type
is and if it is instantiated to an object, i.e., A a;,
{{pre f ix} type identi f ier ;} end
what is then the type of a? The following shows
(Real | Integer | Boolean |
the type of model A.
String) kindo f type
model classtype //Class type of A
enumeration kindo f type
public parameter Real objtype s;
public connector classtype
enumlist
flow Real objtype p;
classtype | objtype
nonflow Real objtype q;
access | causality |
end C;
f lowpre f ix | modi f iability |
public connector objtype
flow Real objtype p;
variability | outerinner
nonflow Real objtype q;
( identi f ier {, identi f ier} )
end c1;
public | protected
protected Real objtype x;
input | output |
end
inputoutput
First of all, we see that the type of model A does
flow | nonflow
not include any extends keyword referring to the
replaceable | modifiable |
inherited model B. Since Modelica has a structural
final
type system, it is the structure that is interesting,
and thus a type only contains the collapsed strucconstant | parameter |
ture of inherited elements. Furthermore, we can
discrete | continuous
see that the protected elements from B are still
outer | inner |
available, i.e., inheritance preserves the protected
notouterinner

element after inheritance. Moreover, since model
A contains an instance of connector C, this is now
Figure 7: Concrete syntax of partial Modelica available as an object type for element c1 in the
types.
class type of A. Finally, consider the type of an
The Modelica Association

312

Modelica 2006, September 4th  5th

Types in the Modelica Language
M=
R=
C=
B=
F=
P=
X=

instance a of class A:
model objtype //Object type of a
parameter Real objtype s;
connector objtype
flow Real objtype p;
nonflow Real objtype q;
end c1;
end

Y =
a =
a0 =
c =

The protected element is now gone, along with
the elements representing class types. A careful
reader might have noticed that each type definition ends without a semi-colon, but elements defined inside a type such as model classtype
ends with a semi-colon. A closer look at the grammar should make it clear that types themselves
do not have names, but when part of an element
definition, the type is followed by a name and a
semi-colon. If type expressions were to be ended
with a semi-colon, this recursive form of defining
concrete types would not be possible.

4.2

c0 =
f =
m=
m0 =
v =
v0 =
v00 =
o =

Prefixes in Types

Elements of a Modelica class can be prefixed with
different notations, such as public, outer or
replaceable. We do not intend to describe the
semantics of these prefixes here, instead we refer
to the specification [11] and to the more accessible
description in [5]. Most of the languages prefixes
have been introduced in the grammar in Figure 7.
However, not all prefixes are allowed or have any
semantic meaning in all contexts.
In this subsection, we present a partial definition of when different prefixes are allowed to appear in a type. In currently available tools for
Modelica, such as Dymola [4] and OpenModelica
[6], the enforcement of these restrictions is sparse.
The reason for this can both be the difficulties
to extract this information from the specification
and the fact that the rules for the type prefixes
are very complex.
In Figure 8 several abbreviations are listed. The
lower case abbreviations a, c, c0 etc. define sets of
prefixes. The uppercase abbreviations M, R etc.
together with a subscription of c for class type
and o for object type, represents the type of an
element part of another type. For example Mc is
a model class type, and Ro is a record object type.
Now, consider the rules for allowed prefixes of
elements shown in the tables given in Figure 9,
Figure 10, and Figure 11.
In Figure 9 the intersection between the column (the type of an element) and the row (the
The Modelica Association

model
record
connector
block
function
package
Integer, Boolean,
enumeration, String
Real
{public, protected}
{public}
{input, output,
inputoutput}
{input, output}
{flow, nonflow}
{replaceable,
modifiable, final}
{modifiable, final}
{constant, parameter
discrete, continuous}
{constant, parameter
discrete}
{constant}
{outer, inner,
notouterinner}

Access
Causality
Flowprefix
Modifiability
Variability

Outerinner

Figure 8: Abbreviation for describing allowed prefixes. Default prefixes are underlined.
Mc Rc
Mc amo amo
Rc .
.
Cc .
.
Bc amo amo
Fc .
am
Pc am amv00

Cc
amo
.
.
amo
.
am

Bc
amo
.
.
amo
.
am

Fc
amo
.
.
amo
am
am

Pc
.
.
.
.
.
a0 m

Xc
amo
.
.
amo
am
am

Yc
amo
.
.
amo
am
am

Figure 9: Prefixes allowed for elements of class
type (columns) inside a class type (rows).
Mc
Rc
Cc
Bc
Fc
Pc

Mo
amo
.
.
amo
.
.

Ro
Co
Bo
acmo acmo amo
mo .
.
mo mo .
ac0 mo ac0 mo amo
ac0 m .
.
amv00 .
.

Fo
amo
.
.
amo
am
.

Po
.
.
.
.
.
.

Xo
acmv0 o
mv0 o
m
ac0 mv0 o
ac0 mv0
amv00

Yo
acmvo
mvo
mc f vo
ac0 mvo
ac0 mv
amv00

Figure 10: Prefixes allowed for elements of object
type (columns) inside a class type (rows).
type that contains this element) states the allowed prefixes for this particular element. This
table shows which prefixes that are allowed for
a class type that is part of another class type.
For example, recall the connector C in model A.
When looking at the type of A, we have a class
type (the model class type) that contains an-

313

Modelica 2006, September 4th  5th

D. Broman, P. Fritzson, S. Furic

Mo
Ro
Co
Bo
Fo
Po

Mo
o
.
.
o
.
.

Ro
cm0 o
m0 o
m0 o
c0 o
c0
.

Co
co
.
o
c0 o
.
.

Bo
o
.
.
o
.
.

Fo
o
.
.
o
.
.

Po Xo
Yo
.
cm0 v0 o cm0 vo
.
m0 v0 o m0 vo
.
.
c f m0 vo
0
0
0
.
c m v o c0 m0 vo
.
m0 v0
m0 v
.
.
.

ation or inheritance, i.e., compile-time evaluation.
Then when an object exists, the type information
for replaceable is of no interest any more. Finally,
we can see that package class types can hold any
other class types, but no other class type can hold
package types.

Note that several aspects described here are our
Figure 11: Prefixes allowed for elements of object
design suggestions for simplifying and making the
type (columns) inside an object type (rows).
language more stringent from a type perspective.
Currently, there are no limitations for any class
other class type (the connector class type), i.e., to contain packages in the Modelica specification.
the allowed prefixes are given in the intersec- Furthermore, there are no strict distinctions betion of row 1 and column 3. In this case, ac- tween object- and class types, since elaboration
cess prefixes public and protected, modifia- and type checking are not clearly distinguished.
bility prefixes replaceable, modifiable, and Hence, redeclaration of elements in an object are
final, and outer/inner prefixes outer, inner in fact possible according to the current specification, even if it does not make sense in a class based
and notouterinner are allowed.
We have introduced a number of new prefixes: type perspective.
inputoutput, notouterinner, nonflow,
modifiable, and continuous. These new prefixes are introduced to enable a complete type definition, e.g., it should be possible to explicitly 4.3 Completeness of the Type Syntax
specify that a variable in a connector is not a flow
variable by giving a nonflow prefix. However, One might ask if this type definition is complete
for simplicity, sometimes it is more convenient to and includes all aspects of the Modelica language
leave out some of the prefixes, and instead use and the answer to that question is no. There are
default prefixes. The defined default prefixes are several aspects, such as arrays, partial and enshow underlined in Figure 8. If no underlined pre- capsulated classes, units, constrained types, confix exists in a specific set, this implies that the ditional components and external functions that
prefix must be explicitly stated.
are left out on purpose.
Analogous to the description of Figure 9, FigThe main reason for this work is to pinpoint the
ure 10 shows the allowed prefixes for elements of
main structure of types in Modelica, not to formuobject types contained in a class type and Figlate a complete type definition. As we can see from
ure 11 shows object types contained in object
the previous sections, the type concept in the lantypes. There are no tables given for class types
guage is very complex and hard to define, due to
contained in object types for the simple reason
the large number of exceptions and the informal
that object types are not allowed to contain class
description of the semantics and type system in
types.
the language specification.
In some of the cells in the tables described
The completeness and correctness of the allowed
above, a dot symbol is shown. This means that
type
prefixes described in the previous section dethe specific type of element inside a certain type
is not allowed. Hence, such a combination should pend on how the specification is interpreted. However, the notation and structure of the concrete
not be allowed by the compiler at compile-time.
Now, let us observe some general trends be- type syntax should be consistent and is intended
tween the allowed attributes. First of all, object to form the basis for incorporating this improved
types cannot contain class types, which is why type concept tighter into the language.
there are only 3 tables. Secondly, access prefixes
Finally, we would like to stress that defining
(public, protected) are only allowed in class types of a language should be done in parallel with
types, which is why Figure 11 does not contain the definition of precise semantic and type rules.
any abbreviation a. Thirdly, the replaceable Since the latter information is currently not availprefix does not make sense in object types, since able, the precise type definition is obviously not
redeclarations may only occur during object cre- possible to validate.
The Modelica Association

314

Modelica 2006, September 4th  5th

Types in the Modelica Language

5

Conclusion

References
[1] Martn Abadi and Luca Cardelli. A Theory of
Objects. Springer-Verlag, New York, USA, 1996.

We have in this paper given a brief overview of
the concept of types and how they relate to the
Modelica language. The first part of the paper
described types in general, and the latter sections
detailed a syntax definition of how types can be
expressed for the Modelica language.

[2] Luca Cardelli. Type Systems. In The Computer
Science and Engineering Handbook, chapter 97.
CRC Press, second edition, 2004.
[3] Luca Cardelli and Peter Wegner. On Understanding Types, Data Abstraction, and Polymorphism.
ACM Comput. Surv., 17(4):471523, 1985.

The current Modelica specification uses Extended Backus-Naur Form (EBNF) for specifying the syntax, but the semantics and the type
system are informally described. Moreover, the
Modelica language has become difficult to reason
about, since it has grown to be fairly large and
complex. By giving the types for part of the language we have illustrated that the type concept
is complex in the Modelica language, and that it
is non-trivial to extract this information from the
language specification.
Consequently, we think that it is important to
augment the language specification by using more
formal techniques to describe the semantics and
the type system. We therefore propose that a subset of Modelica should be defined, which models
the core concepts of the language. This subset
should be describe using operational semantics including formal type rules. For some time, denotational semantics has been used as the semantic
language of choice, however it has been shown to
be less cumbersome to prove type soundness using
operational semantics [15].

[4] Dynasim. Dymola - Dynamic Modeling Laboratory with Modelica (Dynasim AB). http://
www.dynasim.se/ [Last accessed: 8 May 2006].
[5] Peter Fritzson. Principles of Object-Oriented
Modeling and Simulation with Modelica 2.1.
Wiley-IEEE Press, New York, USA, 2004.
[6] Peter Fritzson, Peter Aronsson, Hakan Lundvall,
Kaj Nystrom, Adrian Pop, Levon Saldamli, and
David Broman. The OpenModelica Modeling,
Simulation, and Development Environment. In
Proceedings of the 46th Conference on Simulation
and Modeling (SIMS05), pages 8390, 2005.
[7] Atsushi Igarashi, Benjamin C. Pierce, and Philip
Wadler. Featherweight Java: a minimal core calculus for Java and GJ. ACM Trans. Program.
Lang. Syst., 23(3):396450, 2001.
[8] David Kagedal and Peter Fritzson. Generating a
Modelica Compiler from Natural Semantics Specifications. In Proceedings of the Summer Computer
Simulation Conference, 1998.
[9] Robin Milner. A Theory of Type Polymorphism in
Programming. Journal of Computer and System
Sciences, 17(3):348375, 1978.
[10] John C. Mitchell and Krzysztof Apt. Concepts in

In the short term, this proposed core language
Programming Languages. Cambridge University
is supposed to be used as basic data for better
Press, 2003.
design decision-making, not as an alternative or [11] Modelica Association. Modelica - A Unified
replacement of the official Modelica specification.
Object-Oriented Language for Physical Systems
However, the long term goal should, in our opModeling - Language Specification Version 2.2,
February 2005. Available from: http://www.
tion, be to describe the entire Modelica language
modelica.org [Last accessed: 29 March 2006].
formally.
[12] Benjamin C. Pierce. Types and Programming Languages. The MIT Press, 2002.
[13] Alan Snyder. Encapsulation and Inheritance in
Object-Oriented Programming Languages. In
Acknowledgments
OOPLSA 86: Conference proceedings on Objectoriented programming systems, languages and applications, pages 3845, New York, USA, 1986.
Thanks to Thomas Schon and Kaj Nystrom for
ACM Press.
many useful comments of this paper.
[14] Don Syme. Proving Java Type Soundness. Lecture
This research work was funded by CUGS (the
Notes in Computer Science, 1523:83, 1999.

Swedish National Graduate School in Computer
[15] Andrew K. Wright and Matthias Felleisen. A SynScience), by SSF under the VISIMOD project, and
tactic Approach to Type Soundness. Information
by Vinnova under the NETPROG Safe and Secure
and Computation, 115(1):3894, 1994.
Modeling and Simulation on the GRID project.
The Modelica Association

315

Modelica 2006, September 4th  5th

D. Broman, P. Fritzson, S. Furic

The Modelica Association

316

Modelica 2006, September 4th  5th

Session 3d

Session 3d
Electric Systems and Applications 1

The Modelica Association

317

Modelica 2006, September 4th  5th

Session 3d

The Modelica Association

318

Modelica 2006, September 4th  5th

Modeling and Simulation of Generator Circuit Breaker Performance

!
#

$ *

"
$
$
11 , ,

+ ,
! 0

#$%&'%
$()
% #$-'%' ./
0
11 ,

*

1+

BC 2
*
$
1 +
!
$
!
,
* 8 *
!
*
4
(
, $
D(7 ,*
5 !
,
6* ,
, $
*,
!
* $
,
+
2
*
!
3
1 1
* !
1
$
*
1 ,
* 1+
$ 8
+, *
+
,
1$
+
! + ,
! ,
!
*
+
,
2
,
!
, $
,
! ,*
78 $1
!

2
*
! 3

1
*
!
! ,
1

2
,
78

! ,
$
43 5
,
! * ,
, $

*,1

972

*
!$
6* ,
1 + ,$
1
*
$
+ ,*$

+

!

!

:
6*
43

* ,
,
1
5

*
*

*
! ,
3
1

,

*

!

,
!

*
1
1

$*
! ,
1
* ''' :
,* 1 1
$ * *
*
''
2 3
+ ,
;$
+ ,
* 1
4
5
*
4 !
5
+
+ ,
1 6*
*8
+
4
*
*1 5 *
*
! , 4
* 5
<
!
*
+
1 +
!
!
+
! 3
*
!"
# $
! *
* , =
1
>
,1
,
*
,
*
1 + !
, $
,
!
6* ,
4
, ,
!
*
!
*
! , 5
3
+
$
!
+
4
*
!
8 ,
! *
2 , 8 ,*,
!
*
*
!
*
! 3
*
*,1 ! ,
5
* 1 1
!
! ,
6* ,
, !
,
! !* ,
1 *
!
,
*
*
1
! ,
*
!
,
! , + !
8
3
, 8 ,*,
1
,$ 3
1
*
*
$
, 8 ? '%@
*
*
1
, 8 ? A'@
The Modelica Association

319

Modelica 2006, September 4th  5th

O. Fritz, M. Lakner

2

1 + !* + !$
,
2 !
1 +
*1
*,1 !
,
!
! ,
,
,

E
+ !

!

1
#

* 1
1F

&

, $
!

! $
1+

&

,

L

,

!

1+>

%
*
! ,
5

'

3
*
+4 5

!
'%

* $
5 *!!

!
+
'

2

4

G , H
!
4+
+1
%
* I*
$
,
*
1
!
,$
4! , ,1
1*

>

4

!!

'

55

!

*

$
*

+

!!
6* +$
5
!!
4 5
,
*
,
+
1
,
+
+
,
,
,
4
*
!
*
*
!
3
5
*
,
3
+
,
* !
!
;! !
1
%'
J' # 4 3
*
J' # 5
,
+
*
*
,
*
!
4
!
*
!
3
!
! ,
*
! ,
3

4! $
$
8

$
*

! 7
+
6* $
! %' 2

5
$

!
+ !
*!

1+

*

,

,
+!

,
,

$
,

*

!

2

$
4

,
!!

$
,
!

,
<

!

K

3
,
*

%
#

, ,
!
*
*,1 !
!
$
!!
,
! !*
+ ,
2
,
!
!
$
+ 6*
+
+ + 8
,
+
1
1*
* !
,
*
,
+
*
4
!* $
! ,
*
* 5
2
!!
! !
, $
>

*

,

+ 5
1+>

D

*

, + !
!
1+ !!
$
4 E5 !
,
+
, ! ,*
!
!!
>
!
,
*
!
D
*,1
1
! ,*
1
1+
+
*,1 2
,
! ,
8
!
! *
!
,
*
! *
1
,
8
,
+
1 +
,,
+
!
!
!
,
!
,
+ ,
8
,
8
1
8

$
$

!

$

$

&
,
6*

1
,

+4

$1
! * 6*
5 2
!!

+$!
1

,

* $
$

<
3
+ ,
*
1

+
!
,
2
!

The Modelica Association

320

,

,

*
!
;$
! ! ,
1+
!
,

$

Modelica 2006, September 4th  5th

Modeling and Simulation of Generator Circuit Breaker Performance

*

4! ,
*
5
!
1 !
2*
*!! $
,
*
1*
+
!
$
*
2 ,
!
!*
* 1
4
5
,
!
! *1$ ,
2
1 +1
* +
! , + !3
1
, ,
!* +
,
2
!
+ !
!* ,
*
,*
!
*
1+ , +
,
*
,
,*
,
+
,
8
4*
*
5
, $
2
,
!! ! ,
,
,
+
,
8
!*
!
$
,
* *1$,
$
+
,
*
8 !
,* $
,
,*
1
*
* $ ,
+
2
+ !
,
3
1
8
$
<
1 * !
+
,
*
!
!
*
+
$
+
*
+ ,
!
!
,
* *
,
+$
*
!
3
,
,
1
6*
,
8 ,
1
,1 !
3
<
!
,
4 * $
1
+ ,
,
5
*
4
5
+ , 4
1 *
*
5 7
,
4
*
5
,
*1$ ,
!
1
,1
3 $+
! ! *
!
1+
,
2 ,
* *
! *1$ ,
+
!
,
;
$
!
,
*
2
* $
*
* 4DM2 5
1
*
!
*
,
*
G * H
8
$
+
1
4
5
4
5 2
,
!
* *
$
*
+4
$
!
*1$ , 5

The Modelica Association

"
( ''
"

$ "

"

!
*

,
; 2

,
,

8
+

1
,*
+

,

!" ' " $
" "

!
,

$
! , +$
!*
!
5 # $
$

*
*

4
+

!
,
+ , ! 6*
+
1
*
! ,
!,

*
,
+

2

& !"
' "

321

$

,

!
2 +

,
+$

$
8 *$
*

"

Modelica 2006, September 4th  5th

O. Fritz, M. Lakner

)

*

''

< !
! ,

''

1
,
,

972
!
$

*
*

4

&5
*

78

$1
!

*
,*
*,1
!

:
! , !
1

!

*
+

+

'

, $

"

''

J

!

*

2

1
4* *
*
* 1

, +
+2

*
*

,

*
4

+

3

!
1 85
!
*
5 !
A

*
* 1
+
8

!
,
,* $

*

)

"

#

'

#
' #

'
"

%

,
,

!

!

,*

4 +,

!*
* !
, 8 5

*
!

1 +4
8+1
E
4
4

5

,

78
*
*

!
!* +

+
!

*
+
2 78
*

* * !
*
*
*

$

.

,
,
78
*
!

"

#

'

'

*

!
!
*
! *$

!
,*
*

8+ 1 + 2
* K *
* ! ,
,*
!
, ,
*
1
+

!
+

!

,

/ !
, '

'

322

,

'

"
"

The Modelica Association

!"
'

,*

85
* 85
,

$
$

,

0

!"
'

'

Modelica 2006, September 4th  5th

Modeling and Simulation of Generator Circuit Breaker Performance

A
+
*
2 , 8 ,*,
,
*
2
*
, + *
*
,
!

*

,
,

*
1*$
*
,
$
8 , +& "

! NJ' " 4AO5
,
+
+
,
*
,
,
2
,
1
, $
* ,
,*
1
!
3
+
1+
,
,
1
'O
1
,
*
!
,*
* +*
,
*,1 !
8
,
!
8
+
<
*
!
!
,
*
!
3
*
*
1 ,
!
! , 8$
,*,
*
+ 1
$
1
,
*
! ,
$
+
4
*
,
, 5
*
$
*
* + ! +
!
F
!
E
, ,
!
+
8+
1 +
:
, F
$
*
!! * + !
,
! $
,
!
1 * $ * !
*1
, *
$
6*
2 *
!
,
!
,
+
+,
!*
*
*!$
!
1 + !
$ *
*
* 1
2
*
*
, $
1
*
+
*
*
!
! ,
$
*
*
+
,
!
, 8 +
* +2
!
*
*
1+ *1
*
!
6*
,
! *1 $
+ *
,
!!

B C <777 ;A ' ;$ PPA> <777
# $:
3
+,,
*

The Modelica Association

!
*

323

Modelica 2006, September 4th  5th

O. Fritz, M. Lakner

The Modelica Association

324

Modelica 2006, September 4th  5th

Parallel Simulation with Transmission Lines in Modelica

Parallel Simulation with Transmission Lines in Modelica
Kaj Nystrom Peter Fritzson
Dept. of Computer and Information Science, Linkoping University
SE-581 83 Linkoping, Sweden
kajny@ida.liu.se petfr@ida.liu.se

Abstract
Parallelization of simulations has traditionally
been an important way of improving the performance of complex simulations. However, this often requires knowledge in parallel programming,
something few modellers have. In this paper we
present a way of parallelizing Modelica simulations
at the component level requiring no prior knowledge in parallel programming. Our method of parallelizing simulations uses the equation based and
unconditionally stable Transmission Line Modeling technique which uses simple time delays to
decouple a model into submodels. The method
is independent of compiler implementation and
thus supports all of the Modelica language supported by a given Modelica compiler. An evaluation of our implementation of this method shows
speedups of up to 2.3 times with a variation in
speedup that is highly dependent on the model
structure and how successful the users parallelization is.
Keywords: TLM; parallel; simulation; transmission line; modeling;

1

Introduction

As knowledge in modeling and simulation becomes more common throughout both industry
and academia, the need to simulate systems with
higher complexity grows stronger. However, computational power eectively sets the upper limit
for how complex our models can be before simplications have to be made in order for the simulation to nish in reasonable time.
Traditionally one of the most common ways of
achieving better performance from a simulation
has been to parallelize it. While this is usually
dicult for a simulation in a low level language,
for example Fortran or C, it is even harder in the

The Modelica Association

Modelica language [4, 5, 6] since the Modelica user
has little control over the inner workings of a simulation, something that is often necessary in order
to parallelize it. In addition, parallelization of a
simulation almost always requires expert knowledge in the area of parallel programming, something that few Modelica users have.
One possibility to simulate in parallel would
be to use parallel solvers. These parallel solvers
are however not suitable for all problems and can
sometimes suer from numerical instability. Another solution is to automatically parallelize the
simulation, either at the Modelica level or at the
generated code level. This typically gives better
performance for some tightly coupled simulations.
However, available tools can not handle for example hybrid models and performance increase could
possibly be better if the user can help the modeling environment with the parallelization in some
way.
The problem with user interaction when parallelizing a model in Modelica is that user interaction has to be done on a level that the user can
access and understand. The typical Modelica user
works on the component level. Thus, this is where
the parallelization should be specied. It should
also be in an application domain neutral fashion,
since that is how the Modelica core language is
intended to be used. Parallelizing a mechanical
application should ideally be no dierent from parallelizing an electrical application.

2

Contributions

In this paper, we present a domain neutral and numerically stable method of parallelizing Modelica
simulations at the component level requiring virtually no knowledge in parallel programming from
the user. We base our method on the Transmission Line Modeling theory.

325

Modelica 2006, September 4th  5th

K. Nystrm, P. Fritzson

3

Transmission Line Modeling

mation between the systems are

Central to the task of parallelizing a model is
the task of partitioning the model into submodels which can then be simulated on separate computers. We have chosen the Transmission Line
Modeling method for parallelizing simulations for
a number of reasons. It is a proven way of decoupling equation systems and is also equation based
itself which makes it t nicely into a Modelica
component. Furthermore, the TLM method has
been proven to be unconditionally stable, an almost absolute requirement as an unstable simulation can be close to useless. This stability holds
for as long as the TLM parameters are withing
physical boundaries.
The theory evolved from the Telegraphers Equations [18] which concerns signal propagation in cables. In the 1970s the TLM method was rst used
for computer based modeling by among others A.
Fettweiss[11] and P.B. Johns[12]. The method has
previously been used to decouple and solve previously unsolvable problems, for co-simulation and
to some extent also for distributed simulation.

3.1

TLM Theory

The idea behind the TLM technique is to use physically motivated delays in signal propagation media to decouple a simulation. This time, called
Ttlm is the time it takes for signals from system 1
to reach system 2 (see gure 1).
c2
v1,i1

v2,i2

c1 (t) = V2 (t  Ttlm ) + ZF I2 (t  Ttlm )

(1)

c2 (t) = V1 (t  Ttlm ) + ZF I1 (t  Ttlm )

(2)

P1 (t) = ZF I1 (t) + c1 (t)

(3)

P2 (t) = ZF I2 (t) + c2 (t)

(4)

The parameters c1 and c2 are called the characteristics of the transmission line and represents
the propagated information in every time step,
delayed as the theory prescribes. P and Q are
the variables in the TLM connection and could be
from any domain, for example current and voltage.
ZF is an implicit impedance for the connection.
The advantage with introducing TLM connection is that the previously implicit parallelization
problem now becomes explicit. Consider the equations 1 and 3. These equations state that P1 at
time t only depends on system 1 and on previous (t  Ttlm ) values from system 2. Thus we have
transformed the problem of solving one implicit
equation system into two smaller implicit equation
systems. The possibility for parallel processing is
obvious.
An additional advantage is that we can use both
dierent solvers and dierent time steps in the two
subsystems, as long as we interpolate propagated
values reasonably well if needed. This means that
we can greatly reduce the stiness for some problems.
The TLM method has been proved to be unconditionally stable [14, 16], provided that the TLM
parameters are computed correctly. The method
does not introduce any additional numerical error
into the model. Instead, it actually transforms a
numerical error to a modeling error[13]. This often
makes it easier for a user to identify and compensate for the error rather than if the error would
be purely numerical due to the fact that the normal Modelica user is probably a modeling expert
rather than a numerical expert.

c1

3.2

Theory Extensions

Figure 1: A TLM connection and the governing
variables. Notation is from the electrical domain,
voltages v1 , v2 and currents i1 , i2 . c1 and c2 are the
characteristics of the transmission line .

The TLM theory prescribes that we compute the
transmission line delay time Ttlm from the propagation speed and the length of the line. However,
in order to maximize the degree of decoupling and
achieve maximum speedup, we can allow for nonTtlm can be computed from the signal propaga- physical Ttlm . This is useful since we do not want
tion speed in the medium and the medium length. any stalling in the simulation of the subsystems
The equations which govern the exchange of infor- due to lack of data. This stalling can happen if
The Modelica Association

326

Modelica 2006, September 4th  5th

Parallel Simulation with Transmission Lines in Modelica

it takes too long for the data to be transmitted
through the computer network from the computer
which simulates system 1 to the computer simulating system 2. If we increase Ttlm to a value
greater than its corresponding computed value, we
allow for higher latency which will avoid stalling
computations. Such an increase in Ttlm is however not without problems. If we increase Ttlm too
much, the system might become unstable and/or
produce wrong results. It is not easy to give an
answer on what a good value for Ttlm is when you
move beyond the strictly physical value as choosing a good Ttlm is a trade o between performance
and robustness and depends on system dynamics.
The TLM theory was originally developed for
electromagnetical signals. Over the years it has
been used for a wide variety of domains (hydraulics, mechanics etc). However, we see no reason to limit ourselves to any specic domains since
the Modelica language gives us such exceptional
possibilities for building generic components.
This method of parallelization should work for
most domains in one dimension which propagate
one ow and one non-ow variable. Extending
the TLM theory to use vectors has been investigated previously[16, 13] in a somewhat dierent
context and we foresee no problem with extending
our method to handle dierent sets of propagated
variables.
Since the transmission line has an undamped
resonance, it is sometimes benecial [15] to low
pass lter ci in a transmission line as
ci (t) = ci (t  )
where  is the lter parameter (0.2 is usually a
good value) and  is the time step. Without this
ltering, the resulting signals might contain unwanted high frequency components, resulting in a
slightly staircase shaped signal as can be seen in
gure 6

4

A Generic Modelica TLM package

The TLM package (depicted in gure 2) contains
the TLM components which the user inserts into
his model when he wants to partition it. More on
how this is done in section 5.1. The package also
contains external functions which take care of the
message passing in the simulation. However, the
user never needs to see or use these functions.

Figure 2: Structure of the TLM package

4.2

The Model Partitioner

This small program transforms the original model
into a new Modelica package which in turn consists
of the separate submodels derived from the original model. The program also divides and propagates the TLM components so that the correct
parts of it are present in all submodels. This partitioning is depicted in gure 3.
Component1

Component2

TLMComponent1

TLM

Component1

TLMRuntime1_1

TLMRuntime1_2

TLM_p

TLM_p

Component2

Figure 3: Splitting one model into two models on
TLM boundaries

Implementation

We have implemented and tested our way of parallelization of Modelica simulations with the TLM
method as outlined in section 2. The framework
consists of 3 parts which we shall now describe in
detail.
The Modelica Association

4.1

The arrows between T LM1 1 and T LM1 2 symbolize the communication of TLM variables between the two submodels, which takes place over
a local network using a simple sockets-based protocol.

327

Modelica 2006, September 4th  5th

K. Nystrm, P. Fritzson

4.3

Algorithm 1: Partition a model into submodels
Input: An arbitrary component based model
Output: A mapping component-submodel
number for all components
1 subModelNr  0
2 foreach component  components do
3
if notvisited(component) then
4
visited(component)  true
5
component(component)  subModelNr
6
push(componentStack,
allNeighbours(component))
7
while not empty(componentStack) do
8
component  pop(componentStack)
9
visited(component)  true
10
component(component) 
subModelNr
11
push(componentStack,
allNeighbours(component))
12
end
13
end
14
subModelNr  subModelNr + 1
15 end

When the partitioning is done, the simulation
is built using any Modelica compiler.
We
have successfully used OpenModelica[1, 2, 3] and
Dymola[17]. As far as the compiler is concerned,
it is now compiling two or more completely dierent models with no association between them, so
the compiler itself needs no modication.
This gives us some additional advantages. During compilation of our submodels we can customize the simulation of our dierent submodels,
for example choosing dierent solvers for dierent
submodels if desired. We can also specify dierent
time steps or fault tolerance levels which if done
right can signicantly reduce the stiness in the
original model.
Finally, the dispatcher takes care of distributing
the jobs on separate machines, such as on a computational grid or a PC cluster, and to manage
reports and request for data from the simulations.

5
The partitioning is done using a repeated
breadth-rst search with visitor recognition as described in algorithm 1. TLM-components and
associated connect equations are ltered out before the algorithm is applied to the model as they
should be considered as separators (interfaces) between submodels.
After applying this algorithm, all components
have an association to a submodel number. We
can now insert all components present in the original model in their respective submodels. Next,
we check into which submodel the rst component in each connect equation belongs and use
this information to add the connect equation in
the components. For example, if component
R1 belongs in submodel 2, the connect equation connect(R1.p,C1.n) should be entered in
submodel 2.
The previously ltered out TLM components
are now substituted for runtime TLM components
as in gure 3. These runtime TLM components
contain all necessary functionality for requesting
and reporting information necessary for the simulation to their counterpart TLM runtime component.
The Modelica Association

A Simulation Dispatcher and Manager

Discussion and Results

In this section we will present and discuss our results with respect to user interaction, performance
and fault tolerance.

5.1

User Interaction

One of our primary goals with the work presented
in this paper is to provide a way of parallelizing
simulation that the average Modelica user can actually use without too much eort. This means
that it should require little change in the way the
user builds his model. At the time of writing,
no scientic study has been done on the usability of this framework so we will settle for briey
describing what has to be done by the user in order
to parallelize his model and let the reader decide
whether this is usable or not.
The only additional task the user has to undertake in order to use our framework is to partition
his model by inserting TLM elements where he
wants to partition his model. This can be done
either graphically or textually and works exactly
like inserting any normal Modelica component in
a model. The hardest part for the user is to determine where to insert these TLM elements.
The best and most general advice we can give at
a model level is to decouple the model at domain

328

Modelica 2006, September 4th  5th

Parallel Simulation with Transmission Lines in Modelica

RampVoltage...

boundaries since these are usually the boundaries
 OS: Rocks Linux [19]
between fast and slow subsystems. Decoupling
 CPU: PIII-800Mhz
such subsystems combined with using dierent
solver settings can signicantly increase perfor Memory: 512MB
mance. Another advice is to partition the model
in equally complex parts. This is quite dicult to
 Network: 100Mbit Ethernet
do at a component level since it may be hard to
see at a component diagram level what the com- The cluster is quite old fashioned but still demonstrates the general eectiveness of our framework.
plexity is of a certain part of a model.
Is is likely that a more modern cluster with faster
nodes and faster network will increase perfor5.2 Performance
mance as we can then decrease the granularity of
Evaluation of a parallel programming framework our model partitioning.
is dicult at best. Many factors are involved and
Our gures have been derived by comparing tothe framework designer tends to choose the prob- tal simulation time on one node to total simulalems and environments that favour his framework tion time using two to six nodes, depending on
the most. When evaluating our framework for the model structure. We wish to stress that we
Modelica models, we have found that out largest do not rule out the possibility that a modeling exproblem by far is to choose our models. Few suf- pert could achieve better performance as he or she
ciently large models are available to the general might be better suited to parallelize the models.
public, especially models which can be understood
and parallelized by a non-expert in the modeling 5.3 Fault Tolerance
domain.
The best thing would obviously be to have a Just as the theory predicts, the error in the modset of more or less standardized and independent els we have tested is well within normal values
benchmarking models. Lacking this, we have cho- for numerical simulations as long as the TLM pasen to build our own models for benchmarking us- rameters are within physical limits. When we go
ing only Modelica Standard Library components outside physical values however, we will inevitably
and examples. Given this bias problem bias, it is introduce an error. How large or signicant the
uncertain if we should really present any gures error is depends on the model. The modeler is
of speedup at all before our framework has been obviously best suited to be the judge of if this is
tested with independently built models. Even so, within his fault tolerance limits or not. As we
we choose to present our preliminary ndings re- are just working with a simple delay in the time
domain it is generally easy for a domain expert
garding performance here for what they are.
The framework can handle Modelica models or to see beforehand what eect an extra time delay
arbitrary size but as usually is the case with par- will have on his model and if this is acceptable or
allelization, little or no speedup or even a perfor- not.
For comparison on what a way too large Ttlm ,
mance decrease can be expected when parallelizing
small models as the communication overhead then we present two simulation runs of a standard DCbecomes a signicant factor in simulation time. Motor example with a ramp as a voltage source as
Then again, there is probably no need to paral- depicted in gure 4.
lelize small models as these will most likely run
Inductor1
Resistor1
just ne on a singe CPU.
L=0.5
R=10
Using these models we have registered speedups
Inertia1
ranging from 0.5 (negative speedup) to 2.3 dek=1
pending on the structure of the problem and how
J=1
we parallelize it. Sti problems which we can easily decouple will give us the greatest speedup while
some homogeneous problems might not be suitable
Ground1
for parallelization at all.
Ground2
All tests were done on a standard PC-cluster
Figure 4: TLM partitioned DC-motor model
with the following nodes
The Modelica Association

329

tlmElec...

EMF1

Modelica 2006, September 4th  5th

K. Nystrm, P. Fritzson






greatly and depends on model structure and if
the model is partitioned successfully. Performance
also depends on accuracy requirements on the
model and is easily congurable by the user. Additional advantages with the method are that it
reduces model stiness if properly used and that
it is also possible to use dierent solvers for dierent submodels if desired.






	



















7



Future work

Figure 5: Plot of voltage over the resistor compo- Obviously, a usability study is one of the most
nent, Ttlm =0.01, interval length=0.01s
important items for future work as that has been
one of the major goals of our work. We would at
the same time like to continue to develop heuristics
for better partitioning of models. This process
might even be automated using such heuristics.
There is also plenty of more work on automatic
estimation of non-physical delays that do not lead
to errors beyond a given tolerance level, perhaps
using static analysis on the model.
A better performance evaluation is also prioritized but largely dependent on the availability of
large models. Such models have proven to be difcult to nd.
Figure 6: Plot of voltage over the resistor compoOn the implementation side, a better communinent, Ttlm =0.1, interval length=0.01s
cation implementation pattern (e.g. peer to peer)
should be established in order to reduce communiFrom gures 5 and 6, we can clearly see that cation cost. Also, adaptable value reuse depending
Ttlm = 0.1 was probably a to high value for most on model dynamics should not be hard to impleapplications, although it still does show the gen- ment and should lead to a signicant decrease in
eral shape of the result. Still, since it is a delay communication overhead.
More static and dynamic analysis of the perforin the electrical application domain in a circuit
where the propagation speed is usually very large mance bottlenecks for individual simulations could
and in a model with no capacitor elements, de- be a way of aiding the user in both model partilaying the signal by one tenth of a second seams tioning and choosing TLM parameters.
rather a lot to any electrical engineer. As always,
the modeler must use his judgement when setting 8 Acknowledgments
the parameter values, in this case Ttlm .
This work was supported by MathCore
Engineering[9] and Vinnova[8] in the GRID6 Conclusions
Modelica project[10].
!"#"$%&'



!"#"$%&'































We have been able to parallelize Modelica simulations and to abstract user interaction at a component level which we believe will be a usability improvement compared to other parallelization techniques. Communication and scheduling are completely hidden from the user. However, no scientic evaluation has yet been done on the usability
aspects of our work.
Speedup is up to 2.3 times so far but varies
The Modelica Association

References

330

[1] Peter Fritzson, et al. The Open Source
Modelica Project. In Proceedings of The
2nd International Modelica Conference, 1819 March, 2002. Munich, Germany See also:
http://www.ida.liu.se/ projects/OpenModelica.
Modelica 2006, September 4th  5th

Parallel Simulation with Transmission Lines in Modelica

[2] Peter Fritzson, Peter Aronsson, Hakan LundLine Joints, ASME journal of Dynamic Systems, Measurements and Control, 1995
vall, Kaj Nystrom, Adrian Pop, Levon Saldamli, and David Broman. The OpenModelica Modeling, Simulation, and Software De- [14] S.H. Pulko, A. Mallik, R. Allen, and P.B.
Johns. Automatic Timestepping in TLM
velopment Environment. In Simulation News
Routines for the Modelling of Thermal DifEurope, Issue 44/45, December 2005.
fusion Processes. Int. Journal of Numerical
Modelling: Electronic Networks, Devices and
[3] The
OpenModelica
Users
Fields, 3:127 136, 1990.
Guide,
version
1.3.2,
Apr
2006.
http://www.ida.liu.se/projects/OpenModelica
[15] P.Krus, A. Jansson, J-O. Palmberg and K.
Weddfelt. Distributed simulation of hydrome[4] The Modelica Association. The Modelchanical systems. In Third Bath International
ica Language Specication Version 2.2,
Fluid Power Workshop, Bath, UK, 1990.
March 2005. http://www.modelica.org. accessed 2005-05-02
[16] Iakov Nakhimovski, Contributions to the
Modeling and Simulation of Mechanical Sys[5] Peter Fritzson. Principles of Object-Oriented
tems with Detailed Contact Analysis. Ph.D
Modeling and Simulation with Modelica 2.1,
Thesis, Linkoping University, Dept. of Com940 pp., ISBN 0-471-471631, Wiley-IEEE
puter and Information Science, April 2006.
Press, 2004.
[6] Michael Tiller. Introduction to Physical Mod- [17] The Dymola modeling tool, http://www.
dynasim.com accessed 2005-05-02
eling with Modelica. 366 pages. ISBN 0-79237367-7, Kluwer Academic Publishers, 2001.
[18] The telegraphers equations, http://en.
wikipedia.org/wiki/Transmission_
[7] Peter Aronsson and Peter Fritzson, Task
line#Telegrapher.27s_equations,
Merging and Replication using Graph
accessed 2005-05-02
Rewriting, Tenth International Workshop
on Compilers for Parallel Computers, [19] Rocks
Linux,
Amsterdam Netherlands, Jan 8-10 2003
rocksclusters.org,
07-20
[8] Vinnova, http://www.vinnova.se, accessed
2005-05-02

http://www.
accessed 2005-

[9] Mathcore
Engineering,
http://www.mathcore.com, accessed 200505-02
[10] The
GridModelica
Project,
http:
//www.ida.liu.se/labs/pelab/
modelica/GridModelica.html,
accessed 2005-05-02
[11] A. Fettweiss, Digital Filter Structures Related to Classical Filter Networks. Arch. Elek.
Ubertragungst., 23(2):79-89, 1971
[12] P.B. Johns and M.A. Brien, Use of the Transmission Line Modeling (t.l.m.) Method to
Solve Non-Linear Lumped Networks, The Radio Electron and Engineer, 50:59-70, Jan/Feb
1980
[13] Petter Krus, Modelling of Mechanical Systems Using Rigid Bodies and Transmission
The Modelica Association

331

Modelica 2006, September 4th  5th

K. Nystrm, P. Fritzson

The Modelica Association

332

Modelica 2006, September 4th  5th

