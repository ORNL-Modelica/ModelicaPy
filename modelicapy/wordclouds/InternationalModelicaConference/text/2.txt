2002
Proceedings of the
2nd International Modelica Conference
March 18-19, 2002
Deutsches Zentrum für Luft- und Raumfahrt e.V.
Oberpfaffenhofen, Germany
Martin Otter (editor)

organized by
The Modelica Association and
Institut für Robotik und Mechatronik, Deutsches Zentrum für Luft- und Raumfahrt e.V.
All papers of this conference can be downloaded from
http://www.Modelica.org/Conference2002/papers.shtml

Proceedings of Modelica’2002
Deutsches Zentrum für Luft- und Raumfahrt e.V.,
Oberpfaffenhofen, Germany, March 2002
Editor:
Martin Otter
Published by:
The Modelica Association (http://www.Modelica.org) and
Institut für Robotik und Mechatronik, Deutsches Zentrum für Luft- und Raumfahrt e.V. (http://www.robotic.dlr.de)
Printed by:
Digital- & Offsetdruck Gerdfried Wolfertstetter, Carl-Benz-Str. 14, 82205 Gilching
Acknowledgement:
The organization of this conference was in parts supported by the European Commission under contract
IST-199-11979 with DLR for the project entitled ”Real-time Simulation for Design of Multi-physics Systems”.

Preface

Preface
The Modelica modeling language has been designed to allow convenient and efficient modeling and simulation of
complex, multi-domain physical systems described by differential, algebraic and discrete equations, aiming at full
system simulation. Since January 2002, version 2.0 of the Modelica language definition is available together with
many free Modelica libraries, as well as commercial Modelica simulation environments. Convenient interfaces
exist for Matlab and Simulink (with Dymola) and to Mathematica (with MathModelica). The language, libraries
and tools are used by a growing number of people in industry and academia for advanced applications, such as
detailed fuel cell simulations, power systems, full vehicle dynamics models, hardware-in-the-loop simulations,
embedded control systems with nonlinear Modelica models.
In October 2000, the first Modelica workshop took place in Lund, Sweden. Due to the great success, with more
than 80 participants, this event is repeated in March 2002, to bring together people interested in Modelica, Modelica language designers, Modelica tool vendors and Modelica library developers. This gives the conference
participants the opportunity to be informed about the latest developments, to influence the future development of
Modelica and its libraries and to get in touch with people solving similar modeling problems.
This volume contains papers that are presented at the Second International Modelica Conference at DLR in Oberpfaffenhofen, Germany, March 18-19, 2002. A number of high quality papers were received. The program committee had a difficult task of planning the conference since not all submissions could be accommodated for the
limited time of two days. Thirty-five papers were selected for presentations, and four papers were selected for
poster presentations.
More information about the Modelica language, the Modelica association, this and future events can be found at
the web page http://www.modelica.org. Especially, all papers from these proceedings are stored at this site after
the conference.
The Modelica’2002 conference was arranged by the Modelica Association in cooperation with the Institut für
Robotik und Mechatronik, Deutsches Zentrum für Luft- und Raumfahrt e.V., Oberpfaffenhofen, Germany.

Oberpfaffenhofen, March 5, 2002.

Martin Otter

The Modelica Association

1

Modelica 2002, March 18-19, 2002

Preface

Program Committee
• Martin Otter, Institut für Robotik und Mechatronik, Deutsches Zentrum für Luft- und Raumfahrt,
Oberpfaffenhofen, Germany (chairman of the program committee).
• Hilding Elmqvist, Dynasim AB, Lund, Sweden.
• Peter Fritzson, PELAB, Programming Environment Laboratory, Department of Computer and
Information Science, Linköping University, Linköping, Sweden.

Local Organizers
Martin Otter, Astrid Jaschinski, Christian Schweiger, Erika Woeller, Johann Bals,
Institut für Robotik und Mechatronik, Deutsches Zentrum für Luft- und Raumfahrt,
Oberpfaffenhofen, Germany.

Modelica 2002, March 18-19, 2002

2

The Modelica Association

Contents

Contents
Tutorials . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5
M. Otter, H. Olsson: New Features in Modelica 2.0 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7
Mattsson S.E., Elmqvist H., Otter M., and Olsson H.:
Initialization of Hybrid Differential-Algebraic Equations in Modelica 2.0 . . . . . . . . . . . . . . . . . . . . . . . . . . . 9

Applications and Tools . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17
Tiller M., Tobler W.E., Ming Kuang: Evaluating Engine Contributions to HEV Driveline Vibrations . . . . . . . 19
Clauß C., Beater P.: Multidomain Systems: Electronic, Hydraulic, and Mechanical Subsystems
of an Universal Testing Machine modeled with Modelica . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25
Tummescheit H., Eborn J.: Chemical Reaction Modeling with ThermoFluid/MF and MultiFlash . . . . . . . . . . . 31
Fritzson P., Gunnarsson J., Jirstrand M.: MathModelica - An Extensible Modeling and Simulation
Environment with Integrated Graphics and Literate Programming . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 41
Brück D., Elmqvist H., Mattsson S.E., Olsson H., : Dymola for Multi-Engineering Modeling and Simulation 55

Automotive Powertrains and Hardware-in-the-Loop Simulation . . . . . . . . . . . . . . . . . . . . . . . . . . . . 57
Elmqvist H., Mattsson S.E., Olsson H.: New Methods for Hardware-in-the-Loop Simulation of Stiff Models. 59
Soejima S., Matsuba T.: Application of mixed mode integration and new implicit inline integration at Toyota 65
Schlegel C., Bross M., Beater P.: HIL-Simulation of the Hydraulics and Mechanics of an Automatic Gearbox 67
Puchalsky C., Megli T., Tiller M., Trask N. and Wang Y., Curtis E.:
Modelica Applications for Camless Engine Valvetrain Development . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77

Electrical Systems . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 87
Hongesombut K., Mitani Y., Tsuji K.: An Incorporated Use of Genetic Algorithm and a
Modelica Library for Simultaneous Tuning of Power System Stabilizers . . . . . . . . . . . . . . . . . . . . . . . . . . . . 89
Urquı́a A., Dormido S.:
DC, AC Small-Signal and Transient Analysis of Level 1 N-Channel MOSFET with Modelica . . . . . . . . . 99
Ferretti G., Magnani G., Rocco P., Bonometti L., Maraglino M.:
Simulating permanent magnet brushless motors in DYMOLA . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 109
Kalaschnikow S.N.: PQLib - A Modelica Library for Power Quality analysis in Networks . . . . . . . . . . . . . . . 117

Automotive Powertrains . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 123
Treffinger P., Goedecke M.: Development of Fuel Cell Powered Drive Trains With Modelica . . . . . . . . . . . . . 125
Newman C.E., Batteh J.J., Tiller M.: Spark-Ignited-Engine Cycle Simulation in Modelica . . . . . . . . . . . . . . . 133

Thermodynamic Systems I . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 143
Pfafferott T., Schmitz G.:
Modeling and Simulation of Refrigeration Systems with the Natural Refrigerant Carbon Dioxid . . . . . 145
Felgner F., Agustina S., Cladera Bohigas R., Merz R., Litz L.:
Simulation of Thermal Building Behaviour in Modelica . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 147

The Modelica Association

3

Modelica 2002, March 18-19, 2002

Contents

Poster session . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 155
Bunus P., Fritzson P.: Methods for Structural Analysis and Debugging of Modelica Models . . . . . . . . . . . . . . 157
Torrey D.A., Selamogullari U.S.: A Behavioral Model for DC-DC Converter using Modelica . . . . . . . . . . . . 167
Torrey D.A., Selamogullari U.S.:
Modelica Implementation of Field-oriented Controlled 3-phase Induction Machine Drive . . . . . . . . . . . 173
Wischhusen S., Schmitz G.: Numerical Simulation of Complex Cooling and Heating Systems . . . . . . . . . . . . 183

Discrete Event Modeling . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 193
Freiseisen W., Keber R., Medetz W., Pau P., Stelzmueller D.:
Using Modelica for Testing Embedded Systems . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 195
Remelhe M.A.P.: Combining Discrete Event Models and Modelica General Thoughts and a Special Modeling Environment . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 203
Färnqvist D., Strandemar K., Johansson K.H., Hespanha J.P.:
Hybrid Modeling of Communication Networks Using Modelica . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 209

Thermodynamic Systems II . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 215
Steinmann W.D., Zunft S.:
TechThermo - A Library for Modelica Applications in Technical Thermodynamics . . . . . . . . . . . . . . . . . 217
Fabricius S.M.O., Badreddin E.: Modelica Library for Hybrid Simulation of Mass Flow in Process Plants . 225
Jensen J.M., Tummescheit H.: Moving Boundary Models for Dynamic Simulations of Two-Phase Flows . . 235

Mechatronic Applications . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 245
Hellgren J.: Modelling of Hybrid Electric Vehicles in Modelica for Virtual Prototyping . . . . . . . . . . . . . . . . . . 247
Pelchen C., Schweiger C., Otter M.:
Modeling and Simulating the Efficiency of Gearboxes and of Planetary Gearboxes . . . . . . . . . . . . . . . . . 257
Andreasson J., Jarlmark J.: Modularised Tyre Modelling in Modelica . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 267
Moormann D., Looye G.: The Modelica Flight Dynamics Library . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 275
Aberger M., Otter M.: Modeling Friction in Modelica with the Lund-Grenoble Friction Model . . . . . . . . . . . 285

Special Methods and Tools . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 295
Fritzson P., Aronsson P., Bunus P., Engelson V., Saldamli L., Johansson H., Karström A.:
The Open Source Modelica Project . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 297
Saldamli L., Fritzson P., Bachmann B.: Extending Modelica for Partial Differential Equations . . . . . . . . . . . 307
Franke R.: Formulation of dynamic optimization problems using Modelica . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 315
Sjöberg J., Fyhr F., Grönstedt T.: Estimating parameters in physical models using MathModelica . . . . . . . . . 325
Aronsson P., Fritzson P.: Multiprocessor Scheduling of Simulation Code From Modelica Models . . . . . . . . . 331

Modelica 2002, March 18-19, 2002

4

The Modelica Association

Session 1

Tutorials

The Modelica Association

5

Modelica 2002, March 18−19, 2002

Modelica 2002, March 18−19, 2002

6

The Modelica Association

M. Otter, H. Olsson

New Features in Modelica 2.0

New Features in Modelica 2.0
1

Martin Otter1 and Hans Olsson2

DLR, Oberpfaffenhofen, Germany, Martin.Otter@dlr.de
Dynasim AB, Lund, Sweden, Hans.Olsson@dynasim.se

2

Abstract

P. Grozman, Equa, Stockholm, Sweden
J. Gunnarsson, MathCore, Linköping
M. Jirstrand, MathCore, Linköping
S. E. Mattsson, Dynasim, Lund, Sweden
H. Olsson, Dynasim, Lund, Sweden
M. Otter, DLR, Oberpfaffenhofen, Germany
L. Saldamli, Linköping University, Sweden
M. Tiller, Ford Motor Company, Dearborn, MI, U.S.A.
H. Tummescheit, Lund Institute of Technology, Sweden
H.-J. Wiesmann, ABB Corp. Res., Baden, Switzerland

The second major release of Modelica was finished
and formally approved at the last Modelica design
meeting, January 2002, Lund, Sweden. In this
paper, the new features of Modelica 2.0 are
described.

1.

Introduction

The freely available, object-oriented modeling
language Modelica is developed continuously
since 1996. Modelica is designed to allow
effective, component-oriented modeling of
complex engineering systems described by
differential, algebraic and discrete equations, e.g.,
systems containing mechanical, electrical, electronic, hydraulic, thermal, control, electric power
or process-oriented subcomponents. A large number of free and commercial libraries of fundamental models are available as well as commercial
Modelica simulation environments. More information is provided at http://www.Modelica.org/.

2.

In 1997, the first major version of Modelica was
released, followed by four minor revisions released
once a year. The second major release of Modelica
was completed and formally approved at the last
Modelica design meeting, January 2002, Lund,
Sweden. The most important design goal was to
enhance the development and use of application
libraries, incorporating the experience and feedback
of library developers, while keeping backward
compatibility. A number of language enhancements
have been added, significantly facilitating library
development and use. In this paper, the new features
of Modelica 2.0 are described. The following
members of the Modelica Association have
contributed to the development of Modelica 2:

One part of the redesign of Modelica 2 was based
on the experience with the Modelica.Blocks library
in Modelica 1. The redesign supports generic
formulation of blocks applicable to both scalar and
vector connectors, connection of (automatically)
vectorized blocks, and simpler input/output
connectors. This allows significant simplifications
of the input/output block library of Modelica, e.g.,
since only scalar versions of blocks that naturally
vectorize have to be provided. Furthermore, new
library components can be incorporated more
easily. In addition, it is possible to use functions
and functional blocks allowing, e.g., the sinfunction to be inserted in a block diagram.
Since the first release, it was possible in Modelica
to define homogenous component arrays, i.e.,
arrays where the array elements are instances of
any desired class, for example:
Resistor R[10];

is an array of 10 resistors including both the
resistor parameters and the resistor equations. In
Modelica 2, features have been added for
component arrays to widen their applicability.

Component Array Modifications

P. Aronsson, Linköping University, Sweden.
B. Bachmann , University of Bielefeld, Germany.
P. Beater, University of Paderborn, Germany
D. Brück, Dynasim, Lund, Sweden
P. Bunus, Linköping University, Sweden
H. Elmqvist, Dynasim, Lund, Sweden
V. Engelson, Linköping University, Sweden
P. Fritzson, Linköping University, Sweden
R. Franke, ABB Corporate Research, Ladenburg

The Modelica Association

Component Arrays

Assume a component is defined as
model FixedFrame
parameter Real
parameter Real
parameter Real
parameter Real
...

7−1

r[3] = {0,0,0};
alpha = 0;
beta = 0;
gamma = 0;

Modelica 2002, March 18−19, 2002

New Features in Modelica 2.0

M. Otter, H. Olsson

parameter Real Re=r*L/n;
Resistor R[n+1](R =
vector([Re/2;
fill(Re,n-1);
Re/2]));

end FixedFrame;

which describes a coordinate system with respect
to another one as fixed translation with vector r
and fixed rotation around angles α, β, γ along x-,
y-, and z-axis respectively. A part may have
several frames and also other properties and can be
defined as

All elements of the resistance vector R are the
same, with the exception of the first and last one
which each take half of the value of an element
Resistance Re.

model Part
parameter Integer n=0;
FixedFrame frames[n];
...
end Part;

Block Vectorization

Connectors of signals of the Modelica.Blocks
library are in Modelica 1.4 defined as

There are different possibilities to define a part
which has several frames:

connector InPort
parameter Integer n=1;
input Real signal[n];
end InPort;

Part p(n=2, frames[1](r={1,0,0},
alpha = 1),
frames[2].alpha = -1);

That is, the connector consists of a vector of Reals
which are used as input signals. Such a connector
is utilized in an input/output block as:

Here, every element of the frame vector is
explicitly modified. Another alternative is

block FirstOrder
parameter Real T=1 "time const.";
InPort inPort;
OutPort outPort;
...
end FirstOrder;

Part p(n=4,frames(beta={1,2,3,4},
r = fill(1,4,3)));

where the same parameter of all frames are
modified. For example, frames[:].beta is treated as
a vector of 4 elements and therefore a vector of 4
elements has to be provided as modification. On
the other hand, frames[:].r is treated as a (4,3)
matrix.

Accessing the input signal of such a block is
inconvenient:
FirstOrder b;
...
b.inPort.signal[1] // input signal

Part p(n=10, frames(each r={1,0,0});

defines 10 frames, using the same vector r for all
frames. In a similar way also nested component
arrays are handled:

In Modelica 2 it is possible to define a connector as
an extension from the base types, i.e., the
following definition is possible:

Part p[10](each n=3,
each frames(each beta=1);

connector InPortNew = input Real;

Also annotations for the graphical layout of icon
and diagram layer of such a connector can be
defined. Therefore, this connector may be dragged
from a library window in a model window to
construct a new model graphically. In a model, this
connector is used as:

Here, 10 parts are declared, where every part has 3
identical frames with beta=1. In this application it
is not very useful to define so many identical
frames. However, in lumped models deduced from
the discretisation of partial differential equations,
often many elements of a component array have
the same value. Example:

block FirstOrderNew
parameter Real T=1 "time const.";
InPortNew u;
OutPortNew y;
...
end FirstOrderNew;

parameter Integer n;
parameter Real L=1 "length";
parameter Real r=1 "resistance
per meter";
protected

Modelica 2002, March 18−19, 2002

7−2

The Modelica Association

M. Otter, H. Olsson

New Features in Modelica 2.0

Real
x[nx]
equation
der(x) = A*x + B*u;
y = C*x + D*u;
end StateSpace;

Accessing the input signal of this block is now
much simpler:
FirstOrderNew b;
...
b.u // input signal

Connecting the 3 sin-sources as input to an
instance of StateSpace which has three inputs can
be performed in the following way:

In the 1.4 version of the Modelica.Blocks library,
most blocks are manually vectorized, e.g., to
define an instance which has 10 input and 10
output signals and 10 first order blocks for every
signal path. This complicates the class definitions
in Modelica.Blocks considerably, and in all cases,
except Sources.KinemanticPTP, a vectorized block
behaves as a vector of scalar blocks. With the
extensions described above, this is much simpler.
For example, a scalar Sine block may be defined
as:

Sine s[3](each frequency=50,
phase = {0,2,-2});
StateSpace b(B=[0,0,1;...],...);
equation
connect(s.y, b.u);

This is a connection of s[:].y with b.u[:]. This is
allowed due to a new connection rule, provided the
dimension sizes match, which is the case here.

3.

block Sine
import Modelica.Math.*;
import.Modelica.Constants.*;
parameter Real Amplitude =1;
parameter Real frequency =1;
parameter Real phase=0;
InPortNew u;
OutPortNew y;
equation
y = Amplitude*
sin(2*pi*frequency*time+phase);
end FirstOrderNew;

Modelica 2 introduces enumerations to construct
new base types which consist of countable sets of
elements. Example:
type TextStyle = enumeration(
Bold, Italic, UnderLine);

This declaration defines a new type TextStyle. An
instance of this type may have only the values
TextStyle.Bold,
TextStyle.Italic
or
TextStyle.UnderLine. Such a type can be used in
the following way:

This looks like a text-book example of a sine
source. Using 3 Sine sources is now performed by
component arrays:

TextStyle t1 = TextStyle.Bold;
TextStyle t2 = t1;

Sine s[3](each frequency=50,
phase = {0,2,-2});

Currently, the only operations defined for
enumeration types are the equal ("=") and the
assignment (":=") operations. Furthermore, the
relational operators <, <=, >, >=, ==, <> can be
applied. The result depends on the order of the
element in the enumeration declaration. For
example TextStyle.Bold < TextStyle.Italic. It is
planned to provide more operations in future
Modelica releases, e.g., to access array indices by
enumerations or inquire the next or previous
enumeration element.

Note, that it is easy to define that all sine-sources
shall have the same frequency, but different phases
roughly corresponding to 3 electrical phases. A
state space model may be defined as:
block StateSpace
final parameter Integer nx =
size(A,1);
final parameter Integer nu =
size(B,2);
final parameter Integer ny =
size(C,1);
parameter Real A[: ,nx];
parameter Real B[nx, :];
parameter Real C[: ,nx];
parameter Real D[ny,nu];
InPortNew u[nu];
OutPortNew y[ny];

The Modelica Association

Enumeration Types

Enumerations are useful for defining properties
and options in an understandable and safe way.
Since enumerations are internally mapped to an
Integer type, processing them is safer and much
more efficient than if properties or options would
be defined as Strings. Compared to using Integer
constants it is clearer, requires less typing, and is

7−3

Modelica 2002, March 18−19, 2002

New Features in Modelica 2.0

M. Otter, H. Olsson

safer since each enumeration is a separate type. In
Modelica 2, several enumeration types are
predefined, such as StateSelect (see next section)
and enumerations in graphical annotations.

4.

preferably used as state over those having the
default value. Finally, for "avoid", the variable is
only selected as a state, if it appears differentiated
and if no other selection of variables with
"default", "prefer", or "always" value is possible. A
state preference definition may be given in the
following way:

State Selection Control

The continuous part of a Modelica model is
mapped to a DAE, a differential-algebraic equation
system, of the form

Real w(stateSelect =
StateSelect.prefer);

0 = f(dx/dt, x, y, t)

Examples for appropriate state selection (from [2]):

where x(t) are variables appearing differentiated
and y(t) are pure algebraic variables. Conceptually,
this DAE is transformed in to state space form

Accuracy:

In rotating machinery systems used for power
transmission (but not for positioning drive
systems) and in power systems, angular positions
of shafts are increasing with time, but relative
positions between shafts are rather constant, at
least in normal operation. Say that two rotating
inertias are connected by a spring such that the
relative distance between them are 0.1 rad and that
their angular speed is 1000 rad/s. If the positions
are calculated with a relative accuracy of 0.001,
after 10 seconds there is hardly any accuracy in
calculating the distance by taking the difference.
The difference behaves irregularly and gives an
irregular torque if simulations take too long. It is
very difficult for a tool to find this out without
actually doing simulation runs. Therefore, it is
useful to define StateSelect.prefer for all relative
variables in force elements (e.g., spring, damper,
clutch). This will be performed in the next version
of the Modelica.Mechanics.Rotational library.

dxs/dt = f1(xs, t)
xn = f2(xs,t)
y = f3(xs,t)
where xs(t) are a subset of x which are independent
from each other and xn(t) are the other variables of
x. Variables xs(t) are called states of the model. A
numerical
integration
method
essentially
discretizes xs over time, whereas all other variables
are calculated as the solution of an algebraic
system of equations at the actual time instant. The
selection of xs is not unique. Different choices may
lead to drastically different numerical behaviour. A
dynamic automatic selection of xs by a tool is
always possible, [4]. However, experience shows
that user insight may lead to better choices or
avoid the need for dynamic selection. On the other
hand automatic selection is an efficient and reliable
method, and users should not be forced to
manually perform a complete manual state
selection merely because dynamic state selection
might be inefficient for some models. For this
reason, in Modelica 2 it is possible to guide the
state selection via the new attribute stateSelect of
Real variables. The attribute has values from the
enumeration StateSelect defined as:

Avoiding function inversion:

In thermodynamic problems property functions are
utilized. These functions usually assume two
variables to be inputs (for example pressure and
enthalpy) and calculate other properties (such as
temperature, density). Thus, if such variables are
selected as state variables it is "simply" calling
property functions to calculate other needed
variables. Otherwise, it is necessary to solve nonlinear equation systems to calculate the input
variables of the property functions. Therefore, a
good choice is to use StateSelect.prefer on all
input variables of property functions, or use
StateSelect.avoid on output variables from
property functions.

type StateSelect = enumeration(
never, avoid, default,
prefer, always);

For "never", a variable will never be selected as a
state, whereas for "always" the variable shall
always be used as a state. For "default", which is
the default for all Real variables, the states are
automatically selected among the variables which
appear differentiated. If "prefer" is used, the
variable need not to be differentiated and is

Modelica 2002, March 18−19, 2002

Less nonlinear equations:

For three-phase power systems several choices of
states are possible, especially selecting states from
the stator side or from the rotor side. The first

7−4

The Modelica Association

M. Otter, H. Olsson

New Features in Modelica 2.0

choice leads to a non-linear DAE, whereas the
second one leads (under certain assumptions) to a
linear DAE. In a periodic steady state, the first
choice results in a periodic solution of the states
whereas in the second choice the states are
identical to zero. As a result, selecting states from
the rotor side (= Park transformation) leads to a
more efficient and more reliable numerical solution
and therefore these variables should have the
attribute value StateSelect.prefer.

Avoid dynamic state selection:

models, i.e., of hybrid differential algebraic
equations. The new language constructs permit
flexible specification of initial conditions as well
as the correct solution of difficult, non-standard
initialization problems occurring in industrial
applications, for example:
• Stationary initialization around a constant
reference velocity of an aircraft.
• Stationary initialization around periodic
solutions, needed in power systems or in
detailed engine models.
• Stationary initialization of continuous systems
controlled by sampled data systems (the states
of the discrete controllers are computed in such
a way that the overall system is in a steady
state when simulation starts).
• Initialization of discontinuous or variable
structure systems, e.g., systems containing
friction or backlash.
Since this is a large topic by itself, only a short
overview is given here. Details are presented in the
companion paper [3].

Sensors:

Before any operation, in particular simulation, is
carried out with a Modelica model, initialization
takes place to assign consistent values for all
variables present in the model, including
derivatives, der(…), and pre-variables, pre(…).
The initialization uses all equations and algorithms
that are utilized during the simulation.

For 3-dimensional mechanical systems having
closed kinematic loops, an automatic static
selection of states is not possible. Instead, the
states have to be dynamically selected and changed
during simulation in order to keep the (timevarying) Jacobian of the system non-singular. In
many cases a suitable set of state variables is
known, e.g., the relative position and velocity
variables of the joints driving the mechanism. If
these
variables
have
attribute
value
StateSelect.always the simulation is more efficient
which is especially important for real-time
simulations.
A sensor may measure the speed "v" of a
translational connector. Since the speed is not part
of the connector, but the position "s" is, an
equation of the form "der(s) = v" is present in the
sensor, i.e., "s" appears differentiated and can be
potentially used as a state. However, in most case
the selection of "s" as a state is not appropriate,
since introduction of a variable for just plotting
should not influence the state selection. Therefore,
an attribute value of StateSelect.avoid should be
preferably used for differentiated variables in
sensor objects (here: "s").

In the most simplest case, when only continuous
equations are present without algebraic
dependencies of states (= no higher DAE index), a
Modelica model is mapped to the following
differential-algebraic equation system (DAE):
0 = f(dx/dt, x, y, t)
where x(t) are variables appearing differentiated,
y(t) are algebraic variables and dim(f) = dim(x) +
dim(y). These equations have to be fulfilled at all
time instants, especially also at the initial time t0.
During simulation, an integrator calls the model
providing basically x as input. Therefore, the
model equations are solved under the assumption
that x is known. During initialization, x is,
however, unknown. As a result, there are only
dim(x) + dim(y) equations for 2*dim(x) + dim(y)
unknowns during initialization. In the most general
case this means that the modeler has to provide
additionally dim(x) equations g(..) at the initial
time resulting in the following system of equations

The general advice is that selection of states ought
to be done automatically. This is also possible and
unproblematic in most models. Only if there are
good reasons, as pointed out above at hand of
several examples, the modeler may give hints for
state selection. Note, that in a library the values
StateSelect.never or StateSelect.always should
not be used, because a library has usually not
enough information to rigidly force a state
selection.

5.

Improved Initialization

Modelica 2.0 introduces a mathematically rigid
specification of the initialization of Modelica

The Modelica Association

7−5

Modelica 2002, March 18−19, 2002

New Features in Modelica 2.0

M. Otter, H. Olsson

zero, one or more named input arguments.
Arguments not explicitly present get the default
value supplied in the function declaration. This
feature is useful to make the same function fit for
beginners and expert users. For example, a
function RealToString may be defined as follows
to convert a Real number into a String
representation:

 f (x& (t0 ), x(t0 ), y (t0 ), t 0 ) 
0=

g(x& (t0 ), x(t0 ), y (t0 ), t 0 )

which has to be solved for the unknowns dx/dt(t0),
x(t0), y(t0). In general this means that the standard
algorithms, such as BLT transformation, should be
applied to this system, in order to compute the
solution reliably and efficiently. From a user's
point of view this procedure means that dim(x)
equations have to be additionally provided for the
initial time, e.g., x(t0) = x0 or dx/dt(t0) = 0. In
Modelica 2 these initial equations can either be
defined in the new initial equation / initial
algorithm sections or as start value with attribute
fixed = true. For example two initial equations
x1(t0) = 1 and dx2/dt(t0) = 0 may be defined as:

function RealToString
input Real number;
input Real precision = 6;
input Real minLength = 0;
output String string;
algorithm
...
end RealToString;

Argument "number" is the number to be converted,
"precision" is the number of significant digits in
the String representation and "minLength" is the
minimum length of the String in which the number
is stored right justified. Since positional, named
and default arguments are allowed, the following
function applications are equivalent:

Real x1(start=1, fixed=true);
Real x2 //default: fixed=false
initial equation
der(x2) = 0;
equation
der(x1) = -x1 + x2;
der(x2) = -x2;

RealToString(2.0);
RealToString(2.0, 6, 0);
RealToString(2.0, 6);
RealToString(2.0, precision=6);
RealToString(2.0, minLength=0);

If there are constraints between states, the number
of initial equations to be provided is less than
dim(x). It may be difficult for a user of a large
model to figure out how many initial equations
have to be added. Therefore, it is essential that a
Modelica environment has appropriate support. For
example, Dymola performs index reduction and
selects state variables for the simulation model [1],
[3], [4]. Thus, it establishes how many states there
are and how many initial conditions have to be
additionally provided. If there are too many initial
equations, Dymola outputs an error message
indicating a set of initial equations or fixed start
values from which initial equations must be
removed or start values inactivated by setting fixed
= false. If initial conditions are missing, Dymola
makes automatic default selection of initial
conditions. The approach is to select continuous
time states with inactive start values and make
their start values active by turning their fixed
attribute to true to get a structurally well posed
initialization problem. A message informing about
the result of such a selection can be obtained.

6.

Note, that the following call leads to an error
RealToString(2.0, 6, precision=4);

since argument 2 is defined twice. This function
may be used to conveniently build up a message
string, such as
Variable "mass" (= -10.4562) shall
be non-negative.

via the function call
assert(v>=0,"Variable \"mass\" (="
+ RealToString(v) + " shall be "
+ "non-negative.\n"

As before, only positional output arguments of a
function application are possible. However, output
arguments shall be omitted, if the corresponding
variables has attribute enable=false in the function
declaration. This makes it possible to avoid
dummy output arguments in the function
application which are not used in the calling
function. For example, a function to compute
eigenvalues and optionally right and left
eigenvectors may be defined in Modelica as:

Function Applications

In Modelica 1.4, a function application can have
either positional or named input arguments. In
Modelica 2, a function application may have
optional positional input arguments followed by

Modelica 2002, March 18−19, 2002

7−6

The Modelica Association

M. Otter, H. Olsson

New Features in Modelica 2.0

Additionally, functions are needed, operating on
this data type, such as:

function eigen
parameter Integer n = size(A,1);
input Real
A[:,n];
input Boolean getREV = false;
input Boolean getLEV = false;
output Real eigenValues[n,2];
output Real REV[n,n](enable=getREV);
output Real LEV[n,n](enable=getLEV);
algorithm
// compute eigenvalues
if getREV then
// compute right eigenvectors
end if;
if getLEV then
// compute left eigenvectors
end if;
end eigen;

function add "Add Comp. numbers"
input Complex u, v;
output Complex w(re=u.re + v.re,
im=u.im + v.im);
end add;

The record constructor allows, e.g., to avoid the
usage of unnecessary auxiliary variables:
Complex c1, c2;
equation
c2 = add(c1, Complex(sin(time),
cos(time));

This function may be called to calculate only the
eigenvalues of a matrix or to just determine
whether a matrix has only stable eigenvalues:
ev = eigen(A);
b = isStable(eigen(A));

Note, that the second argument of the function
application uses the record constructor to construct
a temporary instance of type Complex.

//

Record constructors are very useful in situations
where previously replaceable records have been
needed (which are much less convenient to utilize).
For example, a data sheet library of motors shall be
constructed. The motor model consists essentially
of two parts, one part containing all the data
defining a particular motor as a record, e.g.,

to calculate eigenvalues and right eigenvectors:
(ev, REV) = eigen(A, getREV=true);

to calculate additionally also the left eigenvectors:
(ev, REV, LEV) = eigen(A, getREV=true,
getLEV=true);

7.

record MotorData
parameter Real
parameter Real
parameter Real
parameter Real
...
end MotorData;

Record Constructor

In Modelica 2, the missing constructor for the
record data type is introduced. It is defined as a
function with the same name and the same scope
as the corresponding record containing all
modifiable components of the record as input
arguments and a record instance as output
argument. Since a record constructor is just a
function, it can be used at all places, where a
function call is allowed. For example, with the
following record declaration

and the motor model utilizing the motor data
model Motor
MotorData data;
// connector definitions
equation
...
end Motor;

record Complex "Complex number"
Real re "real part";
Real im "imaginary part";
end Complex;

When using a motor, specific values of the motor
data could be given in the usual way:

a Complex data type is defined and implicitly its
constructor function

model Robot1
Motor m1(data(inertia
nominalTorque
maxTorque
maxSpeed
Motor m2(data(...));
...
end Robot1;

function Complex
input Real re "real part";
input Real im "imaginary part";
output Complex out(re=re,im=im);
end Complex;

The Modelica Association

inertia;
nominalTorque;
maxTorque;
maxSpeed;

7−7

=
=
=
=

0.001,
10,
20,
3600));

Modelica 2002, March 18−19, 2002

New Features in Modelica 2.0

M. Otter, H. Olsson

When using the same motor type several times, it
is better to define the motor data just ones, i.e.,
build up a data sheet library by modifications of
the default values of the basic MotorData record:

end for;
end for;

may be abbreviated as
for i in 1:size(A,1),
j in 1:size(A,2) loop
A[i,j] = B[i,j]^2;
end for;

package Motors
record M103 = MotorData(
inertia
= 0.001,
nominalTorque = 10,
maxTorque
= 20,
maxSpeed
= 3600);

or even shorter by automatic deduction of ranges

record M104 = MotorData(
inertia
= 0.0015,
nominalTorque = 15,
maxTorque
= 22,
maxSpeed
= 3600);
...
end Motors;

for i,j loop
A[i,j] = B[i,j]^2;
end for;

Reduction Operators
An expression

Whenever one of the motors of package Motors is
needed, it can be accessed by using the
corresponding record constructor:

function(expression for iterators);

is a reduction-expression. Currently, only the
function names sum, product, min, and max can
be used. The result is constructed by evaluating
"expression" for each value of the iterator variable
and computing the sum, product, minimum, or
maximum of the computed elements. Examples:

model Robot2
Motor m1(data = Motors.M103());
Motor m2(data = Motors.M104(
inertia=0.0012));
...
end Robot2;

It is still possible to override parameters in such a
definition, see declaration of m2, by calling the
record constructor function with appropriate
positional or (preferably) named arguments.

8.

sum(i for i in 1:10);

is the same as

∑

10
i =1

Iterators

A Modelica translator may transform this operation
into:

Modelica 2 introduces several enhancements to
support more powerful expressions, especially in
declarations, in order to avoid inconvenient local
function definitions:

algorithm
result := 0;
for i in 1:10 loop
result := result + i;
end for;

Deduction of Ranges

In all iterators, e.g., in for-loop, the expression to
define the range of the iteration need not to be
given if the iterator variables appear as array
indices. In such cases the iteration range is
deduced from the dimension sizes of the
corresponding arrays. Example:

The sum of elements could also be defined as
sum(1:10);

using the built-in operator sum(). However, when
summing up complex expressions or non-scalar
expressions the reduction-expression can be made
more readable than finding the appropriate
vectorized expressions. As an example consider
summing the squares instead:

for i loop
A[i] = B[i]^2;
end for;

A nested for loop
for i in 1:size(A,1) loop
for j in 1:size(A,2) loop
A[i,j] = B[i,j]^2;

Modelica 2002, March 18−19, 2002

i = 1+2+...+10=55

sum(i^2 for i in 1:10);

7−8

The Modelica Association

M. Otter, H. Olsson

New Features in Modelica 2.0

The sum of squared elements could also be defined
as

1
0

0

0

sum(diagonal(1:10)^2);

but even though it is slightly shorter it is not as
readable.
Other examples are:

may be created with
{if i==j then i else 0
for i in 1:n, j in 1:n}

product(a[i,1]*s + a[i,2] for i);

9.

is the same as

As usual, a vector of values may be given as an
iterator:
sum(i^2 for i in {1,3,7,6})

∑

void

ModelicaMessage
(const char* string)
void ModelicaFormatMessage
(const char* string, ...)
void ModelicaError
(const char* string)
void ModelicaFormatError
(const char* string, ...)
char* ModelicaAllocateString
(size_t len)
char*
ModelicaAllocateStringWithErrorReturn
(size_t len)

2

i∈{1 3 7

i = 1+9+49+36=95
6}

max(i^2 for i in {3,7,6})

results in 49

Iterator Array Construction

In a similar way as a reduction operator, the
construction
{expression for iterators};

ModelicaMessage and ModelicaFormatMessage
output a string to the message window of the
Modelica environment. The latter with the same
format control as the C-function printf. In both
cases linefeeds need to be explicitly defined in the
string by "\n". Similarly, ModelicaError and
ModelicaFormatError output an error to the error
window of the Modelica environment. Contrary to
the first two functions, these functions never return
to the calling function, but handle the error
similarly to an assert in the Modelica code.
Example for usage:

with n iterators generates an array with n
dimensions. The array is constructed by evaluating
the expression for every iterator value and
collecting the results to a corresponding array.
Examples:
{i^2 for i in 1:5}

results in the vector
{1, 4, 9, 16, 25}

ModelicaFormatError(
"\"%s\" cannot be copied to \"%s\""
":\n%s", oldFile, newFile,
strerror(errno));

An (n,m) array having the same value v for all
elements may be constructed as
{v for i in 1:n, j in 1:m}

Here, an error message is printed if a file cannot be
copied. The error message of the operating system
containing the source of the error is included at the
end of the message by a call to the C function
strerror(...).

which is the same as "fill(v,n,m)". The special
matrix

The Modelica Association

External Utility Functions

Modelica 1.4 has already a convenient and simple
to use interface for external C and FORTRAN
procedures which allows to pass nearly all data
types of Modelica. The only exceptions have been
String types which could not be returned. In
Modelica 2, the following utility functions can be
called in external C functions:

n

∏i =1 (ai1s + ai 2 ) = (a11s + a12 ) ⋅ (a21s + a22 ) ⋅ ...

Gives

0 0 0
2 0 0
0 3 0

0 0 4

7−9

Modelica 2002, March 18−19, 2002

New Features in Modelica 2.0

M. Otter, H. Olsson

ModelicaAllocateString allocates memory for a
Modelica string which is used as return argument
of an external Modelica function. If an error
occurs, this function does not return. The Modelica
environment is responsible to free this memory
when
appropriate.
In
a
similar
way
ModelicaAllocateStringWithErrorReturn
allocates string memory, but returns in case of
error. This allows the external function to close
files and free other open resources in case of error.
Due to these two functions, Modelica Strings can
now also be returned from external Modelica
functions. For example, with the following external
Modelica interface
function blanks
input Integer n(min=0);
output String blankString;
external "C"
blankString = blanks(n);
end blanks;

a string containing n blanks shall be returned. An
implementation of this function in C could be
accomplished in the following way:
#include "ModelicaUtilities.h"
const char* blanks(int n) {
/* Create string with n blanks */
char *c = ModelicaAllocateString(n);
int i;
for(i=0; i<n; ++i)
c[i]=’ ’;
c[n]=’\0’;
return c;
};

External Objects

Formally, external functions in Modelica 1.4 need
to be functions in the mathematical sense, i.e., they
do not have a memory and therefore return exactly
the same result if the function is called with the
same input arguments. In Modelica 2.0,
additionally external objects are supported in C,
i.e., several functions may operate on a C data
structure which is passed between function calls
and represents an "object memory". Example:
A table data structure may be defined in such a
way, that the table data is read in a user defined
format from file. Furthermore, the table is
interpolated in a user defined manner in the
Modelica model utilizing the last used table
interval for efficiently finding the current interval,
i.e., an internal memory is needed. This requires
the following Modelica definition:
class MyTable
extends ExternalObject;
function constructor
input String fileName;
input String tableName;
output MyTable table;
external "C" table =
initMyTable(fileName, tableName);
end constructor;
function destructor
input MyTable table;
external "C" closeMyTable(table);
end destructor;
end MyTable;

Note, that it is not necessary to check in the Cfunction that the input argument "n" is not
negative, because this is already defined in the
Modelica interface and therefore the Modelica
environment is responsible to check this property.
Furthermore, it needs not to be checked whether
memory
could
be
allocated,
because
ModelicaAllocateString will not return in such a
case but will raise an exception in the Modelica
run-time environment and will jump to a place
where execution can continue, e.g., after
terminating the simulation.
Note that the newly introduced enumeration types
can also be used as input and output arguments in
external functions. They are mapped to int in C
and INTEGER in FORTRAN. The first value in an
enumeration type is hereby mapped to 1, the
second to 2, etc.

Modelica 2002, March 18−19, 2002

10.

7 − 10

That is, a Modelica class has to be defined as a
direct subclass of the new predefined class
"ExternalObject". This class shall contain exactly
two function definitions, called "constructor" and
"destructor" (and no other elements). The
constructor function is called once before the first
use of the object. For each completely constructed
object (here: instance of MyTable), the destructor
is called once, after the last use of the object, even
if an error occurs. These two functions are always
called implicitly and it is not allowed to call them
explicitly. The MyTable Modelica class can be
used in a Modelica model in the following way:
model test
MyTable table1=MyTable(
"testTables.txt", "table1");
MyTable table2=table1; //copy of table1
input Real u1, u2;
output Real y1, y2;
equation
y1 = interpolateMyTable(table1, u1);

The Modelica Association

M. Otter, H. Olsson

New Features in Modelica 2.0

y2 = interpolateMyTable(table2, u2);
end test;

In the declaration of "MyTable" either the
MyTable constructor is called using the class-name
as a function name, or a copy of another object of
the same type is constructed (see table2). The
objects may then be used in other external
Modelica functions. Here, a special external
interpolation function is used:
function interpolateMyTable
input MyTable table;
input Real u;
output Real y;
external "C" y =
interpolateMyTable(table, u);
end interpolateMyTable;

The three external functions defined above may be
implemented in C in the following way:
typedef struct {
double* array;
int
nrow;
int
ncol;
int
type; /* interpolation type */
int
lastIndex; /* for search */
} MyTable;

11.

Graphical Appearance

The graphical appearance of Modelica object
diagrams has been defined informally up to
Modelica version 1.4 in the respective tutorial. In
Modelica 2, the graphical appearance is formally
defined in the Modelica specification with several
improvements, especially based on the new
enumeration features. In this section the most
important properties are sketched. Note, that all
graphical information is defined with the
annotation(...) language element and annotations
are defined to have no effect on the result of a
simulation. Therefore, annotations can be ignored
when generating simulation code.
A graphical representation of a class consists of
two abstraction layers, icon layer and diagram
layer. The icon representation visualizes the
component by hiding hierarchical details. The
hierarchical decomposition is described in the
diagram layer showing icons of sub-components.

void* initMyTable(char* fileName,
char* tableName) {
MyTable* table=malloc(sizeof(MyTable));
if ( table == NULL ) ModelicaError(
"Not enough memory");
// read table from file and store
// all data in *table
return (void*) table;
};

Icon and diagram layer are described by different
coordinate systems which means that the shape and
size of the two layers are independent from each
other. This is different to previous versions of
Modelica where only one coordinate system is
defined for both layers. As a result, in Modelica 2
it is easier to arrive at nice looking drawings,
because connectors may have different sizes in the
icon and diagram layer and because a resizing of
the diagram or the icon layer does not influence the
size of the corresponding other layer. All size
information, e.g., the size of icons and diagrams,
the thickness of a line or the size of a font, is
defined with the predefined type DrawingUnit:

void closeMyTable(void* object) {
MyTable* table = (MyTable*) object;
if ( object == NULL ) return;
free(table->array);
free(table);
}
double interpolateMyTable(void* object,
double u) {
MyTable* table = (MyTable*) object;
double y;
// Interpolate using "*table" data
return y;
};

The external object interface allows, for example,
convenient implementations of
• user-defined table data structures,
• access to property databases,
• sparse matrix handling with specially defined
data structures to store sparse matrices,
• hardware interfaces, since the constructor and
destructor are called exactly once, even in case

The Modelica Association

of error, so that the resources of the hardware
are initialized and freed correctly in all
situations (once the hardware is initialized, i.e.,
the Modelica object constructed, it is
guaranteed that the destructor is called exactly
once for this object when the object, i.e., the
hardware, is no longer needed or when an error
occurs).

7 − 11

type DrawingUnit =
Real(final unit="mm");

The interpretation of "unit" in "mm" is with respect
to printer output in natural size (not zoomed).
Therefore,
a
rectangle
with
width=20
DrawingUnits, height = 10 DrawingUnits and line
thickness of 0.5 DrawingUnits will be output as a

Modelica 2002, March 18−19, 2002

New Features in Modelica 2.0

M. Otter, H. Olsson

rectangle with 20 mm width, 10 mm height and 0.5
mm line thickness on a printer. The representation
on screen is not formally defined. It is typically a
direct mapping of "mm" to "pixels", e.g., 1 mm in
"natural size" is typically mapped to 4 pixels. On
high resolution screens, this mapping may be
different.
The properties of graphical objects are mostly
defined with enumerations, e.g.,
type LinePattern = enumeration(
None, Solid, Dash, Dot,
DashDot, DashDotDot);

Colors are defined as RGB values
type Color=Integer[3](min=0,max=255)

There is a set of predefined graphical primitives Line, Polygon, Rectangle, Ellipse, Text, Bitmap which may have graphical properties such as
lineColor, fillColor, linePattern, fillPattern,
borderPattern, lineThickness. For Text primitives,
the font name and the font size can be defined. All
graphical primitives are placed by defining the
placement of the corresponding object coordinate
system together with additional attributes to scale,
rotate, flip the object.
Note: a Modelica tool is free to define and use
other graphical attributes, in addition to those
defined in the Modelica specification. The only
requirement is that any tool must be able to save
files with all attributes intact, including those that
are not used. To ensure this, annotations shall be
represented with constructs according to the
Modelica grammar.

12.

Outlook

We have this far described the status of Modelica
2.0. Some minor extensions have not been
mentioned, such as the "smooth" operator and the
"elseif" clause of if-expressions. In the near future
we can also expect the Modelica 2.0 libraries, and
in particular the blocks library, redesigned as
described above. In addition a ModelicaFunctions
library with matrix operations (linear algebra) will
be made available and the new rules for variable
number of input and output arguments will make it
possible to provide one function easily usable both
by experts and novices.

expect more use of Modelica scripts and
potentially a formal definition of such scripts, and
API-functions to access model properties from
scripts. Other free libraries are also under
development, e.g., for 1-dim. heat transfer and for
3-dim. vehicle dynamics.
From the language point of view some areas where
improvements are needed is already clear, e.g.,
enumerations (as described above), impulses
(eliminating the need for the reinit-operator [5]),
heterogeneous arrays and PDEs (automatic
discretization). More advanced use of the language
and construction of large libraries and models will
probably help in discovering areas where the
specification can be made clearer and where
further enhancement of the language is needed to
better support the growing number of users of
Modelica.

Bibliography
[1] Dymola, Dynasim AB, Lund, Sweden, version
5.0, http://www.dynasim.se.
[2] Mattsson S.E., Elmqvist H., and Olsson H.:
Means to Control the Selection of States in
Modelica (white paper of Dynasim), Nov.
2001.
[3] Mattsson S.E., Elmqvist H., Otter M., and
Olsson H.: Initialization of Hybrid
Differential-Algebraic Equations. Modelica
2002, Oberpfaffenhofen, pp. 9-15, March 18.19., 2002.
[4] Mattsson S.E., Olsson H. and Elmqvist H:
Dynamic Selection of States in Dymola.
Modelica'2000, Oct. 2000.
[5] Mattsson S.E., Olsson H. and Elmqvist H:
Varying structure Hybrid DAE (white paper
of Dynasim), Jun. 2001.

The ModelicaFunctions can also be used
interactively, as well as other functions and we

Modelica 2002, March 18−19, 2002

7 − 12

The Modelica Association

Mattsson S.E., Elmqvist H., Otter M., and Olsson H.

Initialization of Hybrid Differential−Algebraic Eq...

,QLWLDOL]DWLRQRI+\EULG'LIIHUHQWLDO$OJHEUDLF(TXDWLRQV
LQ0RGHOLFD
6YHQ(ULN0DWWVVRQ+LOGLQJ(OPTYLVW0DUWLQ2WWHUÁDQG+DQV2OVVRQ


'\QDVLP$%/XQG6ZHGHQ^VYHQHULNHOPTYLVWKDQV`#G\QDVLPVH
Á
'/52EHUSIDIIHQKRIHQ*HUPDQ\PDUWLQRWWHU#GOUGH

$EVWUDFW

'\PROD>@VXSSRUWVWKHQHZODQJXDJHFRQVWUXFWVRI
0RGHOLFD(DUOLHU'\PRODYHUVLRQVKDGSXUHQXPHULF
VXSSRUWIRULQLWLDOL]DWLRQ([SHULHQFHVIURPLQGXVWULDO
DSSOLFDWLRQVLQFOXGLQJFORVHGNLQHPDWLFVORRSVDQG
WKHUPRG\QDPLFSUREOHPVVKRZHGWKDWWKLVZDVQRW
VXIILFLHQW7KHQXPHULFDOVROYHUVZHUHRIWHQQRWDEOHWR
VROYHWKHODUJHDQGQRQOLQHDUSUREOHPV1RZ'\PROD
DOVRPDQLSXODWHVV\PEROLFDOO\WKHLQLWLDOL]DWLRQ
SUREOHPDQGJHQHUDWHVDQDO\WLF-DFRELDQVIRUQRQOLQHDU
VXESUREOHPV([SHULHQFHLQGLFDWHVWKDWWKLVDSSURDFKLV
PRUHUREXVWDQGUHOLDEOH0RUHRYHUWKHVSHFLDO
DQDO\VLVRIWKHLQLWLDOL]DWLRQSUREOHPDOORZV'\PRODWR
JLYHGLDJQRVLVDQGXVHUJXLGDQFHZKHQWKH
LQLWLDOL]DWLRQSUREOHPWXUQVRXWQRWWREHZHOOSRVHG

0RGHOLFDSURYLGHVQHZSRZHUIXOODQJXDJHFRQVWUXFWV
IRUVSHFLI\LQJLQLWLDOFRQGLWLRQV%HIRUHDQ\RSHUDWLRQ
LVFDUULHGRXWZLWKD0RGHOLFDPRGHOVXFKDV
VLPXODWLRQRUOLQHDUL]DWLRQLQLWLDOL]DWLRQWDNHVSODFHWR
DVVLJQFRQVLVWHQWYDOXHVIRUDOOYDULDEOHVGHULYDWLYHV
DQGSUHYDULDEOHVSUHVHQWLQWKHPRGHO7RREWDLQ
FRQVLVWHQWYDOXHVWKHLQLWLDOL]DWLRQXVHVDOOHTXDWLRQV
DQGDOJRULWKPVWKDWDUHXWLOLVHGGXULQJWKHVLPXODWLRQ
$GGLWLRQDOFRQVWUDLQWVQHFHVVDU\WRGHWHUPLQHWKH
LQLWLDOYDOXHVRIDOOYDULDEOHVFDQEHSURYLGHGDVVWDUW
YDOXHVIRUDQ\YDULDEOHVDVZHOODVDGGLWLRQDOFRQVWUDLQW
HTXDWLRQVLQLQLWLDOHTXDWLRQVHFWLRQV$QRYHOIHDWXUHLV
WKHSRVVLELOLW\WRKDYHDVDPSOHGFRQWUROOHULQLWLDOL]HG
LQVWHDG\VWDWH7KLVWXWRULDOSDSHUGHVFULEHVDQG
H[SODLQVWKHQHZODQJXDJHFRQVWUXFWVDQGLOOXVWUDWHV
KRZWKH\LQFRPELQDWLRQZLWK0RGHOLFD¶VRWKHU
ODQJXDJHHOHPHQWVDOORZYHU\IOH[LEOHDQGSRZHUIXO
LQLWLDOL]DWLRQFRQGLWLRQVWREHGHILQHG

7KLVSDSHUGHVFULEHVWKHODQJXDJHFRQVWUXFWVWRVSHFLI\
LQLWLDOFRQGLWLRQVDQGH[DPSOHVIRUWKHXVDJHDUHJLYHQ

%DVLFV
%HIRUHDQ\RSHUDWLRQLVFDUULHGRXWZLWKD0RGHOLFD
PRGHOHVSHFLDOO\VLPXODWLRQLQLWLDOL]DWLRQWDNHVSODFH
WRDVVLJQFRQVLVWHQWYDOXHVIRUDOOYDULDEOHVSUHVHQWLQ
WKHPRGHO'XULQJWKLVSKDVHDOVRWKHGHULYDWLYHV
GHU«DQGWKHSUHYDULDEOHVSUH«DUHLQWHUSUHWHG
DVXQNQRZQDOJHEUDLFYDULDEOHV7KHLQLWLDOL]DWLRQXVHV
DOOHTXDWLRQVDQGDOJRULWKPVWKDWDUHXWLOL]HGGXULQJWKH
VLPXODWLRQ

,QWURGXFWLRQ
$G\QDPLFPRGHOGHVFULEHVKRZWKHVWDWHVHYROYHZLWK
WLPH7KHVWDWHVDUHWKHPHPRU\RIWKHPRGHOIRU
H[DPSOHLQPHFKDQLFDOV\VWHPVSRVLWLRQVDQG
YHORFLWLHV:KHQVWDUWLQJDVLPXODWLRQWKHVWDWHVQHHG
WREHLQLWLDOL]HG

$GGLWLRQDOFRQVWUDLQWVQHFHVVDU\WRGHWHUPLQHWKH
LQLWLDOYDOXHVRIDOOYDULDEOHVFDQEHSURYLGHGLQWZR
ZD\V

)RUDQRUGLQDU\GLIIHUHQWLDOHTXDWLRQ2'(LQVWDWH
VSDFHIRUPG[GW I[WWKHVWDWHYDULDEOHV[DUH
IUHHWREHJLYHQLQLWLDOYDOXHV+RZHYHUPRUH
IOH[LELOLW\LQVSHFLI\LQJLQLWLDOFRQGLWLRQVWKDQVHWWLQJ
VWDWHYDULDEOHVLVQHHGHG,QPDQ\FDVHVZHZRXOGOLNH
WRVWDUWDWVWHDG\VWDWHLPSO\LQJWKDWWKHXVHUVSHFLILHV
G[GW DVLQLWLDOFRQGLWLRQWRJHWWKHLQLWLDOYDOXHVRI
[FDOFXODWHGDXWRPDWLFDOO\E\VROYLQJI[W 
%HVLGHVWKHVWDWHVDPRGHOKDVDOVRRWKHUYDULDEOHVDQG
LQPDQ\FDVHVLWLVQDWXUDOWRVSHFLI\LQLWLDOFRQGLWLRQV
LQWHUPVRIWKHVHYDULDEOHV

 6WDUWYDOXHVIRUYDULDEOHV
 ,QLWLDOHTXDWLRQVDQGLQLWLDODOJRULWKPV
)RUFODULW\ZHZLOOILUVWIRFXVRQWKHLQLWLDOL]DWLRQRI
FRQWLQXRXVWLPHSUREOHPVEHFDXVHWKHUHDUHVRPH
GLIIHUHQFHVLQWKHLQWHUSUHWDWLRQRIWKHVWDUWYDOXHVRI
FRQWLQXRXVWLPHYDULDEOHVDQGGLVFUHWHYDULDEOHV$OVR
WKHUHDUHVSHFLDOUXOHVIRUWKHXVDJHRIZKHQFODXVHV
GXULQJLQLWLDOL]DWLRQ$OOWKLVPDNHVLWVLPSOHUWRVWDUW
GLVFXVVLQJSXUHFRQWLQXRXVWLPHSUREOHPVDQGDIWHU
WKDWGLVFXVVGLVFUHWHDQGK\EULGSUREOHPV

,Q-DQXDU\0RGHOLFDZDVUHOHDVHG>@7KHQHZ
ODQJXDJHFRQVWUXFWVSHUPLWIOH[LEOHVSHFLILFDWLRQRI
LQLWLDOFRQGLWLRQVDVZHOODVWKHFRUUHFWVROXWLRQRI
GLIILFXOWQRQVWDQGDUGLQLWLDOL]DWLRQSUREOHPVRFFXUULQJ
LQLQGXVWULDODSSOLFDWLRQV0RGHOLFDSURYLGHVD
PDWKHPDWLFDOO\ULJLGVSHFLILFDWLRQRIWKHLQLWLDOL]DWLRQ
RIK\EULGGLIIHUHQWLDODOJHEUDLFHTXDWLRQV

The Modelica Association

9

Modelica 2002, March 18−19, 2002

Initialization of Hybrid Differential−Algebraic Eq...

Mattsson S.E., Elmqvist H., Otter M., and Olsson H.

&RQWLQXRXVWLPHSUREOHPV

LQLWLDOHTXDWLRQ
GHU[ 

,QLWLDOHTXDWLRQVDQGDOJRULWKPV

$PRUHDGYDQFHGH[DPSOHLV

9DULDEOHVEHLQJVXEW\SHVRI5HDOKDYHDQDWWULEXWHVWDUW
DOORZLQJVSHFLILFDWLRQRIDVWDUWYDOXHIRUWKHYDULDEOH

SDUDPHWHU5HDO[
SDUDPHWHU%RROHDQVWHDG\6WDWH
SDUDPHWHU%RROHDQIL[HG
5HDO[
LQLWLDOHTXDWLRQ
LIVWHDG\6WDWHWKHQ
GHU[ 
HOVHLIIL[HGWKHQ
[ [
HQGLI

5HDOYVWDUW 
SDUDPHWHU5HDO[ 
5HDO[VWDUW [

7KHYDOXHIRUVWDUWVKDOOEHDSDUDPHWHUH[SUHVVLRQ
7KHUHLVDOVRDQRWKHU%RROHDQDWWULEXWHIL[HGWRLQGLFDWH
ZKHWKHUWKHYDOXHRIVWDUWLVDJXHVVYDOXHIL[HG
IDOVHWREHXVHGLQSRVVLEOHLWHUDWLRQVWRVROYH
QRQOLQHDUDOJHEUDLFORRSVRUZKHWKHUWKHYDULDEOHLV
UHTXLUHGWRKDYHWKLVYDOXHDWVWDUWIL[HG WUXH)RU
FRQVWDQWVDQGSDUDPHWHUVWKHDWWULEXWHIL[HGLVE\
GHIDXOWWUXHRWKHUZLVHIL[HGLVE\GHIDXOWIDOVH

,IWKHSDUDPHWHUVWHDG\6WDWHLVWUXHWKHQ[ZLOOEH
LQLWLDOL]HGDWVWHDG\VWDWHEHFDXVHWKHPRGHOVSHFLILHV
WKHLQLWLDOL]DWLRQHTXDWLRQ
LQLWLDOHTXDWLRQ
GHU[ 

)RUDFRQWLQXRXVWLPHYDULDEOHWKHFRQVWUXFW

,IWKHSDUDPHWHUVWHDG\6WDWHLVIDOVHEXWIL[HGLVWUXH
WKHQWKHUHLVDQLQLWLDOL]DWLRQHTXDWLRQ

5HDO[VWDUW [IL[HG WUXH

LQLWLDOHTXDWLRQ
[ [

LPSOLHVWKHDGGLWLRQDOLQLWLDOL]DWLRQHTXDWLRQ
[ [

,IERWKVWHDG\6WDWHDQGIL[HGDUHIDOVHWKHQWKHUHLVQR
LQLWLDOHTXDWLRQ

7KXVWKHSUREOHP

7KHDSSURDFKDVRXWOLQHGDERYHDOORZV[WREHDQ\
H[SUHVVLRQ:KHQ[LVDSDUDPHWHUH[SUHVVLRQWKH
VSHFLILFDWLRQDERYHFDQDOVREHJLYHQVKRUWHUDV

SDUDPHWHU5HDOD E 
SDUDPHWHU5HDO[ 
5HDO[VWDUW [IL[HG WUXH
HTXDWLRQ
GHU[ D[E

SDUDPHWHU5HDO[
SDUDPHWHU%RROHDQIL[HG
SDUDPHWHU%RROHDQVWHDG\6WDWH
5HDO[VWDUW [
IL[HG IL[HGDQG
QRWVWHDG\6WDWH
LQLWLDOHTXDWLRQ
LIVWHDG\6WDWHWKHQ
GHU[ 
HQGLI

KDVWKHIROORZLQJVROXWLRQDWLQLWLDOL]DWLRQ
D
E
[
[
GHU[




[ 
D[E 

,QLWLDOHTXDWLRQVDQGDOJRULWKPV
0L[HG&RQGLWLRQV

$PRGHOPD\KDYHWKHQHZVHFWLRQVLQLWLDOHTXDWLRQ
DQGLQLWLDODOJRULWKPZLWKDGGLWLRQDOHTXDWLRQVDQG
DVVLJQPHQWVWKDWDUHXVHGVROHO\LQWKHLQLWLDOL]DWLRQ
SKDVH7KHHTXDWLRQVDQGDVVLJQPHQWVLQWKHVHLQLWLDO
VHFWLRQVDUHYLHZHGDVSXUHDOJHEUDLFFRQVWUDLQWV
EHWZHHQWKHLQLWLDOYDOXHVRIYDULDEOHVDQGSRVVLEO\
WKHLUGHULYDWLYHV,WLVQRWDOORZHGWRXVHZKHQFODXVHV
LQWKHLQLWLDOVHFWLRQV

'XHWRWKHIOH[LELOLW\LQGHILQLQJLQLWLDOL]DWLRQ
HTXDWLRQVLQ0RGHOLFDLWLVSRVVLEOHWRIRUPXODWH
PRUHJHQHUDOLQLWLDOFRQGLWLRQV)RUH[DPSOHDQ
DLUFUDIWQHHGVDFHUWDLQPLQLPXPYHORFLW\LQRUGHUWKDW
LWFDQIO\6LQFHWKLVYHORFLW\LVDVWDWHDXVHIXO
LQLWLDOL]DWLRQVFKHPHLVWRSURYLGHDQLQLWLDOYHORFLW\L
HDQLQLWLDOYDOXHIRUDVWDWHDQGWRVHWDOORWKHUVWDWH
GHULYDWLYHVWR]HUR7KLVPHDQVWKDWDPL[WXUHRILQLWLDO
VWDWHVDQGLQLWLDOVWDWHGHULYDWLYHVLVGHILQHG

6WHDG\VWDWH
7RVSHFLI\WKDWDYDULDEOH[VKDOOVWDUWLQVWHDG\VWDWH
ZHFDQZULWH

Modelica 2002, March 18−19, 2002

10

The Modelica Association

Mattsson S.E., Elmqvist H., Otter M., and Olsson H.

Initialization of Hybrid Differential−Algebraic Eq...

:KHQVHWWLQJYDULDEOHVIURPVFULSWV'\PRODJHQHUDWHV
DZDUQLQJLIVHWWLQJWKHYDULDEOHKDVQRHIIHFWZKDWVR
HYHUHJLILWLVDVWUXFWXUDOSDUDPHWHU

+RZPDQ\LQLWLDOFRQGLWLRQV"
+RZPDQ\LQLWLDOFRQGLWLRQVDUHQHHGHGIRUD
FRQWLQXRXVWLPHSUREOHP"

1RQOLQHDUDOJHEUDLFORRSV

)RUDQRUGLQDU\GLIIHUHQWLDOHTXDWLRQ2'(LQVWDWH
VSDFHIRUPG[GW I[WH[DFWO\GLP[DGGLWLRQDO
FRQGLWLRQVDUHQHHGHGLQRUGHUWRDUULYHDWGLP[
HTXDWLRQVIRUWKHGLP[XQNQRZQV[WDQG
G[GWW

$QRQOLQHDUDOJHEUDLFSUREOHPPD\KDYHVHYHUDO
VROXWLRQV'XULQJVLPXODWLRQDQXPHULFDO'$(VROYHU
WHQGVWRJLYHWKHVPRRWKHVWVROXWLRQ$'$(VROYHULV
DVVXPHGWRVWDUWDWDFRQVLVWHQWSRLQWDQGLWVWDVNLVWR
FDOFXODWHDQHZSRLQWDORQJWKHWUDMHFWRU\%\WDNLQJD
VXIILFLHQWO\VPDOOVWHSDQGDVVXPLQJWKHH[LVWHQFHRID
-DFRELDQWKDWLVQRQVLQJXODUWKHUHLVDORFDOZHOO
GHILQHGVROXWLRQ

7KHVLWXDWLRQLVPRUHFRPSOH[IRUDV\VWHPRI
GLIIHUHQWLDODOJHEUDLFHTXDWLRQV'$(
 JG[GW[\W

7KHLQLWLDOL]DWLRQWDVNLVPXFKKDUGHUDQGSUHFDXWLRQV
PXVWEHWDNHQWRDVVXUHWKDWWKHFRUUHFWVROXWLRQLV
REWDLQHG7KHPHDQVWRJXLGHWKHVROYHULQFOXGHPLQ
DQGPD[YDOXHVDVZHOODVVWDUWYDOXHVIRUWKH
XQNQRZQV

ZKHUH[WDUHYDULDEOHVDSSHDULQJGLIIHUHQWLDWHG\W
DUHDOJHEUDLFYDULDEOHVDQGGLPJ GLP[GLP\
+HUHLWFDQRQO\EHVWDWHGWKDWDWPRVWGLP[
DGGLWLRQDOFRQGLWLRQVKDUHQHHGHGLQRUGHUWRDUULYH
DWGLP[GLP\HTXDWLRQVIRUWKHVDPHQXPEHURI
XQNQRZQVG[GWW[W\W

$VDVLPSOHH[DPSOHFRQVLGHUDSODQDUSHQGXOXPZLWK
IL[HGOHQJWK/

ÎJ [& W  [W  \ W  W  Þ
=Ï
ß
ÐK[& W   [W  \ W   W  à

\

[

\

7KHUHDVRQLVWKDWWKH'$(SUREOHPPD\EHDKLJKHU
LQGH['$(SUREOHPLPSO\LQJWKDWWKHQXPEHURI
FRQWLQXRXVWLPHVWDWHVLVOHVVWKDQGLP[

SKL

,WPD\EHGLIILFXOWIRUDXVHURIDODUJHPRGHOWRILJXUH
RXWKRZPDQ\LQLWLDOFRQGLWLRQVKDYHWREHDGGHG
HVSHFLDOO\LIWKHV\VWHPKDVKLJKHULQGH[$WWUDQVODWLRQ
'\PRODSHUIRUPVDQLQGH[UHGXFWLRQDQGVHOHFWVVWDWH
YDULDEOHV7KXV'\PRODHVWDEOLVKHVKRZPDQ\VWDWHV
WKHUHDUH,IWKHUHDUHWRRPDQ\LQLWLDOFRQGLWLRQV
'\PRODRXWSXWVDQHUURUPHVVDJHLQGLFDWLQJDVHWRI
LQLWLDOHTXDWLRQVRUIL[HGVWDUWYDOXHVIURPZKLFKLQLWLDO
HTXDWLRQVPXVWEHUHPRYHGRUVWDUWYDOXHVLQDFWLYDWHG
E\VHWWLQJIL[HG IDOVH

)

PJ

,ILQLWLDOFRQGLWLRQVDUHPLVVLQJ'\PRODPDNHV
DXWRPDWLFGHIDXOWVHOHFWLRQRILQLWLDOFRQGLWLRQV7KH
DSSURDFKLVWRVHOHFWFRQWLQXRXVWLPHVWDWHVZLWK
LQDFWLYHVWDUWYDOXHVDQGPDNHWKHLUVWDUWYDOXHVDFWLYH
E\WXUQLQJWKHLUIL[HGDWWULEXWHWRWUXHWRJHWD
VWUXFWXUDOO\ZHOOSRVHGLQLWLDOL]DWLRQSUREOHP$
PHVVDJHLQIRUPLQJDERXWWKHUHVXOWRIVXFKDVHOHFWLRQ
FDQEHREWDLQHG

)LJXUH$SODQDUSHQGXOXP
7KHSRVLWLRQRIWKHSHQGXOXPFDQEHJLYHQLQSRODU
FRRUGLQDWHV,QWURGXFHDQDQJOHSKLWKDWLV]HURZKHQ
WKHSHQGXOXPLVKDQJLQJGRZQZDUGLQLWVUHVWSRVLWLRQ
7KHPRGHOFDQEHJLYHQDV
SDUDPHWHU5HDOJ 
SDUDPHWHU5HDOP 
SDUDPHWHU5HDO/ 
5HDOSKLZ
HTXDWLRQ
GHUSKL Z
PGHUZ PJ/VLQSKL

,QWHUDFWLYHVHWWLQJRIVWDUWYDOXHV
7KHLQLWLDOYDOXHGLDORJXHRIWKH'\PRODPDLQZLQGRZ
KDVEHHQUHGHVLJQHG3UHYLRXVO\LWLQFOXGHGDOO
FRQWLQXRXVWLPHVWDWHV1RZLWLQFOXGHVWKHFRQWLQXRXV
WLPHYDULDEOHVKDYLQJDFWLYHVWDUWYDOXHVLH
IL[HG WUXHDQGWKHVWDUWYDOXHEHLQJDOLWHUDO6HWWLQJ
SDUDPHWHUVPD\RIFRXUVHLQIOXHQFHDQDFWLYHVWDUW
YDOXHERXQGWRDSDUDPHWHUH[SUHVVLRQ

The Modelica Association

/

$VVXPHQRZWKDWZHZDQWWRVSHFLI\WKHLQLWLDO
FRQGLWLRQLQ&DUWHVLDQFRRUGLQDWHVGHILQHGDV

11

Modelica 2002, March 18−19, 2002

Initialization of Hybrid Differential−Algebraic Eq...

Mattsson S.E., Elmqvist H., Otter M., and Olsson H.

WLPHGHSHQGHQWFRQWLQXRXVWLPHRUGLVFUHWHYDULDEOHV
GRHVQRWYLRODWHWKLVVHPDQWLFV

[ /VLQSKL
\ /FRVSKL

7KLVIHDWXUHKDVPDQ\XVHIXODSSOLFDWLRQV,WDOORZV
SRZHUIXOUHSDUDPHWUL]DWLRQVRIPRGHOV$VDQH[DPSOH
FRQVLGHUWKHPRGHORIDQLGHDOUHVLVWRU,WKDVRQH
SDUDPHWHU5EHLQJWKHUHVLVWDQFH$VVXPHWKDWZH
ZRXOGOLNHWRKDYHXVHLWDVDUHVLVWLYHORDGZLWKD
JLYHQSRZHUGLVVLSDWLRQDWDVWHDG\VWDWHRSHUDWLQJ
SRLQW,WLVMXVWWRH[WHQGIURPWKHUHVLVWRUPRGHOJLYHQ
LQWKH0RGHOLFD6WDQGDUG/LEUDU\DQG

,IZHGHILQH
5HDO\VWDUW IL[HG WUXH

WKHSHQGXOXPZLOOVWDUWLQDKRUL]RQWDOSRVLWLRQ
+RZHYHUWKHUHDUHWZRKRUL]RQWDOSRVLWLRQVQDPHO\
[ /DQG[ /

$GGDSDUDPHWHU3WRVSHFLI\WKHSRZHU

GLVVLSDWLRQ
6HWIL[HG

IDOVHIRUSDUDPHWHU5
$GGDQLQLWLDOHTXDWLRQVHFWLRQZLWKYL

3

7RLQGLFDWHSUHIHUHQFHIRUDSRVLWLYHYDOXHIRU[ZH
FDQGHILQH
5HDO[VWDUW /

,QSRZHUV\VWHPVLWLVFRPPRQSUDFWLFHWRVSHFLI\
LQLWLDOFRQGLWLRQVLQVWHDG\VWDWHDQGXVHGLIIHUHQWNLQG
RIORDGPRGHOVLQFOXGLQJUHVLVWLYHORDGDQGVSHFLI\
WKHLUVWHDG\VWDWHRSHUDWLQJFRQGLWLRQVLQWHUPVRI
DFWLYHDQGUHDFWLYHSRZHUGLVVLSDWLRQ

,WPHDQVWKDWZHSURYLGHDJXHVVYDOXHIRUQXPHULFDO
VROYHUVWRVWDUWIURP7KH\ZLOOKRSHIXOO\ILQGWKH
SRVLWLYHVROXWLRQIRU[EHFDXVHLWLVFORVHUWR/WKDQ
WKHQHJDWLYHVROXWLRQ
)RUWKHDQJOHSKLWKHUHDUHPDQ\YDOXHVJLYLQJWKH
GHVLUHGSRVLWLRQEHFDXVHDGGLQJRUVXEWUDFWLQJp
JLYHVWKHVDPH&DUWHVLDQSRVLWLRQ$OVRKHUHWKHVWDUW
YDOXHFDQEHXVHGWRLQGLFDWHWKHGHVLUHGVROXWLRQ+RZ
FULWLFDOLWLVWRJHWDVSHFLDOVROXWLRQGHSHQGVRIFRXUVH
RQZKDWSKLZLOOEHXVHGIRULQWKHPRGHODQGWKHDLP
RIWKHVLPXODWLRQ,IQRVWDUWYDOXHLVJLYHQ]HURLVXVHG

,QVRPHFDVHVSDUDPHWHUVPD\EHSURYLGHGRXWVLGHRID
0RGHOLFDPRGHODQGWKHDFWXDOYDOXHVPD\EHUHDG
IURPILOHRUSDUDPHWHUYDOXHVPD\EHLQTXLUHGIURPD
GDWDEDVHV\VWHPGXULQJLQLWLDOL]DWLRQ
SDUDPHWHU5HDO$IL[HG IDOVH
SDUDPHWHU5HDOZIL[HG IDOVH
5HDO[
LQLWLDOHTXDWLRQ
$Z UHDG6LQH'DWDLQLWW[W
HTXDWLRQ
GHU[ $VLQZ[

3DUDPHWHUYDOXHV
3DUDPHWHUVDUHW\SLFDOO\JLYHQYDOXHVLQDPRGHO
WKURXJKGHILQLWLRQHTXDWLRQRUVHWLQWHUDFWLYHO\EHIRUHD
VLPXODWLRQ0RGHOLFDDOVRDOORZVSDUDPHWHUYDOXHVWR
EHJLYHQLPSOLFLWO\LQWHUPVRIWKHLQLWLDOYDOXHVRIDOO
YDULDEOHV

'LVFUHWHDQGK\EULGSUREOHPV
7KHODQJXDJHFRQVWUXFWVIRUVSHFLI\LQJLQLWLDO
FRQGLWLRQVIRUGLVFUHWHYDULDEOHVDUHDVIRUWKH
FRQWLQXRXVWLPHYDULDEOHVVWDUWYDOXHVDQGLQLWLDO
HTXDWLRQVDQGDOJRULWKPV

5HFDOOWKHSODQDUSHQGXOXPDQGDVVXPHWKDWZHZRXOG
OLNHWRVSHFLI\WKHLQLWLDOSRVLWLRQDV
5HDO[VWDUW IL[HG WUXH
5HDO\VWDUW IL[HG WUXH

9DULDEOHVEHLQJVXEW\SHVRI5HDO,QWHJHU%RROHDQDQG
6WULQJKDYHDQDWWULEXWHVWDUWDOORZLQJVSHFLILFDWLRQRID
VWDUWYDOXHIRUWKHYDULDEOH

7KLVPHDQVWKDWZHLQIDFWDOVRVSHFLI\WKHOHQJWKRIWKH
SHQGXOXPWREH7RVSHFLI\WKDWWKHSDUDPHWHU/
VKDOOEHFDOFXODWHGIURPWKHLQLWLDOFRQGLWLRQVZH
GHILQHLWDV

)RUGLVFUHWHYDULDEOHVGHFODUDWLRQV
%RROHDQEVWDUW IDOVHIL[HG WUXH
,QWHJHULVWDUW IL[HG WUXH

SDUDPHWHU5HDO/IL[HG IDOVH

LPSO\WKHDGGLWLRQDOLQLWLDOL]DWLRQHTXDWLRQV

5HFDOOWKDWWKHDWWULEXWHIL[HGLVE\GHIDXOWWUXHIRU
FRQVWDQWVDQGSDUDPHWHUVRWKHUZLVHIL[HGLVE\GHIDXOW
IDOVH

SUHE IDOVH
SUHL 

7KHVHPDQWLFVRISDUDPHWHUVLQ0RGHOLFDLVDYDULDEOH
WKDWLVFRQVWDQWGXULQJVLPXODWLRQ7KHSRVVLELOLW\WROHW
WKHSDUDPHWHUYDOXHWRGHSHQGRQWKHLQLWLDOYDOXHVRI

Modelica 2002, March 18−19, 2002

12

The Modelica Association

Mattsson S.E., Elmqvist H., Otter M., and Olsson H.

Initialization of Hybrid Differential−Algebraic Eq...

7KLVPHDQVWKDWDGLVFUHWHYDULDEOHYLWVHOIGRHVQRWJHW
DQLQLWLDOYDOXH YWeEXWWKHSUHYDOXHRIY
YW e)) GRHV

+RZPDQ\LQLWLDOFRQGLWLRQV"

:KHQFODXVHVDWLQLWLDOL]DWLRQ

%DVLFDOO\WKLVLVYHU\VLPSOH(YHU\GLVFUHWHYDULDEOHY
QHHGVDQLQLWLDOFRQGLWLRQEHFDXVHYW e) LVRWKHUZLVH
QRWGHILQHG([DPSOH

)RUWKHLQLWLDOL]DWLRQSUREOHPWKHUHDUHVSHFLDOVHPDQWLF
UXOHVIRUZKHQFODXVHVDSSHDULQJLQWKHPRGHO'XULQJ
VLPXODWLRQDZKHQFODXVHLVRQO\DFWLYHZKHQLWV
FRQGLWLRQEHFRPHVWUXH'XULQJLQLWLDOL]DWLRQWKH
HTXDWLRQVRIDZKHQFODXVHDUHRQO\DFWLYHGXULQJ
LQLWLDOL]DWLRQLIWKHLQLWLDORSHUDWRUH[SOLFLWO\HQDEOHV
LW

SDUDPHWHU5HDOW 
GLVFUHWH5HDOXVWDUW IL[HG WUXH
5HDO[VWDUW IL[HG WUXH
HTXDWLRQ
ZKHQWLPH!WWKHQ
X 
HQGZKHQ
GHU[ [X

ZKHQ^LQLWLDOFRQGLWLRQ«`WKHQ
Y «
HQGZKHQ

'XULQJLQLWLDOL]DWLRQDQGEHIRUHWKHZKHQFODXVH
EHFRPHVDFWLYHWKHILUVWWLPHXKDVQRW\HWEHHQ
DVVLJQHGDYDOXHE\WKHZKHQFODXVHDOWKRXJKLWLVXVHG
LQWKHFRQWLQXRXVSDUWRIWKHPRGHO7KHUHIRUHLWZRXOG
EHDQHUURULISUHXZRXOGQRWKDYHEHHQGHILQHGYLD
WKHVWDUWYDOXHLQWKHXGHFODUDWLRQ

2WKHUZLVHDZKHQFODXVHLVLQWKHLQLWLDOL]DWLRQ
SUREOHPUHSODFHGE\Y SUHYIRUDOOLWVOHIWKDQGVLGH
YDULDEOHVEHFDXVHWKLVLVDOVRWKHXVHGHTXDWLRQGXULQJ
VLPXODWLRQZKHQWKHZKHQFODXVHLVQRWDFWLYH

2QWKHRWKHUKDQGLIXLVXVHGVROHO\LQVLGHWKLVZKHQ
FODXVHDQGSUHXLVQRWXWLOL]HGLQWKHPRGHODQLQLWLDO
YDOXHIRUXPD\EHSURYLGHGEXWGRHVQRWLQIOXHQFHWKH
VLPXODWLRQEHFDXVHWKHILUVWDFFHVVRIXFRPSXWHVXLQ
WKHZKHQFODXVHDQGDIWHUZDUGVXLVXWLOL]HGLQRWKHU
HTXDWLRQVLQVLGHWKHZKHQFODXVHLHWKHLQLWLDOYDOXH
LVQHYHUXVHG

1RQXQLTXHLQLWLDOL]DWLRQ
,QFHUWDLQVLWXDWLRQVDQLQLWLDOL]DWLRQSUREOHPPD\KDYH
DQLQILQLWHQXPEHURIVROXWLRQVHYHQLIWKHQXPEHURI
HTXDWLRQVDQGXQNQRZQYDULDEOHVDUHWKHVDPHGXULQJ
LQLWLDOL]DWLRQ([DPSOHVDUHFRQWUROOHGV\VWHPVZLWK
IULFWLRQRUV\VWHPVZLWKEDFNODVKRUGHDG]RQHV
$VVXPHIRUH[DPSOHEDFNODVKLVSUHVHQW7KHQDOO
YDOLGSRVLWLRQVLQWKLVHOHPHQWDUHVROXWLRQVRIVWHDG\
VWDWHLQLWLDOL]DWLRQDOWKRXJKWKLVSRVLWLRQVKRXOGEH
FRPSXWHGIURPLQLWLDOL]DWLRQ,WVHHPVEHVWWRQRWUHO\
RQVRPHKHXULVWLFVRIWKHLQLWLDOL]HUWRSLFNRQHRIWKH
LQILQLWHQXPEHURIVROXWLRQV,QVWHDGWKHFRQWLQXRXV
WLPHHTXDWLRQVPD\EHPRGLILHGGXULQJLQLWLDOL]DWLRQLQ
RUGHUWRDUULYHDWDXQLTXHVROXWLRQ([DPSOH

6LQFHLWPD\EHWHGLRXVIRUDPRGHOOHUWRSURYLGHLQLWLDO
YDOXHVIRUDOOGLVFUHWHYDULDEOHV0RGHOLFDRQO\
UHTXLUHVWRVSHFLI\LQLWLDOYDOXHVRIGLVFUHWHYDULDEOHV
ZKLFKLQIOXHQFHWKHVLPXODWLRQUHVXOW2WKHUZLVHD
GHIDXOWYDOXHPD\EHXVHG

([DPSOH,QLWLDOL]DWLRQRI
GLVFUHWHFRQWUROOHUV

\ LILQLWLDOWKHQ
VPRRWKFKDUDFWHULVWLFV
HOVH
VWDQGDUGFKDUDFWHULVWLFV

%HORZIRXUYDULDQWVWRLQLDOL]HDVLPSOHSODQW
FRQWUROOHGE\DGLVFUHWH3,FRQWUROOHUDUHGLVFXVVHG
9DULDQW,QLWLDOYDOXHVDUHJLYHQH[SOLFLWO\

:HOOSRVHGLQLWLDOL]DWLRQ

SDUDPHWHU5HDON 7 
3,FRQWUROOHUSDUDPHWHUV
SDUDPHWHU5HDO7V 6DPSOHWLPH
LQSXW5HDO[UHIUHIHUHQFHLQSXW
5HDO[IL[HG WUXHVWDUW 
GLVFUHWH5HDO[GIL[HG WUXHVWDUW 
GLVFUHWH5HDOXIL[HG WUXHVWDUW 
HTXDWLRQ
3ODQWPRGHO
GHU[ [X

$WWUDQVODWLRQ'\PRODDQDO\VHVWKHLQLWLDOL]DWLRQ
SUREOHPWRFKHFNLILWLVZHOOSRVHGE\VSOLWWLQJWKH
SUREOHPLQWRIRXUHTXDWLRQW\SHVZLWKUHVSHFWWRWKH
EDVLFVFDODUW\SHV5HDO,QWHJHU%RROHDQDQG6WULQJ
DQGGHFLGHVZKHWKHUHDFKRIWKHPDUHZHOOSRVHG
$VGHVFULEHGIRUWKHSXUHFRQWLQXRXVWLPHSUREOHP
'\PRODRXWSXWVHUURUGLDJQRVLVLQFDVHRIRYHU
VSHFLILHGSUREOHPV,QFDVHRIXQGHUVSHFLILHG
SUREOHPV'\PRODPDNHVDXWRPDWLFGHIDXOWVHOHFWLRQRI
LQLWLDOFRQGLWLRQV

The Modelica Association

'LVFUHWH3,FRQWUROOHU
ZKHQVDPSOH7VWKHQ
[G SUH[G7V7[UHI[
X N[G[UHI[
HQGZKHQ

13

Modelica 2002, March 18−19, 2002

Initialization of Hybrid Differential−Algebraic Eq...

Mattsson S.E., Elmqvist H., Otter M., and Olsson H.

7KHPRGHOVSHFLILHVDOOWKHLQLWLDOYDOXHVIRUWKHVWDWHV
H[SOLFLWO\7KHZKHQFODXVHLVQRWHQDEOHGDW
LQLWLDOL]DWLRQEXWLWLVUHSODFHGE\

[G SUH[G7V7[UHI[
X N[G[UHI[
GHU[ [X

9DULDQW6WHDG\VWDWHLQLWLDOL]DWLRQ

[G SUH[G
X SUHX

$VVXPHWKDWWKHV\VWHPLVWRVWDUWLQVWHDG\VWDWH)RU
FRQWLQXRXVWLPHVWDWH[LWPHDQVWKDWLWVGHULYDWLYH
VKDOOEH]HURGHU[ :KLOHIRUWKHGLVFUHWHVWDWH
[GLWPHDQVSUH[G [GDQGWKHZKHQFODXVHVKDOOEH
DFWLYHGXULQJLQLWLDOL]DWLRQ

7KHLQLWLDOL]DWLRQSUREOHPLVWKXV
[
SUH[G
SUHX
[G
X
GHU[

[VWDUW
[GVWDUW
XVWDUW
SUH[G
SUHX
[X








5HDO[VWDUW 
GLVFUHWH5HDO[G
GLVFUHWH5HDOX
5HPDLQLQJGHFODUDWLRQVDVLQ9DULDQW
HTXDWLRQ
3ODQWPRGHO
GHU[ [X

9DULDQW,QLWLDOYDOXHVDUHJLYHQH[SOLFLWO\DQGWKH
FRQWUROOHUHTXDWLRQVDUHXVHGGXULQJLQLWLDOL]DWLRQ,WLV
DV9DULDQWEXWWKHZKHQFODXVHLVHQDEOHG

'LVFUHWH3,'FRQWUROOHU
ZKHQ^LQLWLDOVDPSOH7V`WKHQ
[G SUH[G7V7[[UHI
X N[G[[UHI
HQGZKHQ

6DPHGHFODUDWLRQDVYDULDQW
HTXDWLRQ
GHU[ [X
ZKHQ^LQLWLDOVDPSOH7V`WKHQ
[G SUH[G7V7[UHI[
X N[G[UHI[
HQGZKHQ

LQLWLDOHTXDWLRQ
GHU[ 
SUH[G [G

,WPHDQVWKDWWKHZKHQFODXVHDSSHDUVDV

7KHLQLWLDOL]DWLRQSUREOHPEHFRPHV

[G SUH[G7V7[UHI[
X N[G[UHI[

GHU[ 
/LQHDUV\VWHPRIHTXDWLRQVLQWKH
XQNQRZQV[GSUH[GX[
SUH[G [G
[G SUH[G7V7[[UHI
X N[G[UHI[
GHU[ [X

LQWKHLQLWLDOL]DWLRQSUREOHPZKLFKEHFRPHV
[
SUH[G
SUHX
[G
X
GHU[

[VWDUW 
[GVWDUW 
XVWDUW 
SUH[G7V7[UHI[
N[G[UHI[
[X

6ROYLQJWKHV\VWHPRIHTXDWLRQVOHDGVWR
GHU[
[
X
[G
SUH[G

9DULDQW$V9DULDQWEXWLQLWLDOFRQGLWLRQVGHILQHG
E\LQLWLDOHTXDWLRQV
GLVFUHWH5HDO[G
GLVFUHWH5HDOX
5HPDLQLQJGHFODUDWLRQVDVLQYDULDQW
HTXDWLRQ
GHU[ [X
ZKHQ^LQLWLDOVDPSOH76`WKHQ
[G SUH[G7V7[UHI[
X N[G[UHI[
HQGZKHQ
LQLWLDOHTXDWLRQ
SUH[G 
SUHX 

&RQFOXVLRQV
7KLVSDSHUKDVGHVFULEHGDQGLOOXVWUDWHGKRZWKHQHZ
ODQJXDJHFRQVWUXFWVRI0RGHOLFDLQFRPELQDWLRQZLWK
0RGHOLFD
VRWKHUODQJXDJHHOHPHQWVDOORZYHU\IOH[LEOH
DQGSRZHUIXOLQLWLDOL]DWLRQFRQGLWLRQVWREHGHILQHG
'\PRODVXSSRUWV0RGHOLFD
VQHZZD\RIVSHFLI\LQJ
LQLWLDOFRQGLWLRQV7RVXSSRUWUHOLDEOHDQGUREXVW
LQLWLDOL]DWLRQ'\PRODPDQLSXODWHVV\PEROLFDOO\WKH
LQLWLDOL]DWLRQSUREOHPDQGJHQHUDWHVDQDO\WLF-DFRELDQV
IRUQRQOLQHDUVXESUREOHPV0RUHRYHUWKHVSHFLDO
DQDO\VLVRIWKHLQLWLDOL]DWLRQSUREOHPDOORZV'\PRODWR

OHDGVWRWKHIROORZLQJHTXDWLRQVGXULQJLQLWLDOL]DWLRQ
[ [VWDUW 
SUH[G 
SUHX 

Modelica 2002, March 18−19, 2002


[UHI
[UHI
[UHIN
[G

14

The Modelica Association

Mattsson S.E., Elmqvist H., Otter M., and Olsson H.

Initialization of Hybrid Differential−Algebraic Eq...

JLYHGLDJQRVLVDQGXVHUJXLGDQFHZKHQWKH
LQLWLDOL]DWLRQSUREOHPWXUQVRXWQRWWREHZHOOSRVHG

$FNQRZOHGJHPHQWV
7KLVZRUNZDVLQSDUWVVXSSRUWHGE\WKH(XURSHDQ
&RPPLVVLRQXQGHUFRQWUDFW,67ZLWK
'\QDVLP$%XQGHUWKH,QIRUPDWLRQ6RFLHWLHV
7HFKQRORJ\DVWKHSURMHFWHQWLWOHG5HDOWLPH
VLPXODWLRQIRUGHVLJQRIPXOWLSK\VLFVV\VWHPV

5HIHUHQFHV
>@'%UFN+(OPTYLVW6(0DWWVVRQ+2OVVRQ
'\PRODIRU0XOWL(QJLQHHULQJ0RGHOLQJDQG
6LPXODWLRQ3URFHHGLQJVRI0RGHOLFD0RGHOLFD
KRPHSDJHKWWSZZZ0RGHOLFDRUJ
>@'\PROD'\QDPLF0RGHOLQJ/DERUDWRU\'\QDVLP
$%/XQG6ZHGHQKWWSZZZ'\QDVLPVH
>@0RGHOLFD$XQLILHGREMHFWRULHQWHGODQJXDJHIRU
SK\VLFDOV\VWHPVPRGHOOLQJ/DQJXDJH6SHFLILFDWLRQ
9HUVLRQ0RGHOLFDKRPHSDJH
KWWSZZZ0RGHOLFDRUJ

The Modelica Association

15

Modelica 2002, March 18−19, 2002

Modelica 2002, March 18−19, 2002

16

The Modelica Association

Session 2

Applications and Tools

The Modelica Association

17

Modelica 2002, March 18−19, 2002

Modelica 2002, March 18−19, 2002

18

The Modelica Association

Tiller M., Tobler W.E., Ming Kuang

Evaluating Engine Contributions to HEV ...

Evaluating Engine Contributions to HEV Driveline
Vibrations
Michael Tiller, William E. Tobler and Ming Kuang
Ford Motor Company
makes a significant contribution to vibration perceived
by the driver.

Abstract
In order to comply with increasing consumer and
regulatory demand for improved fuel economy and
lower emissions, Ford Motor Company is developing a
Hybrid Electric Vehicle (HEV) version of the Escape
sport utility vehicle for production in 2003. Since
HEVs typically have several different operating modes
(e.g. electric launch, active neutral, regenerative
braking), an important concern is the fact that each of
these modes and the transitions between them lead to
minimal driver perceived vibrations. In order to
understand how the design and control of an HEV
influences what is "felt" by the driver, we need to build
models that accurately reproduce the dynamic response
of the powertrain. In this way, the response for a given
mechanical configuration and/or controller design can
be evaluated.

In order to understand the effects of powertrain design
and control on driver perceived vibrations, a detailed
thermodynamic model of an Atkinson cycle internal
combustion engine was developed and integrated with a
detailed model of a hybrid electric transmission. The
computational model was then validated against
experimental data and showed very close agreement.
With this validated dynamic model of the powertrain,
we analyzed the effect that changes in the mechanical
design of the powertrain had on the natural frequencies
of the vehicle, examined the effect that engine control
parameters (e.g. spark timing and valve timing) had on
powertrain response and created realistic Simulink plant
models which could be used to test different control
strategies.

A model targeted at prediction of driver perceived
vibration was developed and validated against
experimental data. However, one unexpected result of
this work was to demonstrate that we could take the
dynamic model used to reproduce the behavior
described previously and, by using some advanced
Modelica features, derive a second model that predicts
the system efficiency of the transmission without having
to create an entirely new model for that purpose. The
system efficiency model was also validated against
experimental data and showed very good agreement.
The result is that rather than spending time creating and
maintaining two different models (one for dynamic
response and one for system efficiency) we were able to
build one on the foundation of the other. Furthermore,
we determined it was possible to generate a single
model that could describe both types (i.e. dynamic and
steady-state) of responses by merely changing the
values of a few model parameters.

Physical Models
The focus of paper is on modeling the physical response
of the powertrain. Issues about control system design or
strategy are larger issues beyond the scope of this paper.
Nevertheless, a good physical model of the powertrain
can provide useful insights for both the hardware and
control system designers.
In particular, we are interested in predicting the
sensitivity of the powertrain response with respect to
component design parameters and actuator commands.
To preserve the effects of design parameters, it is
generally necessary to provide design-oriented models
built from first-principles based component models
rather than models derived from empirical relationships
or experimental data.
Our discussion of modeling efforts will start with some
general modeling issues and then present details of the
engine, transmission and vehicle models used in this
work.

Introduction
The idea of using computer-aided methods to evaluate
powertrain and vehicle NVH (i.e. noise, vibration and
harshness) is not new [1,2]. Furthermore, the use of
Modelica to model automotive systems is increasing
[3,4,5,6,7]. However, the contribution that the internal
combustion engine makes as a "forcing function" to a
powertrain system is not typically examined in detail
since the steady state operation of the engine is well
understood and sufficient for most applications. For
HEVs though, the engine starts and stops frequently,
both with the vehicle in motion and at rest, and this

The Modelica Association

Control Signals
Both the engine and transmission subsystems contain
components that require control signal inputs (e.g. spark
timing and motor torque). One interesting problem that
arises when actuator and sensor models are included is
the need to communicate these control signals into and
out of the physical model hierarchy. The difficulty is in
managing the propagation of these signals especially in
the context of replaceable components.

19

Modelica 2002, March 18−19, 2002

Evaluating Engine Contributions to HEV ...

Tiller M., Tobler W.E., Ming Kuang

For example, we may develop an HEV model that
includes an engine with certain control signals (e.g.
spark timing and injector timing). At some later point,
we may wish to create a variation of that model by
simply extending the original model and replacing the
engine with different engine model. The difficulty
comes when the new engine happens to have a different
set of control inputs (e.g. cam phasing). In order to
propagate these new signals, this could require the
model developer to add a whole new set of connectors
up and down the model hierarchy.

instantiated with the outer qualifier. The name of the
instance should be that of the master bus where the
signals ultimately reside. At the top-level, the master
bus type must contain (at least) the union of all
subsystem component buses and an inner instance
must be declared. An example of the definitions and
declarations required is shown in Figure 1.
The SignalBus idiom has the following advantages
over signals. First, it avoids the necessity to place
connectors at each level in the hierarchy. This is
important because every change in control signals can
potentially change the set of connectors and
connections, a situation that becomes difficult to
maintain. In addition, because the outer bus only has
to be a subtype of the matching inner bus, the
component models are only required to declare the
signals they are interested in. This avoids dealing with
complex combinatorial possibilities that result when all
signals are included in a single connector definition.
One disadvantage with SignalBus definitions is that
responsibility for assigning the control signals is not
clearly specified by the definition. Instead, this requires
some discipline and understanding of the idiom.

To avoid this situation, we use something in our
Modelica models that we call the SignalBus idiom.
In this approach, all the signals associated with each
subsystem are grouped onto a "master" bus (e.g.
eng_control_bus) at the top-level of the model.
The SignalBus idiom is useful because the
component models only need to be aware of the specific
signals they require and not all signals on the master
bus.
connector SignalBus
annotation(…);
end SignalBus;

Trying to decide on the best logical grouping for the
signals could be an involved task. Fortunately, there are
developing internal corporate standards or identifying
and grouping control signals and the SignalBus
idiom fits nicely into these emerging standards.

model FuelInjector
outer ControlBus eng_control_bus;
// …
protected
connector ControlBus
extends SignalBus;
Ford.Types.Degree inj_start;
Ford.Types.Degree inj_stop;
end ControlBus;
end FuelInjector;

Reaction Torques
One limitation of the current rotational mechanics
library in the Modelica Standard Library is the fact that
it neglects reaction torques on rotational components.
For example, consider the IdealGear model
definition shown in Figure 2. The problem with the
IdealGear model is that it contains the equation:

model FullVehicle
inner EngineMaster eng_control_bus;
Engine eng "has fuel injectors";
protected
connector EngineMaster
extends SignalBus;
Ford.Types.Degree inj_start;
Ford.Types.Degree inj_stop;
Ford.Types.Degree spark_adv;
end EngineMaster;
end FullVehicle;

Rτ a + τ b = 0
which, in general, results in the torques not summing to
zero for this component. Since the torques represent the
flow of angular momentum, angular momentum is not
conserved.
within Modelica.Mechanics.Rotational;
model IdealGear "without inertia"
parameter Real ratio "Gear ratio";
Interfaces.Flange_a flange_a;
Interfaces.Flange_b flange_b;
equation
flange_a.phi=ratio*flange_b.phi;
0=ratio*flange_a.tau+flange_b.tau;
end IdealGear;

Figure 1: Example of SignalBus Idiom
To implement the SignalBus idiom, we define an
empty connector with a specific graphical
annotation. Although not strictly necessary, it makes
the bus connectors very easy to identify in diagrams.
Next, inside each component requiring control signals
(e.g. a fuel injector), we declare a specific bus type for
that component (preferably in a protected section
to clearly indicate that this definition is for internal use).
The bus definition should include only the signals
required by the component. This bus can then be

Modelica 2002, March 18−19, 2002

Figure 2: Standard IdealGear Model
While for many applications the models in the Modelica
Standard Library are sufficient, it is necessary to include
an additional flange in applications where the entire

20

The Modelica Association

Tiller M., Tobler W.E., Ming Kuang

Evaluating Engine Contributions to HEV ...

geartrain assembly has the potential to rotate. For our
application, we are interested in the motion of the
transmission housing and engine block and as a result,
we must include a special flange on many of our
component models (e.g. electric motors, spur gears,
crank-slider mechanisms) to account for the reaction
torque which ultimately causes vibrations in the
powertrain casing. In most cases, it is necessary to
formulate the reaction torques by considering
conservation of momentum and conservation of energy.

Transmission Modeling
Using rotational components that account for the
necessary reaction torques, construction of transmission
models is straightforward.
Unlike our previous
transmission models which included hydraulic
subsystems [4], the only complex behavior in the hybrid
transmission is related to frictional elements and these
can all be captured using the components in the
Modelica Standard Library. In other words, no complex
models had to be developed in order to build a
reasonable model of the transmission.

Engine Modeling

To accurately predict the behavior of the hybrid
transmission, several effects must be considered. First,
a non-linear spring is connected to the input shaft of the
transmission to isolate the transmission from the highfrequency torque fluctuations produced by the engine.
In addition, the differential on the output side of the
transmission includes a single backlash used to
represent the backlash distributed throughout the
transmission.

One of the key features of the models developed for this
application is the ability to predict the torque generated
by the engine during startup and shutdown. In order to
predict this torque, it is necessary to model some of the
detailed thermodynamic processes of the engine (e.g.
breathing, compression, combustion). Fortunately, we
had already developed, prior to this application, a
library of thermodynamic components for the purpose
of studying engine behavior [6,8,9].

Vehicle Modeling
The vehicle response model is quite simple and neglects
effects due to tire and suspension compliance.
Currently, we treat the vehicle as a single mass
connected by a kinematic tire model. The only real
detail of the vehicle model is in the modeling of the
front halfshafts (our current model handles only the
front wheel drive configuration of the powertrain)
which are modeled as non-symmetric compliances
connecting the transmission to the wheels. In the future,
we plan on refining our model to include suspension,
tire and driveline details so that we are able to predict
driver seat accelerations due to powertrain vibrations. It
has been shown previously [4] that such large and
complex models can be expressed in Modelica and
simulated using Dymola.

Analyses
Dynamic Response

Figure 3: Combustion Chamber Processes

The dynamic response of the powertrain is due to the
various inertias (e.g. gears, shafts, flywheel) and
compliances (e.g. halfshafts and engine mounts)
distributed throughout the system. The compliances are
all modeled as linear with the exception of the isolation
element on the input shaft of the transmission which is
modeled as a piecewise linear spring. In addition to the
inertias and the compliances there are several non-linear
elements. While the transmission includes several
frictional elements, they are not involved during start
stop operation. Finally, as previously mentioned, all
backlash in the transmission is lumped at the differential
on the output shaft.
The dynamic response of the transmission can be
modeled in Dymola and as we shall see later in the
'Validation' section, the results show close agreement

The engine model uses the same geometry and valve
timing as the intended production engine to ensure that
the predicted torque fluctuations have the same
characteristics as the actual engine. To accomplish this,
the engine model was developed such that it could
reproduce effects due to throttle position, spark timing,
cam phasing, valve lift profiles, engine geometry and
injection timing during both startup and shutdown. This
involves modeling the behavior of manifold filling and
emptying, variable valve timing mechanisms,
combustion and the application of cranking torque.
Several of these behaviors are represented in the
combustion chamber schematic shown in Figure 3.

The Modelica Association

21

Modelica 2002, March 18−19, 2002

Evaluating Engine Contributions to HEV ...

Tiller M., Tobler W.E., Ming Kuang

with experimental results. Because of the simplicity of
our current vehicle model, the results we focus on are
the halfshaft torque trajectories. However, interpreting
the time domain results by inspection of the trajectories
is not a very good way of establishing the "quality" of
the startup or shutdown operation. Instead, we use a
signal processing algorithm which reduces the time
domain trajectories down to a scalar value. Using this
information, we can then generate plots of the startup
and shutdown quality as a function of spark timing, cam
phasing, etc. While we are not in a position to discuss
the results of such analyses, they have proved quite
useful in identifying what factors contribute to
powertrain vibrations.

We created the RigidBypass model shown in Figure
4. Placing an instance of this model in parallel with all
our compliances allowed us, just by changing the value
of the rigid parameter, to eliminate completely all
compliance in the model.
Another important difference between the dynamic and
steady-state response models is how they were used.
The dynamic response model was used in the context of
a vehicle simulation where the vehicle moves in
response to the output torque of the transmission. On
the other hand, the steady-state response model was
used to reproduce the results of experiments conducted
on a powertrain dynamometer where the speeds of
various elements were fixed. To analyze our model we
had to place the transmission on a virtual powertrain
dynamometer. Once again, the experimental and model
results showed good agreement.

Steady-State Response
One of the unexpected results of this work was to
demonstrate that additional types of analyses could be
performed using the model initially developed for
studying dynamic powertrain response. Once we had
established our ability to predict dynamic response of
the powertrain, we were asked whether we could apply
our model to understanding some experimental
efficiency data taken on a powertrain dynamometer.
The experimental results had shown what appeared to
be anomalous data points during the testing and the
question was whether the model could explain these
anomalies.

model RigidBypass
import Modelica.Mechanics.Rotational;
parameter Boolean rigid;
Rotational.Interfaces.Flange_a a;
Rotational.Interfaces.Flange_b b;
equation
if rigid then
a.tau + b.tau = 0;
a.phi = b.phi;
else
a.tau = 0;
b.tau = 0;
end if;
end RigidBypass;

To study the problem, we went back to our dynamic
response model and made all the geartrains in the
transmission replaceable. We then created a new
transmission model for studying steady-state efficiency
issues by extending our dynamic model and redeclaring
all the geartrains so that steady-state efficiency data for
each geartrain could be provided to the model. In other
words, we took our original dynamic model and
redeclared all the gears to include more detailed gear
models necessary for studying steady-state efficiency.

Figure 4: RigidBypass Model

Frequency response
Another type of analysis that we could do quite easily
with these models was to study the frequency response
of the powertrain. With this capability, we could then
study the effect that different design and control
changes had on the poles of the system.

In addition to redeclaring some of the components,
several additional modifications were required.
However, none of these modifications required changes
to the original model but could instead be accomplished
via the modification semantics in Modelica and by the
addition of some new components.
The first
modification was to add some slight parasitic losses for
some of the frictional elements. These losses could be
introduced through modifications to the parameters in
the original model. The other big change for the steadystate response was to eliminate the compliances since
they only play a role in the dynamic response of the
powertrain.

Pole-Zero Map
150

100

Imag Axis

50

-50

-100

Thankfully, eliminating the compliances did not require
crude methods like making the stiffness of the elements
extremely large. This would not have eliminated the
dynamics but would have just shifted the natural
frequencies until they were extremely high. Instead, we
employed a technique which is quite easy in Modelica.

Modelica 2002, March 18−19, 2002

0

-150
-45

-40

-35

-30

-25
Real Axis

-20

-15

-10

-5

0

Figure 5: Design Dependence of Poles
To perform this analysis we used the "Linearize" and
scripting functionality in Dymola [10] to generate a

22

The Modelica Association

Tiller M., Tobler W.E., Ming Kuang

Evaluating Engine Contributions to HEV ...

linear time invariant system of equations for several
different sets of design parameters. To do this properly,
we needed to find a state where the backlash was taken
up and the engine isolation spring was in the appropriate
behavioral regime. We could then use the "ltiviewer"
functionality in MATLAB [11] to visualize the poles
and zeros and to study how the poles moved in response
to changes in hardware or controller design. Figure 5
shows one example of how the poles are visualized.

Halfshaft Torque Comparison
Torque [N.m]

200

100

0
-100

-200

-200
-200

-400
2.2

-300
2.4

2.6

2.8

3

3.2

-400
15.8

200

Torque [N.m]

200

0
0

16

16.2 16.4 16.6

28.8

100

29

29.2 29.4 29.6

100

0

0

0
-100
-200

-100

-200
-200
-300

-400
2

2.2

2.4

2.6

15.4 15.6 15.8

Torque [N.m]

100

Validation

16

16.2

100

0

-300
28.5

29

29.5

200

0
0

-100

-100

-200

-200
-200

-300
-300
2.2

2.4

2.6

2.8

Dynamic Response

-400
15.4

Time [sec]

15.6

15.8

Time [sec]

16

28.6

28.8

29

Time [sec]

Figure 7: Validation of Dynamic Driveline Response

To validate the dynamic response of the powertrain, we
used experimental data collected from vehicle tests
conducted on our test track. The experiments involved
starting the engine and looking at the resulting engine
speed and halfshaft torque trajectories. The tests
themselves were conducted with a closed loop
controller. For our validation, we extracted the actuator
signals used in the test and applied them in an open loop
fashion to our model. The vehicle testing consisted of
27 different experiments involving 9 different controller
strategies.

Steady-State Response
The steady-state response of the transmission was also
validated by comparison to experimental data.
However, the steady-state response is based on
powertrain dynamometer data. Again, we saw good
agreement between our model and the experimental data
taken over a range of different operating conditions.
Figure 8 shows a comparison between the experimental
data (black bars) compared with the model predicted
efficiency (red stars). The important thing to note in
this data is how well the model predicts the
conspicuously low efficiency present in some of the
tests.

Figure 6 shows a comparison between the engine speed
measured during the testing (dotted green line) and what
the model predicts (blue line) based on the same
actuator commands. The effects of the first few
compression strokes can be seen as distinct bumps in
the engine speed profiles.
Eng. Speed [RPM]

Simulation vs. Experiment
1500

1000

1000

1000

500

500

500

0

Model
Experiment

0
3

3.5

Eng. Speed [RPM]

1500

-500
15.8

16

16.2

16.4

28.8

1500

29

29.2

29.4

1500

1000
1000

1000
500

500

500
0

0

-500
1.8

Eng. Speed [RPM]

0

-500
2.5

2

2.2

2.4

2.6

0
15.4 15.6 15.8

1500

1500

1000

1000

500

500

16

16.2

28.6

28.8

29

29.2

1000

500

0

0
2.4

2.6

2.8

3

Time [sec]

Figure 8: Validation of Steady-State Efficiency

0
15.4

15.6

15.8

Time [sec]

16

28.6

28.8

29

Time [sec]

Conclusions

Figure 6: Validation of Dynamic Engine Response

There are several important points to be made about this
modeling project. The models described in this paper
were constructed from data about the individual
components that appear in the model. Whenever such
data was available, we used it. The only exception was
a slight modification to the crankshaft inertia to
demonstrate better agreement in engine speed
trajectories. For component data that is not easily
obtained or measured (e.g. damping ratios), we started
by using "rule of thumb" numbers (which showed
reasonable agreement) and then we made some small

Similarly, Figure 7 shows a comparison (during the
same experiments) of the halfshaft torque predicted by
the model compared to the halfshaft torque measured in
the experiment. The halfshaft torque results are
sensitive to the initial crankshaft position and the initial
gap in the backlash.

The Modelica Association

23

Modelica 2002, March 18−19, 2002

Evaluating Engine Contributions to HEV ...

Tiller M., Tobler W.E., Ming Kuang

adjustments, within reasonable limits, to calibrate those
parameters so that we could achieve the agreement
shown in the validation figures.
Another important point to make is the flexibility and
reusability that is inherent in Modelica models. This is
evidenced by our ability to do component level and
powertrain level validation studies, the flexibility of
using the models in different contexts (i.e. with different
causalities) and the ability to reuse the dynamic models
to reproduce steady-state response characteristics. This
flexibility combined with the efficient code generation
and solution methods in Dymola ensured that the model
development and analysis process was able to provide
accurate answers in a timely manner.

References
1.

M. C. Tsangarides, W. E. Tobler and C. R.
Heermann, "Interactive Computer Simulation
of Drivetrain Dynamics", SAE 850978,
Surface Vehicle Noise and Vibration
Conference Proceedings.
2. M. C. Tsangarides and W. E. Tobler,
"Dynamic Behavior of a Torque Converter
with Centrifugal Bypass Clutch", SAE 850461,
Surface Vehicle Noise and Vibration
Conference Proceedings.
3. M. Otter, M. Dempsey and C. Schlegel,
"Package PowerTrain. A Modelica library for
modeling and simulation of vehicle power
trains", Modelica Workshop 2000 Proceedings,
pp. 23-32.
4. M. Tiller, P. Bowles, H. Elmqvist, D. Brück, S.
E. Mattson, A. Möller, H. Olsson and M. Otter,
"Detailed Vehicle Powertrain Modeling in
Modelica", Modelica Workshop 2000
Proceedings, pp. 169-178.
5. M. Tiller, "Introduction to Physical Modeling
with Modelica", Kluwer Academic Publishers,
ISBN 0-7923-7367-7
6. C. Newman, J. Batteh and M. Tiller, "SparkIgnited Engine Cycle Simulation in Modelica",
Second International Modelica Conference
Proceedings.
7. C. Puchalsky, T. Megli, M. Tiller, E. Curtis, N.
Trask, Y. Wang, "Modelica Applications for
Camless Valvetrain Development", Second
International Modelica Conference
Proceedings.
8. H. Tummescheit, M. Tiller, "Modellierung von
Ottomotoren", Objektorientierte Modellierung
Physikalischer, Teil 17.
9. M. Tiller, H. Tummescheit, C. Davis, N.
Trigui, "Powertrain Modeling with Modelica",
ASME 2000 Congress Proceedings.
10. H. Elmqvist, D. Brück, S. E. Mattsson, H.
Olsson and M. Otter, "Dymola User's Guide,
version 4.2a", Dynasim AB, Sweden
11. "MATLAB Release 12" (documentation), The
MathWorks, Inc., Natick, MA.

Modelica 2002, March 18−19, 2002

24

The Modelica Association

Clauß C., Beater P.

Multidomain Systems: Electronic, Hydraulic, and Mechanical Subsystems ...

Multidomain Systems: Electronic, Hydraulic, and
Mechanical Subsystems of an Universal Testing Machine
Modeled with Modelica
Christoph Clauß
Christoph.Clauss@eas.iis.fhg.de
Fraunhofer-Institut für Integrierte Schaltungen, Außenstelle Entwurfsautomatisierung
Zeunerstraße 38, 01069 Dresden, Germany
Peter Beater
Beater@mailso.uni-paderborn.de
Universität-GH Paderborn, Abt. Soest
Lübecker Ring 2, 59494 Soest, Germany

Often problems arise if technical systems cover more
than one established discipline, e.g. in microsystems
engineering. The two fundamental ways out are coupling of simulators, and compact modeling for one
simulator.

Abstract
The Simulation of hydraulic or electronic systems has
been state of the art for a long time. For both of these
domains there exist highly specialized simulation programs which can be regarded as a kind of industrial
standards. Often problems arise if different domains of
technology occur within one system and very detailed
models are needed.

From the very beginning the Modelica language is designed for covering several technical disciplines [2],
[3], [4]. Complex systems can be modeled with one
language to get one model. The further processing
within the Dymola simulator results in one methematical model, typically a differential algebraic equation,
which is solved by one simulation core. The challenge
of the Modelica approach is to show that its efficiency
is not much less than the efficiency of domain specific
tools. To offer evidence of this is surely a long process.
In this paper the multidomain example of a universal
testing machine is presented. It demonstrates that the
unified multidiscipline simulation tool Modelica/Dymola meets the challenge quite well.

As an example a universal testing machine is presented
which consists of hydraulic, mechanical, and electronic
component systems. Each component is modeled fully
detailed using the Modelica language [1]. Without
coupling of simulators the whole simulation model can
be investigated by one tool.

1

Introduction

The engineer of today is used to powerful simulation
tools. Within the last fourty years these tools mutated
from simple solvers of differential equations to computer-aided design software for technical systems. Tools
like HSPICE in electronics, ADAMS in mechanics, or
HOPSAN in Hydraulics are highly specified to meet
the needs of the discipline. These tools “know“ the domain-intern pecularities. Often the models and the
simulation algorithms are closely related. Therefore,
these tools are very advatageous in simulation, modelling, and postprocessing.

The Modelica Association

At first the physical device is presented with emphasizing the hydraulic and electronic parts. The Modelica
model is shortly described, and simulation results are
discussed. It is shown that numerical problems could
be solved, and the performance can be accepted.

2

The Universal Testing Machine

Fig. 1 shows the universal testing machine. It is a simple mechanical construction of a one-sided working
Plunger cylinder and a hydraulic unit on the left side in
the picture. The hydraulic unit consists of a small AC
motor, a variable displacement pump, and a pressure
limiting valve.

25

Modelica 2002, March 18−19, 2002

Multidomain Systems: Electronic, Hydraulic, and Mechanical Subsystems ...

3

Clauß C., Beater P.

The Hydraulic and Mechanical
Parts

After preliminary work using the analogue computer in
the fifties the simulation of hydraulic systems became
important in the eighties. Graphical user interfaces
were added in the nineties [6]. Using Modelica and its
libraries it is easy to model hydraulic or mechanical
systems [7]. The user needs not absolutely know the
details of component modeling. If nevertheless details
are essential the source code of the models is available.
Using HyLib models the hydraulic circuit according to
fig. 2 could be modeled. Since the pump is driven via a
V belt transmission parts of the standard Modelica mechanics library are used to built the model according to
fig. 3. A further mechanical component is the model of
the specimen which is a linear spring.

Figure 1: Universal testing machine

This kind of machines is used for tensile tests of a rod
to detemine e.g. the tensile strength, which is a material
property. The resulting quasi-static stress-strain diagram describes how the material reacts under a
continuously increasing load. Often the load is necessary to be regarded not as static but as periodic. In these
cases the testing method has to be modified to get pulsating forces. A simple modification is like this: Within
the hydraulic circuit an electro-hydraulic proportional
valve of high quality is inluded as a by-pass to the cylinder. This valve is controlled using a sine-wave
generator as reference input and a PI-controller. The
machine is described in more detail in [5].

Figure 3: Model of oil source
To enable dynamic testing an electro-hydraulic valve is
used as a by-pass to the cylinder. In more detail the hydraulic and mechanical parts are described in [8], [5].

4

The Electronic Part

Since 1975 SPICE [9] is available for the simulation of
electronic and especially for microelectronic circuits.
Later on, powerful circuit simulators with graphical
and textual input possibilities were designed on SPICE.
For electronic devices very comprehensive models are
available which sometimes are based on semiconductor technology parameters.
In the electrical analog Modelica library [10] the most
often used electrical components are collected which
are easy to understand and of a wide interest. Although
the SPICE semiconductor devices are still missing it is
possible to model rather complicated electrical circuits.

Figure 2: Hydraulic circuit of the testing machine

The task of the simulation is the investigation of the
modifications before they are aplied. E.g. the characteristic parameters of the valve and the electronic
controller have to be determined.

Modelica 2002, March 18−19, 2002

26

The Modelica Association

Clauß C., Beater P.

Multidomain Systems: Electronic, Hydraulic, and Mechanical Subsystems ...

The bipolar transistors are modelled in the most simple
way according to the Ebers-Moll-approach [13], [14].
The circuit structure (fig. 5) shows the components

The electronic part of the testing machine is a PID-controlling device [11], which amplifies (proportional),
integrates, and differentiates the input signal. The circuit scheme can be seen in fig. 4.
Cd

R2

Ci

C=1

R=1

C=1

Amplifier

R1
R=1

Vin

Gnd1

Figure 5: Ebers-Moll transport model

Vout

Gnd2

which are nonlinear ones. Since the currents of the nonlinear sources depend on the diode currents the
transistors are modelled using a behavioural description instead of a structural one. Both the diodes and the
capacitors use exponential growing functions. Because
of numerical reasons these functions are linearized, if
their results grow extremely.

Gnd3

Figure 4: PID circuit
By chosing the resistances and capacitances according
to

The characteristic of an NPN transistor is shown in
fig. 6. The collector current is growing exponentially if
the base-emitter-voltage exceeds a certain value. In detail the characteristic depends on 16 parameters which
are explained in the Modelica Standard Library.

C
R
1
P = -----2- + ------D-, I = ------------, D = C D R 2
R1 CI
CI R1
the controlling parameters P, I, and D can be adjusted.

ò

V out = PV in + I V dt + D
in

dV in
dt

The operational amplifier was modeled on different abstract levels. On the transistor level the well-known
µA741 [12] was used which is modeled using bipolar
transistors (14 NPN, 7 PNP) of the Modelica standard
library.
The numbers of the values of currents in the electronic
part are orders of magnitude smaller than the numbers
of values in the hydraulic part. Small capacitances in
the transistors cause very short transient responses.
Therefore the mathematical model becomes stiff,
which is a challenge for the simulation system.

Figure 6: NPN characteristic

5

The Modelica Model

The simulation model of the controlled universal testing machine is shown in fig. 7. The mechanical and
electronic models are from the Modelica Standard Library [1], the hydraulic models from the HyLib [7].
Unfortunately, the µA741 operates in a very small voltage range. Otherwise it runs into saturation. To avoid
saturation effects, both the input signal and the output
signal of the controller are transformed using the Gain
model of the Modelica standard blocks library. The

The Modelica Association

27

Modelica 2002, March 18−19, 2002

Multidomain Systems: Electronic, Hydraulic, and Mechanical Subsystems ...

Clauß C., Beater P.

10 seconds in the steady state. Several simulations with
parameter variations were necessary. As a result the
nominal valve value and parameters of the controller
could be chosen. Both the maximum excitation frequency and the maximum force reachable could be
calculated. Measurements which were done afterwards
at the real machine confirmed this choice of parameters. In the following pictures the behaviour of some
variables is shown.

Gain model simply multiplies the signal by a constant
factor. The input signal is multiplied by 4.0e-7, the output signal by 0.1.
The electronic library uses the pin definition:
connector Pin
SIunits.Voltage v;
flow SIunits.Current i ;
end Pin;

For the block library the port definition is (the OutPort
definition is quite similar):
connector InPort
parameter Integer n=1;
replaceable type SignalType=Real;
input SignalType signal[n];
end InPort;

When electronics is coupled with block library elements these connector definitions hit each other. Since
the voltage carries the information which is relevant for
the signal processing the voltage is mapped on the signal value. This is simply done using the elements
SignalVoltage, which converts an InPort signal value
into an electrical voltage, and the VoltageSensor, which
does it vice versa.

6

Figure 8: Force acting on the specimen

Results

With Dymola version 4.1a [15] the model of the universal testing machine was composed graphically,
analyzed, translated into executable code, and
simulated.
The simulations started at the quiescent state (all voltages are zero, the hydraulic pressures are equal to the
environment pressure) at time zero and finished after

Figure 9: Valve input signal

Figure 7: Object diagram of the complete simulation model

Modelica 2002, March 18−19, 2002

28

The Modelica Association

Clauß C., Beater P.

Multidomain Systems: Electronic, Hydraulic, and Mechanical Subsystems ...

The eigenvalues of the linearized system differ exceptionally: the smallest is about -4.7361e+11, the largest
about -1.9441e-5. Therefore, the system is extremely
stiff.
The CPU time needed depends on the tolerance of the
numerical solver. If the tolerance is 1.e-7 and 1000 output intervals are specified then on a Pentium III (533
MHz) it takes the translation and linking 23 s, and the
simulation 232 s. Most of the simulation time is used
for leaving the quiescent state. If the stop time is 20 s
the CPU time needed is only 4 s higher.
Important for an effective simulation is the optimal
choice of the tolerance of the numerical solver. In the
following table the statistic is compared at different tolerances for a stop time of 10 seconds and 1000 output
intervals, regarding the number of successful steps, the
number of F-evaluations, and the number of step
events:

Figure 10: Pressure in the chamber

Number of
Tolerance

succ. steps

F-evaluations

state events

1.0e-5

-

-

-

5.0e-6

5561

253025

104

1.0e-6

6160

215790

106

1.0e-7

9821

266447

516

2.0e-8

16774

390555

145

1.2e-8

26368

938770

1509

Figure 11: Base current into transistor q5
At first the Dymola tool establishes the total differential algebraic system. A symbolic calculation step
reduces the number of variables/equations before the
integation starts.

If the tolerance is 1.e-5 the simulation time progress is
very small. This table shows that the performance
slows down if small tolerances are used. But it also
slows down if tolerances are too large. Therefore, an
optimal tolerance exists which is at about 1.e-6. In contrast with this behaviour at the block model the
computational work for the block model does not increase if the tolerance becomes larger.

In the following considerations the model without electronics but with a PI-controller of the block library is
used for comparisons. It will be called block model,
whereas the detailed model described above will be
called detailed model.
The following table compares the number of variables/
equations before and after the symbolic reduction.

Consequently, the CPU times depend on the tolerance
chosen. If the optimal tolereance 1.e-6 is used the CPU
time of the total model is as high as the CPU time of the
block model at the same tolerance. With other tolerances the CPU time of the total model is of course higher.

Number of variables/equations
before reduction

after reduction

detailed model

1031

487

block model

309

137

These results show that in multidomain examples also
the difficulties of each domain come together and react
together. This point of view will have to be investigated
more thoroughly.

Characteristical are the very different ranges of the variables. This is illustrated by the above shown pictures
fig. 8 to fig. 11.

The Modelica Association

29

Modelica 2002, March 18−19, 2002

Multidomain Systems: Electronic, Hydraulic, and Mechanical Subsystems ...

7

[7]

Conclusion

[8]

A rather complicated multidomain example could be
modeled and simulated in an easy way without simulator coupling. Within reasonable computing times
several problems of design specifications could be
solved. More than thousands of variables can be handled. Both extremly stiffness and very different ranges
of variables are possible.

[9]

To encourage more detailled and more easy modeling
the following improvements are suggested:
• Further physical components with multidomain
aspects should be offered in the Modelica standard
library
• For electronic devices the support of SPICE
netlists and SPICE models is necessary

[10]

[11]

[12]

To get more insight in the multidomain simulation with
regard to both modeling and numerical aspects much
more complex examples are desirable.

[13]
[14]

8

Acknowledgements
[15]

The Soest part of this work was supported by the Ministerium für Schule, Wissenschaft und Forschung of
Nordrhein-Westfalen, Germany, under grant Interdisziplinäres Praktikum in Ingenieurstudiengängen.
The FhG part of this research was funded by the Deutsche Forschungsgemeinschaft (DFG) within the SFB
358 Automated System Design.

9

References

[1]

Modelica Language Specification 1.4.
www.Modelica.org
Elmqvist, H.: A Structured Model Language
for Large Continuous Systems. PhD-Thesis
Lund Institute of Technology, Lund, Sweden,
1978
Larsson, M.: ObjectStab - A Modelica Library
for Power System Stability Studies. Lund,
Modelica Workshop 2000, 13-22
Tummescheidt, H.: Development of a Modelica
Base Library for Modeling of Thermo-hydraulic Systems, Lund, Modelica Workshop 2000,
41-52
Beater, P.: Modeling and Didital Simulation of
Hyudraulic Systems in Design and Engineering
Education using Modelica and HyLib. Lund,
Modelica Workshop 2000, 33-40
Beater, P.: Über 4 Jahrzehnte Simulation in der
Hydraulik. O+P Ölhydraulik und Pneumatik 43
(1999)2, 107-111

[2]

[3]

[4]

[5]

[6]

Modelica 2002, March 18−19, 2002

30

Clauß C., Beater P.

HyLib. Library of Hyfraulic Components.
www.Hylib.com
Beater, P.: Entwurf hydraulischer Maschinen Modellbildung, Stabilitätsanalyse und Simulation hydrostatischer Antriebe und Steuerungen. Berlin, Heidelberg, NewYork, SpringerVerlag, 1999
Johnson, B.; Quarles, T.; Newton, A.R.; Pederson, D.O.; Sangiovanni-Vincentelli, A.:SPICE3
Version 3e, User’s Manual., Univ. of California, Berkeley, Ca., 94720, 1991
Clauß, Chr.; Leitner, Th.;Schneider, A.;
Schwarz, P.: Modelling of electronic circuits
with Modelica. Lund, Modelica Workshop
2000, 3-11
Tietze, U.; Schenk, Ch.: Halbleiter-Schaltungselektronik. Berlin, Heidelberg, New York,
Springer-Verlag, 1980
Herpy, M.: Analoge integrierte Schaltungen.
Akadémiai Kiadó. Budapest 1976
Ebers, J.J.; Moll, J.L.: Proc. IRE 42 (1954)
1761-1772
Horneber, E.-H.: Simulation elektrischer
Schaltungen auf dem Rechner. Berlin, Heidelberg, New York, Tokyo, Springer-Verlag 1985
Dymola: www.Dynasim.se

The Modelica Association

Tummescheit H., Eborn J.

Chemical Reaction Modeling with ThermoFluid/MF and MultiFlash

Chemical Reaction Modeling with
ThermoFluid/MF and MultiFlash
Hubertus Tummescheit† and Jonas Eborn‡
† Department

‡ United

of Automatic Control
Lund University, Sweden
hubertus@control.lth.se

Technologies Research Center
East Hartford, Connecticut, USA
EbornJP@utrc.utc.com

Abstract
The free Modelica library T HERMO F LUID (see [2]
and [11]) was developed for simulation of thermohydraulic applications, both for single-species applications like the water-steam cycle in a thermal power
plant and for multi-species applications with gas mixtures. It has demonstrated its flexibility for modeling thermodynamic and process applications in a variety of industrial and academic projects, see [10], [3]
and [7]. This article describes how support for chemical reactions and membrane diffusion has been added
to T HERMO F LUID , thus expanding the area of possible applications to include reacting flows, chemical batch reactors, catalytic converters, etc. Another
crucial part of the modeling work has to be spent on
getting physical property data of sufficient accuracy
and with acceptable computational complexity for engineering purposes into the model. This has been
adressed in the development of a commercial interface to the industry-standard physical property package MultiFlash. The new Modelica library T HER MO F LUID /MF provides the modeler with two toolboxes. Firstly, a low-level Modelica function interface
to MultiFlash. MultiFlash consists of a core of physical property calculation routines and a basic database
of the most comman chemical components and a number of add-on property databases. The interface gives
access to multi-component, multi-phase property calculations including gas, several liquid and condensed
phases, wax formations and hydrates. Secondly, a
high-level Modelica model library which is fully integrated with the T HERMO F LUID library and implements robust and efficient dynamical models for the
most common process engineering equipment. In addition, reliable crossing functions for detecting phase
boundaries in multi-phase, multi-component mixtures

The Modelica Association

31

have been implemented for the first time in a highlevel modeling language. The crossing functions make
it possible to simulate processes correctly even at offdesign operating points and under start-up conditions.
A flash volume may in such cases be filled with only
liquid or only gas. Crossing functions for phase transitions ensure high performance simulation even in these
cases.

1

Flexible handling of chemical reactions

In standard chemical textbooks, reactions are treated
as source terms in component concentration balances:
dci
dt

cin
i


cout
i

(1)

ri


where ri are the component reaction rates, given by
a kinetic expression. In a more general way, we can
include the reaction terms in the component mass balance and total energy balance
dMi
dt
dU
dt

ṁin
i
q̇in




ṁout
i
q̇out

rZi MWi




nc



∑ rZi

i 1

f



Hi

(2)
(3)



where rZ are reaction rates in moles/s, q̇ is convective
heat flow, ṁ mass flow and H f is component enthalpy
of formation.

1.1

ThermoFluid balance equations

In T HERMO F LUID, the general balance equations are implemented in the package BaseClasses.Balances. The basic balance equations
should not be modified by the average user and thus

Modelica 2002, March 18−19, 2002

Chemical Reaction Modeling with ThermoFluid/MF and MultiFlash

Tummescheit H., Eborn J.

they need to be attached to an object inside the volume model. This is the HeatAndMassObject,see
Figure 1, which acts as a gateway between the balance equations and possible heat- and mass transfer
objects. External connectors can also be connected to
the HeatAndMassObject.
Interfaces
The HeatAndMassObject interact with other objects through a number of different connectors. The
currently implemented connectors include the HeatFlow connector for pure heat interaction (conduction/radiation), the ChemFlow connector for chemical reactions, both kinetic and equilibrium, and a connector for membrane diffusion.
Figure 1: Schematic of the HeatAndMassObject with
heat interaction and reaction objects (no diffusion connector present).

connector HeatFlow
parameter Integer
Temperature[n]
flow Power[n]
end HeatFlow;

n;
T;
q;

need to be general enough to handle all cases from an
connector ChemFlow
isolated gas volume to a reactor with added mass- and
parameter Integer
heat transfer laws. The model structure has to provide
parameter String
the option to add any kind of heat- and mass transfer
Temperature[n]
interaction with the control volume later, as an add-on
Pressure[n]
Concentration[n,nc]
component. The basic balance equation of a control
flow MolarFlowRate[n,nc]
volume with two connectors is implemented as
flow Power[n]
end ChemFlow

dM_x = a.mdot_x + b.mdot_x + rM;
dU
= a.q_conv + b.q_conv + Q_s;

n, nc;
MediumType;
T;
p;
conc;
rZ;
q;

The diffusion connector is similar to the ChemFlow
connector but has mass flow rate instead of molar flow
rate since this is standard for diffusion.
The flow semantics of Modelica for the molar flow rZ
and the heat flow q make sure that all contributions
to the mass- and energy balances are correctly taken
into account, no matter whether there are zero, one
or many connections to the HeatAndMassObject, see
Figure 1. Inside the HeatAndMassObject the contributions from the different connectors are summed
1.2 The HeatAndMassObject, a gateway to
up and transferred to the balance equations in the volthe balances
ume.
The contradiction of leaving the option open to specify production terms but not having to add a default 1.3 Objects for encapsulating reactions
value of zero can be handled with open flow connectors. In Modelica, all quantities which are flows are To be able to drag and drop reaction models into a volmarked with the flow-prefix. Flow variables obey ume model (a reactor), they are encapsulated in reacthe zero-sum rule (Kirchhoffs’ current law) and have tion objects. As shown in the code example below, the
in unconnected connectors a zero default value. Since Basic reaction inherits interfaces and basic paramethese connectors should be internal to the volume, ters from the reaction BaseObject.

This means that rM and Q_s, corresponding to the
source terms in (3) should be unspecified in the general base class, and then specified at a later stage when
the balance class is reused in the model of a specific
component. When there are no reactions or heat interaction with the volume there is no need for any source
terms. In this case the model should provide a default
value of zero production.

Modelica 2002, March 18−19, 2002

32

The Modelica Association

Tummescheit H., Eborn J.

Chemical Reaction Modeling with ThermoFluid/MF and MultiFlash

package Reactions
partial model BaseObject
parameter Integer
n, nc, nr;
MolarReactionRate[n,nr] reacRate;
Enthalpy[nc]
compHf;
parameter StoichiometricNumber[nr,nc]
stoich=zeros(nr,nc);
equation
for i in 1:n loop
r.rZ[i,:] =
transpose(stoich)*reacRate[i,:];
end for;
end BaseObject;
model Basic "Simple Arrhenius reaction"
extends BaseObject;
parameter Rate[nr]
A0;
parameter Real[nr]
b;
parameter MolarInternalEnergy[nr] Ea;
Concentration[n,nc]
conc;
equation
for i in 1:n loop
reacRate[i,:] = ...;
r.q[i] = -compHf*r.rZ[i,:];
end for;
end Basic;

Figure 2: Schematic of example system with H2 –O2
reaction.
built and reactions can graphically be added to standard reactor models.

1.4

Example, combustion of hydrogen

As an example, we consider the combustion of hydrogen and oxygen into water. In a simple setting, see
Figure 2, the system consists of a reservoir supplying
the reactants, a reactor volume and a sink for the product flow. A heat source is added to provide the heat
necessary to ignite the mixture.
The complete set of sub-reactions for this process involves a large number ( 40) of very fast reactions,
see [12]. Here we only consider the 8 main reactions,
involving the components O2 , H2 , H2 O, O , H , OH,
Ar . Argon is included as an inert gas. The included
reactions are listed in Table 1. The corresponding stoichiometry matrix and reaction rate parameters have
been coded into a Basic reaction object inside the
GasCV reaction vessel.
The result plots show clearly that the reactions are extremely fast once they started. They saturate when
all H2 is burned up and the flow through the volume
reaches steady state. The mass flows in Figure 3 show
a violent explosion when the mixture ignites. After the


end Reactions;



The reaction rates are calculated from standard Arrhenius expressions using the concentrations and the parameters. To use the reaction component, like in the
kinetic reaction in Figure 1, the user simply needs to
specify the parameters. The stoichiometry matrix is
constructed as shown in Table 1 and the heat of formation parameters are added from the medium model.
To construct models of other types of reactions the reaction BaseObject can be reused. The customized
reaction model needs to give expressions for the reaction rates, either by adding equations or by calling a
rate function. In this way packages of reactions can be



2.5

outflow
inflow

2

O2 H2 H2 O O H OH Ar

H
OH
O
H2 O
H2
H2 O
2H
2O
















O2
O
H2
H
OH
O
Ar
Ar

OH O
H O2
OH H
H2 OH
H2 O H
2 OH
H2 Ar
O2 Ar






















































1
1
0
0
0
0
0
1




0
0
1
1
1
0
1
0




0
0
0
1
1
1
0
0








1
1
1
0
0
1
0
2






1
1
1
1
1
0
2
0




1
1
1
1
1
2
0
0

0
0
0
0
0
0
0
0

Massflow [kg/s]

1.5




	









1
0.5
0

−0.5







−1



−1.5




−2
−2.5


0

1

2

Time [s]

3

4

5
−3

x 10

Table 1: Reactions included in the H2 O2 reaction sys- Figure 3: Mass flows into and out of the control voltem and the corresponding stoichiometric matrix.
ume during the ignition phase

The Modelica Association

33

Modelica 2002, March 18−19, 2002

Chemical Reaction Modeling with ThermoFluid/MF and MultiFlash

1

Molefraction [1]

mole fraction of O2

0.5

mole fraction of H20

mole fraction of H2
0

0

1

2

3

Time [s]

4

5
−3

x 10

Figure 4: Molar fractions of the principal reactants and
products
initial ignition, a steady inflow of premixed gases leads
to a steady combustion with plenty of surplus oxygen.
The speed of the reactions makes the system very stiff.
The whole simulation shown in Figures 4-3 spans only
a few milliseconds.

2

MultiFlash is the generic name for a physical property software from Infochem Ltd. It is a comprehensive system that calculates the thermophysical properties of pure substances and mixtures and carries out
phase and chemical equilibrium calculations for fluid
and solid phases. MultiFlash consists of several software modules: databases with the raw property data,
access software to the databases and different modules for pure component property calculation, mixture models for thermodynamic properties and transport properties, handling of binary interaction parameters and phase and chemical equilibrium calculations.
A number of process simulators, e. g., gPROMS from
PSE, uses an interface to MultiFlash for the calculation
of physical properties. For use in a dynamic simulation
program typically only a small fraction of the MultiFlash functions are needed. The current interface is
kept as simple as possible, with all necessary interaction with the property database encapsulated into one
medium property object. The interface has been tested
with both Dymola by Dynasim AB [4] and MathModelica by MathCore AB [6].

2.1

The low-level interface

The low-level interface between Modelica models and
the MultiFlash modules, which are accessible via a

Modelica 2002, March 18−19, 2002

Win32 Dynamic Link Library (dll) under Windows,
consists of the standard Modelica foreign function interface for the C-language. This means that all calls
to MultiFlash routines are provided exactly as documented in the MultiFlash programmers guide, including identical variable names. There are two minor,
but necessary exceptions. Modelica does not allow to
overwrite inputs with outputs in the calling of functions. This is common practice in Fortran numerical
routines and in MultiFlash this is exclusively used to
provide estimates of the solutions in the input variables. In the Modelica interface, the estimated solutions are provided as additional input arguments to the
function and the original MultiFlash variables are kept
as outputs. The second exception is the handling of error message strings. The handling of errors and warnings is done in the C wrapper functions. Diagnostic
messages are written to the simulation log. A flag with
the number of errors is returned in the Modelica function call for error trapping purposes.

2.2

The MultiFlash interface

34

Tummescheit H., Eborn J.

Computational efficiency

Simulation time is an important issue and the interface library uses all available methods to make function calls computationally efficient. A simple rule is
to get as many physical properties as possible from
one call to MultiFlash. All essential medium properties needed for the default dynamic model are available in one property record which is calculated with
one single function call to MultiFlash. The dynamic
state model and other ThermoFluid models need everything in this standard property record, so it is computationally not efficient to slim down this function
call. Boolean flags to the MultiFlash routines are used
to ensure that only the medium properties of interest
are calculated. High level functions that return only
a single property have not been implemented in order
to close the door on unnecessarily slow models. However, all low-level MultiFlash functions are available
and thus single function calls to obtain properties can
be used if it is desired.
Providing good estimates of the solution makes a big
difference in the solution time for any nonlinear system of equations, especially for phase equilibrium calculations. It is obvious that for continuous, dynamic
simulation the result from the last time step usually
provides such an estimate. Internal caching of the last
solution in the same control volume is therefore implemented in the T HERMO F LUID /MF MultiFlash interface.

The Modelica Association

Tummescheit H., Eborn J.

2.3

Chemical Reaction Modeling with ThermoFluid/MF and MultiFlash

Using MultiFlash with ThermoFluid/MF temperature T and mole amounts N as dynamic states,

Setting up a model that uses MultiFlash properties is
currently done through the MultiFlash windows user
interface. The user selects the wanted components by
querying the available MultiFlash databases. For complex systems, the MultiFlash stream facility is used to
define different component streams to be used in different parts of the system. The global stream which
has to be defined first contains the union of the components in all streams. If necessary, the thermodynamic models can be changed from the default suggested by MultiFlash through the graphical user interface. All standard equations-of-state (EOS) models,
e. g., Redlich-Kwong-Soave or Peng-Robinson, can be
used with a selection of mixing rules. Binary interaction parameters can be entered if needed. Transport property models are selected independently of the
EOS models. The problem setup is saved in an mflfile which is then read and parsed during initialization.
The file name is the main parameter to the medium
models in the T HERMO F LUID /MF library. Problem
setup files are read from the current directory or from
a repository, where all problem setup definitions can
be managed in a centralized way.

2.4

while p can be regarded as an algebraic variable that
contains state information. For the standard case of a
constant volume control volume, the pressure is solved
for iteratively to ensure that the total volume is kept
constant, V f ixed V p . This is the only non-linear
equation system in the model for single phase calculations. The dynamic state model is derived from the
standard text-book form of an energy and mass balances. In block matrix notation, the inner energy and
mole amount balance can be recast into temperature
and moles as dynamic states as follows (boldface for
vectors and matrices, sizes follow from dimension of
N, the number of components in the mixture.):


Nt
Ut
Vt




I



dU
dN T V

35

0

dU
dT N V




Nt
Tt
Vt








0



dU
dV N T








0






The most efficient method of combining the dynamic
states and the physical property calculation is to
choose the dynamic states of the model such that they
are inputs to the physical property calculation routines.
That avoids the solution of non-linear equation systems during simulation. Otherwise, inputs to the property functions have to be computed from outputs of
that functions through a non-linear equation system.
This happens when the outputs are dynamic states or
time-invariant parameters, like the volume in a closed
vessel. If the property functions are computationally
expensive relative to the rest of the model, the saving
in computation time by using a model which is explicit in the states is significant. When this can not be
achieved, as is the case with the MultiFlash routines, it
is still preferable to get non-linear equation systems of
the lowest possible dimension. Due to the MF calling structure with pressure p, temperature T and N
(mole amounts) as inputs and total volume V as output a special state model has been defined. It is incorporated in the free T HERMO F LUID library and can be
used interchangeably with the simple ideal gas models
in the free T HERMO F LUID library and the commercial MultiFlash property models. The state model uses

0

1









(4)

The subscript t is used for the time derivative, N stands
for mole amounts, U for total inner energy. The inverse of the jacobian is used to make this model explicit in the mole vector, the temperature and the volume as dynamic states:

Dynamic state equations

The Modelica Association









I



1

1



dU
dT N V

dU
dN T V

0






0








0






dU
dV N T










dU
dT N V

0



1







(5)




The structure of the jacobian inverse reveals that only
the equation for the inner energy is transformed into
one for the temperature. The mole balance equations
remain unchanged from (4).
The partial derivatives occuring in the transformed dynamic and initial equations can be calculated from
derivatives that are returned by MultiFlash by setting
the appropriate flags. However, the derivatives must be
transformed using thermodynamic determinants since
MultiFlash returns derivatives at constant pressure and
the T HERMO F LUID balances are derived at constant
volume. As an example we pick the derivative of total enthalpy w. r. t. temperature (all derivatives are at
constant composition):
∂H
∂T








V

∂H
∂T










p

∂H
∂V








T

∂H
∂T




∂H ∂p T
∂V ∂p T








p





(6)







All derivatives on the right hand side of the equation
are returned by standard MultiFlash property calls.

Modelica 2002, March 18−19, 2002

Chemical Reaction Modeling with ThermoFluid/MF and MultiFlash

2.5

Initialization

In the Modelica 2.0 specification and Dymola version
4.2 the possibility to separate the equations for steady
state initialization from the dynamic states was introduced. Due to that separation, a control volume can
now easily be initialized at steady state pressure, even
when the pressure is not a dynamic state. In complex
flow sheets, the calculation of an initial steady state is
usually numerically much more challenging than the
subsequent dynamic simulation. A helpful way around
that problem is to use a suitable “pseudo steady state”
instead which avoids harsh initial transients. One possibility to do so is to use steady state initialization only
for the states with relatively fast eigenvalues. Setting
the pressure gradient to zero, but supplying initial estimates for temperature and composition is one such
suitable choice of a “pseudo steady state”. The fast
modes of the system (pressure and, if a dynamic momentum balance is used, mass flows) are initialized in
steady state, while the much slower modes of temperature and composition are set by a non-steady state initial guess. The pressure gradient becomes:
dp
dt

dp
dT








dT
N dt

n



∑

i 1


dp
dNi








T

dNi
dt

0

(7)

This equation together with given initial composition
and temperature is much easier to solve than a full
steady state, especially for large networks, but the initial transients due to errors in the initial guesses are
orders of magnitude smaller than the ones obtained
from non steady state pressures. The new initialization
method has been implemented for all state models in
the T HERMO F LUID and T HERMO F LUID /MF libraries
and has improved the handling of model initialization considerably. Before implementation of the improved initialization, computation time for small problems was dominated by the time to simulate past the
initial transients. With that obstacle removed, typical simulation times for small systems are an order of
magnitude faster than before.
This initialization is the default setup when the T HER MO F LUID /MF high-level models are used. The initial
state is defined by given temperature and mass fractions and an initial pressure estimate. The initialization then solves for the mole amount states.

2.6

Tummescheit H., Eborn J.

identifier is passed to the wrapper functions calling the
MultiFlash property routines. Using the unique control volume identifier, it is possible to connect errorand warning messages from the MultiFlash routines to
the location in the flow sheet where the error occured,
e. g., if a temperature rises above the range of validity
of the property function. All error and warning messages from MultiFlash are written to the Dymola simulation log. Information about the version, the configuration, the number and composition of streams etc. is
also included in the log.

2.7

ThermoFluid/MF high level models

Modeling of process engineering problems can not
be cast into fixed, unchangeable model library components as for example multibody systems. Instead
flexibility is needed to have basic building blocks taking care of the standard parts of any dynamic model.
These basic models need to be easy to adapt to a specific problem. A large part of the physical property
calculations is identical for all modeling problems.
The T HERMO F LUID /MF library provides such basic
models and building blocks for control volume models
based on MultiFlash properties. Extensions are simple to add by using elements of the T HERMO F LUID
or T HERMO F LUID /MF libraries. Some examples of
lumped and distributed models demonstrate how to
build components and larger systems from the building blocks in the library. A mixture which is typical for
fuel cell reformer systems is used to demonstrate how
the minmimal physical property model is used and also
how to add transport properties. Transport properties
are not included in the T HERMO F LUID library except
for water, but MultiFlash includes several models for
viscosity, thermal conductivity and surface tension for
pure components and mixtures.

Debugging

In order to improve feedback and error messages for
debugging, an identifier for each control volume is
allocated during the initialization of the model. The

Modelica 2002, March 18−19, 2002

36

Figure 5: Example models from the library.

The Modelica Association

Tummescheit H., Eborn J.

Chemical Reaction Modeling with ThermoFluid/MF and MultiFlash

The number of high level models in the T HER MO F LUID /MF library is fairly small, because most
standard models can be used from the T HERMO F LUID
library. The only base models that are different
are control volume models. For flash models new
flash control volumes are introduced. They determine
which phase is flowing in or out at a connector from
the position of the flow connector and the liquid level
in the volume. Tray models for destillation columns
will be added later.

Temperature



3

Use that property model in a suitble control volume model from the T HERMO F LUID /MF library.

Crossing Functions for multicomponent multi-phase mixtures

In Modelica, crossing functions are usually automatically generated from all equations that contain statements which indicate that a function f x is discontinuous at a certain point x0 . For example, in the following equation:

370
365



360

phase = if h < hliq or h > hvap or p > pcrit then 1 else 2;

355
350

Liquid Phase Fraction

Define a T HERMO F LUID-compatible property
model, following the examples in the T HER MO F LUID /MF library.


2

4

6
8
Time

2

4

6
8
Time

10

12

0.08
0.07
0.06
0.05
10

12

three crossing functions are introduced to monitor the
states of the boolean conditions. This is necessary because numerical integration routines assume continuity of their right-hand side functions. This assumption
is violated in most if-clauses. This can not be automated for external functions that are discontinuous at
a point x0 . Thus crossing functions have to be provided by the user in order to make the simulator detect the discontinuity. These crossing functions have to
be consistent with the actual discontinuities, otherwise
they will not work. In the context of phase equilibrium calculations for multi-component fluid mixtures
this means that a unique function of composition, pressure and temperature N p T must be returned from
the phase equilibrium calculations which has a sign
change at the point where a new phase is formed or one
phase ceases to exist. At a phase boundary thermodynamic variables have discontinuous first derivatives
or are discontinuous by itself, like the heat capacity
at constant volume cv . For a mixture with n compoℜ.
nents the crossing function is a function ℜ n 1
It calculates a measure for the distance to the phase
boundary surface which is in ℜn .


Figure 6: Change of temperature and liquid phase fraction in a water-ehtanol mix during a pressure transient.







The simulation result from the depressurization of
a flash volume filled with a water-ethanol mixture
in thermodynamic equilibrium of the two phases is
shown in Figure 6. A ramp from 1 bar to 0 5 bars
is imposed on the volume which has a feed flow of
constant composition. The jump in the liquid phase
fraction at the start and end of the transient is due to
the changing in- and outflow phase fractions.
Using MultiFlash properties with the T HER MO F LUID /MF library is very simple and requires
only few steps of setup:




3.1







Deviation index

Collaboration with Infochem Ltd. [5] brought forth
an implementation of such a function to increase efficiency and reliability of phase equilibrium calculations in dynamic simulations. It is available in the
latest release of MultiFlash, version 3.1. This is the
first time that a multi-phase property package has been
Define the components, phases and models to be equiped with this feature, which is indispensable for
used in the MultiFlash user interface and save the being able to reliably simulate the formation or disresult in a model setup file.
appearance of phases in a control volume with high

The Modelica Association

37

Modelica 2002, March 18−19, 2002

Chemical Reaction Modeling with ThermoFluid/MF and MultiFlash

quality integrators with event detection and error control. Infochem calls the new function the deviation
index. The calculation of the deviation index is numerically much more efficient than other possibilities
to determine the number of phases at a given N p T
during dynamic simulation. Geometrically, the deviation index can be interpreted as a normalized length of
the normal vector from the current point in the space
spanned by composition, pressure and temperature to
the n-dimensional tangent hyperplane to the phase separation surface. The tangent plane is also known as
Gibbs' tangent plane. It has been used for stability
analysis in phase equilibrium calculations before, see
[8], [9] and [1]. The new feature is to assign a value to
the distance from the hyperplane which allows a solver
using interpolation to exactly locate the point in time
when the simulation trajectory in the N p T - space
will pass through the hyperplane. At equilibrium, the
Gibbs energy of the system is at a minimum. This
condition may be expressed as the equality of fugacities for each component in all phases or equivalently
([1]) as








1 np
(8)
where nc is the number of components, n p is the number of phases, Ki j is the K-value for component i in
phase j, Fi j is the fugacity coefficent for component i
in phase j and ri is the the reference phase for component i. The K-values are defined as
ln Ki j





ln Fi j





ln Firi

Ki j

0 i





yi j
yiri

1 nc ; j

(9)

where yi j is the mole fraction of component i in phase
j. In the vicinity of the phase split surface, the left
hand side of (8) gives the value of the desired crossing
function, the deviation index.
Furthermore, the function needs to reliably calculate
the properties used in equation (8) of a phase which
is unstable at the current N p T . Considering for
simplicity single component mixtures and the calculation of thermodynamic properties for a phase which
is unstable inside the 2-phase dome (i. e., superheated
liquid or subcooled vapour), it becomes clear that the
numerical computation is only possible to the limit of
the so called spinoidal lines. For simple cubic EOS
the spinoidal lines are defined by the connection lines
of the maxima and minima of the theorectical isothermes inside the two-phase dome. An implementation
thus has to guard against erroneous results far from
the phase boundary.




Modelica 2002, March 18−19, 2002



38

4

Tummescheit H., Eborn J.

Conclusions

The inclusion of reaction calculations and the interface to the physical property database MultiFlash into
the T HERMO F LUID library opens new possibilities of
modeling process systems and combustion processes
which up to now have been blocked by the large initial investment in modeling work to set up the physical
property calculation.
The general reaction, diffusion and heat transfer object
provides a clean and unified way of encapsulating submodels for heat and mass transfer. Base classes never
need to be changed no matter how many connections
to the control volume exist. Standard reactions can be
stored in component libraries and used with any reactor model that has a compatible medium property
model. Membrane diffusion uses the same mechanism
to couple into the standard dynamical equations.
The T HERMO F LUID /MF library provides two sets of
models: low level models which are one-to-one wrappers to the MultiFlash physical property routines and
high level base models for multi-component liquid-gas
two phase models. Care has been taken to make the
time consuming VLE-calculations as efficient as possible and at the same time numerically robust.
Crossing functions for multi-phase, multi-component
mixtures have been implemented in collaboration with
Infochem Ltd. They allow a numerically robust detection of the formation of new phases in a multi phase
mixture.

References
[1] J. F. Counsell, R. A. S. Moorwood, and
R. Szczepanski. Caclulating Multiphase Equilibria. In Proceedings of the Conference on VapourLiquid Equilibria, Aston, 1990.
[2] Jonas Eborn. On Model Libraries for Thermohydraulic Applications. PhD thesis, Department
of Automatic Control, Lund Institute of Technology, Lund, Sweden, March 2001.
[3] Rüdiger Franke. Formulation of dynamic optimization problems using modelica. In Martin Otter, Hilding Elmqvist, and Peter Fritzson, editors,
Proceedings of the International Modelica Conference 2002. Modelica Association and DLR,
March 2002.
[4] http://www.dynasim.se.
[5] http://www.infochemuk.com.

The Modelica Association

Tummescheit H., Eborn J.

Chemical Reaction Modeling with ThermoFluid/MF and MultiFlash

[6] http://www.mathcore.com.
[7] Jakob
Munch
Jensen
and
Hubertus
Tummescheit.
Moving Boundary Models
for Dynamic Simulations of Two-Phase Flows.
In Martin Otter, Hilding Elmqvist, and Peter
Fritzson, editors, Proceedings of the International Modelica Conference 2002. Modelica
Association and DLR, March 2002.
[8] M. L. Michelsen. The isothermal flash problem.
I. Stability analysis. Fluid Phase Equilibria, 9:1–
19, 1982.
[9] M. L. Michelsen. The isothermal flash problem.
II. Phase-split calculation. Fluid Phase Equilibria, 9:21–40, 1982.
[10] Torge Pfafferot and G. Schmitz. Numerische
Simulation von CO2-Kühlprozessen mit Modelica. In DKV-Tagungsbericht 2001, volume IV 28.
Jahrgang. DKV, Stuttgart, 2001.
[11] Hubertus Tummescheit, Jonas Eborn, and Falko
Wagner. Development of a Modelica base library for modeling of thermo-hydraulic systems.
In Modelica 2000 Workshop Proceedings, pages
41–51, Lund, October 2000. Modelica Association.
[12] Stephen R. Turns. An Introduction to Combustion. McGraw Hill International Editions, 1993.

The Modelica Association

39

Modelica 2002, March 18−19, 2002

Modelica 2002, March 18−19, 2002

40

The Modelica Association

Fritzson P., Gunnarsson J., Jirstrand M.

MathModelica − An Extensible Modeling and Simulation Environment ...

MathModelica
An Extensible Modeling and Simulation Environment
with Integrated Graphics and Literate Programming
(Abridged Version∗ )

Peter Fritzson1, Johan Gunnarsson2, Mats Jirstrand2
1) PELAB, Programming Environment Laboratory, Department of Computer and Information
Science, Linköping University, SE-581 83, Linköping, Sweden
petfr@ida.liu.se
2) MathCore AB, Wallenbergs gata 4, SE-583 35 Linköping, Sweden
{johan,mats}@mathcore.se

Abstract
MathModelica is an integrated interactive development
environment for advanced system modeling and simulation.
The environment integrates Modelica-based modeling and
simulation with graphic design, advanced scripting
facilities, integration of program code, test cases, graphics,
documentation, mathematical type setting, and symbolic
formula manipulation provided via Mathematica. The user
interface consists of a graphical Model Editor and
Notebooks. The Model Editor is a graphical user interface
in which models can be assembled using components from
a number of standard libraries representing different
physical domains or disciplines, such as electrical,
mechanics, block-diagram and multi-body systems.
Notebooks are interactive documents that combine
technical computations with text, graphics, tables, code,
and other elements. The accessible MathModelica internal
form allows the user to extend the system with new
functionality, as well as performing queries on the model
representation and write scripts for automatic model
generation. Furthermore, extensibility of syntax and
semantics provides additional flexibility in adapting to
unforeseen user needs.

1

Background

Traditionally, simulation and accompanying activities
[Fritzson-92a] have been expressed using heterogeneous
media and tools, with a mixture of manual and comp utersupported activities:
• A simulation model is traditionally designed on paper
using traditional mathematical notation.
• Simulation programs are written in a low- level
programming language and stored on text files.
• Input and output data, if stored at all, are saved in
proprietary formats needed for particular applications
and numerical libraries.
• Documentation is written on paper or in separate files
that are not integrated with the program files.
• The graphical results are printed on paper or saved
using proprietary formats.
When the result of the research and experiments, such as a
scientific paper, is written, the user normally gathers
together input data, algorithms, output data and its
∗

visualizations as well as notes and descriptions. One of the
major problems in simulation development environments is
that gathering and maintaining correct versions of all these
components from various files and formats is difficult and
error-prone.
Our vision of a solution to this set of problems is to
provide integrated computer-supported modeling and
simulation environments that enable the user to work
effectively and flexibly with simulations. Users would then be
able to prepare and run simulations as well as investigate
simulation results. Several auxiliary activities accompany
simulation experiments: requirements are specified, models are
designed, documentation is associated with appropriate places
in the models, input and output data as well as possible
constraints on such data are documented and stored together
with the simulation model. The user should be able to
reproduce experimental results. Therefore input data and parts
of output data as well as the experimenter's notes should be
stored for future analysis.

1.1

Integrated Interactive Programming
Environments

An integrated interactive modeling and simulation
environment is a special case of programming environments
with applications in modeling and simulation. Thus, it should
fulfill the requirements both from general integrated
environments and from the application area of modeling and
simulation mentioned in the previous section.
The main idea of an integrated programming environment
in general is that a number of programming support functions
should be available within the same tool in a well- integrated
way. The se means that the functions should operate on the
same data and program representations, exchange information
when necessary, resulting in an environment that is both
powerful and easy to use. An environment is interactive and
incremental if it gives quick feedback, e.g. without
recomputing everything from scratch, and maintains a dialogue
with the user, including preserving the state of previous
interactions with the user. Interactive environments are
typically both more productive and more fun to use.
There are many things that one wants a programming
environment to do for the programmer, particularly if it is
interactive. What functionality should be included?
Comprehensive software development environments are

The complete version of the paper can be found at http://www.mathcore.com and http://www.ida.liu.se/~pelab/modelica/

The Modelica Association

41

Modelica 2002, March 18−19, 2002

MathModelica − An Extensible Modeling and Simulation Environment ...
expected to provide support for the major development
phases, such as:
• requirements analysis,
• design,
• implementation,
• maintenance.
A programming environment can be somewhat more
restrictive and need not necessarily support early phases
such as requirements analysis, but it is an advantage if such
facilities are also included. The main point is to provide as
much computer support as possible for different aspects of
software development, to free the developer from mundane
tasks so that more time and effort can be spent on the
essential issues. The fo llowing is a partial list of integrated
programming environment facilities, some of which are
already mentioned in [Sandewall-78], that should be
provided for the programmer:
• Administration and configuration management of
program modules and classes, and different versions
of these.
• Administration and maintenance of test examples and
their correct results.
• Administration and maintenance of formal or informal
documentation of program parts, and automatic
generation of documentation from programs.
• Support for a given programming methodology, e.g.
top-down or bottom-up. For example, if a top-down
approach should be encouraged, it is natural for the
interactive environment to maintain successive
composition steps and mutual references between
those.
• Support for the interactive session. For example,
previous interactions should be saved in an
appropriate way so that the user can refer to previous
commands or results, go back and edit those, and
possibly re-execute.
• Enhanced editing support, performed by an editor that
knows about the syntactic structure of the language. It
is an advantage if the system allows editing of the
program in different views. For example, editing of
the overall system structure can be done in the
graphical view, whereas editing of detailed properties
can be done in the textual view.
• Cross-referencing and query facilities, to help the user
understand interdependences between parts of large
systems.
• Flexibility and extensibility, e.g. mechanisms to
extend the syntax and semantics of the programming
language representation and the functionality built into
the environment.
• Accessible internal representation of programs. This is
often a prerequisite to the extensibility requirement.
An accessible internal representation means that there
is a well-defined representation of programs that are
represented in data structures of the programming
language itself, so that user-written programs may
inspect the structure and generate new programs. This
property is also known as the principle of programdata equivalence.

Modelica 2002, March 18−19, 2002

1.2

Fritzson P., Gunnarsson J., Jirstrand M.

Vision of Integrated Interactive
Environment for Modeling and
Simulation.

Our vision for the MathModelica integrated interactive
environment is to fulfill essentially all the requirements for
general integrated interactive environments combined with the
specific needs for modeling and simulation environments, e.g.:
• Specification
of
requirements,
expressed
as
documentation and/or mathematics;
• Design of the mathematical model;
• symbolic transformations of the mathematical model;
• A uniform general language for model design,
mathematics, and transformations;
• Automatic generation of efficient simulation code;
• Execution of simulations;
• Evaluation and documentation of numerical experiments;
• Graphical presentation.
The design and vision of MathModelica is to a large extent
based on our earlier experience in research and development of
integrated incremental programming environments, e.g. the
DICE system [Fritzson-83] and the ObjectMath environment
[Fritzson-92b,Fritzson-95], and many years of intensive use of
advanced integrated interactive environments such as the
InterLisp system [Sandewall-78], [Teitelman-69,Teitelman74], and Mathematica [Wolfram-88,Wolfram-97]. The
InterLisp system was actually one of the first really powerful
integrated environments, and still beats most current
programming environments in terms of powerful facilities
available to the programmer. It was also the first environment
that used graphical window systems in an effective way
[Teitelman77], e.g. before the Smalltalk environment
[Goldberg 89] and the Macintosh window system appeared.
Mathematica is a more recently developed integrated
interactive programming environment with many similarities
to InterLisp, containing comprehensive programming and
documentation facilities, accessible intermediate representation
with program-data equivalence, graphics, and support for
mathematics and computer algebra. Mathematica is more
developed than InterLisp in several areas, e.g. syntax,
documentation, and pattern-matching, but less developed in
programming support facilities.

1.3

Mathematica and Modelica

It turns out that the Mathematica is an integrated programming
environment that fulfils many of our requirements. However, it
lacks object-oriented modeling and structuring facilities as
well as generation of efficient simulation code needed for
effective modeling and simulation of large systems. These
modeling and simulation facilities are provided by the objectoriented modeling language Modelica [MA-02a,MA-02b],
[Tiller-01], [Elmqvist-99], [Fritzson-98].
Our solution to the problem of a comprehensive modeling
and simulation environment is to combine Mathematica and
Modelica into an integrated interactive environment called
MathModelica. This environment provides an internal
representation of Modelica that builds on and extends the
standard Mathematica representation, which makes it a well
integrated with the rest of the Mathematica system.
The realization of the general goal of a uniform general
language for model design, mathematics, and symbolic
transformations is based on an integration of the two languages
Mathematica and Modelica. Mathematica provides
representation of mathematics and facilities for programming
symbolic transformations, whereas Modelica provides

42

The Modelica Association

Fritzson P., Gunnarsson J., Jirstrand M.

MathModelica − An Extensible Modeling and Simulation Environment ...

language elements and structuring facilities for objectoriented component based modeling, including a strong
type system for efficient code and engineering safety.
However, this language integration is not yet realized to its
full potential in the current release of MathModelica, even
though the current level of integration provides many
impressive capabilities.
The current MathModelica system builds on
experience from the design of the ObjectMath [Fritzson92b,Fritzson-95] modeling language and environment,
early prototypes [Fritzson-98b], [Jirstrand-99], as well as
on results from object-oriented modeling languages and
systems such as Dymola [Elmqvist-78,Elmqvist-96] and
Omola [Mattsson-93], [Andersson-94], which together
with ObjectMath and a few other object-oriented modeling
languages, have provided the basis for the design of
Modelica.
ObjectMath was originally designed as an objectoriented extension of Mathematica augmented with
efficient code generation and a graphic class browser. The
ObjectMath effort was initiated 1989 and concluded in the
fall of 1996 when the Modelica Design Group was started,
later renamed to Modelica Association. At that time,
instead of developing a fifth version of ObjectMath, we
decided to join forces with the originators of a number of
other object-oriented mathematical modeling languages in
creating the Modelica language, with the ambition of
eventually making it an international standard. In many
ways the MathModelica product can be seen as a logical
successor to the ObjectMath research prototype.

2

The MathModelica Integrated
Interactive Environment.

The MathModelica system consists of three major
subsystems that are used during different phases of the
modeling and simulation process, as depicted in
Figure 1 below:
MathModelica
Modeling and Simulation
Environment

Model
Editor

Simulation
Center

3D Graphics
and CAD
Notebooks

Figure 1. The MathModelica system architecture.
These subsystems are the following:
• The graphic Model Editor used for design of models
from library components.
• The interactive Notebook facility, for literate
programming, documentation, running simulations,
scripting, graphics, and symbolic mathematics with
Mathematica.
• The Simulation center, for specifying parameters,
running simulations and plotting curves.
Additionally, MathModelica is loosely coupled to two
optional subsystems for 3D graphics visualization and
automatic translation of CAD models to Modelica. [Bunus00], [Engelson-99]. [Engelson-00]. In order to provide the
best possible facilities available on the market for the user,
MathModelica integrates and extends several professional
software products that are included in the three subsystems.
For example, the model editor is a customization and
extension of the diagram and visualization tool Visio

The Modelica Association

[Visio] from Microsoft, the simulation center includes
simulation algo rithms from Dynasim [Elmqvist-96], and the
Notebook facility includes the technical computing system
Mathematica [Wolfram-97] from Wolfram Research.
A key aspect of MathModelica is that the modeling and
simulation is done within an environment that also provides a
variety of technical computations. This can be utilized both in
a preprocessing stage in the development of models for
subsystems as well as for postprocessing of simulation results
such as signal processing and further analysis of simulated
data.

2.1

Graphic Model Editor.

The MathModelica Model Editor is a graphical user interface
for model diagram construction by "drag-and-drop" of model
classes from the Modelica Standard Library or from user
defined component libraries, visually represented as graphic
icons in the editor. A screen shot of the Model Editor is shown
in Figure 2. In the left part of the window three library
packages have been opened, visually represented as
overlapping windows containing graphic icons. The user can
drag models from these windows (called stencils in Visio
terminology) and drop them on the drawing area in the middle
of the tool.
The Model Editor is an extension of the Microsoft Visio
software for diagram design and schematics. This means that
the user has access not only to a well developed and user
friendly graph drawing application, but also to a vast array of
professional design features to make graphical representations
of developed models visually attractive. Since Modelica
classes often represent physical objects it is of great value to
have a sufficiently rich graphical description of these classes.
The Model Editor can be viewed as a user interface for
graphical programming in Modelica. Its basic functionality
consists of selection of compone nts from libraries, connection
of components in model diagrams, and entering parameter
values for different components
For large and complex models it is important to be able to
intuitively navigate quickly through component hierarchies.
The Model Editor supports such navigation in several ways. A
model diagram can be browsed and zoomed. The Model Editor
is well integrated with Notebooks. A model diagram stored in a
notebook is a tree-structured graphical representation of the
Modelica code of the model, which can be converted into
textual form by a command.

2.2

Simulation Center.

The simulation center is a subsystem for running simulations,
setting initial values and model parameters, plot results, etc.
These facilities are accessible via a graphic user interface
accessible through the simulation window, e.g. see Figure 3
below. However, remember that it is also possible to run
simulations from the textual user interface available in the
notebooks. The simulation window consists of five areas or
subwindows with different functionality:
• The uppermost part of the simulation window is a control
panel for starting and running simulations. It contains two
fields for setting start and stop time for simulation,
followed by Build, Run Simulation, Plot,
and Stop buttons.
• The left subwindow in the middle section shows a treestructure view of the model selected and compiled for
simulation, including all its submodels and variables.
Here, variables can be selected for plotting.

43

Modelica 2002, March 18−19, 2002

MathModelica − An Extensible Modeling and Simulation Environment ...
•

Fritzson P., Gunnarsson J., Jirstrand M.

variables.

The center subwindow is used for diagrams of plotted

Figure 2. The Graphic Model Editor showing an electrical motor with the Inertia parameter J modified.
•
•

The right subwindow in the middle section contains
the legend for the plotted diagram, i.e. the names of
the plotted variables.
The subwindow at the bottom is divided into three
sections:
Parameters,
Variables,
and
Messages, of which only one at a time is visible.
The Parameters section, shown in Figure 3,
allows changing parameter values, whereas the
Variables section allows modifying intial (start)
values, and the Message section to view possible
messages from the simulation process.

If a model parameter or initial value has been changed, it
is possible to rerun the simulation without rebuilding the
executable code if no parameter influencing the equation
structure has been changed. Such parameters are
sometimes called structural parameters.

2.3

Interactive Notebooks with Literate
Programming.

In addition to purely graphical programming of models using
the Model Editor MathModelica also provides a text based
programming environment for building textual models using
Modelica. This is done using Notebooks, which is documents
that may contain technical computations, text, and graphics.
Hence, these documents are suitable to be used both as
simulation scripting tools, model documentation and storage,
model analysis and control system design, etc. In fact, this
article is written as such a notebook and in the live version the
examples can be run interactively. A sample notebooks is
shown in Figure 4.

Figure 3. The Simulate window with plots of the signals Inertia1.flange_a.tau and Inertia1.w .

Modelica 2002, March 18−19, 2002

44

The Modelica Association

Fritzson P., Gunnarsson J., Jirstrand M.

MathModelica − An Extensible Modeling and Simulation Environment ...
contain other cells. The notebook hierarchy of cells thus
reflects the hierarchy of sections and subsections in a
traditional document.

Figure 4. Examples of MathModelica notebooks..

Figure 5. The package Mypackage in a notebook

The MathModelica Notebook facility is actually an
interactive WYSIWYG (What-You-See-Is-What-You-Get)
realization of Literate Programming, a form of programming
where programs are integrated with documentation in the
same document, originally proposed in [Knuth-84]. A
noninteractive prototype implementations of Literate
Programming in combination with the document processing
system LaTex has been realized [Knuth-94]. However,
MathModelica is one of very few interactive WYSIWYG
systems so far realized for Literate Programming, and to our
knowledge the only one yet for Literate Programming in
Modeling.
Integrating Mathematica with MathModelica does not
only give access to the Notebook interface but also to
thousands of available functions and many application
packages, as well as the ability of communicating with other
programs and import and export of different data formats.
These capabilities make MathModelica more of a complete
workbench for the innovative engineer than just a modeling
and simulation tool. Once a model has been developed there
is often a need for further analysis such as linearization,
sensitivity analysis, transfer functions computations, control
system design, parametric studies, Monte Carlo simulations,
etc.
In fact, the combination of the ability of making user
defined libraries of reusable components in Modelica and the
Notebook concept of living technical documents provides an
integrated approach to model and documentation
management for the evolution of models of large systems

In the MathModelica system, Modelica packages including
documentation and test cases are primarily stored as
notebooks, e.g. as in Figure 4. Those cells that contain
Modelica model classes intended to be used from other
models, e.g. library components or certain application
models, should be marked as exports cells. This means that
when the notebook is saved, such cells are automatically
exported into a Modelica package file in the standard
Modelica textual representation (.mo file) that can be
processed by any Modelica compiler and imported into other
models. For example, when saving the notebook
MyPackage.nb of Figure 5, a file MyPackage.mo
would be created with the following contents:

2.3.1

Tree Structured Hierarchical Document
Representation.

Traditional documents, e.g. books and reports, essentially
always have a hierarchical structure. They are divided into
sections, subsections, paragraphs, etc. Both the document
itself and its sections usually have headings as labels for
easier navigation. This kind of structure is also reflected in
MathModelica notebooks. Every notebook corresponds to
one document (one file) and contains a tree structure of cells.
A cell can have different kinds of contents, and can even

The Modelica Association

45

package MyPackage
model class3
...
end class3;
model class2 ...
model class1 ...
package MySubPackage
model class1
...
end class1;
end MySubPackage;
end MyPackage;

2.3.2

Program Cells, Documentation Cells, and
Graphic Cells.

A notebook cell can include other cells and/or arbitrary text
or graphics. In particular a cell can include a code fragment
or a graph with computational results.
The contents of cells can for example be one of the
following forms:
• Model classes and parts of models, i.e. formal
descriptions that can be used for verification,
compilation and execution of simulation models.
• Mathematical formulas in the traditional mathematical
two dimensional syntax.
• Text/documentation, e.g. used as comments to
executable formal model specifications.

Modelica 2002, March 18−19, 2002

MathModelica − An Extensible Modeling and Simulation Environment ...
•
•
•
•

Dialogue forms for specification and modification of
input data.
Result tables. The results can be automatically
represented in (live) tables, which can even be
automatically updated after recomputation.
Graphical result representation, e.g. with 2D vector and
raster graphics as well as 3D vector and surface
graphics.
2D structure graphs, that for example are used for
various model structure visualizations such as
connection diagrams and data structure diagrams.

Mathematics with 2D-syntax, Greek
letters, and Equations

MathModelica uses the syntactic facilities of Mathematica to
allow writing formulas in the standard mathematical notation
well-known, e.g. from textbooks in mathematics and physics.
Certain parts of the Mathematica language syntax are
however a bit unusual compared to many common
programming languages. The reason for this design choice is
to make it possible to use traditional mathematical syntax.
The following three syntactic features are unusual:
• Implied multiplication is allowed, i.e. a space between
two expressions, e.g. x and f(x), means
multiplication just as in mathematics. A multiplication
operator * can be used if desired, but is optional.
• Square brackets are used around the arguments at
function calls. Round parentheses are only used for
grouping of expressions. The exception is
Traditional Form, see below.
• Support for two-dimensional mathematical syntactic
notation such as integrals, division bars, square roots,
matrices, etc.
The reason for the unusual choice of square brackets around
function arguments is that the implied multiplication makes
the interpretation of round parenthesis ambiguous. For
example, f(x+1) can be interpreted either as a function call
to f with the argument x+1, or f multiplied by (x+1).
The integral in the cell below contains examples of both
implied multiplication and two-dimensional integral syntax.
The cell style is called MathModelica input form (called
standard form in Mathematica) and is used for mathematics
and Modelica code in Mathematica syntax:
x f@xD
x
‡
1 + x2 + x3
There is also a purely textual input form using a linear
sequence of characters. This is for example used for entering
Modelica models in the standard Modelica syntax, and is
currently the only cell format in MathModelica that can
interpret standard Modelica syntax. However, all
mathematics can also be represented in this syntax. The
above example in this textual format appears as follows:
Integrate[(x*f[x])/(1 + x^2 + x^3), x]
Finally, there is also a cell format called traditionalform
which is very close to traditional mathematical syntax,
avoiding the square brackets. The above-mentioned syntactic
ambiguities can be avoided if the formula is first entered
using one of the above input forms, and then converted to
traditional form.

Modelica 2002, March 18−19, 2002

x f HxL
x3

x2

1

x

The MathModelica environment allows easy conversion
between these forms using keyboard or menu commands.
Below we show a small example of a Modelica model class
SimpleDAE represented in the Mathematica style syntax of
Modelica that allows greek characters and two dimensional
syntax. The apostrophe (') is used for the derivatives just as
in traditional mathematics, corresponding to the Modelica
der() operator.

ModelASimpleDAE,

A number of examples of these different forms of cells are
available throughout this paper.

2.3.3

‡

Fritzson P., Gunnarsson J., Jirstrand M.

46

Real β1;
Real x2;
EquationA
β1 '

+

sin@x2 'D

+ β1 x2 + β1  1;
1 + Hβ1 'L2
x2 '
sin@β1 'D −
− 2 β1 x2 + β1  0;
1 + Hβ1 'L2
EE

1 + Hβ1

'L2

We simulate the model for ten seconds by giving a
Simulate command:
Simulate[SimpleDAE,{t,0,10}];
We use the command PlotSimulation for plotting the
solutions for the two state variables, which of course both are
functions of time, here denoted by t in Mathematica syntax:
PlotSimulation@8β1@tD, x2@tD<, 8t, 0, 10<D;
β1

t
x t
2

0.6
0.5
0.4
0.3
0.2
0.1
2

2.4

4

6

8

10

t

Environment and Language
Extensibility

Programming environments need to be flexible to adapt to
changing user needs. Without flexibility, a programming tool
will become too hard to use for practical needs, and stopped
to be used. Adaptability and flexibility is especially
important for integrated environments, since they need to
interact with a number of external tools and data formats,
contain many different functions, and usually need to add
new ones.
There are two major ways to extend a programming
environment
• Extension of functionality, e.g. through user-defined
commands, user-extensible menus, and a scripting
languages for programmability.
• Extension of language and notation, e.g. by facilities to
add new syntactic constructs and new notation, or
extend the meaning of existing ones.

The Modelica Association

Fritzson P., Gunnarsson J., Jirstrand M.

MathModelica − An Extensible Modeling and Simulation Environment ...

Mathematica has been designed from the start to be an
inherently extensible environment, which is what is used in
MathModelica. Almost anything can be redefined, extended,
or added.

2.4.1

Scripting for Extension of Functionality

An interactive scripting language is a common way of
providing extensibility of flexibility in functionality. The
MathModelica environment primarily uses the Mathematica
language and its interpreter as a scripting language, as can be
seen from a number of examples in this paper. Another
possibility would be to use the Modelica language itself as a
scripting language, e.g. by providing an interpreter for the
algorithmic and expression parts of the language. This can
easily be realized in MathModelica since the intermediate
form has been designed to be compatible with Mathematica,
and we already have Modelica input cells: just use Modelica
input cells also for commands, which are sent to the
Mathematica interpreter instead of the simulator.

2.4.2

Extensible Syntax and Semantics

As was already apparent in the section on mathematical
syntax, MathModelica provides a Mathematica- like input
syntax for Modelica in addition to the usual Modelica syntax.
One reason is to give support for mathematical notation, as
explained previously. Another reason is to provide user
extensible syntax.
This is easy since syntactic constructs in Mathematica
apart from the operators use a simple prefix syntax: a
keyword followed by square brackets surrounding the
contents of the construct, i.e. the same syntax as for function
calls. If there is a need to add a new construct no changes are
needed in the parser, and no reserved words need to be
added. Just define a Mathematica function to do the desired
symbolic or numeric processing.
The other major class of syntactic constructs are
operators. There are special facilities in Mathematica to add
new operators by defining their priority, operator syntax, and
internal representation. It is also possible to extend the
meaning of existing operators like +, *, -, etc.

2.4.3

Mathematica vs Modelica syntax.

In order to to show the difference between the standard
Modelica textual syntax and the extensible Mathematica-like
syntax, we first show a simple model in a Modelica-style
input cell:
model secondordersystem
Real x(start=0);
Real xdot(start=0);
parameter Real a=1;
equation
xdot=der(x);
der(xdot)+a*der(x)+x=1;
end secondordersystem;
The same model in the Mathematica- like Modelica
syntax appears below. Note the use of the simple prefix
syntax: a keyword followed by square brackets surrounding
the contents of the construct. All reserved words, predefined
functions, and types in MathModelica start with an uppercase letter just as in Mathematica. Equa tion equality is
represented by the == operators since = is the assignment
operator in Mathematica. The derivative operator is the
mathematical apostrophe (') notation rather than der(). The

The Modelica Association

47

semicolon (;) is a sequencing operator to group more than
one declaration, statement, or expression together.
Model[secondordersystem,
Real x[{Start == 0}];
Real xdot[{Start == 0}];
Parameter Real a == 1;
Equation[
xdot == x';
xdot' + a*x' + x == 1
]
]

3

Application Examples

This section gives a number of application examples of the
use of the Mathmodelica environment. The intent is to
demonstrate the power of integration and interactivity - the
interplay between the object-oriented modeling and
simulation capabilities of Modelica integrated with the
powerful scripting facilities of Mathematica within
MathModelica. This includes the representation of
simulation results as 1D and 2D interpolating functions of
time being combined with arithmetic operations and
functions in expressions, advanced plotting facilities, and
computational capabilities such as design optimization,
fourier analysis, and solution of time-dependent PDEs. For
the PDEs see the long version of the paper.

3.1

Advanced Plotting and Interpolating
Functions

This section illustrates the flexible usage of simulation
results represented as interpolating functions, both for further
computations that may include simulation results in
expressions, and for both simple and advanced plotting. The
simple bouncing ball model below from [MA-02a] is used in
the simulation and plotting examples.

3.1.1

Interpolating Function Representation of
Simulation Results

The following simulation of the above BouncingBall
model is done for a short time period using very few points:
res1=Simulate[BouncingBall,{t,0,0.5},
NumberOfIntervals->10]
<SimulationData: BouncingBall: 2002-2-26
10:48:10 : {0., 0.5} : 15 data points : 1
events : 7 variables>
{c, g, height, radius, velocity, height'
velocity'}
The results returned by Simulate are represented by an
access descriptor or handle. Some of the contents of such
descriptor is shown as the result of the above call to
Simulate. At this stage the simulation data is stored on
disk and referenced by res1 which acts as a handle to the
simulation data. When one of the variables from the last
simulation is referenced, e.g. height, radius, etc., the
data for that variable is loaded into the system in an load-byneed
manner,
and
represented
as
an
InterPolatingFunction.

Modelica 2002, March 18−19, 2002

MathModelica − An Extensible Modeling and Simulation Environment ...

3.1.2

Fritzson P., Gunnarsson J., Jirstrand M.

PlotSimulation

dx
= −y− x
dt
dy
= x + ay
dt
dz
= ß + ( x − ? )z
dt

First we simulate the bouncing ball for eight seconds and
store the results in the variable res1 for subsequent use in
the plotting examples.
res1=Simulate[BouncingBall,{t,0,8}];
The command PlotSimulation is used for simple
standard plots. If nothing else is specified, i.e. by the optional
SimulationResult parameter, the command refers to
the results from the last simulation.
Plotting several arbitrary functions can be done using a list of
function expressions instead of a single expression:
è
PlotSimulationA9height @tD + 3 ,

Abs @velocity @tDD=, 8t, 0, 8<E;
è!!!!

3 + height@tD

Abs@velocity@tDD
4
3
2
1

4

6

8

Figure 6. Plotting arbitrary functions in the same diagram.

3.1.3

Model@Rossler, "Rossler attractor",
Parameter Real α  0.2;
Parameter Real β  0.2;
Parameter Real γ  8;
Real x@8Start  1<D;
Real y@8Start  3<D;
Real z@8Start  0<D;
Equation@
x'  − y − z;
y'  x + α y;
z'  β + x z − γ z
D
D
The model is simulated using different initial values.
Changing these can considerably influence the appearance of
the attractor.

t
2

Here a, ß and ? are constants. The attractor never forms
limit circles nor does it ever reach a steady state. The model
is shown in Mathematica syntax, enabling the use of greek
characters:

Simulate @Rossler, 8t, 0, 40<,
InitialValues → 8x  2, y  2.5, z  0 <,
NumberOfIntervals → 1000D;

ParametricPlotSimulation

Parametric plots can be done using
ParametricPlotSimulation.

The Rossler attractor is easy
ParametricPlotSimulation3D:

ParametricPlotSimulation@
8height@tD, velocity @t D<,
8t, 0, 8 <D;

to

plot

using

ParametricPlotSimulation3D @
8x@tD, y@tD, z@tD<,
8t, 0, 40<,
AxesLabel → 8X, Y, Z<D;

4

2

Y
0

X

10-10
0

10

-10

0.2

0.4

0.6

0.8

40

-2

30
Z
20

-4

10

Figure 7. A parametric plot.

0

3.1.4

ParametricPlotSimulation3D

In this example we are going to use the Rossler attractor to
show the ParametricPlotSimula-tion3D command.
The Rossler attractor is named after Otto Rossler from his
work in chemical kinetics. The system is described by three
coupled non-linear differential equations:

Figure 8. 3-D parametric plot of curve with many data points
from the Rossler attractor simulation.

3.2

Design Optimization

This is an example of how the powerful scripting language of
MathModelica can be utilized to solve non-trivial
optimization problems that contain dynamic simulations.

Modelica 2002, March 18−19, 2002

48

The Modelica Association

Fritzson P., Gunnarsson J., Jirstrand M.

MathModelica − An Extensible Modeling and Simulation Environment ...

First we will define a Modelica model of a linear actuator
with spring damped stopping and then a first order system.
Using MathModelica scripting we will then find a damping
for the translational spring-damper such that the step
response is as "close" as possible to the step response from a
first order system.
Consider the following model of a linear actuator with a
spring damped connection to an anchoring point:

We simulate for different values of d and interpolate the
result

fpre = Interpolation@res2D;
Plot@f pre@aD, 8a, 2, 10<D;
0.0003
0.00025

IdealGearR2T1 SlidingMass1 SpringDamper1 Fixed1

0.0002
Inertia1

0.00015
SpringDamper2

4

6

8

10

Figure 11. Plot of the error function for finding a minimum
deviation from the desired step response.

Inertia2

The minimizing value of a can be computed using
FindMinimum :

tau

Torque1

Step1

FindMinimum@f pre@sD, 8s, 4<D

Figure 9. A LinearActuator model containing a spring
damped connection to an achoring point.

80.0000832564 , 8 s → 5.28642 <<

Assume that we have some freedom in choosing the damping
in the translational spring-damper. A number of simulation
runs show what kind of behavior we have for different values
of the dampingparameter d. The Mathematica Table[]
function is used in Simulate[] to collect the results into
an array res. This array then contains the results from
simulations of LinearActuator with a damping of 2 to
14 with a step size of 2, i.e. seven simulations are performed.

res = Table @Simulate @LinearActuator,
8t, 0, 4<,
ParameterValues →
8SpringDamper1.d  s<D,
8s, 2, 15, 2<D;

3.3

Fourier Analysis of Simulation Data

Consider a weak axis excited by a torque pulse train. The
axis is modeled by three segments joined by two torsion
springs. The following diagram is imported from the
MathModelica Model Editor where the model was defined.
tau

Pulse1

Torque1

Inertia1

Spring1

Inertia2

Spring2

Inertia3

Figure 12. A WeakAxis model excited by a torque pulse
train.
We simulate the model during 200 seconds:

Simulate@WeakAxis , 8t, 0, 200<D;

PlotSimulation@SlidingMass1.s@tD,
8t, 0, 4<,
SimulationResult → res,
Legend → False D;

The plot of the angular velocity of the rightmost axis
segment appears as follows:
PlotSimulation @8Inertia3.w@tD,
Torque1.τ @tD<, 8t, 0, 200<D;
HInertia3.wL@t D

0.07

HTorque1.τL@tD

0.06
1.5

0.05
1

0.04
0.03

0.5

0.02
t

0.01

50

1

2

3

100

150

200

4

Figure 10. Plots of step responses from seven simulations of
the linear actuator with different camping coefficients.

Figure 13. Plot of the angular velocity of the rightmost axis
segment of the WeakAxis model.

Now assume that we would like to choose the damping d so
that the resulting system behaves as closely as possible to a
certain first order system response.,

Now, let us sample the interpolated function Inertia3.w
using a sample frequency of 4Hz, and put the result into an
array using the Mathematica Table array constructor:

The Modelica Association

49

Modelica 2002, March 18−19, 2002

MathModelica − An Extensible Modeling and Simulation Environment ...
data1 = Table @Inertia3.w@tD,
8t, 0, 200, .25 <D;

4.1

Compute the absolute values of the discrete Fourier
transform of data1 with the mean removed:
fdata1 = Abs@Fourier@data1 −
MeanValue @data1DDD;
Plot the 80 first points of the data.

8
6
4
2

60

80

Figure 14. Plot of the data points of the Fourier transformed
angular velocity.
It can be shown that the frequencies of the eigenmodes of the
system is given by the imaginary parts of the eigenvalues of
the following matrix (c1 and c2 are the spring constants)
i 0
−c1
1
0
Eigenvalues A
−c1
2π
0
k 0

1
0
0
− c1
0
0
0 − c 1 − c2
0
0
0
− c2

0 0
0 0
1 0
0 − c2
0 0
0 − c2

0y
0
0
ê.
0
1
0{

80.256077 	, − 0.256077 	,
0.143343 	, − 0.143343 	, 0, 0<
These values, 0.256077, 0.143344, fit very well with the
peaks in the above diagram.

Using the Symbolic Internal
Representation

In order to satisfy the requirement of a well integrated
environment and language, the new MathModelica internal
representation was designed with a Mathematica compatible
version of the syntax. Note that the Mathematica version of
the syntax has the same internal abstract syntax tree
representation and the same semantics as Modelica, but
different concrete syntax. Which syntax to use, the standard
Modelica textual syntax, or the Mathematica-style syntax for
Modelica is however largely a matter of taste.
The fact that the Modelica abstract syntax tree
representation is compatible with the Mathematica standard
representation means that a number of symbolic operations
such as simplifying model equations, performing Laplace
transformations, and performing queries on code as well as
automatically constructing new code is available to the user.
The capability of automatically generating new code is
especially useful in the area of model diagnosis, where there
is often a need for generating a number of erroneous models
for diagnosis based on corresponding fault scenarios.

Modelica 2002, March 18−19, 2002

term1 ;K; termn //sequencing operator
{term1 ;K; termn } //array/list constructor
term1 term2
//Implied multiplication by space
instead of *
term1 == term2 // Equation equality
Internally
the
MathModelica
system uses
the
MathModelicaFullForm format. This format is the
abstract syntax of the MathModelica language where all the
elements of the language have been defined to be easy to
extract and compare for the functions operating on the
MathModelica language representation, as well as achieving
a high degree of compatibility with both Modelica and
Mathematica.
The following is a simple constant declaration:

8c 1 → 0.7, c2 → 1 <E êê Chop

4

An inherent property of Mathematica is that models or code
is normally not written as free formatted text. Instead,
Mathematica expressions (also called terms) are used,
internally represented as abstract syntax trees. These can be
conveniently written in a tree- like prefix form, or entered
using standard mathematical notation. Every term is a
number, an identifier, or a form such as:

For example, an expression: a+b is represented as
Plus[a,b] in prefix form, also called FullForm
syntax. A while loop is represented as the term
While[test,body].
In order to satisfy the requirement of a well integrated
environment, we designed the new MathModelica internal
representation with a Mathematica compatible version of the
syntax. Note that MathModelica has the same abstract syntax
trees and the same semantics as Modelica, but different
concrete syntax. This means that essentially the same
language constructs are written differently, as illustrated
below.
The Mathematica language syntax uses some special
operators, see below, and arbitrary arithmetic expressions
composed from terms.

10

40

Mathematica Compatible Internal Form

head[term1 , K, termn ]

ListPlot@fdata1@@Range@80DDD,
PlotStyle → 8Red, PointSize@0.015 D<D;

20

Fritzson P., Gunnarsson J., Jirstrand M.

50

model Arr
constant Real
unitarr[2,2] = {{1,0},{0,1}}
"2D Identity";
end Arr;
This
definition
is
stored
internally
in
the
MathModelicaFullForm format which can be retrieved
by calling the function GetDefinition which returns the
internal abstract syntax tree representation of the model:
ff2 = GetDefinition @Arr,
Format → MathModelicaFullForm D

The tree is wrapped into the node Hold[] to prevent
symbolic evaluation of the model representation while we
are manipulating it. All nodes are shown in prefix form
excepts the array/list nodes shown as {...} instead of the
prefix form List[...] for arrays.

The Modelica Association

Fritzson P., Gunnarsson J., Jirstrand M.

MathModelica − An Extensible Modeling and Simulation Environment ...

Hold@ SetType@Arr,
TYPE@ Model @Declaration
@TYPE@ Real, 82, 2<, 8Constant <, 8<D,
VariableComponent @unitarr,
ValueBinding@881, 0 <, 80, 1<<D,
8<, 8<, NullD
D;
"2D Identity"
D, 8<, 8<, 8<
D, 8< , Null, Null
D
D

4.2.1

Definition and Simulation of Model1

The example class Model1 has been drawn in the graphic
model editor and imported into the notebook below:
R=%R

k=%k

c=%c
J=%J

J=%J

EMF1

Inertia1

Spring1

Inertia2

Ground1

Fi

gure 15. Connection diagram of Model1.
We simulate the model, smooth the result, and make a plot.
res0 = Simulate@ Model1, 8t, 0, 25<,
ParameterValues → 8Resistor1.R  0.9<D;

res1 = SmoothInterpolation@res0 D;
The plo t is parametric where we plot the Resistor1
current against its derivative for both the original result and
the smoothed version:
ParametricPlotSimulation@
8HResistor1.iL@tD,
HResistor1.iL '@tD<, 8t, 0, 25<,
SimulationResult → 8res0, res1 <D;
1

•

Abstract syntax. The format systematically sorts out the
different constructs in the language making the
navigation of types and code easier.
• Preserving the syntactic structure of both Modelica and
Mathematica code. This means that the mapping from
Modelica to MathModelica-FullForm format
should be injective, e.g. the source code can be recreated
from the intermediate form, and that transformations
from Modelica via MathModelicaFullForm into
Mathematica style Modelica form should be reversible.
• Explicit semantic structure. The format has reserved
fixed attribute positions for certain kinds of semantic
information, to simplify semantic analysis and queries.
There is also a canonical subset of the format which is
even simpler for semantic analysis, but does not always
recreate exactly the same source code since the same
declaration often can be stated in several ways.
• Symbol table and type representation format. The
MathModelicaFullForm format should be possible
to use in the symbol table, e.g. to represent types. Types
are represented by anonymous type expressions such as
the TYPE node in the above example. Anonymous
means that the type representation is separate from the
entity having the type.
• Internal standard.
The MathModelicaFullForm format should be
used by all the components in the MathModelica
system.

Extracting and Simplifying Model
Equations

0.8
0.6
0.4
0.2
-0.2

0.2

0.4

0.6

-0.2

Figure 16. Parametric plots of the Resistor1 current against
its derivative, both original and smoothed.

4.2.2

Some Symbolic Computations

Now, flatten Model1 and extract the model equations and
the model variables as lists, and compute the lengths of these
lists:

eqn = GetFlatEquations@ Model1 D;
Length @eqnD
48

Length@GetFlatVariables@ Model1 DD
49
There is one equation less than the number of variables.
Therefore, add an equation for zero torque on the right flange
to the equation system:
eqn = Append @eqn,
Inertia2.flange b.tau  0D;

This section will illustrate a few user-accessible symbolic
operations on equations, suc h as obtaining the system of
equations and the set of variables from a Modelica model,
and symbolically simplifying this system of equations with
the intention of performing symbolic Laplace transformation.

The Modelica Association

Inductor1

ConstantVoltage1

A declaration of a variable such as unitarr is represented
by the Declaration node in the abstract syntax. This
node has two arguments: the type and the variable instance.
The type is represented by the TYPE node which stores the
name, array dimension, type attributes (Constant) and
type modifications (which is empty in this case). The
instance argument contains a VariableComponent
including the name of the variable, the initialization
(ValueBinding), at the end the comment string that is
associated with the variable.
There are several goals behind the design of the
MathModelicaFullForm format, which are fulfilled in
the current system:

4.2

L=%L

Resistor1
%na
me=
%V

We would like to simplify the equations by eliminating the
connector variables before further symbolic processing. First
obtain the connector variables from the flattened model:

51

Modelica 2002, March 18−19, 2002

MathModelica − An Extensible Modeling and Simulation Environment ...
connvars = GetFlatConnectionVariables
@Model1D

The transfer function H is obtained by symbolically solving
for Inertia2.w in the equation system eq4, and using the
obtained solution on a form Inertia2.w -> expr to
eliminate Inertia2.w, thus obtaining H:
Inertia2.w
H@s_ D = FirstA
ê.
ConstantVoltage1 .V
Solve @eq4, Inertia2 .wDE

8Resistor1 .p. v, Resistor1.p.i,
Resistor1.n .v, Resistor1 .n. i,
... ....,
Inertia2.flange a.tau <
Use the Eliminate function for symbolic elimination of
some variables from the system of equations.

Hk c1L ê Hk2 c1 + R s c1 J1 + L s 2 c1 J1 +
k 2 s2 J2 + R s c1 J2 + L s 2 c1 J2 +
R s 3 J1 J2 + L s4 J1 J 2L

eqn2 = Eliminate @eqn, connvarsD
der@Inertia1 .phi D == Inertia1 .w &
der@Inertia1 .wD == Inertia1 .a &&
... ...
Inertia2.flange b.tau == 0 &
derH−1L@EMF1 .wD == Inertia2 .phi −
Spring1.phi rel

4.3

4.4

Symbolic Laplace Transformation.

We would now like to perform a Laplace transformation of
the symbolic equation system obtained in the previous
section. This can be done by the application of two
a
transformation rules: der ( −1) [a _ ] → , der[b _ ] → sb .
s
Note that der (−1) is the inverse of taking a derivative, i.e. an
integration operation. Note also that the second rule contains
an implied multiplication.
eq3 = eqn2 ê. 9derH−1L @a_D →

a
s

, der@b_D → s b=

s HInertia1 .phiL == Inertia1 . w &
s HInertia1 .wL == Inertia1 .a &&
... ...
EMF1. w
== Inertia2.phi − Spring1.phi rel
s

shortnames =
8Resistor1 .R → R, Inductor1.L → L,
EMF1.k → k, Inertia1 .J → J1,
Spring1.c → c1, Spring1 .phi rel0 → 0,
Inertia2.J → J2<;
Derive the relation between Inertia2.w and the input
voltage
eq4 =
Eliminate@eq3,
Complement@
GetFlatNonConnectionVariables@Model1D,
8Inertia2.w<DD ê. shortnames

Modelica 2002, March 18−19, 2002

Queries and Automatic Generation of
Models

This example of advanced scripting shows how the easily
accessible internal representation in the form of abstract
syntax trees can be used for automatic generation of models.
The CircuitTemplateFn is a function returning a
symbolic representation of a model. This function has two
formal pattern parameters where the second one specifies an
internal structure. The first parameter is name_, which
matches symbolic names. The underscore in name_ is not
part of the parameter identifier itself, it is just a short form of
the syntax name:_, which means that name will match
any item.
The second pattern parameter is the list
{type1_,type2_,type3_}, internally containing the
three pattern parameters type1_, type2_, type3_.
This second parameter will therefore only match lists of
length 3, thereby binding the pattern variables type1,
type2, and type3 to the three type names presumably
occurring in the list at pattern matching. For example,
matching {type1_,type2_,type3_} against the list
{Capacitor, Conductor, Resistor} will bind
the variable type1 to Capacitor, type2 to
Conductor, and type3 to Resistor.
CircuitTemplateFn@name_,
8type1_, type2_, type3_ <D := H
Model@ name,
type1 a;
type2 b;
type3 c;
Modelica.Electrical.Analog.Basic.Ground g;
Equation@
Connect@g.p, a.pD;
Connect@a.n, b.pD;
Connect@b.p, c.pD;
Connect@b.n, g.pD;
Connect@c.n, g.pD
D
DL

Introduce short names for the model parameter to obtain a
more concise symbolic notation:

Hk c1 HConstantVoltage1. VL 
k2 c1 HInertia2. wL +
... ...
R s3 J1 J2 HInertia2.wL +
L s4 J1 J2 HInertia2.wLL &&

Fritzson P., Gunnarsson J., Jirstrand M.

The aim of this exercise is to automatically generate models
based on this template for all combinations of the types that
extend the type OnePort in the library package
Modelica.Electrical.Analog.Basic.
First we need to extract all the types that extends the
type
OnePort
in
the
library
package
Modelica.Electrical.Analog.Basic. This is done
by performing a query operation on the internal form using
the Select function which has two arguments: the list to be
searched, and a predicate function returning true or false.

s≠ 0

52

The Modelica Association

Fritzson P., Gunnarsson J., Jirstrand M.

MathModelica − An Extensible Modeling and Simulation Environment ...

Only the elements for which the predicate is true are
returned. In this case the query is performed on the list of
model
names
in
the
package
Modelica.Electrical.Analog.Basic. This list is
returned by the function ListModelNames.
First we call GetDefinition below to load the
Modelica.Eletrical.Analog.Basic package into
the internal symbol table:
GetDefinition @Modelica.Electrical.Analog.BasicD;

Then we perform the actual query:
types=Select[
ListModelNames[
Modelica.Electrical.Analog.Basic
],
Function[
modelName,
Not[
FreeQ[
GetDefinition[
modelName,
Format->MathModelicaFullForm
],
HoldPattern[
Extends[
TYPE[Modelica.Electrical.
Analog.Interfaces.
OnePort,{},{},{}
]]]]]]]

We retrieve the definition one of the automatically generated
models, foo53, and unparse it from its internal
representation to the Modelica textual form:
GetDefinition@foo53, Format → ModelicaFormD

model foo53
Modelica.Electrical.Analog.
Basic.Resistor a;
Modelica.Electrical.Analog.
Basic.Capacitor b;
Modelica.Electrical.Analog.
Basic.Inductor c;
Modelica.Electrical.Analog.
Basic.Ground g;
equation
connect(g.p,a.p);
connect(a.n,b.p);
connect(b.p,c.p);
connect(b.n,g.p);
connect(c.n,g.p);
end foo53;

5

8 Modelica.Electrical.Analog.Basic.Inductor,
Modelica.Electrical.Analog.Basic.Capacitor,
Modelica.Electrical.Analog.Basic.Conductor,
Modelica.Electrical.Analog.Basic.Resistor<

All
64
three-type
combinations,
e.g.
{Inductor,Inductor,Inductor},
{Inductor,Inductor,Capacitor},
etc., their
prefixes not shown for brevity, of these 4 types are computed
by taking a generalized outer product of the three types lists,
which is flattened.
typecombinations =
Flatten@Outer
@List, types, types, typesD,
2D;

Length @typecombinationsD
64
We generate a list of 64 synthetic model names by
concatenating the string "foo" with numbers, using the
Mathematica string concatenation operation "<>":
names = Table @ToExpression @
"foo" <> ToString @iDD, 8i, 64<D
8 foo1, foo2, foo3, foo4, foo5, foo6,
foo7, foo8, foo9, foo10, foo11, foo12,
... ... ... ... ... ... ... ... ... ... ...
foo55, foo56, foo57, foo58, foo59, foo60,
foo61, foo62, foo63, foo64 <

Here all 64 test models are created by the call to
MapThread which applies CircuitTemplateFn to
each combination.

The Modelica Association

MapThread @CircuitTemplateFn,
8names, typecombinations <D;

53

Conclusion

This paper has presented a number of important issues
concerning
integrated
interactive
programming
environments, especially with respect to the MathModelica
environment for object-oriented modeling and simulation.
We have especially emphasized environment properties such
as integration and extensibility.
One of the current strong trends in software systems is
the gradual unification of documents and software.
Everything will eventually be integrated into a uniform,
perhaps XML-based, representation. The integration of
documents, model code, graphics, etc. in the MathModelica
environment is one strong example of this trend.
Another important aspect is extensibility. Experience
has shown that tools with built-in extensibility mechanisms
can cope with unforeseen user needs to a great extent, and
therefore often have a substantially longer effective usage
lifetime.
The MathModelica system is currently one of the best
existing examples of advanced integrated extensible
environments. However, as most systems, it is not perfect.
There are still a number of possible future improvements in
the system including enhanced programmability and
extensibility.

Acknowledgements
We would like to thank Peter Bunus for inspiration and great
help in MicroSoft Word formating and conversion from
notebook format when preparing this paper, and Dan
Costello for Word advice. Acknowledgements to the
following individuals for contributions the design and
implementation of the MathModelica system: Andreas
Karström, Pontus Lidman, Henrik Johansson, Yelena
Turetskaya, Mikael Adlers, Peter Aronsson, Vadim
Engelsson, and to Jan Brugård and Andreas Idebrant for
contributions to the MathModelica documentation including
a number of the examples used in this paper. Thanks to
Kristina Swenningsson for creating a nice working
athmosphere at MathCore AB. Acknowledgements also to
the members of the Modelica Association for creating the

Modelica 2002, March 18−19, 2002

MathModelica − An Extensible Modeling and Simulation Environment ...
Modelica language, and to EU under the RealSim project for
supporting part of the development of MathModelica.

References
[Andersson-94] Mats Andersson. Object-Oriented Modeling
and Simulation of Hybrid Systems. Ph.D. thesis, Department of
Automatic Control, Lund Institute of Technology, Lund,
Sweden, 1994.
[Bunus-00] Peter Bunus, Vadim Engelson, Peter Fritzson.
Mechanical Models Translation and Simulation in Modelica. In
Proceedings of Modelica Workshop 2000. Lund University,
Lund, Sweden, Oct 24-26, 2000.

Fritzson P., Gunnarsson J., Jirstrand M.

[Jirstrand-99] Mats Jirstrand, Johan Gunnarsson, and Peter
Fritzson. MathModelica - a new modeling and simulation
environment for Modelica. In Proceedings of the Third
International Mathematica Symposium, IMS’99, Linz, Austria,
Aug, (1999).
[Knuth-84] Donald E. Knuth. Literate Programming. The
Computer Journal, NO27(2) ( May): 97-111. (1984)
[Knuth-94] Donald E. Knuth, Silvio Levy. The Cweb System of
Structured Documentation /Version 3.0. Addison-Wesley Pub
Co; 1994.
[MA-02a] Modelica Association. Modelica - A Unified ObjectOriented Language for Physical Systems Modeling - Tutorial
and Design Rationale Version 2.0, March 2002.

[Elmqvist-78] Hilding Elmqvist. A Structured Model Language
for Large Continuous Systems. PhD thesis, Department of
Automatic Control, Lund Institute of Technology, Lund,
Sweden.

[MA-02b] Modelica Association. Modelica - A Unified ObjectOriented Language for Physical Systems Modeling - Language
Specification Version 2.0, February 2002.

[Elmqvist-96] Hilding Elmqvist, Dag Bruck, Martin Otter.
Dymola - User's Manual. Dynasim AB, Research Park Ideon,
Lund, 1996.

[Mattsson-93] Sven-Erik Mattsson, Mats Andersson, and KarlJohan Åström. Object-oriented modelling and simulation. In
Linkens, Ed., CAD for Control Systems, chapter 2, pp. 31-69.
Marcel Dekker Inc, New York, 1993.

[Elmqvist-99] Hilding Elmqvist, Sven-Erik Mattsson and Martin
Otter. Modelica - A Language for Physical System Modeling,
Visualization and Interaction. In Proceedings of the 1999 IEEE
Symposium on Computer-Aided Control System Design, Hawaii,
Aug. 22-27, 1999.

[Otter-95] Martin Otter. Objektorientierte Modellierung
mechatronischer Systeme am Beispiel geregelter Roboter,
Dissertation, Fortshrittberichte VDI, Reihe 20, Nr 147. 1995.

[Engelson-99] Vadim Engelson, Håkan Larsson, Peter Fritzson.
1999. A Design, Simulation and Visualization Environment for
Object-Oriented Mechanical and Multi-Domain Models in
Modelica. In Proceedings of the IEEE International Conference
on Information Visualization, pp 188-193, London, July 14-16,
1999.
[Engelson-00] Vadim Engelson. Tools for Design, Interactive
Simulation, and Visualization of Object-Oriented Models in
Scientific Computing. Ph.D. Thesis, Dept. of Computer and
Information Science, Linköping University, Linköping, Sweden.
2000.
[Fritzson-83] Peter Fritzson. Symbolic Debugging through
Incremental Compilation in an Integrated Environment. The
Journal of Systems and Software, 3, 285-294, (1983).
[Fritzson-92a] Peter Fritzson, Dag Fritzson. The Need or HighLevel Programming Support in Scientific Computing - Applied
to Mechanical Analysis. Computers and Structures, Vol. 45, No.
2, pp. 387-295, 1992.
[Fritzson-92b]Peter Fritzson, Lars Viklund, Johan Herber, Dag
Fritzson:
Industrial
Application
of
Object-Oriented
Mathematical Modeling and Computer Algebra in Mechanical
Analysis, In Proc. of TOOLS EUROPE'92, Dortmund,
Germany, March 30 - April 2, 1992. Published by Prentice Hall.
[Fritzson-95] Peter Fritzson, Lars Viklund, Dag Fritzson, Johan
Herber. High Level Mathematical Modeling and Programming
in Scientific Computing. IEEE Software, pp. 77-87, July 1995.

[Otter-96] Martin Otter, Hilding Elmqvist, Francois E. Cellier.
Modeling of Multibody Systems with the Object-oriented
Modeling Language Dymola. Nonlinear Dynamics, 9:91-112,
Kluwer Academic Publishers. 1996.
[Saldamli-01] Levon Saldamli, Peter Fritzson. A ModelicaBased Language for Object-Oriented Modeling with Partial
Differential Equations. In Proceedings of the 4th International
EuroSim Congress, Delft, the Netherlands, June 26-29, 2001.
[Sandewall-78] Erik Sandewall. Programming in an Interactive
Environment: the "LISP" Experience. Computing Surveys, Vol.
10, No. 1, March 1978.
[Teitelman-69] Warren Teitelman. Toward a Programming
Laboratory. In Proc. of First Int. Jt. Conf. on Artificial
Intelligence, 1969.
[Teitelman-74] Warren Teitelman. INTERLISP Reference
Manual. Xerox Palo Alto Research Center, Palo Alto, CA, 1974.
[Teitelman-77] Teite lman, W. A display oriented programmer's
assistant. Computer, 39--50. (1977, August 22--25)
[Tiller-01] Michael M. Tiller. Introduction to Physical Modeling
with Modelica. Kluwer Academic Publishers, 2001.
[Visio] http://www.microsoft.com/office/visio/
[Wolfram-88] Stephen Wolfram. Mathematica System for Doing
Mathematics by Computer. Addison-Wesley, 1988.
[Wolfram-97] Stephen Wolfram. The Mathematica Book ,
Wolfram Media, 1997.

[Fritzson-98] Peter Fritzson and Vadim Engelson. Modelica - A
Unified Object-Oriented Language for System Modeling and
Simulation. In Proceedings of the 12th European Conference on
Object-Oriented Programming, ECOOP'98 , Brussels, Belgium,
July 20-24, 1998.
[Fritzson-98b] Peter Fritzson, Vadim Engelson, Johan
Gunnarsson. An Integrated Modelica Environment for
Modeling, Documentation and Simulation. In Proceedings of
Summer Computer Simulation Conference '98, Reno, Nevada,
USA, July 19-22, 1998.
[Goldberg-89] Adele Goldberg and David Robson, Smalltalk 80, The Language. Addison-Wesley, 1989

Modelica 2002, March 18−19, 2002

54

The Modelica Association

Brück D., Elmqvist H., Mattsson S.E., Olsson H.,

Dymola for Multi−Engineering Modeling and Simulation

Dymola for Multi-Engineering Modeling and Simulation
Dag Brück, Hilding Elmqvist, Sven Erik Mattsson and Hans Olsson
Dynasim AB, Research Park Ideon, SE-223 70 Lund, Sweden
E-mail: info@dynasim.se

Abstract

such as the power train library. Predefined libraries can
be expanded with user-written model libraries.

Dymola is an integrated environment for developing
models in the Modelica language. The growing use of
Dymola has over time increased the demands on the
development environment. Requests for extension and
redesign originate from two sources: the need to
simplify the use of Dymola to better support new and
inexperienced users, and the need to better support
“power users” which model extremely large and
complex systems.

The growing use of Dymola has over time increased
the demands on the development environment.
Requests for extension and redesign originate from two
sources:
• The need to simplify the use of Dymola to better
support new users and inexperienced users. This is of
particular importance when Dymola is used for
teaching.

Key areas in the development of Dymola are: a
simplified and more coherent graphical user interface,
browsing facilities for navigating large and complex
systems, new experiment facilities for managing
complex simulation tasks, distributed (parallel)
simulation, and integrated version control to help
manage model libraries and complete models.

• The need to better support “power users” which
model extremely large and complex systems. In this
case, the user needs significant support from the
environment to handle very large amounts of
information, to document complex systems, and to
verify results. The development of large component
libraries is a collaborative effort involving several
people, which requires adequate tool support. Also,
different software packages are used which underlines
the need for information exchange.

The paper describes the extensively redesigned
Dymola 5, with an emphasis on new features compared
to Dymola 4.

Key areas in the development of Dymola are:

Introduction

• Simplified graphical user interface. In addition to
better structuring, the use of modern GUI elements
(help facilities, dockable windows etc.) makes it easier
to use the program.

Dymola is an integrated environment for developing
models in the Modelica language [Modelica
Association, 2002; Tiller, 2001], and a simulation
environment for performing experiments. It is used
since several years within major companies for
complex simulations. For example, Dymola has been
used to simulate detailed models of complete vehicles
including engine, transmission and chassis [Tiller et al.,
2000].

• Browsing facilities for navigating large and complex
systems. This includes class browsers for navigating
component libraries and a new model browser for
navigating complex models.
• New experiment facilities for managing complex
simulation tasks. They handle multiple parameter sets,
models of different complexity, and tools for validating
models.

Dymola uses hierarchical object-oriented modeling to
describe, in increasing detail, the systems, subsystems
and components of a model. Reuse of modeling
knowledge is a key issue, and is supported by use of
libraries containing model classes and by the use of
inheritance. Physical couplings are modeled by
defining physical connectors and graphically
connecting submodels.

• Distributed simulation on several computers,
allowing parallel simulation for tasks such as
optimization.
• Integrated version control to help manage model
libraries and complete models. The user needs support
for version control to store/retrieve models and
associated data, to compare versions of a model, plus
mechanisms for documenting the evolution of models.

Model libraries are available for electronics, rotational,
translational and 3D mechanics, thermodynamics,
hydraulics and control systems. The libraries range
from basic components to more specialized domains

The Modelica Association

55 − 1

Modelica 2002, March 18−19, 2002

Dymola for Multi−Engineering Modeling and Simulation

Brück D., Elmqvist H., Mattsson S.E., Olsson H.,

Experimental Data

Model Parameters

Editor
Modelica
Libraries

Optimization

Distributed
Simulation

Scripting
Modelica

Dymola Program

Visualization
and Analysis

Simulation

Modeling

User Models
CAD (DXF, STL,
topology, properties)
External Graphics
(vector, bitmap)

Symbolic Kernel
HIL
dSPACE

Experimentation

Plot and Animation

C Functions

Reporting

LAPACK

xPC

Simulink
MATLAB

Model doc. and
Experiment log (HTML,
VRML, PNG, …)

Figure 1. The Dymola architecture.
large sets of equations. Efficient simulation, including
realtime simulation of hydraulic systems, can only be
achieved after extensive symbolic transformations of
the equations [Elmqvist et al., 2002].

Dymola architecture
Dymola is an integrated environment for modeling and
simulation. Figure 1 describes the architecture and
connectivity of Dymola 5.

Dymola provides a complete simulation environment,
but can also export code for simulation in Simulink. In
addition to the usual offline simulation, Dymola can
generate code for specialized Hardware-in-the-Loop
(HIL) systems, such as, dSPACE, xPC and others.

At the modeling level, models are composed from
library components (from the Modelica standard
library, other free libraries, commercial and proprietary
libraries), as well as models developed by the user.
Models are either composed of other, more primitive,
components, or described by equations at the lowest
level. The equation-based nature of Modelica is
essential for enabling truly reusable libraries.
Measurement data and model parameters cover
additional model aspects.

Recent developments in Dymola 5 allow distributed
(parallel) simulation on several computers in a
network, for example to perform parameter studies.
There are facilities for optimization, also carried out
with parallel simulation runs. Such experiments are
controlled with a Modelica-based scripting language,
which combines the expressive power of Modelica
with access to external C libraries, e.g., LAPACK.

Detailed model knowledge can be imported from CAD
packages. Examples of such information are mass and
inertia of 3D mechanical bodies, and the topology of a
multibody system (bodies and joints). Graphical
properties may be described in DXF and STL format.
The icons of model components are defined either by
drawing shapes in Dymola, or by importing graphics
from other tools in common vector or bitmap formats.

The built-in plotting and animation features of Dymola
provide the basis for visualization and analysis of
simulation data. Experiments are documented with logs
of all operations in HTML format, including
animations in VRML (Virtual Reality Modeling
Language) and images. Models and libraries are
extensively documented in HTML automatically
generated by Dymola from the models themselves.

At the simulation level, Dymola transforms a
declarative, equation-based, model description into
efficient simulation code. Advanced symbolic
manipulation (computer algebra) is used to handle very

Modelica 2002, March 18−19, 2002

55 − 2

The Modelica Association

Brück D., Elmqvist H., Mattsson S.E., Olsson H.,

Dymola for Multi−Engineering Modeling and Simulation

Figure 2. The model editor.
also graphics and links to other resources may be
included.

Graphical user interface

Editing of models at the fundamental level has been
improved by syntax highlighting of the Modelica code,
see Figure 3. Another convenience is that models can
be dragged from the package browser into the text
editor, which gives access to fundamental types in the
Modelica library with no typing. Editing in the textual
view is instantaneously represented in the graphical
view.

The graphical user interface has been extensively
redesigned. In Dymola 5 emphasis has been put both
on simplifying the task of building models for the
novice user and on providing tools for building and
managing large and complex models developed by a
collaborating team of engineers.
Graphical editor
Figure 2 shows a screen dump of the Dymola modeling
environment. The top left tree browser shows the
(Package) hierarchy of a library called SimpleCar
[Tiller, 2001]. When I4_Engine is chosen different
representations (icon and composition diagram) of the
model I4_Engine are shown. The lower left tree
browser, “Component and Extends hierarchy”, shows
the hierarchical decomposition, for example, that the
engine model contains crankshaft-inertia and the four
cylinders: cylinder1, … cylinder4. A visual
representation of that is shown in the Diagram in the
middle. An Icon representation of the engine is shown
at the top right. A The Documentation window is
shown at the lower right. Such a documentation
window contains HTML formatted information, i.e.

The Modelica Association

Figure 3. Model editor with syntax highlighting.
The Icon representation can be created with a built-in
graphical editor. It allows insertion of lines, rectangles,
ellipses, polygons and text strings. Figure 4 shows the
tool bar for the graphical editor.

55 − 3

Modelica 2002, March 18−19, 2002

Dymola for Multi−Engineering Modeling and Simulation

Brück D., Elmqvist H., Mattsson S.E., Olsson H.,

Browsing
The “Package hierarchy” browser shows the library
structure and it is possible to drag a component model
from the tree into a Diagram in order to add a
component to a model, see Figure 6. The browser can
either be docked to the editor window as shown in
Figure 2, or be dragged onto the desktop.

Figure 4. Drawing tools.
It is also possible to insert scalable bitmaps created in
other tools like MS Paint and scalable vector graphics
from the clipboard. Advanced graphics can thus be
created in, for example, MS PowerPoint or MS Visio
and inserted into Dymola as Icons or backgrounds for
the composition diagrams.
The toolbar also contains controls for setting graphical
attributes, e.g., foreground and background color, line
style and fill pattern.
As indicated above, Dymola 5 supports Modelica’s
notion of different layers of information:
• Icon layer
• Diagram layer
• Documentation layer
• Modelica text layer
• Model dependencies layer (generated by Dymola)
It should be noted that Dymola 5 allows several layers
to be shown simultaneously.

Figure 6. The package browser.
The components of a library can also be viewed as
icons in a separate library window, see Figure 7, from
which components can be dragged.

Figure 5. Navigation tools.
Figure 5 shows the buttons of the navigation tool in
Dymola. The first two buttons are used to navigate in
the component hierarchy, similar to navigation with a
web browser. The back arrow displays the previously
visited component; the forward arrow negates the
backward move. The other buttons are used to display
layers in the graphical editor
Simplifications
In response to user comments, a major design goal was
to simplify the graphical user interface. The first step
has been to reduce the number windows: both model
editing and simulation is controlled from a single
window, and plot/animation windows are not opened
until a simulation has been performed (or opened
explicitly by the user). The design has been influenced
by common paradigms, for example, the web-browser
approach to navigation.

Figure 7. Library window.

The design of Dymola 5 more closely follows
published guidelines [Microsoft, 1999], and has in
general adopted more modern idioms compared to
Dymola 4. Common operations are invoked by buttons
in addition to menu commands. Dockable windows
which either can be part of the main editor window,
float on the desktop or be minimized, are used for
browsers and similar tools.

The hierarchical structure of a model is shown in the
“Component and Extends hierarchy” browser. The toplevel components of an engine model are shown in
Figure 8.
Maneuvering in this hierarchical structure can be done
by clicking in the tree which then changes the view to
the selected model. It is also possible to point at an
icon and “zoom-in” on the content, i.e. next abstraction
layer.

The extended use of commonly used GUI elements
(toolbars, dockable windows, “what’s this” help
information) makes Dymola consistent with other
applications.

Modelica 2002, March 18−19, 2002

When a model is chosen in the package browser, it
becomes the root model of the graphical editor. The
root model is used in check, translate and simulate

55 − 4

The Modelica Association

Brück D., Elmqvist H., Mattsson S.E., Olsson H.,

Dymola for Multi−Engineering Modeling and Simulation

• The default values specified in the model of a
component, when a reasonable default exists.
• Parameter values that are specified in the modifier list
of a specific component. For example, the crankshaft
shift is different for each cylinder in an engine.
• Model parameters which are specific for a given toplevel model. Such parameters are specified at the toplevel of the model, and then propagated through a
hierarchical modifier.
Figure 8. The component browser.

Dymola allows the user to set parameters and initial
conditions at each of these levels, either through the
model editor or while running simulations.

commands. Navigation into its component hierarchy
allows inspection of model details, but does not change
the root model or permit editing. This view is
consistent with the common metaphor used in web
browsers.
Dymola 5 has search facilities, for example to search
for models that mention particular keywords in the
documentation. It may also be useful to find models
with a component or a parameter with a known name.
For advanced users, the biggest problem has been to
organize the large amount of information in complex
models and extensive component libraries. The biggest
improvement in Dymola 5 is the use of hierarchical
browsers for navigating packages and models. The
package browser is also the natural focal point for
copying/renaming of models and restructuring of
packages.

Figure 9. Parameters for specification of details of
the engine
For visualization, Dymola offers plotting and 3D
animation. Figure 10 shows a window with multiple

Advanced Modelica concepts, such as, replaceable
classes, is given an intuitive user interface via the
component browser. If a class is declared as
replaceable, the actual class can be dragged from the
package browser onto the replaceable class in the
component browser. Other features that benefit from
the new user interface are choices (a selection of
replaceable classes) and arrays of components.
Visualization in 3D
The graphical editor represents a abstraction of the
model, the object diagram. When building 3D
mechanical systems, the user greatly benefits from the
instantaneous 3D visualization available in Dymola 5.
Parameters settings for e.g. the length of a bar can be
visually checked in the animation window.

Experimentation
By “experimentation” we mean all the steps necessary
to use a model in order to achieve useful results. That
includes setting up model parameters and initial
conditions, running simulations, analysis of simulation
data, and report generation.
Parameter values specific to the studied model have to
be entered in a form associated with a component, see
Figure 9. Parameters and initial conditions can be set at
three different abstraction levels:

The Modelica Association

Figure 10. Plot of car speed, engine RPM and
selected gear versus time.

55 − 5

Modelica 2002, March 18−19, 2002

Dymola for Multi−Engineering Modeling and Simulation

Brück D., Elmqvist H., Mattsson S.E., Olsson H.,

Distributed simulation

plots of car speed, engine RPM and selected gear
versus time during such an experiment. The car
accelerated to 100 km/h in 6.66 seconds. Plots can be
exported as PNG files for inclusion in session log or as
vector graphics.

During the design phase, hundreds or thousands of
simulations have to be performed with different
parameter sets. Optimization is used to determine
parameters in the model by fitting simulation results to
experimental data and to optimize the parameters of a
design. It is a task that significantly benefits from
parallel simulation. Dymola 5 can use many computers
and automatically schedule simulations in parallel to
shorten the design cycle.

Animation is provided by specialized visualization
properties which are present in the mechanical libraries
by default. These properties are calculated during
simulation and then used to show 3D views in Dymola,
as shown in Figure 11. It is also possible to export such
animations in VRML format [VRML, 1997], which
can be examined with special viewers or with plugins
for web browsers.

Figure 13 shows the Dymola monitoring window for
parallel simulations. It shows the status of each
simulation run: the parameters used and optional
criteria result. The Dymola scheduler assigns tasks to
computers as they become available. When a
simulation finishes, the next task is run on the freed
computer. Transfers of the simulation code, input data
(parameters and initial conditions) and results are fully
automated.

Figure 11. Animation of an automatic gearbox.
Dymola 5 has powerful features for postprocessing of
simulation results. It is possible to compare simulation
results with experimental data. Data can be imported
and exported to other programs like Matlab and
Microsoft Excel. There is a scripting language based on
Modelica for automating design studies and analysis.
Interfaces to subroutine packages such as LAPACK (or
other libraries written in C or FORTRAN) enables
advanced numerical calculations. The scripting
language is also used for running parameter studies in a
distributed environment (see below) and for
performing optimization.

Figure 13. Dymola monitoring window for parallel
simulations.
During normal simulation on a single computer, a
simulation is performed through cooperation between
the Dymola program and a separate simulation process.
In a distributed environment, a third party, known as
the simulation proxy, handles data transfers between
Dymola and the simulation task; the use of a proxy
allows exactly the same simulation code to run locally
and on another computer. As a special case, the
“distributed” scheme can utilize multiple CPUs on one
computer.

TCP/IP
Proxy

Simulator

Dymola

Proxy
DDE
Simulator

Figure 12. Dymola session window

Figure 14. Architecture of distributed simulation.

Automatic logging of design sessions including
graphics is provided as HTML code for archiving and
sharing over the Internet, see Figure 12. A complete
experiment report can be written by editing the session
log.

A proxy is started on each machine willing to act as
“compute server”, see Figure 14. On receiving a
connection via TCP/IP from a Dymola program, its
first task is to help copy the simulation code and input
files to a unique area on the server. It then relays
parameter settings and commands from Dymola, and

Modelica 2002, March 18−19, 2002

55 − 6

The Modelica Association

Brück D., Elmqvist H., Mattsson S.E., Olsson H.,

Dymola for Multi−Engineering Modeling and Simulation

handles data transfers from the simulation to Dymola
for online animation and plotting. The Dymola
program maintains a list of computers that may be
asked to run simulations; the user can control this list
by simple commands.

• Provide a structure for organizing, storing and
retrieving information (models, documentation,
experiment data).
• Support the exchange of information and simplify
reuse of models throughout the organization.

This scheme for distributed simulation is designed for
cooperative sharing of resources and quite simple;
security measures are limited. First, a computer can
only be used as server after the proxy has been started.
Second, the proxy runs as an unprivileged process,
having only the capabilities of the user starting it. Load
is limited because each proxy blocks requests while a
simulation is running, but it is possible to start
additional proxies to handle multiple simulations (e.g.,
if the computer has multiple CPUs). Ways to utilize
existing system security features need to be further
investigated.

• Ensure that correct information is available to each
user (versions of libraries, corresponding experiments).
A version control system provides means to track
changes to a set of files. A “commit” operation
associates a developer and documentation with each
change to the common storage of files. The Modelica
text of two versions can be compared, and it is possible
to back up to any previous version.
The underlying version control system must be able to
support multiple concurrent developers working on the
same set of models. Extensive locking of files is
undesirable in a collaborative environment, and more
recent tools also support concurrent development of
closely related parts (with appropriate safety nets). A
single physical person may have multiple roles in the
development or use of the library.

Collaborative development
In developing model components for a complex system
such as a vehicle, many different kinds of competence
are needed. Experts in engines, transmissions and
chassis etc. are needed. Because several people are
involved in the process, it becomes essential to break
up or decompose the overall problem into modular
units during development.

Tracability is essential for maintaining quality over
time. Tool enforcement to document modifications
before they become publicly available gives the
opportunity to review changes and improves quality.
The development history and documentation of
changes may also be needed for tracing model
incompatibilities, for example.

The equation-based modeling supported by the
Modelica language is fundamental in enabling true
reuse of modeling knowledge and the practical use of
model libraries. Dymola is able to transform equations
of subcomponents as required by the structure of the
system. Without the equation-based foundation, several
variants of a single model are needed to handle
different computational causality. Even worse would
have been that the user of a library is given the
responsibility to analyze the computational causality of
the system in order to pick the right variant.

Model testing should be integrated with model
development, which implies that the version control
system must be able to handle test scripts, support
utilities and binary test data. Regression testing, where
models are simulated and compared with known good
simulation results, is very powerful in detecting
involuntary changes to model libraries. A failed
regression test may cause either a change of a model,
or the revision of the test itself.

Inheritance is also important for supporting reuse.
Model libraries may include partial models that
describe common properties of a set of component
types. Such a partial model is conveniently used as a
base class to develop models for the individual types of
the set by just adding a specific part that distinguish it
from the others in the set. This approach makes it
simpler to add new component models as well as
simplifies maintenance since the common properties of
the component types are described only once.

Multiple libraries are often used together. In this case,
version compatibility across libraries becomes
essential. It must be possible to “tag” releases of
multiple libraries to indicate compatibility at the
project level.
Dymola will support storing, retrieving, etc. of models
in version control systems such as CVS (Concurrent
Version System) [CVS]. We have deliberately chosen
to build on existing version control systems, which
offers greater flexibility and better integration than a
proprietary system. Because of the textual
representation of models in the Modelica language,
existing text-based tools can be used, for example, to
compare versions. To browse changes in large systems,
support in the graphical environment of Dymola is
needed.

Furthermore, as more people are involved in the
process, the development is geographically and
chronologically distributed because it is natural to have
centers with specific core-competencies. This implies
that the modular units developed must be seamlessly
integrated to solve the overall problem, and the
partitioning should be able to reflect the organizational
structure of the model development teams.

The use of public libraries has increased in industry
over several years. More recent is “open source

In order to increase quality and reduce development
time, tools should be made available to

The Modelica Association

55 − 7

Modelica 2002, March 18−19, 2002

Dymola for Multi−Engineering Modeling and Simulation

Brück D., Elmqvist H., Mattsson S.E., Olsson H.,

Acknowledgements

development”, which can be described as the loosely
organized development (typically of software) by
several geographically separated parties. Public
websites, such as SourceForge, support Open Source
development with web-based tools and CVS. The
Modelica Standard Library is maintained as a project at
SourceForge.

The authors would like to thanks all users of Dymola,
who through their suggestion have directly influenced
the development of Dymola.
This work was in parts supported by the European
Commission under contract IST-199-11979 with
Dynasim AB under the Information Societies
Technology as the project entitled “Real-time
simulation for design of multi-physics systems”.

Library protection
There are many closed simulation packages on the
market where you are not able to see what model is
used. Modeling is an art in the sense of describing the
relevant aspects of the object under observation. It is
thus very important to be able to see what assumptions
and approximation that the author of a model made.
Dymola is open to view all and possibly modify the
details by showing of the Modelica code. However, if a
company want to protect proprietary information when
shipping models, Dymola will support encryption of
model details.

References
CVS: http://www.cvshome.org/
Elmqvist, Hilding, Sven Erik Mattsson and Hans
Olsson (2002): “New Methods for Hardware-in-theloop Simulation of Stiff Models”, Modelica 2002,
Modelica Association.
Microsoft (1999): Microsoft Windows User
Experience, Microsoft Press.

A protected library typically consists of parts that are
open, and other parts that need protection. Protected
parts may require different degree of information
hiding, for example

Modelica Association (2002): “Modelica — A Unified
Object-Oriented Language for Physical Systems
Modeling”, Language specification version 2.0,
January 30, 2002.

• Preventing unauthorized modification of models (but
viewing is unrestricted).

Tiller, Michael, Paul Bowles, Hilding Elmqvist, Dag
Brück, Sven Erik Mattsson, Andreas Möller and Hans
Olsson (2000): “Detailed Vehicle Powertrain Modeling
in Modelica”, Modelica 2000, Modelica Association.

• Parameters and documentation are visible, but model
structure and equations are protected.

Tiller, Michael (2001): Introduction to Physical
Modeling with Modelica, Kluwer Academic Publ.

• The model is regarded as a “black box”. Only model
connectors and the icon are available to the user.

VRML (1997): “Information technology — Computer
graphics and image processing — The Virtual Reality
Modeling Language (VRML) — Part 1: Functional
specification and UTF-8 encoding”, International
Standard ISO/IEC 14772-1:1997.

The other aspect of library protection is to ensure
authorized use. In this case, any use of the library is
controlled by options in a license file. A special license
is also needed to make protected libraries in order to
prevent unauthorized distribution.

Modelica 2002, March 18−19, 2002

55 − 8

The Modelica Association

Session 3a

Automotive Powertrains and
Hardware-in-the-Loop Simulation

The Modelica Association

57

Modelica 2002, March 18−19, 2002

Modelica 2002, March 18−19, 2002

58

The Modelica Association

Elmqvist H., Mattsson S.E., Olsson H.

New Methods for HIL Simulation of Stiff Models.

1HZ0HWKRGVIRU+DUGZDUHLQWKHORRS6LPXODWLRQ
RI6WLII0RGHOV
+LOGLQJ(OPTYLVW6YHQ(ULN0DWWVVRQDQG+DQV2OVVRQ

'\QDVLP/XQG6ZHGHQ(PDLO^HOPTYLVWVYHQHULNKDQV`#G\QDVLPVH

$EVWUDFW

VWHSVL]HVWKDWFDQEHXVHG8VLQJWKHLPSOLFLW(XOHU
PHWKRGRQWKHRWKHUKDQGLPSOLHVWKDWDQRQOLQHDU
V\VWHPRIHTXDWLRQVQHHGVWREHVROYHGDWHYHU\VWHS
7KHVL]HRIWKLVV\VWHPLVDWOHDVWDVODUJHDVWKHVL]HRI
WKHVWDWHYHFWRUQ6ROYLQJODUJHQRQOLQHDUV\VWHPVRI
HTXDWLRQVLQUHDOWLPHVRPHZKDWSUREOHPDWLFEHFDXVH
WKHQXPEHURIRSHUDWLRQVLV2QDQGWKHQXPEHURI
LWHUDWLRQVPLJKWYDU\IRUGLIIHUHQWVWHSV5HGXFLQJWKH
VL]HRIWKHQRQOLQHDUSUREOHPLVDGYDQWDJHRXV'XHWR
WKHK\EULGQDWXUHRIWKHV\VWHPWKH-DFRELDQRIWKH
QRQOLQHDUV\VWHPFDQFKDQJHGUDVWLFDOO\EHWZHHQVWHSV
7KLVPDNHVLWGLIILFXOWWRDSSO\PHWKRGVUHO\LQJRQ
-DFRELDQXSGDWLQJ

7KHSRVVLELOLWLHVRIPXOWLGRPDLQKLHUDUFKLFDO
PRGHOLQJLQ'\PRODRIWHQOHDGWRPRGHOVZLWKERWK
IDVWDQGVORZSDUWVDQGWKHVLPXODWLRQSUREOHPV
EHFRPHVWLII7KHXVXDOXVHRIWKHH[SOLFLW(XOHU
PHWKRGIRUKDUGZDUHLQWKHORRSVLPXODWLRQVLVQRW
DSSURSULDWHEHFDXVHLWUHTXLUHVYHU\VPDOOVWHSVL]HV
DQGWKXVWRRODUJHFRPSXWDWLRQDOHIIRUWV7KHLPSOLFLW
(XOHUPHWKRGDOORZVODUJHUVWHSVL]HVWREHXVHG
+RZHYHUDQRQOLQHDUV\VWHPRIHTXDWLRQVQHHGVWREH
VROYHGDWHDFKVWHS5HGXFLQJWKHVL]HRIWKHQRQOLQHDU
SUREOHPLVDGYDQWDJHRXV7KHPHWKRGRILQOLQH
LQWHJUDWLRQZDVLQWURGXFHGWRVXSSRUWWKLV7KH
GLVFUHWL]DWLRQIRUPXODVRIWKHLQWHJUDWLRQPHWKRGDUH
FRPELQHGZLWKWKHPRGHOHTXDWLRQVDQGVWUXFWXUDO
DQDO\VLVDQGFRPSXWHUDOJHEUDPHWKRGVDUHDSSOLHGRQ
WKHDXJPHQWHGV\VWHPRIHTXDWLRQV7KLVSDSHU
GHVFULEHVDQGLOOXVWUDWHVVRPHYHU\LPSRUWDQW
LPSURYHPHQWVLQ'\PROD
VVXSSRUWRIWKHLQOLQH
LQWHJUDWLRQPHWKRG7KHV\PEROLFDQDO\VLVDQG
PDQLSXODWLRQKDYHEHHQLPSURYHGDQGLWUHGXFHVLQ
PDQ\FDVHVWKHVL]HRIWKHQRQOLQHDUV\VWHP
GUDVWLFDOO\$QDO\WLF-DFRELDQVIRUWKHQRQOLQHDUV\VWHP
DOVRLQFUHDVHHIILFLHQF\DQGUREXVWQHVV6XSSRUWRI
LQOLQHLQWHJUDWLRQRIKLJKHURUGHUOHDGVWREHWWHU
DFFXUDF\IRUODUJHUVWHSV

7KHPHWKRGRILQOLQHLQWHJUDWLRQ>@ZDVLQWURGXFHGWR
KDQGOHVXFKFDVHV7KHGLVFUHWL]DWLRQIRUPXODVRIWKH
LQWHJUDWLRQPHWKRGDUHFRPELQHGZLWKWKHPRGHO
HTXDWLRQVDQGVWUXFWXUDODQDO\VLVDQGFRPSXWHUDOJHEUD
PHWKRGVDUHDSSOLHGRQWKHDXJPHQWHGV\VWHPRI
HTXDWLRQV)RUDURERWLFVPRGHOZLWKVWDWHVWKHVL]H
RIWKHQRQOLQHDUV\VWHPRIHTXDWLRQVFRXOGEHUHGXFHG
WRRQO\7KLVPHWKRGKDVKDGOLWWOHSUDFWLFDOXVH
EHFDXVHFHUWDLQSUDJPDVDERXWWKHVWUXFWXUHRIWKH
PRGHOHTXDWLRQVKDGWREHSXWLQWRWKHPRGHOE\WKH
XVHU
$QRWKHUPHWKRGPL[HGPRGHLQWHJUDWLRQRI
UHGXFLQJWKHVL]HRIWKHV\VWHPRIQRQOLQHDUHTXDWLRQV
LVWRXVHH[SOLFLWGLVFUHWL]DWLRQRQVORZVWDWHVDQG
LPSOLFLWRQIDVWVWDWHV7KHSUREOHPLVWKHQWRILQGWKH
SDUWLWLRQLQJRIWKHVWDWHYHFWRULQWRVORZDQGIDVWVWDWHV
$PHWKRGEDVHGRQOLQHDUL]DWLRQDQGHLJHQYDOXH
DQDO\VLVZDVSUHVHQWHGLQ>@6LQFHWKHSDUWLWLRQLQJLV
EDVHGRQOLQHDUL]DWLRQVSHFLDOFDUHLVQHHGHGIRUKLJKO\
QRQOLQHDUDQGSDUWO\GLVFUHWHPRGHOVXFKDVIULFWLRQ,Q
DGGLWLRQLWUHTXLUHVDSUHSURFHVVLQJVWHSWKDWLQFOXGHV
RIIOLQHVLPXODWLRQDQGVXLWDEOHLQSXWV,WLVWKXVQRW
VWUDLJKWIRUZDUGWRXVHWKLVPHWKRG

,QWURGXFWLRQ
5HDOWLPHVLPXODWLRQRISK\VLFDOPRGHOVLVDJURZLQJ
ILHOGRIDSSOLFDWLRQVIRUVLPXODWLRQVRIWZDUH2QHJRDO
LVWREHDEOHWRVLPXODWHPRUHDQGPRUHFRPSOH[
PRGHOVLQUHDOWLPHZLWKIDVWVDPSOLQJUDWHV0DQ\RI
WKRVHPRGHOVDUHPXOWLHQJLQHHULQJPRGHOVZKLFK
PHDQVWKDWWKH\FRQWDLQFRPSRQHQWVIURPPRUHWKDQ
RQHHQJLQHHULQJGRPDLQ0HFKDQLFHOHFWULFK\GUDXOLF
RUWKHUPRG\QDPLFFRPSRQHQWVDUHRIWHQFRXSOHG
WRJHWKHULQRQHPRGHO7KLVOHDGVWRDODUJHVSDQRI
WLPHFRQVWDQWVLQWKHPRGHO7KHXVXDOXVHRIWKH
H[SOLFLW(XOHUPHWKRGLVQRWDSSURSULDWHEHFDXVHWKH
IDVWHVWWLPHFRQVWDQWGHWHUPLQHVWKHFRPSXWDWLRQDO
HIIRUWVWHSVL]HIRUWKHVLPXODWLRQ,QRUGHUWR
PDLQWDLQVWDELOLW\RIWKHLQWHJUDWLRQPHWKRGWKHVWHS
VL]HPXVWEHOHVVWKDQWKHVPDOOHVWWLPHFRQVWDQW
7\SLFDOO\WKHIDVWHVWPRGHVDUHQRWH[FLWHGWRDGHJUHH
WKDWLWLVQHFHVVD\WRUHVROYHWKHPIRUWKHLQWHQGHG
SXUSRVH,QVXFKFDVHVWKHSUREOHPLVUHIHUUHGDVVWLII
7KHLPSOLFLW(XOHUPHWKRGVROYHVWKHQXPHULFDO
VWDELOLW\SUREOHPDQGDOORZVODUJHUVWHSVL]HVWREH
XVHG,WLVWKHDFFXUDF\UHTXLUHGWKDWUHVWULFWVKRZODUJH

The Modelica Association

7KLVSDSHUGHVFULEHVDQGLOOXVWUDWHVVRPHLPSRUWDQW
LPSURYHPHQWVLQ'\PROD
V>@VXSSRUWRIWKHLQOLQH
LQWHJUDWLRQPHWKRG
 7KHV\PEROLFDQDO\VLVDQGPDQLSXODWLRQKDYHEHHQ
LPSURYHGDQGLWUHGXFHVLQPDQ\FDVHVWKHVL]HRI
WKHQRQOLQHDUV\VWHPGUDVWLFDOO\
 7KHJHQHUDWLRQRIDQDO\WLFDO-DFRELDQVKDVEHHQ
LPSURYHG
 ,QOLQHLQWHJUDWLRQRIKLJKHURUGHUPHWKRGVDUH
VXSSRUWHG

59

Modelica 2002, March 18−19, 2002

New Methods for HIL Simulation of Stiff Models.

Elmqvist H., Mattsson S.E., Olsson H.

/HWXVUHSUHVHQWWKHVWUXFWXUHRIDV\VWHPE\DVWUXFWXUH
-DFRELDQ-ZKHUHHDFKURZUHSUHVHQWVDVFDODU
HTXDWLRQDQGHDFKFROXPQUHSUHVHQWVDQXQNQRZQ
YDULDEOHRIWKHV\VWHP,IYDULDEOHMGRHVQRWDSSHDULQ
HTXDWLRQLWKHQ-LM 2WKHUZLVHLWLVRQH7KH
UHSUHVHQWDWLRQFDQEHH[WHQGHGWRLQGLFDWHKRZLW
DSSHDUVIRUH[DPSOHZKHWKHULWDSSHDUVOLQHDURUQRW

7KHODUJHSRVVLEOHUHGXFWLRQRIWKHVL]HRIWKHLPSOLFLW
QRQOLQHDUV\VWHPRIHTXDWLRQVLVGXHWRWKHIDFWWKDW
FHUWDLQVXEV\VWHPVPLJKWEHOLQHDUHYHQDIWHU
DPPHQGPHQWRIWKHFRUUHVSRQGLQJGLVFUHWL]DWLRQ
IRUPXODV'\PRODLVQRZDEOHWRDXWRPDWLFDOO\GHWHFW
VXFKVWUXFWXUHVGXULQJWKHVWUXFWXUDODQDO\VLVRIWKH
HTXDWLRQV)XUWKHUPRUHLQFHUWDLQFDVHVWKH
FRUUHVSRQGLQJOLQHDUVXESUREOHPLVVSDUVH7KLVLVIRU
H[DPSOHWKHFDVHIRUGLVFUHWL]HG3'(
V)RUDRQH
GLPHQVLRQDO3'(DEDQGVWUXFWXUHLVREWDLQHG7KH
XVXDOWHFKQLTXHRIWHDULQJWKHQLPSOLHVDUHGXFWLRQRI
WKHVL]HRIWKHSUREOHP)RUD3'(PRGHOZLWK
HOHPHQWVWKHVL]HRIWKHQRQOLQHDUSUREOHPLHWKH
QXPEHURILWHUDWLRQYDULDEOHVFDQRIWHQEHUHGXFHGWR
RQHZKHQDILUVWRUGHUVSDWLDOGLVFUHWL]DWLRQLVXVHG



[[«[Q]




7KHLPSOLFLWLQOLQH(XOHUWHFKQLTXHVROYHVWKH
QXPHULFDOVWDELOLW\SUREOHP+RZHYHUWKHVWHSVL]H
QHHGWREHFKRVHQVPDOOHQRXJKWRJHWGHVLUHG
DFFXUDF\'\PRODVXSSRUWRILQOLQHLQWHJUDWLRQKDV
EHHQH[WHQGHGZLWKKLJKHURUGHUPHWKRGVWRPHHWWKH
DFFXUDF\UHTXLUHPHQWV7KHXVHRIKLJKHURUGHU
PHWKRGVLVQHFHVVDU\IRUHJK\GUDXOLFVV\VWHPVZKHUH
RQHFDQKDYHRVFLOODWLRQVLQWKHN+]UDQJHDQGZDQWWR
XVHVWHSVL]HVIRUH[WHUQDOVDPSOLQJLQWKHVDPHUDQJH

)LJXUH$GHVLUHGVWUXFWXUHIRUWKH-DFRELDQ
&RQVLGHUDVWUXFWXUH-DFRELDQRIWKHIRUPDVVKRZQLQ
)LJXUH7KHHOHPHQWVRIWKHULJKWDQGORZHUERUGHUV
WKHJUH\SDUWFDQKDYHDQ\YDOXHV,WLVWKHVWUXFWXUH
RIWKHXSSHUOHIWSDUWWKHZKLWHSDUWWKDWLVLPSRUWDQW
,WVKDOOEHEORFNORZHUWULDQJXODU%/7DQGHDFK
GLDJRQDOEORFNVKDOOEHQRQVLQJXODU

([SORLWLQJVSDUVHVWUXFWXUHV
&RQVLGHUDV\VWHPRIGLIIHUHQWLDODOJHEUDLFHTXDWLRQV
'$(

,IWKH]YDULDEOHVDUHDVVXPHGNQRZQWKHSUREOHPRI
VROYLQJIRUWKH[YDULDEOHVLVGHFRPSRVHGLQWRD
VHTXHQFHRIVPDOOHUSUREOHPVWKDWEHVROYHGLQWXUQ
JLYLQJ[[«[Q 

) W  [ [& \  = 

ZKHUHWLVWLPH[DQG\DUHYHFWRUVRIXQNQRZQ
YDULDEOHV7KHHOHPHQWVRI[DUHFDOOHGG\QDPLF
YDULDEOHVVLQFHWKHLUWLPHGHULYDWLYHV [& DSSHDULQWKH
HTXDWLRQVDQGWKHHOHPHQWVRI\DUHFDOOHGDOJHEUDLF
YDULDEOHVVLQFHQRQHRILWVGHULYDWLYHVDSSHDULQWKH
HTXDWLRQV



,WPHDQVWKDWZKHQXVLQJDQXPHULFDOVROYHUWRVROYH
WKHWRWDOSUREOHPWKHQXPHULFDOVROYHUQHHGVRQO\
LWHUDWHRYHUWKH]YDULDEOHVZKLFKLVDVPDOOHUSUREOHP
$QXPHULFDOVROYHUQHHGVUHVLGXDOVWREHFDOFXODWHG
ZKHQLWSURYLGHVDYDOXHIRUWKH]7KHUHVLGXDOLV
FDOFXODWHGLQWKHIROORZLQJZD\

:KHQPDNLQJLQOLQHGLVFUHWL]DWLRQWKHPRGHO
HTXDWLRQVDUHFRPELQHGZLWKWKHGLVFUHWL]DWLRQ
IRUPXODVRIWKHLQWHJUDWLRQPHWKRG)RULPSOLFLW(XOHU
ZHJHWWKHQRQOLQHDUSUREOHP

 6ROYHLQWXUQWKHVHTXHQFHRISUREOHPVIRUWKH[L
YDOXHVXVLQJWKHJLYHQ]YDOXHDQGWKH[MML
YDOXHVDOUHDG\FDOFXODWHG

) W  [  [&  \  = 
[& =  [ - [ -   K
WRVROYHIRU[QDQG\QDWHDFKVWHS$OVRIRUDQ2'(RQ
H[SOLFLWVWDWHVSDFHIRUP
L

L

L

L

L

L

 8VHWKH]YDOXHDQGWKHFDOFXODWHG[LYDOXHVWR
FDOFXODWHWKHUHVLGXDOVRIWKHUHPDLQLQJHTXDWLRQV
DWWKHERWWRP

L

7RREWDLQHIILFLHQWVLPXODWLRQWKHDLPLVWRREWDLQD
VPDOOQXPEHURI]YDULDEOHVZKLOHNHHSLQJWKH
VHTXHQFHRISUREOHPVWRVROYH[LVLPSOH,WLV
IDYRXUDEOHLIWKHFDOFXODWLRQVRIWKH[YDULDEOHVDUHMXVW
DVHTXHQFHRIDVVLJQPHQWLQYROYLQJQRQXPHULFDO
VROYHUV6PDOOOLQHDUV\VWHPVRIHTXDWLRQVDUHDOVR
DFFHSWDEOH,WLVYHU\LPSRUWDQWWKDWWKHVXESUREOHPVWR
VROYHIRUWKH[LYDULDEOHVDUHQRQVLQJXODU,IWKHRULJLQDO
SUREOHPLVQRQVLQJXODUWKHQWKHPDQLSXODWLRQPXVW
QRWLQWURGXFHVLQJXODULWLHVRUGLYLVLRQVE\]HUR
8QIRUWXQDWHO\LWLVQRWRQO\DTXHVWLRQDYRLGLQJ
GLYLVLRQVE\]HUREXWDOVRGLYLVLRQVE\WRRVPDOO

[& = I W  [

WKHLQOLQHGLQWHJUDWLRQPHWKRGXVLQJLPSOLFLW(XOHU
JLYHVDQRQOLQHDUSUREOHP7KHVL]HRIWKHSUREOHPLV
WKHVL]HRIWKHVWDWHYHFWRU
7KHQRQOLQHDUV\VWHPVREWDLQHGZKHQFRPELQLQJWKH
GLVFUHWL]DWLRQIRUPXODVRILPSOLFLWLQWHJUDWLRQPHWKRGV
ZLWKPRGHOHTXDWLRQVDUHVSDUVHEHFDXVHW\SLFDOO\D
PRGHOKDVKXQGUHGVRUWKRXVDQGVRIXQNQRZQVZKLOH
HDFKHTXDWLRQUHIHUWRYHU\IHZVD\WHQYDULDEOHV
7KHUHLVPXFKVWUXFWXUHWRH[SORLW

Modelica 2002, March 18−19, 2002

60

The Modelica Association

Elmqvist H., Mattsson S.E., Olsson H.

New Methods for HIL Simulation of Stiff Models.

QXPEHUV:KHQVROYLQJOLQHDUHTXDWLRQVWKLVLV
FRPPRQO\VROYHGE\SLYRWLQJLQRUGHUWRDYRLGODUJH
FRQGLWLRQQXPEHUVRIWKHIDFWRUL]HGPDWULFHV

X  X
=
W [ 

ZLWKERXQGDU\FRQGLWLRQV

:KHQVROYLQJWKHRXWHUQRQOLQHDUSUREOHPLWLV
IDYRXUDEOHWRXVH1HZWRQPHWKRGV)L[HGSRLQW
LWHUDWLRQFDQQRWEHXVHGIRUVWLIISUREOHPV1HZWRQ
PHWKRGVQHHGWKH-DFRELDQRIWKHSUREOHP/HWQ]
GHQRWHWKHQXPEHURIHOHPHQWVRI]7KH-DFRELDQFDQ
EHFDOFXODWHGQXPHULFDOO\E\SHUIRUPLQJDGGLWLRQDOQ]
UHVLGXDOFDOFXODWLRQVZKLFKPD\EHFRVWO\%\
JHQHUDWLQJFRGHIRUDQDO\WLFFDOFXODWLRQRIWKH-DFRELDQ
WKHHIIRUWWRFDOFXODWHDOOQRQ]HURHOHPHQWVRIWKH
-DFRELDQW\SLFDOO\LVRIWKHVDPHPDJQLWXGHDVRQH
UHVLGXDOFDOFXODWLRQZKLFKLVDFRQVLGHUDEO\OHVVHIIRUW
7KLVUHGXFWLRQLVGXHWRFRPPRQVXEH[SUHVVLRQ
HOLPLQDWLRQ

X  [ W =  =  VLQ

p
X  [ =  W  =  VLQ W  + 

X
 [ = / W  = 
[

ZKHUH/LVWKHOHQJWKRIWKHREMHFW%\GLVFUHWL]LQJLQ
VSDFH
X  [ + D[ W  - X [ W  + X  [ - D[ W 
 X
 [ W  @

D[ 
[

+LJKHURUGHUPHWKRGV

ZKHUH D[ = /  Q ZLWKQEHLQJWKHQXPEHURIGLVFUHWH
HOHPHQWVWKH3'(FDQEHWUDQVIRUPHGLQWRDVHWRI
2'(V7KHPDWUL[QRWDWLRQDOORZVFRQYHQLHQW
GHVFULSWLRQRIWKHGLVFUHWL]HGPRGHO

,QRUGHUWRJHWVXIILFLHQWDFFXUDF\IRUODUJHVWHSVLWZDV
QHFHVVDU\WRH[WHQGWKHEDVLFPHWKRGWRKLJKHURUGHU
PHWKRGV+LJKHURUGHUPHWKRGVLQGLFDWHWKDWWKH\KDYH
RUGHUJUHDWHUWKDQRQHDQGWKHRQHVFRQVLGHUHGKDYH
RUGHUVWR

PRGHO3'(
SDUDPHWHU5HDO/ 
SDUDPHWHU,QWHJHUQ 
5HDO'[ /Q
FRQVWDQW5HDO3L 
5HDOX>Q@
HTXDWLRQ
X>@ VLQ3LWLPH
GHUX>Q@ X>Q@
X>Q@X>Q@'['[
X>Q@ X>Q@
LQLWLDOHTXDWLRQ
X>Q@ VLQ3LQ'[
RQHVQ
HQG3'(

7KHKLJKHURUGHUPHWKRGVLPSOHPHQWHGIRUWKHQHZ
PHWKRGDUH/VWDEOHVLQJO\GLDJRQDOO\LPSOLFLW5XQJH
.XWWDPHWKRGV>@7KH/VWDELOLW\LPSOLHVWKDWWKH\DUH
VWDEOHIRUDOOVWDEOHOLQHDUV\VWHPVDQGGRQRWH[KLELW
RVFLOODWLRQVIRUYHU\VWLIIV\VWHPV7KHFODVVRI
PHWKRGVVLQJO\GLDJRQDOO\LPSOLFLW5XQJH.XWWD
PHWKRGVUHTXLUHWKHVROXWLRQWRWKHVDPHHTXDWLRQ
V\VWHPVDVLPSOLFLW(XOHU

2WKHUKLJKRUGHUPHWKRGV
0RUHJHQHUDOLPSOLFLW5XQJH.XWWDPHWKRGVFDQRIWHQ
EHPDGHPRUHHIILFLHQWLQRIIOLQHVLPXODWLRQV
+RZHYHUWKLVUHTXLUHVPRUHFRVWO\IDFWRUL]DWLRQVWKDW
FDQEHVKDUHGEHWZHHQPDQ\VWHSVDQGLVWKXVQRW
VXLWDEOHIRUUHDOWLPHVLPXODWLRQV0XOWLVWHSVPHWKRGV
DQGRWKHUPHWKRGVWKDWSURSDJDWHPRUHLQIRUPDWLRQ
IURPRQHVWHSWRWKHQH[WDUHQRWVXLWHGIRUUHDOWLPH
VLPXODWLRQVRIK\EULGV\VWHPV

7KHGLVFUHWL]HG2'(LVFRQYHQLHQWO\ZULWWHQE\XVHRI
VKLIWHGVXEUDQJHVRIWKHYHFWRUX7KHERXQGDU\
FRQGLWLRQDWW LVJLYHQDVDQLQLWLDOL]DWLRQHTXDWLRQ
7KHVLQHIXQFWLRQLVHYDOXDWHGHOHPHQWZLVHRQWKH
VHTXHQFH7KHERXQGDU\FRQGLWLRQDW[ LVKDQGOHGE\
PDNLQJX>@DQDOJHEUDLFYDULDEOHZLWKJLYHQWLPH
GHSHQGHQF\7KHERXQGDU\FRQGLWLRQDW[ LVKDQGOHG
E\DGGLQJRQHHOHPHQWWRXQDPHO\X>Q@DQGWKH
HTXDWLRQX>Q@ X>Q@
%\GLVFUHWL]LQJLQWLPHXVLQJLPSOLFLW(XOHU

([DPSOH2QHGLPHQVLRQDO3'(

GHUX>L@ X>L@ROGX>L@K

ZKHUHKLVWKHVWHSVL]HDQGWKHH[SUHVVLRQROGX>L@
GHQRWHVWKHYDOXHRIX>L@DWWKHSUHYLRXVVWHSWKH2'(

'LVFUHWL]HGSDUWLDOGLIIHUHQWLDOHTXDWLRQV3'(KDYH
VSHFLDOVSDUVHVWUXFWXUHVEHFDXVHHDFKXQNQRZQ
DSSHDUVRQO\LQDIHZHTXDWLRQV)RUDRQHGLPHQVLRQDO
3'(DEDQGVWUXFWXUHLVREWDLQHG

GHUX>Q@ X>Q@
X>Q@X>Q@'['[

LVWUDQVIRUPHGLQWR

&RQVLGHUWKHIROORZLQJ3'(PRGHOLQJRQH
GLPHQVLRQDOKHDWGLIIXVLRQ

The Modelica Association

p [
 + 
/

X>Q@ DX>Q@X>Q@
DROGX>Q@

61

Modelica 2002, March 18−19, 2002

New Methods for HIL Simulation of Stiff Models.

Elmqvist H., Mattsson S.E., Olsson H.

PHFKDQLFDOV\VWHPV7KHVWDWHVDUHTDQG T& 7KXVWKH
QXPEHURIVWDWHVLVQ

ZKHUHDLVWKHFRQVWDQW
D '['[K

:KHQVLPXODWLQJWKLVXVLQJDQH[SOLFLW2'(VROYHULW
LVDPDMRUWDVNWRLQYHUWWKHPDVVPDWUL[WRVROYHIRUWKH
DFFHOHUDWLRQV:KHQXVLQJLPSOLFLWLQOLQLQJLQYHUWLQJ
WKHPDVVPDWUL[FDQEHDYRLGHGDQGWKHVL]HRIWKHQRQ
OLQHDUV\VWHPWREHVROYHGFDQEHUHGXFHGIURPQWRQ
7KHDSSURDFKLVWRLWHUDWHRYHUWKHDFFHOHUDWLRQV T&& DQG
XVHWKHWKHGLVFUHWL]DWLRQIRUPXODVWRFDOFXODWHTDQG
T& DQGXVH 0 TT&& - ) T T&  DVWKHUHVLGXDO7KLV
DSSURDFKZDVSUHVHQWHGLQ>@+RZHYHUWKLVPHWKRG
KDVKDGOLWWOHSUDFWLFDOXVHEHFDXVHFHUWDLQSUDJPDV
DERXWWKHVWUXFWXUHRIWKHPRGHOHTXDWLRQVKDGWREHSXW
LQWRWKHPRGHOE\WKHXVHU

7KHILUVWFRPSRQHQWRIWKHGLVFUHWL]HG2'(LV
X>@ DX>@X>@DROGX>@

7KHYDULDEOHX>@LVNQRZQEHFDXVHLWVLPSO\
FDOFXODWHGIURPWKHERXQGDU\FRQGLWLRQJLYHQDVDSXUH
WLPHGHSHQGHQWH[SUHVVLRQ7KXVWKHHTXDWLRQKDVWZR
XQNQRZQVX>@DQGX>@VLQFHDOOROGH[SUHVVLRQVDUH
NQRZQTXDQWLWLHVZKHQWDNLQJDQHZVWHS,IX>@LV
NQRZQLWLVVLPSOHWRFDOFXODWHX>@
/HWXVDVVXPHX>@WREHNQRZQDQGFRQVLGHUWKH
VHFRQGFRPSRQHQWRIWKHGLVFUHWL]HG2'(
X>@ DX>@X>@DROGX>@

7KHQHZVWUXFWXUDODQDO\VLVPHWKRGVRI'\PROD
DXWRPDWLFDOO\UHGLVFRYHUVZHOONQRZQ2QPHWKRGE\
/XK:DONHUDQG3DXOIRUFDOFXODWLQJWKHMRLQWIRUFHV
DQGWRUTXHVIURPWKHPRWLRQRIWKHMRLQWVT T& DQG T&& 
'\PRODLVDEOHWRILQGWKLVDSSURDFKDXWRPDWLFDOO\
ZLWKRXWQRKLQWVRUH[SORLWLQJIDFWVWKDWLWLVDPXOWL
ERG\PRGHO'\PRODPDNHVLWE\RQO\DQDO\]LQJWKH
VWUXFWXUHRIWKHHTXDWLRQVDQGPDQLSXODWHWKHP
SURSHUO\7KHFRPSRQHQWPRGHOVRIWKHOLEUDU\
0RGHOLF$GGLWLRQV0XOW%RG\UHVXOWW\SLFDOO\LQD
KXQGUHGXQNQRZQVIRUHDFKGHJUHHRIIUHHGRP7KXVLW
LVIDUIURPWULYLDOWRWUDQVIRUPDQLQOLQHGPRGHOWRWKLV
HIILFLHQWIRUPIRUQXPHULFVROXWLRQ0RUHRYHU'\PROD
LVDEOHWRILQGWKHFRUHSUREOHPLQPRUHFRPSOH[
VHWWLQJVVXFKDVIRUDURERWZLWKGULYHOLQHVDQG
FRQWUROOHUV7KLVLVLOOXVWUDWHGLQWKHIROORZLQJ
DSSOLFDWLRQ

ZKLFKLVVLPSOHWRXVHWRFDOFXODWHX>@3URFHHGLQJLQ
WKHVDPHZD\IRUDOOFRPSRQHQWVRIWKHGLVFUHWL]HG
2'(ZHILQGHTXDWLRQVIRUFDOFXODWLQJX>Q@LQD
VLPSOHZD\ZKHQX>@LVDVVXPHGWREHNQRZQ
7KHUHPDLQLQJHTXDWLRQLV
X>Q@ X>Q@

ZKLFKQRZLVXVHGWRJLYHWKHUHVLGXDOX>Q@X>Q@
IRUFDOFXODWLQJX>@LWHUDWLYHO\,QRWKHUZRUGVWKH
QXPHULFDOVROYHUQHHGRQO\LWHUDWHRYHURQHYDULDEOH
6LQFHWKLVSUREOHPLVOLQHDU'\PRODFRQWLQXHVWKH
V\PEROLFPDQLSXODWLRQDQGXVHVWKHH[SOLFLW
H[SUHVVLRQVIRUX>Q@WREDFNVXEVWLWXWHWKHUHVLGXDO
HTXDWLRQWRJHWDQHTXDWLRQIRUX>@DQGVROYHVWKLV
HTXDWLRQV\PEROLFDOO\'\PRODKDVWUDQVIRUPHGWKH
PRGHOWRDVLPSOHVHTXHQFHRIDVVLJQPHQWVDQGWKHUHLV
QRQHHGIRUDQXPHULFDOVROYHU

$SSOLFDWLRQ5RERWLFVPRGHO

7KLVPRGHOIRUKHDWGLIIXVLRQLVQRWVWLIIEXWLW
LOOXVWUDWHVYHU\ZHOOKRZWKHVSDUVHVWUXFWXUHVRI
GLVFUHWL]HG3'(VFDQEHH[SORLWHG0RUHRYHUVXFKD
PRGHOFDQEHSDUWRIDPRGHOWKDWLVVWLII'\PRODLV
WKHQDEOHWRILQGDQGWUHDWWKHVHHTXDWLRQVDVGHVFULEHG

&RQVLGHUWKHPRGHOUURERWLQWKH0RGHOLFD>@OLEUDU\
0RGHOLFD$GGLWLRQV0XOWL%RG\([DPSOHV5RERWVDV
VKRZQLQ)LJXUHVDQG
7KHPRGHOGHVFULEHVDQLQGXVWULDOURERWZLWKVL[
GHJUHHVRIIUHHGRP7KHPRGHOLVFRPSRVHGRIEDVLF
PHFKDQLFDOFRPSRQHQWVVXFKDVMRLQWVDQGEDUVDV
VKRZQLQSDUWRI)LJXUH$WHYHU\MRLQWDGULYHWUDLQ
DVVKRZQLQSDUWRI)LJXUHLVSUHVHQW(DFKGULYH
WUDLQFRQWDLQVDPRWRUDJHDUER[DQGDQDFWXDWRUDV
ZHOODVDFRQWUROV\VWHP7KHHODVWLFLW\RIWKHJHDUVRI
WKHILUVWWKUHHMRLQWVLVPRGHOOHGE\RQHVSULQJIRUHDFK
JHDUER[7KHHODVWLFLW\RIWKHODVWWKUHHMRLQWVLV
QHJOHFWHG,QSDUWRI)LJXUHWKHPRGHORIWKHPRWRU
DQGWKHDFWXDWRURIRQHMRLQWLVVKRZQ7KLVFRPSRQHQW
LVGHILQHGPRVWQDWXUDOO\DVDQHOHFWULFDOFLUFXLW
)LQDOO\LQ)LJXUHWKHFRQWUROV\VWHPZLWKWDFKR
ILOWHUVIRURQHGULYHWUDLQLVGHILQHGLQEORFNGLDJUDP
IRUPDW7RVLPSOLI\WKHGLVFXVVLRQZHRPLWSRWHQWLDO
ORFNLQJLQWKHMRLQWVGXHWREHDULQJIULFWLRQ

0RGHOVRIK\GUDXOLFVV\VWHPVDUHVWLII0RGHOVWR
GHVFULEHSUHVVXUHZDYHRVFLOODWLRQVLQWKHN+]UDQJHLQ
ORQJOLQHVKDYHWKHVDPHEDQGHGVWUXFWXUHDVGLVFXVVHG
DERYHDQG'\PRODLVDEOHWRILQGDQGWRUHGXFHWKHVL]H
RIWKHQRQOLQHDUV\VWHPRIHTXDWLRQVDXWRPDWLFDOO\

([DPSOH0XOWLERG\V\VWHPV
&RQVLGHUPRGHOLQJRIPXOWLERG\V\VWHPV7KH
HTXDWLRQRIPRWLRQFDQEHZULWWHQDV
0 TT&& = ) T T& 
ZKHUHTLVDYHFWRURIJHQHUDOL]HGFRRUGLQDWHV
UHSUHVHQWLQJWKHV\VWHP
VSRVLWLRQGLVWDQFHVRUDQJOHV
0LVWKHQRQVLQJXODUPDVVPDWUL[DQG)UHSUHVHQWV
DSSOLHGIRUFHV/HWQGHQRWHWKHQXPEHURIHOHPHQWVRI
TRULQRWKHUZRUGVWKHGHJUHHRIIUHHGRPIRUWKH

Modelica 2002, March 18−19, 2002

7KHPRGHOFRQVLVWVRIVWDWHVIRUWKHPHFKDQLFDOSDUW
RIWKHURERWWZRVWDWHVIRUHYHU\JHDUER[ZLWKPRGHOHG
HODVWLFLW\WZRVWDWHVIRUHYHU\PRWRUDFWXDWRU
FRPSRQHQWWKUHHVWDWHVIRUHYHU\WDFKRILOWHUDQGWKUHH

62

The Modelica Association

Elmqvist H., Mattsson S.E., Olsson H.

New Methods for HIL Simulation of Stiff Models.

7KHPRGHOKDVXQNQRZQV$IWHU'\PROD
V
HOLPLQDWLRQRIFRQVWDQWDQGDOLDVYDULDEOHVDW
WUDQVODWLRQQRQWULYLDODQGWLPHYDU\LQJYDULDEOHV
UHPDLQ)RUH[SOLFLWPHWKRGVWKHUHLVRQHOLQHDU
HTXDWLRQV\VWHPWRVROYH,WLVRIVL]HVL[,W
FRUUHVSRQGVWRWKHLQYHUVLRQRIWKHPDVVPDWUL[
'\PRODKDVVROYHGDOORWKHUHTXDWLRQV\VWHPV
V\PEROLFDOO\

URERW





PHFKDQLFV







:KHQXVLQJLQOLQHGH[SOLFLW(XOHUDVWHSVL]HRI
PVKDVWREHVHOHFWHGWRDFKLHYHVWDEOHEHKDYLRU7KH
SDSHU>@UHSRUWVWKDWWKHIDVWHVWHLJHQYDOXHVRIWKH
OLQHDUL]DWLRQRIWKHV\VWHPDUHDERXWLQ
PDJQLWXGH



U0RWRU

)RUWKHLQOLQHGLPSOLFLW(XOHU'\PRODWUDQVODWHVWKH
VLPXODWLRQSUREOHPWRDQRQOLQHDUV\VWHPRIVL]H
ZLWKQRDGGLWLRQDOORFDOHTXDWLRQV\VWHPV7KH
HTXDWLRQV\VWHPVIURPGLVFUHWL]LQJWKHGULYHWUDLQVDQG
WKHLUFRQWUROOHUVDUHOLQHDUDQG'\PRODLVDEOHWRVROYH
WKHPV\PEROLFDOO\

U*HDU


UHI

I ODQJH



7DEOH3HUIRUPDQFHRIWKHPHWKRGVIRUWKHURERW
SUREOHPWKDWLVVLPXODWHGIRUVXVLQJD3HQWLXP,9
*+]SURFHVVRU

PRWRU

FXUUHQWFRQWUROOHU


)LJXUH7KHURERWPRGHOU
.G
ZBUHI

SKL

.Y
N ^`

VXP
Z6





UDWH
EV
DV

UDWH
,
N ^

LBUHI

,QO

([SO

,PSO

,PSO

,PSO

(XOHU

(XOHU

5.

5.

6WHSVL]H>PV@









3RVHUURU>PP@









9HOHUURU>PPV@









&38WLPH>V@









:KHQXVLQJH[SOLFLW(XOHUWKHVLPXODWLRQUXQVVORZHU
WKDQUHDOWLPH7KHVROXWLRQKDVJRRGDFFXUDF\EXWWKH
FRPSXWDWLRQDOEXUGHQLVKLJK,WLVYHU\LQWHUHVWLQJWR
VHHWKDWWKHLQOLQHGWKLUGRUGHULPSOLFLW5XQJH.XWWD
PHWKRGJLYHVDVROXWLRQZLWKWKHVDPHDFFXUDF\RQO\
QHHGLQJRIWKHHIIRUWIRUWKHH[SOLFLW(XOHUPHWKRG

Z

)LJXUH7KHFRQWUROOHURIRQHMRLQW

7KHLPSOLFLWPHWKRGVUXQDOOIDVWHUWKDQUHDOWLPH$V
UHSRUWHGDERYH'\PRODLVDEOHWRUHGXFHWKHVL]HRIWKH
QRQOLQHDUV\VWHPWRVL[%HIRUHWKHQHZLPSURYHPHQWV
'\PRODUHGXFHGWKHVL]HRIWKHQRQOLQHDUV\VWHPWR
JLYLQJD&38RIVIRUWKHVLPXODWLRQ8VLQJWKHQHZ
DSSURDFKWKHLPSOLFLW(XOHUPHWKRGQHHGVRQO\V

VWDWHVIRUHYHU\FRQWUROOHU7KHRYHUDOOPRGHOKDVWKXV
ÂÂ VWDWHV7KHVLPXODWLRQSUREOHP
KDVDGGLWLRQDOVWDWHVIRUJHQHUDWLQJWKHUHIHUHQFH
SDWK

The Modelica Association

,QO

)RUHDV\LQWHUSUHWDWLRQRIWKHH[HFXWLRQWLPHVWKH
SUREOHPZDVVLPXODWHGIRURQHVHFRQG,WPHDQVWKDWLI
WKH&38WLPHLVOHVVWKDQRQHVHFRQGWKHVLPXODWLRQ
UXQVIDVWHUWKDQUHDOWLPH

UDWH WDFKR WDFKR
EV EV
DV DV
7 ^
L
KS

,QO

7KHUHVXOWLQJH[HFXWLRQWLPHVDQGPD[LPXPSRVLWLRQ
DQGYHORFLW\HUURUVFRPSDUHGWRDUHIHUHQFHVROXWLRQ
FDOFXODWHGXVLQJ'$66/DUHVKRZQLQ7DEOH:KHQ
MXGJLQJWKHHUURUVLWPD\EHRILQWHUHVWWRNQRZWKDWWKH
URERWLVRIPHWHUVL]HDQGWKHPD[LPXPVSHHGVDUH
PV

N ^

S6


,QO

63

Modelica 2002, March 18−19, 2002

New Methods for HIL Simulation of Stiff Models.

Elmqvist H., Mattsson S.E., Olsson H.

IRUWKHVLPXODWLRQ7KHVLPXODWLRQLVVSHHGHGXSPRUH
WKDQVL[WLPHVDQGLWUXQVIDVWHUWKDQUHDOWLPH

>@0RGHOLFD0RGHOLFDKRPHSDJH
KWWSZZZ0RGHOLFDRUJ

7KHWDEOHVKRZVWKDWKLJKRUGHUPHWKRGVSD\RII7KH
WKLUGRUGHU5XQJH.XWWDPHWKRGJLYHVZLWKOHVVHIIRUWD
EHWWHUUHVXOWWKDQLPSOLFLW(XOHUGRHV

>@6FKLHOD2OVVRQ0L[HGPRGH,QWHJUDWLRQIRU5HDO
7LPH6LPXODWLRQ0RGHOLFD:RUNVKRS2FWREHU
/XQG8QLYHUVLW\/XQG6ZHGHQ

,IZHOHWWKHURERWPRGHODOORZSRWHQWLDOORFNLQJLQWKH
MRLQWVGXHWREHDULQJIULFWLRQZKHQXVLQJWKHLQOLQHG
WKLUGRUGHULPSOLFLW5XQJH.XWWDPHWKRGZLWKDVWHS
VL]HRIPVWKH&38WLPHQHHGHGLVV7KXVWKLV
PRGHOUXQVDOVRPXFKIDVWHUWKHQUHDOWLPH

&RQFOXVLRQV
7KLVSDSHUKDVGHVFULEHGDQGLOOXVWUDWHG'\PROD
VQHZ
DSSURDFKWRLQOLQHGLPSOLFLWLQWHJUDWLRQ7KHQHZ
IHDWXUHVLQFOXGHPRUHDGYDQFHGDQDO\VLVDQG
PDQLSXODWLRQRIWKHLQOLQHGSUREOHPJLYLQJLQPDQ\
FDVHVDGUDVWLFUHGXFWLRQRIWKHQRQOLQHDUSUREOHPWKDW
KDVWREHHQVROYHGQXPHULFDOO\*HQHUDWLRQRIDQDO\WLF
-DFRELDQVDOVRLQFUHDVHVSHUIRUPDQFH6XSSRUWRILQOLQH
LQWHJUDWLRQRIKLJKHURUGHUPHWKRGVOHDGVWREHWWHU
DFFXUDF\IRUODUJHUVWHSV7KXVDOORZLQJIDVWHU
VLPXODWLRQ
5HSRUWHGH[SHULHQFHVRIDSSO\LQJWKHQHZDSSURDFKWR
VLPXODWLRQRIDQLQGXVWULDOURERWKDYHVKRZQYHU\
SURPLVLQJUHVXOWV7KHPHWKRGKDVDOVREHHQDSSOLHG
VXFFHVVIXOO\WRVLPXODWLQJK\GUDXOLFV\VWHPVZLWKORQJ
SLSHVH[KLELWLQJSUHVVXUHZDYHRVFLOODWLRQV

$FNQRZOHGJHPHQWV
7KLVZRUNZDVLQSDUWVVXSSRUWHGE\WKH(XURSHDQ
&RPPLVVLRQXQGHUFRQWUDFW,67ZLWK
'\QDVLP$%XQGHUWKH,QIRUPDWLRQ6RFLHWLHV
7HFKQRORJ\DVWKHSURMHFWHQWLWOHG5HDOWLPH
VLPXODWLRQIRUGHVLJQRIPXOWLSK\VLFVV\VWHPV

5HIHUHQFHV
>@'%UFN+(OPTYLVW6(0DWWVVRQ+2OVVRQ
'\PRODIRU0XOWL(QJLQHHULQJ0RGHOLQJDQG
6LPXODWLRQ3URFHHGLQJVRI0RGHOLFD0RGHOLFD
KRPHSDJHKWWSZZZ0RGHOLFDRUJ
>@'\PROD'\QDPLF0RGHOLQJ/DERUDWRU\'\QDVLP
$%/XQG6ZHGHQKWWSZZZ'\QDVLPVH
>@+(OPTYLVW)&HOOLHU02WWHU,QOLQH,QWHJUDWLRQ
$QHZPL[HGV\PEROLFQXPHULFDSSURDFKIRUVROYLQJ
GLIIHUHQWLDODOJHEUDLFHTXDWLRQV\VWHPV3URFHHGLQJV
(XURSHDQ6LPXODWLRQ0XOWLFRQIHUHQFH-XQH
3UDJXHSS;;,,,;;;,9
>@+DLUHU:DQQHU6ROYLQJ2UGLQDU\'LIIHUHQWLDO
(TXDWLRQV,,6SULQJHU9HUODJ

Modelica 2002, March 18−19, 2002

64

The Modelica Association

Soejima S., Matsuba T.

Application of mixed mode integration and new implicit inline integration at Toyota

Application of mixed mode integration and new implicit inline
integration at Toyota
Shinichi Soejima

Toyota Motor Corporation

Takashi Matsuba

Toyota Techno Service Corporation

The HILS (Hardware In the Loop Simulation) is a popular technique to debug
control logic of vehicles. Previously, only simplified models could be used to
achieve real time performance in the simulations. On the other hand, quite detailed
models of engine, drivetrain, hydraulics and brake system were developed with
Dymola in recent years. Therefore we would like to use these models also in HILS.
However, real time is difficult to obtain for stiff model components, such as the
hydraulics, because integrators with fixed step size must be used. With explicit
methods very small step sizes are needed to ensure stability. With implicit methods
large nonlinear systems of equations have to be solved. Both approaches seem to
be not feasible. To improve this situation, the new inline and mixed mode
integration technique introduced by Dymola is evaluated for an engine model and
results are reported.

1. Introduction
Concerns
over
fuel
consumption
and
environmental problems have brought about a
demand for higher performance in automobiles.
To achieve this, the development of highly
advanced systems using control technologies that
incorporate the use of numerous actuators and
sensors has been progressing. The composition and
control of such systems is becoming increasingly
more complicated. However, at the same time,
reducing the length of their development period is
also necessary. Applying simulation is essential
for achieving this task. Particularly, HILS
(Hardware In the Loop Simulation) is widely
utilized in the debugging of ECUs (Electronic
Control Units). In HILS, the ECU carries out its
operation in real time, and as a result, the model is
also required to carry out its operation in real
time. Simple models with experimental data
tables and transfer functions have been used for
HILS so far. However, the demand is rising for
Dymola models, that have been developed during
the design of control logic, to be used in HILS
without changes.
Physical models have typically a large span of
time constants making them stiff for real time
calculation. When using the explicit Euler
method, the step size must be less than the fastest
time constant in order to maintain numerical
stability. However, in real-time simulation using

The Modelica Association

65 − 1

HILS, the step size cannot be set shorter than the
length of time necessary for calculating the new
values of the model variables. The implicit Euler
method allows a larger step size to be used.
However, it implies that a nonlinear system of
equations needs to be solved at each step.
Reducing the size of the non-linear problem is
advantageous. Dymola [1] exploits the method of
inline integration [3,4] to support this. The
discretization formulas of the integration methods
are combined with the model equations. To
reduce the size of the resulting non-linear
problem, Dymola analyses the structure of the
problem and manipulates it symbolically. The
symbolic manipulation has recently been
improved [4]. The improvements include also
inline integration of higher order methods to
obtain better accuracy for larger steps.
Another method, "mixed-mode integration", of
reducing the size of the system of non-linear
equations is to use explicit discretization on slow
states and implicit on fast states. The problem is
then to find which states that are slow and which
that are fast. A method based on linearization and
eigenvalue analysis was presented in [6].
Unfortunately, it is not straightforward to use this
method.
This paper reports results from applying inline
integration and mixed mode integration to two
real applications.

Modelica 2002, March 18−19, 2002

Application of mixed mode integration and new implicit inline integration at Toyota

2. Application: Engine model

Soejima S., Matsuba T.

m& = CA 2 p1 ρ1 Φ




Φ=





atmosphere

VGT
Intake
Manifold

(1)

κ +1
2
1


 p2   2 κ −1
 p2  κ 






−


 ⋅ ⋅ ⋅ ⋅if   > 
κ − 1  p1   p1  
 p1   κ + 1 



κ  p2 κ

1

1

 p   2 κ −1
 2  κ −1 κ
⋅ ⋅ ⋅ ⋅ ⋅ ⋅ ⋅ ⋅ ⋅ ⋅ ⋅ ⋅if  2  < 



+
+
κ
1
κ
1


 p1   κ + 1 

Φ
EGR
valve

Exhaust
Manifold

Cylinder

p1

p2

Figure 2: The flow characteristics
Figure 1: Engine model
Figure 1 shows the structure of the engine model
which was used for evaluation. The engine has a
Variable Geometry Turbo (VGT) and an Exhaust
Gas Recirculation (EGR) system. The EGR
system reduces nitrogen oxide (NOx) by
recirculating exhaust gases back to the intake
manifold. The VGT system increases the exhaust
pressure by restricting the flow of burned gas
using vanes installed at the entrance. To achieve
low emission levels, it is important to control the
VGT and EGR correctly. A complication is that
both the VGT and the EGR influence the intake
manifold pressure and fresh air/EGR gas flow
into the engine.
The model is a mean value engine model. The
variation of torque or cylinder pressure during a
cycle is not calculated. The model builds on
conservation of energy and mass and Newton's
equations of motion. The amount of air mass flow
and EGR gas flow, and the pressure and
temperature of every part of the engine are
calculated. The model has 796 unknowns. After
Dymola's elimination of constant and alias
variables at translation, 183 nontrivial and timevarying variables remain. The model has 26
continuous time states. The mass flows of the air
or EGR gas are calculated by the Equation (1).

Modelica 2002, March 18−19, 2002

65 − 2

The equation shows that the flow changes are
large when there is a small difference between the
upper pressure and the lower pressure. It implies
that the time constants of the dynamics change.
As a result, the use of explicit Euler method with
fixed step size, requires a small step size for the
simulation.
2.1 Evaluation of inlined explicit Euler
We compared the calculation time of two 10
seconds simulations, one in which the explicit
Euler inline integration method was applied and
one in which a non-inlined explicit Euler method
was used. Table 1 shows the results. We can see a
39% performance improvement when using the
inlined explicit Euler in Dymola.
The results are labelled "Simulink" when
simulating the S-function generated by Dymola in
Simulink. The `sim´, `tic´ and `toc´ commands
were used for timing. It should be noted that using
the simulate button in Simulink 3.0 (Matlab 5.3)
made the simulation of these models about 50%
slower. This situation has been improved in
Simulink 4.0 (Matlab 6.0).
It should be noted that there was not any
significant improvement in speed when
simulating in Simulink. The reason has not yet
been determined.

The Modelica Association

Application of mixed mode integration and new implicit inline integration at Toyota

Step
[ms]

CPU
Time [s]

Explicit
Euler

0.1

41

Inlined
Expl Euler

0.1

Explicit
Euler

0.1

Inlined
Expl Euler

0.1

Dymola

Integration
Method

25

44

Next we evaluated mixed mode integration. The
partition with 4 fast state variables discussed in
[6] was used. Table 2 shows the results of a
comparison of calculation time when mixed mode
integration was used with the Engine model and
when a non-inlined explicit Euler method was
used. The mixed mode integration method
showed very high performance. The improvement
of the performance is about 85%. And without
mixed mode integration, the model simulation
needed 0.1 ms of step size to ensure calculation
stability. On the other hand, with mixed mode
integration the calculation was still stable with a
step size of 1.0 ms.
The explict Euler method cannot be used for HIL
simulation, because a step size of 0.1 ms is
needed, which is too short for HILS calculation.
The mixed mode integration method allows HIL
simulation as the results from running on
dSPACE 1005 (PowerPC 750, 480 MHz)
indicate. However, there are problems of using
the mixed mode approach in general
1. It is difficult to find the suitable partitioning.
The operation is difficult to generalize because
the partitioning depends on the characteristic of
each model, and thus requires trial and error
analysis on each occasion.
2. Once partitioning has been made, stability is not
guaranteed when the input is changed.

65 − 3

dSPACE

Simulink

46

2.2 Evaluation of mixed mode integration

The Modelica Association

Table 2:
Performance for mixed mode
integration when simulating the engine model for
10 seconds using an Intel Pentium II 350 MHz
processor.
Integration
Method

Step
[ms]

CPU
Time [s]

Explicit
Euler

0.1

41

Mixed
Mode

1

6.1

Explicit
Euler

0.1

46

Mixed
Mode

1

7.1

Mixed
Mode

1

Not Realtime

Mixed
Mode

1.3

Realtime

2.3 Evaluation of inlined implicit Euler
In order to provide more easy to use method than
the mixed mode integration method, the implicit
line method reported in [6] has been considerably
improved [4]. The performance results of using
this method are shown in Table 3.
Table 3: Performance for inlined implicit Euler
integration when simulating the engine model for
10 seconds using an Intel Pentium II 350 MHz
processor.

Dymola

Simulink

Dymola

Table 1: Performance for explicit Euler when
simulating the engine model for 10 seconds using
an Intel Pentium II 350 MHz processor.

Simulink

Soejima S., Matsuba T.

Integration
Method

Step
[ms]

CPU
Time [s]

Explicit
Euler

0.1

41

Inlined
Impl Euler

0.1

14.3

Explicit
Euler

0.1

46

Inlined
Impl Euler

0.1

15

Modelica 2002, March 18−19, 2002

Application of mixed mode integration and new implicit inline integration at Toyota

Faster HILS environments based on Pentium
processors are available, for example xPC from
MathWorks. Dynasim made test using an Intel
Pentium 4, 1.6 GHz processor. Table 4 shows the
performance results for simulating in Dymola on
xPC. The model could then be run in real-time.

xPC

Simulink

Dymola

Table 4: Performance for inlined implicit Euler
integration when simulating the engine model for
10 seconds using an Intel Pentium 4, 1.6 GHz
processor.
Integration
Method

Step
[ms]

Comp
Time [s]

Explicit
Euler

0.1

11.4

Inlined
Impl Euler

1

4.6

Explicit
Euler

0.1

13.6

Inlined
Impl Euler

1

4.6

Inlined
Impl Euler

1

Realtime/4.5s

Trapez...
period...
Long...

Q

Trapez...
period...
Long...

It can be noted that the simulation time was about
15 seconds on the Pentium II processor, i.e. 1.5
ms/step. Since dSPACE DS1005 according to
Table 2 needs more CPU time per step it would
need at least 2 ms to calculate one step. However,
using offline simulation in Dymola, it was
determined that convergence was not obtained
when the step size 2 ms was used.

Soejima S., Matsuba T.

Figure 3: Hydraulic actuator system.
As the next application, consider simulation of an
actuator which is usually used to control the
pressure in automobiles. Figure 3 shows the
structure of the model developed by using
components from the HyLib hydraulics library
[2]. There are a number of valves and pipes
between a high-pressure source and low-pressure
parts such as the brake at a wheel. The dynamics
within the pipes cannot be neglected, because
they are several meters long. The valves adjust the
pressure of the lower part by very fast actuation.
This introduces very fast pressure changes and the
pressure wave propagate with the speed of sound
which is approximately 1300 m/s. The result may
be oscillations in the range 400-500 Hz generating
vibration and noise within the automobile system.
See Figure 4. It is important to analyze this
phenomenon in order to develop ways of reducing
the vibration and noise.

3. Application: Hydraulic system
The hydraulic system is one of the most important
systems in an automobile. It plays a crucial role in
the power train and the drive train. As the
hydraulic system exhibits very complicated
characteristics, it is very useful to simulate it.
Additionally, the ability to simulate such systems
in real time is very important. So far real-time
simulation of hydraulic systems has not been
possible. Hydraulic systems are typical examples
of very stiff systems. It is necessary to use
implicit solvers.

Modelica 2002, March 18−19, 2002

65 − 4

[MPa]

[sec]

Figure 4: Pulsation in the long hydraulic line

The Modelica Association

Soejima S., Matsuba T.

Application of mixed mode integration and new implicit inline integration at Toyota

The two pipes of the model are each 3 meters
long. Each pipe is modeled by 15 segments,
where each segment is 0.2 m long and has 5
continuous time states. The model has in total 164
states.

Table 6: Performance for inlined implicit RK3
when simulating the hydraulic actuator model for
1 s using an Intel Pentium 4, 1.6 GHz processor.

Dymola

It is not possible to use explicit Euler for real-time
simulation, because the model requires the step
size to be less than 0.001 ms to ensure the
stability of the simulation.

Table 5 shows the performance results for the
Pentium II processor when simulating 1 second.

Simulink

Dymola

Table 5: Performance for inlined implicit RK3
when simulating the hydraulic actuator model for
1 s using an Intel Pentium II 350 MHz processor.
Integration
Method

Step
[ms]

CPU
Time [s]

Explicit
Euler

0.001

283

Inlined
Impl RK3

0.5

3.1

Explicit
Euler

0.001

253

Inlined
Impl RK3

0.5

3

Simulink

A the third order implicit inline Runge-Kutta
integration method, RK3, with a step size of 0.5
ms was used to obtain both stability and desired
accuracy. The symbolic manipulation of Dymola
reduces the size of the nonlinear system to be
solved by a nonlinear solver from 164 to 10.

Integration
Method

Step
[ms]

CPU
Time [s]

Explicit
Euler

0.001

59.1

Inlined
Impl RK3

0.5

0.71

Explicit
Euler

0.001

50.9

Inlined
Impl RK3

0.5

0.6

These results show that the improved implicit
inline integration method is very effective in this
case. Conventionally it was difficult to handle
hydraulic models using fixed step explicit Euler
and process the model within a practical
calculation time. Using the improved implicit
inline integration method it is possible to handle
hydraulic models and process them at high speeds
even in fixed step situations.
This characteristic is desirable for real time
simulation. Implicit inline integration produced a
remarkable improvement for this simple hydraulic
model.
Furthermore, it has also shown
considerable effectiveness even for models that
are more complicated.
The representative
characteristics of this method are as follows.

It should be noted that the inlined implicit RK3
gave a speed up of a factor of 91. However, the
simulation is 3.1 times too slow to run in realtime. Therefore Dynasim made corresponding
test shown in Table 6 for Pentium 4, 1.6 GHz.
Real-time performance was then achieved.

•

This method enables the generation of a code
which is suitable for real-time simulation,
even in the case of models that have the
property of oscillation, such as the hydraulics
system.

•

This method makes the handling of models
with larger step size possible.

When attempting to test on xPC, the diagnostic
`Failed to download´ was received. More
investigations have to be made to determine the
cause.

The Modelica Association

65 − 5

Modelica 2002, March 18−19, 2002

Application of mixed mode integration and new implicit inline integration at Toyota

Soejima S., Matsuba T.

4. Conclusions

References

We evaluated inline integration and mixed mode
integration which were developed to improve
calculation performance.
Improved implicit
inline integration, which has recently been
developed, was also evaluated. It was confirmed
that these methods effectively increased the
ability to handle models in real time. In particular
the improved implicit inline 3rd order integration
method could handle the model very efficiently
even if it was a hydraulic model.

[1] Dymola. Dynamic Modeling Laboratory,
Dynasim AB, Lund, Sweden,
http://www.Dynasim.se.

On the other hand, it was generally the case that
setting step size for fixed step size integrators
remained a problem. Even inline integration
needs trial and error testing to find a suitable step
size. In addition, an increasing number of
modeling beginners are using these kinds of tools.
These users are not always experts in modeling or
control. It would therefore be desirable if they
could more easily obtain improved performance
using the techniques we evaluated. We hope that
such method will be established and be applied to
the physical models, which were made for
controller designing in order to enable HILS.
The improved implicit higher order integration
method has given a break-through in simulation
speed for stiff models and for discreticized partial
differential equations originating for example in
long hydraulic pipes.

Modelica 2002, March 18−19, 2002

65 − 6

[2] P. Beater, “Modeling and digital simulation of
hydraulic systems in design and engineering education
using Modelica and HyLib”, Modelica Workshop 2000
proceedings pp 33-40
[3] H. Elmqvist, F. Cellier, M. Otter: Inline Integration:
A new mixed symbolic/numeric approach for solving
differential-algebraic equation systems. Proceedings
European Simulation Multiconference, June 1995,
Prague, pp: XXIII-XXXIV.
[4] H. Elmqvist, S.E. Mattsson, H. Olsson: New
Methods for Hardware-in-the-loop Simulation of Stiff
Models, Proceedings of Modelica Conference 2002.
Modelica homepage: http://www.Modelica.org.
[5] Modelica. Modelica homepage:
http://www.Modelica.org.
[6] A. Schiela, H. Olsson, “Mixed mode integration for
Real-time Simulation”, Modelica Workshop 2000
proceedings, pp 69-75
[7] S. Soejima, ”Examples of usage and the spread of
Dymola within Toyota”, Modelica Workshop 2000
proceedings, pp 55-59

The Modelica Association

Schlegel C., Bross M., Beater P.

HIL−Simulation of the Hydraulics and Mechanics of an Automatic ...

HIL-Simulation of the Hydraulics and
Mechanics of an Automatic Gearbox

Clemens Schlegel

cs@schlegel-simulation.de
Schlegel Simulation GmbH
Munich, Germany

Marco Bross

Marco.Bross@bmw.de
BMW AG
Munich, Germany

simulation and testing is a possibility to achieve this,
as

Abstract
In this article, hardware-in-the-loop (HIL) simulation of a passenger car automatic gearbox is discussed. The simulation includes detailed models of
the mechanics and hydraulics and less detailed models of the other parts of the car’s drive train like its
engine, torque converter, differential gearbox, chassis and driving resistances. After a short description
of the components to be modeled, special issues of
simulating variable-structure mechanical systems
(coupled frictional elements), simulating hydraulics
and simulating in real time with the gearbox control
electronics hardware in the loop are discussed. A
simulation based, detailed assessment of the dynamics of the gearbox hydraulics show that it might be
modeled (under certain assumptions) with fixed
causality without major loss of accuracy. Therefore
nonlinear systems of equations in the hydraulic parts
of the model can be avoided. This enables the usage
of a model based on hydraulic component submodels, rather than on overall global dynamics to be
used for real time simulations with standard HILsimulation hardware. The article ends with a short
discussion of HIL-simulation results and an outlook
on future work.

1. Introduction
The motivation to realize tests in a HIL-environment
is manifold, but two main reasons are:
Shorter development time. The time available for
the development of new components and cars is
becoming shorter and shorter. Thus, a lot of time has
to be saved during the development phase. HIL-

The Modelica Association

Peter Beater

Beater@mailso.uni-paderbon.de
Universität -GH Paderborn
Soest, Germany

67

•
•
•
•

There is no need to wait for prototype production, if the data of these are available for modeling,
No driver and test circuit is needed,
Test conditions can be reproduced precisely,
Tests can even be automated.

Rising complexity due to interacting electronic
control systems. Cars have always been aggregations of several subsystems like engine, gearbox,
brakes and so forth, and thus showed a certain complexity. But in former times those systems worked
rather independently and could therefore be developed and tested separately. Nowadays the subsystems of passenger cars are strongly interdependent:
•

•
•

Different control systems act on the same dynamics (e.g. both motor management (DME)
and gearbox controller (EGS) influence the longitudinal dynamics (fig. 1).
Different control systems share sensor information that is exchanged via CAN bus for control
purposes, but also for self-diagnosis.
Functions are spread over several controllers.

As a consequence systems can no longer be tested
separately and the number of different error cases
that have to be tested increases drastically. The test
environment has to include all essential parts or
functionalities of all interacting systems. Optimal
testing should be automated in order to handle the
number of error cases. Both requirements lead to
automated HIL simulation and testing.
This article describes the test environment that was
installed at BMW in order to test the control system

Modelica 2002, March 18−19, 2002

HIL−Simulation of the Hydraulics and Mechanics of an Automatic ...

D
M
E

•

S
e
n
s
o
r
s

Engine

•

•
S
e
n
s
o
r
s

A
c
t
o
r
s

ASC

DSC
others

Gearbox
mechanics
and
hydraulics

S
e
n
s
o
r
s

Hardware
Detailed
Models

The EGS represents the hardware in the loop
and is the item under test. All other parts are
simulated.
Gearbox mechanics, hydraulics and actuators
have been modeled in detail. This was necessary,
as one of the goals of this setup was the possibility to simulate the effects of failure of one of the
actuators or the hydraulic valves.
The less detailed models contain only those
functionalities that are necessary for the simulation, e.g. the model of the DME does not control
a full model of the engine, but is necessary to
transmit the required signals via CAN bus to the
EGS.

2. Modeling driveline and gearbox
mechanics
An automatic gearbox can be simulated only if the
input and output torques or speeds are known.
Therefore, at least the engine and the longitudinal
dynamics of the vehicle also have to be modeled.
Figure 2 shows a corresponding model: Engine
(controlled by a control unit and a driver model),
torque converter, gearbox, final drive, brake wheels,
vehicle inertia and driving resistances. The engine is
modeled by a torque map, the torque converter by
static characteristics, and all other components, apart
from the gearbox, by the well known physical relations.

Chassis

Figure 3 shows an outlined sketch of the 5 speed
gearbox ZF 5HP24 [1] which was investigated.
Apart from the hydrodynamic torque converter it
consists of three planetary wheel sets and seven
switching elements: Three clutches (A, B, C), three
brakes (D, E, F), and a freewheel (FF). The gearshift
pattern (fig. 4 ) indicates which switching elements
have to be active to engage a certain gear.

Less
Detailed
Models

Figure 1: System overall view

(EGS) of the automatic gearbox. For the above mentioned reasons, it was not sufficient to model only
the gearbox itself that is controlled by the EGS, but
also the remainder of the powertrain and parts of its
controllers and communication structures. Figure 1
gives an overview of the components, physical interactions and information flow:

Modelica 2002, March 18−19, 2002

Schlegel C., Bross M., Beater P.

68

If appropriate component models are given, the
object-orientation of Modelica allows to derive the
complete simulation model (fig. 5) easily from the
gearbox scheme of figure 3. For the component
models the standard Modelica library “Mechanics.Rotational” [2] and the Modelica powertrain
library [3] have been used. For more details of modeling automatic gearbox mechanics see [4].
Clutches, brakes and freewheels in a simulation
model result in a variable structure system, this is
because two shafts can stick or slip relative to each

The Modelica Association

Schlegel C., Bross M., Beater P.

HIL−Simulation of the Hydraulics and Mechanics of an Automatic ...

Figure 2: Drive train simulation model

Gear
R
N
1
2
3
4
5
Figure 3: Outlined sketch of 5 speed automatic
gearbox ZF 5HP24

A

B

C

D

E

x
x
x
x
x

F
x
x

x

x
x

x

FF

x

x

Figure 4: Gearshift pattern

Shaf t4

B

J=J4
Fixed2=0

Fixed3=0

F

E

D

Fixed1=0

R1
Shaf t5

J=J5

C

R2

R3

Shaf t6

Shaf t3

Shaf t2

Shaf t1

J=J6

J=J3

J=J2

J=J1

Flange...

ratio=r1
A

ratio=r2

Flange...

ratio=r3

Shaf t7

J=J7

Figure 5: Gearbox mechanics simulation model

The Modelica Association

69

Modelica 2002, March 18−19, 2002

HIL−Simulation of the Hydraulics and Mechanics of an Automatic ...

other. The number of states is changing during a
transition from stick to slip and vice versa. Neglecting some “fast” dynamics in order to reduce simulation time results in a typical idealized friction
characteristic shown in figure 6. The friction torque
is a discontinuous and in part non-unique function of
the relative speed of the clutch disks. Therefore
additional equations have to be set up for a complete
system description.

3. Modeling gearbox hydraulics
The hydraulic system of an automatic gearbox consists of different elements with the following functions:
•
•
•

TFriction
TStick

•

TCoulomb

Electro-hydraulic elements provide a hydraulic
pressure as a function of the electrical current
flowing through the element.
Switching valves open or close canals.
Proportional valves amplify pressures and / or
transform hydraulic impedances.
Cylinders generate a normal force on a clutch
pack if a hydraulic pressure is applied on them.

Figure. 7 gives an overview over the elements and
their interactions. In the following section a short
outline of modeling techniques for hydraulic systems is given.

i

Figure 6: Idealized friction characteristic

In the Modelica libraries used, friction is modeled in
a parameterized form (in contrast to [4]) with a
curve parameter included plus a state machine describing the transitions between the unique and nonunique parts of the idealized friction characteristic.
Because the relative speed in the clutch is an output
of the integration algorithm and computed with a
limited precision only, finding the transition between
the unique and non-unique parts of the friction characteristic is not trivial. This holds especially for
systems with several interacting clutches, like the
system treated here.
Modeling a clutch by a parameterized friction description in connection with a state machine results
in a mixed system of discrete and continuous equations, which cannot be solved by standard methods
like Gaussian elimination. There are a few methods
to solve such mixed systems [5], all of them need
iteration at an event instance (transition from stuck
to sliding mode and vice versa). Using Dymola [6]
for processing of the Modelica models, these iterations proved to converge quite quickly. Therefore the
real-time condition was met in the HIL setup with
only a few exceptions.

Modelica 2002, March 18−19, 2002

Schlegel C., Bross M., Beater P.

70

ElectroHydraulic p,q
Cylinders
hydraulic p,q
valves
actors

Figure 7: Interaction of hydraulic subsystems
The early simulation languages were block-oriented
[7] and emulated analog computers. They were very
well suited for the simulation of control systems
where the output signal of a control block doesn’t
influence the input. Hydraulic systems, however,
work differently: The state at the input port of a
component is dependent on the state of the output
port. A hydraulic line illustrates this: If the line is
closed at the end the pressure at the entrance will
rise according to the input flow rate. If the line is
open at the end the pressure at the input will fall
almost to atmospheric pressure. These dependencies
can be modeled with block-oriented software but
lead to awkward models because of the necessary
feedback loops. It is very difficult to build modular
models with this approach.
Modelica enables acausal modeling, i.e. it is possible to describe the behaviour of a component without defining which variables are input and which are
output variables. As a consequence it is possible to
use the same library model for a hydraulic pump
(input is the mechanical power, output the flow rate)
and a hydraulic motor (input is the hydraulic power,

The Modelica Association

Schlegel C., Bross M., Beater P.

HIL−Simulation of the Hydraulics and Mechanics of an Automatic ...

output the torque at the shaft). This object oriented
modeling approach thus resembles the design strategies of component manufacturers: They use (to a
great extent) the same parts for pumps and motors.
[8].
Hydraulic systems can be described by differentialalgebraic equations (DAE). The differential equations are usually non-linear first-order equations that
model the pressure build up in lumped volumes.
Only special cases require partial-differential equations (PDE) to describe the behaviour of long lines.
Usually these PDEs are discretized to arrive at a
system of first order ODEs.

..
.i
O
Id...
Q

Oi...

..
.i
O

Cha...

..
.i
O
T...

R...

Stop1

Spring1

Fixed1

Fixed2

Oi...

Oi...

Figure 8: Modeling approach using lumped volumes.
Cy lin...
Fl...
Q

T...

Stop1

Spring1

Fixed1

Fixed2

R...

Ta...

Figure 9: Library models; the lumped volumes at the
ports are included but not shown in the icons.

TWVnS

port_A.q

port_B.q

port_A

port_B

V
o
ul
m
e
A

V
o
ul
m
e
B

in...

Figure 10: Diagram layer of library valve model
with included volumes at the ports shows more
details.

The Modelica Association

71

For standard applications it has proven very helpful
to place a lumped volume at each port of a component to model the behaviour of the compressible oil
(fig. 8). This leads to a simple structure of the resulting DAE-system. However to be able to solve this
DAE with standard solvers it is necessary to reduce
the index. In former times this was done by hand
from the modeling engineer by adding the amount of
oil of all components connected at a particular node,
nowadays it can be done automatically by the tool.
To avoid the manual placement of volumes and the
resulting cluttering of the diagram layer library
models are available that have already included the
lumped volumes at the ports but don’t show them in
the icons. The resulting diagram layer is almost
identical to a standard hydraulic circuit diagram (fig.
9 + 10). It can therefore be read also by engineers
with training in hydraulics but no deeper experience
in modeling and simulation [9].
When modeling hydraulic systems it makes sense to
follow the path of the oil: The source is the pump,
the sink is the tank, the cylinders, motors and valves
are in between. Using an appropriate library even
complex circuits can be modeled in a short period of
time if the required parameters of the components
are known [10].
The advantages of the outlined concept are obvious.
Hydraulic components can be modeled in a truly
modular way. They can be arranged in an arbitrary
structure – parallel or in series. The resulting nonlinear DAE system can be solved for the derivatives of
the state variables thus avoiding the numerical solution of systems of nonlinear equations. There are
however also some drawbacks. The lumped volumes
between components can become very small, they
may contain less than a thimble full of oil. As a
consequence the pressure builds up very rapidly. In
mathematical terms this means a stiff system that has
eigenvalues near the origin and almost at minus
infinity. Using advanced integration algorithms with
automatic step size control these DAEs can be
solved successfully but the required computing time
will usually be greater than the simulated time. Considerations of the numerical stability will restrict the
permissible step size for fixed step-size algorithms
that are used for HIL simulations.
One way to reduce the required computing time is
the observation that not all pressure states (lumped
volumes) are significant for the overall behaviour of
the model. In that case it is possible to eliminate a

Modelica 2002, March 18−19, 2002

HIL−Simulation of the Hydraulics and Mechanics of an Automatic ...

state. As an example figure 11 shows two orifices in
series.
If the pressure dynamics of the lumped volume
between the two orifices is not significant one can
neglect it and assume that the flow rate through both
orifices is identical. It is then possible to calculate
the flow rate through both orifices as a function of
the pressure differential across both orifices. This
approach is identical to the assumption of a zero
volume.

e
m
ul
o
Vli
O

Orifice1

Orifice2

Figure 11: Two orifices in series.

In general, using these techniques, one has to find a
compromise between placing a lumped volume at
each connector and not using them at all. The first
approach avoids nonlinear systems of equations, but
generates a stiff system. The second approach does
not generate a stiff system, but the resulting system
of nonlinear algebraic equations has to be solved
numerically. Thus, both approaches will lead to long
simulation times (compared to simulated time), the
optimum is a combination of both.
Unfortunately, using this method simulation times
are still far from real-time using a standard HIL
simulation processor (we used a Motorola PowerPC
750 processor running at 480MHz). Thus, another
simplification has to be made. Detailed analysis of
the hydraulic system shows that it is possible to use
a causal approach for some elements: For the majority of the valves, the generated pressure of one valve
can be considered to be independent of the valve that
is driven by that pressure, as the volume flow of oil
is usually small. Thus, a model can be derived from
an acausal model where the majority of the elements
is modeled in a causal way, which speeds up simulation times to an extent that real-time simulation
becomes possible.

Modelica 2002, March 18−19, 2002

72

Schlegel C., Bross M., Beater P.

4. Gearbox electronics & HIL
After having combined all necessary simulation
models (all subsystems shown in fig. 1 apart from
the gearbox controller EGS), they have to be implemented on an appropriate real-time processor together with all interfaces needed. For the Modelica
implementation of the gearbox mechanics model, we
used Dymola and exported the processed model as a
Simulink S-function [11]. The fixed causality
hydraulics model and the software interfaces to the
hardware have been implemented in Simulink too.
Since the gearbox controller provides no trigger
signal the simulated plant model has to be sampled
much faster than the controller. The EGS under test
operates at 100 Hz, requiring a sampling rate of 1
kHz for the simulation model. For the real-time
simulation hardware we used boards by dSPACE
[12].
Setting up a HIL simulation often non-standard
interfaces are needed due to I/O reversal: Sensors
and actuators are simulated, but they interface in part
directly to the power-electronics part of the control
unit which needs the respective electric loads for
proper operation. In contrast, standard real-time I/O
interfaces provide TTL-level signals only.
The EGS senses the speed of the gearbox input- and
output shafts and oil temperature. Based on these
signals (interfaced directly) and other signals like
vehicle speed, throttle position, and estimated engine
torque (interfaced indirectly via CAN bus), the actual gearshift is performed according to a shift map
and a set of parameters adjusting the slope of the
hydraulic forces acting on the respective clutch
packs to the actual driveline and vehicle state. During a gearshift the EGS may require via CAN bus
the engine controller to reduce engine torque for a
smooth transition.
On the output side the EGS interfaces directly to
electro-hydraulic components of the gearbox. The
respective original parts are included in the HIL
setup to provide proper electrical loads. That parts
are combined in a load box which may be exchanged
for simulation of another automatic gearbox type.
Without proper electric loads at the power-electronics interfaces the EGS would operate in emergency
mode only (4th gear, no gear shift) due to implemented watchdog functions. For the same reason
health monitoring signals of other controllers have to
be provided via CAN bus, too.

The Modelica Association

Schlegel C., Bross M., Beater P.

HIL−Simulation of the Hydraulics and Mechanics of an Automatic ...

Figure 12: HIL simulation control main panel

For the operator interface to the simulation we used
the board vendors software ControlDesk [12]. Figure
12 shows the main panel with standard passenger car
instrumentation, gearshift control, simulation control, and simulation output of the actual state and the
pressure history of all six clutches of the gearbox.
With the HIL setup described the effects of partial or
total failure of one or more mechanic, electric, or
hydraulic components of the gearbox can be studied
in detail. For interfacing to the EGS software, e.g.
for changing parameters, disabling certain parameter
adaptation functionalities, etc. an additional device
is needed. We used INCA [13] for that task.

5. Simulation Results
The following simulation results show the hydraulic
pressure (in [N/mm2]) for two cylinders as a result of

The Modelica Association

73

two gear shifts. Until t = 1s, the neutral gear is engaged. Then, the first gear is engaged, and the gearbox switches to the second gear at t = 3s. Figure 13
shows the simulation results for the acausal model,
simulated with Dymola. Figure 14 shows the same,
but the results are based on a causal model with the
same parameters.
The results for both models are fairly similar, proving the assumption to be correct for most of the time.
This is not the case for the pressure in cylinder A
around t=3.5 s (red circle). In the acausal, precise
model, the pressure in A falls slightly, because cylinder E gets filled by a considerable volume flow.
Thus, the working pressure drops, which is also
reflected in the pressure in cylinder A. As it can be
expected, the causal model does not show this effect.
Figure 15 shows the influence of a EGS parameter
modification (application parameter). The result
represents an uncomfortable gear shift, as the pres-

Modelica 2002, March 18−19, 2002

HIL−Simulation of the Hydraulics and Mechanics of an Automatic ...

sure in cylinder E shows a peak (blue circle). The
fact that changes in these parameters are reflected in
the pressure buildup opens the possibility to use
these models for application purposes, too.

Schlegel C., Bross M., Beater P.

6. Conclusion & Outlook
Using the available component models of Modelica,
quite detailed models of gearbox hydraulics and
mechanics have been developed. Further investigation showed the possibility to model the gearbox
hydraulics in part with fixed causality, which allowed real-time simulation of both hydraulics and
mechanics. This model was implemented on a HIL
environment together with the gearbox controller.
For fully automated component failure tests of the
EGS the respective models have to be enhanced by
failure injection inputs.
The fixed causality hydraulics model may also be
implemented in Modelica. This would enable to split
up the combined mechanics and hydraulics model in
“slow” and “fast” parts and thus using the potential
advantage of Dymola’s inline integration scheme
[14]. A limitation may be that the presumable “slow”
mechanic parts of the model need “fast” sampling
too, in order to meet the real-time condition if iterations occur at an event instance in the clutch models.

Figure 13: Simulation results: Acausal model

An other area of future investigation might be the
use of simulation models for application purposes.
This creates the need for further improvement of the
models without loss of simulation speed. Since only
a limited set of signals are available for measurement with reasonable effort, setting up procedures
for identification and validation of those refined
models needs to be addressed.

Figure 14: Simulation results: Fixed causality model

References

Figure 15: Simulation results: Effects of poor
application parameters.

Modelica 2002, March 18−19, 2002

74

[1]

Funktionsbeschreibung Automatikgetriebe
5HP24. ZF Getriebe GmbH, Saarbrücken

[2]

Modelica Association.
Modelica.Mechanics.Rotational,
http://www.modelica.org/library/library.html

[3]

PowerTrain library, http://www.dynasim.se

[4]

M. Otter, C. Schlegel, H. Elmqvist, Modeling
and Realtime Simulation of an Automatic
Gearbox using Modelica, 9th European
Simulation Symposium ESS’97, Passau,
Germany, Oct. 19.-22., pp. 115-121, 1997.

[5]

M. Otter, H. Elmqvist, S.E. Mattsson, Hybrid
Modeling in Modelica based on the

The Modelica Association

Schlegel C., Bross M., Beater P.

HIL−Simulation of the Hydraulics and Mechanics of an Automatic ...

Synchronous Data Flow Principle. IEEE
International Symposium on Computer Aided
Control System Design, Hawaii, August 2227, USA, Proceedings of CACSD'99, S. 151157, 1999.
[6]

Dymola, http://www.dynasim.se

[7]

J.C. Strauss, D.C. Augustine, B.B. Johnson,
R.N. Linebarger, F.J. Sanson,. (1967) The SCI
Continuous System Simulation Language
(CSSL). Simulation, IX(6)281-303, 1967.

[8]

P. Beater, Entwurf hydraulischer Maschinen –
Modellbildung, Stabilitätsanalyse und Simulation hydrostatischer Antriebe und Steuerungen. Berlin, Heidelberg, New York, Springer
Verlag. 1999.

[9]

P. Beater, Modeling and Digital Simulation of
Hydraulic Systems in Design and Engineering
Education using Modelica and HyLib. Lund,
Modelica Workshop 2000, pp 33 – 40, 2000.

[10] HyLib. Library of Hydraulic Components
http://www.hylib.com
[11] Simulink, http://www.mathworks.com
[12] http://www.dspace.de
[13] http://www.etas.de
[14] A. Schiela, H. Olsson, Mixed-mode Integration for Real-time Simulation. Lund, Modelica
Workshop 2000, pp 33 – 40, 2000

The Modelica Association

75

Modelica 2002, March 18−19, 2002

Modelica 2002, March 18−19, 2002

76

The Modelica Association

Puchalsky C., Megli T., Tiller M., Trask N. and Wang Y., Curtis E. Modelica Applications for Camless Engine Valv...

Modelica Applications for Camless Engine Valvetrain
Development
Christopher Puchalsky, Thomas Megli, Michael Tiller, Nate Trask,
Yan Wang, Eric Curtis
Ford Motor Company

Abstract
timing control. The engine model incorporates a
simple valve actuator model to replace the
conventional camshaft motion with the flexible timing
and transition characteristics of EMVA. The engine
model predicts gas flows, temperatures, and pressures
that were inputs to the FORTRAN wall-wetting model.
The wall wetting model then determines the fuel
vaporization rate, which in turn determines the A/F
ratio input to the engine model. This subsequently
changes the temperatures, pressures, and flows in the
combustion chamber and port sub-models. Initial
comparison of results to the FORTRAN model show
reasonable agreement in A/F prediction but the
FORTRAN version currently runs faster.

Several variable valvetrain technologies are being
aggressively pursued to increase vehicle fuel economy
and reduce engine exhaust emission levels.
Electromechanical Valve Actuation (EMVA) is a
promising alternative that uses electromagnetic
actuators to replace the conventional camshaft and
provide fully flexible valve timing control. This
"camless" valvetrain provides new opportunities and
challenges for engine control optimization. In this
work, we present two Modelica applications for
EMVA development.
Control and prediction of the Air to Fuel (A/F) ratio in
a port fuel injected spark-ignited (PFI SI) engine is an
important factor for emissions, performance, and fuel
economy. A Modelica model to simulate the dynamic
behavior of fuel vaporization and storage inside a PFI
SI engine has been developed. This "wall wetting"
model was developed from an existing FORTRAN
based model and employs several control volumes to
represent fuel in various phases and locations in the
engine.
A multi-component fuel model (i.e.
containing different constituents with a wide range of
molecular weights) is used where the fuel component
masses are the state variables and the mass flow rates
are the flow variables. The fuel model can be easily redeclared so that different numbers and types of fuel
components can be used to simulate the distillation
characteristics of various fuels.
For the control
volumes that represent liquid fuel puddles, the
connectors have additional information such as puddle
area, puddle height, fuel component vapor pressure,
puddle temperature, and puddle heat transfer. The
processes of fuel injection, vaporization, liquid flow,
and shattering are used to move fuel between the
various control volumes. The Modelica model can be
coupled by various degrees to engine simulation
models. By comparison, in the original FORTRAN
model, engine operating inputs to the wall wetting
model were made by rough approximation with no
opportunity for feedback from the wall wetting model
to affect the operating conditions. In this application
we fully couple the wall wetting dynamics to a single
cylinder engine model. The complete model is then
more generally applicable to the increased number of
degrees of freedom afforded by the variable valve

The Modelica Association

The other use of Modelica involves actuator
development.
Actuator design and control is a
significant challenge for EMVA engines. To achieve
performance, durability and fuel economy objectives,
valve motion must be carefully controlled via
electromagnets to achieve both fast transitions and low
contact velocities. The actuator system must also be
designed to minimize electrical power consumption. A
detailed actuator model is developed to study valve
transition characteristics. The model incorporates
mass, spring, and electrical elements from the
Modelica standard translation and electrical sublibraries. A detailed sub-model of a solenoid with an
"E-shaped" core has been developed to predict
magnetic forces and inductive characteristics. The
magnetic force is coupled to a reciprocating mass
which represents the armature and valve assembly.
Various actuator design modifications have been
investigated. The effect of a simple voltage control
scheme on valve motion is investigated here.

Introduction
The global automotive industry is under increasing
pressure from governmental, consumer, and nongovernmental groups to improve the fuel economy of
motor vehicles. Reasons for improvement range from
concerns about global warming to the need to reduce
the dependence on foreign, and often volatile,
petroleum sources. Consumer demand and competitive

77

Modelica 2002, March 18−19, 2002

Modelica Applications for Camless Engine Valv... Puchalsky C., Megli T., Tiller M., Trask N. and Wang Y., Curtis E.

combustion chamber where it forms a puddle.
Additionally, right at the moment of intake valve
opening, the pressure in the intake port is much less
than that in the cylinder. This produces a backflow
pressure wave that splatters some of the fuel off of the
valve and up into the port. In both the forward and
backward flow processes some of the fuel is entrained
in the air stream before it lands.

forces demand that improvements in fuel economy not
be accompanied by decreases in other metrics of
vehicle performance – safety, power, interior space,
emissions, price, and NVH. It is often required that
these other metrics improve along with fuel economy.
One group of technologies that holds promise for
improving fuel economy while maintaining or
improving most other areas of vehicle performance is
variable valve timing (VVT).
VVT reduces or
eliminates many of the tradeoffs between low and high
speed torque, fuel economy, idle quality, and emissions
that are currently made with fixed valve timing. VVT
includes current production technologies like variable
cam timing, cam switching, and variable valve lift. All
of these technologies use a cam to open and close the
valves. A new VVT technology that holds promise is
Electromechanical Valve Actuation (EMVA). EMVA
uses electromagnets to open and close the valves. The
valve timing is then independent of crankshaft position,
and valve opening and closing times can be optimized
to reduce throttling losses and to control residual gas
fractions. Additionally, valves may be deactivated to
reduce power consumption or to deactivate cylinders
for improved fuel economy.

3

1
2
4
1. Port Film
2. Valve Film
3. Upstream Film
4. In-Cylinder Film

EMVA presents several engineering challenges in
which modeling plays an important role. One such
area is the development of strategies for transient air
fuel control. We will discuss the development of the
plant model to predict liquid fuel dynamics. Another
engineering challenge is the development of the
electromagnetic actuator. Both will be discussed and
results will be presented.

Figure 1: Schematic of Fuel Injection.
Prediction of transient air fuel dynamics becomes even
more difficult under certain EMVA engine operating
modes (e.g. late intake valve closing (IVC), alternating
valve closing, and cylinder deactivation). A detailed
wall wetting model to predict transient air fuel
dynamics has been created in Modelica. A starting
point for the Modelica model was a FORTRAN model
developed by Curtis, et. al. [1]. The FORTRAN wall
wetting model contains models of all of the processes
described above, all of which have also been
implemented in the Modelica version. Additionally,
the Modelica version is also tied to an engine cycle
simulation that provides data such as air speeds,
pressures, and temperatures to the wall wetting model.
The FORTRAN version used approximations for this
data.

Wall Wetting Model Development
Prediction of transient fuel dynamics is difficult with
conventional port fuel injected (PFI) engines running at
fixed valve timing. In PFI engines, a fuel injector is
placed in the intake port as close to the intake valve as
packaging will allow. A schematic of the fuel injection
and wall wetting process in a standard camshaft engine
is shown in Figure 1. Fuel is injected towards the
intake valve and port walls just before intake valve
opening. Some fuel becomes entrained in the air
stream, but most lands on the valve and port where it
forms small "puddles". The fuel evaporates off the hot
port walls (~95 C) and the hotter intake valve (~175
C). The fuel, gasoline, is composed of many different
chemical species with widely different characteristics.
The lighter, more volatile, components will evaporate
easily while the heavier, less volatile, components will
tend to evaporate slowly and stay in the puddle. The
evaporation rate increases dramatically when the intake
valve is open and the air speed in the port is high. The
high air speed in the port also produces a forward flow
phenomenon, which causes some of the liquid fuel on
the port walls and the intake valve to be sucked into the

Modelica 2002, March 18−19, 2002

Basic Models
In the most basic form, the wall wetting model is a
collection of fuel puddles (control volumes) linked
together by processes that move fuel between the
various puddles. This is similar to modeling in the
thermal domain where a series of thermal capacitances

78

The Modelica Association

Puchalsky C., Megli T., Tiller M., Trask N. and Wang Y., Curtis E. Modelica Applications for Camless Engine Valv...

exist with thermal resistances and convective elements
to move the thermal energy between them.

that all the parts of the model are using a consistent
fuel model.

The control volume model has the following connector
instantiated as cv (control volume):

The control volumes used to represent the liquid fuel
are placed inside a wrapper model. The wrapper model
contains the fuel model and a thermal connector that is
connected to a thermal model that predicts the
temperature of the puddle. It also has two models that
calculate the surface tension and the vapor pressure of
the fuel mixture in the puddle from the puddle
temperature and fuel properties. The geometry (area,
height, perimeter) of the liquid puddle is calculated in
the equation layer of the model. It also has a liquid
fuel connector that is similar to the control volume
connector:

connector MassConnector
import Modelica.Siunits;
parameter Integer n "# of species";
parameter String FuelNames;
SIunits.Mass m[n];
flow SIunits.MassFlowRate mdot[n];
end MassConnector;
The control volume model also contains the following
equation to link the flow and across variables:

connector LiquidMixture
import Modelica.SIunits;
parameter Integer n "# of species";
parameter String FuelNames;
SIunits.Mass m[n];
flow SIunits.MassFlowRate mdot[n];
SIunits.Pressure Pv[n];
SIunits.Temperature T;
flow SIunits.HeatFlowRate q;
SIunits.DynamicViscosity
mu;
SIunits.SurfaceTension SurfTen;
SIunits.Area A;
SIunits.Height H;
WallWetting.Types.Perimeter Pwet;
end LiquidMixture;

der(cv.m) = cv.mdot;
A multi-component fuel model is used. The number,
type, and injected mass fraction of each component
(species) is selected to match the distillation
characteristics of the fuel. There are 21 chemical
species from which to select. The fuel model contains
both fuel composition and material property data. It
has the following code:
model Fuel
extends FuelIcon;
replaceable Two_Component_Test
Fuel_Comp ;
FuelsDataAdjustable
Data(Fuel_Comp=Fuel_Comp) ;
end Fuel;

The liquid puddle model and liquid mixture connector
allow all of the information pertinent to the puddle to
be calculated in one place. This prevents, for example,
both the evaporation and forward flow models from
calculating the puddle geometry.

The replaceable Two_Component_Test model
defines the fuel. This model contains the injected mass
fractions, the fuel names string, and an array of
integers that specifies which components are used.
This information is then passed to the
FuelsDataAdjustable
model.
The
FuelsDataAdjustable model extracts the
material property data for the used species from the list
of possible species. FuelsDataAdjustable is
implemented as a model and not as a record
because of an assert statement in the equation layer of
the model. This forces Fuel to be a model because
one of it used classes is a model and not a record.
Knowing which fuel, and hence which species, will be
used at translation time decreases the number of
variables and run time.

The FORTRAN version used liquid puddle models to
represent the liquid fuel puddles – one on the intake
valve, one on the cylinder, and two in the port (see
Figure 1). The fuel in the port is split into two puddles
– one downstream in the port near the valve and one
upstream away from the valve and close to the injector.
The downstream puddle is nominally hotter than the
upstream port. The modular nature of Modelica
permitted easy creation of two different models with
different numbers of control volumes. One is identical
to the FORTRAN wall wetting model with 4 puddles.
Both 4-puddle models can be used to model engines
with multiple intake valves, bifurcated and nonbifurcated ports, and charge motion control valves by
the use of multipliers. For example, an engine with
two valves and a bifurcated port with fuel injected
evenly into both ports would have the amount of fuel
injected divided by 2 and the amount of fuel vaporized
multiplied by 2.

Note that the connector definition has a string
parameter FuelNames. The string FuelNames is a
concatenation of abbreviations for the names of all the
various fuel components that make up the current fuel
model. An example of FuelNames for the indolene
fuel
model
is:
"ispnt|ioctn|tolun|ndecn|cyhex|naph|ethylb". This is on the connector to assure

The Modelica Association

79

Modelica 2002, March 18−19, 2002

Modelica Applications for Camless Engine Valv... Puchalsky C., Megli T., Tiller M., Trask N. and Wang Y., Curtis E.

Liquid fuel is added to the puddles via an injector
model. The injector apportions the total fuel injected
by means of data about the engine hardware (e.g.
injector targeting info) and calibration parameters (e.g.
how much fuel dribbles off of the injector as opposed
to being sprayed). Most of the fuel during closed valve
injection goes to the valve puddle and the downstream
port puddle. During the rare event of open valve
injection a large portion of the fuel goes directly to the
cylinder puddle. The injector model also calculates an
amount of fuel that is either vaporized or entrained in
the air stream before it reaches the puddle. It does this
by calculating a Roslin-Rammler distribution of the
fuel droplet size in the injection spray. Then it
assumes that all the drops under a certain diameter are
entrained, and half of the drops between that size and a
larger size are entrained. Both sizes are calibration
parameters.

To model liquid fuel dynamics with EMVA it was
necessary to use 7 control volumes because each
cylinder has two intake valves and a single fuel
injector. Only one cylinder puddle control volume was
used, but all of the other puddles were doubled to
represent the two intake valves. The use of 7 control
volumes instead of 4 with multipliers was necessary
because of certain EMVA modes that are nonsymmetrical. One such mode occurs when the intake
valves open on alternating cycles, but the single fuel
injector sprays fuel into both ports on each cycle.
The FORTRAN version of the wall wetting model had
a control volume to keep track of the fuel evaporated.
Some versions of the Modelica wall wetting model
have a separate control volume to keep track of the fuel
that has been vaporized. Others simply convert the
multicomponent evaporation mass flow rate into a
single component mass flow rate that can be applied
directly to the medium connectors that Ford uses for
cycle simulation [2].

A forward flow model simulates the dragging effects of
the air-flow in the port. The forward flow model
moves liquid fuel from the upstream puddle to the
downstream puddle, and liquid fuel from the
downstream and valve puddles into the cylinder
puddle. All of these flows are modeled by instances of
the same flow model.

In addition to the fuel model, four different records are
used to pass information to different sections of the
model. They are passed down the hierarchy as
replaceable records or models.

Using the mass flow rate of air in the port, the forward
flow model makes several assumptions in order to
calculate a mass flow rate. First, it is assumed that
there is no slip at the surface between the puddle and
the engine. Next, there is an equal shear force between
the puddle and the air stream. Finally, there is a
laminar flow distribution in the air and fuel film. The
model then divides the total mass flow rate among the
various fuel components in the puddle by their mass
fractions in the puddle. The forward flow model also
has an entrainment model similar to that in the injector
model.

Processes
The wall wetting model has several processes that add
fuel to the liquid puddles, move the liquid fuel between
the puddles, and remove the evaporated fuel. The
dominant process is evaporation [3]. Each puddle is
connected to the air-stream using an evaporation
model. The evaporation model uses the Reynolds
number of the flow over the puddle, the free stream gas
state (temperature, pressure, composition), and puddle
information from the puddle connector. It calculates a
total mass convection rate from the puddle to the air
stream. The evaporation mass flow rate is governed
by:
•

m evap = Shρ mix

Apuddle
d port

D ln(

X fvp − X fvi
1 − X fvp

The process of backflow shattering is also modeled.
This occurs at intake valve opening (IVO) when the
pressure in the port at part throttle operating conditions
is much less than that in the cylinder. At typical
operating conditions, the cylinder pressure at IVO
would be at atmospheric (100 kPa) and the pressure in
the port would be about 50 kPa. This pressure
difference produces a short duration but large
magnitude, sometimes sonic, backflow event. This
shatters the downstream and valve puddles.
A
percentage of the fuel that was shattered will be blown
up into the port, a percentage will fall back into the
puddle, and a percentage will be entrained in the air.
The process is modeled as an event in Modelica. At
IVO an event is triggered and a submodel calculates
the redistribution of fuel. This information is then
passed up to higher levels so that all of the control
volume models are children. This model uses reinit
statements to move the percentages among the various
control volumes.
This method is not entirely

) (1)

where Sh is the Sherwood Number (dimensionless
concentration gradient which is dominated by the
Reynolds Number), ρmix is the density of the air/fuel
mixture in the gas phase directly above the puddle,
Apuddle is the area of the puddle, dport is the port
diameter, D is the diffusion coefficient, Xfvp is the mass
fraction of fuel in the vapor phase above the puddle,
and Xfvi is the mass fraction of fuel vapor in the inlet
stream. The total mass convection rate is divided
among the various fuel components (species) in the
puddle based on their mass fractions in the vapor
phase.

Modelica 2002, March 18−19, 2002

80

The Modelica Association

Puchalsky C., Megli T., Tiller M., Trask N. and Wang Y., Curtis E. Modelica Applications for Camless Engine Valv...

burn model, and no in-cylinder heat transfer effects) to
provide results for input to the wall wetting model, but
not visa versa. A more complex cycle simulation could
also be used (e.g. using a multiple species gas model
with detailed property models, a predictive burn model,
and in-cylinder heat transfer effects). Finally, the most
complex form of integration would involve the twoway communication of results between the wall
wetting model and the cycle simulation model. In
other words, the cycle simulation would provide the
wall wetting models with the necessary temperatures,
pressures, air flow velocities, and heat transfer
coefficients while the wall wetting model would
provide the cycle simulation with the air/fuel ratio.

satisfactory because the process is not completely
represented in one submodel. We are currently
evaluating the experimental impulse handling
functionality in Dymola to rewrite the backflow
shattering model.

Thermal Warm-up Model
One of the most important features in predicting
transient A/F dynamics is good prediction of the
temperature of the liquid fuel. The liquid fuel puddle
is thin and is assumed to be in thermal equilibrium with
the engine surface. The task is therefore to make a
thermal model of the intake valve, seat, and cylinder
walls. The Modelica version of the wall wetting model
is essentially the same as the FORTRAN version [4].
The valve and valve seat are modeled by thermal
capacitances connected by thermal resistances. This
resistor-capacitor network is connected to the
combustion gases, backflow gases, fresh charge gases,
and coolant fluid via thermal convective resistances.
Twenty-six thermal capacitances are used. Four are for
the valve stem, three are for the valve seat, one is for a
thermocouple, and 18 are for the valve head. The
thermal capacitance and thermal resistance models are
the HeatCapacitance and HeatResistance
modes from the HeatFlow1D package found in the
ModelicaAdditions library.
The Convection
model in the HeatFlow1D library was not suitable
because the convection coefficient is a parameter.
In our model the convection coefficient changes
throughout the simulation so we made our own
convection model with a variable convection
coefficient. When a formal heat transfer library is
available in the Modelica Standard Library, we will
migrate our models to use the standard components.

For our purposes we have built two versions of the wall
wetting model. This first was for model verification.
Here we used a simple cycle simulation that was
coupled one way to the wall wetting model. Then for
the camless application we chose a slightly more
complex cycle simulation model (four gas species,
thermodynamic relations by polynomial, prescribed
burn, and no in-cylinder heat transfer effects) that was
fully coupled to the wall-wetting model.

Actuator Model Development
Both simplified and detailed models of the EMVA
have been developed.
The simplified model is
incorporated into the wall wetting simulation of the
camless engine, while the more detailed "stand-alone"
model is used for actuator controls development.
The actuator, shown schematically in Figure 2, is
comprised of an upper and lower electromagnet and a
moving armature which pushes on the engine poppet
valve. Compression springs of equal stiffness (ks ) are
placed above and below the armature, and are preloaded during assembly (by positioning the threaded
top spring housing) to center the armature between the
solenoid pole faces as shown in the left figure. During
engine start-up, the valve is pulled from the center
position to one of the pole faces corresponding to the
open or closed position of the poppet valve. During
normal engine operation, the armature and engine
valve essentially operate as a reciprocating system.
The motion during a transition from one pole face to
the other is then primarily harmonic with the transition
speed being determined by the effective armature/valve
mass (meff) and the effective stiffness (keff =2ks ) of the
upper and lower springs. The electromagnets are used
to (1) hold the valve in either the open or closed
positions position, and (2) to inject enough magnetic
energy into the armature to overcome frictional losses
during transitions.

The temperature of the valve puddle is calculated as a
weighted average of the cells on the valve head. The
downstream port puddle is connected to one of the seat
cells. The upstream port puddle is connected to an
average of the coolant and the seat.

Interface with Cycle Simulation
The original FORTRAN wall wetting model was not
coupled or integrated into to a detailed engine cycle
simulation model.
Therefore simple but useful
approximations for information such as in-cylinder
pressure, burned gas temperatures, and in-cylinder and
port air velocities were used as inputs.
The Modelica version of the wall wetting model was
designed to permit integration with engine cycle
simulations of varying complexity. The simplest cycle
simulation would be to use the approximations that the
original FORTRAN model uses. The next level of
complexity would be to have a simple cycle simulation
(e.g. using a single species ideal gas model, prescribed

The Modelica Association

81

Modelica 2002, March 18−19, 2002

Modelica Applications for Camless Engine Valv... Puchalsky C., Megli T., Tiller M., Trask N. and Wang Y., Curtis E.

Middle equilibrium position

Fully closed position

Fully open position

Figure 3 illustrates an instance of the simplified EMVA
model within the context of the camless engine exhaust
valvetrain model. The sub-model incorporates a
rotational connector to sense engine position and a
control connector that provides opening and closing
timing signals from higher levels of the model. The
output is the harmonic lift profile which is then
connected to the exhaust port flow model.

Springs, ks
electromagnets

Simplified EMVA model
Valve lift profile generator
Cylinder head

Moveable armature and
engine valve assembly, m eff

Figure 2: Schematic of the EMVA actuator in
middle, fully open and fully closed positions.

Simplified EMVA Model
A simplified sub-model is developed for use with the
engine cycle simulations.
The simplified model
provides valve profiles to the valve port flow models
which subsequently determine the gas flow to and from
the engine cylinder. From a free-body diagram of the
effective reciprocating mass meff, the equation of
motion during a transition can be expressed in terms of
the viscous friction damping coefficient c, the effective
spring constant keff, the upper Fmag,u and lower magnet
F mag,l forces, and the gas pressure and flow forces Fgas:

meff z + cz + k eff z = Fmag ,u − Fmag ,l − Fgas

Valve control connector

Figure 3: Exhaust valvetrain model showing the
simplified EMVA model

Detailed EMVA Model

(2)

Modelica standard libraries for linear masses and
springs are used to model the mechanical
characteristics of the system. Additionally a model of
an E-core type electrical solenoid is developed and
used in conjunction with the electrical libraries. This
provides a plant model for evaluation of passive and
active motion control schemes.

In Equation 2, z is the distance from the center position
(the upper magnet face is at z = L/2 and the lower
magnet is at z = -L/2. Lift L is the total armature
travel). The magnetic force drops off as with the
square of the armature distance from the pole face;
therefore, during most of the transition, F mag,u and Fmag,l
are small compared to the spring forces. Additionally,
the damping coefficient is very small, and for light to
moderate engine loads, the gas forces are relatively
small. A reasonable first approximation to the valve
lift x = z – L/2 is harmonic motion at a frequency of ωn
= (keff/meff)1/2. For example the position for movement
from the closed position at time to is given by:
x=

(

{

})

L
1 − cos ω n (t − t o ) for t - t o ≤ π/ω n
2

The model, shown in Figure 4, is used to evaluate the
dynamics of the armature motion during catching near
the end of a transition. It includes the mechanical
system, a catching electromagnet, and simple voltage
supply.
The mechanical system is modeled as a reciprocating
mass that is connected to 4 spring-damper elements.
These elements are piece-wise linear with a change in
stiffness and damping coefficient defined by the
positions where the armature meets the magnet pole
face.
Two of the spring-dampers represent the
mechanical stiffness of the upper and lower actuator
springs, while two other high-stiffness elements
simulate the collision between the armature and the
electromagnets. The lower stiffness spring-damper
parameters are active during mid-travel (-L/2 < z <
L/2) and are tuned to match the free oscillation motion
of the armature. The high stiffness spring-dampers
(active for |z|
L/2) are then tuned to match the
experimental data to simulate the inelastic collision of
the armature with either of the magnet pole faces.

(3)

and

x = L for t - t o > π/ω n

(4)

This simply generates a time based one-half period
harmonic transition from closed to open position. A
similar expression is used for the valve closing
transition.

Modelica 2002, March 18−19, 2002

82

The Modelica Association

Puchalsky C., Megli T., Tiller M., Trask N. and Wang Y., Curtis E. Modelica Applications for Camless Engine Valv...

Integrating λ with respect to current i gives the coenergy, which can be differentiated with respect to the
air gap to give the magnetic force Fmag:

Power supply

Electromagnet
model

Fmag =

Figure 4: Actuator model

With the flux characterized, the equation which
describes the voltage Va applied across the coil the can
be expressed using Kirchoff's, Faraday's and Ohm's
laws:

Also shown in Figure 4 is an e-core magnet sub-model.
Electrical connectors are provided to connect the coils
to a voltage source. In addition, a translational
connector is provided to apply the magnetic force to
the spring-mass-damper system.

Va =

core
µ Bs

dλ
+ Ri
dt

(9)

b

w/2
wire

d
w/2

(8)

The flux and magnetic force will vary according to
Equation 7 and Equation 8 until either the core or
armature begins to saturate at higher current levels.
Here, an exponential form for the flux is defined which
permits the characterization of the flux and magnetic
force in terms of the B-H curve characteristic of the
materials.

Mechanical system

h

ai 2
2 (k + x ) 2

H

where R is the coil resistance which is parameterized in
terms of the e-core dimensions and wire diameter d.

w

x
t

armature

µ Bs

l

Equations for the magnetic force and the coil voltage
essentially describe the magnet sub-models. The
model interfaces with the electrical and mechanical
subsystems through translational connectors and
electrical pins.

Figure 5: "E"-core magnet schematic
The magnet model development begins with a
consideration of the e-core geometry and flux path,
which is shown schematically in Figure 5. By applying
Gauss' law for magnetostatics:

&
∫ B • dA = 0

(5)

Results and Discussion

where B is the magnetic field and Ampere's law:

&
∫ H • dl = I enclosed = Ni

Wall Wetting Simulations

(6)

The camless wall wetting model has been used to
model 1200 RPM 300-second engine "cold-start" tests.
The engine starts from near ambient conditions, and is
then operated at 1200 RPM. The engine load (or
torque) is periodically moved between a lower and
higher level, with the excursions being made during a
1-second interval. The load changes are accomplished
by changing the engine airflow induction rate. Both
"throttled" and "unthrottled" operating modes are
investigated, and simulation results are compared to
experimental data. In the throttled mode, the camless
engine is operated in a conventional way. The valve
timings are fixed and load changes are executed by
throttling the air flowing into the intake manifold. In
the unthrottled mode, the intake manifold air is at
atmospheric pressure. Load changes are accomplished
by changing the intake valve closing timing (IVC) to
change the length of the induction stroke.

where H is the magnetic excitation, i is the current, and
N the number of coil turns, the flux can be expressed in
terms of the geometry, windings, material properties,
air gap x, and current i for both the linear (where
magnetic field B=µH) and magnetic saturation regions
of operation. In the linear region the flux is given by:

λ=

ai
k+x

(7)

where a and k are constants determined by the core and
armature dimensions and material properties.

The Modelica Association

83

Modelica 2002, March 18−19, 2002

Modelica Applications for Camless Engine Valv... Puchalsky C., Megli T., Tiller M., Trask N. and Wang Y., Curtis E.

Dual Intake and Exhaust (EIVC) - Results for variable IVC and
Unthrottled Operation

Figure 6 shows the results for the throttled engine
operation. Both experimental and predicted results are
shown for injected air-fuel ratio (the ratio of inducted
air mass per cycle to injected fuel mass per cycle) and
for the air-fuel ratio in the engine exhaust (inferred
from measuring exhaust species concentrations). Note
that these are in general different under transient
conditions due to the wall wetting fuel dynamics. The
model prediction for injected air/fuel ratio is
significantly higher than the experimental injected air
fuel ratio during the high load operating condition.
This difference may be attributed to modeling and
experimental error. The difference could be due to
over-prediction of the inducted air mass during high
load conditions. The exhaust air fuel ratio for the
experimental data and modeling simulation behave
similarly during low load engine operation, but during
high load operation conditions the experimental and
modeled exhaust air fuel ratio diverge. This may be
due to the differences in the injected air fuel ratios and
experimental error.

17
16

A/F Ratio

15

11

Experimental A/F Ratio

Model A/F Ratio

Experimental Injected A/F Ratio

Model Injected A/F Ratio

0

Model A/F Ratio

Experimental Injected A/F Ratio

Model Injected A/F Ratio

50

100

150
Test time [s]

200

250

300

Figure 7: Unthrottled Operation.
These results show reasonable agreement for the
general trends in air fuel-ratio behavior and
demonstrate that Modelica is suitable for modeling
transient air fuel dynamics; however, they also
underscore the need for good model calibration and
experimental air charge estimation. The FORTRAN
version of the wall wetting model has a routine to
calibrate the model by adjusting several parameters.
The values of these calibrated parameters were used for
the Modelica wall wetting model. However, the results
show that the Modelica version of the model needs a
different calibration process. Once a calibrated version
of the model is available, it should be generally useful
for both hardware and control strategy development.

17
A/F Ratio

Experimental A/F Ratio

10

Dual intake valve operation, Throttled results for fixed valve timings

18

13
12

20
19

14

16
15
14
13

Actuator Simulations

High

12

Low

11

The actuator model has been exercised to investigate
various design and motion control scenarios. Here we
present results that compare model predictions to
experimental data for armature catching using a simple
square-wave catching pulse.

10
0

Load 50
Condition

100

150

200

250

300

Time, s

Figure 6: Throttled Operation.
Figure 7 shows the results for unthrottled engine
operation. The injected air fuel ratio for the model
closely matches the experimental data, demonstrating
that the air charge estimation is improved compared to
the throttled operating condition.
However, the
modeled exhaust air fuel ratio does not yield similar
results. Although the experimental exhaust air fuel
ratio tracks close to the desired stoichiometric
conditions, the modeled exhaust air fuel ratio is
calculated to be much richer. The model reasonably
represents the air fuel excursions during load
transitions, but most likely underestimates the quantity
of fuel lost to the crankcase. If the model calibration of
the lost fuel becomes more representative, the
simulation is expected to more closely match the
experimental results.

Modelica 2002, March 18−19, 2002

The model flux and force relationships are tuned to ecore and armature properties for a 200V prototype
actuator using data from [5]. Mass, spring and
damping parameters are selected to provide reasonable
agreement between the predicted and measured free
oscillation data. Experimental data are obtained by
using a bench-top experimental set-up described in
[6]. An actuator is installed on a cylinder head, and
instrumentation is provided to drive the coil and to
measure the position, velocity, current, and voltage.
Figure 8 illustrates the experiment. The actuator is
held in either the open or closed position with a low
holding current in the corresponding coil. This holding
coil current is then quenched at the time of the release
command. After a delay time td, a square wave
catching pulse of amplitude Vapp and pulse-width tpw is
applied to the opposite coil to catch the armature at the
magnet pole face. The catching coil voltage is then
decreased to provide the lower current required to hold
the valve in position.

84

The Modelica Association

Puchalsky C., Megli T., Tiller M., Trask N. and Wang Y., Curtis E. Modelica Applications for Camless Engine Valv...

valve position

5.0
14.0

4.0

tpw

Release command

3.0

12.0

2.0

Catching current
td

Postion, mm

holding current
time

10.0

1.0
8.0

0.0
-1.0

6.0

-2.0

Inputs: pulse timing and square wave catching pulse

predicted

4.0
measured

-3.0

Outputs: position, velocity, and current response

Current, A

Catching coil at Vapp

2.0
-4.0
-5.0

0.0
0.0

1.0

2.0

3.0

4.0

5.0

6.0

Time, ms

Figure 8: Schematic
experiment.

of

armature

catching

Figure 10: Predicted and measured position and
current for apply voltage Vapp = 117V, delay time td
= 1.4 ms, and pulse-width tpw = 10 ms.

Figure 9 shows both predicted and measured position
and velocity traces for a Vapp = 117 V, tpw = 10 ms
catching pulse applied at td = 1.4 ms from the armature
release point. The release spring first accelerates the
armature and valve assembly to peak velocity of about
3.7 m/s. As the armature approaches the coil seat, it
decelerates due to the catching spring force, but the
magnetic force increases to pull the armature in to the
open position. The predicted and measured contact
velocities are about 0.3 m/s and 0.5 m/s respectively,
and occur at 3.2 ms from the release point. Note that
under these conditions the armature bounces and
contacts a second time at about 0.6 m/s at around 4.5
ms.
5.0

3.0

2.0

2.0

1.0

1.0

0.0

0.0

-1.0

-1.0

-2.0

-2.0

-3.0

-3.0

-4.0

-4.0

-5.0
1.0

2.0

3.0

4.0

5.0

contact velocity, m/s

1.5
1
0.5

1

1.5

2

2.5

catching pulse delay time td, ms

Figure 11: Predicted and measured contact velocity
versus catching pulse delay time td for apply voltage
Vapp = 150 V and pulse-width tpw = 3ms
Figure 10 shows the predicted and measured current
responses. The measured current first increases to
about 2.0 amps, and then decreases as the armature
lands due to the counter electromotive force (EMF)
induced when the armature moves toward the magnet
pole face. After bouncing, the armature moves away
from the pole face and induces a reinforcing EMF.
The current then increases, and this subsequently
increases the magnetic force to pull the armature in
with a higher contact velocity during the second
impact. After the armature lands, the current then
increases even more rapidly due to magnetic saturation
effects. The model over-predicts current until very
near the landing point. Here the model predicts a much
sharper current decay than is shown by the
measurement. The overall trends agree; however,
model refinements are being developed to improve the
current prediction.

-5.0
0.0

measured data

2

0.5

4.0

3.0

model prediction

2.5

0

Velocity, m/s

Postion, mm

3

5.0

measured
predicted

4.0

Apply Voltage Vapp = 150 V, pulsewidth tpw = 3 ms

6.0

Time, ms

Figure 9: Predicted and measured position and
velocity for apply voltageVapp = 117V , delay time td
= 1.4 ms, and pulse-width tpw = 10 ms.

An important issue for actuator design and control is
the poppet valve and armature contact velocities.
Valve seating velocities must be low enough so that
valvetrain durability and noise level targets are met.
Figure 11 shows the predicted contact velocities for the
pulse timing sweep experiment shown in Figure 8.
Here the applied voltage is Vapp = 150 V, the pulse
width is tpw = 3 ms, and the pulse timing delay td is
varied. As the pulse timing delay td is varied from 0.5

The Modelica Association

85

Modelica 2002, March 18−19, 2002

Modelica Applications for Camless Engine Valv... Puchalsky C., Megli T., Tiller M., Trask N. and Wang Y., Curtis E.

ms to 1.7 ms, the contact velocity decreases from about
2.7 m/s to a minimum of about 0.2 m/s. The minimum
occurs when the injected energy from the magnetic
force is about equal to the frictional losses from
damping. For td > 1.7 ms the contact velocity begins to
increase (due to reinforcement of the coil current as the
armature motion reverses near the landing point) until
td = 2.0 ms. Beyond this point, the magnetic force is
not sufficient to catch the armature. Experimentally
measured contact velocities are also shown in Figure
11.
The predicted and measured trends agree
reasonably well.

6.

Vehicle Control, No. 93, Ann Arbor, USA,
2000.
Wang Y., "Camless Engine Valvetrain:
Enabling
Technology
and
Control
Techniques" Ph.D. Dissertation, University of
California, Santa Barbara, 2001

Conclusion
The Modelica language proved to be useful for creating
a model for transient fuel dynamics in port fuel
injected engines. The model was easily integrated into
a cycle simulation model, and was suitable for
modeling the transient fuel dynamics in a camless
engine, as the predicted trends agreed reasonably with
measured data.
Modelica was also useful for
developing camless engine valve actuator models. An
actuator model was developed by using an e-core
solenoid sub-model and a mixture of elements from the
standard translational and electrical libraries. The
model predictions for valve motion agreed reasonably
well with experimental data.

References
1.

2.

3.
4.

5.

Curtis, E., Russ, S., Aquino, C., Lavoie, G.,
Trigui, N., "The Effects of Injector Targeting
and Fuel Volatility on Fuel Dynamics in a PFI
Engine During Warm-Up: Part II – Modeling
Results", SAE 982519
Newman, C., Batteh, J., Tiller, M., "Spark
Ignited-Engine
Cycle
Simulation
in
Modelica", 2002 Modelica Conference
Proceedings
Spalding, D.B., Combustion and Mass
Transfer, Pergamon Press, 1979.
Curtis, E., Aquino, C., Plensdorf, W., Trumpy,
D., Davis, G., Lavoie, G., "Modeling Intake
Valve Warmup", ICE-Vol. 29-1, Proceedings
of the 19th Annual Fall Technical Conference
of the ASME Internal Combustion Engine
Division, 1997.
Wang Y., Stefanopoulou A. G., Haghgooie
M., Kolmanovsky I., Hammoud M.,
"Modeling of an Electromechanical Valve
Actuator for a Camless Engine", AVEC 2000,
5th International Symposium on Advanced

Modelica 2002, March 18−19, 2002

86

The Modelica Association

Session 3b

Electrical Systems

The Modelica Association

87

Modelica 2002, March 18−19, 2002

Modelica 2002, March 18−19, 2002

88

The Modelica Association

Hongesombut K., Mitani Y., Tsuji K.

An Incorporated Use of Genetic Algorithm and a Modelica Library ...

An Incorporated Use of Genetic Algorithm and a Modelica
Library for Simultaneous Tuning of Power System Stabilizers
Komsan Hongesombut,

Yasunori Mitani,

and

Kiichiro Tsuji

Osaka University, Graduate school of engineering
2-1 Yamada-oka, Suita, Osaka 565-0871, JAPAN
dent in case many conventional techniques get into
difficulties. Incorporating the use of GA and power
system simulation tools, among them such as
PSCAD/EMTDC, EMTP, EuroStag, etc, ObjectStab
[1] in Dymola [2] which is a library developed by
Modelica language [3] for power system studies is
more flexible than those in the view point of its easiness to realize the phisical models and its powerful
interface with MATLAB and Simulink that can allow
ObjectStab be used with optimization methods such
as GA. This paper describes a method of how a GA
can be applied to a Modelica library named ObjectStab. An example of simultaneous tuning of power
system stabilizers in a multimachine power system is
used to validate the effectiveness of the incorporated
use of these two features. It opens up a new idea of
the use GA and Modelica library together allowing
designers to design more sophisticated controllers.
The idea does not limit only the applications to power
systems, but also other Modelica users can adapt this
idea to their own works. The simulation tools used in
this paper are the Dymola, ObjectStab library,
MATLAB [4] and Simulink [5] and Genetic and Evolutionary Algorithm Toolbox (GEATbx) [6].

Abstract
ObtectStab package that has been successfully applied to power system studies is a general-purpose
simulation tool developed by the Modelica language.
It takes advantages from the capability of physical
modeling of Modelica language that make ones readily develop new models and use them for complex
and large cases of power system studies based on
object-oriented programming. However, in the situation that control of complex power systems is not easy
to be realized by traditional methods, genetic algorithm (GA) becomes an alternative powerful method
that can be used to solve several difficult problems
without any prior or little knowledge of the systems
being solved. Proposed in this paper is an incorporating the use of GA to an ObjectStab library to enhance
the use of this library into optimization environment.
The idea has been applied to one challenging problem
of simultaneous tuning power system stabilizers in a
multimachine power system. The simulation results
show that the resulting controller obtained by a GA
can achieve good performance.
Index Terms – ObjectStab, genetic algorithms, Simulink interface, simultaneous tuning, power system
stabilization.

2.Genetic Algorithms
A Genetic algorithm (GA) is a biologically inspired
search algorithm pioneered by Holland [7]. The approach is based on Darwin’s survival of the fitness
hypothesis. In GA’s, candidate solutions to a problem
are analogous to individuals in a population. A population of individuals is maintained within search space
for a GA, each representing a possible solution to a
given problem. The initial population can be a random
collection of bizarre individuals. The individuals will
interact and breed to form future generations (offspring). The stronger individuals will reproduce more
often than weaker individuals. Presumably, the population will get collectively stronger as generations
pass and weaker individuals die out. Unlike other
optimization methods, GA’s do not limit by constraints on the form of fitness function. The fitness

1. Introduction
Until recently, there has been widespread interest
using genetic algorithms (GA’s) to search and optimize in several difficult problems. Compared to traditional search and optimization procedures, such as
calculus-based approach, GA’s are robust, conceptually simple to apply in problems where little or no
prior knowledge is available for the problem being
solved. Problems on modern power systems are more
and more difficult to be solved by using only conventional techniques due to large complex networks and
nonlinear characteristic of power systems. The need
of using other alternative tools such as genetic algorithms to solve such difficult problems become evi-

The Modelica Association

89

Modelica 2002, March 18−19, 2002

An Incorporated Use of Genetic Algorithm and a Modelica Library ...

function does not need to be differentiable or continuous. This flexibility in which GA’s use a fitness
function to search for the solution makes GA’s become a power tool for optimization in many difficult
problems in many fields.
GA’s work with coding of the parameters themselves (called string) and then use the genetic operators to evolve the solution with minimum computation. An optimal solution can be found and represented by the final winner in the competitive environment. GA’s consist of simple three operators; selection, crossover and mutation. Selection is the operation in which the fittest individual of the population in the current generation forms part of the population to the new generation. Crossover is responsible
for providing new offspring by selecting two individuals and exchanging some parts of their structures.
Mutation is an operator which is applied for altering
the value of a random position in a string. A simple
algorithm flowchart is shown in Fig.1.

Initial
population

New
generation

Population of
individuals
parents

Crossover
and
Mutation
Mates

Selection

gene
1101

0011

1101

1111

chromosome
decode

Fitness
evaluation
Objective
function

Fig.1 Simple algorithm flowchart of GA
SimStr.dll to be used as one block in Simulink environment. By doing this, command dymcomp is used.
4. Build a Simulink model named model 2. This
model is served as a main system for connecting with
a GA. It contains an S-function block representing a
model as in Dymola and Simulink model for calculating fitness values used in a GA. Parameters and initial
conditions are be defined or changed by passing these
variables as inputs to S-function block.
5. Build a main m-file and a function used in a GA.
Details of above procedures are summarized and
given in Fig.2. After this short summary of how a
Modelica model combines with a GA, we will continue by real building a model for simultaneous tuning
PSSs in a multimachine power system. We will show
the flexibility of using GA by using two objective
functions with the same Modelica model.

3.Combination of Modelica library and
Genetic Algorithms
In this section, we will generally describe how a
Modelica library combines with a GA. One of the
most powerful features of MEX files, including C
format S-functions is it allows ones to incorporate
existing code into a Simulink model. The key idea of
combination a Modelica library and GA is using this
feature by converting a Modelica model to a compiled
MEX-file used in Simulink as an S-function block.
Then a GA that exists in MATLAB environment will
adjust some parameters of a Modelica model according to the fitness values. Briefly, incorporating a
Modelica library and GA can be achieved by these
following steps:
1. Build a Modelica model. The model is build up in
Dymola environment.
2. Build a Simulink model named model 1 by using a
DymolaBlock which is a new interface to Simulink
that can be found in Simulink’s library browser. This
block is shielded around an S-function MEX block
that interfaces to the C code generated by Dymola for
the Modelica model. Model 1 is constructed for serving as an interfacing block for editing and compiling
for two environments by switching the current active
window between Dymola and Simulink environment.
3. Compile to Simulink dll file. It is possible to converted a Modelica model to a compiled MEX-file

Modelica 2002, March 18−19, 2002

Hongesombut K., Mitani Y., Tsuji K.

4. Problem Formulation
The objective of this problem is to tune an appropriate set of PSSs to damp local and inter-area modes.
This problem is not easy by using traditional analytical methods to simultaneously tune all PSSs. The
fixed structure of ith PSS as shown in equation 1 is
used for all 4 generators. It consists of a two-stage
lead lag compensation with time constants T1i - T4i ,
and a gain Ki. We set the wash out time constant Twi
with large enough value so that it can be considered
as a constant.
PSS ( s )i = K i

90

sTwi
1 + sTwi

 1 + sT1i 1 + sT3i 


 1 + sT2i 1 + sT4i 

(1)

The Modelica Association

Hongesombut K., Mitani Y., Tsuji K.

An Incorporated Use of Genetic Algorithm and a Modelica Library ...

Edit

1

Dymola
model 1

2

model 2

4

model 3
(subsystem)

Simulink
3
Compile

Start

Parameters (p) and
initial conditions (xo)

Create dll file

5

GA Cycle
(GEATbx)

Dymcomp,
loaddsin

Fitness value

MATLAB
End

Fig. 2 Summary of how to combine a Modelica library with a GA
where
T1i = T3i =

γi
1
and T2i = T4i =
δi
δi γ i

Typically, the performance of the design controller
is measured directly from the output responses varying with time. This is a straightforward approach that
can guarantee the performance of controllers under
scenarios which are predefined by the designer. Equation 3 shows the objective function used in a GA
meaning that we are trying to minimize the deviation
of generator speed for local and inter-area modes by
applying the suitable set of PSS control parameters.

(2)

We present two methods to satisfy the objective of
tuning PSS as follows,
4.1 Method 1:
index

time domain-based performance

The Modelica Association

91

Modelica 2002, March 18−19, 2002

An Incorporated Use of Genetic Algorithm and a Modelica Library ...

10

min F = ∫

t =0

( ∆ω

12

2

2

+ ∆ω13 + ... ∆ω1n

2

) ⋅ t dt

problem to be solved by a GA can be written in the
following form:

(3)

max F = min(min(δ i )) p

where n is the number of generators by assuming that
generator 1 is a reference.

5. Test Power System and Scenarios

For every operating conditions under consideration,
here, it is supposed that a linearized model of power
system is obtained first. The problem of selecting the
parameters for power system stabilizers that can assure minimum damping performance over the considered set of operating point is converted to a simple
optimization problem and then is solved by a GA with
an eigenvalue-based performance index. The GA objective function is derived in this following way:
A linear model of power system is extracted around
a certain operating condition. The system can be expressed in the linear state-space form as shown in the
following equations
(4)

y = Cx + Du

(5)

(8)

For simplicity, we will choose only one operating
condition for considering in this paper.

4.2 Method 2: eigenvalue-based performance
index

x = Ax + Bu

Hongesombut K., Mitani Y., Tsuji K.

Fig.3 shows a single line diagram of a test power
system constructed by using a graphical editor of
Dymola and ObjectStab. The data of this power system network is given in [8]. The disturbance considered in this study is a three-phase to ground fault near
Bus 7 by the following situations:
t = 1 s : fault is applied,
t = 1.1 s : fault is cleared by tripping one of two
parallel lines.
t = 2.5 s : line is reclosed.

The equation expressed for the controllers is shown
in (6) where in this study, the controller K(s) is a leadlag type that is the same as described by the transfer
function in (1). y(s) is the measuring signal and V(s) is
the output signal from the controller which provides
additional damping by shifting under damped or unstable oscillation modes to the left hand side of the splane.
V ( s ) = K ( s ) y ( s)

(6)

Combining equation 4 through 6, a closed-loop
eigenvalues of the system can be obtained. Here, let
λi = α i ± j β i be the ith mode of the closed-loop sys-

Fig.3 Power system model

6. Demonstration Example

tem. Damping coefficient δ i of the ith mode is calculated by

δi = −

αi
α + β i2
2
i

In this section, we will describe the implementation
of a GA to a Modelica library called ObjectStab by
using 2 different objective functions as described in
section 4. Considering the procedure chart in Fig.2,
we need to follow 5 steps. It should be noted that only
step 5 is different when changing the objective function of a GA. This is due to the manner in which a GA
uses the fitness function to evaluate the goodness of
solutions that provides greater flexibility of using GA
to realize many difficult problems.

(7)

If p is a number of operating conditions where each
condition contains the matrix of damping coefficient
δ i , i = 1, …, n where n is the number of oscillation
modes of the closed-loop system. The optimization

Modelica 2002, March 18−19, 2002

92

The Modelica Association

Hongesombut K., Mitani Y., Tsuji K.

An Incorporated Use of Genetic Algorithm and a Modelica Library ...

In order to follow the procedure in Fig.2, first task
is to build a power system model in Dymola. By using
the objective function in method 1, we need 3 output
variables which are the speed difference of generator
1 and 2, the speed difference of generator 1 and 3, and
the speed difference of generator 1 and 4. It should be
noted that this is because generator 1 is taken as a
reference, hence, the speed difference of generators
within the same area is represented as the local mode
and the speed difference of generator with different
area is represented as the inter-area mode.
Next, we build 3 models in Simulink. Model 1 as
shown in Fig.4 can be constructed by drag and drop a
DymolaBlock which can be found in Simulink’s library browser to a Simulink model. Model name and
its path of the Modelica model must be specified in
the DymolaBlock in order to point the location of a
created Modelica model. It is possible that users can
modify a Modelica model directly by using the editing
command in the DymolaBlock or compiling a Modelica model by using compiling command. In order to
make a Modelica model useful in Simulink and a GA,
we will declare external outputs of a Modelica model.
These outputs are used for evaluating the fitness value
in a GA. The following script is an example of external output declaration in a Modelica model.

which are necessary for input parameters to Sfunction block. GA will change parameters p every
iterations according to the decoded chromosome.

Fig.4 Model 1 in Simulink

class TestPSSga
extends ObjectStab.Examples.Kundur126.linefault;
Real w1, w2, w3, w4;
output Real w12;
output Real w13;
output Real w14;
equation
w1 = G1.w;
w2 = G2.w;
w3 = G3.w;
w4 = G4.w;
w12 = w1 - w2;
w13 = w1 - w3;
w14 = w1 - w4;
end TestPSSga

Fig.5 Model 2 in Simulink

After compiling the model, the declared outputs
will appear in the DymolaBlock. These outputs can be
connected with other Simulink blocks. Now, we can
covert a Modelica model to a compiled MEX Sfunction file by using the following MATLAB commands
dymcomp;
[p, x0, pnames, x0names, inputnames, outputnames] = loaddsin;

The first command line is used to generate a compiled MEX S-function file (dll file). The second
command line is used to load values such as parameters, initial conditions and their names from dsin.txt

The Modelica Association

Fig.6 Model 3 in Simulink

93

Modelica 2002, March 18−19, 2002

An Incorporated Use of Genetic Algorithm and a Modelica Library ...

(a) Objective function by method 1

Hongesombut K., Mitani Y., Tsuji K.

(b) Objective function by method 2

Fig.7 Comparison of two objective function used by a GA
speed deviation. Model 2 shown in Fig.5 is served for
this function where model 3 shown in Fig.6 is a subsystem for calculation ∫ ∆ω2t⋅dt of each speed sig-

After we get a compiled MEX S-function file
which has a default name SimStr.dll, as stated earlier,
we need to calculate ∫ ∆ω2t⋅dt for each generator

Modelica 2002, March 18−19, 2002

94

The Modelica Association

Hongesombut K., Mitani Y., Tsuji K.

An Incorporated Use of Genetic Algorithm and a Modelica Library ...

bounds for PSS parameters shown in Table 1. The
implementation of a GA in this work used real encoding chromosome, a population size 30, maximum
generation 50, a uniform crossover rate of 0.9 and a
uniform mutation rate of 0.01. The approach also
adopted an elitist strategy that copied the best string
found in the current generation to the next generation.
Selection was performed by using the tournament
selection with tournament size of 2. After executing a
GA, the final result as shown in Table 2 were obtained. Fig.8 and 9 show the screen outputs of a GA
by using the objective function by method 1 and
method 2 respectively.

nal. The summation of 3 speed signals become the
objective function of a GA by using the method 1.
Particularly useful in conjunction with a GA is the
way to write the objective function. It is worthwhile
to discuss the construction of the objective function.
In Fig.7, it shows the comparison of two objective
functions used in this study. The meaning behind each
style is
Method 1:
1. Decode the chromosome of a GA.
2. Find the index of parameters which correspond to
the tuning parameters in a Modelica model. The syntax of this command is

Table 1 Bounds for PSS parameters

pindex = tnindex(pnames, ‘parameter name’)

PSS parameter
Kmin
Kmax
γmin
γmax
δmin
δmax

where pnames is obtained from loaddsin command
3. Replace current parameters with new parameters
obtained by a GA.
4. Run the Simulink model with sim command. Simulink will run the model 2 and save the index calculation of each signal when the simulation is complete.
5. Calculate the fitness value by summing 3 signals
which each signal is calculated by subsystem model 3.

Table 2 Final result obtained by a GA
Method 1

Method 2:
1. Decode the chromosome of a GA.
2. Find the index of parameters which correspond to
the tuning parameters in a Modelica model.
3. Replace current parameters with new parameters
obtained by a GA.
4. Run the Simulink with sim command in order to
find good initial condition x0.
5. When the initial values are obtained, we can then
proceed to use the MATLAB linmod function to determine the [A, B, C, D] matrices of the small-signal
model of the nonlinear system about the chosen
steady-state operating point. The syntax of the linearization command is as follows:

PSS1
PSS2
PSS3
PSS4
Method 2

PSS1
PSS2
PSS3
PSS4

K
20.000
20.000
17.791
18.319
K
19.175
20.000
14.209
7.513

T1 = T3
0.331
0.107
0.127
0.201
T1 = T3
1.583
0.161
0.198
0.051

T2 = T4
0.139
0.291
0.153
0.055
T2 = T4
0.632
0.184
0.239
0.218

To demonstrate the effectiveness of the resulting
controller obtained by using 2 objective functions,
nonlinear simulation and plot of close-loop eigenvlaues were performed. In nonlinear simulations
of Fig.10 to 12, the responses of generator speed deviation for local and inter-area modes confirm the
effectiveness of the results obtained by a GA. It
should be noted that the method 1 gives better result
than the method 2 when using time domain-based
performance index. The system is well damped and is
stabilized in less than 5 seconds.
Fig. 13 to 14 show the plot of dominant eigenvalues of the closed-loop system. It can be observed that
using PSS parameters obtained by both methods, the
system is sufficiently damped with all modes of the

[A, B, C, D] = linmod(‘model name’, x0)

It should be noted that when calculating the eigenvalues, it is not necessary to have an input, but there
should be at least one output of a Modelica model.
6. Calculate the fitness value by (8).

7. Simulation Results
A GA is applied to solve the problem of simultaneous tuning by using 2 different objective functions. In
this study, routines from GEATbx were used with

The Modelica Association

value
0
20
0.1
10
1
10

95

Modelica 2002, March 18−19, 2002

An Incorporated Use of Genetic Algorithm and a Modelica Library ...

Hongesombut K., Mitani Y., Tsuji K.

Fig.8 Screen output from a GA by using the objective function in method 1

Fig.9 Screen output from a GA by using the objective function in method 2

It is become clear that using different GA objective
function, the final result may be quite different. In
addition, GA is a time consuming search procedure.
Thus, GA is not generally used for problems easily
optimized.

system having the minimum damping greater 5%
which is a typical requirement in PSS tuning. It is also
found that the method 2 gives better result than the
method 1 in case of using eigenvalue-based performance index.

Modelica 2002, March 18−19, 2002

96

The Modelica Association

Hongesombut K., Mitani Y., Tsuji K.

An Incorporated Use of Genetic Algorithm and a Modelica Library ...

30%

25%

20%

15%

10%

5%

16

δ

without PSS
m ethod 1
m ethod 2

= 33.058%
min

14

0.01
12

0.005
10

imaginary

speed deviation between generator 1 and 2 (pu)

0.015

0

8

6

-0.005
4

-0.01
2

-0.015
0

1

2

3

4

5

6

7

8

9

0
-15

10

-10

time (s)

-5

0

real

Fig.10 Speed deviation of generator 1 and 2

Fig.14 Closed-loop eigenvalues obtained by
method 2

speed deviation between generator 1 and 3 (pu)

0.015
without PSS
method 1
method 2

8. Conclusions

0.01

0.005

This paper deals with the incorporated use of a
Modelica library called ObjectStab and a GA and
application of a GA for simultaneous tuning of power
system stabilizers in a multimahcine power system.
The power system modeling can be realized by using
ObjectStab where the behavior of dynamic systems
can be expressed by using advance features of Modelica language for detailed physical modeling. We also
showed how to link a GA and a Modelica model by
using the Simulink interface of the Dymola. We
showed the flexibility of optimization by a GA with
two different objective functions without modifying
the original Modelica model. Given a suitable objective function, the final solution will satisfy the required controller performance. It is important to point
that the idea does not limit only the applications to
power systems as shown in an example of this paper,
but also other Modelica users can adapt this idea to
their own works.

0

-0.005

-0.01

-0.015
0

1

2

3

4

5

6

7

8

9

10

time (s)

Fig.11 Speed deviation of generator 1 and 3
speed deviation between generator 1 and 4 (pu)

0.015
without P SS
method 1
method 2
0.01

0.005

0

-0.005

-0.01

-0.015
0

1

2

3

4

5

6

7

8

9

10

time (s)

9. Acknowledgement

Fig.12 Speed deviation of generator 1 and 4
30%

25%

20%

15%

10%

We gratefully acknowledge helpful discussions
with Dr. Mats Larsson from ABB Corporate Research
Ltd., Switzerland.

5%

16

δ

min

= 8.956%

14

12

10. References

imaginary

10

8

[1] M. Larsson, “ObjectStab - a Modelica library for
power system stability studies”, Proc. of the 2000
Modelica Workshop.
[2] Dymola, Dynamic Modeling Laboratory, Dynasim 2001.
[3] M. M. Tiller, Introduction to Physical Modeling
with Modelica, Kluwer Academic Publishers,
Massachusetts 2001.

6

4

2

0
-15

-10

-5

0

real

Fig.13 Closed-loop eigenvalues obtained by
method 1

The Modelica Association

97

Modelica 2002, March 18−19, 2002

An Incorporated Use of Genetic Algorithm and a Modelica Library ...

Hongesombut K., Mitani Y., Tsuji K.

[4] D. Hanselman and B. Littlefield, Mastering Matlab 6, Prentice Hall, New Jersey 2001.
[5] J. B. Dabney and T. L. Harman, Mastering Simulink 4, Prentice Hall, New Jersey 2001.
[6] H. Pohlheim, Genetic and Evolutionary Algorithm Toolbox for use with MATLAB, Publication
on internet web at http://www.geatbx.com.
[7] D. E. Goldberg, Genetic Algorithms in Search,
Optimization and Machine Learning, Addison
Wesley, New York, 1989.
[8] P. Kundur, Power system stability and control
McGrawHill, New York 1993.

Komsan Hongesombut received his B.Eng.(first
class honors) and M.Eng. degrees from the Department of Electrical Engineering, King Mongkut’s Institute of Technology Ladkrabang, Thailand in 1997 and
1999 respectively. He is currently a Ph.D student at
Osaka University, Japan. His research interests include the applications of intelligent techniques to
power systems. He is a student member of the Institute of Electrical Engineers of Japan, IEE, and IEEE.
Yasunori Mitani received his B.Sc., M.Sc., and Dr.
of Engineering degrees in electrical engineering from
Osaka University, Japan in 1981, 1983, and 1986
respectively. He joined the Department of Electrical
Engineering of the same university in 1990. He is
currently Associate Professor. His research interests
are in the areas of analysis and control of power systems. He is a member of the Institute of Electrical
Engineers of Japan, the Institute of Systems, Control
and Information Engineers of Japan, and the IEEE.
Kiichiro Tsuji received his B.Sc and M.Sc. degrees
in electrical engineering from Osaka University, Japan, in 1966 and 1968, respectively, and his Ph.D in
systems engineering from Case Western Reserve University, Cleveland, Ohio in 1973. In 1973 he jointed
the Department of Electrical Engineering, Osaka University, and is currently Professor. His research interests are in the areas of analysis, planning, and evaluation of energy systems, including electrical power
systems. He is a member of the Institute of Electrical
Engineers of Japan, the Japan Society of Energy and
Resources, the Society of Instrument and Control
Engineers, the Institute of Systems, Control and Information Engineers, and the IEEE.

Modelica 2002, March 18−19, 2002

98

The Modelica Association

Urquía A., Dormido S.

DC, AC Small−Signal and Transient Analysis of Level 1 N−Channel MOSFET ...

DC, AC Small-Signal and Transient Analysis of Level1
N-Channel MOSFET with Modelica

A. Urquia and S. Dormido
Dep. Informática y Automática, Facultad de Ciencias, U.N.E.D.
Avda. Senda del Rey 9, 28040 Madrid, Spain.
E-mail: aurquia@dia.uned.es, sdormido@dia.uned.es

ABSTRACT
The “translation” of the SPICE capabilities into Modelica language would allow
combining the best of each tool: the SPICE expertise at circuit analysis and the
Modelica/Dymola expertise at object-oriented modelling and simulation of hybrid
systems. This contribution intends to be a first step to achieve this goal. A reduced group
of SPICE device models are translated into Modelica language for OP, AC and TRAN
analyses. It includes passive components (resistor and capacitor), independent voltage and
current sources, and the SPICE2 level1 n-channel MOSFET.

as its control voltage or current changes. Equally, the
functions available for ABM are also continuous (for
instance, the int function can not be implemented).
The reason behind this requirement is the heavy use
that SPICE numerical algorithms make of continuity
(OrCAD, 1999; Kielkowski, 1998). In consequence,
SPICE-based simulators are not suited for the
simulation of hybrid models (i.e., combined
continuous/discrete models) due to its inability to
handle discrete events.

1. INTRODUCTION
The simulator SPICE is an essential computer-aid for
circuit design. Originally, SPICE2 was conceived as
a stand-alone, general purpose, analog circuit
simulator. However, since the development of
SPICE2 at the University of California in 1975,
many commercial and freeware SPICE-compatible
simulators have been developed for a variety of
systems (UNIX, PC, etc). Most of these tools
• run in connection with other simulation
programs used in the circuit design flow,
• support analog, digital and mixed analog/digital
simulation, and
• include improved device models, additional
analyses and device model libraries.
They provide some support to the multi-domain
system simulation facilitating the analog behavioral
modelling (ABM). Behavioral parts allow defining a
circuit segment as a mathematical expression or a
lookup table. PSpice (OrCAD, 1999) is a
commercial,
PC-version,
SPICE-compatible
simulator. PSpice ABM library includes math
functions, limiters, Chebyshev filters, integrators,
differentiators, etc. However, the SPICE-based
simulators impose a hard restriction to ABM: the
function continuity (OrCAD, 1999; Kielkowski,
1998).

On the contrary, general-purpose modelling
languages are intended for the simulation of multidomain hybrid models. To this respect, the objectoriented modelling language Modelica (Modelica,
2000) is intended to serve as a standard format so
that models arising in different domains can be
exchanged between tools and users (Aström,
Elmqvist and Mattsson, 1998). The “translation” of
the SPICE capabilities (device models and analysis
modes) into Modelica language is one of the
Modelica library improvements that have been
suggested (Clauss et al., 2000). It would allow
combining the best of each tool: the SPICE expertise
at circuit analysis and the Modelica/Dymola
(Elmqvist et al., 2000) expertise at object-oriented
modelling and simulation of hybrid systems. This
contribution intends to be a first step to achieve this
goal.

Device equations built into SPICE are continuous.
For instance, voltage- or current-controlled switches
are not ideal: they have a finite (very small) “on”
resistance and (very large) “off” resistance. The
switch resistance changes smoothly between the two

An important feature of SPICE device models is their
variable-structure nature. A model is said to have a
variable structure when its mathematical description
changes during the simulation run. A different device
model is formulated for each analysis mode:

The Modelica Association

99

Modelica 2002, March 18−19, 2002

DC, AC Small−Signal and Transient Analysis of Level 1 N−Channel MOSFET ...

• static model (DC analysis),
• AC small-signal model (AC analysis), and
• large-signal model (transient analysis).
The transitions among these three device
formulations are carried out in simulation time. A
DC analysis (Massobrio and Antognetti, 1993)
• can be performed prior to a transient analysis to
determine the transient initial conditions, and
• it is automatically performed prior to an AC
small-signal analysis to determine the linearized,
small-signal models for the non-linear devices.
In addition, some DC analysis algorithms require the
combined use of the three device formulations.

•

Urquía A., Dormido S.

Unidirectional control signals (arrow in Fig. 1)
and global variables transmit the information
from analysis models to device models. In
addition, global parameters sets properties
common to both analysis and device models.

Controller level: analysis models
ANALYSES package contains the OP, TRAN and
AC models. Bias point calculation is a part of OP and
AC analyses and it is an option of TRAN analysis.
Therefore, the bias point calculation algorithms are
programmed in a separate partial model, called
BiasPointCalculation, inherited by the analysis
models (see Fig. 1). Control signals (see Table 1) and
global variables (see Table 2) are evaluated in the
analysis models.

In this contribution three analysis modes are
considered:
• bias point (OP),
• AC sweep (AC), and
• transient analysis (TRAN),
for three analog device types:
• Passive devices: linear resistor and capacitor.
• Independent voltage and current sources.
• Semiconductor device: SPICE2 level1 n-channel
MOSFET. It is composed of linear resistors,
voltage-dependent capacitors and voltagecontrolled current sources.
In addition, IC1 and IC2 pseudo-components are
modelled for setting initial conditions.

Control signal

T

R

B

W
*

B

BPC

C

B

*

C

B

*

C

B

BPC

S

B

BPC

C, IC

B

BPC

C, IC

I

BPC

C, IC

B

BPC

S

B

BPC

S

B

*

S, R

B

BPC

S, R

I

BPC

S

I

*

S

B

BPC

R

B

*

S

S

Ctrl_AC
Ctrl_CBREAK_resetTran
Ctrl_CBREAK_Tran2DC
Ctrl_CBREAK_Tran2IC
Ctrl_DC
Ctrl_IC_clampDC
Ctrl_IC_clampTran

Model structuring into libraries and the interaction
between models are discussed in Section 2. The way
of using the model libraries to analyse the userdefined circuits is also outlined. Initial condition
setting is described Section 3. Two procedures are
supported: IC symbols and the capacitor IC property.
The translation into Modelica language of the
passive device and source models is addressed in
Section 4. Device models have a variable structure
and signals are defined to control the model structure
transitions. Each analysis mode consists on an
ordered sequence of elementary operations implying
changes in the device model structure. Analysis
models set the control signals in order to accomplish
the required device-model structure changes.
Analysis models are discussed in Section 5. Bias
point calculation is the most problematic step from
the numerical point of view. Four alternative bias
point calculation algorithms are implemented.
Finally, level1 NMOS model is outlined in Section 6.

Ctrl_IC_mode
Ctrl_IS_inhibit
Ctrl_IS_TranOP
Ctrl_log_AC
Ctrl_log_DC
Ctrl_OP_mode
Ctrl_OP_value
Ctrl_RBREAK_Tran2DC
Ctrl_Tran

scaleGMIN

Scale factor of the “GMIN stepping”
algorithm for bias point calculation.

For the sake of simplicity, neither parameter
dependence with temperature nor TEMP analysis
have been considered in the present library release.
Temperature is considered a constant variable
intervening in some device constitutive relations (for
instance, the MOSFET source-substrate pn-junction
model).

Freq

AC small-signal frequency.

Temp

Analysis temperature.
Table 2. Global variables.

Table 1. Control signals.
T: Variable type. (B): Boolean. (I): Integer (0,1)
W: Control signal written during the…
(BPC): bias point calculation. (*): other steps of the analyses.
R: Control signal read by …
(S): source. (C): capacitor. (R): resistor. (IC):IC symbols

Controlled level: device models
Device models are grouped in three packages:
• BREAKOUT,
• SOURCE, and
• SPECIAL.
The models of BREAKOUT and SOURCE packages
allow the composition of user-defined circuits, while
the SPECIAL’s provide one way to specify the
simulation initial conditions. In addition, a fourth
package containing the device model interfaces has
been defined: INTERFACE.

2. ARCHITECTURE
A two-level architecture is proposed (see Fig. 1):
• Upper (controller) level is composed of the
analysis models.
• Lower (controlled) level is composed of the
device models.

Modelica 2002, March 18−19, 2002

100

The Modelica Association

Urquía A., Dormido S.

DC, AC Small−Signal and Transient Analysis of Level 1 N−Channel MOSFET ...

package ANALYSES (analyses.mo)
partial model BiasPointCalculation
extends INIT.Analysis;
replaceable model Circuit = NULL;
extends Circuit;
model Tran
extends BiasPointCalculation;

model OP
extends BiasPointCalculation;

model AC
extends BiasPointCalculation;
(init.mo)
type ...
package INIT

(functions.mo)
function …

partial model Analysis
inner…
partial model Part
outer...

package INTERFACE (interface.mo)

package BREAKOUT (breakout.mo)
model Ground
extends INTERFACE…
model Rbreak
extends INTERFACE…
extends INIT.Part;

(source.mo)
package WAVEFORMS

package SOURCE
…

model Cbreak
extends INTERFACE…
extends INIT.Part;

model VSource

package SPECIAL (special.mo)
model IC1
extends INTERFACE…
extends INIT.Part;
model IC2
extends INTERFACE…
extends INIT.Part;

model ISource

model MOST
extends INTERFACE…
extends INIT.Part;

Figure 1. Two-level architecture.

time between consecutive events,
as follows:

Initialisation file
The initialisation file, init.mo, contains:
• Type definitions. Types conform to the Modelica
SIunits package. However, they are redefined for
the sake of conciseness when used. For instance:

TIME_SCALE

It is intended for providing an (rough)
approximate value of the circuit timeconstant.
LOG_RESULTS
It determines the amount of
information to be logged during the
bias point calculation and the AC
small-signal analysis.
Table 3. Global parameters

INIT package. The control signals, the global
variables and the global parameters are defined
in the INIT package. It contains two partial
models (see Fig. 1):
• Analysis, inherited by the analysis models.
• Part, inherited by the device models.
The same set of control signals, variables and
parameters is defined in both partial models:
Analysis model variables are inner ones, while
Part variables are outer ones.

parameter plays another important role
(not implemented in the current release of the
libraries): redefine the units of the time variable in
order to allow the adequate numerical solution of the
system. Circuit simulation for microelectronics
applications requires very small time values in
comparison with the by-default time-related DAEsolver parameters. For this reason, it is best to
include a scale factor between the circuit time and
the DAE-solver time (i.e., the time variable).

TIME_SCALE

Global parameters
Two global parameters have been defined (see Table
3). TIME_SCALE is used for setting the length of the
source-ramping processes of some bias point
calculation algorithms. In addition, it is used for
establishing the time elapsed between consecutive
control signal transitions (conceptually similar to the
system clock period). To this end, the integer
parameter TIME_SLOT is defined in the analysis
models. It represents a percentage (1 to 100). The
The Modelica Association

is defined

CLOCK = TIME_SLOT * TIME_SCALE / 100

type Voltage
=
Modelica.SIunits.Voltage;

•

CLOCK,

Similar considerations will be made when discussing
the pn-junction model. The use of the international
system of units for the current is inadequate, because
it leads to numerical problems. Large differences in
the order of magnitude of the variables (for instance,
the current and the voltage) makes impossible to set
101

Modelica 2002, March 18−19, 2002

DC, AC Small−Signal and Transient Analysis of Level 1 N−Channel MOSFET ...

Urquía A., Dormido S.

•

adequate values for the numerical algorithm
tolerances, the Dymola eveps parameter for event
detection (Elmqvist, Cellier and Otter, 1993), etc.
This fact is taken into account by re-formulating the
model constitutive relations. In order to keep the
compatibility with Modelica standard libraries, the
international system of units is used for all the model
terminal variables.

The IC property of capacitors (inductor model is
not included in this library release).
IC property allows associating the initial condition
with a device, while the IC symbols allow the
association to be with a node or a node pair. Note
that these ways of specifying the simulation initial
condition substitute the Dymola standard procedures
to set the initial value of the state variables.

Performing circuit analyses

Two operations require the static model solution:
• bias point calculation (during OP and AC), and
• transient initial condition calculation.
When the transient initial condition calculation is
skipped (a Boolean parameter controls this option),
the devices with the IC property defined start with
the specified value. However, all other such devices
have an initial state of zero. IC symbols are ignored.

Two pieces of information are needed to perform a
circuit analysis: the analysis model and the circuit
model. The analysis models inherit (as a replaceable
model, called Circuit) the circuit model (see
BiasPointCalculation in Fig 1). The analysis model
instantiations have to contain the redeclaration of the
Circuit model. Consider the following example:

IC symbols clamp the voltage for the entire bias
point calculation. PSpice attaches a voltage source
with a 0.0002 ohm series resistance (R_EPS) at each
net to which an IC symbol is connected. This is the
set-up of the IC-symbol Modelica model. The model
of the capacitor IC-property depends on whether the
bias point is calculated or the calculation is skipped:
• During the bias point calculation, the capacitor
IC property is implemented using an IC2 symbol
in parallel with the capacitor. The capacitor
model contains this voltage-clamp circuit.
• When the initial transient solution is skipped, the
capacitor voltage is initialised to its IC value
using a “when clause”.
Control signals have been defined to set the state
(open/close) of the IC symbols switches, initialise the
capacitor voltage drop, etc.

(File: my_circuit.mo)
model my_circuit
…
end my_circuit;
model circuitAnalysis_OP =
ANALYSES.OP ( redeclare model Circuit =
my_circuit);
model circuitAnalysis_Tran =
ANALYSES.Tran ( redeclare model Circuit =
my_circuit);
model circuitAnalysis_AC =
ANALYSES.AC ( redeclare model Circuit =
my_circuit);

The analysis to perform (only one per run) is selected
in the script file. For instance, AC analysis:
(File: my_circuit.mos)
openModel("pspice.mo");
openModel("my_circuit.mo");
checkModel(problem="circuitAnalysis_AC");
translateModel(problem=
"circuitAnalysis_AC");

4. DEVICE MODELS
Resistor, capacitor and independent source models
are discussed.

The file pspice.mo:
• imports the library files (see Table 4), and
• defines the graphic windows containing the
model icons.
File
analyses.mo
breakout.mo
functions.mo
init.mo
interface.mo
pspice.mo
source.mo
special.mo

4.1. Interface
Device models are composed of three formulations:
static, AC small-signal and large-signal. Each model
formulation is described by its own set of equations
and variables. Pin model is conceived to allow the
simultaneous connection of the three formulation
terminal variables. AC small-signal currents and
voltages (complex numbers) are represented in
rectangular coordinates (i.e., real and imaginary).
The current is positive when flows into the pin.

Package
ANALYSES
BREAKOUT
INIT
INTERFACE
PSPICE
WAVEFORMS
SOURCE
SPECIAL

The interface of the two-pin devices is composed of
two Pin connectors. PSpice sign criterion for current
is adopted: positive current flows from the (+) node
through the device to the (-) node.

Table 4. Complete list of files and packages.

(File: interface.mo)

3. SETTING INITIAL CONDITIONS

connector Pin
Voltage
Voltage
Voltage
Voltage
flow Current
flow Current
flow Current
flow Current

Adopting the PSpice methodology (OrCAD, 1999),
two equivalent procedures are provided to specify
the analysis initial conditions:
• Setpoint pseudo-components: IC1 and IC2 (see
Fig. 1, SPECIAL package). IC1 is a one-pin
symbol that allows setting the initial voltage on a
node. IC2 is a two-pin symbol that allows setting
the initial voltage between two nodes.
Modelica 2002, March 18−19, 2002

vDC
vTran
vAC_Re
vAC_Im
iDC
iTran
iAC_Re
iAC_Im

"Static model”;
"Large-signal model";
"AC small-signal";
"AC small-signal”;
"Static model”;
"Large signal”;
"AC small-signal";
"AC small-signal";

…
end Pin;

102

The Modelica Association

Urquía A., Dormido S.

DC, AC Small−Signal and Transient Analysis of Level 1 N−Channel MOSFET ...

partial model TwoPin
Pin
p
"(+) node";
Pin
n
"(-) node";

controls vClampDC and
voltages. Some bias point calculation
algorithms need the independent sources ramping
from zero up to their nominal initial values. When
implementing these algorithms, the voltage clamping
sources of the IC symbols and the capacitor IC
property need also be ramped from zero to their
respective IC values. Two cases are distinguished:
• ctrl_IC_mode==0, the clamping voltage
(vClampDC or vClampTran) is constant and
equal to the IC value.
• ctrl_IC_mode==1, the clamping voltage is
ramped from zero up to its IC value.
The signal

ctrl_IC_mode

vClampTran

…

4.2. Linear resistor
Resistor static model is shown in Fig 2. The purpose
of the IC1-like circuits (switches, R_EPS resistors and
voltage sources) is clamping the DC-formulation
voltage at the pins. The bias point calculation
algorithm “dynamic model ramping” requires the
following operation: clamping the DC-formulation
voltage to the instantaneous value of the large-signal
formulation. The ctrl_RBREAK_Tran2DC signal
controls this information transfer between
formulations. When ctrl_RBREAK_Tran2DC becomes
true:
• The source voltages (vDCclampP and vDCclampN)
are set to the instantaneous value of the transient
voltage at the correspondent pin. Then source
voltages are held constant.
• The switches are closed. They remain closed
only while the signal is true.
The large-signal and AC small-signal models do not
include these IC1-like circuits.

In addition, control signals trigger instantaneous
changes in the capacitor large-signal voltage drop
(see Fig. 4).
p (+)
+

ctrl_IC_clampDC
and IC_ENABLED

vDC

R_EPS

-

vClampDC

n (-)
p (+)

R

ctrl_IC_mode

n (-)

Figure 3. Capacitor static model.
ctrl_RBREAK_Tran2DC

p (+)
R_EPS
vDCclampP

When
ctrl_RBREAK_Tran2DC

+

R_EPS
vDCclampN

vTran

Then

ctrl_IC_clampTran
and IC_ENABLED

C

R_EPS

-

vDCclampP = p.vTran;
vDCclampN = n.vTran;

vClampTran

n (-)
ctrl_IC_mode

Figure 2. Resistor static model.

When

4.3. Capacitor
Linear and voltage-dependent capacitors have to be
modelled. The partial model Capacitor describes all
the capacitor behavior except its large-signal and AC
small-signal capacitance. Cbreak model (linear
capacitor) and MOS1 capacitors extend Capacitor.

reinit(vTran, IC);

ctrl_CBREAK_Tran2DC

reinit(vTran, vDC);

ctrl_CBREAK_resetTran reinit(vTran, 0);

Figure 4. Capacitor large-signal model.

4.4. Independent sources

Capacitor static-formulation is shown in Fig. 3. The
implementation of the IC property requires the IC2like circuit (switch, R_EPS resistor and vClampDC
source). Large-signal formulation is shown in Fig. 4.
IC2-like circuit is also included because the
“dynamic model ramping” algorithm uses the largesignal formulation during the bias point calculation.
The Boolean signals
• ctrl_IC_clampDC, and
• ctrl_IC_clampTran.
controls the static and large-signal model switches
respectively.

There are a lot of similarities between the models of
the voltage and the current independent sources:
• the interface,
• the DC and transient analysis signals, etc.
The elements in common are defined in the partial
model Stimulus (SOURCE package) and the source
models (VSource and ISource, see Fig. 1) inherit it.
Source model parameters allow defining the DC and
AC characteristics of the source:
• DC analysis: DC_VALUE.
• AC analysis: AC_MAG and AC_PHASE.
Time-dependent waveforms used in the transient
analyses are defined in the WAVEFORMS package
(see Fig. 1): EXP, PULSE and PWL. PSpice standard
has been adopted for waveform parameter names.
The Stimulus model inherits the waveform model as

The capacitor parameter IC_ENABLED enables or
disables the IC property. It allows distinguishing
between the cases when IC is intentionally set to zero
and those cases when the IC property is not enabled
(and its by-default value is also zero).
The Modelica Association

then

ctrl_CBREAK_Tran2IC
and IC_ENABLED

103

Modelica 2002, March 18−19, 2002

DC, AC Small−Signal and Transient Analysis of Level 1 N−Channel MOSFET ...

a replaceable model. Therefore, the waveform model
can be declared when instantiating the source model
(no waveform is selected by default). Some examples
are provided in Table 5.

Transient analysis
The control signal ctrl_Tran determines:
• whether the transient analysis is enabled, and the
source signal is calculated of its associated
waveform (ctrl_Tran==true),
• or the static bias point calculation is enabled
(ctrl_Tran==false). The algorithm “dynamic
model ramping” requires the circuit large-signal
model simulation in order to calculate a “good”
initial value for static model iteration.

DC and AC specifications:
SOURCE.VSource V1(
DC_VALUE=3, AC_MAG=10, AC_PHASE=45 );

EXP waveform:
SOURCE.VSource V1(
DC_VALUE=3, AC_MAG=10, AC_PHASE=45,
redeclare model
TransientSpecification =
WAVEFORMS.EXP( S1=1,S2=2,TD1=1,TC1=1,
TD2=3,TC2=1 ));

While ctrl_Tran==false, the source value is
determined by the parameter ctrl_IS_TranOP:
• While ctrl_IS_TranOP==false, the value is
zero.
• While ctrl_IS_TranOP==true, the value
depends on the parameters ctrl_OP_mode, and
ctrl_OP_value. The response associated to these
parameters is the same than the previously
discussed for the static formulation.

PULSE waveform:
SOURCE.VSource V1(
DC_VALUE=3, AC_MAG=10,
redeclare model
TransientSpecification =
WAVEFORMS.PULSE( S1=1,S2=2, TD=1,TR=1,
PW=3,TF=1, PER=8 ));

PWL waveform:
SOURCE.VSource V1(
DC_VALUE=3, AC_MAG=10, AC_PHASE=30,
redeclare model
TransientSpecification =
WAVEFORMS.PWL(
signalCorners = { 1, 2, 4, 8, 16 },
timeCorners
= { 0, 1, 2, 3, 4 } ));

AC small-signal analysis
While the control signal ctrl_AC is true, the AC
small-signal value of the source is set according to
the source parameters AC_MAG and AC_PHASE.
Otherwise, the value is zero.

Table 5. Examples of source instantiations.

Model of the disabled formulations

DC analysis

It is important to notice that while a model
formulation is not enabled, the correspondent values
of the independent sources are zero. In this situation,
the circuit node voltages are trivially calculated and
the simulation computational effort is not
unnecessarily increased. The control signals that
enable each of the three formulations are:
• ctrl_DC,
• ctrl_Tran, and
• ctrl_AC.

The control signal ctrl_DC enables or disables the
DC model:
• While ctrl_DC==false, the DC value of all the
independent sources of the circuit is zero.
• While ctrl_DC==true, the DC value of the
sources is determined by the integer parameters:
• ctrl_OP_mode, and
• ctrl_OP_value.
In order to set the source value when calculating the
initial transient condition, a parameter is associated
to each waveform model: TRANS_INITIAL. This
parameter coincides with the waveform initial value.

Total power dissipation
The bias point calculation includes the evaluation of
the total power dissipation. It is calculated adding the
contribution of all the independent voltage sources:

The parameter ctrl_OP_value determines the source
value during the static model solution:
• ctrl_OP_value==0: source value is DC_VALUE.
• ctrl_OP_value==1: value is TRANS_INITIAL.

WDC =

The parameter ctrl_OP_mode determines the mode
of reaching the previous value:
• ctrl_OP_mode==0: the source is hold constant to
the value.
• ctrl_OP_mode==1: the source value is increased
linearly from zero with a slope equal to the value
divided by TIME_SCALE.

∑

v DC
all indep.
V sources

(− iDC )

The calculation is implemented thanks to the
Modelica capability of describing “physical fields”
(see Table 6). The PowerDisipation connector is
defined. The model of the voltage source contains:
• an instantiation of this connector,
• the declaration of an outer connector of this type,
• the connection between them.
The “environment” (inner) connector is defined in
the BiasPointCalculation model.

The “dynamic model ramping” algorithm requires
the cancellation of the independent sources. The
control signal ctrl_IS_inhibit allows this
operation. While it is true:
• voltage independent sources are substituted by
opens (current=0), and
• current independent sources by shorts
(voltage=0).

Modelica 2002, March 18−19, 2002

Urquía A., Dormido S.

4.5. Log of analysis results
The analysis results are logged to the dslog.txt file
using the Dymola’s LogVariable function. Two
parameters control this information log:

104

The Modelica Association

Urquía A., Dormido S.

•

DC, AC Small−Signal and Transient Analysis of Level 1 N−Channel MOSFET ...

PSpice first tries to solve the static model of the
circuit using the Newton-Raphson algorithm. If a
solution is not found and “GMIN stepping” is
enabled (using .OPTION STEPGMIN) then GMIN
algorithm is applied. If it also fails or it is not enabled
then “static model ramping” is applied. In addition to
these three algorithms, a fourth one is programmed in
the BiasPointCalculation model: the “dynamic
model ramping” algorithm, proposed in (Cellier,
1991). The SOLVE_STATIC parameter determines
which of the four algorithms to use.

(global parameter). It allows
specifying the required detail level at logging
results (see Table 7).
• HIDDEN_COMPONENT. This device-dependent
parameter classifies the circuit devices into two
types: those whose variables have to be logged
always (HIDDEN_COMPONENT==false), and those
whose variables have to be logged only in
special cases (HIDDEN_COMPONENT==true).
The complex AC small-signal voltages and currents
are logged in Cartesian and polar coordinates. In
addition, the polar magnitude is also expressed in
decibels (defined as 20log10( )).
LOG_RESULTS

Two control signals, internal to the analysis models,
are defined to synchronize the bias point calculation
with other analysis operations:
• biasPoint. Its transition from false to true
indicates that the static-model solution must
start.
• biasPointCalculated. When the static-model
solution is just finished, it becomes true.
The BiasPointCalculation model reads the value of
biasPoint signal and writes biasPointCalculated.

(File: interface.mo)
connector PowerDisipation
flow Power disipatedPower;

…
(File: source.mo)
model VSource

…
outer INTERFACE.PowerDisipation
TotalPowerDisipation;
INTERFACE.PowerDisipation powerDisipation;

Next, the four algorithms are briefly discussed. The
control signal transitions required for algorithm
completion are shown, but for the sake of clarity,
their cause-effect relationships are omitted. Two
additional comments:
• ctrl_OP_value signal is not written by the bias
point calculation algorithms.
• Control signals evaluated at bias point
calculation (see Table 1) and hold to false during
the whole algorithm, are omitted.

…
equation
when ctrl_log_DC then
powerDisipation.disipatedPower =
vDC*(-iDC);
end when;
connect ( powerDisipation,
TotalPowerDisipation );

…
(File: analyses.mo)
partial model BiasPointCalculation
inner INTERFACE.PowerDisipation
TotalPowerDisipation;

Static model iteration (SOLVE_STATIC:=0)

…

The solution of the static problem is left in hands of
the modelling language. PSpice has two symbols to
provide an initial guess for Newton-Raphson
algorithm: NODESET1 and NODESET2 (OrCAD,
1999). These symbols have not been translated into
Modelica language because they do not represent any
advantage compared to Dymola Initial Calculation
methods (Elmqvist et al., 2001). The Modelica
implementation of the algorithm is shown in Fig. 5.

Table 6. Total power dissipation calculation.
HIDDEN_COMPONENT
False
true

Voltage at resistor pins
0, 1, 2
2
Current through
0, 1, 2
2
independent voltage sources
Total power dissipation
0, 1, 2
2
Voltage drop at resistors
1, 2
2
Current through resistors
1, 2
2
Power dissipation of each
1, 2
2
independent voltage source
Table 7. LOG_RESULTS values producing the variable
log as a function of HIDDEN_COMPONENT value.

CLOCK

biasPoint
ctrl_DC

5. ANALYSES

ctrl_log_DC

PSpice OP, AC and TRAN analyses are translated
into Modelica language. Note that analysis models
force the simulation end when they have completed
their operations (terminate function is used). Large
simulation times should be selected in the Dymola
program window to avoid interfering with analysis
execution.

ctrl_IC_clampDC
biasPointCalculated

Figure 5. Static model iteration algorithm.

Static model ramping (SOLVE_STATIC:=1)

5.1. Bias point calculation

PSpice cuts back the power supplies to almost zero
(0.001%) so that all non-linearities are turned off.
When the circuit is linear, a solution can be found
(very near zero, of course). The initial condition of
this first step is zero for all voltages. Then, PSpice
works its way back up to 100% power supplies using

PSpice provides three alternative algorithms for
solving the circuit static model (OrCAD, 1999):
• static model iteration,
• static model ramping, and
• GMIN stepping.
The Modelica Association

105

Modelica 2002, March 18−19, 2002

DC, AC Small−Signal and Transient Analysis of Level 1 N−Channel MOSFET ...

a variable step size (OrCAD, 1999). The process
relies heavily on the equation continuity with respect
to the power supplies.

Dynamic model ramping (SOLVE_STATIC:=3)
The initial condition to iterate the static model is
obtained by simulating the large-signal model
(Cellier, 1991). A transient analysis is performed: all
sources are ramped up from zero to the desired initial
value for the simulation and this value is held for
some time to allow the circuit to stabilise. Then the
large-signal formulation voltages are transferred to
the static model (using ctrl_RBREAK_Tran2DC and
ctrl_IS_inhibit). This static-circuit setting is held
for a clock cycle. Then, the power supplies are
connected to the circuit, the resistor voltageclamping circuits are disconnected, and the static
model is solved. The Modelica implementation of the
algorithm is shown in Fig. 8.

This algorithm is translated into Modelica language
ramping the static-formulation value of the
independent sources from zero up to their target
values. The clamping voltages of the IC symbols and
the capacitor IC property are also adequately ramped.
The value of the parameter TIME_SCALE determines
the length of the ramping. The algorithm is
implemented by means of the signal transitions
shown in Fig. 6.
TIME_SCALE

Urquía A., Dormido S.

CLOCK

biasPoint
TIME_SCALE TIME_SCALE CLOCK

ctrl_DC
biasPoint
ctrl_OP_mode
ctrl_IS_TranOP
ctrl_log_DC
ctrl_OP_mode
ctrl_IC_clampDC
ctrl_IS_inhibit
ctrl_IC_mode
ctrl_RBREAK_Tran2DC
biasPointCalculated

ctrl_DC

Figure 6. Static model ramping algorithm.

ctrl_log_DC

GMIN stepping (SOLVE_STATIC:=2)

ctrl_CBREAK_resetTran

GMIN stepping attempts to find a solution for the
static model (with power supplies at 100%) by
starting with a large value of GMIN, initially 1.0e10
times the nominal value. If a solution is found at this
setting, PSpice reduces GMIN by a factor of 10 and
tries again. This continues until either GMIN is back
to the nominal value, or a repeating cycle fails to
converge. This algorithm makes heavy use of
equation continuity with respect to GMIN model
parameters. The Modelica implementation of this
algorithm is shown in Fig. 7.

ctrl_IC_clampTran
ctrl_IC_mode
ctrl_IC_clampDC
biasPointCalculated

Figure 8. Dynamic model ramping algorithm.

5.2. Bias point analysis (OP)

CLOCK

The OP analysis (see Fig. 9):
• forces the biasPoint signal to become true,
• sets ctrl_OP_value signal to zero, and
• finish the simulation one clock cycle after the
biasPointCalculated signal becomes true.

biasPoint
ctrl_DC
1010

109

108

107
101

scaleGMIN 1

CLOCK

100

11 CLOCK

biasPoint

ctrl_log_DC

biasPointCalculated
ctrl_IC_clampDC
terminate
biasPointCalculated

Figure 9. OP analysis signals.

Figure 7. GMIN stepping algorithm.

Modelica 2002, March 18−19, 2002

106

The Modelica Association

Urquía A., Dormido S.

DC, AC Small−Signal and Transient Analysis of Level 1 N−Channel MOSFET ...

Example

1.2

Consider the application of the OP analysis
algorithms to the trivial circuit shown in Fig 10.
Dymola’s experiment StopTime variable is set to an
arbitrary large value: 100. The TIME_SLOT,
TIME_SCALE and LOG_RESULTS parameters are left to
their by-default values: 10%, 1s and 0 respectively.

+

R=1

0.4
0

-

0

+

+

C=3

C1

R=0.5

R2

-

-

-

DC=3
ACM=1
ACP=90

+
V1

The TYPE_AC_SWEEP parameter defines the frequency
sweep type (LIN and DEC PSpice arguments):
• TYPE_AC_SWEEP==0: frequency linear sweep.
• TYPE_AC_SWEEP==1: the frequency is swept
logarithmically by decades.

0
SOLVE_STATIC:=0. Once finished the simulation
(at T=0.1), dslog.txt file contains the results:

AC small-signal analysis (see Fig. 14):
• forces the biasPoint signal to become true, and
• sets ctrl_OP_value signal to zero.
When biasPointCalculated becomes true, the AC
analysis:
• forces ctrl_AC to become true, enabling the AC
model.
• Starts the frequency sweep. The frequency
variation in time depends on the sweep type. In
both cases, the required log frequencies are
spaced at regular time-intervals of length
2*CLOCK. Therefore, the ctrl_log_AC signal is a
pulse train of period 2*CLOCK.
The simulation is finished one clock cycle after the
frequency reaches END_FREQUENCY. An AC analysis
of the Fig 10 circuit is shown in Fig 15.

V1_iDC(1e-010) = -2
V1_vDC(1e-010) = 3
R1_n_vDC(1e-010) = 1
ctrlx_0logx_0DC(1e-010) = 1
V1_powerDisipation_disipatedPower(1e-010)=6

SOLVE_STATIC:=1. The dslog.txt file contains the
results, logged at T=1. The simulation terminates
at T=1.1 (see Fig 11).

•

SOLVE_STATIC:=2.

•

SOLVE_STATIC:=3.

The circuit does not contain
any device with the GMIN parameter, so this
algorithm is equivalent to SOLVE_STATIC:=0.
Results are logged at T=1.1 and the simulation
finishes at T=1.2 (see Fig. 12).

Results are logged at T=2.2
and the simulation finishes at T=2.3. Largesignal and static voltages at R1.n node are shown
in Fig. 13. At T=2.0: large-signal to static info.
transfer. At T=2.1: Static model solution.

4

R1.n.vDC

1
2
Figure 13. Static and large-signal voltages.

5.3. AC sweep analysis (AC)

Figure 10. Simple example of a RC circuit.

•

R1.n.vTran

0.8

R1

•

R1.n.vDC

CLOCK

biasPoint
biasPointCalculated

V1.vDC

ctrl_AC
END

2
freq

START

ctrl_log_AC

0

terminate

0

0.4

0.8

1.2

Figure 11. Voltage at circuit nodes.
150

Figure 14. AC analysis implementation.

scaleGMIN
20

R2.vAC_phase(freq)

R2.vAC_mag_dB(freq)

0

100
-20

50

-40
-60

0

5

The Modelica Association

10

Figure 15. Example of AC small-signal analysis.

0.8
1
1.2
Figure 12. GMIN scale factor

107

Modelica 2002, March 18−19, 2002

DC, AC Small−Signal and Transient Analysis of Level 1 N−Channel MOSFET ...

Urquía A., Dormido S.

VGS and VBS . The gate capacitance is modelled
using three voltage-controlled capacitors: CGB , CGS
and CGD .

5.4. Transient analysis (TRAN)
When the transient simulation is started, the value of
the time variable is different of zero. For this reason,
a variable is defined to measure the transient
simulation time: timeTran. The length of the
transient simulation is set by the TRAN_STOP_TIME
parameter. The transient analysis depends on the
SKIP_INITIAL_TRAN_SOLUTION parameter.

Voltage-controlled capacitors have been modelled
extending the Capacitor model. Expressions for the
large signal capacitance are provided and the smallsignal capacitance is evaluated at the bias point (i.e.,
when ctrl_AC signal becomes true). Large-signal
and static formulations of controlled current sources
are equal (of course, each one is described by its own
set of variables). Their small-signal models
(conductance) are evaluated at bias point.

SKIP_INITIAL_TRAN_SOLUTION:=false

When biasPointCalculated becomes true, the
circuit static model contains the transient initial
solution. Then (see Fig. 16):
• ctrl_CBREAK_Tran2DC becomes true. The largesignal circuit state is initialised to the staticcircuit voltage values.
• ctrl_Tran becomes true. The large-signal device
models are enabled.
The simulation terminates when timeTran reaches
the value TRAN_STOP_TIME.

D
+
Rd

R=
10

-

Cbd

+

-

Cgd

CLOCK

CLOCK

+
Dbd

+

+
Ids

G

biasPoint
TRAN_STOP_TIME

B

+

Dbs

-

Cgs

biasPointCalculated

+
Cbs

-

ctrl_OP_value

+

+

Cgb

+
Rs

ctrl_Tran

R=
10

-

ctrl_CBREAK_Tran2DC

S

terminate

Figure 18. SPICE2 level1 NMOS
Figure 16. Transient analysis with initial calculation.

Conclusions

SKIP_INITIAL_TRAN_SOLUTION:=true

A reduced set of SPICE device models has been
successfully translated into Modelica language for
OP, AC and transient analyses.

At initial time (see Fig. 17):
• ctrl_CBREAK_Tran2IC becomes true. The largesignal circuit state is initialised to the ICproperty correspondent values.
• ctrl_Tran becomes true. The large-signal device
models are enabled.
CLOCK

References
Aström, K. J., H. Elmqvist and S. E. Mattsson
(1998). Evolution of Continuous-Time Modeling
and Simulation. 12th ESM, Manchester, UK.
Cellier, F. E. (1991). Continuous System Modeling.
Springer-Verlag.
Clauss, C., et al. (2000). Modelling of Electrical
Circuits with Modelica. Modelica Workshop
2000, Lund, Sweden.
Elmqvist, H., F. E. Cellier and M. Otter (1993).
Object-Oriented Modelling of Hybrid Systems.
ESS’93, Delft, The Netherlands.
Elmqvist, H., et al. (2001). Dymola. Dynamic
Modeling Laboratory. User Manual. Dynasim.
Kielkowski, R.M. (1998). Inside SPICE. McGrawHill, Inc. Second Edition.
Massobrio, G and P. Antognetti (1993).
Semiconductor Device Modeling With SPICE.
McGraw-Hill, Inc.
Modelica (2000). Modelica, Language Specification
& Tutorial. Modelica Association.
OrCAD. (1999). OrCAD PSpice A/D. Reference
Guide & User’s Guide. OrCAD, Inc.

CLOCK

initial

ctrl_Tran
TRAN_STOP_TIME

ctrl_CBREAK_Tran2IC
terminate

Figure 17. Transient analysis w/o initial calculation.

6. SPICE2 LEVEL 1 NMOS
The SPICE2 level1 MOS model is basically the
model proposed by Shichman and Hodges
(Massobrio and Antognetti, 1993). The Dymodraw
diagram of the model is shown in Fig 18. Each
substrate junction is modelled as a voltage-controlled
current source (diode-like icon in Fig. 18) in parallel
with a voltage-controlled capacitor. I DS is a nonlinear current source controlled by the voltages VDS ,
Modelica 2002, March 18−19, 2002

108

The Modelica Association

Ferretti G., Magnani G., Rocco P., Bonometti L., Maraglino M.

Simulating permanent magnet brushless ...

Simulating permanent magnet brushless motors in DYMOLA
G. Ferretti, G. Magnani, P. Rocco
Politecnico di Milano, Dipartimento di Elettronica e Informazione,
Piazza L. da Vinci 32, 20133 Milano, Italy
L. Bonometti, M. Maraglino
C.M.S. S.p.A., Via A.Locatelli 49, 24019 Zogno (BG), Italy

Abstract
Multi-domain dynamic simulation is becoming an issue in the design of high performance mechatronic
systems, where advances are foreseen only if the mutual interaction of different parts of the system is well
understood. The modelling environment provided by
DYMOLA with Modelica language proved to be ideal
for studying the mutual effects of mechanics, electronics and control in a brushless motor, whose model
has been conceived as one of the building blocks of a
wider project, aimed at simulating a complete machining centre. Details on the model of the brushless motor
as well as on its simulation are given in the present paper.

1

Introduction

Dynamic simulation [2], or virtual prototyping in a
more recent jargon, is a valuable tool to study these
phenomena, and in particular to separate the effects of
the single sources of disturbances on the performance
of the system. Mechanics, electronics and control are
different domains involved in this truly mechatronic
problem. Multi-domain simulation environments are
required to simulate with a reasonable effort the system, while the particular electrical configuration of the
stator windings (Y connected) calls for the adoption of
modelling languages where algebraic constraints on
state variables can be easily specified.
DYMOLA (with Modelica language [7, 5]) has been
found to fit easily both the above requirements. Mechanical, electrical and control systems can be combined in a natural and physics-driven way, while the
acausal modelling based on DAE equations, proper of
this environment, allows to specify the constraint on
the phase currents as it is, avoiding reformulation of
the system’s equations in terms of two out of three currents, typical of procedural modelling languages.
In the present work DYMOLA has been used to simulate a brushless motor controlled with an analogue
driver and with a full digital driver. The simplified
model ([3]) of torque ripple has been validated through
these simulations. The model of the brushless motor
with its analogue or digital drivers has been actually
used as one of the building blocks of a wider project,
where the simulation of a complete machining center
(detailed simulation of the mechanical parts of the system and of various features of the CN) has been implemented.

The most common actuation systems adopted in
robotics, machine tools industry and machining centers are by far servomechanisms with permanent magnet brushless motors, connected to the loads by transmission chains (or gearboxes).
In a brushless motor the electromechanical commutation typical of brushed DC motors is replaced by
an electronic commutation of the currents in the three
phases of the stator windings. This should in principle
guarantee that the electromagnetical torque delivered
on the motor shaft is independent of the rotor position. However some constructive imperfections in the
motor or in the drive, where electronic commutation
is implemented, produce an undulation (ripple) [4] on
the actual torque. While this problem could be considered minor in the static dimensioning of the actuation 2 Torque ripple modelling
system, it is of utmost importance for its dynamic performance. Torque ripple might in fact excite the res- The functional scheme of a sinusoidal PMAC maonances of the mechanical system, usually associated chine is represented in Fig. 1. If a reference torque
to the elastic couplings between motors and loads.
τ̄ should be delivered by the motor, typically as re-

The Modelica Association

109

Modelica 2002, March 18−19, 2002

Simulating permanent magnet brushless ...

C u rre n t
re g u la te d in v e rte r

C u rre n t re fe re n c e
w a v e fo rm g e n e ra to r

P o s itio n
c o n tro lle r

I

C u rre n t
re fe re n c e
I

Ferretti G., Magnani G., Rocco P., Bonometti L., Maraglino M.

I
I

K

1

t

I

P M A C
M a c h in e
2

3

I

1 ,2 ,3

P o s itio n
se n so r

Figure 1: Functional scheme of a brushless motor
Figure 2: Complete model of the system
quired by a position controller, the current reference
I¯ has to be given the value I¯ = τ̄/Kt , where Kt is the
torque constant. This scalar setpoint is then modulated
through three sinusoidal functions of the electrical angle α = pqm , p being the number of pole pairs and qm
being the motor angle, that are offset by an angle 2π/3
one from each other. The three resulting signals become the current references for the three phases. High
bandwidth current controllers make the currents track
their setpoints in each phase (actually two out of the
three Y connected phases are closed loop controlled).
If the current reference in each phase is given the same
dependence on the electrical angle characterizing the
back EMF (ideally sinusoidal or trapezoidal), a torque
τ is produced, approximately equal (in a band of frequencies limited by the current loops) to the desired
torque τ̄, and thus proportional to the scalar current
¯
reference I.
Brushless motors, however, introduce a disturbance in
the system in the form of a ripple on the torque. Several constructive imperfections of the motor and the
servodrive sum up to form this pulsating disturbance.
Examples are cogging torque, offsets in the current
sensors, imperfections in the construction of the motor and the drive, implying that both the back EMF
profiles and the phase currents may be affected by undesired higher order harmonics.
As it is shown in [3], the following relation can be used
to represent in a compact form the effects of the disturbances on the torque production:
¯ = γ(α) + Kt I(1
¯ + δ(α))
τ = τ(α, I)

(1)

The term γ(α) accounts for the disturbances due to the
cogging torque and to the current offset in the drives,
while the second term is responsible for the nominal
torque (with δ(α) = 0) and for the disturbances related
to the harmonic content. It is also possible to include
in δ(α) the effects of the amplitude imbalances and
the phase misalignments of the current and back EMF
shapes profiles [3].

Modelica 2002, March 18−19, 2002

110

3

Modelling the system in DYMOLA

The model of the system is obtained by the feedback connection of two sub-models, one representing
the brushless motor, the other one the driver (Fig. 2).
The two models are connected through three electrical
connectors (the three phases of the motor) as well as
through a control connector (the measure of the rotor
position).
The brushless model is shown in Fig. 3. The
three phases are Y connected in the block emf3,
that generalizes the EMF model in the Modelica.Electrical.Analog.Basic library. In the emf3 model
the back-emf profiles on the single phases are assigned. The nominal sinusoidal profiles can then be
modified to study ripple due to higher order harmonics. The torque at the flange of the emf3 model derives from the equilibrium with the sum of the products of currents and back emf profiles on the single
phases. Remarkably, the acausal modelling environment provided by DYMOLA allows to specify in the
most natural way the algebraic constraint on the currents (the sum of the currents must be zero). This constraint would obviously generate troubles in other simulation environments based on causal specifications of
the models, expressed with ODE systems. Just for
comparison, Fig. 4 shows the SIMULINK model of
the electrical part of a brushless motor, obtained by
resolving the algebraic constraint and expressing the
whole model in terms of two out of three currents. The
derivation of the model is time consuming and error
prone and the result lacks readability.
Modelling of the mechanical part of the motor is on
the other hand standard.
The analogue version of the current controller is
shown in Fig. 5. The current reference (usually the
output of a position/velocity controller) is modulated
through sinusoidal functions of the electrical angle, to
form the references for two of the three Y connected
currents. Current sensors are included in the drive and

The Modelica Association

Ferretti G., Magnani G., Rocco P., Bonometti L., Maraglino M.

Simulating permanent magnet brushless ...

possible offsets can be added to the measures, in order
to simulate their effects on the generation of torque ripple. Two anti-windup PI controllers close the current
loops. Their outputs are then linearly amplified and
form the voltages to be applied to the single phases of
the motor.
A full digital version of the current controller has been
implemented as well (Fig. 6). A vector control scheme
[6] has been adopted, where the phase currents are
first transformed into direct and quadrature currents
through Park’s transformation. Two digital loops are
closed on these currents, the quadrature reference being the output of the outer position/velocity controller,
the direct reference being zero as usual. The voltage commands output of the two antiwindup PI controllers are then back transformed to voltages on the
three phases through inverse Park’s transformation.
The PWM amplifier has not been simulated since, operating with a frequency 10 or 20kHz and with a modulation of the pulse width of 1µs, it requires an integration step size less than 1µs, which might be acceptable
for the simulation of the electronics of a motor drive
but is far too small in the combined simulation of the
mechanics and the electronics. This is particularly true
if the model of the motor is instantiated several times,
for the simulation of a complete machine.

Figure 3: Model of the brushless motor

4

Simulating the motor without load

Simulations obtained with the analogue version of the
driver will be presented here, in order to show the utility of the model. The input of the system is a step
on the current reference: the signal is expressed in
Volt and has been given the value 1V (corresponding to 10% of the entire scale and to a current of
1.9A). The current-to-torque gain of the motor (Kt )
is equal to 1.1Nm/A, while the number of pole pairs is
equal to 3. Both the current loops have been tuned
for a bandwidth of 1kHz. The inertia of the motor
is equal to 0.012Kgm2 while the damping factor is
0.371Nms/rad.
Fig. 7 and Fig. 8 show, on different time scales, the responses of the electromagnetic torque and of the motor
velocity in nominal conditions. The responses match
1
Figure 4: Model of the brushless motor in SIMULINK the expectations both from the transient point of view
and from the steady state one (no oscillations is produced).
1

2

v A

2

V B

4

p o s

p

g a in 1

f(u )

2

K E _ A

3

1 /(3 * R )

V C

L /R .s + 1

2

iA

m u l1

2

m u l4

s u m 7

2 /3 * p i
2 /3 p i

1 /(3 * R )

s u m 4

IB

2

K E _ B

m u l2

m u l5

2 /3 * p i

2 /3 p i1

3

L /R .s + 1

f(u )

5

s u m 5

v e l

1

f(u )

K E _ C

m u l7

s u m 6

ta u m

m u l6

1 The

negative sign of the torque is of no particular meaning,
being associated just to the way the balance of torques is written
in the block emf3.

The Modelica Association

111

Modelica 2002, March 18−19, 2002

Simulating permanent magnet brushless ...

Ferretti G., Magnani G., Rocco P., Bonometti L., Maraglino M.

Figure 5: Model of the analogue driver

Figure 6: Model of the digital driver

Modelica 2002, March 18−19, 2002

112

The Modelica Association

Ferretti G., Magnani G., Rocco P., Bonometti L., Maraglino M.

Simulating permanent magnet brushless ...

Figure 7: Electromagnetic torque in nominal condi- Figure 10: Electromagnetic torque with a high order
tions
back emf harmonic

Figure 11: Electromagnetic torque with both disturbances

Figure 8: Motor velocity in nominal conditions
In a second simulation, an offset of 1% of the rated
current has been introduced on both the current sensors. The resulting electromagnetic torque is shown in
Fig. 9. As the average velocity is equal to the value
obtained in nominal conditions Ω ≈ 5.6rad/s, the periodicity of the disturbance is consistent with theory
[3] (T = 2π/(3Ω) = 0.37rad/s).
The effect of higher order harmonics in the back e.m.f.
profiles has been simulated introducing the fifth harmonic on all the three profiles, with amplitude 5% of
the main harmonic and no misalignments or unbalances. The result in terms of electromagnetic torque is
reported in Fig. 10. Again the periodicity of the disturbance is consistent with theory [3] (T = 2π/(18Ω) =
0.062rad/s).

The superimposition of the two disturbances (the offset on the current sensor and the high order back emf
harmonic) yields the electromagnetic torque reported
in Fig. 11.
It is not difficult to verify (for example exporting the
results of the simulation in Matlab) that the above
torque profile corresponds, apart from the sign inversion, to (1), where:
2
γ(α) = 3KIo f f sin(α + π)
3

(2)

K5
cos(6α)
(3)
K
where Io f f is the current offset, K5 is the amplitude
of the fifth harmonic of the back emf profile, K is the
amplitude of the main harmonic (K = 2/3Kt ).
δ(α) = −

5

Simulating the motor with a load

As already mentioned in the Introduction, one of the
reasons why torque ripple deserves accurate modelling
and possibly compensation is that it may act as an excitation signal for the usually lightly damped dynamics
of the two-mass system made up by the motor coupled
with a load through an elastic transmission. As the
Figure 9: Electromagnetic torque with a current offset torque ripple frequency is proportional to the motor

The Modelica Association

113

Modelica 2002, March 18−19, 2002

Simulating permanent magnet brushless ...

Ferretti G., Magnani G., Rocco P., Bonometti L., Maraglino M.

Figure 12: Model of the system including a load
Figure 14: Motor velocity with a load, with ripple

Figure 13: Motor velocity with a load, without ripple

velocity, this problem is particularly critical at those
operating velocities when the multiple of the motor
velocity is comparable to the natural frequency of the
system. In order to confirm this analysis with simulation results, the model of the motor has been coupled
to the models of an elastic transmission and a load, Figure 15: Top view of the simulator of a machining
both taken from the Modelica.Mechanics.Rotational center
library (see Fig. 12).
The load has been given the same value as the inertia of the motor while the elastic parameter has been
selected so as to have a resonance frequency approximately equal to 70rad/s. In a first simulation, four
consecutive steps on the current command have been
given, corresponding to 20%, 30%, 40% and 50% of
the entire scale, in nominal conditions (i.e. with all
the sources of ripple disabled). The result, in terms
of the velocity of the motor is shown in Fig. 13, where
the natural oscillations due to elasticity are evident, but
also damped out by the natural damping on the system.
Then a ripple induced by the same offset on the current
sensor as in the previous Section has been introduced.
Notice that, as the natural frequency of the system is
about 70rad/s, major problems to the system are expected when the average velocity of the motor is about
one third (23rad/s) of this value, namely in the third
interval of the simulation. The result is confirmed in
the plot of Fig. 14, where the effect of the matching between ripple frequency and natural frequency is most
evident (once triggered in the third interval, the oscillations remains also in the fourth one).

Modelica 2002, March 18−19, 2002

114

6

Use of the brushless motor in the
simulation of a machining center

As already mentioned in the Introduction, the model of
the brushless motor has been included in a library of
elements used to simulate a complete machining center. Fig. 15 shows the top level of the simulator for a
three axes machine. The model is composed of three
parts: the simulation of the CN and the servodrive, entirely realized with the DYMOLA blocks, the simulation of the transmission chain for each axis, where
the brushless motor has been used, and the simulation
of the kinematic chain, realized with the blocks of the
ModelicaAdditions.MultiBody library.
Again the multi-domain nature of DYMOLA and the
physics driven assembly of the model turned out to be
essential elements to fulfill the task, namely to realize
a reliable simulation environment, easy to use for a
non specialist of dynamic modelling.

The Modelica Association

Ferretti G., Magnani G., Rocco P., Bonometti L., Maraglino M.

7

Simulating permanent magnet brushless ...

Conclusions

DYMOLA proved to be a valuable tool to specify in
the most natural way the model of the three phase
brushless motor, in terms of a high index DAE system [1]. Simulations have been run to test various non
nominal situations in brushless motors, where torque
ripple can occur.

8

Acknowledgements

The support of student A. Samarani in building the
model and performing simulations is acknowledged.

References
[1] Brenan, K.E., S.L. Campbell and L.R. Petzold:
Numerical solution of initial-value problems in
differential algebraic equations, North-Holland
(1989).
[2] Cellier, F.: Continuous system modelling,
Springer Verlag (1991).
[3] Ferretti, G., G. Magnani and P. Rocco: Modelling, identification and compensation of pulsating torque in permanent magnet ac motors.
IEEE Transactions on Industrial Electronics, 46,
(1998), pp. 912–920.
[4] Jahns, T. M. and W. L. Soong: Pulsating torque
minimization techniques for permanent magnet
ac motor drives - a review. IEEE Transactions on
Industrial Electronics, 43 (1996),pp. 321–330.
[5] Mattsson, S.E., H. Elmqvist and M. Otter: Physical system modeling with Modelica. Control Engineering Practice, 6, (1998), pp. 501–510.
[6] Texas Instruments: Digital signal processing solution for permanent magnet synchronous motor.
Application Note. Literature Number: BPRA044,
(1997).
[7] Tiller, M.: Introduction to physical modeling
with Modelica, Kluwer (2001).

The Modelica Association

115

Modelica 2002, March 18−19, 2002

Modelica 2002, March 18−19, 2002

116

The Modelica Association

Kalaschnikow S.N.

A Modelica Library for Power Quality analysis in Networks

PQLib- A Modelica Library for
Power Quality analysis in Networks
Sergej N. Kalaschnikow
VA TECH ELIN EBG Elektronik GmbH
Ruthnergasse 1, A-1210 Vienna Austria
e-mail: s.kalaschnikow@eel.elinebg.at
•

Abstract

•

In power supply networks, the quality of the
voltage is becoming more and more of a
determining factor.
Non-linear loads such as diode or thyristor
converters contribute to the degradation of the
supply voltage quality. Non-sinusoidal currents of
the non-linear loads result in the distortion of the
supply voltage wave form at the point of common
coupling due to the finite supply impedance.

•
•

power factor correction devices (passive
filters)
mains active restoring devices using
semiconductors (active filters)
measuring instruments: true rms voltmeter and
amperemeter, digital frequency analyser
Examples

1. Building of the PQLib
The PQLib is based on the package concept. The
package concept was introduced into Modelica to
help organize definitions of models, connectors,
etc. [1, 2]. Fig.1 shows the components of the
package PQLib.

To improve the power quality of the supply voltage
active filters and reactive current compensators are
used. The optimal power rating and topology of
these units are very important, but also the
determination of the best compensation strategy for
a specific application is very important as well.
Different topologies and strategies can often
perform related compensation functions, resulting
in a situation where financial implications
determine the best solution. In this situation the
power quality analysis in network using simulation
tools is very useful.

1.1. Types
In the PQLib for currents, voltages and impedances
the per unit (p.u.) quantities with the definitions
according to [3] are used. Currents and voltages
are related to their rated peak- values:

This paper describes a Modelica library called
PQLib (Power Quality Library) designed for
power quality analysis in networks using
simulation tools written in Modelica.
The PQLib contains the following components:
• Definition of connectors for three phase
networks
• Models for:
• three phase passive electrical elements like
resistor, capacitor and so on.
• three phase electrical machines and
transformers
• three phase transmission lines
• semiconductor controlled dc and ac electrical
drives

The Modelica Association

Fig. 1. Components of the package PQLib

117

Modelica 2002, March 18−19, 2002

A Modelica Library for Power Quality analysis in Networks

u (t ) =

U (t )
I (t ) .
, i (t ) =
2 ⋅ IN
2 ⋅U N

The negative pin
representation only.

(1)

in

its

graphical

partial model TwoPin3Ph
PQLib.Interfaces.Voltage1stPhase Vr;
PQLib.Interfaces.Voltage2ndPhase Vs;
PQLib.Interfaces.Voltage3rdPhase Vt;

(2)

with: U N and I N are nominal values of the
voltage and the current accordingly.

PQLib.Interfaces.Current1stPhase Ir;
PQLib.Interfaces.Current2ndPhase Is;
PQLib.Interfaces.Current3rdPhase It;

Consequently, the types in the PQLib are defined
as (for example for the first phase):

PQLib.Interfaces.Pin3Ph P;
PQLib.Interfaces.NegPin3Ph N;
equation
Vr = P.va - N.va;
Vs = P.vb - N.vb;
Vt = P.vc - N.vc;
P.ia + N.ia = 0;
P.ib + N.ib = 0;
P.ic + N.ic = 0;
Ir = P.ia;
Is = P.ib;
It = P.ic;
end TwoPin3Ph

type Voltage1stPhase = Real (
final quantity="Voltage",
final unit="p.u.",
displayUnit="p.u.");
type Current1stPhase = Real (
final quantity="Current",
final unit="p.u.",
displayUnit="p.u.");
type Resistance = Real (
final quantity="Resistance",
final unit="p.u.",
min=0,
displayUnit="p.u.");
type Conductance = Real (
final quantity="Conductance",
final unit="p.u.",
min=0,
displayUnit="p.u.");
type Reactance = Real (
final quantity="Reactance ",
final unit="p.u.",
min=0,
displayUnit="p.u.");
type SignalAnalog = Real;
type SignalBoolean = Boolean;
type SignalDiscrete = Real;

For the control package of the PQLib the analog
and digital as well as logical interfaces are defined
in the classical way of the Modelica interface
definition with the exception of the definition for
three phase vectors [3]. For example, the vector of
voltages u is derived from the instantaneous values
of the three phase voltages u a , ub and u c as
follows:
2π
2π
j
−j
2æ
u = çç u a + ub ⋅ e 3 + u c ⋅ e 3
3è

1.2. Interfaces

ö
÷ = uα + ju β (3)
÷
ø

Thus, the connectors for three phase vectors can be
described in the following way:

Usually every package includes some interface
definitions which are used throughout the package.
In the PQLib package the basic interface definition
is the three phase pin, which is a connector. At the
pin the pin three phase voltages va, vb and vc and
the pin three phase currents ia, ib and ic are
defined. The positive pin is described in the
following way:

connector InAB
input SignalAnalog alfa;
input SignalAnalog beta;
end InAB
connector OutAB
output SignalAnalog alfa;
output SignalAnalog beta;
end OutAB

connector Pin3Ph
Voltage1stPhase va;
Voltage2ndPhase vb;
Voltage3rdPhase vc;
flow Current1stPhase ia;
flow Current2ndPhase ib;
flow Current3rdPhase ic;
end Pin3Ph

Modelica 2002, March 18−19, 2002

differs

The TwoPin interface is defined as a partial model:

Impedances are referred in the same way as (1) to
Z (ω ) ⋅ I N ,
z (ω ) =
UN

Kalaschnikow S.N.

2. Main Components of the PQLib
Any network consists of passive electrical
elements like resistors, capacitors and so on. The
three phase transmission line itself can be

118

The Modelica Association

Kalaschnikow S.N.

A Modelica Library for Power Quality analysis in Networks

represented as a circuit of passive electrical
elements. The passive shunt harmonic filter, which
is the traditional method of controlling harmonic
distortion levels, consists of a tuning reactor in
series with a capacitor bank.

In the same way the three phase switch can be
defined:
class SW
extends PQLib.Interfaces.TwoPin3Ph;
parameter Real OnTime(unit="[s]") = 0 "switch ON Time";
parameter Real Ron(final min=0) = 1.E-5 "Closed switch
resistance";
parameter Real Goff=1.E-5 "Opened switch conductance";
protected
Real s1;
Real s2;
Real s3;
equation
Vr = s1*(if time >= OnTime then Ron else 1);
Ir = s1*(if time >= OnTime then 1 else Goff);
Vs = s2*(if time >= OnTime then Ron else 1);
Is = s2*(if time >= OnTime then 1 else Goff);
Vt = s3*(if time >= OnTime then Ron else 1);
It = s3*(if time >= OnTime then 1 else Goff);
end SW

At the same time, each network consists of active
electrical elements as well. These elements are:
generators, electrical motors, four quadrant
electrical drives, active harmonic filters and so on.
The PQLib packages imply both passive and active
electrical elements. Fig. 2 shows, for example, the
package of electrical elements which are based on
the TwoPin interface.

2.1 Passive electrical elements
The three-phase elements like resistors, capacitors
and inductors are equally defined. The three phase
capacitor, for example, is defined as:

To get the star connection of the three phase
elements the class Y can be used:

class C
extends PQLib.Interfaces.TwoPin3Ph;
parameter PQLib.Interfaces.Reactance xc[3]={1,1,1};
equation
1/w/xc[1]*der(Vr) = Ir;
1/w/xc[2]*der(Vs) = Is;
1/w/xc[3]*der(Vt) = It;
end C

class Y
PQLib.Interfaces.Pin3Ph v0;
equation
v0.ia + v0.ib + v0.ic = 0;
v0.va = v0.vb;
v0.vb = v0.vc;
end Y

To use one-phase electrical elements of the
Modelica standard library the class Connector3Ph
(see Fig. 2 and Fig.3) is used. The class
Connector3Ph is described in the following way:
class Connector3Ph
PQLib.Interfaces.Pin3Ph InOut3Ph;
Modelica.Electrical.Analog.Interfaces.Pin Ph1;
Modelica.Electrical.Analog.Interfaces.Pin Ph2;
Modelica.Electrical.Analog.Interfaces.Pin Ph3;
equation
InOut3Ph.va = Ph1.v;
InOut3Ph.vb = Ph2.v;
InOut3Ph.vc = Ph3.v;
InOut3Ph.ia = -Ph1.i;
InOut3Ph.ib = -Ph2.i;
InOut3Ph.ic = -Ph3.i;
end Connector3Ph

The other passive elements like the three-phase full
wave converter, the three-phase transformers, the
passive harmonic filters and so on are created by
using graphical model editing tools. Fig. 3 shows,
for example, a model of the three-phase full wave
converter.

2.2 Active electrical elements
The voltage source is defined in the following way:

Fig. 2. Components of the package Elements

The Modelica Association

119

Modelica 2002, March 18−19, 2002

A Modelica Library for Power Quality analysis in Networks

Kalaschnikow S.N.

The three-phase current source is defined in the
same way.
The very important part of the PQLib package are
the switch mode power devices such as four
quadrant frequency controlled electrical drives and
active harmonic filters. These devices use the
pulse-width modulation IGBT-inverter technology.
Fig. 4 shows basic configuration of a IGBTinverter .

Fig. 4. Basic configuration of a IGBT-inverter
Owing to the fact that the goal of the power quality
analysis is to study the network itself and in order
to simplify the model of the IGBT-inverter, the
following equivalent circuit for IGBT-inverters can
be used [3]:

Fig.3. Diagram of the three-phase full wave
converter
class VS
extends PQLib.Interfaces.TwoPin3Ph;
parameter Real N_harmonic[:]={0,0} "Array of
numbers of harmonics";
parameter Amplitude
V_harmonic[size(N_harmonic, 1)]={0,0};
parameter Phase Ph_harmonic[size(N_harmonic,
1)]={0,0};
parameter Amplitude V1=1.0;
parameter Phase Ph1=0;
parameter Amplitude V1_opposite=0.0;
parameter Phase Ph1_opposite=0;
equation
Vr = V1*cos(w*time + Ph1*pi/180) +
V1_opposite*cos(w*time + Ph1_opposite*pi/
180) + V_harmonic*cos(N_harmonic*w*time +
Ph_harmonic*pi/180);
Vs = V1*cos(w*time - 2*pi/3 + Ph1*pi/180) +
V1_opposite*cos(w*time + 2*pi/3
+ Ph1_opposite*pi/180) +
V_harmonic*cos(N_harmonic*(w*time - 2*pi/3) +
Ph_harmonic*pi/180);
Vt = V1*cos(w*time + 2*pi/3 + Ph1*pi/180) +
V1_opposite*cos(w*time - 2*pi/3
+ Ph1_opposite*pi/180) +
V_harmonic*cos(N_harmonic*(w*time + 2*pi/3) +
Ph_harmonic*pi/180);

Fig. 5. Equivalent circuit for IGBT-inverters

end VS

Assuming a balanced three-phase system without
the neutral connection and neglecting the
resistance of the power switches, the circuit in

This voltage course definition makes it possible to
simulate all possible kinds of the voltage distortion
in industrial supply systems.

Modelica 2002, March 18−19, 2002

120

The Modelica Association

Kalaschnikow S.N.

A Modelica Library for Power Quality analysis in Networks

Fig.5 with a voltage-source inverter can be
described as [3]:
L
C

dud
dt

ü
di F
= u S − u W − Ri F
ïï
dt
ý n = 0,1,2,...6
π
− j ( n −1)
3
3
) − iL ï
= σ ( n) Re( i F e
ïþ
2
(1)

with
uW =

π

j (n−1)
2
σ( n)ud e 3 ,
3

where the used symbols denote:

n

complex vector of the line currents;
complex vector of the mains voltage;
complex vector of the inverter voltage;
dc-link voltage;
dc-link current;
dc-link load current;
inductance of the line choke;
resistance of the line choke;
capacitance of the dc-link capacitor;
switching- state of the converter (Fig.5)

σ

switching function: σ ( n ) = ìí1, if n > 0 .

iF
uS
uW
ud
id
iL
L
R
C

Fig.6. Components of the package Instruments
well. To get the spectra for voltages and currents
the class DFT can be used. The class DFTG is very
useful for the measuring of single reference
number harmonics. The classes DFT and DFTG
are based on DFT-technique .

î0, if n = 0

For more information about the control unit of
IGBT- inverters see [4]. The description of the
control system for the active filter for industrial
mains can be found, for example, in [5]. The
control system of the four quadrant adjustable
speed drives is described in [6].

Several aspects of the PQLib-package usage are
demonstrated in the following example.

3. Examples
Non-linear loads such as diode or thyristor
converters contribute to the degradation of the
supply quality. Non-sinusoidal currents of the nonlinear loads result in the distortion of the supply
voltage wave form at the point of common
coupling due to the finite supply impedance.

2.3 Measuring instruments
Often the goal of the power quality analysis in
networks is to get a value of the total harmonic
distortion factor (THD) or values of harmonic
amplitudes at the point of common coupling
(PCC). In this case, it is very useful to use the
built-in measuring instruments.

In industrial mains, the passive filters have
traditionally been used to absorb harmonics
generated by the load, primarily due to their low
cost and high efficiency. This is a good approach
when power factor correction is needed too.
However, they have the following drawbacks:

Fig. 6 shows the components of the package
Instruments. There are instruments for voltages
and currents. Together with model RMS it is
possible to measure the rms-values of the threephase voltages and currents and the THD-factor as

The Modelica Association

- the mains impedance strongly influences the
compensation characteristics of the filter;

121

Modelica 2002, March 18−19, 2002

A Modelica Library for Power Quality analysis in Networks

Kalaschnikow S.N.

- they result in new resonances and therefore
magnify the levels of the other harmonics;
Compared with the passive filter, the active
filters can be used to reduce harmonics in the
industrial mains without worrying about all the
problems associated with applying passive filters
Additionally they can not be overloaded by
harmonics from the power system. Due to the fact
that active filters use the same IGBT-inverter
technology that is used in adjustable speed drives,
their cost is not high.

Fig. 9. Simulation results: one-phase current of the
active filter

The next Modelica model shows the utilization of
the active filter to achieve harmonic cancellation
for an adjustable speed drive (see Fig.7). The
simulation results are shown in Fig. 8-10.

Fig. 10. Simulation results: one-phase current in
the mains
The current in the mains (sum current) is presented
in Fig.10. From Fig.10 it is seen that the sum
current has practically sinusoidal wave form. The
harmonics of the ac drive current are practically
eliminated.

4. Conclusion
The presented Modelica package PQLib is very
useful for power quality analysis in networks.
Using the library, the user can quickly create the
network with different kind of mains loads and
measuring instruments using the graphical editor of
the Dymola. The library has an open structure and
all models can be modified.

Fig. 7. Using active filter connection to achieve
harmonic cancellation for adjustable speed drives

References
[1] Tiller, M.: Introduction to physical modeling with Modelica,
Kluwer Academic Publishers, 2001
[2] Otter, M.; Elmqvist, H.; Mattsson, S.E.: Objektorientierte
Modellierung
physikalischer
Systeme,
Teil
1-8.
at
Automatisierungstechnik, 1999.
[3] Kalachnikov, S.: Regelung des netzseitigen Puls-stromrichters
eines
Vier-Quadranten-Spannungszwischenkreis-Umrichters,
ELIN-Zeitschrift , Heft 3/4 pp. 46-55, 1994 (in German)
[4] Mohan, N., Undeland T.M. und Robbins,W.P. Power Electronics,
John Wiley & Sons, Inc. 1995, pp.805
[5] Kalachnikov S., Berger, H.: AC-Drive with Three-Phase PWMRectifier as a Reactive Power Compen-sator, IEEE Stockholm
Power Tech Conference, Stockholm, Sweden, June 18-22, 1995,
Electrical Machines and Drives, pp 426-431
[6] Kalachnikov, S., Wieser, R.: AC Drives with IGBT Recovery
Inverter System in the Power Range up to 500 kW, PEMC´96,
Budapest, Hungary, September, 1996, pp 3.151-3.155

Fig. 8. Simulation results: one-phase current of the
adjustable speed drive
The current of the adjustable speed drive in one
phase is shown in Fig.8. Fig. 9 shows the current
of the active filter in the same phase.

Modelica 2002, March 18−19, 2002

122

The Modelica Association

Session 6a

Automotive Powertrains

The Modelica Association

123

Modelica 2002, March 18−19, 2002

Modelica 2002, March 18−19, 2002

124

The Modelica Association

Treffinger P., Goedecke M.

Development of Fuel Cell Powered Drive Trains With Modelica

Development of Fuel Cell Powered Drive Trains With
Modelica
Peter Treffinger, Martin Goedecke

DLR Institute of Vehicle Concepts, Pfaffenwaldring 38-40, 70569 Stuttgart
peter.treffinger@dlr.de martin.goedecke@dlr.de , Tel: 0049-711-685-7468/58

Abstract
The DLR Institute of Vehicle Concepts uses
MODELICA in the area of fuel cell powered
vehicles, where multidisciplinary simulation is
required. The paper gives an overview of the
existing libraries of DLR Institute of Vehicle
Concepts and discusses our approach writing models
in MODELICA.
An investigation of hybrid concepts of fuel cell
powered vehicles is presented using the so called
hyzem cycle as reference cycle. The results show
that hybridisation of the energy supply, i.e.
combining fuel cell and battery, yields to lower fuel
consumption compared to vehicles only powered by
fuel cells.

Introduction
The DLR Institute of Vehicle Concepts is
investigating the potential and design of fuel cell
powered vehicles.
One of the main issues is the simulation of the
operational behavior in order to find suitable designs
and operational strategies. Basis of the vehicle
modeling is an appropriate block diagram, where the
vehicle is separated in several sub systems. Figure 1
shows a block diagram representing a fuel cell
hybrid vehicle.
Drive
cycle

Driver

Vehicle
control
Energy
management

Fuel cell
system

energy

Inverter+
Electric
engine

It consists of the following sub systems: drive cycle,
driver, vehicle control, energy management, fuel cell
system, battery, inverter + electric engine, gear box
and driving resistance. The thin lines represent the
flow of data, the thick lines the flow of energy. The
drive cycle gives the requested velocity as function
of time. The driver model compares the actual
velocity of the vehicle with the requested velocity
and determines a request for acceleration or
deceleration, which is given to the vehicle control.
For safety reasons a direct mechanical or hydraulic
connection between brake pedal and mechanical
brake is mandatory. Therefore the vehicle control
gives priority to the mechanical brakes above a
certain level of deceleration. This approach should
be sufficient to evaluate the potential of regenerative
braking. However, our analysis does not cover the
final realization of the braking system.
Finally, the vehicle control determines the signal for
the inverter of the electric engine with respect to the
state of the energy supply system (i.e. battery and
fuel cell system). This state is determined by the
energy management module, which receives the
signals of the sensors installed in the battery and fuel
cell system. The state of the energy supply system is
also transferred to the vehicle control. For example,
regenerative braking is not possible with fully
charged battery. The state of the fuel cell system
depends on the state of the fuel cell itself and also
the state of several supply systems; e.g. air supply,
fuel supply and heat and water management. Details
to the fuel cell system are given below.
The short introduction should make clear that
modeling of fuel cell powered vehicles is a
multidisciplinary
task,
requiring
electric,
mechanical, electrochemical (fuel cell, battery),
control, thermo-hydraulic models.

Gear box

Battery

supply

Figure 1: Block diagram of a fuel cell hybrid
vehicle

The Modelica Association

125

Modelica 2002, March 18−19, 2002

Development of Fuel Cell Powered Drive Trains With Modelica

Treffinger P., Goedecke M.

Libraries

bzvt.property.air01.wet_air

Table 1 gives an overview of the existing libraries.
Library
Content
Property
Thermal and caloric
properties of fluids (air,
water, hydrogen, glycolwater, ..)
Piping
Ducts, fans, compressors,
blowers, valves
Heatex
Heat exchanger
Accu
Battery models
Carmechanic
Mechanical components of
cars
Control
Control units
Power_electronics Inverters, DCDC-converters
Fuel cell
Fuel cells
Tank
Models of fuel tanks
compressed gas, metal
hydride

see bzvt.property.bass_classes.base_prop_01
Modelica definition
model wet_air "siehe bzvt.property.bass_classes.base_prop_01"
extends bzvt.property.bass_classes.base_prop_01(n=3);
equation
//------------------properties------------------------------ps = bzvt.property.h2o.satproperties.ps03(t);
rhom_l_tp*mm_i[1] = bzvt.property.h2o.propfunctions.rho_l_oft(t);
mm_i[1] = bzvt.property.h2o.constants.mm;
mm_i[2] = bzvt.property.n2.constants.mm;
mm_i[3] = bzvt.property.o2.constants.mm;
hm_g_i[1]=xm_g_tp*bzvt.property.h2o.janaf.h_g(t+ 273.15)*mm_i[1];
hm_g_i[2] = xm_i[2]*bzvt.property.n2.janaf.h(t + 273.15)*mm_i[2];
hm_g_i[3] = xm_i[3]*bzvt.property.o2.janaf.h(t + 273.15)*mm_i[3];
hm_l_tp=xm_l_tp*
bzvt.property.h2o.janaf.h_l_ofp(t+273.15,p)*mm_i[1];
sm_g_i[1]=xm_g_tp*
bzvt.property.h2o.janaf.s_g(t+273.15,p)*mm_i[1];
sm_g_i[2] = xm_i[2]*bzvt.property.n2.janaf.s(t + 273.15, p)*mm_i[2];
sm_g_i[3] = xm_i[3]*bzvt.property.o2.janaf.s(t + 273.15, p)*mm_i[3];
sm_l_tp = xm_l_tp*bzvt.property.h2o.janaf.s_l(t + 273.15)*mm_i[1];
//------------------------------------------------------------------end wet_air;

Table 1: Listing of libraries

Additionally, standard MODELICA libraries as
electric library and block library were used. As
simulation results were needed for ongoing
projects, the libraries were designed under a very
limited time scale. We felt that the hierarchical
layout of the libraries should not be too complex.
We therefore decided to limit the usage of base
models creating a usable model to only one base
model. Our general approach is outlined by two
examples of the property and piping library.
The following listing shows a property model for
wet air. Wet air describes a mixture of ideal gases
(O2 and N2) with one condensable component
(H2O). As we are working at moderate pressures
and temperatures, the ideal gas assumption lead to
sufficiently accurate results. General equations for
such a mixture have been put into the base class
base_prop_01 (extend statement) setting the
modifier n to three, which means the mixture is
composed of three components: water[1],
nitrogen[2] and oxygen[3]. The specific properties
of the components are given by functions.

Modelica 2002, March 18−19, 2002

We use the same base model for other mixtures of
gases with one condensable component. The
thermodynamic state of such a mixture is
determined by two state variables and n-1
compositions. After a period of refinement, we
achieved a very good robustness even with several
sets of input variables:
S Composition, p,T
S Composition, p,h.
S Composition, p,s
S Relative humidity, p,T
Key points to get this good performance have been
the appropriate formulation of the general
equations, i.e. structure of the equations. Molar or
mass specific state variable can be used, which
underlines the general formulation of this routine.

126

The Modelica Association

Treffinger P., Goedecke M.

Development of Fuel Cell Powered Drive Trains With Modelica

Figure 2 shows the icon and object diagram of a
compressor. The fluid connectors inlet and outlet
contain the potential variables pressure p, enthalpy
h, composition x_i and the flow variable mass flow
rate mdot. The compressor is described by a
efficiency model with the isentropic efficiency as a
parameter. The calculation scheme is indicated in
the object diagram by means of a enthalpy, entropy
diagram. Three similar property models are
embedded into the model: prop1, prop2, isentrop.
Prop1 and prop2 are used to calculate the inlet and
outlet state. Isentrop calculates the state for a
isentropic compression.

In the beginning we had problems with robustness
of our models, e.g. the convergence of the
simulation run depended on the parameter values
used. Also the appropriate initialisation of the
model was difficult. To overcome the initialisation
problems we have written special initialisation
routines, which allow us to formulate the equations
with numerically appropriate state variables and
use common variables for parameterisation. For
example inside a volume the internal energy u is
used as state variable. However, by means of the
initialisation function temperature t is used to
parameterise the model.
As mentioned above we have restricted ourselves
primarily to alternative drive trains and fuel cell
systems due to time limitations. To simplify the
usage of models for people working in DLR
Stuttgart e.g. on solar thermal engineering our
colleague Wolf-Dieter Steinmann has generalized a
property and a thermohydraulic library [2].
In the following we will give some examples how
we are using the libraries.

Figure 2: Above: icon diagram of compressor;
below: object diagram of compressor.

Formulating our models we have taken special care
to handle cases like mass flow rates getting very
small values down to zero and to get a robust and
stable formulation. Therefore we tried several
formulations of heat exchangers: description by
piecewise discretisation, log mean temperature and
efficiencies.

The Modelica Association

127

Modelica 2002, March 18−19, 2002

Development of Fuel Cell Powered Drive Trains With Modelica

Treffinger P., Goedecke M.

Modeling of Fuel Cell cars
Figure 3 shows the object diagram of a fuel cell
powered car composed from models of the
libraries listed in table 1. The object diagram
represents the layout of the scheme given in
figure 1, whereby the object dcsupply corresponds
to the gray lighted (energy supply) in figure 1.

Figure 4: Object diagram of energy supply

Fuel cell system and battery are combined to a
hybrid energy supply system. A bi-directional
DCDC-converter adjusts the battery voltage to the
fuel cell voltage. The DCDC-converter is
controlled by the energy control unit (object ecu),
which gets input from sensors installed in the
battery and fuel cell system.
DC power is supplied to the electrical engine by
the two electrical connectors p and n (right).
Compressors and pumps of the fuel cell system are
supplied with electrical energy by the two
additional electrical connectors (nversorg and
pversorg).
The dcsupply object can be parameterized in order
to generate three different hybrid fuel cell vehicle
designs.
1. Fuel Cell Vehicle: vehicle with a fuel cell
solely to supply energy
2. Fuel Cell Vehicle + Booster battery: a vehicle
with high power fuel cell and relatively low
power battery to recover brake energy and
provide additional peak power
3. Fuel cell as battery loader: high power
battery and low power battery. The fuel cell is
mainly used as a battery loader.
For the following examples we used a reference
vehicle with the following parameters: vehicle
mass 1240 to 1280 kg depending on option, drag
resistance times front area 0.6m2 and rolling
resistance 0.01. The total installed power in all
designs is 60 kW.
first design “Fuel Cell Vehicle” the fuel cell power
is 60 kW.
second design “Fuel Cell Vehicle + Booster” the
fuel cell power is 40 kW
third design “Fuel cell as battery loader” the fuel
cell power is 20 kW

Figure 3: Vehicle model as MODELICA object
diagram.

The object diagram consists of four main parts:
1. the overall control of the vehicle, which
includes the representation of the drive cycle
(object hyzem), which has specially been
derived
for
hybrid
vehicles
[1].
the driver model (object Fahrer) and the
control unit (object vcu02).
2. the supply of electrical energy (object
dcsupply), which includes the fuel cell system.
3. the inverter and electrical engine (object
elmotor), which convert the DC current to
mechanical energy.
4. the mechanical parts and driving resistance
of the car (object fahrzeug)
Our special interest is the energy supply, which
provides energy for elmotor, auxiliaries and for to
energy supply system itself (indicated by the two
additional electrical connectors of the object
dcsupply).
Figure 4 shows the object diagram of the object
dcsupply in detail.

Modelica 2002, March 18−19, 2002

128

The Modelica Association

Treffinger P., Goedecke M.

Development of Fuel Cell Powered Drive Trains With Modelica

Figure 5 compares the requested velocity of the
hyzem cycle and the achieved velocity of the fuel
cell car for the third design “Fuel cell as battery
loader”. The first 500 s of the hyzem cycle
represent the urban part of the drive cycle, then up
to approximately 1500 s the extra urban part
follows. The last part is the motorway part.

Table 2 summarizes the results of the investigation.
It shows the energy consumption per km obtained
for the simulation of the three vehicle designs. The
energy content of hydrogen is approximately 120
MJ/kg. Thus the vehicles would consume around 1
kg hydrogen per 100 km.
The operation strategy reflects the control strategy
of the fuel cell system. Operation strategy #1
minimizes the auxiliary energy consumed to
operate the fuel cell system. The results show that
from the point of energy efficiency the second
design “Fuel Cell Vehicle + Booster” battery
combined with operation strategy #1 is the most
energy efficient. The results clearly show that the
energy consumption of the vehicle without battery
suffers from the lack of energy recovery.

Hyzem Cycle
Battery loader, #1

140

velocity / (km/h)

120
100
80
60
40
20
0

0

500

1000

1500

2000

2500

3000

time / s

Figure 5: Results of drive cycle simulation;
velocity as function of time

Degree of
hybridisation

Operation
Strategy
#1
Fuel Cell Vehicle
#2
#3
#1
Fuel Cell Vehicle
#2
+ Booster Battery
#3
#1
Fuel Cell as a
#2
battery loader
#3

The battery loader can not follow the drive cycle at
higher velocities in contrast to the other designs.
Due to the relatively weaker voltage curve
compared to the other designs, which yields to
lower maximum torques of the electric engine.
Figure 6 compares the state of the battery for the
booster design and battery loader design. Over the
urban (first 500 s) and the extra urban part (to 1500
s) of the drive cycle the degree of discharge
decreases, which means the battery is loaded.
During the motorway part of the drive cycle, the
battery loader design needs a significant amount of
energy from the battery, whereas the state of the
battery for the booster design keeps almost stable.
degree of discharge
battery loader, #1
booster, #1

140
120

0.7
0.6

80
0.5
60
0.4

40

degree of discharge

velocity / (km/h)

Table 2: Energy efficiency for Hybrid fuel cell
vehicles

0.8

100

0.3

20
0

Cons. Energy
(MJ/km)
1.57
1.65
1.75
1.09
1.15
1.21
1.17
1.20
1.23

0

500

1000

1500

2000

2500

3000

0.2
3500

time / s

Figure 6: Results of vehicle simulation; degree
of discharge as function of time.

The Modelica Association

129

Modelica 2002, March 18−19, 2002

Development of Fuel Cell Powered Drive Trains With Modelica

Modeling of Fuel Cell Systems

Treffinger P., Goedecke M.

directly cooled with water. Each stack has separate
inlets for air and water. Inside the stacks air and
water are combined and dragged out at one single
outlet. Therefore a separator is needed to separate
air and water.
The water(dark blue) and glycol(green) modules
includes pumps, heat exchangers, ducts and control
valves. The glycol module additionally contains a
fan and an air – glycol heat exchanger to cool the
glycol.
An electric load, which is connected to the anode
and cathode of the fuel cells, is used to examine
the fuel cell system with different load profiles.

Figure 7 shows the object diagram of a fuel cell
system where two stacks are electrically connected
in series. The stacks have to be cooled and
supplied with fuel and oxygen. In this example
hydrogen is used as the fuel. The complete
hydrogen supply containing tank and pressure
reducer etc. is hidden in the object H2 (left in
figure 7).
Oxygen is taken from air. As hydrogen H2 the
components of air supply (compressor, pressure
control, mass flow control etc.) are hidden in the
air object (right in figure 7).
The fuel cell stacks (each with 120 cells) are

Figure 7: Object diagram of a fuel cell system

The description of the fuel cell systems shows
that,
S thermo-hydraulic components are important
S the system has several closed loops
S advanced property routines are needed e.g.
covering phase change
One main problem of fuel cell systems is that
water is dragged with the exhaust stream. Despite
of the production of water in the fuel cell a
negative water balance could occur. In such a
situation an additional water tank would be
needed. The water balance is influenced by a
number of parameters which influence each other,
e.g. air supply strategy, cooling strategy, pressure
drops, load profile. Beyond the task of layout and
design of the components of fuel cell system, we
use our simulation models to adjust the system in
order to achieve water neutrality.

Modelica 2002, March 18−19, 2002

Summary
The DLR Institute of Vehicle Concepts uses
MODELICA in projects, where components of
fuel cell powered cars are developed. During last
year a number of libraries for several disciplines
have been created. We find MODELICA a very
promising tool to analyse the complex interaction
in such systems. Our models have brought us a lot
of insight on how the design of fuel cell powered
cars should be. They are especially useful for the
design of the components of the fuel cell system
and for the definition of operation strategies. The
work with MODELICA will be continued in the
future.

130

The Modelica Association

Treffinger P., Goedecke M.

Development of Fuel Cell Powered Drive Trains With Modelica

Literature
[1]

Gossen, F., Grahl, M.: Vergleich von
Brennstoffzellen- und weiteren zukünftigen
Antrieben hinsichtlich Wirkungsgrad und
Wirtschaftlichkeit. 8. Aachener Kolloquium
Fahrzeug- und Motorentechnik, Aachen,
October 1999

[2]

Steinmann, W-D.: 2nd MODELICA
Conference, Munich 2002

The Modelica Association

131

Modelica 2002, March 18−19, 2002

Modelica 2002, March 18−19, 2002

132

The Modelica Association

Newman C.E., Batteh J.J., Tiller M.

Spark−Ignited−Engine Cycle Simulation in Modelica

Spark-Ignited-Engine Cycle Simulation in Modelica
Charles Newman, John Batteh, and Michael Tiller
Ford Motor Company, USA

thereby retaining its current capabilities, while
removing the limitations on its applicability.
Previous work [9, 10] proved the feasibility of this
type of detailed powertrain modeling in Modelica.
This paper, after a brief overview of the physical
processes which must be modeled by a predictive
cycle simulation model, focuses on the two main
challenges to the developer of such a model in
Modelica:
zone
formation/destruction
and
calculation of realistic thermodynamic properties
of the cylinder contents.

Abstract
This paper details the use of the Modelica
modeling language for the cycle simulation of a
spark-ignited engine. After a brief overview of the
physical processes which must be modeled by a
predictive cycle simulation model, this work
emphasizes the two main challenges to the
developer of such a model in Modelica: zone
formation/destruction and calculation of realistic
thermodynamic properties of the cylinder contents.
The results illustrate that Modelica is capable of
handling the complex physical models required by
cycle simulation programs.

2 Overview of Cycle Simulation
Physics

1 Introduction

The goal of a cycle-simulation program is to
perform a thermodynamic analysis of the engine
cylinder contents through each engine cycle, an
overview of which is shown in Figure 1:
a) The mixture is prepared during the gas
exchange period which extends from the
time the exhaust valve opens (EVO) until
the intake valve closes (IVC); during this
period the burned gases are expelled, and a
fresh mixture of fuel and air is inducted
into the chamber. The mixture is then
compressed until the piston reaches a
position near top dead center (TDC).
b) In a spark-ignited engine, combustion is
then initiated by the firing of the spark
plug.
c) The mixture is then burned, raising the incylinder
pressure and temperature
considerably. In contrast to the process in a
diesel engine, where combustion occurs
throughout the chamber simultaneously,
the mixture is consumed through the
propagation of a well-defined flame front
across the combustion chamber.
d) After the flame consumes all the
combustible mixture, usually some time
after TDC, the gas continues to expand,
transferring energy to the piston as it
continues its downward trajectory.

Computer programs, which simulate the
thermodynamic cycle of an internal combustion
engine, have been developed over the last several
decades both to assist in understanding the
observed behavior of engines and to predict engine
performance and efficiency as functions of engine
design parameters (see [1], [2]). At Ford Motor
Company the internally-developed General Engine
Simulation (GESIM) program [3-6] has matured
sufficiently that it can accurately predict the effects
of intake and exhaust port design, combustion
chamber geometry, and valve timing on
combustion rate, fuel economy, and emissions for a
spark-ignited engine.
Although very useful, GESIM has some significant
limitations: it simulates only one cylinder of an
engine running at constant angular velocity and
reports the cycle averaged output torque. The
result is essentially a simulation of a dynamometer
test point for the engine. Currently, GESIM is
written in procedural languages (FORTRAN and
C), and its capabilities cannot readily be extended
to include the transient multi-cylinder behavior
required to simulate real engine operation in a
vehicle. An effort is now under way to capture
GESIM's physical models in Modelica [7, 8],

The Modelica Association

133

Modelica 2002, March 18−19, 2002

Spark−Ignited−Engine Cycle Simulation in Modelica

(a) Gas exchange

(b) Just after spark

Newman C.E., Batteh J.J., Tiller M.

(c) TDC

(d) Just before EVO

(e) Just after EVO

Figure 1. Modeling of cylinder contents at various points in engine cycle

e) When EVO is again reached, the process
begins anew.

R = ∑ X i Ri =R ∑
i

U

QD
P
V
H
qD w

3 Combustion Modeling

M
R

The traditional approach taken to model the sparkignition combustion process is suggested by Figure
1: we divide the cylinder contents into two (or
more) thermodynamic zones, each with its own
temperature and composition. Behind the flame is
a zone comprised of only burned gases at high
temperature (the burned zone). Ahead of the flame
is the unburned zone, containing the remnants of
the original mixture at a much lower temperature.

T
mi

PV = MRT ,

is the total internal energy of the
zone
is the total energy flow into the zone
is the cylinder pressure
is the volume of the zone
is the total flow of enthalpy entering
the zone
is the heat transferred from the
chamber walls to the zone
is the total mass in the zone
is the overall (mass-specific) gas
constant for the zone
is the temperature of the zone
is the mass of species i in the zone

is the mass fraction of species i in
the zone
is the total flow of species i of the
Si
mass flow entering the zone
u
is the specific internal energy of the
zone
is
the specific internal energy of
u i ( P, T )
species i and is a known function of
P and T
is the universal gas constant
R
µ i ( P, T ) is the average molecular weight of
species i and is a known function of
P and T

Xi

Each zone is regarded as a homogeneous mixture
of N species (or pseudo-species), each modeled as
an ideal gas. The zone must then satisfy the First
Law of Thermodynamics,

the ideal gas law,

(8)

and

Successful modeling of the cycle requires
capturing the essential physics of all the processes
described above. In this paper, however, we
concentrate on those processes critical to the
thermodynamic analysis: combustion by a
propagating flame and the computation of realistic
thermodynamic properties of the gases comprising
the in-cylinder mixture.

dU
dV
= Q − P
,
dt
dt

i

Xi
µi

(1)

(2)

and the conservation of mass for each species

where

dmi
= SC i
dt

(3)

QC = HC + qC w

(4)

M = ∑ mi

(5)

In addition to a set of equations (1)-(8) for each
zone z, a constraint on the total volume must be
added:

VT = ∑ V z

where

VT

i

mi = MX i
U = Mu

Modelica 2002, March 18−19, 2002

(9)

z

is the total volume of the chamber

(6)

The task of the modeler is to complete the system
of equations by supplying conditions to specify the
flows appearing in equations (1)-(8) for all zones.

(7)

134

The Modelica Association

Newman C.E., Batteh J.J., Tiller M.

Spark−Ignited−Engine Cycle Simulation in Modelica

3.1 GESIM Implementation

hu

GESIM makes two modifications to the above
approach:
1. During mixture preparation (gas exchange
and compression), the contents are treated
as a single zone. No solution is sought for
the quantities in the burned zone.
2. After combustion is initiated and as soon
as the flame front makes contact with the
surface of the chamber, the burned zone is
further subdivided into an adiabatic core
and a thermal boundary layer between the
core and the wall.
GESIM implements the engine cycle of Figure 1 as
follows:
a) The system to be solved consists of
equations (1)-(9) for a single (unburned)
zone, supplemented by the following
relationships for the flows:

~
SD ui = ∑ mD v X vi

(10)

~
HD u = ∑ mD v hv

(11)

c) When the flame contacts the wall, the
solution is interrupted and a thin boundary
layer is initialized and the system of
equations altered in a manner similar to b)
above. The details are omitted here.
d) At EVO, the solution is again interrupted.
All zones are mixed together instantly to
form a single zone, which represents the
initial state for the unburned zone for the
next cycle.
e) The set of equations is reduced to those of
a) above and the solution is resumed.

3.2 Modelica Implementation
As GESIM is an in-house product written in
FORTRAN, it has complete control over the
solution method- it can interrupt the solution at
will to expand or shrink the system of equations,
reinitialize, and resume. In Modelica, however,
where the number of equations is fixed, we adopt
two modifications to GESIM's approach:

v

v

where

mD v
~
hv
~
X vi

is the mass flow into the zone
through valve v
is the specific enthalpy of the mass
flow entering the zone through
valve v
is the fraction of species i of the
mass flow entering the zone
through valve v

1. The burned zone (i.e. the adiabatic zone
and boundary layer) exists throughout the
simulation. Each zone satisfies equations
(1)-(8), and equation (9) is imposed on the
volumes. During the mixture preparation
period, when the burned zone does not
exist in GESIM, we require that it have a
small mass (less than the initial spark
kernel) and have temperature and
composition equal to that of the unburned
zone. The solution for the two zones
degenerates to an equivalent single-zone
simulation during this portion of the cycle.
2. GESIM effects the transitions between 1zone and multi-zone behavior essentially
by simulating impulses. In the absence of a
stable and mature impulse capability in
Modelica, we choose to perform these
transitions over a finite, but short time.

b) At spark, the solution is interrupted and a
kernel (diameter ~ 1 mm) of burned gases
is instantly created from the unburned
mixture. This forms the initial state for the
adiabatic zone. Equations (1)-(8) for the
adiabatic zone are added to the system, and
flows for both zones are now specified by

S ui = −m b X ui
H u = −m b hu

(12)
(13)

for the unburned zone and

Sbi = m b Bi ({ X u })
H = m h
b

b u

(14)

Since all zones are always mathematically active,
enough conditions must be supplied to specify all
the flows. While our model includes all three
zones, in this paper we discuss only the aspects of
modeling two zones in order to illustrate the
approach. Adding the boundary layer is a relatively
straightforward extension of the technique.

(15)

for the burned zone where
is the burn rate as calculated
m b
by the flame propagation
model
Bi ({ X u }) is the fraction of species
remaining after a mixture of
composition X ui is burned.

The Modelica Association

is the specific enthalpy of
the unburned zone

During mixture preparation, the "burned" zone is
just a dummy placeholder, containing a small

135

Modelica 2002, March 18−19, 2002

Spark−Ignited−Engine Cycle Simulation in Modelica

Newman C.E., Batteh J.J., Tiller M.

amount of mass in its unburned state, which will be
the first mass to be burned in forming the initial
kernel after spark. We require that both zones have
identical temperature and composition. Since (5)
and (6) imply that
X i = 1 , only N-1

equations, we can combine them into a
single set. Between EVO and spark, then

d∆T
= ∆T0 λ (t )
dt

∑

d∆X i
= ∆X i 0 λ (t ) , 1 ≤ i ≤ N − 1
dt
d∆V
= ∆V0 λ (t )
dt

i

components of the composition vector can be
independently constrained. Hence, our condition
can be expressed as

λ (t ) =

is a volume small compared to that
of the initial spark kernel

Denoting the time of EVO as t 0 , we achieve the
transition from combustion to the above conditions
by mixing the contents of the two zones over a
τ s ~ 100µs ;
i.e.,
for
short
time

t − tF 2
) .
τs

SD ui = 0
HD = 0
u

(21)

b

Referring again to Figure 1, the Modelica
implementation of the cycle is as follows:
a) During mixture preparation, a dummy
burned zone (shown in black) exists.
Except for the transition time at EVO, its
volume is V K . Otherwise it is
indistinguishable from the main unburned
zone. To specify the flows, we first
introduce modified forms of (10)-(11):

(24)

(30)
(31)
(32)

to assure that, by t = t M + 1µs , a
burned zone volume will be achieved
equal to that of GESIM's initial spark
kernel. As soon as the required volume
is attained, the flame propagation
model is used to calculate the burn
rate.
c) The main phase of combustion is identical
to that of GESIM.
d) At EVO, expansion ends. The current time
is assigned to t 0 , and we change over to
the mixture preparation phase.
e) The next cycle begins.

v

v

The constraints (16)-(18) or (19)-(21) are
sufficient to complete the specification for
the transition at EVO or the main portion
of mixture preparation, respectively.
Differentiating both of the above sets of

Modelica 2002, March 18−19, 2002

(29)

where the subscript I denotes a value at
ignition.
2. At t = t M , two-zone combustion
begins. Equations (12)-(15) are used
unchanged, just as in GESIM, with the
D b initially set high enough
burn rate m

(22)

~
HD u + HD b = ∑ mD v hv

u

M
SD bi = bI [ Bi ({ X I }) − X Ii ]
τ1
HD = 0

(20)

(23)

(28)

specified by

(19)

~
SD ui + SDbi = ∑ mD v X vi

t − tF
2
min(0,
).
τs
τs

t I ≤ t ≤ t M = t I + τ 1 , the flows are

where the subscript 0 denotes the value of a
quantity at EVO and

σ (t ) = (

(27)

b) The transition at spark from mixture
preparation to combustion is accomplished
in two steps.
1. Denoting the time of spark as t I , we
first burn the contents of the "burned"
zone over a time τ 1 ~ 1µs ; i.e., for

where

t0 ≤ t ≤ t F = t0 + τ s :
∆T = ∆T0σ (t )
∆X i = ∆X i 0σ (t ) , 1 ≤ i ≤ N − 1
∆V = ∆V0σ (t )

(26)

where

∆T = Tu − Tb = 0
(16)
∆X i = X ui − X bi = 0 , 1 ≤ i ≤ N − 1 (17)
∆V = Vb − VK = 0
(18)

VK

(25)

136

The Modelica Association

Newman C.E., Batteh J.J., Tiller M.

Spark−Ignited−Engine Cycle Simulation in Modelica

The combustion component controls the
creation, evolution, and destruction of the burned

zone in the manner discussed above by
coordinating the activities of a parallel
configuration
of
three
subcomponents:
mix_zones to mix burned and unburned together
at EVO by specifying the flows according to a)
above; kernel_burn to create the initial spark
kernel as described in b) above; flameadv to
grow the burned zone according b) and c). Each of
these
components
supplies
non-vanishing
contributions to the total flow only during the
portion of the cycle that it is meant to control.
Figures 6-9, included at the end of the paper,
contain code fragments that provide some insights
into how the models described in this section have
been implemented.

(a) single cylinder engine

(b) one cylinder

(c) cylinder contents

(d) combustion model

Figure 2 shows schematics for successive levels of
the instance hierarchy in the Modelica
implementation of a single-cylinder version of this
model. The engine itself is shown in Figure 2(a).
Its cylinder component appears in Figure 2(b);
it has been designed to facilitate construction of
multi-cylinder
configurations
through
its
replication. The contents component of the
cylinder, shown in Figure 2(c), models the
thermodynamics of all gases residing in the
cylinder. Finally, in Figure 2(d) we see the
combustion component, the main focus here.

Figure 2. Schematic representations of the engine model hierarchy

The Modelica Association

137

Modelica 2002, March 18−19, 2002

Spark−Ignited−Engine Cycle Simulation in Modelica

Newman C.E., Batteh J.J., Tiller M.

4 Thermodynamic Properties

4.2 Property Calculations

4.1 The "MediumModel" Idiom

As discussed previously, the conservation of
energy for the various combustion zones in the
cylinder is at the heart of the cycle simulation tool.
In addition, a specific medium model is needed to
determine the thermodynamic properties (e.g.
specific enthalpy, h, and specific internal energy, u)
of the cylinder contents used in Eqs. (4), (7).

Different engine simulation applications require
different levels of detail. One of the important
determinations to be made is what level of detail is
required in computing the thermodynamic
properties of the cylinder contents. In some cases,
we can treat the medium flowing through the
engine as simply air but in other cases we might
need to allow for changes in composition of the
gas that would require tracking several chemical
species.

In simple combustion simulations the cylinder
contents can be treated as a single ideal gas.
Constructing a medium model for a single ideal
gas is relatively easy. Since the thermodynamic
properties vary as a function of temperature only,
they can be calculated from a look-up table or a
polynomial regression of tabulated data. However,
for detailed combustion systems the medium is
assumed to be a reacting mixture of ideal gases
(e.g. the fuel vapor, air, and combustion products).
Therefore, in order to compute the contribution of
each species to the mixture property we must first
determine the relative amounts of the various
species in the mixture. This calculation requires the
solution of the nonlinear system of equations that
define chemical equilibrium for the mixture.

At first glance, it would appear that different
component models (e.g. valves, control volumes)
would be required for each of the possible media.
But if we look carefully at the issue, we find that
the properties of the selected medium are
orthogonal to the equations of the various
thermodynamic processes. In other words, if the
models are formulated correctly, the choice of
media can be made independently of the
components used to model the engine cycle.
In practice, this is achieved by using what we refer
to as the MediumModel idiom. The basic idea
behind this idiom is to define a partial
package that describes the interfaces of the
various models, connectors, etc. that will be
required to implement all of our component
models. However, no implementation is provided
by this partial package. This is essentially a
Modelica adaptation of the "Kit" or "Abstract
Factory" pattern found in [13]. In the same way
that a "Kit" might be used as a means of
instantiating compatible GUI toolkit components
such
as
scrollbars,
menus,
etc.,
the
MediumModel is used to instantiate consistent
sets of property models, connectors, etc.

The steps required for the property calculation are
detailed in [11] and can be summarized as follows:
1. Solve the nonlinear system of equations that
defines chemical equilibrium for the
combustion mixture to yield the mixture
composition
2. Calculate the contribution of each species to
the mixture property
3. Calculate the mixture property from the
individual species contributions and the
mixture composition
While the calculations in steps 2 and 3 above are
simple evaluations, the nonlinear solution of the
chemical equilibrium problem is certainly
nontrivial. In the GESIM property models the
combustion products are comprised of twenty-one
species; thus, obtaining the mixture composition
requires the solution of a set of twenty-two
nonlinear equations for chemical equilibrium.
Furthermore, recall that h and u are functions of P,
T, and φ (the equivalence ratio of the combustion
products).
Therefore, the property calculations,
including the determination of the equilibrium
composition, must be computed for each
thermodynamic zone in the engine model
whenever there is a change in the pressure,

The complete definition of the MediumModel
package definition is too lengthy to include here,
but it consists mainly of three things. First, it
contains a partial model definition that
defines the interface for computing medium
properties.
Second, it contains partial
connector definitions that include the
appropriate number of chemical species flowing
between components. Finally, it contains several
partial function definitions for computing
useful quantities (e.g. air fuel ratio) using medium
composition information.

Modelica 2002, March 18−19, 2002

138

The Modelica Association

Newman C.E., Batteh J.J., Tiller M.

Spark−Ignited−Engine Cycle Simulation in Modelica

temperature, and/or composition of any of the
thermodynamic zones.

the assumption that a file has been created that
contains all the necessary data to perform the
interpolation.

While this method for calculating the mixture
properties could be implemented directly in
Modelica, it would require the cycle simulation
tool to repeatedly compute the solution of the
chemical equilibrium problem, a formulation that
has several drawbacks. First, the repeated solution
of the nonlinear equations used to determine the
equilibrium
chemistry
is
computationally
demanding when compared to the other behavior
equations involved, a formulation which would
result in slower simulation times. In addition, the
chemical systems introduce other issues such as
robustness of the nonlinear solution method and
scaling of the chemical concentrations. So, rather
than calculate the needed properties on-demand
during the simulations, an alternative approach is
to pre-compute the properties throughout the
expected domain of operation and simply
interpolate as needed during the simulations. The
ModelicaAdditions package contains a
Tables package that includes models for linear
interpolation in one and two dimensions,
CombiTable1D
and
CombiTable2D
respectively. However, the mixture properties are
functions of three variables (P, T, and φ). Even trilinear interpolation would not suffice as continuity
of the mixture properties and gradients could not
be insured. It can be shown [11] that this
continuity in gradients is important for fast and
accurate simulation. Furthermore, maintaining
continuous gradients allows for index reduction in
Modelica and would certainly be of benefit to the
numerical integration schemes in Dymola [12].

4.3 Hermite Interpolation
Based on the requirements detailed in the previous
section, the interpolation scheme must be threedimensional and provide continuity of the
interpolated function value and its derivative. One
scheme that satisfies those criteria is Hermite
interpolation [14]. The Hermite interpolating
function for a generic property p is defined in
standard tensor notation as follows:

p(u, v, w) = Fl (u )Fm (v )Fn (w)b lmn
F1 (u ) = 2u 3 − 3u 2 + 1

F2 (u ) = −2u 3 + 3u 2

(34)

F3 (u ) = u 3 − 2u 2 + u
F4 (u ) = u 3 − u 2

and similarly for Fm(v) and Fn(w). The blending
functions clearly show the cubic nature of the
interpolating polynomial and are evaluated based
on the point within the cube at which the
interpolated value is sought, denoted by the star in
Figure 3.
(i+1,j+1,k+1)
(i,j+1,k+1)

(i+1,j,k+1)
(i,j,k+1)

As a result, higher order interpolation schemes are
required to provide the desired continuity. They
involve the construction and evaluation of
polynomials to yield the interpolated values and
are more difficult to implement since more
information is needed about the function other than
simply its value at each grid point (i.e. the
derivatives of the function, additional function
values at adjoining cubes, etc.).

(i,j+1,k)
(i+1,j+1,k)

w
(i,j,k)

v
u

(i+1,j,k)

Figure 3. Hermite interpolation cube

The tensor blmn is comprised of externallyprovided data about the function p and its
derivatives, data that is required at the eight cube
vertices shown and labeled in Figure 3. The data
consists of eight pieces of information at each of
the eight vertices, a total of 64 pieces of
information for a single cube: the function value,
three tangent vectors, three twist vectors, and a
vector defined by the third-order mixed partial

Though not detailed in this work, a flexible
modular scheme has been developed to
automatically formulate the chemical equilibrium
problem and solve for the equilibrium chemistry
and mixture properties over a wide range of engine
operating conditions (P, T, and φ). The remainder
of this section discusses the implementation of a
higher order interpolation scheme in Modelica with

The Modelica Association

(33)

where the following vectors define the cubic
blending functions:

139

Modelica 2002, March 18−19, 2002

Spark−Ignited−Engine Cycle Simulation in Modelica

Newman C.E., Batteh J.J., Tiller M.

derivative of the function. See [14] for a complete
description of the Hermite interpolation scheme
and data required.

and avoid expensive recalculations.
Another
reason to implement a cache is to allow for
common calculation to be shared among the
various interpolation-related functions.
For
example, calculating the gradient of the
interpolating function requires much of the same
data as the function evaluation itself. These
common quantities can also be stored in a cache
and reused across calculations.

Clearly a significant amount of data is required for
the interpolation of the thermodynamic properties
h and u. With some symbolic manipulation of the
property equations, it is possible to derive all the
necessary function and derivative data analytically
without resorting to numerical differentiation. This
data is available to Modelica in the form of a
Matlab .mat file. A typical 30 x 45 x 45 data file
is approximately 7.6 MB.

Once we have implemented the interpolation
routines, we can move on to implementing a
medium model that utilizes these interpolation
routines. This calculation involves two different
interpolations. First, the properties of the gaseous
air-fuel mixture (which is treated as a non-reacting
mixture of ideal gases) can be computed via
interpolation in temperature. Then, the properties
of the reacting combustion products are computed
using interpolation in pressure, temperature and
equivalence ratio. These two sets of properties are
then combined to form a single set of properties for
the entire air, fuel and combustion products
mixture.

4.4 Modelica Implementation
Once we have decided on an appropriate
interpolation scheme and collected all the property
data required, the next step is to implement the
interpolation scheme so that it can be used from
within our Modelica models.
In our
implementation, the interpolation and gradient
calculations (associated with the interpolation
function via the derivative annotation) were
written in "C". These functions are then called as
external functions by native Modelica
functions.

Although we implemented our own interpolation
routines for this purpose, we will work toward
incorporating similar functionality into the
Modelica Standard Library so that the routines can
be more fully optimized and so that future users
will be able to simply reuse what is in the library
rather than having to create their own.

While the steps required are straightforward, there
are several implementation details worth
discussing. For example, in order to perform the
interpolation, the property data must be loaded and
made available to the "C" language routines.
Rather than load the data (which is quite
voluminous) into Modelica arrays and pass it as an
argument to the various functions, we chose
instead to load the data into memory and simply
refer to it using an integer identification number.
As a result, the only data passed around in the
Modelica models is the unique ID number that
identifies where the data can be found in memory.
In the future, the interpolation routines will be
upgraded
to
use
the
newly
adopted
ExternalObject class in Modelica 2.0 [8] that
was introduced to provide more direct support for
these kinds of applications.

5 Cycle Simulation Results
The single-cylinder Modelica model was run for 1
second of simulation time at 1500 rpm at slightly
lean conditions. By the end of the tenth engine
cycle, approximately 0.8 seconds, the model has
effectively converged to "steady-state"; i.e., each
cycle is a repeat of its predecessor. Some results
for the tenth cycle are shown in Figures 4-5.
Figure 4 plots the temperature of all three zones.
During mixture preparation the temperatures are
equal, as is required. At spark, they separate, with
the adiabatic temperature exceeding 2600 K, the
unburned zone peaking at around 900 K, and the
boundary layer achieving a value in between.
These temperatures agree well with those
computed in GESIM and are typical of those
encountered in spark-ignited engines. At EVO,
when the zones are remixed, all temperatures again
quickly collapse to a single value, as expected.

Another issue with the interpolation routines is to
improve performance by implementing some form
of caching mechanism. There are two reasons to
implement a cache mechanism.
First, the
simulation tool may not entirely optimize away
redundant function calls (i.e. calls with the same
arguments and therefore the same results). In such
cases, a cache can be used to store previous results

Modelica 2002, March 18−19, 2002

140

The Modelica Association

Newman C.E., Batteh J.J., Tiller M.

Spark−Ignited−Engine Cycle Simulation in Modelica
−4

6

3000

x 10

2500

5

2000

4

Volume [m3]

Temperature [K]

Unburned zone
Boundary layer (burned)
Adiabatic core (burned)

1500

3

2

1000

1

500

0

Chamber (total)
Unburned zone
Boundary layer (burned)
Adiabatic core (burned)

0
0.76

0.77

0.78

0.79

0.8
Time [s]

0.81

0.82

0.83

0.76

0.84

Figure 4. Zone temperatures (converged cycle)

0.78

0.79

0.8
Time [s]

0.81

0.82

0.83

0.84

Figure 5. Zone volumes (converged cycle)

The volumes of the three zones, along with the
total chamber volume, are plotted in Figure 5.
Since some of the zones during parts of the cycle
are artifices of our modeling approach, we cannot
use measurements or GESIM to gauge their
accuracy. However, they do behave as anticipated.
During mixture preparation, when the adiabatic
zone and the boundary layer do not appear in
GESIM, their volumes are indeed insignificant.
When combustion begins those two zones grow
rapidly at the expense of the unburned zone,
eventually reducing the size of the latter to
insignificance at the end of combustion. At EVO,
when the zones are remixed, all zones quickly
revert to their values for mixture preparation.

References
1.
2.
3.

4.

5.

6.

6 Conclusions
This paper outlines the handling of zone
formation/destruction and calculation of realistic
thermodynamic properties of the cylinder contents
in Modelica for engine cycle simulation. The
results illustrate that Dymola and Modelica are
capable of handing the complex physical models
required for predictive cycle simulation.
Furthermore, the techniques used provide
illustrative examples for the handling of similar
behavior in different applications.

7.
8.
9.

10.

Acknowledgements

11.

The authors would like to acknowledge Dr. Anne
Marsan at Ford Research Laboratories for the
helpful discussions on geometry and interpolation.
In addition, we would also like to acknowledge the
support provided by Dynasim AB during the
development of these models.

12.
13.
14.

The Modelica Association

0.77

141

Heywood, J.B., 1988, Internal Combustion Engine
Fundamentals. McGraw-Hill.
Tiller, M. M., 2001, Introduction to Physical
Modeling with Modelica. Kluwer.
Borgnakke, C., et al., 1980, "A Model for the
Instantaneous Heat Transfer and Turbulence in a
Spark Ignition Engine," SAE-80-0287, Society of
Automotive Engineers.
Newman, C.E., et al., 1989, "The Effects of Load
Control with Port Throttling at Idle--Measurements and Analyses", SAE-89-0679,
Society of Automotive Engineers.
Brehob, D. D., and C. E. Newman, 1992, "Monte
Carlo Simulation of Cycle by Cycle Variability,"
SAE-92-2165, Society of Automotive Engineers.
Miller, R., et al., 1998, "Comparison of
Analytically and Experimentally Obtained Residual
Fractions and NOx Emissions in Spark-Ignited
Engines", SAE-98-2562, Society of Automotive
Engineers.
Modelica Association, 2000, "Modelica Language
Specifications (Version 1.4)", www.modelica.org.
Modelica Association, 2002, "Modelica Language
Specifications (Version 2.0)", www.modelica.org.
Tiller, M.M., et al., 2000, "Detailed Vehicle
Powertrain Modeling in Modelica", Modelica
Workshop 2000 Proceedings, pp. 169-178.
Bowles, P., et al., 2001, "Feasibility of Detailed
Vehicle Modeling", SAE-2001-01-0334, Society of
Automotive Engineers.
Olikara, C. and Borman, G. L., 1975, "A Computer
Program for Calculating Properties of Equilibrium
Combustion Products with Some Applications to
I.C. Engines", SAE-75-0468, Society of
Automotive Engineers.
Dymola. Dynasim AB, Lund, Sweden,
www.dynasim.se.
Gamma, E., 1995, Design Patterns. AddisonWesley.
Mortenson, M.E., 1985, Geometric Modeling. John
Wiley and Sons.

Modelica 2002, March 18−19, 2002

Spark−Ignited−Engine Cycle Simulation in Modelica

Newman C.E., Batteh J.J., Tiller M.

Code Fragments
This section contains code fragments to illustrate
some of the points raised during discussion of zone
formation and destruction.

parameter Modelica.SIunits.Volume Vbtarget
"Unburned kernel size";
constant Integer nindep=MediumModel.nspecies - 1
"Number of independent species fractions";
discrete Modelica.SIunits.Time endstep;
Modelica.SIunits.MassFraction dX[nindep];
Modelica.SIunits.Temperature dT=a.T - b.T;
Real dV=1.0 - Vbnorm;
Real Vbnorm(start=5, fixed=true);
discrete Modelica.SIunits.Temperature deltaT;
Modelica.SIunits.MassFraction deltaX[nindep];
discrete Real deltaV
discrete Real r;
Real rate_expr;

constant Integer mixprep=1;
constant Integer ignstep1=2;
constant Integer ignstep2=3;
constant Integer propagating=4;
constant Integer expanding=5;
parameter Modelica.SIunits.Time tau=1e-4;
parameter Modelica.SIunits.Time ign_delta=1e-6;
Integer status;
discrete Modelica.SIunits.MassFlowRate
ignition_rate "Combustion rate during ignition";
discrete Modelica.SIunits.Time endstep(start=tau);
equation
mix_zones.mix.signal[1] = status == mixprep;
mix_zones.tfinal.signal[1] = endstep;
kernel_burn.burn.signal[1] = status == ignstep1;
kernel_burn.burn_rate.signal[1] = burn_rate;
flameadv.burn.signal[1] = status == ignstep2 or
status == propagating;
flameadv.burn_rate.signal[1] = burn_rate;

.
.
.

equation
// component a refers to the unburned zone, b to
// the burned zone
a.P = b.P;
a.q + b.q = 0.0;
a.mdot = -b.mdot;
// volume_b.signal[1] is the volume of the
// burned zone
Vbnorm = volume_b.signal[1]/Vbtarget;
rate_expr = 2.0*r^2*min(0.0, time - pre(endstep));
dX = a.X[1:nindep] - b.X[1:nindep];
if mix.signal[1] then // true at EVO
der(dV) = pre(deltaV)*rate_expr;
der(dX) = pre(deltaX)*rate_expr;
der(dT) = pre(deltaT)*rate_expr;
else
a.q = 0.0;
a.mdot = zeros(MediumModel.nspecies);
end if;

.
.
.

if status == ignstep1 or status == ignstep2 then
burn_rate = pre(ignition_rate);
elseif status == propagating then
// post_ignition_rate is computed by flame
// propagation model
burn_rate = post_ignition_rate;
else
burn_rate = 0.0;
end if;

algorithm
when mix.signal[1] then
deltaX := dX;
deltaT := dT;
deltaV := dV;
endstep := tfinal.signal[1];
r := 1.0/(endstep - time);
end when;

algorithm
when status == mixprep and spark.signal[1] then
status := ignstep1;
endstep := time + ign_delta;
kernel_mass := pre(burned_mass);
ignition_rate := kernel_mass/ign_delta;
end when;

Figure 7. Excerpt from the mix_zones model

when status == ignstep1 and time > endstep then
status := ignstep2;
endstep := time + ign_delta;
ignition_rate := pre(burned_mass)*
(2.0*initial_kernel_size/pre(burnedV) 1.0)/ign_delta;
end when;

equation
// Component medium is the burned zone
if burn.signal[1] then
// MediumModel.BurnMixture computes the
// composition after a given mixture is burned
medium.mdot = burn_rate.signal[1]*
(Xbase - MediumModel.BurnMixture(Xbase);
else
medium.mdot = zeros(MediumModel.nspecies);
end if;
medium.q = 0.0;

when status == ignstep2 and
(time > endstep or
burnedV/initial_kernel_size > 1.0) then
status := propagating;
end when;
when status <> mixprep and
endofexpansion.signal[1] then
status := mixprep;
end when;

algorithm
when burn.signal[1] then
Xbase := medium.X;
end when;

when status == mixprep then
endstep := time + tau;
end when;

Figure 8. Excerpt from the kernel_burn model
equation
a.q + b.q = 0;
if burn.signal[1] then
a.q = burn_rate.signal[1]*a.h;
a.mdot = burn_rate.signal[1]*a.X;
// MediumModel.BurnMixture computes the
// composition after a given mixture is burned
b.mdot = -burn_rate.signal[1]*
MediumModel.BurnMixture(a.X);
else
b.q = 0;
a.mdot = zeros(MediumModel.nspecies);
b.mdot = zeros(MediumModel.nspecies);
end if;

Figure 6. Excerpt from the combustion model

Figure 9. Excerpt from the flameadv model

Modelica 2002, March 18−19, 2002

142

The Modelica Association

Session 6b

Thermodynamic Systems I

The Modelica Association

143

Modelica 2002, March 18−19, 2002

Modelica 2002, March 18−19, 2002

144

The Modelica Association

Pfafferott T., Schmitz G.

Modeling and Simulation of Refrigeration Systems with the Natural ...

Modeling and Simulation of Refrigeration
Systems with the Natural Refrigerant CO 2
Torge Pfafferott Gerhard Schmitz†
Technical University Hamburg–Harburg (TUHH)
Department of Technical Thermodynamics (6-08)
March 2002

Abstract
This papers presents the current results of the development of a ModelicaTM library for CO2 -Refrigeration
systems based on the free Modelica library ThermoFluid.
The development of the library is carried out in a research project of EADS Airbus and the TUHH and is
focused on the aim to get a library for detailed numerical investigations of refrigeration systems with the rediscovered, natural refrigerant carbon dioxid (CO2 ).
A survey of the CO2 -Library is given and the modeling
of CO2 -Heat exchangers is described in detail. A comparison with steady state results of heat exchangers is
presented and results of a transient simulation run are
discussed with respect to plausibility.

1

Introduction

The fact of climate changes due to ozone depletion and
globale warming has been directed to signiﬁcant research activities on the ﬁeld of refrigeration and airconditioning since the 1990s [7]. The objective of
the investigations may yield to a long-term solution.
Therefore so called natural, resp. alternative refrigerants with no Ozone Depleting Potential (ODP) and no
or a very low Global Warming Potentail (GWP) are investigated and new technical developments are driven.
Carbon dioxid (CO2 , R 744) as a natural refrigerant
was rediscovered and has recently a very high potential
to substitute currently used refrigerants in the area of
mobile/automotive air-conditioning and refrigeration.
This development is caused by the excellent thermodynamic, transport and environmental properties of CO2 .
Due to the critical data of CO2 the process must be re pfafferott@tu-harburg.de

† schmitz@tu-harburg.de

The Modelica Association

alized as a transcritical cycle, which requires special
control strategies.
In order to obtain a better understanding of the complex thermodynamic and hydraulic behaviour of CO2 Refrigeration processes under steady and dynamic
boundary conditions the modeling of components of a
CO2 -System has been realized. A CO2 -Model library
in ModelicaTM was built up by using base classes
of the free Modelica library ThermoFluid [14]. The
scope of the CO2 -Library is the modeling of the system behaviour by consideration of the most important
physical effects like compressible ﬂow, heat transfer,
pressure drop, large capacities and time delays.
The development of a CO2 -Library is carried out in a
research project of European Aeronautic Defence and
Space Company (EADS) Airbus and the Department
of Technical Thermodynamics of the Technical University Hamburg–Harburg (TUHH). The main objective of the project is a proof of concept of a CO2 based
integrated cooling system on board of future airliners.
For this purpose numerical and experimental investigations are in progress.

2 Carbon dioxid as refrigerant
Carbon dioxid was used as a refrigerant until the
1930s, but was then replaced by the synthetical refrigerants (HCFCs) that offered lower absolute pressures,
simpler techniques and higher efﬁciencies in conventional vapor compression cycle. Due to the ODP and
the GWP of the synthetical refrigerants substantial research activities on the ﬁeld of refrigerants are initiated
since the 1990s. Recent research on carbon dioxid is
pushed for mobile, resp. automotive air-conditioning
and refrigeration and has focused on the development
of a transcritical cycle [2]. Figure 1 illustrates the
GWP for the three refrigerants R 12, R 134a and CO2 ;
the use of R 12 is forbidden in europe since the be-

145 − 1

Modelica 2002, March 18−19, 2002

Modeling and Simulation of Refrigeration Systems with the Natural ...

Pfafferott T., Schmitz G.

130°C

100°C

110°C
120°C

/m 3
0kg

2

20

90°C

80°C

C
70°
kg/m 3
300

C
60°
400k
g/m 3

m3

3

500kg/

600kg/m 3

50°C

40°C

20°C

4

800kg/m 3 30°C

10°C

900kg/m 3

110

0°C

120

1000kg/m3

130

ï10°C

ginning of 1990s. The refrigerant R 134a today is tion, that occurs sometimes), internal heat exchanger,
the most common refrigerant in mobile and automo- expansion valve, evaporator and low-pressure receiver.
The process path of a transcritical CO2 -Cycle is shown
tive air-conditioning systems.
in ﬁgure 3. The path represented by 1-2-3-4-5-6 shows
compression (1-2), isobaric heat rejection at gas cooler
(2-3), isobaric cooling in the internal heat exchanger
(3-4), adiabatic expansion (4-5), isobaric evaporation
(5-6) and isobaric superheating at internal heat exchanger (6-1). In steady state the low-pressure receiver
has no inﬂuence of the process. For more detailed explanation of the CO2 -Cycle see [6], [5].

Figure 1: GWP of three different kind of refrigerants;
GWP is standarised to 1 for CO2

Pressure in bar

100
90
80
70
3

m

g/

60

0k

10

50

2.1

CO2 -Refrigeration cycle

40

6

5

3

kg/m

4

Cooling
Medium

Expansion
Valve
5

3
Internal
Heat Exchanger

Gas Cooler

Evaporator
Ambient Air
Receiver
6

2

1

Compressor
M

Figure 2: Schematic diagram of a CO2 -Refrigeration
cycle

As shown in ﬁgure 2, the main components of a CO2 Refrigeration cycle are compressor, gas cooler (instead
of a condenser because of the supercritical heat rejec-

Modelica 2002, March 18−19, 2002

x=0.9

x=0.8

x=0.7

x=0.6

.5

.4

x=0

x=0

0.3

x=

0.2

x=

x=

0.1

50
30
1
The temperature and pressure at the critical point of
20
CO2 are 304,13 K and 73,77 bar. Therefore, the re150
200
250
300
350
400
450
500
550
Enthalpy in kJ/kg
frigerant cycle has to be operated transcritically when
the ambient temperature is near or higher than the critFigure 3: p,h-Diagram with states of a CO2 ical temperature. In this case the evaporation takes
Refrigeration cycle
place at subcritical pressure and temperature and the
heat rejection at supercritical state. At the supercritical status area pressure and temperature are not coupled anymore; so a CO2 -System has one more degree
of freedom than conventional vapour compression cy- 3 CO -Library
2
cles.

The aim of the modeling is to create a library with
physical based models of the above mentioned components. Such a library with models of these components and of additional components for testing, like
sinks and sources, can be used for investigations of
both, single components and complete refrigeration
cycles. Furthermore it is of great interest to make dynamic simulation as well as steady state simulation of
CO2 -Systems and single components, especially heat
exchanger. Up to now, there is no commercial or free
available simulation tool enabling dynamic and steady
state simulation of CO2 -Cycle and -Components with
only physical based models. There are some tools for
steady state simulation but they need measured charateristics of the heat exchangers as an input.
The numerical investigation of heat exchanger components is of particular interest to ﬁnd optimized heat
exchangers for limited space. On the other hand the

145 − 2

The Modelica Association

Pfafferott T., Schmitz G.

Modeling and Simulation of Refrigeration Systems with the Natural ...

¯ Compressor:
The model is made for a reciprocating compressor. Therefore, the mass ﬂow is calculated by
the general equation of a reciprocating compressor and enthalpy change is calculated according
to the isentropic efﬁciency. The compressor is
modelled with lumped parameters.

concept of connectors in Modelica provides the opportunity using the same heat exchanger models for single
component simulation as well as for a complex cycle
simulation.
There are different backgrounds for modeling and
simulation of complex, closed CO2 -Refrigeration cycles. The ﬁrst aim is a better understanding of the
complex, coupled thermodynamic, ﬂuidmechanic and
heat transfer effects in a transcritical operating CO2 System. Here the inﬂuence of some typical system parameters like compressor speed, heat exchanger
and receiver geometry and refrigerant ﬁlling can be
tested. Furthermore aspects of the control of the system should be investigated. Finally, the library is used
for simulation and evaluating of different system design in various applications.
The library is based on free Modelica library ThermoFluid. The ThermoFluid library, especially the
base classes and partial components, is in regard to
the implementation of the three balance equations (energy, mass, momentum) and the method of discretization (ﬁnite volume) very well suited for modeling of
CO2 -Systems. In cooperation with the developers
of ThermoFluid a high accuracy medium model for
CO2 based on an equation of state was implemented
for the whole ﬂuid region [9].

3.1

¯ Expansion valve:
The throttling process is treated as isenthalpic and
the pressure drop is calculated according to the
ﬂow coefﬁcient of the valve [1]. The ﬂow coefﬁcient results by the speciﬁc valve contruction and
the opening ratio of the valve. Therefore, the ﬂow
characteristic of the valve has to be known and
the model has to be parameterized with the corresponding values. For the valve model lumped
parameters are used.
¯ Receiver:
Up to now, a simple receiver model is implemented. The model seperates the incoming two
phase ﬂow into its vapour and liquid phase. As
long as the liquid level of the receiver is lower
than the outlet height saturated vapour leaves;
if the liquid level reaches the outlet height a
two phase ﬂow leaves up to a height only liquid leaves. Due to the sophesticated construction
of CO2 -Receivers in most of the operating modes
a two phase ﬂow leaves the receiver even if the
liquid level is much lower the outlet height. It
seems to be not easy to model this components
with physical correlations; so the modelling is in
progress.

Survey of CO2 -Library

So far, the following models and classes have been implemented:
¯ Heat transfer and pressure loss relations for
the whole ﬂuid region:
This constitutive equations are used for the calculation of heat ﬂux and pressure drop due to friction, which are added to the balance equations of
energy and momentum [10], [11].
¯ Models for the air side of heat exchangers:
The balance equation of energy is implemented
by the ﬁnite volume method [8]; well suited heat
transfer correlations for the air side have been implemented [4].
¯ Pipes and heat exchangers:
Based on the medium model, classes of ThermoFluid, the heat transfer and pessure drop correlations and the air side models pipes and heat
exchangers have been modelled. The pipes are
modelled with discretized parameters.

The Modelica Association

¯ Flow splits and junctions:
For this models classes of ThermoFluid are used;
for the pressure drop in the momentum equation
special correlations for splits and junctions have
been implemented taking the ratio of mass ﬂow
into account [3]. The change of mass ﬂow direction is taken under account in the implementation.

4 Examples of Modeling
4.1 Modeling of heat exchangers
So far, available heat exchangers for CO2 Refrigeration systems are compact prototype
components from the automotive application, see
ﬁgure 4. The heat exchangers are built up as follows:
The CO2 -Flow is splitted in different streams through
so called Flat-Tubes (or Multiport-Micro-Tubes),

145 − 3

Modelica 2002, March 18−19, 2002

Modeling and Simulation of Refrigeration Systems with the Natural ...

Pfafferott T., Schmitz G.

see ﬁgure 5. The Flat-Tubes consists of a number of
parallel bores in which the CO2 ﬂows. The refrigerant
is splitted and collected at the feeder and manifold
of the heat exchangers. Outside the heat exchanger
air passes over slitted ﬁns enhancing the air side heat
transfer area and heat transfer coefﬁcient, see ﬁgure 6.

Figure 6: Slitted ﬁns

CO2 Inlet

Figure 4: CO2 -Gas cooler

11111
00000
00000
11111
00000
11111
00000
11111
00000
11111
00000
11111
00000
11111
00000
11111
00000
11111
00000
11111
00000
11111
00000
11111
00000
11111
00000
11111
00000
11111
00000
11111
00000
11111
00000
11111
00000
11111
00000
11111
00000
11111
00000
11111
00000
11111
00000
11111
00000
11111
00000
11111
00000
11111
00000
11111
00000
11111
00000
11111
00000
11111
00000
11111
00000
11111

CO2 Outlet

Mass flow air

Figure 7: Flow path through a cross ﬂow heat exchanger

Figure 5: Cross section of a Flat-Tube
In a heat exchanger different ﬂow pathes for the
CO2 are possible; usually gas coolers are constructed
as crossﬂow and evaporators are built up as crosscounterﬂow heat exchangers. In ﬁgure 7 the schematic
ﬂow path of CO2 through a crossﬂow heat exchanger
is shown; e.g. here the CO2 has three transits through
the heat exchanger. At every transit the CO2 -Flow is
splitted in a number of parallel Flat-Tubes, the bores
of every Flat-Tube are ﬂowed through concurrent.
For the modeling of the CO2 -Flow a homogenous distribution of the ﬂow is supposed. By this assumption the ﬂow is modelled by one single pipe. The

Modelica 2002, March 18−19, 2002

heat transfer area and the ﬂow cross section are determined by the geometry and the number of all concurrent ﬂowed pipes; whereas the heat transfer coefﬁcient
and the pressure loss is calculated with the mass ﬂow
rate and the geometry of a single bore.
The assumption of homogenous mass ﬂow and temperature distribution is also made for the air side.
Therefore, it is possible to model the air ﬂow through
one air channel. In the modeling can be assumed that
the slitted ﬁns and the Flat-Tubes create a triangular
channel, see ﬁgure 6. So the total mass ﬂow of air is
scaled down to the mass ﬂow through one channel by
division through the total number of air channels of the
heat exchanger. At the air side only the energy balance
equation is implemented by the ﬁnite volume method.
The medium properties are introduced by polynomi-

145 − 4

The Modelica Association

Pfafferott T., Schmitz G.

Modeling and Simulation of Refrigeration Systems with the Natural ...

nales ﬁtting the properties well in the temperature intervall of 253.15 K to 342.15 K. Because the air side
heat transfer is much lower than on the refrigerant side,
a detailed physical model based on characteristic numbers and geometry parameters and validated on experimental investigation has been found by a literature review and is implemented [4].
The wall model is taken from the ThermoFluid library.
It is modeled as a capacitive, cylindric wall.
This speciﬁc models of CO2 -Pipe, wall and air have
to be connected in the right way to get a reasonable
model of a heat exchanger. For the connection the heat
connectors of ThermoFluid can be used; the conneting
variables are temperature and heat ﬂux. The implementation, especially the connection is as follows:
First the same number of air channel objects is created
like the dicscretization number of the pipe and wall.
The air channel model itself can be discretized in air
ﬂow direction with another number. At the connection
to the air side the calculation of the heat ﬂux for one
single air channel has to be taken into consideration.
Therefore it has to be scaled up by a factor of the
numbers of total air channels and the discretization
number. In the modeling a class is programmed
where the air channel objects are declared and where
the scaling is programmed. Furthermore, every air
channel object is connected with the wall temperature
of the equivalent, discretized wall element. So every
volume of a discretized air channel gets the same wall
surface temperature. The following code example
shows this implementation; here geoHX.pipe n means
the discretization of pipe and wall and geoHX.AC
means the discretization of air ﬂow:

model AirChannelDCrossFlow
....
Co2Flow.Air.DiscAirChannelDDry
AirChannels[geoHX.pipe_n] ;
ThermoFluid.Interfaces.HeatTransfer.HeatFlowD
AirHT(n=geoHX.pipe_n) "Heat connector";
equation
for ac in 1:geoHX.pipe_n loop
for i in 1:geoHX.AC_n loop
AirChannels[ac].T_W[i] = AirHT.T[ac];
\\ Air surface temp. connected
\\ with heat connector
end for;
...
AirHT.q[ac] = AirChannels[ac].Q_dot_total*
geoHX.total_channels/geoHX.pipe_n;
\\ Heat flow at the connector is scaled
end for;
....
end AirChannelDCrossFlow;

of a heat exchanger in Modelica is shown in ﬁgure 9 as
the graphical representation in the modeling and simulation tool DymolaTM .
The implementation of a cross counter heat exchanger
can be realized now easily. Only the connections of
temperature and heat ﬂow have to change in the class
AirChannelDCrossFlow in a speciﬁc way.
AirChannelDCrossFlow

.

m air, total
HX-Airchannels
111
000
000
111
000
111
1111
0000
0000
1111

111
000
000
111
000
111
1111
0000
0000
1111
1111
0000
0000
1111
0000
1111

111
000
000
111

T_W[1:3] = AirHT.T[1]

1111
0000
0000
1111
0000
1111
111
000
000
111

T_W[1:3] = AirHT.T[2] T_W[1:3] = AirHT.T[3]

1111111111111111111111111
0000000000000000000000000
0000000000000000000000000
1111111111111111111111111

.

m CO

2

Air channel

111
000
000
111
000
111

HeatConnector

Wall

,total

CO2-Pipe

Figure 8: Schematic illustration of the modeling of
heat exchangers

Figure 9: Graphical representation of the heat exchanger model

4.1.1

Comparison of steady state simulation and
measurement

With these models simulations in a test conﬁguration
have been run. The test conﬁguration consists of a
source providing pressure and enthalpy at the heat exA schematic illustration of the modeling idea and the changer inlet and a mass ﬂow sink generating a deﬁned
connections is shown in ﬁgure 8. The implementation mass ﬂow at the outlet. The source and sink are used

The Modelica Association

145 − 5

Modelica 2002, March 18−19, 2002

Modeling and Simulation of Refrigeration Systems with the Natural ...

Pfafferott T., Schmitz G.

to set the boundary conditions resulting from the mea- 4.2 Implementation of constitutive equations
sured data at the component.
In order to obtain a most physical modeling of
The following comparison is made for a crossﬂow CO2 ﬂow through pipes and any kind of heat exchanggas cooler and cross-counter ﬂow evaporator from the ers constitutive equations for pressure drop and heat
CO2 -Experimental system built up at the Department transfer for the whole ﬂuid region are implemented acof Aircraft Systems Engineering of the TUHH. The cording to [11], [10]. A comparison of implemented
geometry parameters of the components are known. In relations with experimental data from the SINTEF
the tables 1 and 2 the measured data and the results of [12] shows a good correspondence [13]. The pressure
the simulations at the point of steady state are shown. drop and heat transfer correlations are empirical equaThe comparison of experimental data and simulation tions which only are exactly valid for steady state. Due
results shows a very good correspondence, especially to the fact that such correlations for dynamic state are
if you take under account that the printed experimental not available it seems to be the best and a very comdata are taken as is. The tolerance of the sensors has mon method for describing these effects in a dynamic
simulation.
not been taken into account, yet.
The correlations have been implemented with regard
to numerical robustness and simulation time. At
Table 1: Comparison of measured data at a gas cooler the foldover between laminar and turbulent ﬂow the
describing empirical equations of heat transfer and
with simulation results in steady state
pressure drop have no steady transition. By avoiding
Boundary conditions from measured data
event iterations in this case a function for the smooth
ṁair
ṁCO2
p̄CO2
TCO2 in
hCO2 in Tair in
transition has been implemented. The unsteady tran[kg/s]
[kg/s] [bar]
[K]
[kJ/kg]
[K]
sition of the pressure drop coefﬁcient at a Reynolds
0,605
0,013 96,0
395,4
538,5 308,9
number of 2300 is shown in ﬁgure 10 with a solid line.
0,593
0,032 87,5
355,0
487,2 312,9
The dashed line between Reynolds numbers of 2000
0,598
0,036 88,3
373,4
513,8 312,9
and 3000 shows the run of the interpolated pressure
Measured data
Simulation
drop coefﬁcient. The interpolation function fullﬁlls
Q̇CO2
TCO2 out Tair out Q̇CO2 TCO2 out Tair out
the following requirments:




[K]
309,5
314,7
315,3



[K]
315,7
320,2
323,3



[kW]
-3,02
-3,45
-4,99

[K]
312,7
316,2
317,4







[K]
313,5
318,0
320,0

[kW]
-2,85
-3,14
-4,37

¯ The gradient inbetween the limits of validity is
always smaller than inﬁnity.
¯ The gradient near the limits of the intervall is
nearly zero.
¯ Exactly at the limits of validity the interpolation
function calculates the exact value of the current
function.

Table 2: Comparison of measured data at an evaporator with simulation results in steady state
Boundary conditions from measured data
ṁair
ṁCO2
p̄CO2
TCO2in
hCO2in
[kg/s]
[kg/s] [bar]
[K]
[kJ/kg]
0,21
0,032
49,1
286,7
295,3
0,21
0,036
40,3
278,7
281,3
0,21
0,013
34,6
272,9
222,1
Measured data
Simulation
Q̇air hCO2out Tairout
hCO2out Tairout
[kJ/kg]
[K]
[kW] [kJ/kg]
[K]
372,8
289,85 -2,48
374,8
289,6
357,4
281,95 -2,74
357,4
282,0
378,2
277,65 -2,03
380,3
275,6

Modelica 2002, March 18−19, 2002

Tairin
[K]
301,6
294,7
285,2
Q̇CO2
[kW]
2,54
2,75
2,04

The interpolation function is implemented by using
the tanh- and the tan-function as follows:

function Stepsmoother
//Interpolationsfunction to avoid event iterations
input Real func;
//value, where function value becomes 100%
input Real nofunc;
//value, where function value becomes 0%
input Real x;
//Variable generating the event
output Real result;
protected
Real m;
Real b;
algorithm
m := Pi/(func - nofunc);

145 − 6

The Modelica Association

Pfafferott T., Schmitz G.

Modeling and Simulation of Refrigeration Systems with the Natural ...

b := -Pi/2 - m*nofunc;
result := (tanh(tan(m*x + b)) + 1)/2;
end Stepsmoother;

0.09

0.08
laminar

0.07

ξ

0.06

0.05

0.04
turbulent

0.03

0.02

0.01

3

4

10

10
Rekrit=2300

5

10

Re

Figure 11: Object diagram of simulated CO2 -Cycle
Figure 10: Example for the unsteady transition of the
pressure drop coefﬁcient (solid line) and the implemented interpolation function (dashed line)
Table 3: Boundary conditions and initial values of the
simulation run

5

Simulation results of a CO2 -System

In the following simulation results of the start up of a
CO2 -System are presented. The results are discussed
with respect to plausibility since reliable data of transient processes from a test rig are only available for a
few weeks. The simulated model is shown in object diagram in ﬁgure 11. This conﬁguration does not consits
a receiver since the receiver model is not implemented
in the right way, see subsection 3.1.
In table 3 the boundary conditions and initial values
are listed. The following boundary conditions are
changed during the simulation run:
¯ Start up of compressor speed n
rpm in 2 seconds;

 Variation

 120  1000



of ﬂow coefﬁcient Kv  003
002m3 h in 0,1 seconds starting at 60 seconds
simulation time.

5.1

Results

In ﬁgure 12 the pressure at compressor inlet and outlet is plotted versus time. What can be seen from
the results is the divergent run of the pressures and a
typicall overshoot, resp. undershoot at the beginning.

The Modelica Association

Compressor
Gas cooler
Evaporator
System volume
Refrigerant ﬁlling
Initial value

λ  075, ηis  075
ṁair  3200 kg/h, Tair in  305 K
ṁair  580 kg/h, Tair in  305 K
Vtot  113 l
200 kg/m3
p0  66 bar, h0  420 kJ/kg




This system behaviour is plausible as well as the divergent run of pressure after changing the ﬂow coefﬁcient of the valve. This can be made clear by looking
at the mass ﬂow rates at the compressor and the expansion valve in ﬁgure 13. At the beginning the compressor mass ﬂow rate is much higher than the mass
ﬂow at the valve. The compressor mass ﬂow increases
proportional with the compressor speed, whereas the
ﬂow rate at the valve just increases with the increasing
pressure difference at the valve. The difference between both mass ﬂows effects a shifting of refrigerant
mass from the low pressure section to the high pressure section of the system. The decreasing density of
the sucked refrigerant at the compressor causes in the
strong decreasing of the compressor mass ﬂow after 2
seconds. The valve mass ﬂow rate is mostly affected
by the pressure difference, so the mass ﬂow does not
decrease; the system time delay causes a higher valve

145 − 7

Modelica 2002, March 18−19, 2002

Modeling and Simulation of Refrigeration Systems with the Natural ...

ﬂow rate for a few seconds resulting in the shown overand undershooting of pressures. The same effect of
displaced mass explains the divergent run of the pressures after changing the ﬂow coefﬁcient.
90

80
Compressor In
Compressor Out

Pfafferott T., Schmitz G.

ﬂow rate. Starting a simulation with a mass ﬂow rate
of zero and equal pressure in every object increases the
executing time extremely or generates a termination of
simulation.
Nevertheless, the simulation results show that Modelica, the free Modelica library ThermoFluid and the
CO2 -Library are very well qualiﬁed for the simulation
of the complex processes in a CO2 -Refrigeration cycle.

Pressure in bar

70

60

6 Conclusion

50

A developed CO2 -Library based on free Modelica
library ThermoFluid was presented, which contains
models for all important components of a CO2 Refrigeration system. The intention is to create a
library for the simulation of single components and
complete cycles. Such a library can be used to get
a better understanding of the thermodynamic, ﬂuidmechanic and heat transfer effects in a CO2 -System.
Furthermore, it can be used for the optimization of
speciﬁc heat exchangers, for the evaluating of optimal
system conﬁguration and for the layout and optimization of the system control.
The presented simulation results for the steady state
of two different types of CO2 -Heat exchangers show
a very correspondence with measured datas. The results of transient simulation show a plausible system
behaviour due to the thermodynamic and hydraulic effects. Up to now a validation with transient measured
datas was not possible since an available CO2 -Test rig
operates just for a few weeks.
Future work contains the validation of the models and
the improvement of the initialization due to new features in Modelica. If the models are veriﬁed the control of the system will implemented.

40

30
0

20

40

60
Time in s

80

100

120

Figure 12: Pressure run at compressor in- and outlet

0.06
Compressor
Valve
Mass flow in kg/s

0.05

0.04

0.03

0.02

0.01
0

20

40

60
Time in s

80

100

120

Figure 13: Mass ﬂow rate at valve and compressor

6.1 Acknowledgement
This model contains about 2600 nontrivial scalar equations. The simulating of the start up and the changing of ﬂow coefﬁcient was performed on a PC with
a Pentium 1000 MHz and 256 MB of main memory
and took 5 minutes. The length of time of simulation
is very sensitive due to the initial values. To realize a
simulation of 5 minutes for this model you have to provide very suitable initial values; furthermore up to now
the initialization in the two phase region needs wide
experience. To get suitable initial values for the gas
region we are using matlabTM based script to predict
the steady state pressure drop for the initalized mass

Modelica 2002, March 18−19, 2002

This work is carried out in a research project ﬁnanced
by EADS Airbus in Hamburg, Germany.
The presented results and efforts would not have been
possible without the help and the work of some people
apart from the authors. We would like to thank Hubertus Tummescheit for providing ThermoFluid and the
given support. Thanks to Stefan Wischusen, Guido
Ströhlein, Till Gundlach, Torsten Meyer and Jörg Eiden for the implementation of various models in master thesis and project works. Thanks to Dirk Limperich
for providing a lot of parameters of CO2 -Components,
for the support of the implementation of CO2 -Medium

145 − 8

The Modelica Association

Pfafferott T., Schmitz G.

Modeling and Simulation of Refrigeration Systems with the Natural ...

model, for the testing of several models and for con- [11] N.N.: VDI-Wärmeatlas - Berechnungsblätter
structive discussions and several ideas. Thanks to
für den Wärmeübergang VDI-Verlag, 7. Edition,
Oliver Schade for providing ﬁrst data from his CO2 Düsseldorf 1994 (in german)
Experimental system.
[12] Pettersen, J., Rieberer, R., Munkejord, S.T.:
Heat transfer and pressure drop for ﬂow of superReferences
critical and subcritical CO2 in microchannel tubes
Technical Report A5127, SINTEF Energy Re[1] DIN EN 60534-2-1:
search, Trondheim 2000
Stellventile für die Prozeßregelung Teil 2-1: Durchﬂußkapazität und Bemessungsgleichungen für Flu- [13] Pfafferott, T, Schmitz, G.:
Numeric Simulation of an integrated CO2 Cooling
ide unter Einbaubedingungen Deutsches Institut für
Proceedings of the Modelica Workshop
System
Normung e.V., Beuth Verlag, Berlin, 2000 (in ger2000, Lund, 2000
man)
[14] Tummescheit, H., Eborn, J., Wagner, F.:
[2] Haffner, A., Pettersen, J., et al.:
Development of a Modelica Base Library for ModAn automotive HVAC system with CO2 as refrigeling of Thermo-Hydraulic Systems Proceedings of
erant IIR Conference Natural Working Fluids the Modelica Workshop 2000, Lund, 2000
Preprints, pp. 289-298, Oslo, 1998
[3] Idelchick, I.E.:
Handbook of Hydraulic Resistance CRC Press,
Florida, 1994
[4] Kakac, S. et al.:
Handbook of Single-Phase convective Heat Transfer John Wiley & Sons Inc., New York, 1987
[5] Kauffeld, M., Hesse, U., Pettersen, J.:
Kohlendioxid in der Kälte-, KlimaWärmepumpentechnik Die Kälte- und
matechnik, No. 11, pp. 768-781, 1993

und
Kli-

[6] Lorentzen,G.:
Revival of carbon dioxid as refrigerant Int. Journal
of Refrigeration, Vol. 17, No. 5, 1994
[7] McMullan, J.T.:
Refrigeration and the environment - issues and
strategies for the future Int. Journal of Refrigeration, Vol. 25, No. 1, pp. 89-99, 2002
[8] Patankar, S. V.:
Numerical Heat Transfer and Fluid Flow Hemisphere Publ. Corp., Washington, 1980.
[9] Span, R., Wagner, W.:
A New Equation of State for Carbon Dioxide Covering the Fluid Region from the Triple–Point Temperature to 1100 K at Pressures up to 800 MPa Journal of Physical and Chemical Reference Data, Vol.
25, No. 6, pp. 1509–1596, 1996.
[10] Stephan, K.:
Wärmeübergang beim Kondensieren und beim
Sieden Springer-Verlag, Berlin, 1988 (in german)

The Modelica Association

145 − 9

Modelica 2002, March 18−19, 2002

Modelica 2002, March 18−19, 2002

145 − 10

The Modelica Association

Felgner F., Agustina S., Cladera Bohigas R., Merz R., Litz L.

Simulation of Thermal Building Behaviour ...

Simulation of Thermal Building Behaviour in Modelica
F. Felgner, S. Agustina, R. Cladera Bohigas, R. Merz, L. Litz (felgner@eit.uni-kl.de)
Fachbereich Elektrotechnik und Informationstechnik, Universität Kaiserslautern,
Erwin-Schrödinger-Straße, D 67663 Kaiserslautern,
March 2002

1. Abstract
During the past decades heating and air conditioning
systems were usually designed and consequently
oversized according to simplified, mostly static calculating procedures. The increase in primary energy
costs, rising cost pressure felt by private and public
clients as well as increased demands on comfort
forced engineers to change the customary procedure.
Thus the dynamic simulation of building and system
behaviour plays an increasingly important role in
planning and dimensioning heating and air conditioning systems. This change is supported by the
growing performance of personal computers in use.
This means that calculating methods which used to be
too expensive and time-consuming became practicable and could even be improved.
Building and system simulation aims at emulating the
thermal and energetic behaviour of an existing or a
fictitious building and of its HVAC system as well as
their interaction. For this purpose the external influences through the outdoor climate, user behaviour
and internal loads are to be taken into account. The
comprehensive building design requires the adequate
description of real processes within a broad spectrum
of mathematical, physical and engineering disciplines. The model of just an uncomplicated heating
system includes various components from thermodynamics, fluid dynamics, mechanics, electrical and
control engineering.
It is true there is a great variety of simulation tools mostly conceived for architects and building engineers - varying according to the methods they use, the
effects they consider as well as to their objectives.
Such simulation tools pretend to offer a high transparency and flexibility through their menu-guided
modelling but can often not be completely overlooked by the user as to their numeric methods, the
effects considered and approximations applied. Operations going beyond what is provided by the menu
are either not possible or can only be realized at great
expense.
Therefore we intended to take another way. Using an
open simulation system, which provides the mathematical formalism, the model specification is done by
the description of basic physical laws describing the

The Modelica Association

147

relevant properties [Fel-01], [Mer-01], [Sit-01]. An
object-oriented, non calculation-causal simulation
language like Modelica offers perfect conditions for
this concept.
In the context of our work a model library for the
simulation of thermal building behaviour has been
developed in Modelica. Due to the interdisciplinary
character of building simulation this domain is an
ideal application of Dymola/Modelica. We used Dymola 4.1a from Dynasim (http://www.dynasim.se).
The new model library is divided into four sublibraries:
•
•
•
•

Building
Weather
Heating
controller

(chapter 2),
(chapter 3),
(chapter 4),
(chapter 5).

The building models have been validated in exemplary configurations with the building simulation
system TRNSYS [Trn-02], [Kle-00], [Kie-01].
In the following chapters the most interesting components or those sublibraries will be presented.

2.1 Basic Building Elements
The characteristic thermal behaviour of a building
structure is determined by the storage and the conduction of heat within walls, ceilings, floors and the
air inside and outside the building as well as the heat
transmission between those components [VDI-01].
The processes of heat storage and transmission are
described by basic building elements, which are the
primary components of a thermal building model.
Heat storing elements (fig. 2.1a, b) correspond to
electrical capacitors, where electrical current is replaced by heat flow j and the place of the electrical
potential is taken by the temperature T:

m ⋅ c ⋅ T& = j

(2.1)

(m: mass of heat storing body, c: specific heat capacity).

Modelica 2002, March 18−19, 2002

Simulation of Thermal Building Behaviour ...

Felgner F., Agustina S., Cladera Bohigas R., Merz R., Litz L.

j1→2 = σ ⋅ ε1 ⋅ ε 2 ⋅ A ⋅ (T14 − T24 ) .
{

(2.5)

=1

Those components will be used for the so-called twostar room model (see ch. 2.2).

b air

a stone

Fig. 2.1: Heat storing components of a building
Heat conducting elements (fig. 2.2) correspond to
electrical conductors:

j1→ 2 =

λ⋅A
λ⋅A
(T1 − T2 ) (2.2)
∆T =
x2 − x1
d
123
conductanc e G

(λ: heat conductivity, A:
area perpendicular to heat
flow j, d: distance between
two heat storing elements
with the temperatures T1 and
T2).

Convection takes place
between the air and walls,
floors and ceilings inside
the building as well as
outside.

Fig. 2.2: Heat
conductor

2.2 Composed Building Model Classes
(walls, windows, doors, rooms)

(2.3)

The basic building elements presented in ch. 2.1 serve
to compose models of more complex parts of a
building. As a first instance the model of a wall be
considered:
Within solid matter heat transport is provided by
conduction. This means that in case of onedimensional heat flow in x-direction the temperature
T (x) is given by the well-known partial differential
equation

ρ ⋅c⋅

Radiation – the third way of heat transfer – plays an
important role, too, especially as far as solar radiation, the emission from radiators and the heat exchange between walls are concerned. The
r
power Prad = j rad = j rad , emitted from a surface with

∂T
∂ 2T
=λ⋅ 2 ,
∂t
∂x

(2.6)

which cannot be implemented directly in Modelica as
there is only one independent variable (time) provided. But the derivation in x can be approximated by
discretizing the coordinate x into xi (i = 1, 2, 3, ...)
with ∆x := xi − xi−1 = const. ∀ i:

the temperature T, is given by Stefan-Boltzmann’s
Law,
(2.4)

(σ : Stefan Boltzmann constant, ε : emission coefficient of surface),

∂ 2T T ( x i +1 ) − 2T ( x i ) + T ( x i −1 ) Ti +1 − 2Ti + Ti −1
≈
:=
∂x 2
(∆x ) 2
( ∆x ) 2
Thus the equation (2.6) can be approximated by

which is implemented in a model class (fig. 2.4) describing the exchange of radiation between a surfaces A
with the temperature T1 (e.g.
the surface of a wall) and a
fictive black body with the
Fig. 2.4: Radiation
same surface and the temto a black body
perature T2:

Modelica 2002, March 18−19, 2002

b perpendicular
surfaces

into account the surfaces’ dimensions and relative
site.

Fig. 2.3: Convection
with constant α

j rad = σ ⋅ ε ⋅ A ⋅ T 4

a parallel
surfaces

Fig. 2.5: Radiation between two surfaces

Convection (fig. 2.3) is described with the same
mathematical structure if the convective heat transfer
coefficient α is supposed to be a constant:

j1→2 = α ⋅ A ⋅ (T1 − T2 ) .

The library also contains components simulating the
radiation between two parallel or two perpendicular
surfaces (fig. 2.5a, b). For this purpose the equation
(2.5) has to modified by an additional factor taking

148

(2.7)

Ti +1 − 2Ti + Ti −1
⇔
( ∆x ) 2
λA
(Ti −1 − Ti ) − λA (Ti − Ti +1 ) .
c ⋅ ρ A ∆ x ⋅ T& =
123
∆x
∆x
{
{
m

cρT& = λ

G

G

(2.6’)
Using the components for heat storage and conductance introduced in ch. 2.1 the equation (2.6’) can

The Modelica Association

Felgner F., Agustina S., Cladera Bohigas R., Merz R., Litz L.

Simulation of Thermal Building Behaviour ...

be implemented by the Modelica model in fig. 2.6,
which is a simple thermal model of a wall with mass
m, specific heat capacity c, surface A and thickness
2∆x.

Ti −1

Ti

A

Ti +1
G

G

∆x

G
C = mc

F

∆x

E

Fig. 2.6: Model of conduction within a wall
A more precise model of a wall is achieved by dividing the wall into several layers – at least two – and
adding the convection model from fig. 2.4:

“halfwall”

“halfwall”

=

faces to the air via convective junction components
(fig. 2.3). Fig. 2.8 shows the two-star model of a
room with four walls (plus floor and ceiling). Only
one half of each wall is represented in the model of a
room, the second half is part of a neighbouring room.

Fig. 2.7: Two-layer model of a wall (or floor / ceiling)
with convective heat transmission to air
The model in fig. 2.7 is of course suitable for floors
and ceilings, too.
Before constructing the thermal model of a room the
radiative heat transmission between its walls, floor,
ceiling and other radiating surfaces (e.g. radiator
surface) shall be considered first. Using the models
from fig. 2.5 would lead to a complicated network of
connections between each surface and all the others.
A room of a simple rectangular geometry would demand three instances of the parallel surfaces model
(fig. 2.5a) and 12 instances of the perpendicular surfaces model (fig. 2.5b). A non-rectangular room geometry and the radiation from a radiator surface
would demand very special additional model classes
which are much more complex or even do not exist in
a parameterised form, respectively.
For this reason the building library presented here
makes use of a certain approximation – the so-called
two-star model (see for example [Fei94]). In this
model all radiating surfaces are connected to a fictive
massless black body, which has an infinite heat conductivity and fills in the whole volume of the room.
In the model diagram this body is simply a nodal
point. Each long wave radiation emitting surface is
connected to that nodal point via a radiation junction
component from fig. 2.4 (ch. 2.1). A second nodal
point provides the convective connection of the sur-

The Modelica Association

D
C B
Fig. 2.8: Two-star model of room with four walls.
External cuts: 1 – 6 walls, floor, ceiling;
A radiation from external model (radiator);
B signal for air exchange through window;
C signal for internal gains;
D Radiation to sky through window;
E convection on the outside of the window;
F convection from or to external model;
G connection to solar radiation model.

149

Additionally models for internal gains (with a light
bulb in the icon) as well as the model of a window
(fig. 2.8) describing air exchange and heat transmission by conduction, convection and radiation. There
is a special cut in the window model and in the room
model (“G” in fig. 2.8) providing a connection between the window and a model from the solar radiation library (see ch. 4). A radiator (as an external
model) can be connected to the room via two cuts:
Cut “A” provides the connection to the radiation
nodal point, cut “F” transmits convective heat transport from the radiator to the air.

=

Fig. 2.9: Model of a window with controlled air exchange and heat transmission by conduction,
convection and radiation (including solar
radiation)

Modelica 2002, March 18−19, 2002

Simulation of Thermal Building Behaviour ...

Felgner F., Agustina S., Cladera Bohigas R., Merz R., Litz L.

3. Solar Radiation Models
3.1 Introduction
Comprehensive modelling of thermal building dynamics requires considering the influence of nature.
In order to simulate the impact solar radiation has on
energy consumption and controller behaviour in a
realistic manner a highly refined solar radiation library has been developed. With its models it is possible to calculate the solar radiation on a tilted surface
at any location [Duf-74]. The models are very userfriendly since simulation periods can be defined by
entering date and local clock time. Moreover, real
weather data can be integrated in the simulation
model by reading external ASCII files and interpolating the data in different ways. The models reproduce the broad spectrum offered by modern building
simulation tools (e.g. TRNSYS [Trn-02], [Kle-00],
[Spr-01]).

3.2 The Models
The solar radiation models contain a large number of
algorithms, which cannot be explained within the
limitations of this article.
In the following a brief
overview of some important components will be
described.
The encapsulated model
in fig. 3.1 calculates the
solar radiation on surfaces
of any orientation. Two
versions of that model
will be presented now:

Fig. 3.1: calculation of
solar radiation on tilted
surfaces

The diagram layer of version I is shown in fig. 3.2
(without the cuts on the highest hierarchy level).
There are eight important components performing the
calculation:
(1) distributes the information about location (longitude and latitude) and time zone to all components
that need this data.

(2) calculates the time variables that are needed in
addition to the (physical) simulation time: solar time
and standard meridian time. (Switching to daylight
time is possible, too.)
(3) produces the declination angle.
(4) calculates the position of the sun determined by
zenith angle and azimuth angle.
(5) calculates the solar radiation on an extraterrestrial horizontal surface.
(6) determines the atmospheric attenuated solar
radiation. For this a so-called clearness index kT is
used. The calculation with a constant kT is an approximation, which should be used only for clear
days. (And even in that case kT is not exactly constant.) In a further model (version II) this component
is replaced by importing real or fictive weather data
from an external file.
(7) divides the total radiation on a horizontal terrestrial surface into beam radiation and diffuse radiation.
(8) transforms the results of component (7) into total
radiation on a tilted surface.
In version II (fig. 3.3) the disadvantage of component
6 (only suitable for clear days) has been removed by
importing radiation data from an external file. The
radiation data may be based on measurements of a
weather station or a typical climatic conditions of the
location. The radiation data (total radiation on a horizontal surface) is imported by a new ASCII table
reader (component 6A). Table readers from the
Modelica standard libraries could not be used for they
perform a linear interpolation using a C function. The
new table reader makes use of a special C function
without linear interpolation. As tables contain sampled values – official weather data for a German test
reference year are available at hourly intervals (DIN
4710) – a linear interpolation would produce big
mistakes during the hours of sunrise and sunset. To
avoid such mistakes the table data has to be read in

1

2

4

5

6

7

8

3
Fig. 3.2: Aggregation pattern of solar radiation model (Version I)

Modelica 2002, March 18−19, 2002

150

The Modelica Association

Felgner F., Agustina S., Cladera Bohigas R., Merz R., Litz L.

Simulation of Thermal Building Behaviour ...

1

2
4

5

6B

7

8

3
6A
Fig. 3.3: Aggregation pattern of solar radiation model with table reader and interpolator (Version II)
advance. In this way sunrise and sunset are detected
in time. Afterwards an appropriate interpolation is
performed (component 6B). The library offers a selection of different interpolation methods.

m& =

ρπD 4
( p1 − p 2 )
128ηL

(4.1)

& : mass flow rate, D: diameter, L: length of
(m
pipe, η: dynamic viscosity, p1 − p2 : pressure
drop).

4. Models of Heating Systems
4.1 Introduction
The heating library allows composing models of
electrical heating systems as well as hot-water heating systems. In view of physical modelling hot-water
heating systems (HWH) are more interesting than the
electrical ones, which produce almost immediately a
certain heat flow prescribed by the controller. Yet the
dynamics of an HWH is determined by transient
processes caused by the thermal inertia of various
components. Those are the water, the pipes, the radiators and – especially in case of floor heating systems – the stone of the floor. In addition slow transport of water through long pipe systems in large
buildings bring about dead time. All those characteristics complicate controlling an HWH for its delayed
reactions may have a negative influence on stability.
In the following chapter a dynamic pipe model will
be presented.

4.2 Pipes and Radiators
A universal model of a water pipe must combine
mechanical and thermal aspects of flowing water.
Both aspects are interdependent: The temperature
profile depends on the mass flow rate, whereas the
mass flow rate is influenced by the viscosity, which is
rather strongly depending on temperature. The impact
viscosity has on a pipe’s flow resistance is determined by the form of flow.

If the Reynolds Number Re = ρvD/η is greater than
Recrit. ≈ 2300 the flow becomes turbulent, and pressure drop is usually approximated by
p1 − p 2 = λ ⋅

L ρv 2
⋅
D 2

(4.2)

(v : average speed, λ : pipe friction coefficient).
If Re < 100 000, the factor λ is given by

λ=

0.3164
4
Re

(formula of Blasius). (4.3)

In the pipe model developed here λ is approximated
by pieces of straight lines – as well as the viscosity
η(T).
The thermal dynamic of a fluid within a cylindrical
pipe can be described by the partial differential equation (PDG)
2

D  ∂T 
 ∂T 
− cm& ⋅ 
 − cρπ

 = α ⋅ πD ⋅ (T − Twall )
4  ∂t  x 1442443
 ∂x  t
mitted by convection
142
4 43
4 144
42444
3 heattotrans
pipe wall (per meter)
steady release of
heat (per meter)

unsteady release of
heat (per meter)

(4.4)
(c: specific heat capacity of water, ρ: density of
water, α: convective heat transfer coefficient),

In case of steady laminar flow Hagen-Poiseuille’s
Law is valid for cylindrical pipes:

The Modelica Association

151

Modelica 2002, March 18−19, 2002

Simulation of Thermal Building Behaviour ...

Felgner F., Agustina S., Cladera Bohigas R., Merz R., Litz L.

where heat conduction in x-direction within the water
has been neglected. To solve this problem the PDG
has to be transformed to a system of ordinary differential equations by a discrete coordinate x: A long
pipe is composed out of short pipe elements, each of
the length L := ∆x:
− cm& ⋅

hysteresis between 90°C and 95°C. The results of the
DYMOLA simulation are shown in diagram 4.1.

Tout − Tin
D 2 dTout
− cρπ
= α ⋅ πD ⋅ (Tout − Twall ).
L
4 dt
(4.4’)

As an approximation of α one might take for instance
Schack’s formula [Rec-97]:
T  v 

α = 3370 ⋅ 1 + 0.014 out 

°C  m/s 


0.85

W
m2 K

(4.5)

T / °C
100

Pipe.In.T

Pipe.Out.T

T(0 m)
T(5 m)
T(10 m)
T(15 m)
T(20 m)

80

(D = 15 ... 100 mm).

60

That formula is, however, not suitable for v = 0 as
water being at standstill would release no heat at all
in such a model.
The equations (4.1) to
(4.5) are implemented in
model class describing a
cylindrical water element
(of Length L) flowing
Fig. 4.1: Water element
through a pipe (fig. 4.1).
within a pipe
The cut variables are
pressure, temperature and mass flow rate (blue cuts)
or temperature and heat flow rate (red cut), respectively.
A model describing the
conductance and storage of
heat within the pipe’s wall
and heat insulation material is composed out of
heat capacitors and cylindrical special heat conductors (fig. 4.2).

Fig. 4.4: Circuit with long pipe, boiler and pump

40
20
0
0

1000

2000

3000 t / s

Diagram 4.1: Results of DYMOLA simulation of
model in fig. 4.4: water temperatures
at different positions in the pipe

=
Fig. 4.2: Pipe wall and
insulation

Fig. 4.5: Hot-water radiator

With the help of a for-loop a series connection of n
water elements, each connected to a wall and insulation component, is generated. The complete pipe
model (fig. 4.3) can be
connected to a temperature source or another
(big) heat capacitor (e.g.
a wall or a floor in
which the pipe is emFig. 4.3: Long water pipe
bedded), which absorbs
with insulation
steady heat loss.
Fig. 4.4 shows a circuit with a 20 m-pipe (consisting
of 20 pipe elements, i.e. n = 20), a pump producing a
constant pressure and a boiler switched on at t = 600s.
At t = 0 all components have the temperature T0 =
10°C. The boiler has a two-state controller with a

Modelica 2002, March 18−19, 2002

152

By analogy with the pipe model a radiator model can
be designed by leaving out the heat insulation (fig.
4.5). The radiator can be connected to the two-star
room presented in ch. 2 via two cuts: one cut for
convective heat transmission to air and another cut
for a connection to the room’s radiation nodal point.

5.1 Standard Controllers
The first part of the controller library contains several
components simulating standard control algorithms.
Some components, however, have extended functions. There are two sublibraries, one with continuous
and one with discrete controllers.

The Modelica Association

Felgner F., Agustina S., Cladera Bohigas R., Merz R., Litz L.

The continuous controller sublibrary contains PI and
PID controllers with an anti-wind-up reset function
and a pulse width modulator.
The discrete controller sublibrary contains special PI
and PI controllers emulating the signal processing of
digital controllers. In this way the influence of important quantities such as the number of bits or the
sampling period can be included in the simulation.

5.2 Fuzzy Control
The Heating, air-conditioning and ventilation of a
building requires the control of many interdependent
quantities belonging to rather complex physical processes. Therefore, Fuzzy Control is an appropriate
alternative to standard control strategies. With the
new Modelica Fuzzy Control library to design a
Fuzzy Controller and to test different rule bases,
e

Fuzzification

Aggregation

input
blocks

rule
block(s)

Implication

Accumulation

Defuzzification

Simulation of Thermal Building Behaviour ...

The fuzzy sets for each input variable and each output
variable are defined by choosing an input or output
block, respectively, and entering the blip abscissas of
the predefined membership functions (fig. 5.2). Currently there are input and output blocks with three or
five membership functions. The linguistic values
have predefined names.
As fuzzy implication, accumulation and defuzzification are performed in the output block of each linguistic output variable, the library contains different
output blocks according to the methods used for implication, accumulation and defuzzification and according to the number of fuzzy sets.
Two different versions of the FC library have been
developed so far. In the first place the two version
vary in the way the rules are formulated. Fig. 5.3
shows the Modelica diagram layer of an FC accord-

u

output
blocks

Fig. 5.1: The five steps of FC processing and their
assignment to input, output and rule blocks
methods etc. on a Modelica model.
The Fuzzy Control library has a modular structure. A
Modelica Fuzzy Controller (FC) has to be composed
by the user out of special blocks for the linguistic
input and output variables and for the rules. Due to
1

msmall

mmed ium

emin e1 e3 e2 e4 e7 e5 e6

mb ig

e8

( umin u1 u3 u2 u4 u7 u5 u6 u8

emax
umax

ing to Version I of the library. The methods of implication, accumulation and defuzzification are
sum/product/centre of gravity. The diagram is similar
to a circuit diagram of Boolean logic: There is a rule
block for each rule that has to be connected to the
input and output blocks. This means that the rules are
visualised by the connections the user must draw.
There are various types of rule blocks in the library
according to the numbers of input values and output
values appearing in a rule. Each input value can be
negated by entering a certain parameter into the rule
block concerned.

e
u)

parameters

Fig. 5.2: Predefined fuzzy sets for input or output
variable (e / u) with parameters of corresponding input or output block
the large variety of settings defining an FC (numbers
of inputs and outputs, fuzzy sets, rules, methods of
inference and defuzzification) a modular structure
supports the clarity of the FC model. Fig. 5.1 shows
the assignment of the FC-processing steps to instances of different model classes: input blocks, output blocks and rule blocks.

The Modelica Association

Fig. 5.3: FC according to Version I with the rules:
1. If In_1 small, then Out_1 medium.
2. If In_1 big and In_2 small, then
Out_2 very small.
3. If In_1 big and In_2 not big, then
Out_1 big and Out_2 very big.

153

Fig. 5.4 is the diagram layer of the same FC composed in Version II: In this case, only one central rule
block is needed. The rules are entered into its parameter table as text using a special syntax. The rule
block is prepared for up to ten input variables, five
output variables and fifty rules. It interprets the aggregation by comparing the components of each rule
vector with the predefined linguistic values “vsmall”,
“small”, “medium”, “big”, “vbig” and “nvsmall”,

Modelica 2002, March 18−19, 2002

Simulation of Thermal Building Behaviour ...

Felgner F., Agustina S., Cladera Bohigas R., Merz R., Litz L.

“nsmall”, “nmedium”, “nbig”, “nvbig” (v = “very”,
n = “not”, output values in capital letters for better
readability).

input
values

output
values

[Mer-01b]
Merz R., Litz, L.: Objektorientierte mathematische
Modellbildung zur Simulation thermischen Gebäudeverhaltens, ASIM 2001, 15.Sym. Sim.tech. Paderborn
2001
[Rec-97]
Recknagel, Sprenger, Schramek: Taschenbuch für
Heizungs- und Klimatechnik. 68.Auflage. Oldenbourg Verlag. München, Wien, 1997.
[Sit-01]
Sitompul E., Merz R.: Anwendung objektorientierter
Entwurfsmethoden zur generischen Entwicklung von
Regelungsalgorithmen in der Anwendungsdomäne
Gebäudeautomation ASIM 2001, 15.Sym. Sim.tech.
Paderborn 2001
[Spr-01]
Sprengard C. Merz R.: Simulation des energetischen
und thermischen Verhaltens eines Niedrigenergiehauses mit dem Gebäudesimulationsprogramm TRNSYS
ASIM 2001, 15.Sym. Sim.tech. Paderborn 2001
[Trn-02]
TRNSYS, www.transsolar.de, Homepage der Fa.
Transsolar Energietechnik GmbH. Stuttgart 2001
[VDI-01]
VDI Richtlinie 6020: Anforderung an Rechenverfahren zur Gebäude- und Anlagensimulation, VDI, Düsseldorf, Beuth Verlag GmbH, Berlin (2001)

Fig. 5.4: FC in Version II
(corresponding to FC in fig. 5.3)

6. References
[Duf-74]
Duffie J.A., Beckman W.A.: Solar Energy thermal
process, Wiley, New York (1974)
[Fei-94]
Feist W.: Thermische Gebäudesimulation Kritische
Prüfung unterschiedlicher Modellansätze, Verlag C.F.
Müller, Heidelberg (1994) pp.135
[Fel-01]
Felgner F.; Merz R.: Thermohydraulische Simulationsmodelle für Heizungsanlagen ASIM 2001,
15.Sym. Sim.tech. Paderborn 2001
[Kie-01]
Kienzlen K. und da Silva P.: Das Haus im Entwicklungslabor, TAB (Technik am Bau), Bertelsmann
Fachzeitschriften GmbH, Gütersloh, 10 (2001) p. 3539
[Kle-00]
Klein, S.A., Duffie, J.A., Mitchell, J.C., Kummer,
J.P., Thornton, J.W., Beckman W.A., Duffie, N.A.,
Braun J.E., Urban, R.R., Blair, N.J., Mitchell, J.W.,
Freeman T.L., Evans B.L., Fiksel A.: TRNSYS, a
transient system simulation program, Solar Energy
Laboratory University of Wisconsin, Madison 1996

Modelica 2002, March 18−19, 2002

154

The Modelica Association

Session 7

Poster session

The Modelica Association

155

Modelica 2002, March 18−19, 2002

Modelica 2002, March 18−19, 2002

156

The Modelica Association

Bunus P., Fritzson P.

Methods for Structural Analysis and Debugging of Modelica Models

Methods for Structural Analysis and Debugging of
Modelica Models
Peter Bunus, Peter Fritzson
PELAB, Programming Environment Laboratory, Department of Computer and Information
Science, Linköping University, SE-581 83, Linköping, Sweden
{petbu,petfr}@ida.liu.se
extremely useful. This could greatly reduce the amount
of time required to get the simulation working.
Our goal is to contribute to the methodology of
algorithmic debugging and automated debugging of
object-oriented equation based modeling languages and
to develop programming environments to support it.
Although, what we present in this paper applies to the
whole area of equation based debugging, our primary
target is debugging of Modelica models and more
specifically static analysis techniques for diagnosability
of physical system models specified with Modelica.
The simulation models presented in this paper are
so trivial as to be almost beneath consideration, but they
serves as a straightforward vehicle for the introduction
of several fundamental debugging concepts with the
purpose of illustrating concepts of structural analysis.
These models are extremely useful from that point of
view because they keep the associated structural graphs
to a minimum size and complexity, but in the meantime
exposing interesting structural and debugging problems.
This paper is organized as follows: Section 2
provides graph theoretical preliminaries necessary to
understand the algorithms used in this paper together
with the canonical decomposition algorithm. In Section
3 simple over constrained simulation models are
diagnosed and debugged with the help of graph
decomposition techniques and our algorithmic
debugging approach. Details are briefly presented about
the structures used to annotate the underlying equations
of the simulation model, in order to help the debugger to
eliminate the heuristics when multiple choices are
available to fix an error. In Section 4 the particulars of
debugging an under-constrained systems are given.
Implementation details of the debugger are given in
Section 5. Finally, Section 6 concludes and summarizes
the work.

Abstract
A significant part of the simulation design effort is spent
on detecting deviations from the specifications and
subsequently localizing the source of errors.
Employment of debugging environments that control the
correctness of the developed source code is an
important factor in reducing the time and cost of
software development in classical programming
languages. Currently, few or no tools are available to
assist developers when debugging declarative equation
based modeling languages. To begin to address this
need we have developed an efficient debugging
framework for Modelica and have adapted traditional
debugging techniques and algorithms to it. The
developed algorithms and methods help to statically
detect and repair a broad range of errors without
having to execute the simulation model. Several
simulation models and examples are given in this paper
in order to illustrate the main situations when over and
under-constraining equations can appear in the system.
Error detection and error solving strategies for those
cases are also given.

1

Introduction

Obviously, each simulation problem is associated with a
corresponding mathematical model. In dynamic
continuous simulation the mathematical model is
usually represented by a mixed set of algebraic
equations and ordinary differential equations. A typical
problem which appear in physical system modeling and
simulation is when too many (or few) equations are
specified in the system inevitably leading to an
inconsistent state of the simulation model. In such
situations numerical solvers fail to produce correct
solutions to the underlying system of equations.
For example, a physical system simulation model
specified in a declarative object-oriented equation based
modeling language may consist of several hundreds of
classes resulting in over 100 000 flattened equations. If
one of these equations over-constrains the overall
system it cannot be simulated. It can be easily imagined
that, if a subset of six over-constraining equations can
be provided by a static debugger from where the user
can choose one equation to eliminate, in order to form a
structurally well posed simulation problem, it would be

The Modelica Association

2

Preliminaries

Many practical problems are examples of a model of
interaction between two different types of objects and
can be phrased in terms of problems on bipartite graphs.
The expressiveness of the bipartite graphs in concrete
practical applications has been demonstrated many
times in the literature (Dolan and Aldous [2]), (Asratian
et al. [1]). We will show that the bipartite graph
representations are general enough to efficiently
accommodate several numeric analysis methods in order
to reason about the solvability and unsolvability of the

157

Modelica 2002, March 18−19, 2002

Methods for Structural Analysis and Debugging of Modelica Models

flattened system of equations and implicitly about the
simulation model behavior. Another advantage of using
the bipartite graphs is that it offers an efficient
abstraction necessary for program transformation
visualization when the equation based declarative
specifications are translated to procedural form.
The bipartite graph representation and the
associated decomposition techniques are widely used
internally by compilers when generating the procedural
form from the declarative equation based description of
the simulation model (Elmqvist [4]) (Maffezzoni et. al.
[9]) but none of the existing simulation systems use
them for debugging purposes or expose them visually
for program understanding purposes.

Bunus P., Fritzson P.

over-constraint
eq1

eq4

eq5

eq6

eq7

var1

var2

var3

var4

var5

var6

Input Data: A biparpartite graph
Result: Three subgraphs: well-constrained
constrained
and under-constrained
begin:
– Compute the maximum matching
– Compute the directed graph

Definition 5: A perfect matching P is a matching in a
graph G that covers all its vertices.

– Calculate
end.

var2

eq2

var2

eq2

var2

eq3

var3

eq3

var3

eq3

var3

Figure 1. An example bipartite graph with all the
possible perfect matchings marked by thick lines.
A structural decomposition of a bipartite graph
associated with a simulation model which relies on the
above presented vertex coverings is due to (Dulmage
and Mendelsohn [3]) and canonically decomposes any
maximum matching of a bipartite graph in three distinct
parts: over-constrained, under-constrained, and wellconstrained part.

Modelica 2002, March 18−19, 2002

.

’ by replacing each

the set of all ancestors of sink of the
=

-

-

.

The over-constrained part: the number of equations in
the system is greater than the number of variables. The
additional equations are either redundant or
contradictory and thus yield no solution.
The under-constrained part: the number of variables
in the system is greater than the number of equations. A
possible error fixing strategy would be to initialize some
of the variables in order to obtain a well-constrained
part or add additional equations to the system.
Over and under-constrained situations can coexist
in the same model. In the case of over-constrained
model, the user would like to remove the overconstraining equations in a manner which is consistent
to the original source code specifications, in order to
alleviate the model definition.
The well-constrained part: the number of equations
in the system is equal to the number of variables and
therefore the mathematical system of equations is
structurally sound having a finite number of solutions.
This part can be further decomposed into smaller
solution subsets. A failure in decomposing the wellconstrained part into smaller subsets means that this part
cannot be decomposed and has to be solved as it is. A
failure in numerically solving the well-constrained part
means that no valid solution exists and there is
somewhere a numerical redundancy in the system.

In Figure 1 all the possible perfect matchings of a
simple bipartite graph are presented. It should be noted
that a maximum matching and the perfect matching of a
given bipartite graph is not unique.
eq2

of

directed graph ’.

Definition 6: A path P = {v 0 , v1 , L , v k } in a graph G is
called an alternating path of M if it contains alternating
free and covered edges.

var1

.

directed graph ’.
– Let be U

eq1

, over-

edge in
by two arcs and orienting all other
edges from the equations to the variables.
– Let be
the set of all descendants of sources of the

Definition 4: A vertex v is saturated or covered by a
matching M if some edge of M is incident with v. An
unsaturated vertex is called a free vertex.

var1

var7

Algorithm: Dulmage and Mendelsohn canonical
decomposition

Definition 3: A matching M of a graph G is maximal if
it is not properly contained in any other matching.

eq1

 f (var1 ) = 0

 f (var1 , var2 ) = 0
 f (var1 , var2 ) = 0

 f (var2 , var3 , var4 ) = 0
 f (var , var ) = 0
4
5

 f (var3 , var4 , var5 , var6 ) = 0

 f (var5 , var6 , var7 ) = 0

The canonical decomposition algorithm is given below:

Definition 2: A matching is a set of edges from graph G
where no two edges have a common end vertex.

var1

under-constraint

eq3

Figure 2. Dulmage Mendelsohn’s canonical
decomposition of a bipartite graph.

Definition 1: A bipartite graph is an ordered
triple G = (V1 , V 2 , E ) such that V1 and V 2 are sets,
V1 ∩ V 2 = Ø and E ⊆ {{x , y}; x ∈ V1 , y ∈V 2 } . The
vertices of G are elements of V1 ∪ V 2 . The edges of
G are elements of E .

eq1

well-constraint

eq2

158

The Modelica Association

Bunus P., Fritzson P.

3

Methods for Structural Analysis and Debugging of Modelica Models

In Figure 3 the Modelica source code of a simple
simulation model consisting of a resistor connected in
parallel to a sinusoidal voltage is given. The
intermediate form is also given for explanatory
purposes. The Circuit model is represented as an
aggregation of the Resistor, Source and Ground
model instances, R1, AC and G connected together by
means of physical ports.

Debugging of OverConstrained Models

A typical problem which appears in physical system
modeling and simulation is when too many equations
are specified in the system inevitably leading to an
inconsistent state of the simulation model. In such
situations numerical solvers fail to compute correct

Flat equations
1.
R1.v == -R1.n.v + R1.p.v

connector Pin
Voltage v;
Flow Current i;
end Pin;
model TwoPin
Pin p, n;
Voltage v;
Current i;
equation
v = p.v - n.v; 0 = p.i + n.i; i = p.i
end TwoPin;

2.

0 == R1.n.i + R1.p.i

3.

R1.i == R1.p.i

4.

R1.i*R1.R == R1.v

5.

AC.v == -AC.n.v + AC.p.v

5.

0 == AC.n.i + AC.p.i

7.

AC.i == AC.p.i

8.

AC.v == AC.VA*Sin[2*time*AC.f*AC.PI]

model Resistor
extends TwoPin;
parameter Real R;
equation
R*i == v;
end Resistor;

9.

G.p.v == 0

10.

AC.p.v == R1.p.v

11.

AC.p.i + R1.p.i == 0

12.

R1.n.v == AC.n.v

13.

AC.n.v == G.p.v

model VsourceAC
extends TwoPin;
parameter Real VA=220; parameter Real f=50;
protected constant Real PI=3.141592;
equation
v=VA*(sin(2*PI*f*time));
end VsourceAC;

14.

AC.n.i + G.p.i + R1.n.i == 0

model Ground
Pin p;
equation
p.v == 0
end Ground;
model Circuit
Resistor R1(R=10); VsourceAC AC; Ground G;
equation
connect(AC.p,R1.p); connect(R1.n,AC.n);
connect(AC.n,G.p);
end Circuit;

Flat Variables
1. R1.p.v

2. R1.p.i

3. R1.n.v

4. R1.n.i

5. R1.v

6. R1.i

7. AC.p.v

8. AC.p.i

9. AC.n.v

10. AC.n.i

11. AC.v

12. AC.i

13. G.p.v

14. G.p.i

Flat Parameters
R1.R -> 10
AC.VA -> 220
AC.f -> 50
Flat Constants
AC.PI -> 3.14159

solutions to the underlying system of equations.
Figure 3. Modelica code of a simple electrical circuit and the associated flattened equations
by a matching and the canonical decomposition
algorithm will yield to only one well-constrained
component without any under or over-constraining part.
The well-constrained part can be safely sent to the
numerical solver and the simulation can be successfully
performed if no other numerical redundancies are
present in the system of equations..
Let us now consider the same electrical circuit
where an additional equation (i=23) was intentionally
introduced inside the Resistor component in order to
obtain a generally over-constrained system. The D&M
canonical decomposition will lead to two parts: a wellconstrained part and an over-constrained part (see
Figure 5). Equation “eq11” is a non-saturated vertex of
the equation set so it is a source for the over-constrained
part. Starting from “eq11” which is the non-saturated
vertex, the directed graph can be derived from the
undirected bipartite graph as is illustrated in Figure 6.
by exchanging all the matching edges in bi-directional
edges and orienting all other edges from equations to
variables. An immediate solution of fixing the overconstrained part is to eliminate “eq11” which will lead

During the first stage of the static analysis the
associated bipartite graph of the intermediate flattened
form of the equations is constructed and the maximum
cardinality matching is computed as it is shown in
Figure 4.
eq1

eq2

eq3

eq4

eq5

eq6

eq7

eq8

eq9

eq10

eq11

eq12

eq13

eq14

var1

var2

var3

var4

var5

var6

var7

var8

var9

var10 var11 var12 var13 var14

Figure 4. Associated bipartite graph and the
corresponding perfect matching (thicker lines) to the
simple electrical circuit.
It's worth noting, that in this case, the maximal
matching is also a perfect matching of the associated
bipartite graph. In this case all the vertices are covered

The Modelica Association

159

Modelica 2002, March 18−19, 2002

Methods for Structural Analysis and Debugging of Modelica Models

associated equation of the component need to be
eliminated the value is decremented by 1. If, for
example, during debugging, the equation R1.i *
R1.R == R1.v is diagnosed to be an overconstraining equation and therefore need to be
eliminated, the elimination is not possible because the
model will be invalidated in that way (the No. of
associated eqs. cannot be equal to 0) and therefore other
solutions need to be taken into account.
The flexibility level, in a similar way as it is defined
in (Flannery and Gonzales [5]), allows the ranking of
the relative importance of the constraint in the overall
flattened system of equations
The Connector generated is a Boolean attribute
which tells whether the equation is generated or not by a
connect statement. Usually these equations have a
very low flexibility level.
It is worth nothing that the annotation attributes are
automatically initialized by the static analyzer,
incorporated in the front end of the compiler, by using
several graph representations.
Having the equations annotated, the next step is to
traverse the associated directed graph, shown in Figure
6, to the over-constraining part, obtained from the D&M
decomposition.

to a well-constrained part and therefore the equation
system becomes structurally sound.
"eq1”
"eq2"
"eq3"
"eq4"
"eq5"
"eq6"
"eq7"
"eq8"
"eq9"
"eq10"
"eq11"
"eq12"
"eq13"
"eq14"
"eq15"

R1.v == -R1.n.v + R1.p.v
0 == R1.n.i + R1.p.i
R1.i == R1.p.i
R1.i R1.R == R1.v
R1.i == 23
AC.v == -AC.n.v + AC.p.v
0 == AC.n.i + AC.p.i
AC.i == AC.p.i
AC.v == AC.VA*sin[2*time*AC.f*AC.PI]
G.p.v == 0
AC.p.v == R1.p.v
AC.p.i + R1.p.i == 0
R1.n.v == AC.n.v
AC.n.v == G.p.v
AC.n.i + G.p.i + R1.n.i == 0

"var1"
"var2"
"var3"
"var4"
"var5"
"var6"
"var7"
"var8"
"var9"
"var10"
"var11"
"var12"
"var13"
"var14"

R1.p.v
R1.p.i
R1.n.v
R1.n.i
R1.v
R1.i
AC.p.v
AC.p.i
AC.n.v
AC.n.i
AC.v
AC.i
G.p.v
G.p.i

eq1

var1

eq2

var2

eq4

var3

eq3

var4

eq5

var5

eq7

var8

eq6

var6

eq8

var10

eq9

var7

eq12

var12

eq10

var9

eq15

var14

eq11

var11

eq13

var13

well-constrained part

eq14
over-constrained part

Figure 5. Canonical decomposition of the overconstraining system.
However, examining the equation “eq11” one can note
that the equation is generated by a connect statement
from the Circuit model, and the only way to remove
the equation is to remove the connect(AC.p, R1.p)
statement. But removing the above -mentioned statement
will remove two equations from the flattened model
which is unacceptable.
In order to support an automatic reasoning about
the equations the flattened equations from the
intermediate code are annotated by a structure which
resembles the one presented in Table 1.

eq11
var7

eq1

eq6

var5

var3

var11

eq4

eq13

eq9

var6

AC.v == AC.VA*
sin[2*time*AC.f*AC.PI]
var9

eq5

eq14
var13
eq10
G.p.v == 0

Value
R1.i * R1.R == R1.v

Figure 6. The associated directed graph of the oveconstraining subgraph.

“eq4”
“Ohm’s Law for the resistor
component”
Nr. of associated eq 1
Class Name
“Resistor”
Flexibility Level
3
Connector generated no

One important property of the over-constrained bipartite
graph is that it only contains alternating paths because it
is constructed from perfect matchings and a
supplementary free edge. We can easily obtain all the
maximal matchings in the over-constrained graph by
exchanging matching edges with other edges along an
alternating path. Therefore eliminating any of the
constitutive nodes that represent an equation we can
easily find a corresponding matching of the sub-graph
will yield to a well-constrained subsystem. But
eliminating some of the constitutive nodes that represent
equations will disconnect the sub-graph as it is
illustrated in Figure 7 where eq1 was eliminated. Even
if this situation, when two disconnected graphs are
obtained, are mathematically sound they are not very
common from the modeling point of view and therefore
they are not further considered.

The Class Name tells from which class the equation is
coming. This annotation is extremely useful in exactly
locating the associated class of the equation and
therefore providing concise error messages to the user.
The No. of associated eqs. parameter specify the
number of equations which are specified together with
the annotated equation. In the above example the No. of
associated eqs. is equal to one since there are no
additional equations specified in the Resistor
component. In the case of the TwoPin component the
number of associated equations is equal to 3. If one

Modelica 2002, March 18−19, 2002

var1

R1.i == 23

Table 1. The structure of the annotated equation
Attribute
Equation
Name
Description

Bunus P., Fritzson P.

160

The Modelica Association

Bunus P., Fritzson P.

Methods for Structural Analysis and Debugging of Modelica Models

by all the classes which extends the TwoPin class.
Therefore each instance of the Resistor and
VsourceAC models will contribute to one extra overconstraining equation to the final flattened system of
equations.

eq11
var7
eq6
var5

var3

var11

eq4

eq13

eq9

var6

var9

eq5

eq14

AC

R1

model TwoPin
Pin p,n;
Real v,i;
equation
v=p.v-n.v;
0=p.i+n.i;
i=p.i;
i=10;
end TwoPin

R2

G

R1.i == 23

var13

Figure 8. An electrical circuit with an over-constraining
equation in the TwoPin component.

eq10
G.p.v == 0

During the model translation the corresponding
flattened set of equations from the simulation model is
derived and the associated bipartite graph G is
constructed. The overall flattened model corresponding
to the simple electrical circuit contains three extra over
constraining equations (eq9, eq18, eq7). Therefore three
vertices from the equations sets are not covered by a
matching, as it is illustrated in the derived directed
graph in Figure 9.

Figure 7. Disconnected graph obtained by eliminating
eq1.
In our case the set of equivalent over-constraining
equations is {“eq11”, ”eq13”, ”eq10”, ”eq5”, ”eq9”}
after eliminating those equations which disconnect the
bipartite graph. “eq11” was already analyzed and
therefore can be eliminated from the set. “eq13” is
eliminated too for the same reasons as equation “eq11”.
Analyzing the remaining equations {”eq10”, ”eq5”,
”eq9”} one should note that they have the same
flexibility level and therefore they are candidates for
elimination with an equal chance. But analyzing the
value of the No. of associated eqs. parameter, equation
“eq10” and “eq9” have that attribute equal to one, which
means that they are singular equations defined inside the
model. Eliminating one of these equations will
invalidate the corresponding model, which is probably
not the intention of the modeler.
Examining the annotations corresponding to
equation “eq5” one can see that it can be safely
eliminated because the flexibility level is high and
eliminating the equation will not invalidate the model
since there is another equation defined inside the model.
After choosing the right equation for elimination the
debugger tries to identify the associated class of that
equation based on the Class name parameter defined in
the annotation structure. Having the class name and the
intermediate equation form (R1.i=23) the original
equation can be reconstructed (i=23) indicating
exactly to the user which equation needs to be removed
in order to make the simulation model mathematically
sound. In that case the debugger correctly locates the
faulty equation previously introduced by us in the
simulation model.
We now construct a simple electrical circuit model
(Figure 8) by connecting two resistors in parallel with a
voltage source as is shown in Figure 9. The Modelica
definition of the Ground, VsourceAC and
Resistor component are reused from the previous
examples. The TwoPin class is modified by introducing
an additional over-constraining equation (i=10) in the
model definition. This extra equation will be inherited

The Modelica Association

R1.p.v = R2.p.v

eq18

AC.p.v = R1.p.v

eq17

var7

var1

var13

eq6

eq1

eq11

var11

var5

var17

eq20

eq5

eq15

var9

var6

var3
R1.n.v = R2.n.v

eq9

eq10

R2.i = 10

var12

R2.n.v = AC.n.v

eq8

eq21

var8

var15

eq19

eq22

eq4
R1.i = 10

var2

var14

eq3

eq13

var19
eq16
G.p.v = 0

R1.i = R1.p.i

var18

0

eq14
AC.i = 10

Figure 9. The over-constrained directed graph
While traversing the directed graph, after eliminating all
the equations that disconnect the graph and performing
reasoning based on the equation annotations we found
that the equations eq9 eq14, eq15 need to be eliminated
from the intermediate form which are generated from
the equation i=10 in the TwoPin partial component.
The elimination of eq9, eq14 and, eq15 is safe because
they can be made free vertices by exchanging the
matching edges with non matching edges along the
paths indicated with dashed lines in Figure 9.

161

Modelica 2002, March 18−19, 2002

Methods for Structural Analysis and Debugging of Modelica Models

4

In performing the canonical decomposition algorithm
the associated directed graph to the bipartite graph was
constructed by exchanging all the edges which are part
of the maximal matching by bi-directional edges and
orienting all other edges from equations to variables.
The obtained directed graph is shown in Figure 12:

Debugging of UnderConstrained Models

The issue of under-constrained simulation models
considered in an object-oriented declarative equationbased frameworks, has been discussed in (Ramirez
[10]). The work presented in (Ramirez [10]) is
particularly concerned with the issues involved in the
modeling and solutions of conditional models where the
system of equations in the model is different for each of
the alternatives.
Let us consider the number of equations m from a
model and the number of variables incident in those
equations n. For a typical under-constrained situation
the number of variables is greater than the number of
equations (n>m).

eq1

var1

eq3

var3

eq3


var3  f (var 2 , var 3 , var 4 , var 6 ) = 0

eq4

var4

eq5

var5

 f (var

2

, var 3 ) = 0

 f (var

5

, var

6

)= 0

var6

Figure 10. A simple system of equations with the
associated bipartite graph.
One possible corresponding maximal matching
(represented by thicker edges) to the bipartite graph and
the D&M canonical decomposition is presented below:
eq1

var2

eq3

var3

eq4

var4

eq5

var5

var4

eliminate
var6

var1

eq2

eq5

var6

var5

The variables contained in an under-constrained part
constitutes the eligibility set. In our small example the
elibility set is {var4, var5, var6} which means that any
of these variable can be taken away and the remaining
associated graph will be well constrained.
Variable var6 is not covered by the maximal
matching and therefore is a free vertex. In the directed
graph, it can be seen that these are two alternating paths
to the free vertex var6 (indicated by the dashed arrows
in Figure 12):
{(var 4 , eq4 ), (eq4 , var6 )} and {(var 5 , eq5 ), (eq5 , var 6 )} .
Exchanging the matching edges with normal edges
and the normal edges with matching edges along an
alternating path a new matching can be obtained which
cover the free vertex var6 but will uncover another
vertex from the eligible set. Therefore for an error fixing
strategy all the possible combinations should be taken
into account.
During the first stage of the error fixing process
only those solutions which involve the elimination of a
variable from the eligibility set are taken into account.
We have the following possible solutions illustrated in
Figure 13 .

var1  f (var 1 , var 2 ) = 0

 f (var , var ) = 0
1
2
var2 

eq4

Figure 12. Directed graph associated with the system of
equations.

In the following we are going to illustrate the
possible error fixing solutions for a typical underconstraining situation and the reasoning involved in the
graph transformation system. Let us consider the
following system of equations with the corresponding
bipartite graph presented in Figure 11 and with the
degree of under-constraining Du = 1 .

eq2

var2

eq2

Definition 7: We call the degree of under-constraining
the difference between the number of variables and the
number of equations Du = n − m . In a similar way in
(Ramirez [1]) Du is called the number of degrees of
freedom of the problem.

eq1

Bunus P., Fritzson P.

well-constrained
part

eq4

var4

eq5

var5

eliminate
var4

eq4

var4

eq5

var5

eq4
eq5

var6
under-constrained
part

eliminate
var5

var6

var5
var6

eq4

var4

eq5
var6

Figure 11. Maximum matching
decomposition of the bipartite graph

Modelica 2002, March 18−19, 2002

and

Figure 13. Error fixing solution when one variable is
taken away from the eligibility set.

canonical

162

The Modelica Association

Bunus P., Fritzson P.

Methods for Structural Analysis and Debugging of Modelica Models

helps them to reconstruct missing equations from
simulation models.
Let us again analyze the simple circuit model when
the Resistor component is changed again by
declaring an extra variable (Real s) and introducing
this variable into the Resistor component constitutive
equation.

By removing var6 from the under-constrained sub
system the considered maximum matching becomes a
perfect matching of the associated bipartite graph and
therefore the associated system of equations is
structurally sound. However, by removing var6 the
bipartite graph will be disconnected and an independent
edge (eq5,var5) appears in the system, which is not
connected to the main bipartite graph. This situation is
extremely unusual in physical system modeling and it
means that some variables are computed locally inside a
component without contributing to the general behavior
of the simulated system. As an example the following
Modelica Resistor component integrated in a circuit
model will produce two disconnected sub-graphs.

model Resistor
extends TwoPin;
parameter Real R;
Real s;
equation
R*i=v*s;

end Resistor

model Resistor
extends TwoPin;
parameter Real R;
Real s;
equation
R*i=v;
s=10;
end Resistor

The directed graph obtained from the associated
bipartite graph of the flattened underlying system of
equations and a corresponding maximum cardinality
matching, is given below:
eq1

The variable s and the equation s=10 are redundant in
the system. Therefore the situation when an extra
variable is eliminated and the remaining bipartite graph
is disconnected needs to be further analyzed. In our
case, for example, a solution which involves the
elimination of variable var6 and the presence of an extra
variable var1, var2, var3 or var4 in equation eq5 might
be acceptable.
It should also be noted that multiple error fixing
strategies are possible in the case of an underconstrained subsystem. Another error fixing situation
for the under-constrained systems is to add one extra
equation to the system and link the free variable to the
added equation instead of eliminating the free variable.
This strategy applied for the free variable var6 is
presented in Figure 14.
eq4

var4

eq4

var4

eq5

var5

eq5

var5

var6

eq6

var6

var3

var5

eq10

eq12

eq4
var7

var8

eq3

var12

var10

var2

eq8

eq13

eq2

var14

var4

eq9

eq14

eq6

Under-constrained
part

?

var15

var11

Well-constrained
part

var4

var9
eq7

var5

eq5
?
eq6

var6

eq5

?
eq4

var1

eq11

var6

var13

Figure 14. Error fixing strategy involving adding an
extra equation.

Figure 15. Directed graph corresponding to the underconstrained simple electrical circuit.

This strategy involves two steps: at the first step an
extra equation is added and linked together with the free
variable and then at the second step is checked if other
variables from the system might be present in the
recently added equation. This last step turns out to be
very useful from the users point of view because is

The uncovered variable by the considered maximum
cardinality matching is var15, the eligibility set being:

The Modelica Association

{var15 , var 4 , var 2 , var 6 , var 7 , var11 , var 9 , var13 }

with the corresponding variables:

163

Modelica 2002, March 18−19, 2002

Methods for Structural Analysis and Debugging of Modelica Models

{G.p.i, R.n.i, R.p.i, R.i, R.s, AC.n.i,
AC.p.i, AC.i }

5

Prototype Implementation

A prototype debugger has been built and attached to the
MathModelica simulation environment as a testbed for
evaluating the usability of the above presented graph
decomposition techniques for debugging declarative
equation based languages. MathModelica is an
integrated problem-solving environment (PSE) for full
system modeling and simulation (Fritzson et. al.[6])
(Jirstrand [7]) (Jirstrand et. al.[8]). The environment
integrates Modelica-based modeling and simulation
with graphic design, advanced scripting facilities,
integration of code and documentation, and symbolic
formula manipulation provided via Mathematica
(Wolfram [11]). Import and export of Modelica code
between internal structured and external textual
representation is supported by MathModelica. The
environment extensively supports the principles of
literate programming and integrates most activities
needed in simulation design: modeling, documentation,
symbolic processing, and transformation and formula
manipulation, input and output data visualization.
In order to attach the debugger it was absolutely
necessary to have access to the intermediate form of the
code because the presented algorithm makes use of the
intermediate flat form of the equations. The
implemented debugger was successfully tested on
Modelica models involving several hundreds of
algebraic and differential algebraic equations.
The general architecture of the implemented
debugger is presented in Figure 16. The debugging
algorithm proceeds as follows: based on the original
declarative source code the intermediate representation
is generated. From the intermediate representation the
overall system of equations is extracted and transformed
into bipartite graph form. The associated bipartite graph
is canonically decomposed. Error-fixing strategies are
applied if the decomposition leads to over- or underconstrained components. The debugger will try to solve
the errors automatically without explicit intervention of
the user. If automatic error solving is not possible due
to missing information the user will be consulted
regarding the repair strategy.
When the user is interrogated, all valid options that
will lead to a structurally sound underlying system of
equations are presented. As was mentioned earlier, the
error fixing strategies for over- and under-constrained
subcomponents might involve several stages, especially
for under-constrained situations. Due to the equation
and variable annotations the error messages output by
the debugger are understandable relative to the user
perception of the simulation source code, in our case the
Modelica code.The information output by the debugger
will of course lead to a mathematically sound system of
equations. However, some of the solutions might not be
acceptable from the modeling language point of view or
from the physical system model perspective. The
debugger focuses on those errors whose identification
would not require the solution of the underlying system
of equations.

From the under-constrained subgraph we can derive the
following alternating paths (indicated in Figure 15 by
the dashed arrows) to the uncovered variable:
{(var15 , eq14 ), (eq14 , var 4 ), (var 4 , eq 2 ), (eq2 , var 2 )
(var 2 , eq 3 ), (eq3 , var 6 ), (var 6 , eq4 ), (eq4 , var7 )}
{(var15 , eq14 ), (eq14 , var 4 ), (var 4 , eq 2 ), (eq2 , var 2 )
(var 2 , eq11 ), (eq11 , var 9 ), (var 9 , eq6 ), (eq6 , var11 )}
{(var15 , eq14 ), (eq14 , var 4 ), (var 4 , eq 2 ), (eq2 , var 2 )
(var 2 , eq11 ), (eq11 , var 9 ), (var 9 , eq7 ), (eq7 , var13 )}

By following each alternating path and eliminating the
variables from the eligibility set it can be noticed that
eliminating only the variables
{var15 , var 4 , var7 , var13} will not disconnect the bipartite
graph. Therefore only this reduced set will be further
analyzed at this stage. Based on a similar reasoning as
in the over-constrained situations and on variable
associated annotations, the results is that only var7 can
be safely removed from the Modelica code in order to
obtain a well specified underlying equation system. We
call the set of variables obtained after performing the
reasoning based on annotations the reduced eligibility
set
In the above presented situation the fault was
detected during the first stage of the debugging of
under-constrained equations. But if the user is not
satisfied with the given solution or the reduced
eligibility set is empty, the debugger can enter in the
second stage when possible connections of the adjacent
equations to those variables that disconnect the bipartite
graph are checked. If a possible coupling of a variable
to those equations is found the adjacent disconnecting
variable might be also considered for elimination. The
possible coupling of variables with equations is
performed by a variable reachability analysis based
algorithms applied to the inheritance graph of the
underlying simulation system. The variable reachability
analysis computes the list of variables which can be
inserted into certain equations. The description of the
variable reacheability analysis algorithm is not the
subject of this paper.
A third stage in the debugging process of the
under-constraining equations is when extra equations
need to be added and coupled to the free equation. For
example, in our case, adding an extra equation s=10 in
the Resistor component is a mathematically sound
solution even it might not reflect the modelers intent. In
a similar way extra equations can be added to each
variable from the eligibility set.
The user has the possibility of specifying which
level of debugging he/she would like to perform on the
erroneous model, in that way, filtering out some of error
messages and performing an incremental error fixing on
the modeling source code.

Modelica 2002, March 18−19, 2002

Bunus P., Fritzson P.

164

The Modelica Association

Bunus P., Fritzson P.

Methods for Structural Analysis and Debugging of Modelica Models

Modelica source
code specification

error messages consistent with the user’s perception of
the original source and simulation model. The
implemented debugger helps to statically detect a broad
range of errors without having to execute the simulation
model. Since the simulation system execution is
expensive the implemented debugger helps to greatly
reduce the number of test cases needed to validate a
simulation model.
The merits of the proposed debugging technique
are as follows:
• The user is exposed to the original source code of
the program and is therefore not burdened with
understanding the intermediate code or the
numerical artifacts for solving the underlying
system of equations.
• The user has a greater confidence in the correctness
of the simulation model.
• The error fixing strategies are also prioritized by
the debugger, which benefits the user in choosing
the right error fixing solution.

Graphical model
specification

..................
model Resistor
extends TwoPin;
parameter Real R;
equation
R * i = v;
end Resistor;
..................

Model flattening
..................................................
R1.v == -R1.n.v + R1.p.v
0 == R1.n.i + R1.p.i,
R1.i == R1.p.i,
R1.i R1.R == R1.v
C.v == -C.n.v + C.p.v
0 == C.n.i + C.p.i, C.i == C.p.i,
..................................................

Flatened set of equations
(Constraints store)

Intermediate code
annotating
<R1.v == -R1.n.v + R1.p.v,“eq11”,“ ,2,“TwoPin”,1,no>
“
Annotated flattened
.....
equations
<AC.p.v == R1.pv,“eq11”,“ ,2,“Circuit”,1,yes>
“
.....

Bipartite graph
generation
eq1

eq2

eq3

eq4

eq5

eq6

eq7

Corressponding
bipartite graph
representation
var1

var2

var3

var4

var5 v a r 6

var7

D&M
decomposition
eq1

eq2

over-constraint

eq3
eq1

well-constraint

eq2

eq3

eq4

eq5

var1

var2

var3

var4

under-constraint
eq6

eq6

eq7

var5

var6

eq7

References
var1

var2

var5

var6

var7

over-constrained
subsytem

var7

[1] Asratian A.S.; Denley T. and Häggkvist R. Bipartite
Graphs and their Applications. Cambridge University
Press 1998.

under-constrained
subsytem
Error correcting strategies
based on annotations
analysis and user-interaction

eq2

eq3

eq4

eq5

eq6

Static Debugging
(Structural Analysis)

[2] Dolan A. and Aldous J. Networks and algorithms – An
introductory approach. John Wiley & Sons 1993
England.
[3] Dulmage, A.L., Mendelsohn, N.S. Coverings of bipartite
graphs, Canadian J. Math., 10, 517-534.
[4] Elmqvist, H. A Structured Model Language for Large
Continuous Systems. PhD thesis TFRT-1015, Department
of Automatic Control, Lund Institute of Technology,
Lund, Sweden. 1978.

eq7

well-constrained
general system
var1

var2

var3

var4

var5

var6

Decomposition into
irreductible parts
eq2

eq3

eq4

eq6

eq7

var1

var2

eq5

var3,var5,
var6

var1,var2

var3 var5

var6

var4

Dynamic Numerical
Debugging

[5] Flannery, L. M. and Gonzalez, A. J. Detecting Anomalies
in Constraint-based Systems, Engineering Applications
of Artificial Intelligence, Vol. 10, No. 3, June 1997,
pages. 257-268.

Figure 16. Debugger architecture.

6

[6] Fritzson P.; Gunnarsson J; Jistrand M.;. "MathModelica An Extens ible Modeling and Simulation Environment
with Integrated Graphics and Literate Programming". In
Proceedings of the 2 nd International Modelica
Conference (March 18-19, Munich, Germany, 2002 )
[7] Jirstrand, M.; Gunnarsson J. and Fritzson P.
“MathModelica – a new modeling and simulation
environment for Modelica. ” In Proceedings of the Third
International Mathematica Symposium (IMS’99, Linz,
Austria, Aug), 1999.
[8] Jirstrand, M.“MathModelica – A Full System Simulation
Tool”. In Proceedings of Modelica Workshop 2000
(Lund, Sweden, Oct. 23-24),2000.

Conclusions

Determining the cause of errors in models of physical
systems is hampered by the limitations of the current
techniques of debugging declarative equation based
languages. We have presented a new approach for
debugging such languages by employing graph
decomposition techniques and have given several usage
examples for debugging erroneous models. It has also
been demonstrated that it is possible to create a tool
with an enhanced user interaction capability that can be
used explicitly in understanding complicated simulation
models.
The contributions of this paper are twofold: the
proposal of integrating graph decomposition techniques
for debugging declarative equation based languages and
an efficient equation annotation structure which helps
the debugger to eliminate some of the heuristics
involved in the error solving process. The annotations
also provide an efficient way of identifying the
equations and therefore helps the debugger in providing

The Modelica Association

[9] Maffezzoni C.; Girelli R. and Lluka P. Generating
efficient computational procedures from declarative
models. Simulation Practice and Theory 4 (1996) pages
303-317.
[10] Vicente Rico Ramirez. Representation, Analysis and
Solution of Conditional Models in an Equation-Based
Environment. PhD Thesis, Carnegie Melon University,
Pittsburgh, Pennsylvania, August 1998.
[11] Wolfram S. The Mathematica Book . Wolfram Media Inc.
(February 1996)

165

Modelica 2002, March 18−19, 2002

Modelica 2002, March 18−19, 2002

166

The Modelica Association

Torrey D.A., Selamogullari U.S.

A Behavioral Model for DC−DC Converter using Modelica

A Behavioral Model for DC-DC Converters using Modelica
David A. Torrey
Ugur Savas Selamogullari
Department of Electrical, Computer and Systems Engineering
Rensselaer Polytechnic Institute
Troy, NY 12180-3590 USA
Email: torred@rpi.edu, selamu@rpi.edu

Abstract

to create a simulation model that faithfully emulates
the behavior of a commercial dc/dc converter. The
This paper describes the development of a behavioral next section motivates the behavioral model.
model of a dc/dc converter. The focus is on developing a model that simulates quickly, yet retains the
2 The Behavioral Model
behavioral features of a physical converter. Based on
a physically motivated behavioral circuit model, the
model is then implemented in the Modelica modeling To model the true behavior of a dc/dc converter, a delanguage and simulated using the Dymola simulation tailed model of the converter and its controller has to
environment. Simulation results are given. A theoreti- be built where every switching cycle is taken into accal method for tuning the simulation model to a phys- count. However, the goal of our modeling effort is
to emulate the behavior of a commercial dc/dc conical converter is presented.
verter where the dynamics at the switching frequency
are barely perceptible at the two ports of the converter.
Modeling the cycle to cycle operation within the con1 Introduction
verter merely adds to the execution time of the model
and potentially introduces numerical issues.
Dc/dc converters are power electronic circuits that A more efficient way to simulate the behavior of a
convert a dc voltage to a different regulated dc volt- dc/dc converter is to use a circuit model that produces
age level. In this respect, ideally a dc/dc converter dynamic voltages and currents, but without considercan be considered as a dc transformer that provides ing internal converter quantities on an instantaneous or
lossless transfer of energy between circuits at different averaged basis [4]. The equivalent circuit contains no
voltage or current levels. There are several topological switching or switching ripple, and only the important
variations of dc converters; the converter is generally macroscopic components of the waveforms are moddescribed in terms of its voltage conversion character- eled [2]. With this approach, a behavioral model (input
istics. For example, a Buck Converter generally pro- current, output voltage changes) of a dc/dc converter
duces an output voltage that is lower than the input is obtained. The circuit and Modelica implementation
voltage.
are shown in Fig. 1 and Fig. 2, respectively.
The main objective of the dc/dc converter is to control
one or more power semiconductor switches to transfrom dc input from one level to another. This is usually
accomplished by controlling the on and off durations
of the semiconductors; filters are then used to remove
the associated ac components of the input current and
the output voltage [1, 2, 3, 4].

Figure 1: A behavioral model for a dc/dc converter.
Our objective here is in describing the macroscopic
dynamic behavior of the dc/dc converter without get- A reflected load current is used on the input side of the
ting caught up in the control and switching operations converter. Any change in output voltage, load, and intaking place within a physical converter. We are trying put voltage is reflected in this current since these are

The Modelica Association

167

Modelica 2002, March 18−19, 2002

A Behavioral Model for DC−DC Converter using Modelica

Torrey D.A., Selamogullari U.S.

2.1 Controlled Current Source (CCS)
This component is the redefinition of existing Voltage
Controlled Current Source within the Modelica Electrical Library with a new current definition equation
and the addition of extra parameters. The relationship
between input and output power of any dc-dc converter
can be written as
Pin =
Vin · Iin =

;

(1)

Vout · Iout
η

.

(2)

The load current reflected to the input is

Figure 2: A schematic of the dc/dc converter behavioral model.
variables of the current equation f (vin , vout , iout ). At
the output stage, a controlled current source is used to
simulate the output current supplied by the converter.
This current is controlled to regulate the output voltage. The model emulates the current limiting function
of a practical dc/dc converter design that uses currentmode control. In order to control the output current,
output voltage feedback is used. This is exactly what
would be done in a physical converter. The output
voltage is compared with the nominal voltage of the
converter (Vref ) and an error is fed to a proportional
plus integral (PI) controller. The output of this controller is used to drive a limiter with a limit value of
Iout = Pout /Vref . The output of the limiter drives a signal current source and defines the current drawn by the
load.

Pout
η

Iin =

Vout · Iout
η ·Vin

.

(3)

In the model, Vout is the output voltage, Iout is the load
current measured through the current sensor, η is efficiency of the converter and Vin is the input voltage.
The Modelica code of this component is given below.
Since the output voltage is already used in the current
equation and there will be no output voltage when input voltage is outside of range, parameters Vinmin and
Vinmax are not used in this component. The current
equation i2 is used under the complete model equation
section due to dependency on outside variables, which
are not defined inside the class itself. The Modelica
code given below is complete with i2 in it. When i2
is used outside of the class CCS, the class becomes a
partial class.

On the input side there is a resistor (Rhk ) to account
for internal power needs of the converter. The power
consumed by this resistor models the internal power
consumed by the control circuitry; the power lost to
switching, conduction and other parasitic losses within
the converter are reflected in the efficiency used to determine the load current reflected to the input. The input capacitor is to provide energy storage for the input
side and to simulate the input capacitance of a typical
dc/dc converter. The output of the converter is only
active if the input voltage is in within a valid range of
input voltages [Vinmin ,Vinmax ]. Ideal diodes are used to
restrict the flow of energy to be from the input to the
output.

class CCS
extends Electrical.Analog.Interfaces.TwoPort;
parameter Real Vout;
parameter Real Pout;
parameter Real eff;
equation
i1 = 0;
i2 = v1*(CurrentSensor.i)/((v2 + 1e-10)*eff);
end CCS;

2.2 PI Controller

This component is the combination of two standard
Modelica library components: Gain and LimIntegraThe model uses existing Modelica Library compo- tor. These two components are connected in parallel
nents such as resistors, ideal diodes, capacitors and to form the proportional plus integral (PI) controller.
two new components: a controlled current source The error signal is fed to the input of the PI controller
and controller output is one that is proportional to both
(CCS) and a PI controller with limiting.

Modelica 2002, March 18−19, 2002

168

The Modelica Association

Torrey D.A., Selamogullari U.S.

A Behavioral Model for DC−DC Converter using Modelica

magnitude and the integral of the input signal. Proportional control increases the speed of the response
while using a term proportional to the integral of the
error signal eliminates the steady state error.
Component LimIntegrator provides the option of turning the integrator off when the integral reaches a given
upper or lower limit. This is used to prevent integrator
wind-up. This way, the overall system has less overshoot and uses less control effort. The Modelica implementation of this component follows.
class LimPICont

Figure 3: Circuit for PI parameter extraction.
H(s) = Kp +

Ki
s

(6)

,

where H(s) is the transfer function of the PI controller,
Vref is nominal output voltage of the converter and Vout
is the output voltage. If only ripple quantities are considered, then

parameter Real Pout;
parameter Real Vref;
Blocks.Continuous.LimIntegrator
LimIntegrator1(outMax[:]={Pout/Vref});
Blocks.Math.Add Add1;
Blocks.Math.Gain Gain1;
Blocks.Interfaces.InPort inPort;
Blocks.Interfaces.OutPort outPort;

ĩoutd

= ĩrd + ĩcd

(7)

,

and
ĩoutd

equation

= H(s) · ṽoutd

.

(8)

ṽoutd is the ripple voltage across the output capacitor.
Since both ĩoutd and ṽoutd are known, PI controller parameters Kp and Ki can be calculated.

connect(LimIntegrator1.inPort,inPort);
connect(Gain1.inPort,inPort);
connect(Gain1.outPort, Add1.inPort1);
connect(LimIntegrator1.outPort,Add1.
inPort2);
connect(Add1.outPort,outPort);

For high frequency values, the integrator effect of the
PI controller is minimized and the proportional effect
will be dominant. Under these conditions

end LimPICont;

A theoretical method for determining the PI controller
so
parameters is explained in the next section.

ĩoutd

= Kp · ṽoutd

Kp =

3

Determining PI Controller Parameters

ĩoutd
ṽoutd

,

.

(9)

(10)

For low frequencies, the intgerator will be donimant,
so
Ki
The following method can be used to determine the
· ṽoutd ,
(11)
ĩoutd =
s
PI controller parameters from a physical converter. A
(12)
= Ki ṽoutd dt .
ripple is introduced on the output voltage by using an
offset sinusiodal voltage source in series with a resistor
as shown in Fig. 3. Using the sinusoidal voltage source The values found from this method are an approximaprovides control over the ripple frequency.
tion and give a starting point for final values. Test reThe capacitor voltage and current can be calculated sults using a physical converter can be used for finefrom the circuit equations once the resistor voltage and tuning of the simulation model.
current are known. These two currents add up to the
dc/dc converter output current:
iout = ir + ic

.

The output current can also be written as:
iout = H(s)(Vref −Vout ) ,

The Modelica Association

(4)

4 Simulation Results

Simulations have been completed for 10 Ω and 20 Ω
loading. For each simulation the following waveforms
(5) are plotted:

169

Modelica 2002, March 18−19, 2002

A Behavioral Model for DC−DC Converter using Modelica

Torrey D.A., Selamogullari U.S.

• Input current.
• Output voltage and current.

Rload.v

Rload.i

160

Simulation parameters and their values are:

120

• Vinmin = 145 V

80

• Vinmax = 208 V

40

• Vout = 300 V

0

• Pout = 5000 W

0

• η = 0.95

0.2

0.4

0.6

0.8

1

• LimIntegrator gain = 1 (actual gain would be de- Figure 5: The output voltage and current waveforms
for constant input voltage.
termined from the test explained in Section 3)
• Gain = 1 (actual gain would be determined from
the test explained in Section 3)
• Cout = Cin = 50 µF

20

In order to show the effect of input voltage range
on converter operation, a sinusoidal voltage source is
placed in series with a constant voltage source to form
the input voltage (see Fig. 4). Both 10 Ω and 20 Ω
loading simulations are run for this case as well. For
200

DCtoDCModel1.CCS1.i2

15
10
5
0

DCtoDCModel1.CCS1.v2

-5

150

0

0.2

0.4

0.6

0.8

1

100

Figure 6: Input current waveform for the constant input voltage.

50
0
-50
-100

0

0.1

0.2

0.3

0.4

0.5
350

Rload.i

Rload.v

300

Figure 4: The time-varying input voltage.

250

the constant input voltage case, the simulation results
for 10 Ω loading are shown in Fig. 5 and Fig. 6. The
output current limit can be seen in Fig. 5.
For the time-varying input voltage case, the simulation
results for 20 Ω loading are shown in Fig. 7 and Fig. 8.

200
150
100
50
0
-50

0

0.1

0.2

0.3

0.4

The input current waveform in Fig. 8 for the timevarying input voltage case can be explained by conFigure 7: The output voltage and current waveforms
sidering its equation:
for time-varying input voltage.
Vout · Iout
.
(13)
Iin =
η ·Vin

Modelica 2002, March 18−19, 2002

170

The Modelica Association

Torrey D.A., Selamogullari U.S.

35

A Behavioral Model for DC−DC Converter using Modelica

[6] Dymola User’s Manual

DCtoDCModel1.CCS1.i2

30

[7] Modelica Standard Electrical Library

25
20
15
10
5
0
-5

0

0.1

0.2

0.3

Figure 8: The input current waveform for the timevarying input voltage.
The output power has a constant value and the input
voltage varies sinusoidally. Thus, the current value is
found by division of a constant with a sinusoid. This
explains why the input current decreases as the input
voltage increases and vice versa.

5

Conclusion

This paper has described the development of a behavioral model for dc/dc converters. The model has been
developed by using the modeling language Modelica.
Two new Modelica components are developed from
the existing libary components. Model itself is also
a new addition to Modelica Electrical Library. Simulation results for 10 Ω and 20 Ω loading are given. Information about the tuning of PI controller parameters
to a physical converter is explained.

References
[1] J. G. Kassakian, G. C. Verghese, and M.
F. Schlecht, Principles of Power Electronics,
Addison-Wesley, 1991.
[2] P. T. Krein, Elements of Power Electronics, Oxford University Press, 1998.
[3] N. Mohan, T. M. Undeland, W. P. Robbins,
Power Electronics, 2nd Edition, John Wiley and
Sons Inc., 1995.
[4] D. W. Hart, Introduction to Power Electronics,
Prentice Hall Inc., 1997.
[5] Modelica Web Page (www.modelica.org)

The Modelica Association

171

Modelica 2002, March 18−19, 2002

A Behavioral Model for DC−DC Converter using Modelica

A

Torrey D.A., Selamogullari U.S.

Modelica Code of DC-DC Converter Model

package DCModel
model DCtoDCModel "DC/DC Converter Model"
parameter Real
parameter Real
parameter Real
parameter Real
parameter Real
Real Iout;

Pout;
Vref;
Vinmin;
Vinmax;
eff;

equation

model SignalCurrent
"Generic current source using the input signal as
source current"
extends Electrical.Analog.Interfaces.OnePort;
Blocks.Interfaces.InPort inPort(final n=1) ;
end SignalCurrent;
class LimPICont
parameter Real Pout;
parameter Real Vref;
Blocks.Continuous.LimIntegrator
LimIntegrator1(outMax[:]={Pout/Vref}) ;
Blocks.Math.Add Add1 ;
Blocks.Math.Gain Gain1 ;
Blocks.Interfaces.InPort inPort ;
Blocks.Interfaces.OutPort outPort ;

connect(Volt.p, Amp.p) ;
connect(Din.n, Cin.p) ;
connect(Din.p, p) ;
connect(Cin.n, n) ;
connect(Rhk.p, Cin.p) ;
connect(Cin.n, Rhk.n) ;
connect(CCS1.p2, Rhk.p) ;
connect(CCS1.n2, Rhk.n) ;
connect(CCS1.p1, p1) ;
connect(CCS1.n1, n1) ;
connect(Cout.p, Volt.p) ;
connect(Cout.n, Volt.n) ;
connect(Volt.n, n1) ;
connect(Amp.n, p1) ;
connect(Constant1.outPort, Feedback1.inPort1) ;
connect(Feedback1.outPort, LimPI.inPort) ;
connect(LimPI.outPort, Limiter1.inPort) ;
connect(Volt.outPort, Feedback1.inPort2) ;
connect(Limiter1.outPort, SignalCurrent1.inPort) ;
connect(Dout.n, SignalCurrent1.n) ;
connect(SignalCurrent1.p, Dout.p) ;
connect(Dout.p, Cout.n) ;
connect(Dout.n, Cout.p) ;
Iout = Pout/Vref;

equation
CCS1.i2 = (CCS1.v1)*(Amp.i)/((CCS1.v2 + 1e-10)*eff);
connect(LimIntegrator1.inPort, inPort) ;
connect(Gain1.inPort, inPort) ;
connect(Gain1.outPort, Add1.inPort1) ;
connect(LimIntegrator1.outPort, Add1.inPort2) ;
connect(Add1.outPort, outPort) ;

SignalCurrent1.i = if p.v > Vinmin and p.v < Vinmax then
SignalCurrent1.inPort.signal[1]
else 0;
end DCtoDCModel;

end LimPICont;
end DCModel;
partial class CCS
extends Electrical.Analog.Interfaces.TwoPort;
equation
i1 = 0;
end CCS;
CCS CCS1 ;
Electrical.Analog.Basic.Resistor Rhk ;
Electrical.Analog.Basic.Capacitor Cout(C=50e-6) ;
Electrical.Analog.Ideal.IdealDiode Din ;
Electrical.Analog.Basic.Capacitor Cin(C=50e-6) ;
Electrical.Analog.Interfaces.PositivePin p ;
Electrical.Analog.Interfaces.NegativePin n ;
Electrical.Analog.Interfaces.PositivePin p1 ;
Electrical.Analog.Interfaces.NegativePin n1 ;
Electrical.Analog.Sensors.CurrentSensor Amp ;
Blocks.Math.Feedback Feedback1 ;
Blocks.Sources.Constant Constant1(k={Vout}) ;
Electrical.Analog.Sensors.VoltageSensor Volt ;
Blocks.Nonlinear.Limiter Limiter1(uMax={Pout/Vout}, uMin={0});
LimPICont LimPI(Pout=Pout, Vref=Vref) ;
Electrical.Analog.Ideal.IdealDiode Dout ;
SignalCurrent SignalCurrent1 ;

Modelica 2002, March 18−19, 2002

172

The Modelica Association

Torrey D.A., Selamogullari U.S.

Modelica Implementation of Field−oriented Controlled 3−phase Induction ...

Modelica Implementation of Field-oriented Controlled 3-phase
Induction Machine Drive
David A. Torrey
Ugur S. Selamogullari
Department of Electrical, Computer and Systems Engineering
Rensselaer Polytechnic Institute
Troy, NY 12180 USA
Email: torred@rpi.edu, selamu@rpi.edu

Abstract
This paper focuses on the modeling of a cage induction machine drive under direct-field oriented control,
also referred to as flux-vector control. The interest
is to create a behavioral model of an induction machine drive under field orientation for sytem simulations since field-oriented control is now commonplace
in commerical adjustable speed drives. First, the 3phase induction machine model is developed. Then,
the field orientation requirements are applied to this
model and a voltage source inverter is used to emulate a controlled current source. Rotor field orientation
is used because of fewer limitations than other fieldorientation approaches. The inverter is assumed to
provide the desired phase currents instantenously and
ripple free at some efficiency. Finally, these three components of the overall drive sytem, machine model,
field orientation and inverter power supply, are combined together in a block using the Modelica language
and simultaneously solved using the Dymola user interface.

the matrix equation can be written as
λabc = Labc (θ)iabc

(1)

,

where λabc and iabc are 1 × 6 vectors and Labc (θ) is a
6 × 6 matrix dependent on rotor position.
The electrical dynamics for the induction machine can
be written very succinctly using vector notation as
vabc =

dλabc
+ Rabc iabc
dt

.

(2)

The electromagnetic torque is
1 dL(θ)
i
τem = iT
2
dθ

,

(3)

,

(4)

and the mechanical dynamics are
H

dω
= τem − τl
dt

where the load torque τl includes windage and friction
in addition to the shaft load. The moment of inertia
(H) is assumed to include the inertia of the induction
machine and whatever is connected to the induction
machine through its shaft.

Taken together Eqs. 1 through 4 summarize the electromechanical dynamics of the induction machine.
This description, however is inconvenient for studying
As a mature technology the induction machine en- dynamics and control for two reasons:
joys use in many established applications and is frequently the first machine considered for emerging ap1. The order of the system is large.
plications. The machine is comprised of a stator and
2. The dependence on θ gives rise to a time-varying
a rotor. The windings on the stator and the rotor are
model.
assumed to be sinusoidally distributed in space to simplify the analysis of the machine [5]. The windings
in the induction machine are coupled. This coupling To obtain a much simpler induction machine model,
is described through the inductance matrix, which de- two power invariant transformations are used. The αβ
scribes how current in any one winding contributes to transformation converts a balanced three-phase mathe flux linking the other windings. In a closed form, chine into an equivalent balanced two-phase machine.

1

Introduction

The Modelica Association

173

Modelica 2002, March 18−19, 2002

Modelica Implementation of Field−oriented Controlled 3−phase Induction ...

This is valuable because in a three-phase machine each
phase couples into the other phase. A two-phase machine, on the other hand, has phase windings that do
not couple because the axes of the magnetic fields are
orthogonal (Fig. 1). In addition, it reduces the machine
from six windings to four windings.
β

b
ωt

best not to include them in the model. As a result, the
model order is reduced from six states to four states.
The T matrix becomes T23 for converting abc quantities to αβ quantities and becomes T32 for the inverse
transformation:
 

2 1 √
−1/2 −1/2
√
; (10)
T23 =
3/2 − 3/2
3 0
T
T32 = T23

ωt

α

vαβ =

αβ0 reference
frame

c

Figure 1: Space vectors for the abc reference frame
and the αβ0 reference frame.
If the phase a and phase α axes are coincident, N3 is
the number of turns of the three-phase winding and N2
is the number of turns for the two-phase winding, then
resolving the three mmfs of the abc frame along the
α and β axes and equating the three-phase quantities
gives
 
 
+ N3 ic cos 4π
, (5)
N2 iα = N3 ia + N3 ib cos 2π
3
 2π 
 4π  3
(6)
N3 ib sin 3 + N3 ic sin 3 .
N2 iβ =



ad2
aq2




=

cos(φ) sin(φ)
− sin(φ) cos(φ)


. (13)

d2 axis
aq2

	

 
  

1 √
−1/2 −1/2
ia
iα
√
 iβ  = N3  0
3/2 − 3/2   ib  . (8)
N2
i0
ic
k
k
k
In order to have invariance of power, T =  must
be satisfied,
√ and this is satisfied if N3 /N2 = 2/3 and
k = 1/ 2 [7], giving

  1
−1/2
−1/2
√
√
2
(9)
3/2
− √
3/2  .
T=
0√
√
3
1/ 2 1/ 2 1/ 2

ad1
aq1

aq1

T

T−T



q2 axis

These relationships can be summarized in vector form
as


(12)

.

q1 axis

(7)

.

dλαβ
+ Rαβiαβ
dt

The second transformation is another power-invariant
transformation that is tied to the rotating magnetic
fields in the airgap of the machine. This dq transformation eliminates the rotor position from the machine
dynamics by projecting the dynamics onto a reference
frame that moves with the airgap magnetic field. Fig. 2
shows an arbitrary vector a decomposed into reference
frames where one frame is displaced from the other by
an angle φ. Each reference frame is denoted by a direct
axis and a quadrature axis; the direct and quadrature
axes are orthogonal. It can be shown that

For completeness, a third variable which is independent of iα and iβ is needed:
N2 i0 = kN3 ia + kN3 ib + kN3 ic

(11)

.

In a closed format, the electrical dynamics become

a
abc reference
frame

Torrey D.A., Selamogullari U.S.

ad2
ad1

φ

d1 axis

Figure 2: The vector a decomposed into two reference
frames, with angular displacement φ between them.

Fig. 3 shows the relationship among the three coordinate systems, where superscript s and r indicate stator
and rotor frames, respectively. Accordingly, the αβ
Since 0 components do not couple to either the α or β dynamics of the stator and rotor are transformed to dq
phases and do not contribute to torque production, it is reference frame through an angle Pφ for the stator and

Modelica 2002, March 18−19, 2002

174

The Modelica Association

Torrey D.A., Selamogullari U.S.

Modelica Implementation of Field−oriented Controlled 3−phase Induction ...

P(φ− θ) for the rotor quantities (Fig. 3). It follows that

λsd
 PφJ
 λsq 
= e

 λrd 
0
λrq




λ
sα

 λsβ 


 λrα 
λrβ



0
eP(φ−θ)J

,

where

J =
eJφ =



0 1
−1 0


;

cos(φ) sin(φ)
− sin(φ) cos(φ)


.

βs
β

Field oriented control is a technique that structures the
(14) control of an induction-machine to be entirely parallel to that of a separately excited dc machine. That
is, the field flux is oriented to be orthogonal to the
torque-producing current. There are three commonly
discussed versions of field orientation: rotor, stator and
airgap. In each, the torque is given by vector product
(15) between flux and current. The flux involved is tied
to the type of orientation, for example rotor orientation uses rotor fluxes. In the direct method, the airgap
(16) flux is measured directly by Hall sensors to determine
the magnitude and orientation of the rotor flux vector,
while the indirect field orientation is based on calculating the slip speed required for proper field orientation,
and imposition of this speed on the motor [1, 2, 3, 4].

r

q

In direct field orientation, the orientation of the rotor
flux is determined as follows:

d
(φ -θ)

1. The currents isα and isβ are calculated from the
measured stator currents.

αr

θ

φ

2 Field Orientation

αs

2. The fluxes λrα and λrβ are calculated from the
measured airgap flux and the stator currents:
λrα =

Figure 3: The relationship among the stator αβ axes,
the rotor αβ axes, and the axes of the dq reference
frame.
The machine dynamics become
λdq
+ Rdq idq −
vdq =
dt



ωs J
0
0 ωsl J


λdq

,

(17)

λrβ =

LR
λmα − (LR − M)isα ;
M
LR
λ − (LR − M)isβ .
M mβ

where

LS I MI
i
MI LR I dq
Ls + Lss ,

(21)

3. The magnitude and orientation of the rotor flux is
determined using the rectangular to polar coordinate transformation:

λ2rα + λ2rβ ,
(22)
|λr | =
φ = tan−1



(20)

λrβ
λrα

.

(23)

Under field-orientation, we are forcing the induction
(18) machine to maintain orthogonality between appropriate flux and current through active control. The
LS =
commands for flux and torque are generated by a
Lr + Lrr ,
LR =
higher-order controller. The block diagram of the field
3
oriented-control of an induction machine is given in
M=
2 Lsr .
Fig. 4. Based on commanded flux and torque, the de∗
∗
ωs is the synchronous angular velocity of the air-gap sired values for isd and isq are generated. The outputs
magnetic field, ωsl is the slip frequency, and P is the of the flux and torque calculators are used to close the
flux and torque feedback loops. By knowing the rotor
number of pole pairs.
position, the corresponding values for i∗sα and i∗sβ are
The torque equation is
determined using the rotary transformation:
 s 


3PLsr
isα
i
sd
−Jφ
τm =
(isq ird −isd irq ) = PM(isq ird −isd irq ) . (19)
=e
,
(24)
issβ
2
isq
λdq =

The Modelica Association

;

175

Modelica 2002, March 18−19, 2002

Modelica Implementation of Field−oriented Controlled 3−phase Induction ...

i∗sd

-

dq

-

PWM
Current
i∗sc - Regulator
r6 6 6
r




∑

Torque  r
Calculator  r

−



τ∗m

#

r
? ? ?

? ? ?

"!
6

∑

abc

i∗sa i∗sb -

6
ψ

#
6

6

-

αβ

i∗sq



i∗sα αβ
i∗sβ

Torrey D.A., Selamogullari U.S.

isa
isb

-

=
∼
e
e

isc

e
#
JJ




Flux λmα
Calculator
λrd

IM
"!

λmβ

6



"!
6

λ∗rd

Figure 4: A general block diagram of how field oriented control is implemented.
where φ is the electrical angle that comes out of the
flux calculator shown in Fig 4. The excitation angle is determined by simulating the induction motor
in the αβ reference frame. In our model, this is an
easy task since the simulation gives us λrα and λrβ directly. Once isα and isβ are determined, they can be
converted into the desired phase currents i∗sa , i∗sb and i∗sc
using the αβ transformation. Because stator currents
are imposed on the induction motor, phase voltages
are no longer prescribed. Instead, the phase voltages
reflect the self-consistent resolution of the induction
motor model and the imposed currents. Accordingly,
the number of states within the induction motor model
is reduced by two. The rotor dynamics on the αβ axes
can be written as
1
M
dλsrα
= − λsrα + issα − Pωr λsrβ ,
dt
τr
τr
dλsrβ
1
M
= − λsrβ + issβ + Pωr λsrα ,
dt
τr
τr
where τr = LR /Rr .
The stator voltages are given by
vss,αβ = Rs is,αβ +
where
λss,αβ = σLS is,αβ +

dλs,αβ
dt
M
λ
LR r,αβ

Modelica 2002, March 18−19, 2002

and
σ = 1−

(29)

.

Stator three-phase voltages and currents can be calculated using the T23 transformation matrix:
vs,abc = T23 vss,αβ
is,abc =

T23 iss,αβ

;

(30)

.

(31)

It is common to use a voltage-source inverter to feed
the induction motor with closed-loop current control.
The inverter is assumed to be instantenous and modeled as a current source. The current values are determined from the feedback loops of flux and torque.
Pulse width modulation (PWM) is routinely employed
to control the inverter switches [6]. Ideally the phase
(25) currents would be without ripple and perfectly track
the commanded phase currents, while reality is some(26) what different but close enough to the ideal. Thus, the
inverter is assumed to be ideal and the current drawn
from the DC side of the inverter can be calculated using conservation of instantenous power:
idc =

(27)

,

M2
LS LR

iTs,abc vs,abc
ηinv vdc

,

(32)

where ηinv is the inverter efficiency.
,

There are three sections to this model. The first cap(28) tures the electromechanical dynamics of the induction

176

The Modelica Association

Torrey D.A., Selamogullari U.S.

Modelica Implementation of Field−oriented Controlled 3−phase Induction ...

machine when operating under direct field orientation. mands shows that the model follows the commanded
These dynamics when applied to the induction ma- torque and flux.
chine model prescribe the corresponding stator voltages and currents. The stator voltages and currents in 150 FOMotor1.Torque_command.signal[1]
turn dictate the current that must be supplied by the
100
inverter power supply.
As a block diagram, the developed system model is
shown in Fig. 5. The pins are provided for inverter
connections, inports are used to get the flux and torque
commands and a flange is used for the shaft of the machine. This way, the model emulates the reality. The
Modelica code for the model is given in Appendix A.
Since including the vs,αβ calculations in the simulation
code causes a DAE index problem in the translation
stage, the voltages are calculated seperately using the
derivative and gain blocks from the Modelica library.
Then, the instantenous power is calculated.

50
0
-50
-100
-150

0

1

2

Figure 6: The commanded torque profile.

0.56

FOMotor1.IndMot1.Flux_command.signal[1]

Flux

0.54
Torque

0.52

k={0.5}

0.5
Flux Command

Torque Commad

LoadTorque

LoadTorque1

0.48

V=80

0.46

Inverter Input

tau
k={30.6}

0.44

Field Oriented Motor Model

0

G

2

Figure 7: The commanded flux.

Figure 5: Block diagram of the field-oriented controlled 3-phase induction machine drive.
To illustrate the performance of the direct rotor flux
field orientation system, the model is simulated under a commanded torque and flux profile[3]. The load
torque is taken as 30.6 Nm: the total inertia of the system is 0.5 kg.m2 . The commanded torque profile is

τm =

1













135.3
30.6
−74.1
−135.3
−30.6

Nm for 0 < t ≤ 0.5 sec
Nm for 0.5 < t ≤ 1 sec
Nm for 1 < t ≤ 1.5 sec
Nm for 1.5 < t ≤ 2sec
Nm for t > 2 sec.

150

FOMotor1.IndMot1.Tem

FOMotor1.IndMot1.Wrm

100
50
0
-50
-100
-150

(33)

0

1

2

Figure 8: The torque and speed response of the induction machine.

The rotor flux is to be maintained at 0.5 Wb. The
programmed torque and flux commands are given in
Fig. 6 and Fig. 7, respectively.
Simulation results for the torque, speed and flux of the
model are shown Fig. 8 and Fig. 9. The inverter DC
side current is plotted in Fig. 10. Comparing the simulation results with the desired torque and flux com-

The Modelica Association

177

Modelica 2002, March 18−19, 2002

Modelica Implementation of Field−oriented Controlled 3−phase Induction ...

0.6

FOMotor1.IndMot1.lambda_rd

FOMotor1.IndMot1.lambda_rq

0.5

0.3
0.2
0.1
0
0

1

2

Figure 9: The simulated rotor fluxes.

100

FOMotor1.InvCurrent1.i

[4] D. M. Novotny and T. A. Lipo, Vector Control and
Dynamcis of AC Drives, Oxford University Press,
1997.

60
40

[5] A. E. Fitzgerald, C. Kinglesy, Jr., and S. D.
Umans, Electric Machinery, 5th ed., McGrawHill, 1990.

20
0
-20
0

1

2

Figure 10: The inverter DC side current.

3

[2] F. Blaschke, The principle of field orientation as
applied to the new transvektor closed-loop control
system rotating-field machines, Siemens Review,
Vol. 34, pp. 217-220, May 1972.
[3] A. M. Trzynadlowski, The Field Orientation Principle in Control of Induction Motors, Kluwer,
1994.

80

-40

References
[1] F. Blaschke, Das Ver fahren der Feldorientierung
zur Regelung der Drehfelmachine (The method
of field orientation for control of three phase
machines) Ph.D. Dissertation, TU Braunschweig,
1973.

0.4

-0.1

Torrey D.A., Selamogullari U.S.

Conclusion

[6] B. K. Bose, ed., Power Electronics and Variable
Frequency Drives, IEEE Press, 1997, Chapter 4.
[7] N. N. Hancock, Matrix Analysis of Electric
Machinery,2nd ed., Pergamon Press,1974
[8] Dymola User’s Manual
[9] Modelica Web page (www.modelica.org)

The underlying motivation for this study is the construction of a field-oriented controlled 3-phase induction machine drive model for system simulations. The
final block diagram (Fig. 5) is comprised of three components: an induction machine model, field orientation requirements and an inverter power supply that
provides the desired phase currents under field orientation. The inverter is assumed ideal and loaded consistent with the induction machine drive sytem. Since
the physical phase currents are needed to obtain the inverter DC side current, the induction machine is simulated in αβ reference frame under rotor direct field orientation. This is required to determine the orientation
of the rotor flux. Pins, inports and a flange are used to
provide the connection points to the user. The model
is simulated under a programmed flux and torque profile and results are given. The Dymola simulation tool
is used to solve the simultaneous resolution of three
sections.

Modelica 2002, March 18−19, 2002

178

The Modelica Association

Torrey D.A., Selamogullari U.S.

A

Modelica Implementation of Field−oriented Controlled 3−phase Induction ...

Modelica Code

package FieldOriented
class Tork
Real T ;
Modelica.Blocks.Interfaces.OutPort Torque ;
equation
T = if (time <= 0.5) then (135.3) else if (time <= 1 and time > 0.5) then
30.6 else if (time > 1 and time <= 1.5) then -74.1 else if (time > 1.5
and time <= 2) then -135.3 else if time > 2 then -30.6 else 0 ;
Torque.signal[1] = T ;
end Tork ;
partial class InvCurrent "Source for constant current"
extends Modelica.Electrical.Analog.Interfaces.OnePort ;
end InvCurrent ;
class IndMot
parameter Real Rs=0.294 "stator resistance(abc, dq frames)" ;
parameter Real Rr=0.156 "rotor resistance (abc, dq frames)" ;
parameter Real Lsl=0.00139 "abc frame stator leakage inductance" ;
parameter Real Lrl=0.00074 "abc frame rotor lekage inductance" ;
parameter Real Lsr=0.041 "abc frame mutual inductance" ;
parameter Real P=3 "number of pole pairs" ;
parameter Real H=0.5 "inertia of rotor" ;
parameter Real f=60 "applied source frequency" ;
Real M "dq frame mutual inductance" ;
Real LS "dq frame stator inductance" ;
Real LR "dq frame rotor inductance" ;
Real D "leakage factor" ;
Real Tem "electromechanical torque" ;
Real Wrm(start=0) "Motor mechanical speed" ;
Real theta "Rotor position angle" ;
Real Isd "d axis stator current" ;
Real Isq "q axis stator current" ;
Real Is_alpha "alpha axis stator current" ;
Real Is_beta "beta axis stator current" ;
Real Isa "stator phase a current" ;
Real Isb "stator phase b current" ;
Real Isc "stator phase a current" ;
Real lambda_ralpha(start=1e-3) "alpha axis rotor flux" ;
Real lambda_rbeta(start=1e-3) "beta axis rotor flux" ;
Real lambda_rd "d axis rotor flux" ;
Real lambda_rq "q axis rotor flux" ;
Real lambda_salpha "alpaha axis stator flux" ;
Real lambda_sbeta "beta axis stator flux" ;
Real Tem_fo "Torque under field orientation used for closed loop control" ;
Real m_flux "magnitude of the rotr flux" ;
Real p_flux "angle of the rotor flux" ;
Real Tref "Reference Torque" ;
Real Lref "Reference Flux" ;
Real Terror "Torque error" ;
Real Ferror "Flux error" ;
Real errort(start=0) "integral of torque error" ;
Real errorf(start=0) "integral of flux errror" ;
parameter Real Kif=500 "PI controller integral gain for Flux" ;
parameter Real Kpf=1000 "PI controller proportional gain for Flux" ;
parameter Real Kit=500 "PI controller integral gain for Torque" ;
parameter Real Kpt=1000 "PI controller proportional gain for Torque" ;
Modelica.Blocks.Interfaces.OutPort Lambda_salpha ;
Modelica.Blocks.Interfaces.OutPort Lambda_sbeta ;
Modelica.Blocks.Interfaces.OutPort I_salpha ;
Modelica.Blocks.Interfaces.OutPort I_sbeta "OutPorts used above are
used to calculate the Vs_alpha and Vs_beta since including them
into the code brings DAE index problem" ;
Modelica.Blocks.Interfaces.InPort Flux_command ;
Modelica.Blocks.Interfaces.InPort Torque_command ;
Modelica.Mechanics.Rotational.Interfaces.Flange_b shaft ;
equation
Lambda_salpha.signal[1] = lambda_salpha ;
Lambda_sbeta.signal[1] = lambda_sbeta ;
I_salpha.signal[1] = Is_alpha ;
I_sbeta.signal[1] = Is_beta ;

The Modelica Association

179

Modelica 2002, March 18−19, 2002

Modelica Implementation of Field−oriented Controlled 3−phase Induction ...

Torrey D.A., Selamogullari U.S.

M = 3/2*Lsr ;
LS = Lsl + M ;
LR = Lrl + M ;
D = (LS*LR - (M*M)) ;
Tref = Torque_command.signal[1] ;
Lref = Flux_command.signal[1] ;
Terror = Tref - Tem_fo ;
Ferror = Lref - m_flux ;
der(errort) = Terror ;
der(errorf) = Ferror ;
Isd = Kpf*Ferror + Kif*errorf ;
Isq = Kpt*Terror + Kit*errort ;
Is_alpha = Isd*cos(p_flux) - Isq*sin(p_flux) ;
Is_beta = Isd*sin(p_flux) + Isq*cos(p_flux) ;
der(lambda_ralpha) = -Rr/LR*lambda_ralpha + M*Rr/LR*Is_alpha - P*Wrm*lambda_rbeta ;
der(lambda_rbeta) = -Rr/LR*lambda_rbeta + M*Rr/LR*Is_beta + P*Wrm*lambda_ralpha ;
lambda_rd = lambda_ralpha*cos(p_flux) + lambda_rbeta*sin(p_flux) ;
lambda_rq = -lambda_ralpha*sin(p_flux) + lambda_rbeta*cos(p_flux) ;
lambda_salpha = D/(LS*LR)*LS*Is_alpha + M/LR*lambda_ralpha ;
lambda_sbeta = D/(LS*LR)*LS*Is_beta + M/LR*lambda_rbeta ;
m_flux = sqrt((lambda_ralphaˆ2) + (lambda_rbetaˆ2)) ;
p_flux = atan2(lambda_rbeta, lambda_ralpha) ;
der(Wrm) = if Wrm >= 0 then (1/H)*(Tem - shaft.tau) else (1/H)*(Tem + shaft.tau) ;
der(theta) = Wrm ;
shaft.phi = theta ;
Tem = (P*M/LR)*(Isq*lambda_rd - Isd*lambda_rq) ;
Tem_fo = (P*M/LR)*(Isq*m_flux) ;
Isa = Is_alpha*sqrt(2/3) ;
Isb = sqrt(2/3)*(-0.5*Is_alpha + sqrt(3)/2*Is_beta) ;
Isc = sqrt(2/3)*(-0.5*Is_alpha - sqrt(3)/2*Is_beta) ;
end IndMot ;
class PowerCalculator
block P2toP3
extends Modelica.Blocks.Interfaces.BlockIcon ;
parameter Integer n=1 "Dimension of input and output vectors." ;
Modelica.Blocks.Interfaces.OutPort a(final n=n)"Connector 1 of Real input signals" ;
Modelica.Blocks.Interfaces.OutPort b(final n=n)"Connector 2 of Real input signals" ;
Modelica.Blocks.Interfaces.OutPort c(final n=n)"Connector 3 of Real input signals" ;
Modelica.Blocks.Interfaces.InPort alfa(final n=n)"Connector of Real output signals" ;
Modelica.Blocks.Interfaces.InPort beta(final n=n) ;
equation
a.signal[1] = alfa.signal[1]*sqrt(2/3) ;
b.signal[1] = sqrt(2/3)*(-0.5*alfa.signal[1] + sqrt(3)/2*beta.signal[1]) ;
c.signal[1] = sqrt(2/3)*(-0.5*alfa.signal[1] - sqrt(3)/2*beta.signal[1]) ;
end P2toP3 ;
P2toP3 P2toP3_1 ;
P2toP3 P2toP3_2 ;
Modelica.Blocks.Math.Gain Gain1 ;
Modelica.Blocks.Continuous.Derivative Derivative1 ;
Modelica.Blocks.Math.Add Add1 ;
Modelica.Blocks.Math.Add3 Power ;
Modelica.Blocks.Math.Product Product1 ;
Modelica.Blocks.Math.Gain Gain2 ;
Modelica.Blocks.Continuous.Derivative Derivative2 ;
Modelica.Blocks.Math.Add Add2 ;
Modelica.Blocks.Math.Product Product2 ;
Modelica.Blocks.Math.Product Product3 ;
Modelica.Blocks.Interfaces.InPort inPort ;
Modelica.Blocks.Interfaces.InPort inPort1 ;
Modelica.Blocks.Interfaces.InPort inPort2 ;
Modelica.Blocks.Interfaces.InPort inPort3 ;
Modelica.Blocks.Interfaces.OutPort outPort ;

Modelica 2002, March 18−19, 2002

180

The Modelica Association

Torrey D.A., Selamogullari U.S.

Modelica Implementation of Field−oriented Controlled 3−phase Induction ...

equation
connect(Power.inPort1, Product1.outPort) ;
connect(Power.inPort3, Product3.outPort) ;
connect(Derivative2.inPort, inPort3) ;
connect(Gain1.inPort, inPort) ;
connect(Add2.inPort2, Derivative2.outPort) ;
connect(Add2.inPort1, Gain2.outPort) ;
connect(Add1.inPort1, Gain1.outPort) ;
connect(Derivative1.inPort, inPort1) ;
connect(Derivative1.outPort, Add1.inPort2) ;
connect(P2toP3_1.alfa, inPort) ;
connect(P2toP3_2.alfa, Add1.outPort) ;
connect(P2toP3_2.beta, Add2.outPort) ;
connect(P2toP3_1.a, Product1.inPort1) ;
connect(P2toP3_2.a, Product1.inPort2) ;
connect(P2toP3_1.b, Product2.inPort1) ;
connect(P2toP3_2.b, Product2.inPort2) ;
connect(P2toP3_1.c, Product3.inPort1) ;
connect(P2toP3_2.c, Product3.inPort2) ;
connect(Power.inPort2, Product2.outPort) ;
connect(inPort2, Gain2.inPort) ;
connect(P2toP3_1.beta, inPort2) ;
connect(Power.outPort, outPort) ;
end PowerCalculator;
class FOMotor
parameter Real Inveff=0.9 ;
IndMot IndMot1 ;
Modelica.Electrical.Analog.Interfaces.PositivePin p ;
Modelica.Electrical.Analog.Interfaces.NegativePin n ;
Modelica.Blocks.Interfaces.InPort Flux_command ;
Modelica.Blocks.Interfaces.InPort Torque_command ;
InvCurrent InvCurrent1 ;
Modelica.Mechanics.Rotational.Interfaces.Flange_b shaft ;
PowerCalculator PowerCalculator1 (Gain1.k={IndMot1.Rs}, Gain2.k={IndMot1.Rs}) ;
equation
connect(IndMot1.Flux_command, Flux_command) ;
connect(IndMot1.Torque_command, Torque_command) ;
connect(InvCurrent1.p, p) ;
connect(InvCurrent1.n, n) ;
connect(IndMot1.shaft, shaft) ;
connect(PowerCalculator1.inPort, IndMot1.I_salpha) ;
connect(PowerCalculator1.inPort1, IndMot1.Lambda_salpha) ;
InvCurrent1.i = (PowerCalculator1.Power.outPort.signal[1]/(Inveff*InvCurrent1.v)) ;
connect(PowerCalculator1.inPort2, IndMot1.I_sbeta) ;
connect(PowerCalculator1.inPort3, IndMot1.Lambda_sbeta) ;
end FOMotor;
end FieldOriented ;

The Modelica Association

181

Modelica 2002, March 18−19, 2002

Modelica 2002, March 18−19, 2002

182

The Modelica Association

Wischhusen S., Schmitz G.

Numerical Simulation of Complex Cooling and Heating Systems

Numerical Simulation of Complex Cooling and Heating Systems
Dipl.–Ing. Stefan Wischhusen
Prof. Dr.–Ing. Gerhard Schmitz
Technical University Hamburg–Harburg
Department of Technical Thermodynamics
Denickestraße 17, D–21073 Hamburg, Germany

Abstract

a system for the operator as well as for the system
builder. Since many owners of heating (and cooling)
plants neither have the knowledge nor the financial
budget for a reconfiguration, contracting companies
are commissioned with the optimisation. There are of
course various kinds of contracts possible. One could
be the optimisation of an existing plant, another the
supply with heating and/or cooling where the customer
just pays for the delivered energy and not for the plant,
which has to be build for that purpose (outsourcing).
The benefit resulting from that simulation tool is not
only of economical nature but also a reduction of energy consumption which means a decreased production of carbondioxid. This is the background for the
work which is described in this paper.

In cooperation with the Imtech Deutschland GmbH
& Co. KG (formerly known as Rudolf Otto Meyer
GmbH & Co. KG) a research project was conducted.
The aim of the project is to develop a simulation tool
for heating and cooling systems in building applications. This tool should enable configuration studies
and dynamic system simulations with time scales from
a few seconds up to one year within short computational times. Therefore, the simulation environment of
Dymola, containing the programming language Modelica, is used to model complex heterogenous systems. In this paper the recent library for heating components is presented and the implemented models are
subsequently used for a verifying simulation of an
existing thermal power plant.
Furthermore, the
graphical user interface HKSIM is introduced as 2 Concept of Simulation
an applied tool for project management and post–
processing, integrating Dymola for model editing and Since there is already a lot of building simulation
software available, like e.g. TRNSYS, BLAST and
simulation only.
others, the development is focused on the plant components. Due to the separation of the building from
the system simulation some work has to be invested in
1 Introduction
the linkage between both calculations. The simulation
So far, there is no simulation tool known which en- of the building is supposed to be done first. The
ables the dynamic simulation of both, complex heat- results from this simulation, basically the heat demand
ing and cooling systems in building applications, (requirement of refrigeration, respectively) and room
allowing free choice of parts and system layout. temperature, are stored in a data file which can be
Therefore, this research project was conducted in 2001 read in subsequently by a table–interpolation–model
with the goal of developing such an object–oriented li- CombiTableTime from the Modelica–Standard–
brary. Partners involved in this project are the Depart- Libraries [3] (Fig.1). To the interpolation–model
ment of Technical Thermodynamics of the Technical connects a model of a radiator, which is not a single
University Hamburg–Harburg and Imtech Deutsch- heating element in that sense but represents one
land. From the viewpoint of a system engineer it is heating circuit or even a whole building. The main
desirable to predict the dynamic behaviour of a com- idea is, that the heat demand is directly translated
plex plant during the concept and definition phase of into a corresponding mass flow rate by functions
a project. The development of running costs is due implemented to the heat consuming model. Usually,
to the gas and electric power consumption of every for the modeling of thermo–hydraulic control volumes
single component, like for instance pumps, boilers two state variables are needed, like e.g. pressure p and
etc.. These are the key optimisation numbers of such enthalpy h. During the integration process the speed

The Modelica Association

183

Modelica 2002, March 18−19, 2002

Numerical Simulation of Complex Cooling and Heating Systems

Wischhusen S., Schmitz G.

Figure 1: Concept of separated simulations

of the solver is influenced by the dynamic behavior of
the state variables, or better, the time scales in which
the state variables change. These time scales differ
by up to three magnitudes in heating installations.
This is the reason why an incompressible fluid model
is selected with a simple algebraic mass balance in
order to reduce the calculation time. Thus, the mass
flow rate is just considered as a signal, which is not
calculated by a detailed momentum balance, including
the actual pressure difference between inlet and outlet,
but is limited by the pumps pressure difference and
maximum flow rate. The used concept results in calculation times of a few minutes for a plant simulation
of one year. In addition to that, the influence of the
pressure on the gas and electric power consumption
of a heating installation is considered to be low so
that it can be neglected. Due to these reasons only the
water temperature is taken as a thermodynamic state
variable of each component.
In favour of a conservative energy balance a control
volume formulation is chosen and the temperature is
projected downstream. In case of an adiabatic control
volume V from the energy balance follows:
V ρ cw Ṫ

 cw



ṁin  tin

ṁout  tout 

(1)

with the thermodynamic temperature T , the Celsius–
temperature t and mass flow rate ṁ
T



tout  27315

ṁin



ṁout

(incomp. fluid) .

Modelica 2002, March 18−19, 2002

184

A water property model is needed to calculate the
specific heat capacity cw and density ρ. This can
be done efficiently by assuming constant values or
more accurately by providing polynomial functions
[1] depending on temperature. Since the accuracy is
hardly enhanced by less then 1% but the calculation
times are increased by 300% the constant value
approach is considered to be accurate enough.

For the calculation of the gas consumption of a boiler
the efficiency coefficient η is needed on the one hand,
which is defined as the ratio of heat output to burner
output and on the other hand the feed temperature,
which is provided by the controller. Boiler manufacturers usually specify η depending on different
states with regard to the biggest impact, like e.g. load
ratio, return temperature or average boiler temperature. The specified values can be interpolated by a
characteristic diagram model which also refers electric power consumption of the burner. The common
methods, functions and interfaces are implemented in
a class (BaseBoiler), whereas the characteristic
diagram class Characteristic Diagram can
be replaced by ”drag and drop” or modified to generate a new boiler model in an convenient and easy way
(see Fig.2). The same concept of an object–oriented
model is also used for the modeling of other components of a heating installation, like for instance pumps
or combined heat and power plants (CHP)[2].

The Modelica Association

Wischhusen S., Schmitz G.

Numerical Simulation of Complex Cooling and Heating Systems

The heat is either stored in horizontal or upright standing tanks which may have water layers with different
water temperatures. The heat is transfered in internal
or external heat exchangers (loading systems).
Since the combined heat and power technology is becoming more and more important – not only in very
large heating installations – a model for gas driven
CHP’s has been added to the library.
Currently, the work focuses on the development of
components for cooling systems, like water chillers
and cooling towers. The previously developed components of heating systems will be reused as far as possible, for example the pump models, pipe models and
storage tank models.

Figure 2: Diagram layer of a boiler model

3

Library Content

The recent library contains models for components
of heating and cooling installations in subpackages.
Since the later users of the library shall only modify
the existing component classes by ”drag and drop” and
parameterisation, the base classes will be stored in an
extra library which cannot be modified. An important
requirement for the parameterisation (and also for the
component model itself) is that the needed information
is made available by the manufacturer. This has been
checked in the beginning of every model development.
Especially, when programming components for cooling systems it was found out that the supplied information level is very low.
So far, the boiler sublibrary consists of models for a
broad range of small to large gas–fired boiler types
(oil fuel could be easily introduced), as there are condensing boilers and normal boilers equipped with atmospheric to modulating burners. The electric power
consumption of the gas burners ventilation motor is
also taken into account.
The pump sublibrary provides models for uncontrolled
and controlled pumps. These models can be used for
heating, cooling and service water supply.
Pipes are modeled by discretised control volumes and
wall classes, which enable the calculation for heat
losses. Usually, these losses are neglected when the
heating installation and the pipes are part of the building which has to be heated because it is considered to
contribute to the heat demand. Thus, in most cases adiabatic pipes without any wall model are used to model
the systems delay.
For the simulation of domestic hot water systems a
sublibrary provides models for hot water storage tanks.

The Modelica Association

185

Figure 3: Schematic of a cooling installation

The water chiller model is not numerically described
by a control volume because the needed state equations for this purpose include pressure and enthalpy
which decrease the speed of simulation too much as
discussed in section 2. Although with the current
computing facilities real–time simulations of thermo–
hydraulic systems are partly possible (good guess of
initial conditions provided) these models are not suitable for simulations of one year. Thus, characteristic
diagrams are implemented in the chiller model which
refer to the used refrigerant and type of compressor.
The supplied functions were derived from technical
data of various manufacturers and device sizes [4] with
a maximum spread of 10%. A simple model example
of a cooling system is presented in Fig.3.

Modelica 2002, March 18−19, 2002

Numerical Simulation of Complex Cooling and Heating Systems

Wischhusen S., Schmitz G.

Figure 4: Recent package Heizkreise for heating installation components

4

Verification of Existing Models

The following section is focused on the simulation
and verification of models of heating installations with
measurement data. At first, the fundamental question, why a dynamic simulation environment is chosen, shall be answered by means of a simple example.

4.1

Dynamic Simulation – Why?

Due to the fact that real heating and cooling installations may have large fluid capacities a dynamic simulation of such systems is necessary. In order to demonstrate the difference between static and dynamic simulation a simple feed temperature step is performed with
three different boilers and the same hydraulic input
(ṁ  20kg/s and treturn  60Æ C). The results from the
three simulations are shown in Fig.5 where the step
of the feed temperature is triggered after one hour.
In a static simulation, represented by the continuous
line, the boiler follows the step input ideally (sufficient
burner output of at least 265kW assumed). In a dynamic calculation the water volume within the boiler
has to be heated up by the gas burner‘s rated output
until the switch–off temperature is reached (1K below

Modelica 2002, March 18−19, 2002

186

set value). Thereover, the boiler model switches into
the ideal mode which means the heat input is adjusted
ideally without triggering further state events by
burner starts and stops. It is evident that the dynamic calculated feed temperature with regard to the
static simulation increases in a slower way and that the
warm–up time is influenced by the size of the boiler.
The temperature rise is slowed down by the continuous
mass flow rate which has a bigger impact on smaller
boilers. In the case of a too small output rate of the
boiler (boiler with a nominal capacity of 140kW) the
feed temperature input is actually not reached.
During the warm–up of the feed temperature the gas
burner operates at full capacity which means a higher
gas consumption than calculated in a static simulation. In addition to that, the operation efficiency drops
due to the rising water temperature, the increased
load and rising exhaust gas temperature. Comparing the gas consumption for a simulation time of two
hours including one temperature step a deviation of
3% (400kW) to 13% (2500kW) is found depending
on the total water volume of the boiler. Therefore, a
dynamic simulation of complex heating and cooling
installations is considered to be necessary.

The Modelica Association

Wischhusen S., Schmitz G.

Numerical Simulation of Complex Cooling and Heating Systems

¯ MixingValve: 3–way valve, adjusting a constant temperature difference ∆T between return
and feed of 20K

Feed Temperature
95

Temperature [°C]

90

Boiler 140kW
Boiler 400kW
Boiler 740kW
Static 400kW

¯ Controller: ambient temperature lead feed
temperature controller

85

¯ ExpansionVessel: model is used as a data
sink for the mass flow signal

80

75

Finally, the gas and electric power consumption is
summed up in the gas and electric meter model.

70

65
3000

3200

3400

3600

Time [s]

3800

4000

4200

Figure 5: Feed temperature step for different boiler
sizes and simulation types

4.2

Simulation of a Thermal Power Plant

Figure 6: Schematic of a thermal power plant

Furthermore, the existing models have been used
to simulate a thermal power plant which is operated by the contracting subsidiary company of
Imtech Deutschland, Imtech Contracting.
The
schematic diagram of the heating installation model is
shown in Fig.6. The measurement data with regard
to mass flow rate, return, feed and ambient temperature is interpolated by the interpolation table model
CombiTableTime DataInput and AmbientTemp
which is supplied by the tables sublibrary of the Modelica Additions Libraries. The feed temperature input
is used to compare the energy flow of the model with
the real system. The source model HydSource represents the heat consuming part. This is done because
measurement data is not supplied for the consumers
and the associated buildings were not simulated. To
make sure that the same amount of energy is transfered
like in the real system, the mass flow rate is related to
the energy flux, rising when the simulated feed temperature is falling. The shown system consists of the
following components:

Measurement data with an interval length of 15
minutes has been provided by Imtech Contracting
over a period of 9 days in February. The data set
contains ambient, feed and return temperature of the
pipeline as well as of the boiler. Furthermore, the
volume flow rate has been measured. With use of
these input values the heat demand of the consumers
can be calculated directly (Fig.8).
As Fig.7 reveals, the boiler feed temperature of the
simulation follows the measured temperature understanding the mentioned ideal model behaviour which
does not produce noise resulting from measurement
tolerances and a chopping burner output below 250kW
heat demand.

With regard to Fig.8 it is evident that the simulated
burner output is just a little higher than the heat demand because of the boiler‘s high efficiency level of
94%. The profile of the heat demand shows typical
¯ Boiler: gas–fired boiler (nominal capacity of
events like a lower load at night followed by a warm–
1 360kW) equipped with a modulating (output
up peak in the early morning. Two times the plant
can vary in a certain range) burner
was even turned off completely which was not due to
¯ Pump: pump with integrated electronic speed weather conditions but to maintenance reasons.
regulation for variable head control, maximum
flow rate 64m3 /h
4.3 Case Study
¯ AdmixingPump: 3–speed inline pump, maxi- In this section a comparison of four often used boiler
mum flow rate 32m3 /h
configurations is undertaken. Thus, the boiler model

The Modelica Association

187

Modelica 2002, March 18−19, 2002

Numerical Simulation of Complex Cooling and Heating Systems

Wischhusen S., Schmitz G.

Burner Output ï Heat Demand

Boiler Feed Temperature
150
Wed

Sun

140

600

Sim
Mea

Wed

Sun

500
130
400

Power[kW]

Temp[°C]

120
110
100
90

300

200

80

Burner Output Sim
Heat Demand Mea

100
70
60
6.02

7.02

8.02

9.02

10.02 11.02 12.02 13.02 14.02 15.02 16.02

Time[dd.mm]

0
6.02

7.02

8.02

9.02

10.02 11.02 12.02 13.02 14.02 15.02 16.02

Time[dd.mm]

Figure 7: Boiler feed temperature simulated over a Figure 8: Simulated burner output and measured heat
period of 9 days in Feb.
demand

in Fig.6 was replaced by the following configurations, in part load. The gas consumption is even rising
slightly, since the efficiency of a high loaded boiler
which are all state–of–the–art:
drops and this effect can not be fully compensated by
¯ two parallel boilers (rated output 740kW each) reduced standby losses of the second boiler.
A single condensing boiler configuration reduces the
(Fig.10)
fuel costs by 230 EUR in 9 days while the electric
¯ one condensing boiler (1350kW)
costs are not affected, since the same burner type is
implemented.
¯ a condensing boiler (640kW) followed by a simple boiler (740kW) for higher duties (Fig.11)
For reasons of comparison, the heat demand data
of the previous simulation run was doubled by just
increasing the mass flow rate. The prices for gas
and electricity have been set with regard to the usual
contract conditions (Gas: 36Ct/kWh, Electricity:
14(day)–10(night)Ct/kWh).
The outcome is presented in the chart diagram of
Fig.9. Obviously, the existing configuration is also
the most expensive with regard to running costs
(as mentioned before the average efficiency of the
implemented boiler model is up to 94%) which has
two reasons. First, the gas burner of the boiler model
is driven by an electric motor with a rated power of
65kW, which is considerably higher than that of the
two installed pumps and of the smaller boilers (simple
boiler: 26kW and cond. boiler: 14kW). Second, the
average efficiency of the condensing boilers is 98%
and would be even higher if the return temperature
was lower than 60Æ C as in this case.
Less expensive is the configuration with two parallel
boilers because of the smaller burner motor as mentioned before and the fact that only one boiler operates

Modelica 2002, March 18−19, 2002

188

Figure 9: Running costs of case study

Apparently, the highest reduction (approx. 300 EUR
or 6%) in this case study could be realised by the serial configuration of a condensing boiler with a simple
boiler because it combines the positive effects of
two smaller boilers and condensing technology.
This is a reason why this concept is preferred by

The Modelica Association

Wischhusen S., Schmitz G.

Numerical Simulation of Complex Cooling and Heating Systems

Figure 10: Configuration with two parallel boilers

Figure 11: Configuration with one condensing boiler followed by a normal boiler

Imtech Deutschland when it comes to the design of
new heating installations with low return temperatures. Nevertheless, it has to be emphasised that in this
special case the calculated reduction of running costs
may be to low to be worthwhile, especially if the investment costs of the more efficient configurations are
much higher.

5

Graphical User Interface – HKSIM

As mentioned before a graphical user interface for
Windows is developed by the Zentrale Ingenieurtechnik (ZIT) department of Imtech Deutschland for a
number of reasons:
1. As an expert tool, the used simulation environment, Dymola, needs to be controlled by an applied user interface which is focused on the end–
user and simulation background.

The Modelica Association

189

2. A data base connection is needed to save different projects and to give information about former
simulations and their outcome.
3. The results from the simulations can be presented
in a chart, which can be printed out as a standard information sheet for customers or can be
exported to other applications.
In fact, Dymola is a powerful, but also complex simulation tool, too complex for a straightforward usage
when results are needed fast. Thus, the graphical user
interface is utilising the applied features of Dymola,
like the model editor (system building by ”drag and
drop”) and the simulator. Other applications, like
the plot and animation window are faded out. Also,
the end–user, for instance the project engineer, is not
expected to program with use of Modelica.

Modelica 2002, March 18−19, 2002

Numerical Simulation of Complex Cooling and Heating Systems

Wischhusen S., Schmitz G.

Figure 12: Screen shot of HKSIM‘s main (top l.) and parameter window (bottom l.)

The typical procedure can be described as follows:
The user chooses a project from the list of existing
installations (Fig.12) or a new one is opened, alternatively. It has to be emphasised that every modification
of an existing project is saved under a new model name
and can be restored later. Afterwards, Dymola can
be started and the model library is loaded. From this
point, the user can decide if the Dymola environment
or HKSIM is used. After the configuration or modification of the project model is completed, parameter
settings can be performed within the Dymola diagram
layer. The same applies for the model translation. A
convenient setting of the simulation time is enabled by
means of a submenu of HKSIM, which converts start
and stop times from a pull down date and hour menu to
start and stop times in seconds (Fig.12). In other submenus data input files for the boundary conditions (e.g.
heat demand, ambient temperature) can be chosen as
well as parameters with regard to operation costs calculation before the simulation is finally started. The
results are then displayed by an implemented post
processing tool. For clarity reasons only a predefined choice of relevant variables can be plotted from
a result browser which also offers the results of for-

Modelica 2002, March 18−19, 2002

190

mer simulation runs in numerical order. An example
of a plot diagram is shown in Fig.13.

6 Conclusion
A simulation tool for heating and cooling processes
in building applications is needed to calculate the performance of complex system layouts with regard to
economical and ecological aspects. In this paper, the
development of a system library is described and it was
pointed out that a dynamic simulation in this field is
necessary as a matter of accuracy. The library components can be used in an applied way as a case study
in section 4.3 shall demonstrate. Since the end–users
will operate this simulation tool among other applications in a predetermined way, a graphical user interface is programmed, integrating Dymola just as a
model editor and simulator, while focusing more on
the needs of a project engineer. So, case studies and
post–processing operations can be undertaken conveniently with use of an integrated data base and chart
utility.

The Modelica Association

Wischhusen S., Schmitz G.

Numerical Simulation of Complex Cooling and Heating Systems

Figure 13: Screen shot of HKSIM‘s post processing window

7

Acknowledgement

The measurement data used in the simulation of the
thermal power plant has been kindly provided by
Imtech Contracting. Especially, I would like to thank
Bruno Lüdemann and Ole Engel, who is developing
the graphical user interface, for their help and advice throughout this project. I have to thank Admir Hadžikadunić for his work on modeling combined heat and power plants during his diploma thesis.
Thanks must also go to Hicham Nabil for developing
concepts with regard to model complex cooling systems in his diploma thesis.

[2] Hadžikadunić, A.:
Simulation von Blockheizkraftwerken mit
Modelica / Dymola
Diploma thesis, Department of Technical Thermodynamics, Technical University
Hamburg–Harburg, 2001.
[3] Modelica Standard Library
www.modelica.org/libraries.shtml,
2002.
[4] Recknagel, Sprenger, Schramek:
Taschenbuch für Heizung und Klimatechnik
69. Aufl., R. Oldenbourg Verlag, München
/Wien, 1999.

References
[1] Glück, B.:
Zustands– und Stoffwerte: Wasser, Dampf und
Luft
2. Aufl., Verlag für Bauwesen, Berlin, 1991.

The Modelica Association

191

Modelica 2002, March 18−19, 2002

Modelica 2002, March 18−19, 2002

192

The Modelica Association

Session 8a

Discrete Event Modeling

The Modelica Association

193

Modelica 2002, March 18−19, 2002

Modelica 2002, March 18−19, 2002

194

The Modelica Association

Freiseisen W., Keber R., Medetz W., Pau P., Stelzmueller D.

Using Modelica for Testing Embedded Systems

Using Modelica for Testing Embedded Systems
Wolfgang Freiseisen, Robert Keber, Wihelm Medetz,
Petru Pau, Dietmar Stelzmueller
[wfreisei,rkeber,ppau]@risc.uni-linz.ac.at
[wilhelm.medetz,dietmar.stelzmueller]@scch.at
an open, OPC (OLE for process control) based
interface for visualization and monitoring of the
process is provided.
As we have already mentioned, the stable version
of our product accepts only a subset of Modelica
language. Thus, among the restricted classes, only
blocks are currently translated, and the syntax is
restricted. A version that can handle Modelica
models is currently in the testing phase.

Abstract
In this paper, we give an overview of a simulation environment based on Modelica, dedicated to testing PLC
programs. The main components of the system are a compiler
of a Modelica subset and a runtime environment, which
provides the necessary tools for simulating the evolution of
models.

Introduction
Due to the high complexity of embedded
software systems, it is more and more desirable to
provide programmable logic control (PLC) programmers with virtual test environments. Usually, tests of
the complete software, including PLC programs, highlevel task control and human-machine interface (HMI)
visualization, can only be performed when the
mechanical environment, which is controlled by the
software, has been finished.
This is the reason why a simulation environment
based on Modelica has been developed. We describe
in this paper a simulation system that handles models
written in Modelica and uses C++ as intermediate
language. Developed in the frame of the project
VirtMould, supported by RISC institute and
company ENGEL from Schwertberg, Austria, the
compiler was meant to provide a tool for simulating
injection-molding machines. The compiler accepts only
a subset of Modelica language: this subset suffices
for obtaining a model that simulates faithfully an
injection-molding machine.
In order to minimize the necessary simulation
modelling time, Modelica descriptions of many
components are generated automatically from CAD
models. Models are translated first to XML, the
resulting files containing, in fact, the syntactic structure
of the Modelica programs. The XML files are further
parsed and provide the input for a pushdown
automaton, which creates the internal data structures
that store the essential content of the future C++
classes.
This C++ code is compiled and linked to specific
simulation libraries; the resulting software component
– a dynamic-link library or a static library – can be
linked to external tools for visualization or process
simulation.
In fact, the runtime environment is interfaced
with a simulation of the embedded software
environment. It allows an almost real time execution
and simulation of the embedded software. In addition,

The Modelica Association

The paper is structured as follows: We begin by
giving a short overview of the project. The architecture
is detailed in Section 2. In Section 3 we present the
main features of the C++ generated code. Section 4
describes the interface provided by the software
component obtained after compiling the model. In
Section 6 we give some examples and snapshots of the
visual interfaces.

1. Project overview
ENGEL is a leading manufacturer of injection
moulding machines, producing and selling integrated
flexible manufacturing cells. A typical manufacturing
cell consists of:
- an injection-moulding machine, whose
individual components are selected from a
wide variety of available product features;
- a handling system built upon a free programmable robot.
The whole manufacturing cell is controlled by an
embedded software system that integrates an IEC 1131
based PLC, a high-level task-coordination language, a
Java-based HMI and communication components for
manufacturing execution system (MES) integration.
The software engineers and service technicians
should have the possibility to perform software tests
offline on their desktop with a “virtual injectionmoulding machine”, whenever a new PLC is produced.
In order to achieve a high user acceptance, a test
environment (see [6] for a description of the main
features of such software components) must be closely
integrated with the development environment used by
the PLC programmers; also, the PLC programmer
should not be bothered with building simulation
models for his specific target machine. Therefore the
simulation models used for testing must be
automatically generated from CAD designs.
The main goal is to increase software quality
through simulation-based testing without increasing the

195

Modelica 2002, March 18−19, 2002

Using Modelica for Testing Embedded Systems

Freiseisen W., Keber R., Medetz W., Pau P., Stelzmueller D.
Programming Environment
A compiler for a Modelica subset has been
implemented. The focus of this compiler was to
provide an easy integration into the overall system
architecture and to allow the efficient simulation of
discrete events. This is done in two phases: The
Modelica - XML translator parses the Modelica
files and generates a XML representation, and the XML
- C++ translator generates C++ class files. Details on
the Modelica compiler are presented in Section 3.

time spent for testing. In addition to this, VirtMould
should also be applicable for other application
domains, like customer support offline diagnosis,
computer based training or sales support.

2. System architecture
VirtMould environment contains four major components:
• automatic generation of a simulation model;
• programming environment;
• runtime environment;
• visualization.

Runtime Environment
The runtime environment is loaded by the PLC
program simulation and contains some major
components:
– the model is the C++ collection of classes
corresponding to the Modelica program;
– the solver is the C++ framework for
computing trajectories of the variables of the
model;
– there are two kinds of interfaces for
controlling the simulation and for data
exchange:
 the control interface is a COM in-process
DLL interface, which has been chosen for
coupling the PLC program simulation with
the Modelica simulation runtime environment. The PLC program simulation allows
program execution in either soft real-time or
virtual simulation time mode.
 for accessing the simulating state we have
added an OPC server. A more detailed
description is given in Section 4.
Visualization
In addition to using third party visualization
tools, a built-in configurable user interface allows the
design of virtual hardware panels. The user has the
possibility to:
- inspect all model variables in a hierarchical
manner;
- monitor some variables by drawing their
trajectories;
- change the values of some variables, provided
that those variables permit this kind of user
interaction.
The user interface can be configured through an XML
file.

Figure 1: System architecture of the VirtMould
environment.
Automatic generation of the simulation model
In order to minimize the effort for building
simulation models, XML-based tools have been
developed for translating CAD files (containing
electrical, hydraulic, etc. components), together with
information about product configuration, to Modelica.
These tools work with XLST transformations based on
the XML files exported from CAD, and generate
component assembly files.
A library containing the mechatronic blocks and
handling system components of the injection-moulding
machine has been developed and is continuously
improved and extended (ENGEL Component Library).
The goal has not been to achieve the highest possible
simulation accuracy, but rather to provide the accuracy
required for software testing, together with a high
degree of flexibility and fast simulation execution. This
library also contains components for interactive test
manipulation, interaction with the panel of the virtual
machine, and simulation of machine failures.

Modelica 2002, March 18−19, 2002

3. Short description of the Modelica
compiler
The compilation of a Modelica model comprises
three steps. After each step, one or more files of
specific types are generated. Thus:
1. The model is parsed and the syntactic
structure is stored in an XML file. In the same
format (XML) are stored the libraries.
2. One or more XML files are taken as input by a
program that produces C++ code. This code
mirrors the Modelica code, a Modelica

196

The Modelica Association

Freiseisen W., Keber R., Medetz W., Pau P., Stelzmueller D.

These methods are easily generated for blocks –
provided that the Modelica code contains all
equations in explicit form. If flow variables occur and
Kirchoff laws have to be generated, implicit equations
should be added and the translation requires further
processing. Moreover, for equations that cannot be
explicitized (like transcendental equations, or polynomial of high degree), numerical solvers are required.
These features will be covered in a future version of
our system.

class having a C++ counterpart, which is a
C++ class.
3. The C++ file is compiled, and the object is
linked with some libraries, which provide the
framework for solving the model, i.e.,
generating a simulation, and for interfacing
with other software tools.
In the following we focus on the characteristics of the
C++ code.
Base classes
C++ as intermediate code was a normal choice,
due to the object-oriented philosophy of Modelica
(see Modelica tutorial [1]). A Modelica class is
translated into a C++ class. Among the restricted
Modelica classes, our system accepts type, block,
connector and package. Models are accepted with
some restrictions.
To each component of a Modelica class
corresponds a member data in its C++ image.
According to the specifics of the Modelica class, a
number of other members are included in the C++
code, like, e.g., one additional member for each
differentiated variable.
A Modelica block and its C++ image are
shown in Figure 1. We have kept in the C++ code only
the member declarations and function definitions that
correspond directly to their Modelica counterparts.
The C++ correspondent of a Modelica
package is derived from a special class, which has no
method with equations but can contain a number of
inner classes.
The connectors provide a set of template
member functions, in order to allow connections with
components of various types.
We must emphasize that the granularity of
Modelica code is preserved: The models are described hierarchically in Modelica, by giving the
mathematical description of components and
connecting them in composite objects; this structure is
transmitted to the C++ code.

Events
The set of discrete equations is solved only when
some events occur. During the simulation, an event
queue is maintained and used for triggering the
evaluation of these equations.
Changes of values of discrete variables usually
generate events; also, the special functions sample
and edge are event-generators. On the other hand,
events can be generated externally, by the interaction
of the user with the visual interface: Recall that the
output of our system is a software component that can
be embedded or attached to other software tools; this
component communicates with the environment in two
ways, that is, it exposes names, types and values of
variables, and it accepts, with some restrictions,
modifications of these variables.
Simulation
A simulation consists in the computation of
trajectories of variables during a specific time period.
In fact, a finite set of points on these trajectories is
computed, for values of time discretized by a time step
whose value is set externally.
For solving differential-algebraic equations we
have implemented a few numerical integrators: Euler,
Runge-Kutta, Runge-Kutta with variable step size (see
[4], [5] for detailed descriptions of these methods). In
order to ensure a higher stability, the integrators have
an internal time step (fixed or variable), which is
usually much smaller than the external. The differential
and dynamic equations are evaluated after each internal
time step, whereas the independent algebraic equations
are evaluated after the external time step.
Basically, the simulation is performed following
the same rules as described in the Modelica language
specifications (see [2], Chapter 4): The integrator
solves numerically the equations between two events.
When an event occurs, the set of discrete equations is
solved and any change of the values of the discrete
variables can influence the set of differential and
algebraic equations.
Ordering their enclosing blocks gives the order in
which the equations are evaluated, so that every
variable that occurs in the right-hand side of an
equation has already been given a value before the
equation is evaluated.

Equations
The equations that describe the behavior of a
component generate a few member functions. Thus:
1. discrete equations are collected in a member
function that is executed only when special
events occur;
2. differential equations go to another member
function;
3. the remaining equations are divided in two
groups, depending on the relation of their
variables with differential equations. Thus,
we call dynamic these equations that are
related to differential equations, and
4. independent algebraic the other ones.

The Modelica Association

Using Modelica for Testing Embedded Systems

197

Modelica 2002, March 18−19, 2002

Using Modelica for Testing Embedded Systems

Freiseisen W., Keber R., Medetz W., Pau P., Stelzmueller D.

block Sine
parameter Real amplitude[:]={1.};
parameter SIunits.Frequency freqHz[:]={1.};
parameter SIunits.Angle phase[:]={0.};
parameter Real offset[:]={0.};
parameter SIunits.Time startTime[:]={0.};
extends Interfaces.MO(final
final nout=max([size(amplitude, 1); size(freqHz, 1); size(phase, 1);
size(offset, 1); size(startTime, 1)]));
protected
constant Real pi=Modelica.Constants.pi;
parameter Real p_amplitude[nout]=(if
if size(amplitude, 1) == 1 then ones(nout)*amplitude[1] else amplitude);
parameter Real p_freqHz[nout]=(if
if size(freqHz, 1) == 1 then ones(nout)*freqHz[1] else freqHz);
parameter Real p_phase[nout]=(if
if size(phase, 1) == 1 then ones(nout)*phase[1] else phase);
parameter Real p_offset[nout]=(if
if size(offset, 1) == 1 then ones(nout)*offset[1] else offset);
parameter SIunits.Time p_startTime[nout]=(if size(startTime, 1) == 1 then ones(nout)*startTime[1] else startTime);
equation
for i in 1:nout loop
y[i] = p_offset[i] + (if
if time < p_startTime[i] then 0.
else p_amplitude[i]*Modelica.Math.sin(2*pi*p_freqHz[i]*(time - p_startTime[i]) + p_phase[i]));
end for;
for
end Sine;

class Sine : public Interfaces::MO {

void start(){

// Variables ...

// Settings for start

MO::start();

public:
public

}

ParamVectorN<Real>

amplitude;

ParamVectorN<SIunits::Frequency>

freqHz;

ParamVectorN<SIunits::Angle>

phase;

ParamVectorN<Real>

offset;

ParamVectorN<SIunits::Time>

startTime;

// …
void equation_dyn(const Time &time){

// Dynamic Equations for this Block

// protected members

MO::equation_dyn(time);
{

ConstScalar<Real>

pi;

ParamVectorN<Real>

p_amplitude;

Integer _initialCond;

ParamVectorN<Real>

p_freqHz;

Integer _finalCond;

ParamVectorN<Real>

p_phase;

_initialCond = 1;

ParamVectorN<Real>

p_offset;

_finalCond = nout;

ParamVectorN<SIunits::Time>

for (int
int i=_initialCond;i<=_finalCond;i++){

p_startTime;

// methods

Real _if5;
if (TimeLt(time, p_startTime [ i - 1 ] )){

public:
public

// Default Constructor....
// … initialization of parameters with constant vals
// …

_if5 = 0.;

Sine(){

} else {
_if5 = p_amplitude [ i - 1 ] *
Modelica->Math->sin (

}
void resize(){

// resizing vector components

2*pi*p_freqHz [ i - 1 ] *
( time-p_startTime [ i - 1 ] ) +

p_amplitude.resize(nout);

p_phase [ i - 1 ] ) ;

p_freqHz.resize(nout);
}

p_phase.resize(nout);

y [ i - 1 ] = p_offset [ i - 1 ] + ( _if5 ) ;

p_offset.resize(nout);
}

p_startTime.resize(nout);
}

}

return;
return

void init() {

// initializing parameters with non-constant expr.
//
// initializing nout

}

// …

nout.parameter(max ( size ( amplitude,1 ) ,
size ( freqHz,1 ) ,size ( phase,1 ) ,

};

// end class: Sine

size ( offset,1 ) ,size ( startTime,1 ) ), 1);
MO::init();

//…
resize();
}

Figure 2: A Modelica block and its C++ translation.

Modelica 2002, March 18−19, 2002

198

The Modelica Association

Freiseisen W., Keber R., Medetz W., Pau P., Stelzmueller D.

4. Communication with other
programs

5. Usage and examples
The following figure shows a standard ENGEL
injection moulding machine. The ENGEL HL is a
highly accurate, fast and energy-saving injection
moulding machine in tiebarless design for use in the
range from 200 to 6,000 kN clamping force.

The runtime system contains two interfaces for
connections with other programs:
- a proprietary COM interface for communicating with the PLC program simulation;
- an open OPC-based interface for communication with visualization tools.
After compiling the initial Modelica text, a
library (.lib file) or a dynamic-link library (.dll
file) is generated. This library encapsulates both the
model description and the integration algorithms.
Among the possible services provided by this library we
mention: start/stop a simulation process, transmit the
names, types and values of all the internal variables of
the model, at every time moment during the simulation
run, and accept new values for some of the variables.
Interaction with other programs is realized through
a common interface: we have used the COM (Common
Object Mode) technique. A COM interface component
for loading and unloading simulations, calculating time
steps and exchanging data with the simulation has been
designed.
For visualizing the results of the simulation an
OPC (OLE for process control, see [3] for more
information) server has been developed and implemented. The simulation results are provided via OPC
and these values can be visualized with standard OPC
client tools. OPC is the most commonly used standard
for inter-process communication in the area of manufacturing automation.
The OPC specification is a non-proprietary
technical specification that defines a set of standard
interfaces based upon Microsoft OLE/COM technology.
An OPC standard interface makes possible interoperability between automation/control applications,
field systems/devices and business/office applications.
Traditionally, each software or application developer was required to write a custom interface, or
server/driver, to exchange data with hardware field
devices. OPC eliminates this requirement by defining a
common, high performance interface that permits this
work to be done once, and then easily reused by HMI,
SCADA (Supervisory Control and Data Acquisition),
control and custom applications.
The advantage of using the OPC Data Access
Specification is that it provides a hierarchically
structured namespace that can be directly used to map
Modelica variables. Clients can then retrieve OPC
items (i.e. Modelica variables) either synchronously
or asynchronously. OPC also provides possibilities to
specify the desired update rates for items and to browse
the available item name space. The OPC server defines
the access status (read, write) for each item together
with additional descriptive information. As OPC is
implemented by a COM object, the inter-process communication can be realized either as an highly efficient
in-process communication or as distributable (DCOM)
out-of-process communication. Also several clients can
communicate in parallel with one OPC server.

The Modelica Association

Using Modelica for Testing Embedded Systems

Figure 3: An injection moulding machine.
After a thorough analysis of the machine structure,
a simulation model written in Modelica has been
developed, which should describe its components with
an appropriate accuracy for testing its general behavior.
As we have already mentioned, Modelica description of
many components has been automatically generated
from CAD specifications.
An excerpt of the main Modelica model of the
injection model machine is given in the following. In
the instantiation sector of this model all the functional
units of the machine are defined.
block InjectMoldMachine
"Tiebarless Injection Molding Machine"
Lib.IMM.FunctionalUnits.MainPowerSupply MainPower;
Lib.IMM.FunctionalUnits.ControlVoltages

ContrVolt;

Lib.IMM.FunctionalUnits.EmergencyOff

EmergOff;

Lib.IMM.FunctionalUnits.FilterMotor

FilterMotor1;

Lib.IMM.FunctionalUnits.Motor

Motor1;

Lib.IMM.FunctionalUnits.SafetyGateMoldFront SGMoldFront;
Lib.IMM.FunctionalUnits.SafetyDoor

SafetyDoor;

Lib.IMM.FunctionalUnits.SafetyGateInject

SGInject;

Lib.IMM.FunctionalUnits.Heating
Heat1 (startTemp = 30.);
Lib.IMM.FunctionalUnits.TraverseCooling

Cool1;

Lib.IMM.FunctionalUnits.PumpBlock

Pumps;

Lib.IMM.FunctionalUnits.Ejector
Ejector1 (startPos = 0.3);
Lib.IMM.FunctionalUnits.Core
Core1 (startPos = 10.),
Core2 (startPos = 10.);
Lib.IMM.FunctionalUnits.InjectionUnit
InjUnit1 (startPos = 5.);
Lib.IMM.FunctionalUnits.Mold
Mold1 (startPos = 3.);
Lib.IMM.FunctionalUnits.InjectionPlasticize
InjPlast1 (startPos = 1.);
Lib.VMLib.Electrics.AlarmLamp

Alarm;

PLC_Interface

PLC_IO;

ButtonBlock

Buttons;

equation

// input connections for "SafetyDoor"
connect(ContrVolt.VAC24, SafetyDoor.VAC24);
connect(ContrVolt.VE24, SafetyDoor.VE24);
connect(Buttons.SafetyDoor.outPort, SafetyDoor.HandleGate);
connect(Buttons.QuitKey.outPort, SafetyDoor.QuitKey);

//. . .
end InjectMoldMachine;

199

Modelica 2002, March 18−19, 2002

Using Modelica for Testing Embedded Systems

Freiseisen W., Keber R., Medetz W., Pau P., Stelzmueller D.

-

Graph window: for visualizing simulation
results of selected variables;
- Control panel: buttons and switches for
opening/closing safety gates, moving hydraulic
units, etc.; this object is a faithful copy of the
control panel of the injection moulding
machine;
- PLC simulation window: gives internal information of the PLC runtime environment.
These components can be seen in Figure 4.

The simulation model contains all components
necessary for characterizing the behavior of the
machine, including its electrical parts (e.g. power supply
with different control voltages), hydraulic movements
(e.g. ejector, mold) and interaction with the user (e.g.
open/close safety gate).
Currently, the typical testing environment consists
of the following windows:
- HMI of the injection moulding machine; this
graphical object has the appearance and
functionalities of the touch screen of the real
machine;

Figure 4: Screenshot from a simulation session.

6. Conclusions and future work
The quality of the overall system architecture of
the VirtMould test environment has been proved by a
high user acceptance. About 10 PLC programmers in
their daily work are currently using the environment;
this number should be increased to 50 or more users,
testing more than 1000 systems per year. Modelica
has proved to be the ideal object oriented modelling
language for building reusable libraries of simulation
components, which is essential for automatic model
generation.

Modelica 2002, March 18−19, 2002

The next step will be to add a test automation
framework, such that regression tests can be performed
automatically. An SVG (Scalable Vector Graphic)
based visualization client will provide enhanced 2D
animation of the simulation process. A 3D mechanical
component visualization will also provide the possibility
for collision checking.
In addition to software testing, the environment
will also be used for computer-based training.

200

The Modelica Association

Freiseisen W., Keber R., Medetz W., Pau P., Stelzmueller D.

References

Using Modelica for Testing Embedded Systems

[4] U. M. Ascher, L. R. Petzold – Computer methods for
ordinary differential equations and
differential-algebraic equations, SIAM,
1998.
[5] K. E. Brennan, S. L. Campbell, L. R. Petzold –
Numerical solution or initial-value
problems in differential-algebraic
equations, SIAM 1996.

[1] Modelica™ – A Unified Object-Oriented Language
for Physical Systems Modeling, Tutorial,
Version 1.4, by Modelica Association,
Dec. 2000, downloadable from
http://www.modelica.org.
[2] Modelica™ – A Unified Object-Oriented Language
for Physical Systems Modeling,
Language Specification, Version 1.4, by
Modelica Association, Dec. 2000,
downloadable from
http://www.modelica.org.

[6] C. Kaner, J. Falk, H. Q. Nguyen - Testing Computer
Software, John Wiley & Sons, 1999.
[7] M. Fewster, D. Graham - Software Test Automation,
Addison-Wesley, 1999.

[3] F. Iwanitz, J. Lange - OLE for Process Control,
Huethig GmbH, Heidelberg, 2001.

The Modelica Association

201

Modelica 2002, March 18−19, 2002

Modelica 2002, March 18−19, 2002

202

The Modelica Association

Remelhe M.A.P.

Combining Discrete Event Models and Modelica − General Thoughts ...

Combining Discrete Event Models and Modelica –
General Thoughts and a Special Modeling Environment
Manuel A. Pereira Remelhe

Process Control Laboratory
Department of Chemical Engineering
University Dortmund, D-44221 Dortmund
Tel.: +49/231/755-5127, Fax: +49/231/755-5129
Email: m.remelhe@ct.uni-dortmund.de

etc. the simulation model has to incorporate the
discrete event as well as the physical part of the
system. Hence, powerful modeling formalisms are
required for both, the physical and the discrete
part, and an intuitive integration of these parts has
to be supported. In addition to the clearness of the
modeling paradigm the simulation efficiency is an
important aspect.

Abstract
This contribution consists of two parts. In the first
part general possibilities for the combination of
Modelica models and discrete event models are
discussed on a conceptual level. It is shown that it
is necessary to support asynchronous behavior and
that it is useful to represent sampled data behavior
of discrete event systems in an interrupt-driven
style for fast simulation. The characterizations of
the alternatives are summarized in table 1.
In the second part a modeling environment prototype that provides dedicated editors for different
discrete event formalisms and supports hierarchical
and heterogeneous models is presented briefly. It
transforms a discrete event model into a Modelica
class whose behavior is given by a Modelica algorithm and several Modelica functions. Such a discrete event component can be inserted intuitively
into a model of a physical system and simulated by
standard Modelica-Tools.

For the modeling and simulation of general hybrid
physical systems Modelica [1] is particular suitable, because it facilitates multi-domain models,
allows intuitive modeling of the most hybrid phenomena and enables efficient simulation. Furthermore it is possible to combine physical models
with complex discrete event dynamics. In this
contribution 4 general approaches for the integration of physical models and discrete-event models
are discussed:
1. declarative style (based on equations),
2. imperative style (based on Modelica algorithms and functions),
3. external secondary simulator (based on the
external function interface) and
4. external primary simulator (Modelica in the
loop).

Introduction
Sophisticated technological systems often require
complex discrete event control. For instance, sequential control is needed for the execution of
recipes on chemical batch plants. Redundancy
control is crucial for the safety of aircraft. And
resource booking systems are needed for coordinating several interacting sequential controllers,
e.g., to avoid collisions of robots or to prevent the
mixing of parallel running batches in chemical
batch plants. These discrete parts often involve
hierarchical execution schemes as well as
concurrency with synchronous and asynchronous
communication. The physical part of such technological systems normally is very large and include
complex hybrid dynamics such as Friction, collisions and instantaneous equilibrium reactions.

One well known example for the first approach is
the Petri nets library created by Mosterman, Otter
and Elmqvist [2]. The Petri net modeling objects,
i.e., places and transitions, are represented by library components. These can be instantiated and
connected via the connectors to constitute a specific Petri net graph. The equations of the transition and place objects were specified in a way such
that the composition of these equations behaves
like a Petri net would do.
The second approach implies that the behavior of a
discrete event system is encoded imperatively into
one Modelica algorithm that may call Modelica
functions. In order to support high-level modeling
formalisms a special modeling environment has to

If simulation is to be used for the estimation of
throughput, power consumption, quality quantities

The Modelica Association

203

Modelica 2002, March 18−19, 2002

Combining Discrete Event Models and Modelica − General Thoughts ...

be implemented that provides dedicated editors for
specific discrete event formalisms and translates
automatically a discrete event model into a Modelica component containing such an algorithm. A
prototype of such a modeling environment will be
presented in the second part of this contribution.

event models and the advantage of using an approved discrete event simulator would get lost due
to error-prone hand coding. However, the fourth
approach allows to detect the state events at the
end of an integration step without using event
localization, so that the event instants depend on
the step size of the integrator.

The third and fourth approaches allow the usage of
existing discrete event simulators. In the third case
a Modelica simulator controls the external simulator, whereas in the fourth case the Modelica simulator is controlled from outside, e.g., by a Stateflow-Simulink model.

Sampled-data Models
Discrete event systems are normally implemented
as sampled-data systems. In the most cases the
sampling rates are very high, so that the sampling
can be neglected which results into interrupt-driven
models. However, sometimes it is necessary to
consider the sampling. The simplest way to do so
is to use the sample-operator. In the following
example a tank is filled continuously with the rate
1. A controller with 100 samplings per second
opens the outlet when the tank level becomes
higher than 10 and it closes the outlet when the
tank level becomes lower than 0.1 .

Part I: General Thoughts
Interrupt-driven Models
The task of discrete event systems is normally to
wait for certain state events in the physical system
and react instantly when they occur, e.g., when a
predefined temperature is reached, the next step of
a recipe is started. Hence, from a functional point
of view discrete event systems are interrupt-driven,
or to be more precise, driven by state events (and
sporadic time events).

model ControlledTank
Real level;
Boolean valveOpen;
equation
der(level)= if valveOpen then
1 - sqrt(level*2.173) else 1;
when sample(0, 0.01) then
valveOpen =
if level > 10 then true
else if level < 0.1 then false
else pre(valveOpen);
end when;
end ControlledTank;

A prerequisite for realizing this behavior is the
detection and localization of state events during
continuous integration. Since integration methods
require continuous model equations, in Modelica
all inequality expressions of a model are fixed
during integration in order to guarantee that discontinuous changes of variables do not occur. In
addition, inequality expressions which depend on
continuous state variables and which are critical,
are monitored during integration. When the logical
value of an inequality expression changes, the time
instant of the switching point is determined up to a
certain precision and the integration is stopped,
i.e., a state event is localized. In the case of time
events the inequality expression depends only on
the time variable and the integration simply stops
directly at the predetermined time.

The sample-Operator generates regular time events
each 0.01 seconds. At every time event the integrator is stopped, the switching equation is evaluated and the integrator is started again. Since the
initialization of the integrator consumes the largest
amount of time, the simulation can be speed up
significantly by transforming this sampled-data
model into an interrupt-driven model that emulates
the sampled-data behavior. This is done by replacing the when clause by the following two when
clauses:

Modelica-Tools such as Dymola [3] support this
event handling, if the events can be deduced from
the Modelica code, i.e., the inequality expressions
must be included in the code. Therefore an interrupt-driven model of a discrete event system can
only be realized accurately with the first two approaches. If an external simulator is to be used, a
wrapper code could be written in Modelica that
defines the externally caused state events. But that
would not be feasible for very complex discrete

Modelica 2002, March 18−19, 2002

Remelhe M.A.P.

when {level<0.1, level>10} then
sampleTime=(floor(time*100)+1)/100;
end when;
when time > sampleTime then
valveOpen = if level>10 then true
else if level<0.1 then false
else pre(valveOpen);
end when;

204

The Modelica Association

Remelhe M.A.P.

Combining Discrete Event Models and Modelica − General Thoughts ...

realized by a fixed length vector in principle. If
during a simulation the number of elements for the
event list exceeds the length of the vector, the
simulation has to abort.

In the first when clause an effective sampling time
is determined, when a significant state event occurs. It is the next regular sample time the sample
operator would have. In the second when clause
then the switching equation is evaluated when the
sampling time is reached. While no state events
occur, the integration does not stop. For the given
example the simulation of the interrupt-driven
model is 70 times faster than the simulation of the
sampled-data model. In consequence, the sampleoperator should not be used for reactive discrete
event systems. Instead, it is always possible to
emulate sampled-data behavior, if required.

Some discrete event systems have only discretetime input signals. In this case state or time events
are generated outside of the discrete event component, e.g., by limit switches in the physical system,
and the usage of an external simulator is straightforward.
The models created with the Petri nets library look
pretty much like Petri nets. The difference to the
original formalism is that there no ports, so that the
objects can be connected directly with lines and
therefore only two classes of objects are needed.
However, many formalisms have more complex
syntax and graphics that can not be represented
adequately using object-oriented composition diagrams. Statecharts for example has a state hierarchy concept without encapsulation of inner states.
Consequently, dedicated graphical editors should
be used in general. The following table summarizes the characterizations of the 4 approaches.

Asynchronous Behavior
In the first approach the modeling objects of a
formalism are represented by Modelica objects
whose behavior is defined declaratively using
equations.
These equations are treated in the same way as the
equations of the physical systems part so that a
discrete transition of the discrete event model is
connected to a complete evaluation of the whole
system of equations including the physical systems
equations. This synchronous behavior is disadvantageous when a formalism is used that performs a
sequence of intermediate transitions in order to
achieve a consistent state. Here, the effective transition that should be observable from the physical
system incorporates several internal transitions that
are asynchronous to the those of the physical system. Otherwise inconsistent intermediate states of
the discrete event model could have an illegal effect on the physical system. Furthermore complex
discrete event systems often involve complex hierarchical execution schemes: on each level a process can include sub-processes, and concurrent
subsystems may run asynchronously. Therefore, it
is crucial to support asynchronous behavior for
modeling complex discrete event controllers.
Hence, the equation-based approach is only suitable for simple cases where as the other three approaches can realize such complex behavior due to
the algorithm-based imperative definition.

Table 1: Characterization of the 4 approaches
Approach
allows interrupt-driven models
(localization of state events)
allows
asynchronous
behavior
(hidden iterations)
allows dynamic data structures
adequate graphics
heterogeneous discrete event models
reliable discrete event simulation

- x x x
?
?

x
x
?

x
x
?
x

x
x
?
x

Part II: A Prototype of a Modeling
Environment
In order to enable heterogeneous discrete event
models including domain-specific formalisms a
modeling environment prototype has been developed that provides dedicated editors for the different formalisms. The environment is based on the
meta-modeling tool DoME [4]. This tool generates
automatically graphical editors based on a formal
specification of the syntax and on parameters for
the graphical appearance of the formalism. Therefore prototypes of new editors can be implemented
within a few hours and a final version can be
achieved within a few days. This is important for
further development of domain-specific formalism.

Other Aspects
Modelica algorithms are more limited in comparison to real programming languages, because
Modelica’s data structure is static, i.e., it is not
possible to instantiate new variables or components
at run-time. Therefore all variables that might be
needed possibly at run-time have to be installed at
compile-time. For example an event list of a
scheduler of a discrete event simulator has to be

The Modelica Association

1 2 3 4
x x - -

205

Modelica 2002, March 18−19, 2002

Combining Discrete Event Models and Modelica − General Thoughts ...

Figure 1: Defining a port type named "states" using
Modelica syntax

Remelhe M.A.P.

Figure 2: A block diagram implementation named "RedCon_BG"

An hierarchical block diagram formalism is implemented that allows the basic blocks to be modeled with any reactive formalism. At present, statecharts [5] and sequential function charts [6] are
integrated, but other formalisms can be added in
future.

Hierarchical Block Diagram Formalism
In the framework of the block diagram formalism
an archetype concept is used. Each archetype defines a specific class of objects and can be instantiated several times. The definition of an archetype
incorporates the ports of the objects (fig. 3), archetype attributes, object attributes and one or
more alternative internal implementations, i.e.,
different interchangeable realizations. In order to
cope with the possible combinations of different
implementations one or more configurations can be
defined that determine unambiguously which implementation is used for which instance.

Figure 3: The shelf view on the archetypes

In our case port types and block types can be defined. Port types are archetypes with archetype
attributes (port variables and sub-ports), but without an implementation (fig.1). Ports can be instantiated within block archetypes and port archetypes.
The block archetypes contain ports and no further
attributes. The implementations of a block archetype can be a block diagram or a statechart or a
sequential function chart (fig. 2 and 4). A block
diagram contains the outer ports of the corresponding archetype and sub-blocks adorned with
their own ports. In a block diagram one output port
can be connected to several input ports, but one
input port must not be connected with more than
one output port (fig. 2).

Modelica 2002, March 18−19, 2002

Figure 4: A statechart model that represents an implementation of an block

206

The Modelica Association

Remelhe M.A.P.

Combining Discrete Event Models and Modelica − General Thoughts ...

The Translation into Modelica

init_block2(data.block2);
data.block3 :=
init_block2(data.block3);
...
end init_block1;

The translation procedures for the different formalisms are programmed using the extension facilities of DoME: The Scheme variant Alter, a Lisp
like functional programming language, and Smalltalk in which DoME itself is implemented.

Finally, the generated Modelica model class contains an algorithm that originates all function calls:

For the translation of a hierarchical model a specific implementation configuration is used. All
parts that are automatically generated are encapsulated in one Modelica model class. The connectors of this class correspond to the outer ports on
the highest model level. Each port type is directly
represented by a connector definition. For each
block implementation a record is generated that
defines the components (variables and/or subblocks) of the corresponding implementation.
Since the instantiation of such a record is connected to the instantiation of its components, the
instance of the top-level block contains the whole
data structure of the hierarchical model.

model DiscreteController
< Port Definitions >
< Record Definitions >
< Function Definitions >
InputPort inputConnector;
OutputPort outputConnector;
Data_block1 block1;
algorithm
block1.inputPort := inputConnector;
when initial() then
block1 := init_block1(block1);
end when;
block1 := detect_block1(block1);
if block1.trig then
block1 := peform_block1(block1);
end if;
outputConnector :=
block1.outputPort;
end DiscreteController;

// block1 contains block2 and block3:
record Data_block1
...
data_Block2 block2;
data_Block3 block3;
...
Boolean trig;
end Data_block1;

Such a Modelica model of a discrete event component can be inserted intuitively into a model of a
physical system and simulated by standard Modelica-Tools.

In addition for each block implementation a set of
Modelica functions is generated that define its
behavior. The following tasks are realized by single Modelica functions:
- initialization of the components (variables and
sub-blocks) of the block implementation
- detecting the need for state transitions based on
given input values
- performing state transitions based on given
input values
- data logging for visualization
For a specific block implementation the argument
type and the output type of these functions is the
corresponding record. Hence, the initialization
function of the top-level block gets its data object
(a record) as an argument and calls the initialization function of its sub-blocks using the corresponding sub-objects included in the record:

References
[1] Modelica. Homepage: http://www.Modelica.org/
[2] Mosterman P.J., Otter M. and Elmqvist H.: Modeling
Petri-Nets as Local Constraint Equations for Hybrid Systems using Modelica. Proceedings of the 1998 Summer
Computer Simulation Conference (SCSC'98), Reno,
U.S.A., 19.-20. Juli 1998.
[3] Dymola. Homepage: http://www.Dynasim.se/.
[4] DoME. http://www.htc.honeywell.com/dome/.
[5] D. Harel: Statecharts: A Visual Formalism for Complex
Systems. Sc. of Comp. Prog. 8, pp 231-274, 1987.
[6] International Electrotechnical Commission. Interna-

tional Standard IEC 1131 Programmable Controllers, Part 3, Programming Languages. IEC, Geneva,
1993.

[7] M. Otter, M. A. Pereira Remelhe, S. Engell, P. Mosterman, “Hybrid Models of Physical Systems and Discrete
Controllers,” at - Automatisierungstechnik, vol. 48, no. 09,
pp. 426-437, 2000.

function init_block1
input Data_block1 par;
output Data_block1 data;
algorithm
data := par;
data.block2 :=

The Modelica Association

[8] M. A. Pereira Remelhe: Simulation and Visualization
Support for User-defined Formalisms Using MetaModeling and Hierarchical Formalism Transformation.
Proceedings of the 2001 IEEE International Conference
on Control Applications, México City, 2001

207

Modelica 2002, March 18−19, 2002

Combining Discrete Event Models and Modelica − General Thoughts ...

Modelica 2002, March 18−19, 2002

208

Remelhe M.A.P.

The Modelica Association

Färnqvist D., Strandemar K., Johansson K.H., Hespanha J.P.

Hybrid Modeling of Communication Networks ...

Hybrid Modeling of Communication Networks Using Modelica
Daniel Färnqvist†, Katrin Strandemar†, Karl Henrik Johansson†, ‡ and João Pedro Hespanha§

Abstract

The interaction with a variety of networks plays an
important role in everyone’s life. A growing use of
networks, such as the Internet, with their widening
set of services increases the demand on the control of
the network. The objective is often to improve traffic
throughput and to better accommodate different service demands. Communication networks experience
major problems due to traffic congestion. Today’s congestion control is in most networks implemented as
end-to-end protocols, e.g., [4, 12, 10]. The protocols
have proved to form the basis of a remarkably robust
and scalable system, though the understanding of the
basic principles of these complex systems is far from
satisfactory. There is intensive research on modeling
and simulation of the Internet. It has been pointed out
that classical network models from telecommunication
based on Poisson modeling are not suitable for the Internet [8]. Recent models capturing the self-similar nature of the traffic has been developed [5]. The general
opinion in the network area is still that Internet modeling and simulation are open research problems [9].

The intention of this paper is to describe initial work
on modeling packet-switched communication network
using Modelica. The standard modeling and simulation environment targeted at networking research is the
discrete event simulator ns-2 [7]. ns-2, which was
originally developed at UC Berkeley, implements network protocols such as the transmission control protocol (TCP) and traffic source behaviors such as file
transfer protocol (FTP) and Telnet. Since ns-2 directly implements the Internet protocols and simulates
individual packets, it provides on one hand accurate
simulation results but on the other hand a rather slow
simulation speed. The result of this is that ns-2 is
mainly for studying relatively small networks over a
short time scale. The other extreme is to use flow models, i.e., to approximate the packet transmission with
a continuous flow and basically neglect the network
protocols. Flow models capture average transmission
rates but ignores events such as packet drops. Flow
models are hence suitable for the study of steady-state
behavior but not for evaluating transient phenomena.
This is for instance due to that certain congestion control strategies are based on the implicit feedback information from packet drops, which are not included
in the flow model. A hybrid systems model, which is
based on the average rates but takes packet drops into
account, was recently proposed in the literature [3].
The motivation for this model is to capture the network behavior on a time scale in between packet models and flow models. Studies have shown that the hybrid model is able to model many important network
phenomena [3, 1]. In this paper, we will show that the
hybrid model is suitable for Modelica. Moreover, we
show that simulating the model in Dymola provides an
efficient environment for studying congestion control
in computer networks.

The authors want to thank Håkan Hjalmarsson and Gunnar
Karlsson for helpful discussions.
† Dept. of Signals, Sensors & Systems, Royal Institute of Technology, SE–100 44 Stockholm, Sweden
‡ Corresponding author.
Tel.
+46 8 7907321.
Fax
+46 8 7907329. kallej@s3.kth.se
§ Dept. of Electrical & Computer Engineering, University of
California, Santa Barbara, CA

The outline of the paper is as follows. Section 2
presents a brief introduction to congestion control in
communication networks. The hybrid model is described in Section 3 and its Modelica implementation
is discussed in Section 4. An example, where two TCP
versions are compared for a small wireless network, is
given in Section 5.

Modeling and simulation of communication networks
using Modelica is discussed. Congestion control in
packet-switched networks, such as the Internet, is today mainly analyzed through time-consuming simulations of individual packets. We show, by developing a model library based on a recent hybrid systems
model, that Modelica provides an efficient platform for
the analysis of communication networks. As an example, a comparison between the two congestion control
protocols is presented.

1

Introduction



The Modelica Association

209

Modelica 2002, March 18−19, 2002

Hybrid Modeling of Communication Networks ...

Färnqvist D., Strandemar K., Johansson K.H., Hespanha J.P.

Queue- not - full
q f = s f − rf




rf =






sf
qf
q

q = 0, s < B
B

Queue- full

s≤B ?

q = qmax , s > B ?

otherwise

z := 0

drop f

z =s−B

z = L?



qf = sf −


Figure 1: Communication network.

rf =

2

Communication Networks

q

q

s

drop f

B
z := 0

Figure 2: Hybrid queue model.

A packet-switched communication network can be described by a directed graph. The nodes represent the
routers, which direct the packets from sender to receiver, and the edges correspond to wired or wireless links. Figure 1 illustrates a connection with one
sender and one receiver. The bandwidths of the links
are limited, so each router has a buffer where packets
are stored if more packets are entering the router than
is going out. In this way, it is possible to deal with
minor traffic congestion in the network. If too many
packets enter a router in a short amount of time, however, packets will be dropped due to that the buffer has
finite size. The way this congestion problem is handled by the senders on the Internet is through a control mechanism denoted transmission control protocol
(TCP). The receiver sends acknowledgments back to
the sender, when packets have arrived. In order to efficiently use the network resources, the TCP sender
adjusts it sending rate according to a control variable
called the window size w. The TCP sender sends w
number of packets and waits for acknowledgments for
them to return. Hence, w corresponds to the number
of unacknowledged packets the sender may have in
the network. When the sender has received acknowledgments for all w packets, w is increased by one. If
a packet is dropped (so that no acknowledgment for
that packet is received), w is decreased by a factor two.
Hence, TCP uses additive increase and multiplicative
decrease (AIMD) to regulate the congestion window
size based on explicit acknowledgments and implicit
negative acknowledgments. Although, the AIMD control strategy has proved to be efficient, robust and remarkably scalable for the Internet, it is believed that it
might be too abrupt for emerging applications such as
streaming of audio and video.

Modelica 2002, March 18−19, 2002

qf

qf

210

3 Hybrid Model
In the hybrid model for communication networks proposed by Hespanha et al. [3, 1], the network dynamics
and the TCP dynamics is modeled as hybrid systems
(e.g., [2, 11]). Note that the hybrid model is based on
traffic flows, but is more accurate than a classical flow
model since it handles discrete events such as packet
drops and window adjusting.

3.1 Network Dynamics
Packet transmission rates are in the hybrid model
treated as continuous-time real-valued variables. The
received rate of packets at a router is denoted r and the
sent rate is denoted s. The number of packets stored
in a router queue is denoted q, which is also treated
as a continuous variable. The dynamics of the queue
is depending on if the queue is full (q qmax ) or not
(0 q qmax ). We thus for each router introduce the
hybrid system with two discrete states shown in Figure 2. In this model, subscript f refers to flow f , so
that the windows w f for all flows are updated according to given equations. Moreover, introduce the variables q ∑ f q f and s ∑ f s f , and let the bandwidth
of the outgoing link be equal to a constant B. Note
that when the queue is full, a drop will be generated as
soon as the variable z is equal to the predefined packet
size L. Which flow f of the incoming flows that will
lose a packet is determined by the distribution of the
flows in the queue.




	





The Modelica Association

Färnqvist D., Strandemar K., Johansson K.H., Hespanha J.P.

Hybrid Modeling of Communication Networks ...

60
q
w

Timeout

50

40

packets

Cong.- avoid.

Slow - start

30

20

Fast - recov.

10

0
0

Figure 3: Hybrid TCP model.

0.4

0.6

0.8

1
time

1.2

1.4

1.6

1.8

2

Figure 5: Illustration of congestion avoidance for a
network with a single router. When the queue q (solid)
exceeds qmax 57, one packets is dropped. TCP reduces accordingly the window w (dashed) by a factor
two. Note the characteristic shape of w with intervals
of approximately linear growth and periodic jumps.

drop f ?

Cong. avoid.

0.2



w&

f

=

rf =

1
RTT

f

wf ⋅L
RTT

f

w

f

:=

w

f

2

Figure 4: Simplified model of congestion control in
TCP.

3.2

TCP Dynamics

The hybrid TCP model consists of four discrete states
as shown in Figure 3. We will not detail the continuous dynamics and the transition rules for all states,
but rather focus on the most important discrete state,
namely, congestion avoidance. It is through the congestion avoidance state the additive increase and multiplicative decrease control strategy described in Section 2 is implemented.
Introduce the round-trip time RT T f for flow f as the
time between sending a packet and receiving the corresponding acknowledgment. It is given by the sum of
the physical propagation time and the queueing times.
The sender estimates RT T f and uses it in the congestion control algorithm. Congestion avoidance in TCP
can be described by the hybrid system in Figure 4. If
RT T f is approximately constant, we note that the window size w f grows linearly. The corresponding transmission rate r f for the sender is proportional to w f . If
a drop occur in flow f , the window size is reduced by
a factor two.
Figure 5 shows a simulation of the queue size q (solid)
and the window size w (dashed) for a typical session. When the queue becomes full (q qmax 57),
a packet is dropped and w is reduced by a factor two.
The window size has a sawtooth shape, which is characteristic for TCP flows. The reason why the growth


The Modelica Association



211

Figure 6: Example of a simple communication network implemented in Modelica.
in w is not linear in the beginning of the session is that
RT T varies substantially due to the rapid increase in
q: when q is small RT T is approximately equal to the
physical propagation time, while if q is large packets
spend a relatively large amount of time in the queue.

4 Modelica Implementation
An example of a communication network implemented in Modelica is shown in Figure 6. Two senders
and two receivers are connected to the network. Their
flows are sharing the same link capacity. If the sum
of the flows at some time instance is larger than the
bandwidth of the link, packets will be queued.
The hybrid model described in previous section consists of continuous equations and discrete events.
Modelica was chosen as implementation language

Modelica 2002, March 18−19, 2002

Hybrid Modeling of Communication Networks ...

70

Routing
rf

Färnqvist D., Strandemar K., Johansson K.H., Hespanha J.P.

sf

rf

TCPW
TCP SACK

TCP 2
60

TCP 1

Queue 2
Queue 1

50

40
w

RTT f

30

drop in f?

20

Figure 7: Composition of hybrid communication network model. The network dynamics and the TCP dynamics are separated.
since it supports efficient handling of such models. We
have developed a communication network library. The
library contains standard building blocks for network
simulation, such as TCP senders, routing tables, and
queues. Figure 7 shows the schematic layout of our
communication network model. Note that the network
dynamics and the TCP controllers are separated. The
only information shared between the two submodels
are the sending rates r f , the round-trip times RT T f ,
and the drop events. The modular structure allows an
easy testing of for instance different TCP controllers
applied to the same network topology.
Appropriate handling of the switching between discrete states is important for accurate and efficient
simulation of the hybrid model. Implementations in
Simulink showed some problems in this respect. Our
implementation in Modelica and simulation in Dymola works well. Note that the simulation time is
not depending on the number of flows, but instead
by the number of discrete events generated by packet
drops. The simulation time grows considerably when
the number of discrete events becomes large, which
hence limits the complexity of the model that can be
studied. In ns-2, where individual packets are simulated, the simulation time is also depending on the size
of the packet flows as well as the number of flows.

5

Example

Let us simulate the simple computer network in Figure 6. Sender 1 sends Flow f 1 using a version of TCP
called TCP Westwood (TCPW) [6] and Sender 2 sends
Flow f2 using TCP SACK [3]. TCP SACK corresponds approximately to “standard” TCP used for the
Internet today. The flows are sent over the same wireless link. For a wireless link transmission losses are

Modelica 2002, March 18−19, 2002

212

10

0
0

5

10

time

15

20

25

Figure 8: Simulation of the system in Figure 6. The
windows size for TCP SACK is considerably reduced
when the wireless link is losing a lot of packets (at
about t 5 and t 15), while TCPW is able to cope
with the losses very well.




more likely than for a wired link. For the network in
Figure 6, there can be packet losses both due to that
the router queue is full and due to that the wireless
transmission lose packets. We model the wireless link
as having a good and a bad state. In the good state
0.1% of the transmitted packets are lost, while in the
bad state 10% of the packets are lost. The link stays in
each state a random amount of time, which is exponentially distributed. TCPW was designed taking wireless
links into account, while TCP SACK was designed for
wired links. Next we will see that TCPW might be a
good option for the emerging wireless Internet.
Figure 8 shows the window sizes for a simulation of
the network in Figure 6. The solid line corresponds
to TCPW and the dashed line to TCP SACK. Note the
time intervals at about t 5 and t 15 when the link is
in the bad state. The packet losses due to the bad transmission result in a sudden decrease of the window size
for TCP SACK, while TCPW are able to compensate
for the packet losses of the wireless link. The window size for TCPW is in general larger than for TCP
SACK. This gives a larger throughput for the connection using TCPW, as is shown in Figure 9.
Figure 10 shows the throughput when two TCPW’s are
sharing the same wireless link (upper plots) and when
two TCP SACK’s are sharing the same link (lower
plots). From the simulations we see that the major advantage of TCPW is when the link is in the bad state.
When the link is in the good state, the performance of
both TCP implementations are roughly equal.
Since TCP (SACK) was developed for wired net



The Modelica Association

Färnqvist D., Strandemar K., Johansson K.H., Hespanha J.P.

Hybrid Modeling of Communication Networks ...

7

2

7

x 10

2
TCPW
TCP SACK

1.8

1.6

1.6

1.4

1.4

1.2

1.2

Throughput

Throughput

1.8

1
0.8

0.8
0.6

0.4

0.4

0.2

0.2

5

10

time

15

20

0
0

25

TCPW 1
TCPW 2
TCP SACK 1
TCP SACK 2

1

0.6

0
0

x 10

5

10

15

time

20

25

30

35

Figure 9: TCPW gives a larger throughput than TCP Figure 10: Throughput for two TCP Westwood
SACK. The difference is emphasized when there are a senders (upper plots) and two TCP SACK senders
large number of packet losses due to the wireless trans- (lower plots).
mission.
works, where packet losses arise only due to buffer
overflow, there is a problem using it over wireless
links. The reason is that the window size is reduced
by a factor two every time a drop occurs, regardless if
the drop is due to congestion or to transmission loss.
TCPW has another way of updating the window size
when a drop occurs. The window size is set to a value
based on an estimate of the available bandwidth and
the current round-trip time RT T . Since RT T is highly
dependent on the queue sizes, so that RT T is small if
and only if all corresponding queues are small, a small
RT T implies that a detected drop must be due to wireless loss. The aim of TCPW is hence to utilize the
available bandwidth more efficiently.

References
[1] S. Bohacek, J. P. Hespanha, J. Lee, and K. Obraczka.
Analysis of a TCP hybrid model. In Proc. of the 39th
Annual Allerton Conference on Communication, Control, and Computing, 2001.

[4] V. Jacobson. Congestion avoidance and control. In
Proc. of SIGCOMM, volume 18.4, pages 314–329,
1988.
[5] W. E. Leland, M. S. Taqqu, W. Willinger, and D. V.
Wilson. On the self-similar nature of ethernet traffic
(extended version). IEEE/ACM Transactions on Networking, 2(1):1–15, 1994.
[6] S. Mascolo, C. Casetti, M. Gerla, M. Y. Sanadidi, and
R. Wang. TCP Westwood: bandwidth estimation for
enhanced transport over wireless links. In MobiCom,
Rome, Italy, 2001.
[7] The Network Simulator ns-2.
Information Sciences Institute, University of Southern California.
http://www.isi.edu/nsnam/ns.
[8] V. Paxson and S. Floyd. Wide-area traffic: the failure
of Poisson modeling. IEEE/ACM Trans. on Networking, 3(3):226–244, 1995.
[9] V. Paxson and S. Floyd. Why we don’t know how to
simulate the internet. In Proc. of the Winter Simulation
Conference, 1997.
[10] L. L. Peterson and B. S. Davie. Computer networks:
a systems approach. Morgan Kaufmann, 2nd edition,
2000.

[2] R. W. Brockett. Hybrid models for motion control [11] A. van der Schaft and J. M. Schumacher. An Introsystems. In H. Trentelman and J. Willems, editors,
duction to Hybrid Dynamical Systems. Number 251
Essays in Control: Perspectives in the Theory and Its
in Lecture Notes in Control and Information Sciences.
Applications, pages 29–53. Birkhäuser, Boston, 1993.
Springer-Verlag, London, 2000.
[3] J. P. Hespanha, S. Bohacek, K. Obraczka, and J. Lee.
Hybrid modeling of TCP congestion control. In M. Di
Benedetto and A. Sangiovanni-Vincentelli, editors,
Hybrid Systems: Computation and Control, volume
2034 of Lecture Notes in Computer Science, pages
291–304. Springer-Verlag, Berlin, Germany, 2001.

The Modelica Association

213

[12] J. Walrand and P. Varaiya. High-performance communication networks. Morgan Kaufmann, 2nd edition,
2000.

Modelica 2002, March 18−19, 2002

Modelica 2002, March 18−19, 2002

214

The Modelica Association

Session 8b

Thermodynamic Systems II

The Modelica Association

215

Modelica 2002, March 18−19, 2002

Modelica 2002, March 18−19, 2002

216

The Modelica Association

Steinmann W.D., Zunft S.

A Library for Modelica Applications in Technical Thermodynamics

TechThermo- A Library for Modelica Applications in
Technical Thermodynamics
W.D. Steinmann, S. Zunft
German Aerospace Center (DLR)
Institute of Technical Thermodynamics
Pfaffenwaldring 38-40, 70569 Stuttgart
wolf.steinmann@dlr.de
-

Abstract
This paper describes the development of the Modelica
library TechThermo. This library is intended as a basis
for simulation projects in the area of technical
thermodynamics. TechThermo enhances the efficiency
of simulation activities by providing models describing
essential processes which are not restricted to certain
applications. The library contains connector-definitions,
boundary conditions, basic descriptions of heat and
mass transfer, control volumes, general property
routines and components like turbines or heatexchangers. The structure of models can be controlled
by parameters thus providing the possibility to choose
between different physical descriptions of a process.

Experienced users should profit from TechThermo
primarily by extending the models provided by the
library thus minimizing the amount of trivial equations
needed for describing a physical process. By
standardization of connectors and variable names of
input and output variables the reusability and readibility
of models is enhanced. On the other hand, this library
should allow a quick analysis of thermodynamic
systems without the necessity of major modifications of
the models. This also helps new users to apply Modelica
for the simulation of thermodynamic systems.

1

Introduction

Resulting from the former work with Modelica, some
recommandations for improving the acceptance of a
library can be made:
models should be small and easy to understand

-

models should be numerically robust

-

the dependance on the right choice for the right
initial conditions should be as small as possible

-

the total number of components in a library should
be limited; it’s better to build several smaller
libraries than building a single one containing
everything

-

the time period for developing a library should be
limited

The Modelica Association

Library Structure

TechThermo is organized in a four-level structure.
There are seven main packages, which are stored in
seperate files:

At DLR’s Institute of Technical Thermodynamics
various simulation activities cover projects reaching
from solarthermal power generation to fuel cell systems.
Initial experiences with Modelica show that the
efficiency of the simulation activities can be improved
significantly by definition of a base library containing
models which are not restricted to a special application.
By using such a base library developers working on
differents projects share a common basis and can
concentrate on the physical process which are typical
for a special application while the common basis
undergoes a continuous optimization resulting from the
experience in the different projects.

-

an extensive application of object-oriented
techniques like multiple inheritance doesn’t
improve readability

-

Interface

connectors and general base models

-

Source

boundary conditions

-

Basic

heat/mass transfer, control volumes

-

Medium

thermophysical properties

-

Component basic components

-

Subsystem simplified thermodynamic systems

-

Example

examples

Each of these main packages is divided in sub-packages.
These sub-packages contain models which can be used
without further modifications. If necessary, there are
supporting models and data-records on the fourth level:

217

Modelica 2002, March 18−19, 2002

A Library for Modelica Applications in Technical Thermodynamics

main package

Steinmann W.D., Zunft S.

If there are more than two alternatives parameters of
type Integer are applied. The names of these parameters
start with option_. The alternatives are described in the
info-section of a model. Users don’t have to get along
with names for different replaceable models, the total
number of different models is kept small:

sub-package
model 1
model 2
model 3
package Support

model

support-model 1

parameter Integer opotion_name=1;
.....

support-model 2

equation

package Data

if option_name== 1 then

data record 1
data record 2

//

this part is only activated, if

//

option_name== 1

This structure enhances the orientation of the user
within the library, since the first two levels contain only
packages, while all models which can be used
immediately are concentrated within the third level.

equation 1;
equation 2;
equation 3;
....
end if;

2
Control of Model Structure by
Parameters

if option_name== 2 then

A general-purpose library has to offer a choice between
different descriptions for a physical process to adapt the
model to a certain simulation task. In Modelica
flexibility can be reached by using replaceable models.
In TechThermo, this approach is used to exchange
models which show significant differences. In other
cases, differences in a physical model only affect a
single equation. Here, the usage of replaceable models
seems not to be effective, since the total number of
models will increase significantly. Instead, parameters
are used in combination with if-expressions to influence
the structure of a model. Two different cases can be
distinguished: if there are only two alternatives,
parameters of type Boolean are used to select the
appropriate physical model. In TechThermo, names of
such parameters start with switch_ to distinguish them
from other parameters:

//

this part is only activated, if

//

option_name== 2
equation 1;
equation 2;
equation 3;
....
end if;
if option_name== 3 then

//

this part is only activated, if

//

option_name== 3
equation 1;
equation 2;
equation 3;
....
end if;

model
parameter Boolean switch_name = true;

The switch_ and option_ parameters are declared with
default values describing the standard case, so users can
use the models without modifications of these
parameters. Dymola translates only the parts which are
activated by the parameters, other sections are ignored.
As a result, control of model structure by parameters
doesn’t increase the calculation time. On the other side,
modifications of switch_ and option_ parameters only
become effective after a new compilation.

....
equation
if switch_name then
//

this part is only activated, if

//

switch_name== true
equation 1;
equation 2;
equation 3;
...
end if;

Modelica 2002, March 18−19, 2002

218

The Modelica Association

Steinmann W.D., Zunft S.

3

A Library for Modelica Applications in Technical Thermodynamics

rate: if the velocity of the fluid is zero, no information
about the specific enthalpy of the fluid is available, if
specific enthalpy is calculated from the enthalpy-flow
rate division by zero must be avoided. Temperature as
connector variable doesn’t allow a clear definition of
themal state in the two-phase region, entropy as
connector variable is interesting from a theoretical point
of view but is probably not accepted by all users.

Connectors

The definition of connectors is an essential task during
the creation of a base library. There’s no unique ‚right‘
definition of connectors. In TechThermo four different
kinds of connectors are defined:

mass-flow

heat-flow

thermal state

exergy-flow

m_dot [kg/s]

mass-flow rate

h [J/kg]

spec. enthalpy

p [Pa]

pressure

x_i[-]

vector of massfractions

q_dot [W]

heat-flow rate

t [°C]

temperature

h [J/kg]

spec. enthalpy

p [Pa]

pressure

rho [kg/m³]

density

s [J/kg/K]

spec. entropy

t [°C]

temperature

u [J/kg]

spec. internal
energy

x [-]

steam quality

x_i [-]

vector with
mass fractions

The heat-flow connectors are used for thermal energy
transfer without mass-flow, connector variables are
temperature and heat flow rate.
The state connector transports information about the
thermal state of a system. A characteristic of
thermodynamics is that there are many different options
for describing the themal state. Depending on the
application, different sets of variables are preferred.
While the steam quality is interesting when simulating a
steam generator, it is unnecessary during the analysis of
a gas turbine. A general library like TechThermo must
offer a variety of state variables at the thermal state
connector without urging the user to define all of them
to avoid error messages. The state connector contains
eight different kinds of state variables: spec. enthalpy h,
pressure p, density rho, spec. entropy s, temperature t,
spec. internal energy u, steam quality x and composition
x_i. By using the model NotUsedVariables variables
at the state connector can be equated with default values
thus eliminating the necessity to define them explicitly.
The choice of variables defined by NotUsedVariables
depends on parameters of type Boolean.
The set of connectors is completed by the general
exergy-connectors which transport exergy-flows like
mechanical power or electricity without further
specification of the kind of power-flow.

exergy_dot [W] exergy-flow
rate

There are two connectors of each kind with different
graphical presentation. The mass-flow connector allows
the description of combined heat and mass-transfer.
Specific enthalpy and pressure enable a description of
the thermal state of the flowing medium. The
description of a multi-component flow is possible by the
vector x_i which contains the mass-fraction of each
component. During the development of TechThermo
different alternatives for the mass-flow connector have
been discussed: the definition of individual mass-flow
connectors for different transported media proves not to
be efficient, since the number of connectors became to
high. Instead, an universal mass-flow connector was
defined. While the choice of mass-flow rate and
pressure as connector variables is obvious, alternatives
to specific enthalpy have been discussed. One
disadvantage of specific enthalpy as a connector
variable is that it is neither a ‘through’ nor an ‘across’
variable, a connection of more than two elements
demands a mixing model. This might be avoided by
using enthalpy-flow rate ( product of specific enthalpy
and mass-flow) as a connector variable. The major
drawback of this concept is that information about the
energy in the fluid is always related to the mass-flow

The Modelica Association

3.1
Adapters to Connectors of Modelica
Standard Library
The Connector main package contains a sub-package
with models to join models from the Modelica Standard
Library to models from TechThermo. These adapters
include a connector from each of these two libraries and
define the relation between the variables of the two
connectors.

Fig.
1:
Adapter-model
OutHeatFlowInSignal
transforming signal to thermodynamic connector
variable

219

Modelica 2002, March 18−19, 2002

A Library for Modelica Applications in Technical Thermodynamics

Steinmann W.D., Zunft S.

q_out_dot = OutHeatFlow.q_dot;

Fig. 1 shows the adapter-model OutHeatFlowInSignal
that connects a heat flow connector to the connector
InPort from the Modelica Standard Library. The adapter
is used to transform a general signal provided by model
Ramp to a thermodynamic variable. The thermodynamic
variable is either temperature or heat-flow rate
depending on the value of parameter option_defsignal in
Similar
adapters
are
OutHeatFlowInSignal.
implemented for the other connectors in TechThermo.

t_out =

OutHeatFlow.t;

//relations between connector variables at
//heat_cut1 and heat_cut2 dependant on boolean
//parameters:
if switch_q_dot_const then
0.0 = q_in_dot + q_out_dot;
//heat flow rate remains constant
end if;

3.2

if switch_q_dot_const then

TwoPort Models

t_in = t_out;

Many processes in technical thermodynamics can be
regarded as systems with an inflow and an outflow. As
base classes for models TechThermo provides for all
defined connectors models with an inflow and an
outflow connector. There are two different kinds of
models: while TwoPortCM
only includes two
connectors with different graphical representation,
TwoPort extends TwoPortCM introducing also simple
relations for the corresponding variables of the two
connectors. These relations can be controlled by
parameters. Many processes affect only some of the
connector variables while others remain constant. By
using TwoPort as a base model, the necessity to define
explicitly connector variables which remain constant is
avoided by setting the corresponding parameter values.
For example models describing heat transport can
extend the TwoPort-model for heat flow:

//temperature remains constant
end if;
end TwoPort;

The introduction of variables like t_in, q_in_dot, t_out,
q_out_dot shorts the names of connector-variables.
There are also TwoPort mass-flow elements with
additional connectors for heat flow or exergy flow.
These models offer the option to activate a stationary
energy balance.

partial model TwoPortCM
" partial model heat flow element with two
connectors"
//------------connectors--------------------In InHeatFlow;
Out OutHeatFlow;
end TwoPortCM ;

Fig. 2: Icon for TwoPort-model for heat-flow

4.

Source Models

The Source package contains models representing
boundary conditions in thermodynamic systems.
Boundary conditions can be introduced for all kind of
connectors. The connector variables used as boundary
conditions are selected by parameters thus avoiding the
necessity to define seperate models for various kinds of
boundary conditions.

model TwoPort
"model heat flow element with two connectors"
extends Support.TwoPortCM;
//------------boolean switches for additional
//
equations--------parameter Boolean switch_q_dot_const=false
“if switch_q_dot_const=true then
q_in_dot+q_out_dot=0";
parameter Boolean switch_t_const=false
"if switch_t_const=true then t_in=t_out";
//Internal variables
flow SIunits.HeatFlowRate q_in_dot;
SIunits.CelsiusTemperature t_in;
flow SIunits.HeatFlowRate q_out_dot;
SIunits.CelsiusTemperature t_out;
equation
q_in_dot = InHeatFlow.q_dot;
t_in = InHeatFlow.t;

Modelica 2002, March 18−19, 2002

220

The Modelica Association

Steinmann W.D., Zunft S.

A Library for Modelica Applications in Technical Thermodynamics

The following Modelica-Code shows the definition of a
source for heat flow:

model HeatTransfer
"basic model describing heat transfer "
extends TTInterface.HeatFlow.TwoPort
(switch_q_dot_const=true);

model ParameterDefined
heat-flow source with optional definition of
heat-flow variables by parameters"

SIunits.CoefficientOfHeatTransfer alpha_trans;
parameter SIunits.CoefficientOfHeatTransfer
alpha_trans_const=1000
“if switch_alpha_const==true then
alpha_trans=alpha_trans_const";
parameter SIunits.Area surface_area=1.0
"area normal to direction of heat transfer";

TTInterface.HeatFlow.Out OutHeatFlow;

//------------parameters----------------------//switches for variables at connectors:
parameter Boolean witch_q_dot_def=false
if switch_q_dot_def=true, OutHeatFlow.q_dot is
determined by parameter q_dot_para";
parameter Boolean switch_t_def=false
"if switch_t_def=true, OutHeatFlow.t is
determined by parameter t_para";

//-------switch-parameter------------------parameter Boolean switch_alpha_const=true
“if switch_alpha_const==true then
alpha_trans=alpha_trans_const";
equation

//values for variables at outlet if
//corresponding switch-parameter=true
parameter SIunits.HeatFlowRate q_dot_para=1.0
"value for heat-flow rate HeatFlowOut.q_dot at
outlet if switch_q_dot_def=true";
parameter SIunits.CelsiusTemperature
t_para=25.0
"value for temperature at HeatFlowOut.t at
outlet if switch_t_def=true";
equation
if switch_q_dot_def then
OutHeatFlow.q_dot = q_dot_para;
end if;

if switch_alpha_const then
alpha_trans = alpha_trans_const;
end if;
q_in_dot = surface_area*(t_in t_out)*alpha_trans;
end HeatTransfer;

The model HeatTransferVariable extends the more
basic
parameter
HeatTransfer-model,
switch_alpha_const being set to false and the heat
transfer coefficient alpha_trans is now calculated from
the properties of the fluid and the velocity. There are
two connectors for the mass-flow determining the heat
transfer coefficient. An additional state connector is
needed to introduce the density of the fluid for
calculating the velocity from mass-flow rate.
HeatTransferVariable offers various possibilities for
calculating the heat transfer coefficient, the user can
choose the apporopriate physical model by setting an
option_parameter.

if switch_t_def then
OutHeatFlow.t = t_para;
end if;
end ParameterDefined;

This model allows to select a constant temperature or a
constant heat flow (or both) as boundary conditions. In
addition to models providing constant boundary
conditions, there are also models with an signal input
offering the possibility to control one of the boundary
variables by an external signal source.

5.

Models for Heat and Mass Transfer

Package Basic offers basic models for describing heat
and mass transfer processes. There are models
describing thermal conduction, convective heat transfer
and radiation heat transfer. Depending on switchparameters values for heat conductivity, heat transfer
coefficient or emissivity can be assumed as being
constant or not. The model HeatTransfer extends the
TwoPort-model for heat flow and calculates convective
heat-transfer assuming a constant value for the heat
transfer coefficient. There’s no storage of energy in the
element, so parameter switch_q_dot_const = true, i.e.
q_in_dot = -q_out_dot. The temperature difference
between the inlet and the outlet is calculated from the
heat-flow rate, the area and the heat transfer coefficient:

The Modelica Association

Fig. 3 model HeatTransferVariable with connectors for
mass-flow and thermal state to calculate heat transfer
coefficient.

Similar to the models describing heat transport, the
models included in TechThermo for calculating pressure
loss due to mass flow offer the possibility to choose
between different physical model depending on flow
geometry, accuracy and velocity range.

221

Modelica 2002, March 18−19, 2002

A Library for Modelica Applications in Technical Thermodynamics

6

Steinmann W.D., Zunft S.

Control Volumes
model ControlVolume
parameter Integer n_comp=1;
parameter SIunits.Volume v_control=1;

A proper description of control volumes is essential for
modelling the dynamic behaviour of a thermodynamic
system. In TechThermo, the dynamics of a finite mass
with a single connector is described by the model
ThermalCapacity. The temperature of the system is
calculated from the heat flowing into or out of the
system. Heat capacity and mass of the system can be
determined by parameters c_heat, m_const, but there’s
also the possibility to extend the model and introduce
other definitions for mass or heat-capacity after a
modification of the corresponding switch_parameters.
This might be useful if other parameters are preferrred
(example: pipe with mass calculated from diameter and
density) .

//-connector for thermal state--TTInterface.ThermalState.In
StateCut(n_comp=n_comp);
//connector for inflow or outflow of mass
TTInterface.MassFlow.In
InMassFlow(n_comp=n_comp);

//---------- connector for heat
//transferred to ControlVolume---TTInterface.HeatFlow.In InHeatFlow;

protected
SIunits.InternalEnergy energy;
SIunits.MassFlowRate m_inflow_dot;
SIunits.MassFlowRate m_outflow_dot;
equation

model ThermalCapacity
"control volume finite thermal capacity"
TTInterface.HeatFlow.In HeatCut
SIunits.Mass m;
// mass of thermal capacity
SIunits.SpecificHeatCapacity c_heat;
// specific heat capacity

InMassFlow.p = StateCut.p;
InMassFlow.x_i = StateCut.x_i;
InHeatFlow.t = StateCut.t;

parameter SIunits.Mass m_const=1
“const. value mass if
switch_m_const==true";
parameter SIunits.SpecificHeatCapacity
c_heat_const=500
"const. value heat-capacity if
switch_c_heat_const==true";

energy =
v_control*StateCut.u*StateCut.rho;
der(energy) = m_inflow_dot*InMassFlow.h
+ InHeatFlow.q_dot +
m_outflow_dot*StateCut.h;
v_control*der(StateCut.rho) =
InMassFlow.m_dot;

//
Boolean switches
parameter Boolean switch_m_const=true
“if switch_m_const==true then
m=m_const";

m_inflow_dot = if InMassFlow.m_dot <= 0
then 0.0 else InMassFlow.m_dot;
m_outflow_dot = if InMassFlow.m_dot > 0
then 0.0 else InMassFlow.m_dot;

parameter Boolean
switch_c_heat_const=true
"if switch_c_heat_const==true then
c_heat=c_heat_const";

end ControlVolume;

Model ControlVolume gets information about the
density of the fluid by the state connector StateCut,
usually by an external property routine providing a
relation between internal energy u, density rho and
pressure p, so the model is not restricted to a certain
kind of fluid. The mass-flow can either be positive or
negative, the direction also influences the specific
enthalpy at the mass-flow connector.

equation
if switch_c_heat_const then
//
specific heat capacity is
//
defined by parameter
c_heat = c_heat_const;
end if;
if switch_m_const then
//
mass is defined by parameter
m = m_const;
end if;

7

//
transient energy conservation
HeatCut.q_dot = m*c_heat*der(HeatCut.t);

In technical thermodynamics the calculation of physical
properties plays an important role. Since TechThermo
should be a general purpose library, the routines
included for property calculation are mainly based on
univeral physical models, descriptions optimized for a
certain medium are not applied. For most models, the
characterization of a substance by molar mass and
critical point properties is sufficient. With respect to
calculation time and errors usually introduced by
simplified physical models in other parts, the reduced

end ThermalCapacity;

A general description for a finite volume with a single
mass-flow connector and a heat-flow input is provided
by the model ControlVolume including energy and mass
conservation:

Modelica 2002, March 18−19, 2002

Thermophysical Properties

222

The Modelica Association

Steinmann W.D., Zunft S.

A Library for Modelica Applications in Technical Thermodynamics

The model SaturationTemperature calculates the
saturation temperature from the pressure according to
Antoine, the model EvaporationPressure calculates the
evaporation enthalpy. Together with the models
describing liquid and gaseous state the calculation of
thermophysical properties with a minimum of medium
specific data is possible.

accuracy of general property models seems to be
acceptable.
In TechThermo the property models are seperated from
other model parts, informations are exchanged by a state
connector. Connecting a property model usually
presents the final step in creating a model. The general
models for property calculation are organized in four
sub-packages according to the physical condition:

8
-

Solid

-

Liquid

-

Gas

-

MultiPhase

Main package Component contains models for the
fundamental units of a system in technical
thermodynamics like compressors, turbines, heatexchanger, pipes, valves, tanks or burners. These
models are composed of general basic models and a
specific property routine. For example the general
model for a turbine is model Basic (located in package
Turbine.Support):

Descriptions for the solid and liquid state offer the
possibility to take variations of density into account or
not. Depending on the demanded accuracy, one of the
following models describing the gas state can be
selected:

-

-

-

model Basic
"turbine without specification of working
fluid"
extends TTInterface.MassFlow.TwoPort(
final switch_m_dot_const=true,
final switch_h_const=false,
final switch_p_const=false,
final switch_x_i_const=true);

PerfectGas:
pv=RT, specific heat capacity is constant
low pressure, small temperature variations, far from
saturation temperature
example: dry air at ambient conditions

//----exergy-connector mechanical power
provided by expansion
TTInterface.ExergyFlow.Out PmechCut;
//---------connector for
//thermodynamic properties at inlet
TTInterface.ThermalState.In InletState;

IdealGas:
pv=RT, specific heat capacity is temperature
dependant
medium pressure, significant temperature variation,
far from saturation temperature
example: air in gas turbine

//---------connector for thermodynamic
//properties after ideal expansion----TTInterface.ThermalState.Out
IdealExpansionState;
//---------parameters
parameter SIunits.Efficiency
eta_expansion_const=0.8
"const. efficiency of turbine if
switch_eta_expansion_const==true";

RealGas:
Redlich Kwong equation:

p=

RT
a
− 0 ,5
v − b T v(v + b )

//---------switch-parameters---parameter Boolean
switch_eta_expansion_const=true
"if switch_eta_expansion_const==true
then eta_expansion=eta_expansion_const";

coefficients a and b are calculated from critical
values,
heat capacity is temperature dependant
example: superheated water-steam

protected
SIunits.SpecificEnthalpy dh_ideal;
// spec. enthalpy difference isentropic
//expansion
SIunits.SpecificEnthalpy h_out_ideal;
// spec. enthalpy after isentropic
//expansion
SIunits.Efficiency eta_expansion;

The Redlich-Kwong equation is a cubic equation of
state. In order to determine the correct solution, a cubic
equation solver based on the method of Cardano is
applied. The calculation of caloric values like spec.
enthalpy or entropy demands an equation for the
specific heat capacity dependant on temperature. Since
no general models are available, polynomes (usually
second degree) must be provided for calculating the
specific heat capacity.

The Modelica Association

Components

223

Modelica 2002, March 18−19, 2002

A Library for Modelica Applications in Technical Thermodynamics

Steinmann W.D., Zunft S.

equation
if switch_eta_expansion_const then
eta_expansion = eta_expansion_const;
end if;
InletState.h = h_in;
InletState.p = p_in;
InletState.x_i = x_in_i;
//
thermal state after isentropic
//expansion from p_in to p_out
//
is defined by p2 and entropy
//entropy_inlet_cut.s
IdealExpansionState.p = p_out;
IdealExpansionState.s = InletState.s;
IdealExpansionState.x_i = x_in_i;
h_out_ideal = IdealExpansionState.h;
//
decrease specific enthalpy isentropic
//expansion
dh_ideal = h_out_ideal - h_in;
//
specific enthalpy after real expansion
h_out = h_in + dh_ideal*eta_expansion;
//
mechanical power provided by expansion
PmechCut.exergy_dot = m_in_dot*(h_out h_in);

Fig.4 : Icon for model AirTurbine and internal view
with basic turbine model and two property models.

end Basic;

In this basic version of turbine calculation, the outlet
condition is calculated from the inlet condition by
assuming an isentropic expansion and multiplying the
difference in spec. enthalpy by the efficiency of the
turbine. The calculation demands the knowledge of the
entropy at the inlet, which is provided by state
connector InletState and the thermodynamic state after
the ideal expansion which is provided by connector
IdealExpansionState. In this basic version, the
efficiency of the turbine is determined by the parameter
eta_expansion_const; a more elaborate turbine model
might be implemented by extending Basic, setting
switch_eta_const = false and introducing a calculation
procedure for the efficiency eta_expansion.

9

The package subsystem contains simplified models for
thermodynamic systems like solar collectors or cyclic
processes. These models should be used to complete
systems when the main interest of the simulation
doesn’t focus on the part modelled by the subsystemcomponent.

10

Current Status and Conclusion

The development of TechThermo started during a
project dealing with fuel-cell systems and has taken
advantages of the experiences gained in this area. After
an initial period of theoretical considerations almost all
components identified as essential are implemented.
TechThermo is now applied in two different projects,
one dealing with high temperature thermal storage, the
other dealing with the dynamics of solarthermal steam
generation. Compared to first experiences with
Modelica for simulating thermodynamic systems, the
efficiency of the modelling activities could be improved
significantly thus showing the importance of a common
base library. At the moment TechThermo undergoes a
continuous improvement due to the practical
experiences in the projects. While the total number of
models in TechThermo should remain more or less
constant, future activities will concentrate on the
improvement of the numerical stability of the
components.

The model should now be used for expanding air, the
model AirTurbine extends first the model TurbineMC,
which contains two mass-flow connectors, an exergyflow connector for the mechanical work delivered by
the turbine and the icon presentation of the turbine. The
general tubine model Basic is connected to the outer
connectors, finally the model is completed by joining
two property routines for air to the thermal state
connectors IdealExpansionState and InletState of Basic.

Modelica 2002, March 18−19, 2002

Subsystem

224

The Modelica Association

Fabricius S.M.O., Badreddin E.

Modelica Library for Hybrid Simulation of Mass Flow ...

Modelica Library for Hybrid Simulation
of Mass Flow in Process Plants
S.M.O. Fabricius and E. Badreddin
Swiss Federal Institute of Technology Zurich (ETH), Switzerland
Laboratory for Safety Analysis
fabricius@lsa.iet.mavt.ethz.ch

Abstract
Operation, control and maintenance of large process
plants can be very energy and cost intensive. Optimization of the involved technical, organizational and
dependent economic aspects is a non-trivial, multicriteria problem; solving it can be supported by dynamic plant modeling.
First principles, constitutive and empirical relations
are used to derive quasi-steady-state mathematical
models of ﬂuid storage and ﬂow for a selection of physical components as are typically installed in process
plants. Control logic, both on component and plantlevel, is integrated using high-level hybrid language
constructs of Modelica and in particular, extended
Petri net formalism. The resulting Modelica library
facilitates eﬃcient composition of mass ﬂow models
of potentially large and complex plants and allows for
simulative investigation of plant dynamics.

1

Introduction

Availability of process plants depends mainly on a combination of the reliability of individual installed components, the plant topology, the control system1 and on
the plant maintenance strategy and procedures. Traditional system analysis methods, as know from reliability engineering, e.g., fault tree analysis (FTA), event
tree analysis (ETA), hazard and operability study (HAZOP) and failure mode and event analysis (FMEA)
can lead to signiﬁcant insight into the weak points of
a plant with respect to performance measures as reliability, availability, safety or proﬁtability. However,
these methods lack force of expression when trying to
deal with highly dynamic systems or systems with extensive internal feedback loops. Collaboration with a
partner form industry–on topics of maintenance, fault
detection and monitoring of process plants–has lead to
the insight that performance analysis of complex process plants needs to consider not only static aspects,
but also dynamic ones, not only technical, but also operational, organizational and economic factors as well.
1 Both

automatic control and human operator interaction.

The Modelica Association

225

Petri nets are well suited for modeling of discrete-event
phenomena, and can be used beneﬁcially to investigate
plant availability (as demonstrated e.g., in [Fa01]), but
are inherently far less convenient as a modeling formalism when confronted with physical processes exhibiting
continuous-time behavior. In order to address all above
mentioned aspects of process plant performance, integrated hybrid2 dynamic modeling–unifying diﬀerent
formalisms–is in need.
Modelica 3 , still rather new, with its multi-domain and
multi-formalism modeling capabilities, seems promising in this respect. It deﬁnes a physical object-oriented
modeling paradigm suitable for expressing hybrid behavior and oﬀers respective high-level language syntax
and semantic. It supports hierarchy, reuse of modeling knowledge and provides an open standard, based
upon which, a couple of computer-based tools have already been created or have migrated to4 . Several open,
standard Modelica libraries exist e.g., for electric, mechanic and hydraulic systems. Among other, currently,
a thermodynamics library called “Thermoﬂuid” is being developed, see [Tu98], which could be very useful
for modeling of process plants in the future as well.
In this text, primarily, mass-ﬂow dynamics in process
plants are to be investigated, and for this purpose, a
new, customized library is presented. It contains models of basic equipment needed for ﬂuid–in particular
liquid–transport and storage as well as logic to control
the ﬂow of material. The library considers the ﬂow as
quasi-steady-state, i.e., no momentum balance is formulated; the ﬂow is assumed to reach steady ﬂow conditions instantly based on the current outer pressure
situation and internal pressure drop characteristic.
System-level dynamics are of main interest here, not
the very details of component behavior. This distinguishes it also from the available–partly commercial–
hydraulics library in Dymola, which focuses on hydraulics as used in control systems. Emphasis is on
2 The term “hybrid” is used here to denote combined discreteevent and continuous-time behavior.
3 Modelica is a trademark of the Modelica Association
(http://www.modelica.org
4 In this text, the tool “Dymola” is used;
Dymola
is a registered trademark of Dynasim AB, Sweden,
http://www.dynasim.se

Modelica 2002, March 18−19, 2002

Modelica Library for Hybrid Simulation of Mass Flow ...

Fabricius S.M.O., Badreddin E.

ease-of-use, scalability and extendibility. Models generated with the library can be used for experimental design studies, control scheme optimization, debottle-necking, re-engineering of already commissioned
plants. The paper ﬁrst discusses basic physics and
mathematics of modeling ﬂuid ﬂow components before
addressing implementation in Modelica and giving several modeling and simulation examples.

2

Basic Physics and Mathematics of Quasi-Steady-State
Fluid Flow

dh
1 
qi .
=
dt
A i

(4)

If liquid ﬂows via a pipe and ﬂange (velocity vpipe ) into
a large5 vessel (see ﬁg. 1), the velocity head of the inﬂowing ﬂuid can be considered irreversibly lost due to
turbulent friction (see e.g., [Th99]), i.e., no pressure
is recovered by slowing (process inside the vessel) the
ﬂuid to assumed ﬂow velocity zero6 in the vessel itself7 .

p_vessel

p_pipe
v_pipe

This section brieﬂy describes conservation laws, constiFigure 1: Inflow to a vessel
tutive relations and phenomenological empirical relations as they apply to liquid storage and ﬂow in equipment as typically installed in process plants. Note, For inflow to a tank, extended Bernoulli can be formuliquid density ρ is considered constant throughout the lated as
text.
ρ 2
− ∆pf r,inlet .
(5)
pvessel = ppipe + vpipe
2

2.1

Fundamental Relations for Liquid As indicated, the dynamic pressure is irreversibly lost
Storage and Flow
with inﬂow, therefore, eq. 6 and 7 are valid.

The mass balance for liquid storage is
dM
=
dt



ṁi

∆pf r,inlet =

ρ 2
v
2 pipe

(6)

(1)
pvessel = ppipe .

i

(7)

(with total mass M contained within the reservoir and Irreversible pressure loss involved with outflow of liquid
in- and outﬂow rates ṁ) and the relation describing at a ﬂange of a vessel can be formulated as
pressure drop as a function of volumetric ﬂow rate q is
ρ 2
,
(8)
∆pf r,outlet = Kcon vpipe
2
∆p = f (q).
(2)
The well know Bernoulli equation in its original form
relates mechanical energies of a ﬂuid neglecting fricabrupt
smooth
tion and considering the ﬂuid as incompressible. It
can be extended to include friction (irreversible loss of
pressure head as energy dissipation) as well as addition of ﬂow energy (e.g., by means of pumps or compressors). The sum of pressure-, velocity-, elevation-,
p_vessel
p_pipe
v_pipe
friction- and pump-head remains constant along a ﬂow
trajectory (eq. 3, subscripts f r and pu for “friction”
and “pump” respectively). According to the second
Figure 2: Outflow from a vessel
law of thermodynamics, there is a restriction on the
conversion direction of friction head, it cannot be conand is strongly dependent on the geometric form of the
verted back into other heads without interaction with
ﬂange (see ﬁg. 2). According to [Th99], the contraction
the environment.
coeﬃcient Kcon of an abrupt exit from the vessel to the
outﬂow pipe is Kcon,abrupt ≈ 0.5 whereas for smooth,
tapered outlets it is rather small Kcon,smooth ≈ 0.05.


p v2
∆ppu = const. (3)
+
+ gz +
∆pf r +
5 “Large” in the sense of the tank diameter being much larger
ρ
2

2.2

Fluid Reservoirs

For a container with constant cross section A, the liquid
level obeys

Modelica 2002, March 18−19, 2002

226

than the ﬂange diameter.
6 Velocity “far” away from the inlet to the tank where the
ﬂuid is essentially not moving and undisturbed by turbulence
from the inﬂow process.
7 This is assumed true for both ﬂuid inlets below and above
the surface of the liquid contained in the vessel.

The Modelica Association

Fabricius S.M.O., Badreddin E.

Modelica Library for Hybrid Simulation of Mass Flow ...

Pressure in the pipe and vessel relate for outﬂow as
follows
ρ 2
pvessel = ppipe + vpipe
+ ∆pf r,outlet ,
2

(9)

Re
Re < 2300
2000 < Re < 4000
Re > 4000

which can alternatively be formulated with volumetric
ﬂow rate q to
ppipe = pvessel −

flow regime; relation
laminar; linear
transient
turbulent; e.g., Blasius, Colebrook
Prandtl/Karman/Nikuradse

Table 1: Flow regimes

ρ
2
(1 + Kcon ) qpipe
.
2Apipe

(10) In the turbulent region and for smooth pipes8 , the Blasius relation can be used (eq. 16). Colebrook, KarNote, the relations for pressures and ﬂow velocities are man/Nikuradse and Prandtl/Nikuradse are all implicit
diﬀerent for the cases of in- and outﬂow (eq. 7 and relations, less handy to employ and are therefore not
10). In reality, a physical ﬂange at a vessel can nor- further discussed here.
mally carry both in- and outﬂows depending on the
1
λturb = 0.364 · Re− 4 .
(16)
surrounding pressure situation. Therefore, in a tank
model, a case distinction must be made in order to
determine the pressure drop relation valid for the re- 2.3.2 Valves
spective current ﬂow situation. In this text, ﬂow into
a component is always taken positive (q > 0.0[m3 /s]), A valve shall allow to control ﬂuid ﬂow by changing the
valve opening and as a consequence the ﬂow resistance
in accordance with Modelica conventions.
across the valve. Usually the coeﬃcients kv and kvs are
used with valves; kv indicates how much ﬂuid–usually
in [m3 /h]–passes the valve at an outer pressure gradi2.3 Flow Resistors
ent of ∆p = 1 [bar] at a certain opening position of the
When a ﬂuid ﬂows through a ﬂow conduit, frictional valve and k indicates the ﬂow when the valve is fully
vs
eﬀects lead to pressure drops along the ﬂow trajec- open. The relation for the fully open valve is given in
tory. In many ﬂow armatures, e.g., pipe elbows and eq. 17.
bends, oriﬁces, diﬀusers and nozzles, the relation be
tween pressure drop and ﬂow velocity can be described
q = kvs · |∆p| · sign(∆p)
(17)
by eq. 11 with pressure drop coeﬃcient ζ as a function
of Reynolds number Re and the geometry of the ﬂow A continuous control valve shall enable to control ﬂuid
channel (eq. 12). In technical applications, ζ is often ﬂow over the whole continuous range of opening posiassumed constant for varying ﬂow rate for many ﬂow tions possible in the valve. kv in this case is a function
(eq. 18) of the valve opening position x (normalized
armatures.
to [0..1]) and kvs and has a characteristic depending
ρ
dp = ζ · · v 2
(11) on the type and construction of the control valve (e.g.,
2
linear, equal-percentage).
ζ = ζ(Re, geometry)

kv = kv (kvs , x)

(12)

(18)

Power control valves are driven by valve positioners
(servo), which can be described by a ﬁrst order ex2.3.1 Pipes
ponential lag with time delay τ , relating actual valve
The pressure drop in a pipe is customarily described travel x to demanded valve travel xd by
by
dx
(19)
τ
= −x + xd .
L ρ 2
dt
∆p = λ ·
(13)
· v
D 2

2.4

Pumps

with pipe length L, pipe diameter D, ﬂow velocity v
and pipe friction factor λ. Depending on the magni- Pumps can be seen as compensators for pressure drops
tude of Re in the pipe
to drive a ﬂuid through its ﬂow channel. Two idealized pump characteristics are shown in ﬁg. 3 and 4. An
|v|D
ideal flow source is an abstraction of the behavior of
Re =
,
(14)
volumetric pumps (piston, displacement pump), which
ν
have a very steep relation between pressure increase
diﬀerent relations are to be used for λ, see table 1.
and ﬂow across the pump. The idealized characteristic
The linear relation for laminar ﬂow regime is
λlam

The Modelica Association

64
=
.
Re

(15)

227

8 Most commercial pipes for process industry applications can
normally be considered “smooth”, if not, the Colebrook relation
must be used which accounts for relative roughness /D.

Modelica 2002, March 18−19, 2002

Modelica Library for Hybrid Simulation of Mass Flow ...

Fabricius S.M.O., Badreddin E.

flow SI.VolumeFlowRate q;
is simply qpump = qsource , independent of the pressure
gradient. The other idealized representation is that of end Flange
an ideal pressure source (centrifugal pump type). Its
Currently, ﬂuid properties are considered constant for
parameter can be set as height ∆hsource (head rise),
all library components. The respective parameters are
which determines the pressure rise in the pump (indedeﬁned in an abstract class and given here, for the case
pendent of the ﬂow rate).
of water:

∆ppump = ∆hsource · ρ · g

(20)

dp

dp

Boundary conditions can either be set for pressure or
for ﬂow, the class icons are shown in ﬁg. 7.

dp_source

q_source

q

Figure 3: Flow source

partial model Fluid
constant SI.Density rho=1000.0;
constant SI.KinematicViscosity nu=1.0e-6;
end Fluid

q

Figure 4: Pressure source

Figure 6: Connector
Figure 7: Boundaries
More detailed and realistic pump models are described
in the literature and not explicitly discussed here due
to lack of space. A model for a centrifugal pump is
e.g., presented in [Ge85] as a ﬁrst order model with 3.2 Flow Resistors
nonlinear algebraic constraint equations.
The components presented in this subsection are all
modeled as purely resistive, i.e., no mass capacitance
indicated earlier–no momentum balance is for3 Modelica Library Implemen- and–as
mulated.

tation
3.2.1 Pipes
Having described the basic physics, this section is concerned with ﬂuid ﬂow component modeling to created With eq. 13 for pressure drop in a pipe and with eq.
a Modelica library. Its structure is organized in com- 15 for friction factor λlam , a linear relation for pressure
pliance with Modelica rules, grouping interfaces, vari- drop ∆plam in laminar pipe ﬂow results as
ous component types and example models in diﬀerent
(21)
∆plam = klam · v
packages, see ﬁg. 5.
with coeﬃcient
klam = 0.32 · D−2 · νLρ.

(22)

For turbulent ﬂow, the respective non-linear relation is
∆pturb = kturb · sign(v) · |v|7/4

(23)

kturb = 0.182 · D−5/4 · ν 1/4 Lρ.

(24)

with

The question of how to model the transient region
(Re = [2300..4000]) arises. In reality, the ﬂow will
change from laminar to turbulent depending on the
particular pipe geometry, ﬂow disturbances, surface
3.1 Connector, Boundary Conditions particularities in a somewhat random and discontinuous fashion. Here, a linear model is used to connect
and Fluid Properties
laminar to turbulent ﬂow behavior, according to eq. 25
A connector called “Flange” (ﬁg. 6) deﬁnes the poten- and 26 for positive and negative ﬂow velocity respectial variable p for pressure and the ﬂow variable q for tively9 .
volumetric ﬂow rate:
9
Figure 5: Library structure

Of course, other approaches are possible as well, in particular
some with “smooth” transfers, but this linear model is feasible
for the investigation purposes in mind.

connector Flange
SI.Pressure p;

Modelica 2002, March 18−19, 2002

228

The Modelica Association

Fabricius S.M.O., Badreddin E.

Modelica Library for Hybrid Simulation of Mass Flow ...

3.2.3

Valves

∆ptrans = −k1trans + k2trans · v

(25) Valves for diﬀerent valve characteristics are modeled.
The one depicted in ﬁg. 10 has a linear characteristic
kv = kvs · x (ﬁg. 9) with a ﬁrst order servo for the
(26) valve positioner. Note, to avoid numerical problems,
∆ptrans = k1trans + k2trans · v
the valve is modeled to always have a small leakage10 ,
The two coeﬃcients k1trans and k2trans can be calcu- even for an input signal demanding for complete valve
lated satisfying the conditions (eq. 27, 28) at the ﬂow closure. The respective minimum opening valve travel
regime transition points. Depending on the current x
min can be set to zero if desired and if feasible with
ﬂow velocity, the ﬂow regime is determined in the pipe the system model topology.
model using the “if-statement” of Modelica for automatic detection of transition points (state events).
kv [m3/h]

∆plam |Re=2300 = ∆ptrans |Re=2300

(27)

∆ptrans |Re=4000 = ∆pturb |Re=4000

(28)

If the pipe connects ﬂanges of diﬀerent geographical elevations, an additional term ∆pg is included in the pipe
model to account for gravitational pressure diﬀerence
∆pg = ρg∆z.

at dp=1 [bar]

kvs

0.0

1.0

x

Figure 9: Linear char.

(29) 3.2.4

Figure 10: Valve

Other Flow Resistors

An idealized linear (eq. 31) and a general quadratic
resistor (eq. 32) are implemented as well.

Figure 8: Horizontal and elevated pipe; bend
Fig. 8 displays the pipe component icons. The arrow is
intended to indicate the default positive ﬂow direction
of the ﬂuid in the pipe. This, in order to facilitate setting reasonable starting values for ﬂow velocity to help
the execution algorithms ﬁnd consistent initial values
at the beginning of a simulation.
3.2.2

Bends

∆plin = k · v

(31)

ρ 2
∆pgen = ζ vbf
.
2

(32)

The linear resistor can be useful for simulation test
purposes, e.g., when nonlinearities in a model cause
problems calculating consistent initial conditions. The
pressure loss coeﬃcient ζ can be chosen in order to
model oriﬁces, venturi pipes or any other armature for
which the pressure loss coeﬃcient is known. Standard
texts on ﬂuid dynamics, e.g., [Yo01] or publications
from ﬂow armature manufacturers list loss factors for
diﬀerent forms of armatures.

The pressure drop across pipe bends (ﬁg. 8, on the
right) can be formulated as multiples of velocity heads 3.3 Pumps
(subscript “b” for bend)
Fig. 11 shows icons of pumps modeled as ideal ﬂow and
pressure source as well as a more detailed centrifugal
ρ
∆pf r,b = kbf vb2 .
(30) pump model.
2
[Th99] lists some numerical values for kb , see table 2.
type of bend
Standard 45◦ bend
Standard 90◦ bend
180◦ bend

frictional loss kb
0.35
0.75
2.2

Figure 11: Pump models

Table 2: Examples of friction factors for pipe bends

The Modelica Association

10 Possibility of small leakage is also implemented in other armatures allowing otherwise for complete ﬂow interruption.

229

Modelica 2002, March 18−19, 2002

Modelica Library for Hybrid Simulation of Mass Flow ...

3.4

Fabricius S.M.O., Badreddin E.

Tanks

4.1

A variety of tanks have been modeled. Here, a tank
with constant cross section, open to atmosphere with a
ﬂange at the top and one at the bottom is illustrated.
The pressure distribution in such a tank is given in
eq. 33 (liquid level h, vertical elevation z in the liquid
space, pressure ps at the surface of the liquid).

Introductory Demonstration Models

Tank Emptying Fig. 14 shows a model consisting
of a tank with a pipe connected to its lower ﬂange.
Boundary conditions set the pressure at the outlet of
the pipe to ambient pressure and the inﬂow rate at the
upper ﬂange to zero. Initial tank level is hs = 5.0m. As
expected, during simulation, the tank level decreases
1
p(z) = (ps + ρgh) −
·z
(33) and it can be seen in ﬁg. 15 that the tank becomes
ρgh
empty after about 6000s (pipe of 4cm inner diameter
For an open tank, surface pressure equals ambient presand 10m length).
sure ps = p∞ . The pressure at the bottom of the open
tank therefore is
p|z=0 = p∞ + ρgh.

(34)

Figure 14: Model one

Figure 12: Open tank

Figure 13: Sensors

Fig. 12 gives a graphical representation of this tank
model. Output connectors are added to signal tank
level (LI) as well as low and high level alarms (Boolean
signals; LAL, LAH). Note, this tank model imposes no
constraints on its level and does allow both liquid inand outﬂow at its lower ﬂange, depending on the gradient of inner to outer pressure conditions. Clearly, the
upper ﬂange is always above the liquid surface in the
tank (unless the tank is completely full), and therefore,
no liquid outﬂow is possible at the top.

3.5

Figure 15: Emptying

Tank Level Equalization In the next model, two
tanks of the same dimensions are connected with a pipe
at their lower ﬂanges (ﬁg. 16). Initial levels are h1,s =
8.0m and h2,s = 2.0m. There is no inﬂow to the tanks
at their upper ﬂanges. During simulation, the levels
approach and equalize, as can be seen in ﬁg. 17.

Additional Models

A variety of additional component models were created, among them, sensors (ﬁg. 13 shows ﬂow and
pressure indicators, realized with or without sensor dynamics), no-return valves (analog to the diode in the
electric domain), various switches and commutators to
control ﬂuid routing, pipe diameter changes, tanks with
constraints on levels and ﬂow directions at it’s ﬂanges,
pressurized tanks and relief valves. Some of the models
are thoroughly tested, others have a somewhat experimental character.

Figure 16: Model two

Figure 17: Equalization

Flow Inversion in a Pipe The model of ﬁg. 16 is
used again. This time, rather strong liquid inﬂow at
the upper ﬂange of tank 2 is imposed as a step q2,in =
0.01m3 /s at time t = 1000s. Fig. 18 and 19 show the
tank levels, the inﬂow step and the ﬂow rate in the
connecting pipe. As can be seen, the behavior of the
model is initially identical to the one illustrated above,
4 Modeling and Simulation Ex- after 1000s, the level in tank 2 increases faster due to
the liquid added at its upper ﬂange and surpasses the
amples
level of tank 1 after about 1550s, at which point in
A few–rather simple–models shall ﬁrst be given to time the ﬂow in the pipe is inverted. The simulation
demonstrate the basic functionality of the library, be- runs without numerical trouble through the point of
fore progressing to more comprehensive applications.
ﬂow inversion.

Modelica 2002, March 18−19, 2002

230

The Modelica Association

Fabricius S.M.O., Badreddin E.

Figure 18: Tank levels

4.2

Modelica Library for Hybrid Simulation of Mass Flow ...

Figure 19: Step, flow

Laboratory Test-bed

A somewhat larger and more complex model is made
of a laboratory test-bed which is currently installed
at our institute. It consists of three tanks, a variety
of connecting horizontal and vertical pipe segments,
a pump and four continuous control valves. Fig. 20
Figure 22: Test bed: Commissioning phase
depicts the PI11 ﬂow diagram, ﬁg. 21 gives a 3-D view
(CAD-draw from the planning phase) and ﬁg. 22 shows
the test-bed in its recent early commissioning phase12 . cluded in the model (PID-type controllers with limA respective Modelica/Dymola model is shown in ﬁg. ited output and anti-windup from the standard Modelica library with continuous control valves as actua23.
tors). The valves all have positioning dynamics (1storder lag) with time constants τ = 1s (fast valve
with pneumatic drive) and kvs = 40m3 /s for LC and
kvs = 15m3 /s for FC. LC shall keep the levels in the
upper tanks “Tleft” and “Tright” at their desired setpoints (Tlef t,sp = 0.4m, Tright,sp = 0.5m). FC is used
to control the ﬂow rate through the pump (centrifugal pump, modeled as an ideal pressure source with
hydraulic head of ∆hpump = 80m). After some simulation experiments, PID control parameters (gain k,
integrative and derivative time constants Ti and Td )
were chosen as indicated in table 3.
LC

Figure 20: PI scheme of test-bed
FC

k
Ti
Td
k
Ti
Td

50
5
0.1
100
5
0.1

Table 3: Controller parameters
Fig. 24 and ﬁg. 25 show the upper tank levels and the
respective control valve positions for a simulation experiment of 400s duration. Initial levels of the upper
tanks are set to hlef t,s = 0.3m and hright,s = 0.6m.
A step is imposed on the set-point of the ﬂow controller, at time t = 200s (increase from qsp1 = 0.00175
to qsp2 = 0.00275m3 /s). With the controller parameters given above, the levels are kept at their set-points
Figure 21: 3-D picture of the test-bed
in a satisfactory fashion.
It can be seen in ﬁg. 23, the system topology (as illusFor control scheme investigation, one ﬂow (“FC” for trated in the PI ﬂow diagram and on the fotograph) is
ﬂow control) and two level (“LC”) controllers are in- maintained in the Modelica model. The model presents
itself in a graphical manner so that its structure can be
11 Process and Instrumentation.
12 The design in the ﬂow diagram and the actual realization of
very quickly and intuitively understood. This is inherthe test-bed diﬀer somewhat, but this is not of importance here. ent to the physical object-oriented modeling paradigm

The Modelica Association

231

Modelica 2002, March 18−19, 2002

Modelica Library for Hybrid Simulation of Mass Flow ...

Fabricius S.M.O., Badreddin E.

Figure 23: Dymola model of testbed

Figure 24: Levels in the upper tanks

Figure 25: Level control valve positions

of Modelica and regarded as very beneﬁcial. The eﬀort
necessary to compose the test-bed model with the library presented was minor. Compare this to the workload if the modeler had to analytically and manually
derive the overall system equations! Such a proceeding would probably be time-consuming and error prone
even for this still rather simple three-tank model, especially because there is non-linearities and hybrid phenomena to account for as well. The library therefore
can greatly reduce the modeling burden and increase
eﬃciency of carrying out engineering design tasks (in

this case, controller design and investigation of dynamic behavior).

Modelica 2002, March 18−19, 2002

232

Furthermore, it has been shown ( e.g., in [Ti00]) that
the Modelica modeling approach allows to scale models
to many thousands, if not hundreds of thousands of
deﬁning equations. This is of great importance if trying
to model large and complex systems.
The presented test-bed is not yet operational in reality; it will be interesting to validate the model against
experimental data and possibly reﬁne it at a later time.

The Modelica Association

Fabricius S.M.O., Badreddin E.

Modelica Library for Hybrid Simulation of Mass Flow ...

Figure 26: Plant model top view

4.3

Modeling of Mass Flow in a Process The loading of the reactor with raw material is organized by control logic in the block “Loading” and the
Plant
transfer of the reactor content after reaction is completed is controlled by block “Transfer”; the internals
of the latter are shown ﬁg. 27. As can be seen, the control logic is realized with Petri net formalism, based on
the Modelica library described in [Mo98]. In particular,
the reaction duration is modeled as delayed transition
ﬁring (transition “TReactionDelay”)14 .

For purposes of maintenance management in process
plants, it is advantageous to have a good knowledge of
plant dynamics. Process plants often can be considered as interconnected ﬂow segments where the linking
elements are vessels13 . Since the ﬂow segments are decoupled from each other to some degree (depending on
the sizes of intermediate buﬀer vessels as well as on the
throughput capacities of ﬂow segments), it can be beneﬁcial to take mass ﬂow dynamics into account when
deﬁning maintenance strategies and scheduling maintenance tasks.
Fig. 26 illustrates a model of a plant with both a batch
and continuous part, consisting of a tank with raw materials, a reactor, a buﬀer tank enabling synchronization between batch and continuous part, two intermediate tanks in the continuous part and a large storage
vessel for the ﬁnal product. Note, it is not necessary
to see all the details in ﬁg. 26, rather, the aim is to
illustrate the overall plant structure and the modeling
concept.

Two types of ﬂow segments are deﬁned, namely, a ﬂow
and a level controlled variant (“FCPlantSeg”, “LCPlantSeg”). Without going into details, it shall be said

13 An abstraction into ﬂow and storage elements as basic modeling blocks is extensively used in systems dynamics, e.g., see
[Fo61].

14 The Modelica Petri net library was extended in this context,
supporting timed stochastic Petri nets and places with multiple
token capacity, this aspect will be published in the near future.

The Modelica Association

233

Figure 27: Transfer control logic

Modelica 2002, March 18−19, 2002

Modelica Library for Hybrid Simulation of Mass Flow ...

Fabricius S.M.O., Badreddin E.

here, the segments can contain whatever non-storage library component presented so far, but normally consist
of at least a ﬂow driver (pump), ﬂow resistor (process
steps and pipes) as well as control logic. The ﬂow segment blocks receive measured ﬂow or level signals, reference values as well as level alarms from neighboring
vessels as inputs. In addition, an external Boolean signal can be supplied to indicate ﬂow interruption, which
can be useful to include deterministic or stochastic
component and subsystem failure models in the plant
model.
A simulation experiment with a ﬂow interruption in
the middle ﬂow segment (“LCPlantSeg1”) is carried
out for a total simulation duration of 3000 time units.
Fig. 28 shows the resulting tank levels, it can be seen
how the level in the reactor and the subsequent buﬀer
tank ﬂuctuate. As well, the eﬀect and propagation of
the ﬂow interruption (1000 to 1800 time units) in the
plant is shown.

acteristic times in a system such as a process plant.
E.g., components often have life-times (between component failures or preventive overhauls) in the range of
month to years, whereas the time constants of buﬀer
tanks are minutes to hours, the controller and actuator dynamics seconds to minutes. If models were to be
used for maintenance strategy optimization accounting
for plant mass ﬂow dynamics, it is desirable to have
models which allow for rapid progress in simulation
time for normal, nominal system behavior, switching
to others, more detailed ones, in the case of faults or
failures; multi-mode models are needed for this.
Another non-trivial topic is initial value calculation, especially as here for the case of quasi-steady state ﬂow
models, where nonlinear algebraic equations must be
solved for iteratively, to calculate consistent initial conditions. The tool Dymola seems to be quite sensitive to
choice of starting values, which is inconvenient in large
models. It is hoped, the tool will be further equipped
with even stronger algorithms in the future to support
the simulation analyst in this respect.

References
[Ge85] Geiger G. (1985). Technische Fehlerdiagnose
mittels Parameterschätzung und Fehlerklassifikation am Beispiel einer elektrisch angetriebenen
Kreiselpumpe. VDI Verlag, Düsseldorf, Germany
[Fa01] Fabricius S.M.O., Badreddin E. (2001).
Stochastic Petri Net Modeling for Availability
and Maintainability Analysis. Proceedings of 14th
COMADEM, September 2001, Manchester, UK
[Fo61] Forrester J.W. (1961). Industrial Dynamics.
M.I.T. Press and John Wiley & Sons, New York,
U.S.A.

Figure 28: Tank levels in the plant

Plant control strategy, ﬂow segment throughput capac- [Mo98] Mosterman P.J., Otter M., Elmqvist H.:
ities and tank sizes all inﬂuence the sensitivity of the
(1998). Modeling Petri Nets as Local Constraint
plant to interruptions (e.g., caused by component failEquations for Hybrid Systems Using Modelica.
ures or maintenance action) in ﬂow segments , which
Summer Computer Simulation Conference, July
can be analyzed with models as just described. The
19-22, S. 314-319, 1998 Reno, Nevada, U.S.A.
situation of course is yet more interesting if internal
[Ti00] Tiller M., Bowles P. et al. (2000). Detailed Vefeedback loops are present in the plant.
hicle Powertrain Modeling in Modelica. First int.
Modelica Workshop 2000, October 23 - 24, 2000,
Lund University, Lund, Sweden
5 Conclusion and Outlook
[Th99] Thomas P. (1999). Simulation of Industrial
A library for mass ﬂow simulation in process plants
Processes for Control Engineers. Butterworthwas presented and it has been shown how it can be
Heinemann, Oxford, UK
used to eﬃciently generate models of possibly large and
[Tu98] Tummescheit H., Eborn, J. (1998). Design of
complex systems.
a Thermo-Hydraulic Model Library in Modelica.
The presented plant models could be extended
The 12th European Simulation Multiconference,
to include important energy exchanging equipment
ESM ’98, June 16-19, 1998, Manchester, UK
(heaters, coolers), more detailed component models as
well as stochastic Petri nets for component failure and [Yo01] Young D.F., Munson B.R., Okiishi T.H. (2001).
repair processes.
A brief introduction to fluid mechanics. John WiAn important question to be dealt with in the future, is
ley & Sons, New York, U.S.A.
how to eﬃciently handle the great bandwidth of char-

Modelica 2002, March 18−19, 2002

234

The Modelica Association

Jensen J.M., Tummescheit H.

Moving Boundary Models for Dynamic Simulations of Two−Phase Flows

Moving Boundary Models
for Dynamic Simulations of Two-Phase Flows
Jakob Munch Jensen† and Hubertus Tummescheit‡
†

‡ Department

Department of Mechanical Engineering
Technical University of Denmark
jmj@mek.dtu.dk

of Automatic Control
Lund University, Sweden
hubertus@control.lth.se

Abstract
Two-phase flows are commonly found in components
in energy systems such as evaporators and boilers. The
performance of these components depends among others on the controller. Transient models describing the
evaporation process are important tools for determining control parameters, and fast low order models are
needed for this purpose. This article describes a general moving boundary (MB) model for modeling of
two-phase flows.
The new model is numerically fast compared to discretized models and very robust to sudden changes in
the boundary conditions. The model is a 7th order
model (7 state variables), which is a suitable order for
control design. The model is also well suited for open
loop simulations for systems design and optimization.
It is shown that the average void fraction has a significant influence on the system response. A new method
to calculate the average void fraction including the influence of the slip ratio is given. The average void
fraction is calculated as a symbolic solution to the integral of the liquid fraction profile.

1

Introduction

First principle mathematical models of dynamical systems are made for a range of purposes, but one of
the most common ones is to develop and verify controllers. The complexity of the model should be in accordance with the purpose of the model and this simple principle suggests that models for control design
should be of low order and preferably easy to linearize.
Unfortunately, physical systems are not sticking to this
class of models, on the contrary: most mathematical
first principle models are of distributed nature. The
natural way to describe such a model is partial differ-

The Modelica Association

235

ential equations (PDE). PDE are infinite dimensional
and their common numerical approximations, spatially
discretized PDEs using one of the many possible discretization schemes, are of high order and without further model reduction not well suited for control design. The problem of control-oriented modeling is to
derive a model which at the same time fulfills the requirements of control theory and characterizes those
features of the system which are needed to satisfy the
controller specification.
Moving boundary models for two phase flows in heat
exchangers are a good example of low order control
design models. They can be used for evaporators, condensers and steam generators. Their only disadvantage is that a number of mathematically rather different
models arise depending on the operating conditions of
the heat exchanger and the fluid conditions at the inlet
of the equipment.
The model presented in this paper covers the most general case of two-phase heat exchangers with subcooled
liquid at the inlet and superheated vapour at the outlet.
This flow configuration is commonly found in thermal
power systems, and the model can easily be extended
to condensers and heat exchangers with subcooled liquid at the inlet and two-phase at the outlet. The special
case of dry-expansion evaporators for refrigeration has
been derived in [6].
The idea of a moving boundary model is to dynamically track the lengths of the different regions in the
heat exchanger: the length from the inflow to the onset of boiling and the length of the two phase region.
Simulation results are given for an evaporator in an
organic rankine cycle, which utilizes the waste heat
from a gas turbine in a small power plant. Other references to MB models include B.T. Beck that describes
a MB-model for incomplete vaporization [2], a two region MB-model by He [4] and a three region model by
Willatzen [7].

Modelica 2002, March 18−19, 2002

Moving Boundary Models for Dynamic Simulations of Two−Phase Flows

Equations (2), (4) and (5) are the differential balance
equations, which will be integrated over the three regions to give the general three region lumped model
for a two-phase heat exchanger. A schematic of the
model is given in Figure 2. It is assumed in the following analysis that the change in pressure along the
evaporator pipe is negligible.

Roman and Greek Letters
A
Cv
Cw
D
L
S
Vcyl

area
nozzle coef.
heat cap. of wall
diameter
length
slip ratio
cylinder volume

h
ṁ
q
t
v
x
z

enthalpy
mass flow
heat flux
time
velocity
mass fraction
length coordinate

α
η
ηv
γ
µ

heat transfer coef.
liquid fraction
volumetric efficiency
void fraction
density ratio

ρ
ω
Φ
Ψ

density
pump speed
dissipation function
vapour generation

i
in
l
o
out
r
w

inner
inlet
saturated liquid
outer
outlet
refrigerant
wall

Jensen J.M., Tummescheit H.

Subscripts
1
2
3
12
23
amb
c
g

subcooled
two-phase
superheated
interface 1-2
interface 2-3
ambient
condensation
saturated gas

Figure 1: Schematic of the Three Region MB-model.
1 : subcooled, 2 : two-phase and 3 : superheated.

Superscripts








2.1

flux per length
flux per volume


flux per area


Mass Balance for the Subcooled Region

Integration of the mass balance (2) over the subcooled
region gives

Table 1: Notation used in the Moving Boundary Model

L1


∂ Aρ
dz
∂t


2

0

Governing Equations

The general differential mass balance is
∂ρ
∂t

∇ ρv










0
	

(1)

which for the one-dimensional case can be written as
∂Aρ
∂t

∂ṁ
∂z


∇ ρhv










	

∇ q










q


Dp
Dt




0





∂ṁ
dz
∂z

0
	

(6)

Applying Leibniz’s rule (see Appendix A) on the first
term and integrating the second term give for a constant area pipe:
A

d
dt

L1


0

ρdz

Aρ L1




dL1
dt


ṁ12




The general differential energy balance is
∂ρh
∂t





ṁin
	

0


(7)

(2) The density at the interface ρ L1 is equal to the saturated liquid density ρl . Pressure and mean enthalpy h̄1
define the state of the subcooled region where

0
	

L1




Φ


(3)

1
hin
2

h̄1
	



hl




(8)


which can be simplified by neglecting the axial conThe inlet enthalpy hin is known from the boundary
ductivity, radiation and the viscous stresses and assumconditions and hl is a function of the pressure. The
ing one dimensional flow:
mean density in the subcooled region is approximated
by
∂ṁh
∂ Aρh Ap
πDα Tw Tr
(4)
1 L1
∂t
∂z
ρdz ρ p h̄1
(9)
ρ̄1
L1 0
A simplified differential energy balance for the wall is
achieved by setting all flow terms in (3) equal to zero The mean temperature is calculated from the same
states as T̄1 T p h̄1 . The mass balance for the suband neglecting the axial conductivity.
cooled region can be rewritten as
∂Tw
αi πDi Tr Tw αo πDi Tamb Tw
Cw ρw Aw
dL1
d ρ̄1
∂t
L1
ṁin ṁ12
(10)
A ρ̄1 ρl
(5)
dt
dt










	









	



















	





















	







Modelica 2002, March 18−19, 2002

236

The Modelica Association

Jensen J.M., Tummescheit H.

Moving Boundary Models for Dynamic Simulations of Two−Phase Flows

L1
where ρ̄1 h̄1 ρ1 h1
0 ρhdz. The above equation
(15) is inserted into the energy balance (14), which
gives the final energy balance for the subcooled region:

The term d ρ¯1 dt is calculated using the chain rule:





d ρ̄1
dt

∂ρ̄1 d p ∂ρ̄1
∂p h dt ∂h̄1
∂ρ̄1
1 ∂ρ̄1
∂p h 2 ∂h̄1
1 ∂ρ̄1 dhin
2 ∂h̄1 p dt


d h̄1
dt
dhl d p
p d p dt




























p









(11)



1
A
2

ρ̄1 hin




hl






dL1
dt

2ρl hl






∂ρ̄1
dhin
∂h p dt
dhl
hin hl
ρ̄1
dp






ρ̄1 L1















The term dhin dt is determined from the boundary
conditions to the heat exchanger model. The expression for d ρ̄1 dt is inserted into the mass balance (10),
such that the final mass balance for the subcooled region reads:

L1








dhl d p
p d p dt






















2.3














h

dhl
p dp






ṁ12 hl






dp
dt

2





	

πDi L1 αi1 Tw1




T̄r1






Mass and Energy Balances for the TwoPhase and Superheated Regions





1 ∂ρ̄1
2 ∂h



ṁin hin




(16)





∂ρ̄1
∂p



dL1
∂ρ̄1
1 ∂ρ̄1
L1
A ρ̄1 ρl
dt
∂p h 2 ∂h̄1
1 ∂ρ̄1 dhin
ṁin ṁ12
L1
2 ∂h̄1 p dt











(12) The mass and energy balances are integrated over the
two-phase region and the superheated region using the
2.2 Energy Balance for the Subcooled Region same procedure as for the subcooled region. The equations are derived in detail in Appendix B.
Integration of the energy balance (4) over the sub- The flow in the two-phase region is assumed to be hocooled region gives
mogeneous at equilibrium conditions with a mean den1 γ̄ ρl , where the void fraction is
sity of ρ̄ γ̄ρg
L1 ∂ Aρh Ap
L1 ∂ṁh
A
defined
as
γ
g A. The average void fraction is dedz
dz
1 L1 L2
∂t
∂z
0
0
γdz and is assumed to be invari(13) fined as γ̄ L2 L1
L1
ant
with
time.
A
detailed
model of the calculation of
πDα Tw Tr dz
0
the void fraction is derived in section 2.5. The mass
balance for the two-phase region is
Applying Leibniz’s rule on the first term and integrating the other terms give for a constant area pipe and a
L1
dL2
1 γ̄ ρl ρg
A ρl ρg
constant heat transfer coefficient α
dt
dt
dρ
dρ
d
p
L
1
g
l
dL1
dp
d
L2 γ̄
1 γ̄
ṁ12 ṁ23
ρhdz Aρ L1 h L1
AL1
A
dp
d p dt
dt 0
dt
dt
(14)
(17)
ṁ12 hl ṁin hin πDi αi1 L1 Tw1 T̄r1






	





	




















	

































	















































and the energy balance for the two-phase region is

The first two terms are evaluated as
d
dt

L1
	

0


ρhdz

dL1
dt
dL1
ρl h l
dt

ρ L1 h L1










d
ρ̄1 h̄1 L1
dt
1
dL1
ρl h l
ρ̄1 hin hl
2
dt
1
1
∂ρ̄1
hin hl
L1 ρ̄1
2
2
∂h̄1
1
dhl
hin hl
L1 ρ̄1
2
dp
∂ρ̄1
1 ∂ρ̄1 dhl
dp
∂p h 2 ∂h̄1 p d p
dt




































p


dhin
dt

(15)

















dp
dt

1









(18)



















Tr2














237











The Modelica Association

γ̄













1

The derivative of the properties at the phase boundaries are written in a short notation and can be rewritten as e.g. d ρg hg d p hg dρg d p ρg dρg d p .
Both d ρg hg d p and d ρl hl d p can be calculated







































d ρg h g
dp








d ρl h l
dp
dL1
γ̄ρg hg 1 γ̄ ρl hl
dt
dL2
1 γ̄ ρl hl ρg hg
dt
ṁ12 hl ṁ23 hg πDi αi2 L2 Tw2

A L2 γ̄













Modelica 2002, March 18−19, 2002

Moving Boundary Models for Dynamic Simulations of Two−Phase Flows

Jensen J.M., Tummescheit H.

from the pressure. The mass balance for the super- The wall temperature in the model is discontinuous at
L1 giving
heated region reads:
1 ∂ρ̄3
2 ∂h̄3

dhg ∂ρ̄3
dp
A L3
p dp
∂p h dt
dL1
dL2
ρg ρ̄3
ρg ρ̄3
dt
dt
1 ∂ρ̄3 dhout
ṁ23 ṁout
L3
2 ∂h̄3 p dt














Tw L1




(19)







dL1
dt
dL1
Tw1 for
dt













Tw L1


Tw2 for









0

(24)



0












Similar expressions are derived for the walls adjacent
to the two-phase and the superheated regions see Appendix B. Typically in the literature a simplified mean
value for Tw L1 has been used, which seems attractive in order to simplify the model see e.g. [4] and [7].
Simulations show that the response times for the system for some test conditions depend significantly on
the expression for Tw L1 , and the full equations given
by (23) and (24) should therefore be used.
The general three region moving boundary model is
described by the mass and energy balances for the
flow stated in equations (12), (16), (17), (18), (19) and
(20) and the energy balances for the wall regions as
stated in equations (23), (49) and (51). In addition the
two discontinuous equations for the wall temperatures
as stated in (24) and (50) are needed. This equation
system contains 9 equations with the 7 state variables:
L1 L2 p hout Tw1 Tw2 and Tw3 . The variable hin ,
which also appears differentiated, is calculated as a
boundary condition and is thus not included in the
state variables for the MB-model. Dependent variables
can be calculated from the state variables and include:
ρ̄1 ρl ρg ρ̄3 ∂ρ̄1 ∂h̄1 p ∂ρ̄1 ∂p h dρl d p dρg d p
∂ρ̄3 ∂h̄1 p ∂ρ̄3 ∂p h h̄1 hl hg h̄3 dhl d p dhg d p T̄r1
Parameters
are conT̄r2 T̄r3 ṁ12 ṁ23 .
stant
during
simulation
and
include:
A Di Do αi1 αi2 αi3 αo γ̄ L Tamb Cw ρw Aw . The
boundary models calculate the variables ṁin ṁout hin
and dhin dt , which are boundary conditions to the
MB-model.







The energy balance for the superheated region is given
by



A




1
ρ̄3 hg
2

dL1 dL2
ρg h g
hout
dt
dt
1
1 ∂ρ̄3 dhg ∂ρ̄3
L3
hg hout
2
2 ∂h̄3 p d p
∂p h
1 dhg
dp
ρ̄3
1
2 dp
dt
1
1 ∂ρ̄3
dhout
hg hout L3
ρ̄3 L3
2
4 ∂h̄3 p
dt
ṁ23 hg ṁout hout πDi αi3 L3 Tw3 T̄r3
















































(20)

































The mean properties of the superheated region are
calculated in the same way as in the subcooled region. Thus h̄3 0 5 hg hout , ρ̄3 ρ p h̄3 and
T̄r3 T p h̄3 .








2.4























Energy Balance for the Wall Regions

The energy balances for the walls are derived. Integration of the wall energy equation (5) from α to β gives































β


α

Cw ρw Aw

∂Tw
dz
∂t

β




αi πDi Tr


α
β


Tw dz


αo πDi Tamb





α



(21)



Tw dz






Applying Leibniz’s rule, assuming constant wall properties give and rearranging gives the general energy
balance for a wall region:
Cw ρw Aw




β







Tw

α


dTw
dt
Tw β





Tw α











Tw


dβ
αi πDi β
dt
α Tamb Tw




2.5
α Tr









Tw


αo πDo β














dTw1
dL1
Tw1 Tw L1
Cw ρw Aw L1
dt
dt
αi 1πDi L1 Tr1 Tw1
αo πDo L1 Tamb


























Modelica 2002, March 18−19, 2002



































Calculation of the Average Liquid Fraction η̄

The liquid fraction in the two phase region η z is related to the void fraction γ z via the equation
ηz










γ z






1

(25)


The same equation holds for the average values η̄ and
γ̄ over the whole region, which are the parameters of
interest. It is computed as the integral over the normalized profile. For the derivation of a η z profile, a
Tw1
(23) couple of assumptions are necessary:










For the wall region adjacent to the subcooled region
α 0 and β L1 , which gives










(22)























dα
dt

















238

The Modelica Association

Jensen J.M., Tummescheit H.

Moving Boundary Models for Dynamic Simulations of Two−Phase Flows

1. All assumptions made in the derivation of the where
ρg
Ψ
moving boundary model apply also to the derivaand µ
Ψ
ρ
A
ρl
l
tion of the liquid fraction profile, in particular that
The boundary conditions at the length coordinates z
a constant pressure is assumed along the pipe.
0 0 and z 1 0 are
2. The profile can be evaluated under steady state
conditions. For the purpose of slow, start-up tran1
η1
0
(30)
η0
sients as well as for linearization purposes this
does not pose any restrictions. This means in par- From (28), (29) and the boundary conditions, the following function for η z can be derived:
ticular that the pressure is in steady state.








	



	



	











3. The vapour generation rate Ψ is uniform over the
evaporator length.

ηz









	



1




1

z


z


1
Sµ





(31)

1




4. The slip velocity ratio S ug ul between the The influence of the slip ratio S on the amount of satgas and the liquid velocities is constant along urated liquid in the evaporation region, η̄ can seen in
the evaporator length and a known function of Figure 2. η z can be integrated symbolically to give:
the model states that also can be evaluated under
Liquid Fraction Η over z for S  1, 3, 5, and 7 and Μ  0.01
steady state conditions1.






1

∂ Al ul
∂z
∂ Ag ug
ρg
∂z
ρl







Ψ

0

Ψ





0.2

0.4
0.6
DimensionlessLength z

(27)


0.8

1

Figure 2: Liquid Fraction η z along the normalized
evaporation region.




















∂ ηu
∂z
∂ 1 ηu
µS
∂z




















Ψ

Ψ




1


η̄


η z dz


0



Sµ Sµ






1 ln Sµ
Sµ 1 2












(32)



This η̄ can only be used together with the dynamic
model from the previous section when the time derivative of η̄ can be neglected. This holds for slow pressure
transients. The density ratio µ is a unique and simple
function of the pressure, but for the slip ratio S a number of empirical correlations are available to choose
from. Because of the assumptions made above, we
have to choose a slip ratio which is independent of the
(28) local void fraction or mass fraction. A simple and appealing correlation is the one from Zivi (1964) cited
(29) in [9] which minimizes the total kinetic energy flow
locally at each position z along the pipe:

1 Remark: It is possible to weaken this assumption and use a
slip ratio S z which is a function of the length coordinate. Many
of the rather complex empirical slip correlations depend on the local mass fraction x ṁg ṁ as well and in this case the profile and
the integral over the profile can only be solved numerically. For
certain applications this may result in the most accurate approximation of the mean void fraction.


S  7.0

0





S  5.0
0.4

(26)


Ψ is the net generation of saturated vapour per unit
length kg ms , Al and Ag are the cross sectional areas taken up by liquid and vapour respectively and the
densities are independent of the length coordinate because we assumed no pressure loss and steady state
conditions for the pressure. This equation is normalized by setting A Al Ag 1 and letting the length
of the evaporation region run from 0 to 1 so that the
cross section area Al z is now equivalent to the liquid
volume fraction η z . Then, replacing ul with u and ug
with Su and dividing by ρl the following normalized
equation is obtained:


S  3.0
0.6

0.2





S  1.0
0.8
liquid fraction Η

A similar derivation but assuming a slip velocity ratio
of 1 has been done in [3]. Under the above assumptions, the following coupled ODE boundary value
problem holds:





S


ug
ul




ρl
ρg

1 3





µ1



3

(33)

	



The Modelica Association

239

Using this slip correlation, the average liquid fraction
in the pipe becomes a function of only one variable,

Modelica 2002, March 18−19, 2002

Moving Boundary Models for Dynamic Simulations of Two−Phase Flows

the density ratio µ.
1


η̄


η z dz


0



1




1 µ

2 3

2 3 ln 1 µ














1 µ

2 3











1

one for each of the lengths of the subcooled and
the two-phase regions. These are a combination of the mass and energy balances for the respecitive region.


2



1

Jensen J.M., Tummescheit H.

(34)
Three more eigenvalues come from the energy
Both the density ratio µ and the slip S approach 1 when
balances of the evaporator walls.
the pressure is rising toward the critical pressure. In
the limit, the liquid and vapour densities are equal as In [1] Bauer derived a more detailed, distributed model
well as the flow speeds, so that a mean liquid fraction of heterogeneous flow2 and validated it against meaof 0 5 is expected, compare the plot of η̄ in Figure 3. surement data for the refrigerant R22. According to
[1], the advantage of the heterogenous model over the
0.5
homogeneous one is that the void fraction turns out to
0.4
be more realistic. Therefore, the dominant time constants are modeled more accurately. The average void
0.3
fraction 1 η̄ has a strong influence on the total fluid
mass in the evaporator, as can be seen clearly from
0.2
Figure 4. It can be concluded from this argument that


liquid fraction Η





0.1

0.45

0
0.2

0.4
0.6
Density ratio Μ

0.8

1
0.4

Figure 3: Average Liquid fraction η̄ as a function of
the density ratio µ.

3

Dominating Time Constants of the
Linearized Model

In this section the influence of some model parameters on the eigenvalues of a linearization of the system derived in section 2 is investigated. Models for
fluid flow exhibit two types of time constants: fast, hydraulic time constants for disturbances traveling with
the speed of sound and much slower thermal ones,
whose disturbances move at the flow speed. In two
phase flows, the coupling between thermal and hydraulic phenomena is much tighter than in one phase
flows, because a change in the hydraulic pressure is
tightly coupled to a change in the temperature. The
eigenvectors reveal that the 7 eigenvalues are tightly
coupled, but roughly their physical interpretation is as
follows:

Mass in the 2 phase zone

0

0.35

0.3

0.25

0.2

1

2

3

4

5

Velocity Slip

6

7

8

Figure 4: Total mass in the two-phase region as a function of velocity slip.

the void fraction γ̄ is a crucial parameter in the moving
boundary model. Using a good approximation of the
void fraction, which may be obtained from a detailed,
distributed model like in [1], is important for obtaining
realistic dynamic behaviour.
The slow modes in the overall system are mostly influenced by the wall temperatures: higher heat capacities
and smaller heat transfer coefficients result in slower
modes. This means that the slowest mode usually is
governed by the pipe wall in the liquid region. Two
model parameters with a large influence on the slow
one mode comes from the overall mass balance time constants are the void fraction γ̄ and the ratio
of the evaporator which depends on the ratio be- of the total heat capacities of fluid and pipe walls of
tween the total mass and the sum of the mass the evaporator pipes. The latter depend on the system
flows in and out of the evaporator and
pressure and the pipe diameter. Correct estimation of
one for the overall energy balance which depends
2 Heterogeneous flow means that the flow speeds of the gas and
on the ratio of the total heat capacity to the sum liquid phases can be different. A homogeneous flow assumption
of convective and heat transfer energy flows,
is equivalent to the same flow speed for both phases.

Modelica 2002, March 18−19, 2002

240

The Modelica Association

Jensen J.M., Tummescheit H.

Moving Boundary Models for Dynamic Simulations of Two−Phase Flows

the void fraction gets more important at lower pressures because the slip increases due to smaller density
ratio µ and the heat capacity of the pipes is usually
smaller due to thinner pipe walls.
The root locus plot in Figure 5 shows the slow eigenvalues of the system, which are the dominating ones
for control design purposes. These vary significantly
when the slip ratio S (and thus the void fraction) is
varied from 1.0 to 8.0. In the example with approx.
31 bars the pressure is relatively high for the working
fluid R22 and therefore the slip ratio is not very far
from 1. Nonetheless, the slow eigenvalues move considerably on the root locus. The change in the model
dynamics will be larger at lower pressures.
0.2

0.1

0

The model derived above is still too complex and has
too many states for some purposes, e. g., online dynamic optimization as it is done in Model Predictive
Control (MPC). There are several ways to reduce the
number of states in the moving boundary model. One
possibility is to assume that the 2-phase heat transfer
coefficient is much higher than the outer heat transfer
coefficient so that the wall temperature and the fluid
temperature in the evaporation region are equal. This
assumption may also be extended to the subcooled
and superheated regions. The model will loose accuracy in the high frequency range but will be very
similar to the full model at low frequency range. Another possible simplification is to get rid of the states in
the superheated region, because it is usually short and
contains only few percent of the fluid mass. The dynamic model for the region can be replaced by a semiempirical algebraic relation for the superheat temperature, see [4]. Investigation of these options for model
reduction is the goal of future work by the authors.

4.1

Boundary Models

−0.1

The test simulations for the heat exchanger are performed for a simple cycle containing a pump that sup−0.2
plies the liquid flow into the evaporator and a nozzle
−0.8
−0.7
−0.6
−0.5
−0.4
(turbine) at the end of the evaporator. The pump model
Figure 5: Root Locus for the slow eigenvalues. Dia- is defined by a simple expression for the mass flow
monds mark a slip ratio of 1.0, stars a slip ratio of the
(35)
ṁ pump ηv ρ pumpVcyl ω
test case of 1.7. Slip ratios vary from 1.0 to 8.0.




where ηv is the volumetric efficiency, ρ pump is the inlet
density to the pump, Vcyl is the cylinder volume and ω
is the number of revolutions per second. The specific
4 Model Variants
enthalpy at the inflow of the evaporator is hin and is a
constant
below the saturated liquid enthalpy.
The main effect of using a velocity slip estimate to calculate the average void fraction is an improved model The model of the nozzle is computed as:
of the fluid mass in the evaporator. In a model for con(36)
ṁnozzle Cv ρout p pc
trol design around a narrow operating pressure – the
short transient case – a constant void fraction based
where Cv is a coefficient, ρout is the outlet density from
on the profile derived above, will give sufficiently acthe evaporator, p is the pressure in the evaporator and
curate results. Different slip correlations than the one
p is a constant pressure lower than p.
from above and numerical quadrature can be used to c
find a good estimate of the mean void fraction. A fixed
void fraction will be less adequate when “long” tran- 5 Simulation Result
sients over wide pressure ranges are to be simulated.
During the simulation of the start-up of a near- or su- The evaporator in an organic rankine cycle (ORC)
percritial once-through boiler, which is a classical case is simulated using the three region moving boundary
for a moving boundary model (see [3]), the density ra- model and the models for the pump and the nozzle.
tio µ will change by 3 orders of magnitude. In that The simulation program Dymola [5] has been used to
case the simple slip correlation S µ1 3 works well to perform the simulations. The ORC is used to conmodel the fluid mass in the evaporator.
vert thermal energy to electric energy in applications















The Modelica Association

241

Modelica 2002, March 18−19, 2002

Moving Boundary Models for Dynamic Simulations of Two−Phase Flows

6

3.25

3
−10

0

10

20

30

40

50

60

70

80

0

10

20

30

40

50

60

70

80

90

L1 [m]
L2 [m]

3
2.5

L3 [m]

20

30

Time

40

50

60

70

80

90

The length of the subcooled and the two-phase region
is seen to increase as the pump speed is increased (at
t=0s). Also the pressure and the heating effect is increased which is expected. An increase in outer heat
transfer (at t=30s) results in shorter two-phase and superheated regions as well as in increased heating effect. The larger nozzle coefficient (t 60 s) results in
a decrease in pressure. The reduced pressure lowers
the boiling point and thus the fluid temperature in the
evaporation region. The length of the subcooled region
is therefore shrinking. The length of the two-phase region grows in this case but this trend depends on the
conditions. The lower evaporating temperature tends
to decrease the length of the two-phase region and the
larger latent heat increases it. The heating effect rises
in this case, but this trend depends on the conditions
as well. The model gives the right trends even though
no experimental data has been available to validate the
model.

8.5



2

1.5
−10

10

90

9

8
−10

0

Figure 7: Pressure in the evaporator

9.5

0

10

20

30

40

50

60

70

80

90

Time

Figure 6: Lengths of the three regions
Pump and nozzle parameters
ηv 0 6 [-]
ω 60 [r ps]
Vcyl 1 30E




5 [m3 ]




Cv
pc

3 76E 5 [m2 ]
1 4 [M pa]






Evaporator steady state results






























Q
ṁ
p
Tw1
Tw2
Tw3
Tr1
Tr2
Tr3
L1
L2
L3








122







163 [kW ]
0 54 [kg s]
3 6 [M pa]
388 8 [K]
371 7 [K]
449 5 [K]
306 0 [K]
352 3 [K]
384 0 [K]
39m
87m
24m












120

Total heating effect in kW

L 15 [m]
Di 0 020 [m]
Do 0 022 [m]
Cw 385 [J kgK]
ρw 8 96E3 [kg m3]
αi1 2451 [J m2 K]
αi2 11404 [J m2 K]
αi3 2071 [J m2 K]
αo 500 [J m2 K]
Tamb 573 1 [K]
S 1 67 [-]
γ̄ 0 665 [-]


3.1

4

3.5
−10



3.15

3.05

4.5



x 10

3.2

Pressure [MPa]

with small temperature differences between the high
and the low temperature heat sources. The ORC can
thereby be used to improve the energy efficiency in
gas turbine power plants by converting the waste heat
energy in the exhaust gas to electricity. Simulation results for a test case of an evaporator pipe are shown in
Figure 6 to Figure 8.

Jensen J.M., Tummescheit H.











118
116
114
112
110



108
−10

Table 2: Parameters and steady-state results

0

10

20

30

40

Time

50

60

70

80

90

Three experiments are performed with parameters and
Figure 8: Heating effect to the evaporator
initial steady state results in table 2. At t 0 s the
pump speed ω is increased by 5%, at t 30 s the outer
heat transfer coefficient αo is increased by 10% and at
5.1 Conclusions
t 60 s the nozzle coefficient Cv is increased by 10%.
Figure 6, 7 and 8 show the transient response of the A new moving boundary model has been presented
describing the dynamics of two phase heat exchangsystem.






Modelica 2002, March 18−19, 2002

242

The Modelica Association

Jensen J.M., Tummescheit H.

Moving Boundary Models for Dynamic Simulations of Two−Phase Flows

ers with liquid at the inlet and vapour at the outlet.
The new model is numerically fast compared to discretized models and very robust to sudden changes in
the boundary conditions. The model is a 7th order
model (7 state variables), which is a suitable order for
control design. The model is also well suited for open
loop simulations for systems design and optimization.
It is shown that the average void fraction has a significant influence on the system response. A new method
to calculate the average void fraction including the influence of the slip ratio is presented. The average void
fraction is computed from the symbolic solution to the
integral of the liquid fraction profile.

Energy Balance for the Two-Phase Region
The energy balance (4) is integrated over the twophase region from L1 to L1 L2 . Applying Leibniz’s
rule gives for a constant area pipe


d
dt

A

L1 L2


ρhdz

	

L1

Aρ L1 h L1








dL1
dt
L2



d L1
dt
πDi αi2 L2 Tw2


Aρ L1


L2 h L1




ṁ23 hg





ṁ12 hl








L2



dp
dt
d p (41)
AL2
dt
AL1











Tr2




The first term is evaluated as
d L1 L2
d L1 L2
ρhdz
γρg hg 1 γ ρl hl dz
dt L1
dt L1
d
γ̄ρg hg 1 γ̄ ρl hl L2
Appendix A: Leibniz's Rule
dt
d ρg h g
d ρl h l d p
Leibniz’s rule for differentiation of integrals with time
L2 γ̄
1 γ̄
dp
dp
dt
varying limits reads ([8]):
dL2
γ̄ρg hg 1 γ̄ ρl hl
dz2
dz1
d z2
dt
f z t dz f z2 t
f z1 t
dt z1
dt
dt
(42)
(37)
z2 ∂ f z t
Inserting (42) into (41) gives the final energy balance
dz
∂t
z1
for the two-phase region as state in (18).




	

	









































































































Appendix B: Derivation of the Model Mass Balance for the Superheated Region
Equations
Mass Balance for the Two-Phase Region

The mass balance (2) is integrated over the superheated region from L1 L2 to L which for a constant
area pipe gives


The mass balance (2) is integrated over the two-phase
region from L1 to L1 L2 Applying Leibniz’s rule
gives for a constant area pipe

L


∂Aρ
dz
L2 ∂t



d
A
dt

L1 L2


	

dL1
ρdz Aρ L1
dt
d L1 L2
Aρ L1 L2
dt
ṁ23 ṁ12 0




L1



(38)















L1
	

L1 L2
	

∂ṁ
dz
∂z

0


(43)

Applying Leibniz’s rule on the first term and integrating the second term give for a constant area pipe
d
A
dt


L

d L1 L2
L2
dt
ṁout ṁ23


L1 L2

ρdz

Aρ L1




	





L












0 (44)









The flow is assumed to be homogeneous at equilibrium The mean density in the superheated region is ρ3
conditions with a mean density of ρ γ̄ρg 1 γ̄ ρl . 1 L
ρ p h3 , which inserted in the mass
L3 L1 L2 ρdz
The mass balance for the two-phase region becomes
balance (44) gives
d
dL1
dL2
dρ3
dL1
dL2
ρ2 L2
ρl ρg
ρg
A
ρg ρ3
ρg ρ3
A L3
dt
dt
dt
(39)
dt
dt
dt
ṁ12 ṁ23
ṁ23 ṁout (45)
1 γ̄ ρl . The time derivative of ρ2
where ρ2 γ̄ρg
The derivative of ρ3 is calculated as
is
dρg
dρl d p
dρ2
dρ3 ∂ρ3 d p ∂ρ3 dh
(40)
γ̄
1 γ̄
dt
dp
d p dt
dt
∂p h dt
∂h p dt
which inserted into the mass balance (39) gives the fi1 ∂ρ3 dhg ∂ρ3
d p 1 ∂ρ3 dhout
nal mass balance for the two-phase region as stated in
2 ∂h3 p d p
∂p h dt 2 ∂h3 p dt
(17).
(46)






















	



















































































































The Modelica Association

243

Modelica 2002, March 18−19, 2002

Moving Boundary Models for Dynamic Simulations of Two−Phase Flows

Jensen J.M., Tummescheit H.

3
The expression for dρ
dt is inserted into (45), which For the wall region adjacent to the superheated region
gives the final mass balance for the superheated region α L1 L2 and β L, which inserted in (22) gives
as stated in (19).
dTw3
dL1
Tw L1 Tw2
Cw ρw Aw L3
dt
dt
Energy Balance for the Superheated Region
dL1 dL2
Tw L1 L2 Tw3
dt
dt
The energy equation 4 is integrated over the superαi 3πDiL3 Tr3 Tw3
αo πDo L3 Tamb Tw3
heated region from L1 L2 to L. Applying Leibniz’s
(51)
rule gives for a constant area pipe
























































A

d
dt

L


ρhdz

L1 L2

Aρ L1


L2 h L1






L2




d L2
dt




	

dp
ṁout ho ut ṁ23 hg
dt
πDi αi3 L3 Tw3 Tr3

AL3
















L
L1 L2

ρhdz

d
ρ̄3 h̄3 L3
dt




	



References


[1] Olaf Bauer, Modelling of Two-Phase Flows with
Modelica, Masters Thesis ISRN LUTFD2/TRFT–
5629–SE, Department of Automatic Control,
Lund University, November 1999.
(47)
[2] B.T. Beck and G.L.Wedekind, A generalization of
the system mean void fraction model for transient
two-phase evaporation flows, Int. J. of Heat Transfer 103 (1981), 81 – 85.

The first term is calculated as
d
dt





1
d L1 L2
ρ̄3 hg hout
2
dt
1
d ρ̄3
L3 hg hout
2
dt
1
dhg d p dhout
ρ̄3 L3
2
d p dt
dt
















(48)


















[3] S. Bittanti, M. Bottinelli, A. De Marco, M. Facchetti, and W. Prandoni, Performance Assessment
of the Control System of Once-Through Boilers,
Proceedings of the 13th Conference on Process
Control ’01, June 2001.



[4] X.D. He and S. Liu, Multivariable Control of
where h̄3 12 hg hout and ρ̄3 ρ p h̄3 . Equation
Vapor Compression Systems, HVAC Research 4
d ρ̄3
(1998), 205 – 230.
(48) and the expression for dt from equation (46) is
inserted into (47), which after some rearranging gives
[5] http://www.dynasim.se.
the final energy balance for the superheated region as
stated in (20).
[6] J.M̃. Jensen and H.J. Hoegaard Knudsen, A new
moving boundary model for transient simulations of dry-expansion evaporators, Proceedings
Energy Balance for the Walls
of the 15th International Conference on Efficiency,
For the wall region adjacent to the two-phase region
Costs, Optimization, Simulation and Environmenα L1 and β L1 L2 , which inserted in (22) gives
tal Impact of Energy Systems, July 2002.






















dTw2
dt

Cw ρw Aw L2


Tw L1







Tw2





Tw2


Tw L1


αo πDo L2 Tamb

Tw L1 is given by (24), and Tw L1




Tw L1

L2





Tw L1




L2









L2








dL1
dt


αi 2πDi L2 Tr2












Tw2




[8] N.E. Todreas and M.S Kazimi, Nuclear Systems
I, Thermal Hydraulic Fundamentals, Taylor and
Francis, 1993.



Tw2




L2 is given by

dL2
Tw3 for
dt
dL2
Tw2 for
dt

Modelica 2002, March 18−19, 2002

dL2
dt



[7] N.B.O.L. Pettit M. Willatzen and L. PlougSørensen, A general dynamic simulation model for
evaporators and condensers in refrigeration, Int.
(49)
J. of Refrigeration 21 (1998), 398 – 414.



0


[9] P.B. Whalley, Boiling, Condensation and GasLiquid Flow, 1987.
(50)

0


244

The Modelica Association

Session 9a

Mechatronic Applications

The Modelica Association

245

Modelica 2002, March 18−19, 2002

Modelica 2002, March 18−19, 2002

246

The Modelica Association

Hellgren J.

Modelling of Hybrid Electric Vehicles in Modelica for Virtual Prototyping

Modelling of Hybrid Electric Vehicles in Modelica for
Virtual Prototyping
Jonas Hellgren
Machine and Vehicle Systems
Chalmers University of Technology, SE-412 96, Gothenburg, SWEDEN
jonas.hellgren@me.chalmers.se, www.mvd.chalmers.se/~jonash/
Abstract: This paper presents a Modelica library made for the simulation of Hybrid Electrical Vehicles
(HEVs). The library consists of vehicle models, component models and models of surrounding systems. An
overview of the models within the library is given and some models are described more in detail. The major
purpose of the vehicle models is to predict vehicle characteristics, especially fuel consumption, for a given
vehicle and driving cycle. Modelica has been found useful for the simulation of HEVs.

1 Introduction
Environmental concerns and the decrease in cost of
electrical components make Hybrid Electrical Vehicles (HEVs) more and more competitive. The major
difference between conventional vehicles and HEVs
is the presence of a buffer for temporary storage of
energy in HEVs. The buffer enables regenerative
braking and makes the Primary Power Unit (PPU)
more or less decoupled from the wheels. This gives a
potential for reducing fuel consumption and emissions.
Prototyping is necessary for the design and evaluation of HEVs. It is very expensive and time consuming to build real prototypes. Virtual prototyping
(computer simulation) is therefore an almost necessary complement. The aim of this paper is to describe
a library, developed in Modelica, whose purpose is to
evaluate HEVs. In the future, the library can be
extended with more components and configurations.
Modelica [1] is a language for modelling physical
systems. It is a standard proposed by an international
association. Modelica can handle problems in different areas, e.g. mechanics, electricity, chemistry, fluid
dynamics and control theory.
The total system of an HEV is very complex. To
achieve reasonable computation time, fairly simple
models should be used. Another reason for using
simple models is that fewer parameters are needed. It
will be easier to update models in the future if fewer
parameters are used. A rule of thumb when modelling is to use a model that is as simple as possible but
still sufficiently accurate.

The Modelica Association

247

2 Modelling of different HEV
configurations
HEVs can be configured in numerous ways. The
arrangement, type and size of components result in a
huge number of combinations. The most common
way to categorize HEVs is by using the definitions of
series and parallel HEVs. In series HEVs, there is no
mechanical connection between the PPU and the
wheels. In parallel HEVs, a part of the engine torque
affects the wheels directly. This nomenclature is not
always easy to adopt, however, because some driveline configurations are neither clear series nor parallel ones. For example, the classification of split
HEVs is debatable.
The library includes four different types of HEVs.
The arrangements are illustrated on a large scale in
Figure 1.
2/ Series HEV

1/ FC series HEV
FC

ELM

CH

ENG

ELM

CH

B

B

4/ CVT parallel HV

3/ Split HEV
ENG

G

PG

CH

G

ELM
B

ENG

CH

CVT

ELM
Gear

B

Fig. 1: HEV configurations. Acronyms: ENG engine,
FC fuel cell, B buffer, G generator, ELM electric
machine, CH chassis, PG planetary gear and CVT
continuous variable transmission. Dashed lines
represent electrical connections and continuous lines
represent mechanical connections.

Modelica 2002, March 18−19, 2002

Modelling of Hybrid Electric Vehicles in Modelica for Virtual Prototyping

The reasons for choosing these HEV types are:

2.1 Example of simulation of an HEV

• They are subject to industrial projects. For example, the first HEV ever built for the public market,
Toyota Prius, is a split HEV.

• The configurations allow the engine to work at its
optimal line.
The reason why a series HEV can work at its optimal
line is explained by the fact that the PPU is totally
decoupled from the wheels. In other configurations,
such as the parallel CVT and split hybrid, a transmission between the engine and wheels makes the
engine speed controllable.
The relation between the vehicle and the surrounding
systems is illustrated in Figure 2. The environment
emits a driving cycle, i.e. speed and slope as functions of time. The driver controls the vehicle in such
a way that the desired speed is managed. Figure 3
shows the implementation of a split HEV in Modelica.

Driver

desired
speed

Hellgren J.

This section presents an example of a simulation of a
series HEV. The vehicle has a fuel cell as the primary
power unit and a super capacitor as the buffer. A city
bus is chosen as an example. Information about the
component sizing is given in Table 1 and the layout
is illustrated in Figure 4. It is interesting to note that
the required PPU size, expressed as maximum
power, is about half that of a conventional bus. This
is explained by the fact that the buffer assists in
heavy accelerations. When the vehicle decreases in
speed, power is regenerated into the buffer. The
buffer might seem to be oversized with respect to
power. The explanation is that the specific energy of
the super capacitor is crucial with regard to sizing.
The driver controls the target torque of the electric
motor. If the driver demands braking, the desired
motor torque will be negative. If the desired torque
exceeds the torque limit of the motor at braking, a
mechanical brake in the chassis will assist. The
mechanical brake also assists when the vehicle stands
still.

Environment

pedal request
speed

Vehicle

Fig. 2: The relation between the vehicle and the
surrounding systems.

Fig. 4: Modelica model of a fuel cell HEV.
Table 1: Component sizes in the fuel cell HEV.

Fig. 3: Modelica model of a split HEV.

Modelica 2002, March 18−19, 2002

248

COMPONENT

SIZE;
MASS

MAX POWER;
ENERGY

Chassis (with
propulsion units)

6; 17600 kg

Fuel cell

2; 200 kg

100 kW; -

Motor

5; 200 kg

250 kW; -

Super capacitor

8; 500 kg

900 kW; 7.5 MJ

The Modelica Association

Hellgren J.

Modelling of Hybrid Electric Vehicles in Modelica for Virtual Prototyping

The driving cycle is a part of an urban city bus route
and is plotted as speed as a function of time in
Figure 5. Figure 6 also shows the cycle but with
speed versus position instead of time. Many starts
and stops are characteristic for the driving cycle. This
makes an HEV more interesting. In this case, the
vehicle manages to follow the desired speed almost
exactly. Figure 7 shows how State Of Charge (SOC)
in the buffer and motor temperature change during
the driving cycle. It can be seen that the SOC
increases at braking and decreases at acceleration.
Figure 8 reflects the control of the PPU by comparing the power from the PPU to the power demand
from the chassis. According to the simulation, the
fuel consumption is 0.2 kg hydrogen/km (the energy
density of hydrogen is three times higher than the
energy density of diesel). This result is valid for this
particular combination of vehicle and driving cycle.

.

Fig. 7: SOC [%] (continuous line), motor temperature
[Celsius] (dotted line) and vehicle speed [m/s] (dashed
line) versus time [s].

The HEV model in Figure 4 uses 287 variables, 12
states and 80 parameters. This reflects the complexity of the model. Examples of states are: vehicle
speed, SOC, temperature of the electric machine and
power from the fuel cell.

Fig. 8: Power from PPU [W] (continuous line) and
power demand from chassis [W] (dashed line) versus
time [s].

3 Modelling of components in HEVs
One major principle in modelling a component has
been to make it as simple as possible to change its
size. This is achieved by a SIZE parameter, which is
included in most components. A change of the SIZE
parameter affects some of the other parameters in a
component model such that the component model
behaves as though it has another size. When the SIZE
parameter in a component model is changed, the total
mass of the vehicle is changed automatically.
Another principle has been to use physical parameters and to tune them in such a way that the model
behaves similarly to an existing component. For
example, the inner resistance in the battery model is
defined such that the efficiency of the battery model
is similar to a real battery.

Fig. 5: Driving cycle. Speed [m/s] versus time [s].

Fig. 6: Driving cycle equal to driving cycle in Figure 5
but with speed [m/s] versus position [m]

The Modelica Association

Some component models are described more in detail
in this paper (underlined in Figure 9). In the
described component models, parameters (constant

249

Modelica 2002, March 18−19, 2002

Modelling of Hybrid Electric Vehicles in Modelica for Virtual Prototyping

during simulation) are in upper case letters and variables (changing during simulation) are in lower case
letters.
Figure 9 shows the structure of the component model
library. The library can be expanded to include more
models in the future. The graphical interface makes it
very easy to replace a component model in a vehicle
model, e.g. replace a battery model with a super
capacitor model. This is done by a “drag and drop
procedure”.

Component libraries
Primary
power units

Buffers

Electric
Machines

Transmissions

Chassis

Electric
Converters

Auxiliaries

Present contents of component libraries
PPUs = {diesel engine, fuel cell}
Buffers = {super capacitor, NiMH battery}
Elec.Machines = {AC machine, PM machine}
Transmissions = {belt CVT}
Chassis = {standard chassis}
Converters = {DC/DC converter}
Auxiliaries = {aux. city bus, aux. car}
Controls = {control FSM, analytical expression
Fig. 9: Structure of component library. AC stands for
alternating current, PM stands for permanent magnet
and DC stands for direct current. When possible, a
component uses sub-models that are included in the
standard Modelica library.

NUMBER
OF PARAMETERS

AC machine

5

27

Auxiliaries

0

1

Modelica 2002, March 18−19, 2002

COMPONENT
MODEL

NUMBER
OF
INTERNAL
STATES

NUMBER
OF PARAMETERS

Chassis

2

20

CVT

3

10

DC/DC converter

0

2

Diesel engine

2

6+data map

Fuel cell

2

16

NiMH battery

3

26

PM machine

5

30

Super capacitor

3

12

A fuel cell is an electrochemical device that combines hydrogen fuel and oxygen from the air to produce electricity, heat and water. Fuel cells operate
without combustion, so they are virtually pollution
free. In theory, a fuel cell can operate at much higher
efficiencies than internal combustion engines, but
auxiliary systems such as pumps and compressors
reduce the efficiency. The efficiency of a fuel cell is
approximately 50%. The fuel cell itself has no moving parts, and the fuel cell is thus a quiet and reliable
source of power. Individual fuel cells are normally
combined into a stack. The number of fuel cells in
the stack, i.e. the number of cells in series, determines the total voltage. Major disadvantages of fuel
cells are high capital cost and difficulties in handling
the fuel. For example, hydrogen, gasoline and methanol are proposed as fuel.
Figure 10 illustrates the major idea of the model.
Three efficiencies have been defined: the efficiency
of fuel delivery ηfuel, the internal efficiency of a fuel
cell ηcell, the efficiency related to parasitic losses and
electrical conversion ηelsyst. The model is strongly
influenced by [2]. The SIZE parameter represents the
number of stacks in the system. The transient performance, i.e. how fast the fuel cell can change power,
is expressed by low pass filtering the desired power

Table 2: Number of internal states and number of
parameters in the component models.
NUMBER
OF
INTERNAL
STATES

Table 2: Number of internal states and number of
parameters in the component models.

3.1 Model of fuel cell

Controls

COMPONENT
MODEL

Hellgren J.

250

The Modelica Association

Hellgren J.

Modelling of Hybrid Electric Vehicles in Modelica for Virtual Prototyping

Pdes.The total power output from the fuel cell system
is Pout.

Electrical
poles
[Voltage, Current]

Desired
power
[Power]

ηfuel

ηelsyst

ηcell

η tot = η cell ⋅ η fuel ⋅ η elsyst

(EQ 8)

η cell = η v ⋅ η MAX

(EQ 9)

η fuel = U FUEL ⋅ η REF

(EQ 10)

η elsyst = η EL ⋅ η par

(EQ 11)

P out
η par = ------------------------------P out + P par

(EQ 12)

P par =
P

out

= P

cell

⋅N

SE R

⋅N

STACKS

P cell = U cell ⋅ I cell
P cell
p = --------------------------------P NOMCELL

⋅η

elsyst

NOMCELL

⋅N

SER

⋅N

STACKS

(EQ 13)
(EQ 14)

Table 3: Notations for the fuel cell model.
NOTATION

DESCRIPTION

α1, β0

Parameters that determine
parasitic losses

ECELL [V]

Maximal voltage in a cell

ηEL [-]

Efficiency of converter

(EQ 1)

ηMAX [-]

Maximal efficiency in one
cell

(EQ 2)

ηREF [-]

Efficiency of reformer

HFUEL [g/J]

Mass of hydrogen to achieve
one Joule of energy

UFUEL [-]

Amount of hydrogen utilized

NSER [-]

Number of cells in series

NSTACKS [-]

Number of stacks

PNOMCELL [W]

Nominal power from a cell

Ppar [W]

Parasitic losses

Eq. 1 to Eq. 4 describe how total power output Pout,
desired power Pdes, power produced in one cell Pcell
and normalized power p are calculated and related to
each other.

P

= P

TOT

Fig. 10: Model of fuel cell. Aux represents auxiliary
systems and Conv represents a DC/DC converter.

P out = filter ( P des )

α 1 ⋅ P TOT + β 0 ⋅ P TOT ⋅ p

(EQ 3)

(EQ 4)

The voltage in a cell Ucell decreases with p according
to Eq. 5 and Eq. 6.
U cell = η v ⋅ E CELL

(EQ 5)

PPC [-]

Part of maximal theoretical
power that is used in cell

2
p
η v =  1 +  1 – ------------ 




PPC

(EQ 6)

PTOT [W]

Nominal power from fuel cell
system

Ucell [V], Icell [A]

Voltage and current in a cell

The calculation of the instantaneous fuel consumption Fc [g/s] and total efficiency of the system ηtot
are described by Eq. 7 to Eq. 14.
P out ⋅ H FUEL
Fc = ----------------------------------η tot

The Modelica Association

(EQ 7)

251

The model is general and fairly simple and can therefore easily be adjusted to imitate almost any fuel cell
system by changing the parameters. The system presented here meets the targets set by DOE (the Department Of Energy in USA) [3]. The targets are an
efficiency of 44% at full load, an efficiency of 55%

Modelica 2002, March 18−19, 2002

Modelling of Hybrid Electric Vehicles in Modelica for Virtual Prototyping

at part load and a response time of three seconds. Part
load is defined as 25% of full load and response is
defined as how quickly power is changed from zero
to maximal load. Figure 11 compares the model with
the DOE targets.

ηtot

Hellgren J.

P losses ≈ ( 1 – η ) ⋅ P 1

(EQ 15)

v
d = 1 – -----2

(EQ 16)

η = η MAX – d ⋅ KD

(EQ 17)

 P ⋅ η (P > 0)
1
 1
P2 = 
P1

------ ( P 1 < 0 )
η


(EQ 18)

v1

p

Table 4: Notations for the converter model.

Fig. 11: Efficiency (ηtot) versus normalized power p.
The continuous line represents the model and the
circles represent DOE targets.

NOTATION

DESCRIPTION

d

Ratio of switching

3.2 Model of DC/DC converter

Plosses [W]

Total losses in the converter

The task of a DC/DC converter is to adjust the output
voltage of an electrical device. In an HEV the operating voltage of the buffer may be different from the
voltage range desired in the electrical machine. This
is an example of a situation in which a DC/DC converter becomes useful. DC/DC means that a direct
current is transformed to a direct current with another
voltage and current. Unfortunately, this power transformation is related to losses. The power losses in a
DC/DC converter are accurately described in [4].
The model takes into account the dominant losses
according to [4].

ηMAX, KD

Parameters determining the efficiency of the converter

P1, P2 [W]

Power in and power out from the
converter

v1, v2

Voltage on outside and inside

Electrical
poles
[Voltage, Current]

P1

Electrical
poles
[Voltage, Current]

P2

Fig. 12: Model of DC/DC converter.

The parameters in the model are adjusted in such a
way that the efficiency is close to 95%.

3.3 Model of super capacitor
Super capacitors are an energy storage technology
ideally suited for applications that need repeated
bursts of power for fractions of a second to several
minutes. High specific power but low specific energy
is characteristic.
The model illustrated in Figure 13 is influenced by
[5]. The parameters are taken from the data sheet for
an existing super capacitor “PC2500” described more
in detail in [6]. The SIZE parameter represents the
number of super capacitors in parallel. Due to the
definition of a leaking current Ileak, the model takes
into account that the capacitor is discharged even
when no current is requested. RI is the internal resistance, C is the capacitance, IcapPos is the requested
current and Ucap is the voltage of the capacitor.

Eq. 15 to Eq. 18 describe the model. Eq. 16 and
Eq. 17 imply that a higher quotient between voltage
on outside and inside results in a lower efficiency η.

Modelica 2002, March 18−19, 2002

252

The Modelica Association

Hellgren J.

Modelling of Hybrid Electric Vehicles in Modelica for Virtual Prototyping

Electrical
poles
[Voltage, Current]

P
η = ---------------------------------P + P Losses

(EQ 26)

P = U cap ⋅ I cap Pos

(EQ 27)

2

2

PLosses = I Leak ⋅ R P + IcapPos ⋅ R I

(EQ 28)

Table 5: Notations for the super capacitor model.

Fig. 13: Model of super capacitor.

Eq. 19 to Eq. 24 describe current and voltage laws
for one capacitor. Most of the terms are described in
Table 5.
I cap Pos = i 1 + I leak

(EQ 19)

I cap Pos + I cap Neg = 0

(EQ 20)

Q
U c = ---C

(EQ 21)

Q· = i 1

(EQ 22)

Uc
I leak = ------R
P

(EQ 23)

(EQ 24)

The requested power P is positive at discharge and is
negative at charge. The following equations define
the energy level in the super capacitor Soc and the
efficiency η:

The Modelica Association

DESCRIPTION

Uc [V], i1 [A]

Internal voltage and internal
current in capacitor

Q [C]

Charge in capacitor

RP [Ohm]

Resistance determining the
leaking current Ileak

UMIN, UMAX [V]

Permitted minimal and maximal voltage in capacitor

Figure 14 shows the simulation of a charge process
of a super capacitor model. Power is taken from the
capacitor and increases with time. The upper curve
corresponds to Soc starting at 70%. The lower curve
corresponds to a start value of 30%. The curves show
that efficiency is dependant on Soc and decreases
with power. The simulated efficiency corresponds to
data given in [6].

η

U cap = U c + R I ⋅ I cap Pos

U c – U MIN
Soc = --------------------------------------- ⋅ 100
U MAX – U MIN

NOTATION

(EQ 25)

253

Normalized power

Fig. 14: Efficiency for super capacitor versus
normalized power for different start values of Soc.
Normalized power is defined as requested power
divided by maximum possible power.

3.4 Model of belt CVT
A Continuous Variable Transmission (CVT) allows
the speed ratio to change in a step less way. This
allows the engine to operate on its optimal line. One
disadvantage is that a CVT has a lower efficiency
than a conventional transmission.

Modelica 2002, March 18−19, 2002

Modelling of Hybrid Electric Vehicles in Modelica for Virtual Prototyping

A belt CVT, illustrated in Figure 16, is used here.
The clutch slips when the torque is too high, which
results in poor efficiency. The efficiency of the belt
ηbelt is a function of utilized torque, see Figure 15.
The SIZE parameter determines the mass and maximum torque capacity TMAX of the CVT.

η

Hellgren J.

w

In
r tot = ------------

(EQ 32)

A–B
η belt = B + ----------------------t⋅C
1+e

(EQ 33)

w O ut

Table 6: Notations for the belt CVT model.
belt

t=T/TMAX

1

Fig. 15: Efficiency of CVT belt as function of utilized
torque t.

Desired torque
on the In side
[-]
Mechanical
axis
[Torque,
Rot. speed]

NOTATION

DESCRIPTION

A, B, C

Constants determining the
efficiency of the belt

rMAX, rMIN [-]

Maximum and minimum
ratio

Tdes [Nm]

The desired torque at the In
side

TMAX [Nm]

The maximum torque that
the CVT can transmit

wIN, wOUT [Rad/s]

Speed at IN and OUT side

The parameters in the model are adjusted in such a
way that the maximum efficiency is close to 90%.
Mechanical
axis
[Torque,
Rot. speed]

Tdes

T
Tout

Fig. 16: Model of belt CVT.

Eq. 29 to Eq. 33 describe how the output torque Tout,
the ratio of the CVT rcvt and the total ratio rtot are
calculated and related to each other. The filter function in Eq. 30 reflects the fact that there is a response
time in the system.
T out = min ( T MAX ,T )
T = filter ( T

des

)⋅r

(EQ 29)
cvt

⋅η

belt

r cvt = min ( r MAX, max ( r MIN, r tot ) )

Modelica 2002, March 18−19, 2002

(EQ 30)

3.5 Model of chassis
The chassis model takes into account resistance
in the longitudinal direction. This resistance is
mainly a result of vehicle mass, air and tire rolling resistance. From the SIZE parameter, it is
possible to choose chassis models that correspond to the following vehicles: Volkswagen
Golf (small passenger car), Volvo V70 (large
passenger car), Toyota Previa (minibus), Chassis
corresponding to a mini truck, Volvo FL6 (large
truck), Volvo B10M (city bus), Volvo FL20
(heavy truck). The brake is necessary to make
the vehicle stand still if a slope is present or to
assist if the capacity of the electric braking in an
HEV is exceeded. The traction force Ftraction is
limited to prevent the wheels from skidding.
Figure 17 shows the layout of the chassis. Only
components from the standard Modelica library
are used. The gear efficiency depends on vehicle
configuration. A low gear efficiency corresponds to the use of a differential while a high
gear efficiency corresponds to the use of wheel
motors.

(EQ 31)

254

The Modelica Association

Hellgren J.

Modelling of Hybrid Electric Vehicles in Modelica for Virtual Prototyping

Table 7: Notations for the chassis model.

Present slope
[m/m]
Mechanical
axis
[Torque,
Rot. speed]

Present speed
of the vehicle
[m/s]

NOTATION

DESCRIPTION

α [m/m]

Road surface grade

a [m/s2]

Acceleration of vehicle

CDA [m2]

Air resistance of vehicle

Ftraction [N]

Force between ground and wheel

Ftrnom [N]

Traction force if vehicle is not
skidding

Fig. 17: Model of chassis.

Eq. 34 to Eq. 37 describe the dynamics of the
vehicle in the longitudinal direction. Ftraction calculated in Eq. 37 affects the wheel component in
Figure 17.
MASS = MASS DRIVELINE + MASS COACH +(EQ 34)
MASS

F traction =





FRAME

PASSENGER

trnom

( F trnom < F TRMAX ) (EQ 35)

TRMAX

⋅ ς ( F trnom > F TRMAX )

F
F

+ MASS

where
ς = sign ( T Wheel )
T Wheel
F trnom = ------------------------R
WHEEL

(EQ 36)

F traction = F acc + F air + F roll + F slope (EQ 37)

where

γ [−]

Factor for influence of rotational
inertias of driven axle

G [m/s2]

Constant of gravity

KF [-]

Coefficient of rolling resistance

MASS [kg]

Total mass of vehicle

N [N]

Normal force between vehicle and
ground

v [m/s]

Speed of vehicle

3.6 Model of controller
The controller controls the power from the PPU.
How this should be done is debatable and the aim of
research. In the simulations presented in this paper, a
Finite State Machine (FSM) is used as the control
algorithm. A more detailed description of how this
works is found in [7]. In practice, the control model
interprets data maps that contain information on the
FSM.
Another candidate to control the power produced in
the PPU is to use an analytical expression. Eq. 38
proposes how this power can be calculated. The
expression is influenced from [8].
d
dt

(P

PPU

F acc = MASS ⋅ a ⋅ γ
2
C ⋅A⋅ρ
⋅v
D
AIR
F
= --------------------------------------------air
2

( Pch + K ( Soc

– Soc ) – P PPU )

tar
------------------------------------------------------------------ (EQ 38)
τ

Table 8: Notations for Eq.


1 
F roll = K F ⋅ N ⋅  1 – -----------------
0.5 ⋅ v

e
F slope = MASS ⋅ G ⋅ α
N = MASS ⋅ G ⋅ cos ( asin ( α ) )

The Modelica Association

)=

255

38.

NOTATION

DESCRIPTION

PPPU

Power requested from PPU

Soctar

Desired Soc

K, τ

Parameters

Modelica 2002, March 18−19, 2002

Modelling of Hybrid Electric Vehicles in Modelica for Virtual Prototyping

4 Modelling of surrounding systems
in HEVs

REFERENCES
[1] Modelica, www.modelica.org, September 2001.

The surrounding systems are more abstract models
and are necessary to be able to make the simulation.
The driving cycle in particular is extremely important
for the result of a simulation.

[2] Thorstensen B., “A parametric study of fuel cell system efficiency under full and part load operation”, Journal
of Power Sources, Volume 92, Issues 1-2, Pages 9-16,
January 2001.
[3]

www.energy.gov, September 2001.

[4] Alving B., “Calculating Power Losses in DC-DC
converters, including a proposed high efficiency converter
topology”, Master thesis work, Electrical and Computer
Engineering, Chalmers University of Technology, Gothenburg, Sweden, 1999.

Library of surrounding systems
Environment

Hellgren J.

Driver

[5] Axelsson F.,“Investigation of super capacitors in a
series hybrid vehicle”, Master Thesis at Control Eng.
Lab., Gothenburg, Chalmers University of Technology,
Sweden, 1998.

Contents of library of surrounding systems
Environments = {city1, highway1, etc.}
Drivers = {driver normal}

[6] Powercache, www.powercache.com, September
2001.

Fig. 18: Library of surrounding systems.

4.1 Model of environment
The environment model interprets data maps that
contain the driving cycles. Speed and slope are
described as functions of time. Alternatively, speed
and slope can be described as functions of position.

[7] Hellgren J. and Wahde M., “Evolving Finite State
Machines for the Propulsion Control of Hybrid Vehicles”,
Advances in Signal Processing and Computer Technologies, ISBN 960-8052-37-8, WSES, 2001.
[8] Andersson C., Jonasson K., Strandh P. and Alakula
M., “Simulation and verification of a hybrid bus”, Nordic
Workshop on Power and Industrial Electronics, Aalborg,
Denmark, 2000.

NOTATION

4.2 Model of driver
The driver model is simply a PID regulator that
forces the vehicle speed to be equal to the desired
speed, i.e. the speed that is given in the driving cycle.
Desired speed and vehicle speed are inputs and
requested traction torque is output.

5 Conclusions and future work
Modelica has been found suitable for modelling and
simulating an HEV. Properties such as object orientation, non casual modelling and an equation based
syntax have been found useful during the development of the models presented in this paper. Much
modelling work would have been saved if more public model libraries for Modelica had been available.
Unfortunately there is a lack of such libraries today.

NOTATION

DESCRIPTION

CVT

Continuous Variable Transmission

Data map

A set of numbers presented in a vector or matrix

Normalized
power

Requested power divided with maximum power that can be delivered
to/from the device

Soc [%]

State of charge in an energy buffer

In the future, additional vehicle configuration and
component models should be developed. More
detailed models that take more phenomena into
account should also be developed. Validation of the
virtual HEV models towards existing vehicles should
also be done.

Modelica 2002, March 18−19, 2002

256

The Modelica Association

Pelchen C., Schweiger C., Otter M.

Modeling and Simulating the Efficiency of Gearboxes ...

Modeling and Simulating the Efficiency
of Gearboxes and of Planetary Gearboxes
Christoph Pelchen, ZF Friedrichshafen, Germany (Christoph.Pelchen@zf.com)
Christian Schweiger, DLR, Germany (Christian.Schweiger@dlr.de)
Martin Otter, DLR, Germany (Martin.Otter@dlr.de)

Abstract

1.1 Bearing Friction

It is shown how to model and simulate frictional effects present in gearboxes and in planetary gearboxes.
This includes modeling of gear wheel stucking and
sliding due to Coulomb friction between the gear teeth
leading to load torque dependent losses. This allows
reliable simulation of, e. g., stick-slip effects in servo
drives or gear shifts in automatic gearboxes. It is also
discussed how the friction characteristics can be measured in a useful way. The presented models are implemented in Modelica and demonstrated at hand of
the simulation of an automatic gearbox.

The torques acting at a bearing are shown in ﬁgure 1.
The shaft in the bearing has the torques τA and τB on
the two sides. Losses due to friction are described by
the additional torque τbf . Torque equilibrium yields

1

Introduction

Gearbox dynamics due to friction, elasticity and backlash in the gear has often a strong impact on the performance of the system in which the gearbox is contained, such as for robots, machine tools, vehicles,
power trains. It is both difﬁcult to simulate gearbox
effects and to get reasonable agreement between measurements and dynamic simulations.
In the current Modelica standard library Modelica.Mechanics.Rotational [5] several
model components are available to simulate gearbox
effects, especially bearing friction. Missing is the satisfactory handling of mesh efficiency due to friction
between the teeth of gear wheels which leads to load
torque dependent losses. In this article it is shown in
detail how this problem can be solved for any gearbox that has two or three external shafts, i. e., standard
gears and a large class of planetary gears.
Before going into the details of an appropriate gear
efﬁciency model, it is important to analyse the different frictional effects in a gearbox. Friction is present
between two surfaces which slide on each other. In a
gearbox, this occurs in the gear bearings and between
the gear teeth which are in contact to each other. The
effect of these two cases is quite different.

The Modelica Association

257

τB  τA  τbf 
where

(1)


 0: ω  0

τbf 
 so that ω̇  0:0: ωω  00

(2)

The friction torque τbf is essentially a function of the
shaft speed ω, the bearing load fN (=force perpendicular to bearing axis), the bearing temperature T ,
the bearing construction and the used lubrication (for
more details, see, e. g. [6]). Since the bearing load is
usually constant (but not zero) and independent of the
gearbox load torque, and all other factors can be often
regarded as constant for certain operation conditions,
the bearing friction is essentially a function of the relative speed, τbf ω, and has a characteristic as given in
ﬁgure 2.
If ω  0 the friction torque τbf is computed from
the sliding friction characteristic according to ﬁgure 2.
If ω  0 the bearing is stuck due to the bearing load
in combination with Coulomb friction, and therefore
the friction torque τbf is an unknown constraint torque
which is computed so that ω̇ vanishes. How to model
and simulate this effect is described in detail, e. g., in
[8].

τA

τΒ
τbf

Figure 1: Torques at a bearing

Modelica 2002, March 18−19, 2002

friction torque τbf / τbf0

Modeling and Simulating the Efficiency of Gearboxes ...

Pelchen C., Schweiger C., Otter M.

may become stuck to each other if vrel  0, i. e., if
ωA  0. Then, fR is a constraint force calculated from
the condition that ω̇A  0. Torque equilibrium in ﬁgure 3 yields

1
0

ï1
ï0.4

ï0.2
0
0.2
shaft speed ω / ωmax

0  τA  fN lA  fR dA
0  τB  fN lB  fR dB
fR  sv µ fN

0.4

In ﬁgure 3, two gear teeth in contact are shown. In
order that the teeth neither penetrate nor separate, the
normal velocities in contact point C need to be identical and therefore the tangential velocities are different, i. e., the teeth slide on each other, see, e. g., [3]
(the tangential velocities are only identical, if ωA  0
or if point C is at W, see ﬁgure 3). As a result, in contact point C Coulomb friction fR  sv µ fN is present,
where fR is the friction force in the contact plane, fN is
the force perpendicular to the contact plane, sv  1
depending on whether C is below or above pitch circle
rA and µ  µvrel  T  is the sliding friction coefﬁcient
which is essentially a function of the relative velocity vrel between the contact planes and the temperature
T at the contact point. Note, that the contact planes

dB

α

lB

rB

fN

W
C rA
lA α

tooth A

ωΑ
τΑ

sv=+1

fR
fR, fN act on tooth B and with
opposite sign on tooth A

Figure 3: Friction between gear wheel teeth

Modelica 2002, March 18−19, 2002

1  sv µ dlBB
1  sv µ dlAA



(3)

1  sv µ dlAA
1  sv µ dlBB



(4)

The derivations assume that the ”right” side of tooth
edge A is in contact. If the ”left” side is in contact,
the sign of the normal force changes. Collecting everything together and neglecting the temperature and
position dependency of ηmf1  ηmf2  ﬁnally results
in the basic formula for mesh friction:


τA ωA  0 or


ηmf1 ωA  :


τ  0 and ωA  0

A
(5)
η̂mf :
τA ωA  0 or

1ηmf2 ωA  :


τA  0 and ωA  0


so that ω̇A  0: ωA  0

sv=-1
dA

 τA 

Since dA lA  dB lB for sv  1, dA lA  dB lB for
sv  1, and 0  µ  1, it follows from (3) that ηmf1
is between 0 and 1.
In a similiar way it can be shown (see, e. g., [7])
that the relative velocity vrel is calculated as vrel 
k ωA where k is a function of the geometric quantities dA  dB  lA  lB . Since all these quantities can be
computed from gear-wheel constants and the absolute
angle ϕA of shaft A, µ  µϕA  ωA  T  and therefore
ηmf1  ηmf1 ϕA  ωA  T .
The derivation above is only valid if ωA  0, because the friction force at the driven tooth is always
directed in opposite direction to the relative sliding velocity. If ωA  0 the sign of the friction force changes,
yielding:
ηmf2 τB  i τA with ηmf2 :

ωΒ
τΒ



lA 1  sv µ dlAA

τB  i ηmf1 τA with ηmf1 :

Mesh Friction

tooth B



Utilizing teeth contact geometry and gear ratio i
lA
lB
lB rB



i
cos α 
rA rB
lA rA
results in

Figure 2: Typical bearing friction characteristic

1.2

 τB 



lB 1  sv µ dlBB

258

where ηmf1 ωA   0; 1 and ηmf2 ωA   0; 1 denote the mesh efficiencies for the different power ﬂow
directions characterized by PA  τA ωA . Note, that the
two mesh efﬁciencies are a function of the absolute
value of ωA . Often, ηmf1  ηmf2 . However, there are
also cases where the two mesh efﬁciences are very different, e. g., for worm gears.

The Modelica Association

Pelchen C., Schweiger C., Otter M.

2

Modeling and Simulating the Efficiency of Gearboxes ...

Standard Gear

In this section, a mathematical description of the frictional effects present in a standard gear is presented
and an appropriate Modelica model is sketched. The
gear type under consideration is shown in ﬁgure 4.
Here, ωA denotes the angular velocity of the left shaft
τ B ,ω B

τ A ,ω A
A

B

τB  i η̂mf τA  τ̂b f 

Figure 4: Speeds and cut-torques of a standard gear
and ωB denotes the angular velocity of the right shaft,
respectively. At the cut-planes of the two shafts, the
constraint torques τA and τB are present. The class of
gears to be examined in this section is formally deﬁned
as:

¯ The gear has one degree of freedom.

(6)

:



τ̂bf ωA  

Mathematical Description

A standard gear may have several bearings, several
gear stages and several teeth in contact. Based on
the observations in section 1.1 and 1.2, and assuming
that all bearing losses are either transformed to bearing
friction τbf,A at shaft A or bearing friction τbf,B at shaft
B and that mesh friction η̂mf is present, the following
loss model is obtained
(7)

Reordering of terms yields
(8)

1 The

following derivation is also valid for variable gear ratios,
such as a CVT gear. The only addition is that the bearing friction
term τ̂b f is not only a function of ωA but also of the actual gear
ratio i, due to (8) and (9).

The Modelica Association

τ ω  0 or
A A
:
τA  0 and ωA  0
τ ω  0 or
A

A

(11)

This deﬁnition includes a broad class of gears.

1
τB  i η̂mf τA  τbf,B  η̂mf τbf,A  
i

(10)
with ηmf1 ωA ,

describes the bearing frictions with

holds, where i is constant and not zero.
This constant is called gear ratio1

τB  τbf,B  i η̂mf τA  τbf,A  

so that ω̇A  0: ωA  0

τA  0 and ωA  0
so that ω̇A  0: ωA  0

¯ The time invariant constraint equation

ωA  i ωB

τ ω  0 or

A A


ηmf1ωA  : τA  0 and ωA  0
η̂mf :
τA ωA  0 or

1ηmf2 ωA  :

τA  0 and ωA  0




τbf1ωA 
τ̂bf :

τbf2 ωA 



¯ The gear has two external shafts.

(9)

where

describes the mesh frictions
ηmf2 ωA   0; 1 and

Definition 1: A gear denoted as standard
gear in this article has the following properties:

2.1

The torque direction of τbf,B depends on the sign of
ωB due to equation (2) and the torque direction of τbf,A
depends on the sign of ωA . Since ωB  i ωA , the torque
direction of τbf,B i depends also on the sign of ωA .
Therefore, all bearing friction terms can be collected to
one overall bearing friction variable τ̂bf which has the
properties that (a) the direction of this torque depends
on ωA and (b) the value depends on the same energy
ﬂow directions as η̂mf does. As a result, the following
gear loss model is obtained:

259

0
0

: ωA  0

: ωA  0

(12)

More detailed models are obtained by taking into account that ηmf1 , ηmf2  are additionally functions
of the absolute position ϕA of shaft A and of the gear
temperature T , and τ̂bf  is additionally also a function of T , respectively.
The model above describes especially the case
when the gear bearings and the teeth in contact to
each other are stuck. This occurs when ω  0. Then,
η̂mf and τ̂bf are constraint variables which are computed from the condition that the gear remains stuck,
or formulated mathematically that ω̇A  0. If the
constraint variables become greater as their respective
sliding values at zero speed, the gear leaves the stuck
mode and starts sliding. Note, that the stuck mode
is both due to bearing friction (because the bearing
loads introduce Coulomb friction) and due to mesh
friction. Since in stuck mode there are two additional
unknowns (η̂mf , τ̂bf ), but only one additional equation

Modelica 2002, March 18−19, 2002

Modeling and Simulating the Efficiency of Gearboxes ...

Pelchen C., Schweiger C., Otter M.

(ω̇A  0), there is an ambiguity so that either η̂mf or τ̂bf
can have an arbitrary value in this mode.
A direct implementation of model (9) is difﬁcult.
The key idea from [9] is to transform this model into
a form close to the standard bearing friction model
which is well understood. This requires to collect all
loss effects in an additive loss torque ∆τ, i. e., to describe the mesh and bearing frictions by the equation
τB  i τA  ∆τ

∆τ
>
∆τmax1, ωA

ωA = 0

0

τΑ

∆τ(ωΑ=0)
<
∆τmin2, ωA

0

(13)
∆τ

instead of (9). Equation (13) implicitly deﬁnes the
newly introduced loss torque ∆τ, i. e., (9) and (13) are
two equations for the three unknowns τA , τB and ∆τ.
In sliding mode, equation (9) is replaced by the
combined equation of (9), (13)

τΑ

ωA

η̂mf τA  τ̂b f  τA  ∆τ

τΑ

and therefore
∆τ  1  η̂mf  τA  τ̂bf 

(14)

Figure 5: ∆τ in sliding and stuck mode

In stuck mode, equation (9) is replaced by the constraint equation ω̇A  0.
By this ﬁgure it can be clearly seen, that the transforTo summarize, the transformed gear loss model is mation to ∆τ results in a friction characteristic which
deﬁned by (10), (11) and equations:
is close to a pure bearing friction model. The stuck
mode is described in an identical way. Only the slid(15)
τB  i τA  ∆τ
ing friction torque is no longer a function of solely ωA ,
but additionally a function of τA .
1  η̂mf  τA  τ̂bf : ωA  0
(16)
∆τ 
: ωA  0
so that ω̇A  0



2.2 Modelica Model

Note, that by this transformation the previous ambiguity in stuck mode is removed. Utilizing (10)-(12) in The gear loss model derived in the previous section
(16) for the sliding mode, results in the equations of can be implemented as a Modelica model in a straighttable 1. The different regions to compute ∆τ are visu- forward manner. The parameters to be provided are
the gear ratio i and table lossTable to deﬁne the
∆τ 
ωA τA
gear losses, see table 2. Tabulated values of the vari 0  0 1  ηmf1  τA  τbf1  ∆τmax 1  0 ables ηmf1 , ηmf2, τbf1 , τbf2 have to be given as function
 0  0 1  1ηmf2  τA  τbf2  ∆τmax 2  0 of ωA  0. The values for negative ωA are automat 0  0 1  1ηmf2  τA τbf2  ∆τmin 1  0 ically taken care off. Whenever ηmf1, ηmf2, τ̂bf1 or
 0  0 1  ηmf1  τA τbf1  ∆τmin 2  0 τ̂bf2 are needed, they are determined by interpolation
in lossTable. The interface of this Modelica model
Table 1: ∆τ  ∆τωA  τA  in sliding mode
is therefore deﬁned as
alized in the upper part of ﬁgure 5. In sliding mode, ∆τ
has either a value on the upper or on the lower limiting
lines, depending on the sign of ωA . In stuck mode, ∆τ
has a value between the limiting lines such that ω̇A  0.
Stuck mode is left, when ∆τ reaches one of the limiting
lines.
In the lower part of ﬁgure 5 the torque loss ∆τ is
shown using ωA as abscissa and τA as curve parameter.

Modelica 2002, March 18−19, 2002

260

parameter Real i = 1;
parameter Real lossTable[:,5]
= [0, 1, 1, 0, 0];

ωA 
..
.

ηmf1
..
.

ηmf2
..
.

τbf1 τbf2 
..
.

..
.

Table 2: Format of table lossTable.

The Modelica Association

Pelchen C., Schweiger C., Otter M.

Modeling and Simulating the Efficiency of Gearboxes ...

using the unit gear ratio and no losses as a default.
Internally, the gear loss model is based on the
BearingFriction model, because this model already implements the sliding/stuck handling in a satisfactory way. The only enhancement is that the sliding
friction torque ∆τ is not only a function of ωA but also
of the unknown variable τA and of the relations τA  0,
τA  0.
During code generation, this results in an additional algebraic loop in which τA , ∆τ and the two relations are contained. Due to the structure of equation (14), the continuous unknowns (τA , ∆τ) enter this
loop linearly. The resulting algebraic loop is a mixed
Real/Boolean system of equations, which is very similiar to the corresponding mixed system of equation of
a pure bearing friction model, and can be solved with
the same methods, see, e. g., [8].

torque measurements, a unique solution exists
η̂mf ωA k 



τ̂bf ωA k 









A1



(18)

A2

1
τB 2  η̂mf τA 2 
i


(19)



Finally, ηmf1 ωA k , ηmf2 ωA k , τbf1 ωA k  and
τbf2 ωA k  can be easily determined from η̂mf ωA k 
and τ̂bf ωA k  based on the sign of ωA τA using equations (10) and (11).
As already mentioned, in gearbox catalogues usually the overall efﬁciency η  PB PA is provided as
function of the load torque τB . To demonstrate that the
presented loss model produces qualitatively the same
result, the overall efﬁciency of the following example
with the loss model












ηmf1

2.3

 i ττB 1 ττB 2 

τbf1 τBmax

Measurement of Gear Losses




097

001 ω2B  2 ωB  5

η (τB, ωB)

Efﬁciency measurement data provided in gearbox cat- is shown in ﬁgure 6. As can be seen, the typical hyalogues contain usually not enough information for a perbolical curves are present, although the mesh efﬁdynamic simulation (e. g., the losses for ωA  0 are not ciency is constant.
given). The reason is that in many cases only the overall efﬁciency is included as a function of load torque
1
for some constant angular velocities ωA  0.
0.8
In order to obtain the data needed for the
lossTable of the Modelica model, the following
0.6
measurement method is proposed:
0.4
ωB = 0.1, 0.5, 1.0 rad/s
For m  2 ﬁxed load torques τB j (e. g., nom0.2
inal torque and half of the nominal torque)
and n angular velocities ωA k , the necessary
0
0
0.2
0.4
0.6
0.8
1
driving torques τA are measured which are
τ
/
τ
needed to drive the gear for positive and
B
Bmax
negative energy ﬂow PA  ωA τA , including
Figure 6: Overall efﬁciency as function of τB .
measurements near ωA  0 (= the gear shafts
start to rotate).




As a result, the following values are obtained:
τA j ωA k  




τB



j  2

j

 m 

k  1  n 

3 Planetary Gear

For every ﬁxed speed ωA k , equation (9) can be formulated in the unknowns η̂mf and τ̂bf . Collecting all equa- In this section the frictional effects of planetary gears
tions together results in one linear system of equations are mathematically described in a similiar way as in



i τA 1ωA k 

i τA 2ωA k 


..

.








i τA m ωA k 










1
τ
   τB 1 
1
 η̂mf   B 2 
..  τ̂
 ... 
.  bf
1
τB m



W A ,Z A

W B ,Z B W C ,ZC

(17)
A



for every ﬁxed speed ωA k . If more than two load
torque measurements are available, (17) has no solution and is solved in a least square sense. For two load

B

C



The Modelica Association

261

Figure 7: Speeds and cut-torques of a planetary gear

Modelica 2002, March 18−19, 2002

Modeling and Simulating the Efficiency of Gearboxes ...

Pelchen C., Schweiger C., Otter M.

the previous section (based on [9]) and an appropriate
Modelica model is derived. The variables describing
a planetary gear are shown in ﬁgure 7, where ωA , ωB ,
ωC denote the angular velocities of shafts A, B, C and
τA , τB , τC denote the torques at the cut planes of the
shafts, respectively. The examined gears are deﬁned
as follows:
Definition 2: A gear denoted as planetary
gear in this article has the following properties:
¯ The gear has three external shafts.

Figure 8: Examples of planetary gears according to
deﬁnition 2 [4]

¯ The gear has two degrees of freedom.
¯ The time invariant constraint equation

ωAB  i0 ωCB



(20)

holds, with

Block movement. The whole gear rotates as one
ﬁxed block with angular velocity ωB0 :
ωA  ωB  ωC  ωB0 

ωAB  ωA  ωB

ωCB  ωC  ωB

During this movement a power P1 is transmitted
solely by rigid coupling of the three shafts. As
the three shafts are not rotating relative to each
other, any losses due to friction between the teeth
of the gear wheels or in internal bearings cannot
arise, i. e., the block movement is without losses.

where the so-called stationary gear ratio i0 is constant and is in the range
i0  1 or i0  1 (for i0 outside of this
range, the role of shafts A and C has
just to be exchanged. However, i0  0
and i0  1 is never possible).



Note, that Willis’ equation, see, e. g. [4], is equivalent
to (20). A large class of planetary gears matches to this
deﬁnition. Some examples are shown in ﬁgure 8. The
stationary gear ratio i0 is usually computed from the
teeth number of the gear wheels. For example, for the
gearbox in the left upper corner of ﬁgure 8, i0  zr zs ,
where zs is the number of teeth for the inner sun wheel
and zr is the number of teeth for the outer ring wheel
(teeth numbers are taken negative for internal teeth).

3.1

Mathematical Description

Stationary gear movement. Shaft B is ﬁxed relative to the inertial system:
ωB0  0

 ωA  ωAB

ωC  ωCB 

During this movement a power P2 is transmitted solely by sliding of teeth in all three gear
wheels resulting in power losses due to friction
between the teeth of the gear wheels and in internal bearings not related to the external shafts.
Since the shaft speeds are a function of ωAB  ωCB
and ωCB  ωAB i0 due to (20), losses only occur,
if ωAB  0.

In order to achieve further equations energy ﬂow conThe relationship between the angular velocities of the servation is considered according to ﬁgure 9 involving
three shafts shown in ﬁgure 7 can be described using
relative kinematics yielding
ωA  ωB0  ωAB

ωB  ωB0

ωC  ωB0  ωCB 

(21)
(22)
(23)

The structure of (21)-(23) reﬂects the superposition of
two movement types:

Modelica 2002, March 18−19, 2002

262

PB

∆P
PA

planetary
gearbox

PC

Figure 9: Energy ﬂow

The Modelica Association

Pelchen C., Schweiger C., Otter M.

Modeling and Simulating the Efficiency of Gearboxes ...

the energy ﬂows in the shafts, PA , PB , PC , and the fric- wheel, τ̂bf ωAB  is the bearing friction torque in the
tion losses ∆P which dissipate to heat:
planet bearings)
P  PA  PB  PC  ∆P  0

(24)

PA  τA ωB0  ωAB 

(25)

with
PB  τB ωB0

(26)

PC  τC ωB0  ωCB  

(27)

∆P  ∆τ ωAB 

(28)




τbf1 ωAB




	

τA ωAB  0 or
τA  0 and ωAB  0
	
τ̂bf :
τA ωAB  0 or

τbf2 ωAB 
:


τA  0 and ωAB  0


so that ω̇AB  0: ωAB  0
(36)
with


 0 : ωAB  0 
(37)
τ̂bf ωAB  
 0 : ωAB  0





:

Since losses can only occur if ωAB  0, the power loss
∆P has been formulated as the product of ωAB and a,
yet unknown, virtual loss torque ∆τ. Using (24)-(27)
and (20) results in

No losses will be additionally introduced when a block
movement is superpositioned, as discussed previously.
Therefore, (34) is also valid for a general movement.
Comparision of (34) with (32) results in

P  ωB0 τA  τB  τC   ωAB τA  τC i0  ∆τ (29)

i0 τA  ∆τ  i0 η̂mf τA  τ̂bf 





P1







P2



and therefore

(38)
∆τ  1  η̂mf  τA  τ̂bf 
Since a planetary gearbox has two degrees of freedom
(see deﬁnition 2), the two speeds ωB0 and ωAB can As energy can dissipate only,
have arbitrary values which are independent from each
!
(39)
∆P  ωAB ∆τ  0
other. Therefore the speed factors must vanish
 ωAB 1  η̂mf τA  τ̂bf
(40)
(30)
0  τA  τB  τC
 1  η̂mf τA ωAB  ωAB τ̂bf
(41)
(31)
0  τA  τC i0  ∆τ
Since
By solving (31) for τC and (30) for τB , the two equa1  η̂mf  0 for τA ωAB  0
tions can be alternatively formulated as
1  η̂mf  0 for τA ωAB  0
(32) according to (35), the ﬁrst term in (41) is never posτC  i0 τA  ∆τ
τB  i0  1 τA  i0 ∆τ

(33) itive. With (37) the same also holds for the second
term and therefore ∆P is in fact never positive. UtilizWhen stationary gear movement occurs, i.e., ωB0  0, ing (35)-(37) and (38) for the sliding case, results in
the planetary gear reduces to a standard gear with two the equations of table 3 to actually calculate ∆τ.
external shafts where the losses are described accordIn the stuck mode the planetary gear rotates withing to equation (9)
out any losses as a block. Similar to Sec. 2 the torque
loss ∆τ is then deﬁned implicitly by the constraint
(34)
τC  i0 η̂mf τA  τ̂bf
equation ω̇AB  0. The gear remains in sliding mode
until ωAB becomes zero. It remains in stuck mode as
where η̂mf ωAB  describes mesh friction
long as the calculated torque loss ∆τ is lying in the
	

stuck region according to ﬁgure 10.
τA ωAB  0 or


η

ω

:
mf1
AB


τA  0 and ωAB  0

	
∆τ 
ωAB τA
η̂mf :
τA ωAB  0 or

1ηmf2 ωAB  :


τA  0 and ωAB  0
0 0
1  ηmf τA τbf1   ∆τmax 1  0


so that ω̇AB  0: ωAB  0
 0  0 1  1ηmf  τA τbf2   ∆τmax 2  0
(35)  0  0 1  1ηmf  τA τbf2   ∆τmin 1  0
with ηmf1 , ηmf2  0; 1 and τ̂bf describes friction in the  0  0
1  ηmf τA τbf1   ∆τmin 2  0
internal bearings of the planetary gearbox (e. g., for a
Table 3: ∆τ  ∆τωAB  τA  in sliding mode
standard planetary gearbox with sun, planet and ring

The Modelica Association

263

Modelica 2002, March 18−19, 2002

Modeling and Simulating the Efficiency of Gearboxes ...

Pelchen C., Schweiger C., Otter M.

4.1 Standard gear with mesh friction

∆τ
0

Figure 11 contains a Dymola screenshot of the model
under consideration. It is a standard gear with mesh
friction that is driven by a sinusoidal torque and has a
load torque which is linearly increasing.
In ﬁgure 12 and 13 results of a simulation are
shown for ηm f  05 and ηm f  09: The thicker lines
are the loss torques ∆τ whereas the thinner lines characterize whether mesh friction is in forward sliding
(mode=+1), backward sliding (mode=-1) or stuck
(mode=0) mode.
As can be seen in the upper part of ﬁgure 12 from
the two stuck modes, the maximum loss torque is not
constant (as it is for bearing friction) but depends on
the driving torque. Additionally, ﬁgure 13 contains the
speed of inertia 2 for ηm f  05. During stuck mode,
the velocity vanishes.

∆τ(ωAB = 0) τΑ
<0

Figure 10: ∆τ in sliding and stuck mode
ωAB 
..
.



ηmf1
..
.

ηmf2
..
.

τbf1 
..
.



τbf2 
..
.



Table 4: Format of table lossTable

3.2

4.2 Gear shift dynamics of automatic gear

Modelica Model

The planetary gear loss model derived in this section
can be implemented as a Modelica model in a similar way as described in Sec. 2. The parameters to
be provided are the stationary gear ratio i0 and table,
lossTable to deﬁne the gear losses, see table 4.
Whenever ηmf1 , ηmf1 , τbf1 or τbf2 are needed, they
are determined by interpolation in lossTable. The
interface of this Modelica model is therefore deﬁned
as
parameter Real i = 1;
parameter Real lossTable[:,5]
= [0, 1, 1, 0, 0];
using the unit gear ratio and no losses as a default.
The comments about model interna given in Sec. 2 are
valid similarily for the planetary gear model.
This Modelica model can be connected with component Modelica.Mechanics.Rotational.BearingFriction at each shaft to model additionally the friction inﬂuence of bearings related to
the external shafts. As a consequence multiple friction phases arise with the phenomena explained, e. g.,
in [8].

4

Simulation Results

The mesh friction model for planetary gears as well as
the clutch friction model already available in the Modi=2

drive

torque1
tau

freqHz={1}

inertia1

J=1

inertia2
gear

load

torque2
tau

J=1.5

duration={2}

Figure 11: Modelica composition diagram of gear
with mesh friction.

∆τ [Nm] for ηmf=0.5

∆τmin2, ωAB

4
2

mode

0

ï2
0

∆τ [Nm] for ηmf=0.9

>
∆τmax1, ωAB

ωAB = 0

0.1

0.2
0.3
time [s]

0.4

0.5

0.4

0.5

4
2

mode

0

ï2
0

0.1

0.2

0.3

time [s]
In this section simulation results are presented for
models containing the standard and planetary gear
models with losses developed in the last sections, us- Figure 12: Loss torque ∆τ and mode in gear with mesh
ing the Modelica modeling and simulation environ- friction ηm f  05 and ηm f  09.
ment Dymola, version 4.2a [1].

Modelica 2002, March 18−19, 2002

264

The Modelica Association

speed of inertia2 [m/s]

Pelchen C., Schweiger C., Otter M.

Modeling and Simulating the Efficiency of Gearboxes ...

which is a Modelica connector containing declarations
of all variables present in the bus.
Typical simulation results of the model are shown
in ﬁgure 15-17, especially in ﬁgure 15 the desired and
actual velocity of the vehicle in km/h, in ﬁgure 16 the
vehicle acceleration and the actual gear determined by
the simple transmission control unit, and in ﬁgure 17
the torque loss ∆τ of the right most planetary gearbox
p3.

0.01
0
ï0.01

ηmf=0.5

ï0.02
0

0.1

0.2
0.3
time [s]

0.4

0.5

Figure 13: Speed of inertia 2 for ηm f

 0 5.


300

Gear

C4

1
2
3
4
R

x
x
x
x

C5

C6

C7

x

x
x
x

x
x
x

C8

C11

C12

x
x
x
x
x

x

100
0

0

50

100
time [s]

150

200

vehicle acceleration [m/s2]

Figure 15: Desired and actual velocity of vehicle.

5

gear
0

ï5
0

50

100
time [s]

150

200

Figure 16: Vehicle acceleration and actual gear.

4

gear

2
0
ï2
ï4

0

50

100
time [s]

150

200

Figure 17: Loss torque ∆τ in planetary gear p3.

C5 C6 C7 C8
C11
C4

200

p3 loss torque ∆τ [Nm]

elica standard library are very well suited to simulate
the shift dynamics of automatic gearboxes reliably and
efﬁciently. As an example, the shift dynamics of the
automatic gearbox ZF 4HP22 is examined in more detail. A schematic together with the gear shift table is
given in ﬁgure 14 (from [2]).
From this schematic it is straightforward to build
up the Modelica composition diagram from ﬁgure 18
containing the clutches, combined clutches and free
wheels, and the three planetary gears with mesh friction (ηm f  0975).
In order that simulations can be performed, a
model of the environment in which the automatic gear
operates is needed. A typical example of a longitudinal dynamics model of a vehicle is shown in ﬁgure 19.
It consists of a driver, an engine, an automatic gearbox
with transmission control unit, an axle and a simple
1-dimensional vehicle model containing the most important drive resistances.
Signals, such as desired vehicle velocity or throttle
position, are transported between the components by a
signal bus. Via send and receive blocks, signals
can be send to or received from the bus connector bus

desired vehicle velocity
vehicle velocity

C12

Figure 14: Gear shift table for gearbox ZF 4HP22.

The Modelica Association

265

Modelica 2002, March 18−19, 2002

Modeling and Simulating the Efficiency of Gearboxes ...

Pelchen C., Schweiger C., Otter M.

fix2=0

fix3=0

C6

C8

C12

fix1=0

p1

p2

J=1e-4
a

C4

C5

p3
J=1e-4

ine...

ine...
i_0=-70/30

i_0=-70/30

C11

b

i_0=-70/30

Figure 18: Modelica composition diagram of automatic gearbox ZF 4HP22.

GULYHU

model for planetary gears has been implemented in a
new model LossyPlanetary which will be available in the next version of the PowerTrain library.

'ULYHU

VHQG

EXV/LQH
G
H
H
S
6
H
OF
L
K
H
Y

6 Acknowledgements

This work was in parts supported by ”Bayerisches
Staatsministerium für Wirtschaft, Verkehr und TechJHDUER[
FDU 
D[OH
nologie” under contract AZ300-3245.2-3/01 for
the project ”Test und Optimierung elektronischer
Figure 19: Modelica composition diagram of vehicle
Steuergeräte mit Hardware-in-the-Loop Simulation”,
longitudinal dynamics.
and by the European Commission under contract IST199-11979 for the project ”Real-time simulation for
design of multi-physics systems”.
Y

HQJLQH

5

Y

Conclusions and Outlook

A loss model for a broad class of standard gears
and planetary gears has been presented which includes Coulomb friction in the gearbox bearings and
Coulomb friction between the gear teeth. Most important, the locking and unlocking of the friction elements
are handeled, including the friction between the gear
teeth. This allows to model and simulate the stick-slip
effect of standard and planetary gears as function of
the shaft speeds and the driving or load torque which
is essential for the design of servo drives.
The usual approach to model mesh friction as an
element which switches between two different efﬁciencies, leads in such situations to chattering, i. e.,
very fast switching between the two possible modes
which in turn results in very small step sizes and practically stops the simulation. The new approach described here will lead to much more reliable and more
efﬁcient simulations.
The gear losses in standard gears have been implemented in a new model LossyGear which will
be available in the next version of the Modelica.Mechanics.Rotational library. The gear loss

Modelica 2002, March 18−19, 2002

266

References
[1] Dymola: “Homepage: http://www.dynasim.se/.”
[2] Förster H.: Automatische Fahrzeuggetriebe. Springer,
1991.
[3] Köhler G., and Rögnitz G.: Maschinenteile, Teil 2.
Teubner, 8th ed., 1992.
[4] Loomann J.: Zahnradgetriebe. Springer, 3 rd ed., 1996.
[5] Modelica libraries: “Homepage:
http://www.modelica.org/libraries.shtml.”
[6] Niemann G., Winter H., and Höhn B.: Maschinenelemente, Band 1. Springer 3 rd ed., 2001.
[7] Niemann G., and Winter H.: Maschinenelemente, Band
2. Springer, 2 nd ed., 1989.
[8] Otter M., Elmqvist H., and Mattsson S.-E.: “Hybrid
Modeling in Modelica based on the Synchronous Data
Flow Principle,” in CACSD’99, Hawaii, USA, August 22–26, 1999.
[9] Pelchen C.: “Wirkungsgradbehandlung bei Planetensatz und Standübersetzung.” Personal communication
to M. Otter and C. Schweiger, Nov. 2001.

The Modelica Association

Andreasson J., Jarlmark J.

Modularised Tyre Modelling in Modelica

Modularised Tyre Modelling in Modelica
Johan Andreasson and Jonas Jarlmark
Div. of Vehicle Dynamics
Dept. of Vehicle Engineering
Royal Institute of Technology
SWEDEN
E-mail: {johan,jonask}@fkt.kth.se

Abstract
Good tyre models are essential for driving simulation of all ground vehicles using pneumatic
tyres. However, tyre behaviour is extremely complex, often requiring diﬀerent models for the various behaviours. This paper presents an implemented tyre model library that takes advantage of
the modular modelling possibilities in Modelica to
combine diﬀerent models. For example, the diﬀerent sub models representing tyre-to-road contact
can be combined with various models for tyre belt
behaviour. The library can be used together with
vehicle models in one, two and three dimensions.

1

Introduction

Figure 1: The tyre construction of a normal pasComplex tyre behaviour is a direct result of the senger car tyre. 1 - tread, 2 - sidewall, 3 - radial
tyre construction. While looking much like a sim- cord, 7 - belt, 9 - bead.
ple rubber doughnut attached to the rim, the tyre
construction is vastly more complex, ﬁgure 1.
The two main functions of the tyre, is force gen- the main functions. There are also issues such as
eration in the road plane and suspension of the ve- rolling radius, steering behaviour, force feed back,
hicle mass. The force generation is made possible vibrations, sound radiation, water dispersion, diby the rubber tread, causing a high friction coeﬃ- rectional stability to be considered when designing
cient with the road surface. The suspension of the a tyre.
Depending on the type of modelling required,
vehicle mass is managed by the carcass, consisting of the belt, radial cords and beads. The radial single, several or all areas involved need to have
cords work like the spokes of a bicycle rim; a pre- exclusive models allocated. The selection of the
tension must be exerted by pressurised air inside areas of interest are made by the modeller. Therethe tyre to carry the loads. Because of the two fore, it can be of great help to posses a ﬂexible way
main functions of the tyre, modelling of the be- to add and subtract function models of the tyre.
haviour can be split into modelling the functions
When examining the main functions, the deof the tyre, rather than modelling the tyre itself. mand made on precision, processing time and
Naturally, there are more areas to take into ac- comprehension, generates a need for diﬀerent
count when the combination of components for the models for the same function. The suspension
tyre is to be selected and calculated. Areas such function is mostly modelled dynamically and is
as comfort, traction and cornering are covered by used for comfort purposes. A simple model could

The Modelica Association

267

Modelica 2002, March 18−19, 2002

Modularised Tyre Modelling in Modelica

Andreasson J., Jarlmark J.

be a spring - mass - damper system with one degree of freedom. If more complexity is required,
a rigid or ﬂexible belt model connected with pretensioned springs and dampers to the rim with
correct geometry as presented by Böhm [1] will
give a fairly good representation, ﬁgure 2. The
most complex models are the full FE-models with
anisotropic cord, internal rubber damping, complex friction behaviour and temperature calculation.

Fy [kN]
4
2
-15

-10

-5

5

10

15 α [o]

-2
-4

Figure 3: Typical appearance for the lateral force,
Fy , as function of slip angle, α, in this case generated with the Magic Formula, [3].
Belt
Rim

Figure 2:
springs.

Rigid belt model with pre-tensioned

For lateral and longitudinal direction, force generation models for cornering and traction are often
empirical models, where measured data are ﬁtted
to polynomials to give an analytical function, ﬁgure 3, however, physical models also exist. A simple modelling approach is the use of a cornering
stiﬀness; a linear relation between force and slip,
valid only in a very limited area of handling. A
simple but wider model would be a curve ﬁt of the
forces as a function of slip angle and slip ratio with
saturation and load dependency. A more complex models is the Magic Formula [2], developed
by TU Delft and Volvo Cars Corporation. This
model also includes force due to camber, rolling
radius changes and rolling resistance. The Magic
Formula will give lateral and longitudinal force,
aligning moment and driving moment from various analytical functions. All these models assume
point contact and do not take into account the
width or length of the contact patch. This assumption simpliﬁes the calculations and reduces
the need for accurate road data.

2

ensure that the model structure allows the simple addition and reuse of components within new
models, the modelling is based on two international standards; DIN and TYDEX. According to
the DIN coordinate representation, illustrated in
ﬁgure 4, x points forward, y to the left and z right
up. The TYDEX deﬁnition of the carrier frame,
C, and contact frame, W , is shown in ﬁgure 5. The
carrier frame is ﬁxed at the car’s suspension and
the contact frame is located at the intersection
of the carrier frame’s z-axis and the road plane.
Generally, the contact point is not located at the
origin of frame W and therefore a frame W  is introduced. Frame R, located at the rim, is used
since the forces and torques generated by the tyre
cannot act directly at the carrier.

ψ
z

ϕ

x

y

θ

Figure 4: The coordinates according to DIN. Yaw,
pitch and roll are indicated with ψ, θ and ϕ, respectively.

Definitions

Because of the tyre complexity, several reference
frames are necessary to model its behaviour. To

Modelica 2002, March 18−19, 2002

268

The Modelica Association

Andreasson J., Jarlmark J.

Modularised Tyre Modelling in Modelica

3.1

The hub is mounted on the carrier and allows
the wheel and drive axis to rotate around the yaxis. Since none of the frames rotates with the
wheel, the Modelica-model of the hub transforms
the forces and torques acting at the rim frame, R,
to the carrier frame, C and the drive axis. This
cannot be done by a standard component since
the torque around the y-axis only should act at
the drive axis.

C
γ
R

3.2

W

Hub

Tyre belt

W

The tyre belt carries the load on the wheel distributing the forces from the tyre-road contact
patch to the rim. As mentioned earlier, the patch
is approximated with a point. The Modelicamodel of the tyre belt describes the relation between the contact point frame, W  , and the rim
frame, R. There are several ways of implementing this where the simplest rim model neglects the
3 Model structure
”horizontal” deformation of the tyre belt which
The models that this modularisation is based on gives W  = W .
all assumes that the tyre-road contact patch can
be approximated by a point. This assumption is 3.3 Tyre-road contact
used to deﬁne the cuts at the tyre-road, the tyre
rim and the rim-carrier. With this modularisa- The tyre-road contact generates friction forces and
tion, a tyre can be described with three parts, hub, torques that act on the tyre belt. The Modelica
tyre belt and tyre-road contact, as shown in ﬁg- model calculates and applies these to the contact

ure 6. These components are described in more point frame, W . Most of these models are emdetail below, the frames referred to are indicated pirical and generates forces as functions of slip,
camber angle etc. An example is the Magic Forin ﬁgure 5.
hub
mula model used in ﬁgure 3.
hub
C

Figure 5: The frames used in the modelling. The
deformation of the tyre belt results in a displacement of the contact point from W to W  . The
carrier frame, C, and the rim frame, R, do not
rotate with the wheel.

4
wheelAxis
wheelAxis

carrierFrame
carrierFrame

R

tyreBelt
tyreBelt

In addition to the main components described in
section 3.1-3.3, other components are realised to
simplify the extension of the Wheels library. Some
of which are described in more detail below.

W
t t
z

Utilities

4.1

State handler

z

This component is introduced since the tyre models are not strictly physical. This is due to the
f
f
modularisation and to the fact that some tyre
tyreRoad
states cannot be calculated from the simpler modtyreRoad
Figure 6: The tyre models consists of three main els. For example, x−y vehicle models, as the bicysubcomponents: The hub, the tyre belt and the cle model [3], require that the normal force and the
tyre-road contact.
camber angle are given as parameters. More detailed models, where this information is required,
f

x

x

The Modelica Association

f

y

y

269

Modelica 2002, March 18−19, 2002

Modularised Tyre Modelling in Modelica

Andreasson J., Jarlmark J.

can be used in a convenient way by using this state axis and thus, the wheels can be connected with
available packages for power-trains.
handler.
To guarantee that the diﬀerent tyre models are
replaceable, they all are based on interface models,
4.2 Contact point
BaseWheel[*], where [*] is the dimensions they
The ContactPoint component is used within the are meant for, e.g. BaseWheelXY for a wheel in
TyreBelt to calculate frame W . Depending on the XY plane. In total, seven diﬀerent interfaces
the implementation this can be implemented in are realisable, X, Y, Z, XY, XZ, YZ and XYZ.
several ways. As described in [4], external road
information can be provided via the inner/outer
Modelica constructs. Information needed to cal- 5.1 MultiBody2D
culate W is the road normal and altitude as a
function of longitude and latitude.
This library is used to describe two-

4.3

Camber angle

The camber angle is the angle between the road
normal and the z-axis of the carrier frame, indicated with γ in ﬁgure 5. The implementation in
Modelica is more general and calculates the angle
between the z-axes of any pair of frames.

4.4

Tyre radius

dimensional mechanical systems and is based
on the same ideas as the three dimensional
ModelicaAdditions.MultiBody library,
[5].
Instead of three DOF each for translation and
rotation as in the 3D-case, this library has two
DOF for translation and one DOF for rotation,
allowing only planar motion.
The Modelica
deﬁnition of the interface is:
connector Frame a
Modelica.SIunits.Position r0[2];
Real S[2, 2];
Modelica.SIunits.Velocity v[2];
Modelica.SIunits.AngularVelocity w;
Modelica.SIunits.Acceleration a[2];
Modelica.SIunits.AngularAcceleration z;
flow Modelica.SIunits.Force f[2];
flow Modelica.SIunits.Torque t;
end Frame a;

There are at least three diﬀerent tyre radii, undeﬂected radius, R, eﬀective rolling radius, Re
and loaded radius, Rl . The loaded radius is the
wheel centre’s height over ground, while the effective rolling radius is a measure of how far a
free rolling tyre travels per revolution. Generally,
Rl < Re < R. This means that the rolling tyre
travels farther per revolution than determined by
using the wheel’s centre height as rolling radius.
Mixing these deﬁnitions would thus lead to erroneous simulation results.
In ﬁgure 7, parts of the MultiBody2D-library are
In the Wheels library, the loaded radius, can be shown.
calculated at any time, while the eﬀective rolling
radius as well as the undeﬂected radius must be
given as parameters or functions.
InertialSystem
Body
Interfaces

Parts

Library

Library

Body2

FrameTranslation

r=

5

Interfaces

Joints

Forces

Library

Library

CutJoints

Sensors

TwoD2ThreeD

ThreeD2TwoD

ShapeBody=

Shape

As mentioned earlier, the Wheels library can
Library
Library
be used in one, two and three dimensions.
The interfaces for these are taken from the
Library
Planar
Revolute
Modelica.Mechanics.Translational (1D) and
ModelicaAdditions.MultiBody (3D), [5].
To
handle the the two-dimensional models, a li- Figure 7: The MultiBody2D library. The parts
brary MultiBody2D has been realised. Addition- indicated provide an interface to the Modelicaally, for example, the interfaces from Modelica. Additions.Multibody library.
Mechanics.Rotational are used for the wheel
Visualisers

Prismatic=

Modelica 2002, March 18−19, 2002

270

The Modelica Association

Andreasson J., Jarlmark J.

6

Modularised Tyre Modelling in Modelica

Usage

replaceable and redeclare. To illustrate how
this works, an example with a replaceable front
To get a better idea of how the Wheels library can wheel in a bicycle model in the x-y plane is disbe used, some examples and aspects are presented cussed.
below.
Since all wheel models for the x-y plane have the
same interface, BaseWheelXY, this is used within
6.1 Bicycle model
the declaration of the bicycle model:
The bicycle model is a very simple model of a vehicle. However, it provides essential information
about a vehicle’s behaviour. The motion is restricted to the x-y plane and the, normally, two
wheel per axis are replaced by one single wheel,
i.e. a bicycle with the centre of gravity in the
ground plane.
In ﬁgure 8, a bicycle model of a car with a trailer
is shown. The bicycle is connected to an inertial system (1) via a planar joint (2) allowing x-y
translation and rotation around z. The bicycle
consist of a body (3) with mass and inertia, translations (4,5) from the centre of gravity to the front
and rear wheels and a revolute joint for the steering (6). The wheels (7,8) could be of any kind as
long as they use the BaseWheelXY interface. Additionally, a connector COG (9) makes it possible to
attach further components to the model. In this
case a trailer is attached, it would also be possible
to add, for example, aero dynamical models and
sensors.

model Bicycle
replaceable BaseWheelXY frontWheel;
...
end Bicycle;
Whenever a bicycle model is used, the tyre model
can easily be replaced with any x-y model:
model AnyXY
extends BaseWheelXY;
...
end AnyXY;
model BicycleTest
Bicycle bicycle(redeclare
AnyXY frontWheel);
...
end BicycleTest;
Without this feature, a new model, in this case
the Bicycle model, would have to be realised for
each combination of wheel models studied.

6.3

Parameterisation

Lane
Lane
change
change

rear
rear

9

5

r={-1,0}

inertialSystem
inertialSystem

1

y

x

4 front
front

y

x

3

frontWheel
frontWheel

box

frontSteering

7

8

steering
steering

phi
delta

r={0.7,0}
planar
planar

y

body
body
x

CoG
COG

car

rearWheel
rearWheel

trailer

6

2

The more complex a tyre model gets, the more parameters are required. As an example, the Magic
Formula model to calculate the steady-state forces
and torques acting at the contact point requires 73
parameters. Since the parameter sets diﬀer from
model to model, it would be lengthy to deﬁne each
parameter value within a redeclare phrase as described in section 6.2.
Instead, the parameter sets are gathered in
records that are used like structural variables.
These records can then be treated as single parameters and be stored as models in the library.

Figure 8: An implementation of a bicycle model
with the MultiBody2D library, note how simple it 6.4
is to add a trailer.

Adding components for visualisation

Due to the modularisation, additional components
can easily be attached. To illustrate this, an ex6.2 Switching tyre models
ample where animation information is added to
Modelica provides a convenient way of re- the tyre is shown. In ﬁgure 9, components named
placing models with the same interface using contact and contactPatch are added. contact

The Modelica Association

271

Modelica 2002, March 18−19, 2002

Modularised Tyre Modelling in Modelica

Andreasson J., Jarlmark J.

provides visual information about the forces as
Assume that the y-z motion of a car is to be
vector shapes acting at the cut. In this case, the studied, when driving with constant speed on a
highway, and that an XYZ model is to be used.
With the component TwoD2ThreeD, a connection
hub
between the tyre model in 3D and the car in 2D
can be made as illustrated in ﬁgure 11. The additional information needed for the 3D frame, such
carrierFrame
driveShaft
as longitudinal speed, is given as parameters.
driveShaft

carrierFrame

tyreBelt
contactPatch

box

contact

t

chassis

3D cut

rightW heel

z

lTw oD2ThreeD
fx

3D cut

leftW heel
rTw oD2ThreeD

fy

tyreRoad

2D cuts

Figure 9: Since the components are separated it
is easy to add additional information, in this case
Figure 11: An example of how dimensions can be
graphical information.
mixed. The TwoD2ThreeD component, allows a 3D
contact point forces are visualised but this com- wheel to be connected to a 2D car model.
ponent could of course be attached at any cut to
illustrate forces. contactPatch is an ordinary box
6.6 Choosing accurate models
shape that visualises the contact point as a square.
This is a very simple way to to illustrate the tyre Even if the modularisation eases the modelling
belt deformation. Figure 10 shows a snapshot of work, the need to understand the models, in orthe animation result.
der to know their limitations is still a necessity.
Performing manoeuvres that takes the tyre model
outside the valid range may have fatal consequences as seen in the following example:
With a vehicle model, two steering step inputs
of 0.03 rad and 0.2 rad at the front wheels are
simulated. First, a linear tyre-road contact model
is used and then, the same simulations are performed with a Magic Formula tyre-road contact
model. In the ﬁrst case, the wheel slip is low and
both models behave similarly, but for the second
case, the linear model is no longer relevant, ﬁgure 12.
In the above example, the limitation of the linFigure 10: These animation pictures shows forces ear model is deliberately made obvious, but often
in x-, y- and z- direction of the W  frame. The it is harder to detect when the range of the model’s
tyre belt deformation is indicated by the red square. validity is exceeded. To help the user avoid these
situations, the plan is to add an alert procedure
that checks crucial variables against model limitations. This function is not yet implemented.
6.5 Mixing dimensions
Up to this point it has been assumed that the tyre
6.7 Case study
model used has the same dimensions as the car
model that is used. However this is not a necessity To give an example of the usage of the Wheels
as will be shown in the following example.
library and further illustrate the necessity of cor-

Modelica 2002, March 18−19, 2002

272

The Modelica Association

Andreasson J., Jarlmark J.

Modularised Tyre Modelling in Modelica

ψ̇

are introduced. λ indicates the distance from the
front wheels to the centre of gravity. µ scales the
height of the lateral force peak, shown at about
α = 5o in ﬁgure 3. Thus µ = 1 does not aﬀect the
tyre and λ = 0.5 means that the centre of gravity
is located half way between the wheel axes. The
variation is done according to:

0.1
Linear
Magic Formula
0

0

0.4

0.8

1.2

1.6

2

2.4

2.8

t

ψ̇
λ0
λ−
λ+
µ0
µ−
µ+

1

0

0

0.4

0.8

1.2

1.6

2

2.4

2.8

t

Figure 12: The plots show the yaw speed response.
The upper plot shows similar results for both models while the lower plot shows how the linear model
lacks ability to predict skidding. Obviously, this
manoeuvre is outside the model’s range of validity.
rect tyre models, a parameter study is performed.
The concepts understeer and oversteer are familiar to many and a widely spread opinion is that
a car with more ”weight on the front wheels” will
understeer while more ”weight on the rear wheels”
will make the car oversteer.
To show the limitation of this theory a variation
of the location of the centre of gravity is compared
to a variation of the tyres’ maximum side force.
The results are shown with the understeer gradient, Kus , which is a quantiﬁcation of how much
more one has to turn the steering wheel to increase
the lateral acceleration, compared to a neutral car.
Mathematically this is deﬁned as
Kus =

1 ∂δH
∂δA
−
is ∂ay
∂ay

(1)

273

µrear = 1.0
µrear = 1.1
µrear = 0.9

The simulation is made using a bicycle model at
constant speed. The steering wheel input is given
as series of step increase. Between each step, the
car stabilises and the lateral acceleration is logged.
This information is then used to calculate Kus .
The result of the simulations is shown in ﬁgure 13. At low lateral accelerations, Kus depends
solely on λ and the theory presented above holds.
As ay increases, µ gets more important and for
high ay , when the car skids, the tyre choice dominates. Neglecting this eﬀect when designing a car
would thus lead to unknown behaviour in critical
situations.

Kus

0.05

λ− ,µ−
λ+ ,µ−
λ0 ,µ0
λ− ,µ+
λ+ ,µ+

0.04

where δH is the steering wheel angle and is the
ratio between the steering wheel angle and the
wheel angle. δA , called the Ackermann angle, is
the wheel angle required to turn the car at low
speed with no slip and ay is the lateral acceleration.
Positive Kus thus means that the driver has to
turn the steering wheel more to get the desired
motion compared to driving a neutral car, i.e. the
car understeers. If Kus is negative, less input has
to be given and the car oversteers.
To perform the variation, the variables λ and µ

The Modelica Association

λ = 0.50
λ = 0.45
λ = 0.55
µf ront = 1.0,
µf ront = 0.9,
µf ront = 1.1,

0.03
0.02
0.01
0
-0.01
-0.02
-0.03
-0.04
-0.05

1

2

3

4

5

6

7

8

9

10

ay

Figure 13: Result of the parameter variation.

Modelica 2002, March 18−19, 2002

Modularised Tyre Modelling in Modelica

7

Andreasson J., Jarlmark J.

Limitations

The largest limitation of the modularisation is
that the selection of model accuracy must be problem based. This will require complete understanding of the problem by the user to be able to use
the apropriate models. Another limit of the modularisation presented, is that the contact patch is
assumed to be a point. This assumption is not
valid for situations such as; driving on uneven surfaces, hitting pavements or crossing potholes. Additionally, when the steering input changes rapidly
compared to the speed, for example when parking,
the slip cannot be assumed to be constant over the
whole patch which makes it much harder to use a
contact point approximation.

8

[4] Andreasson, Möller, Otter. Modeling of a
Racing Car with Modelica’s Multi-Body Library. Paper presented at the Modelica Workshop 2000, Oct. 23-24, 2000, Lund, Sweden.
[5] Modelica Association ModelicaAdditions.
MultiBody
http://www.Modelica.org/library/library.html
[6] The Modelica Association Modelica specification, v1.4 http://www.modelica.org/

Conclusions

The suggested division of the tyre model into hub,
belt and road contact has simpliﬁed the reuse of
model components and thus, made it easy to extend the Wheels library and to add new functionality. At the same time the coupling of behaviour
that are functions of two or more parts is more
complicated than without the separation.
The possibility to quickly replace the tyre models or sub-components when switching model accuracy will be of great advantage and this possibility will most certainly be used more frequently
as the selection of components grows.

9

Acknowledgements

The authors would like thank Sven-Erik Mattsson
and Hans Olsson at Dynasim AB for their support, Martin Otter at DLR for support and code
sharing and Boris Thorvald at Scania CV AB for
constructive comments.

References
[1] Böhm, Mechanik des Gürtelreifens IngenieurArchiv XXXV 1966, pp 82-101.
[2] Bakker, Pacejka, Lidner. A New Tire Model
with an Application in Vehicle Dynamics
Studies SAE paper 890087
[3] Gillespie. Fundamentasls of Vehicle Dynamics ISBN 1-56091-199-9.

Modelica 2002, March 18−19, 2002

274

The Modelica Association

Moormann D., Looye G.

The Modelica Flight Dynamics Library

The Modelica Flight Dynamics Library
D. Moormann and G. Looye
German Aerospace Center (DLR)
Institute of Robotics and Mechatronics
Oberpfaffenhofen, D-82234 Wessling, Germany
phone: +49 8153 28 1068 / fax: +49 8153 28 1441
E-Mail: Dieter.Moormann@dlr.de, Gertjan.Looye@dlr.de

Abstract

and drag of the aircraft, while still guaranteeing the required overall aircraft flight characteristics in case of
The Modelica Flight Dynamics Library has been de- failures.
veloped to model 6-degrees-of-freedom, nonlinear Traditional aircraft models are built using domain speflight dynamics and flight systems. Using this li- cific software packages that best solve their specific
brary the multidisciplinary interaction between flight task with respect to the different disciplines involved,
dynamics and systems can easily be understood and e.g., flight mechanics, propulsion, controls and hyanalyzed. In this contribution the main benefits of the draulics. As a drawback, those packages usually have
Flight Dynamics Library, concerning model building very limited capabilities with respect to other domains
and efficient code generation – in particular for non- and thereby it is quite cumbersome to link the different
linear parametric simulations and trim computations – model components together. Hence, to develop a comare discussed. The library has been successfully ap- prehensive aircraft dynamics model with low engiplied to the development of aircraft models for several neering effort, it is necessary to apply a model descripflight control system design projects.
tion form that is well suited for all domains involved
and meets the requirements for multidisciplinary aircraft model integration. This description form has to
1 Introduction
be equally expressive for flight dynamics and for systems, which includes mechanical, electrical, hydrauliThe design of aircraft requires contributions from difcal, and discrete digital control elements.
ferent disciplines that are usually represented by different specialized groups within the aircraft develop- For this purpose we propose an object-oriented modment process. In design and evaluation of controlled eling approach, developed as a general tool for a wide
variety of systems described by differential and algeflight system dynamics this is obvious.
In particular, the basic flight dynamics model con- braic equations. The advantage of such an approach is
sists of a description of aircraft geometry and mass to- that it is easy to understand and that it can be used to
gether with equations of motion and of environmental visualize the hierarchical decomposition of a complete
influences such as gravity, atmosphere, and wind/gust. system. For each discipline, reusable domain specific
Basic flight dynamics are affected by aerodynamics model libraries can be built to encapsulate pertinent
and propulsion, two other distinct disciplines involved. knowledge. The ability to work with submodels of
The flight dynamics interact with the onboard sys- different granularity is helpful for the design of flight
tems, which can be grouped into motivators, sensors, control systems, where it is necessary to work with
and controls. Note that motivators consist of control system models and flight dynamics models concursurfaces such as elevators, and actuators which drive rently. During the design iteration process it should
be possible to adjust both the refinement of the systhem.
Optimizing the interaction between flight dynamics tem model and the complexity of the flight dynamics
and systems is an important area of investigation to model.
improve efficiency of operation. For example, con- An important feature of object diagrams is that they
trol surfaces can be designed to be ’just-right’ in size are not limited to block diagrams with signal-directed
and dynamic performance in order to minimize mass input/output behavior. In an object diagram, for ex-

The Modelica Association

275

Modelica 2002, March 18−19, 2002

The Modelica Flight Dynamics Library

Moormann D., Looye G.

ample, the constituents of flight dynamics can be connected naturally according to their physical energy
flow interaction and it is not required to transform all
objects into a mathematical block diagram form as it
has to be done for block oriented control modeling environments such as M ATLAB -S IMULINK.
This paper describes how nonlinear aircraft dynamics
models can be composed using the M ODELICA-Flight
Dynamics Library. Its main benefits concerning model
composition using object-oriented structuring principles are presented in section 2. Its benefits resulting from an efficient mathematical code generation are
discussed in section 3, where special emphasis is put
on code generation for efficient parametric simulation
and on highly accurate and efficient trim procedures.

2

Interactive multi-point model composition via hierarchical objectdiagrams

The ’local’ description of each aircraft component (see
Fig. 1) with respect to its intrinsic reference points
(e.g., Center of Gravity COG, Body Geometric Reference BGR, Thrust Application Point TAP, Aerodynamic Center AC) in its domain specific coordinate
system supports ’multi-point’ modeling. The multipoint modeling approach allows, e.g., the proper handling of center of gravity variations and sensor positioning without any additional modeling effort, which
is usually a very time-consuming and error-prone process.
A multi-point model also becomes necessary, when,
e.g., the coupling effects between ’aircraft’ and ’air
flow’ need to be modeled with higher accuracy than
can be obtained by using a ordinary one-point model,
where all the force, moment and velocity vectors are
referred to the aircraft’s center of gravity only [2].

An aircraft consists of a variety of different systems,
which represent the interacting disciplines involved in
aircraft engineering (e.g. flight mechanics, aerodynamics, engine dynamics).
Figure 2: Local differential air velocity due to wing
downwash and engine flow [2]

motivator dynamics

MOTI 1... n

It is obvious from Fig. 2, that the local airflow is different for different points at the airframe due to aircraft rotation, changing wind fields, wing downwash
and engine flow. The complete local airspeed Va for
each point P can be calculated from the local inertial
speed V (P) and the local speed of the airflow Vw (P):

aerodynamics

AC
rigid body dynamics

COG

TAP2
BGR

gravity
atmosphere
wind

SENS 1... n
sensor dynamics

Va (P) = V (P) − Vw (P) .

TAP 1
engine dynamics

Figure 1: Domain specific reference points of flight
dynamics and system models
Models of aircraft dynamics should be described in a
notation close to the aircraft physics. The most natural
way of modeling physical systems is as physical objects and phenomena, which are connected according
to their physical energy flow interaction and kinematic
constraints. This is different from modeling via signal
flows or input-output block diagrams as traditionally
used for controller modeling.

Modelica 2002, March 18−19, 2002

276

Above equation can be expanded to identify all partial
velocity vectors to give the complete airspeed at the
point considered:
Va (P) = V (COG) − Vw (COG) + ∆V (P, ω)
−∆Vw (P) − ∆Vwdw (P) .
The total local airspeed is summed up by the inertial
velocity of the center of gravity V (COG), the speed of
wind at COG Vw (COG), the additional airspeed due to
aircraft rotation ω at P about COG ∆V (P), the effect
of wind gradients due to its offset from COG ∆Vw (P)
and the effect of wing downwash and engine flow at P
∆Vwdw (P).

The Modelica Association

Moormann D., Looye G.

The Modelica Flight Dynamics Library

Using a 2-point-aerodynamics approach it is quite convenient to properly model the influence of aircraft rotation, wing downwash and wind gradients. According

Flight Dynamics Library
Main library

controls

aeroWingBody

toAWC
BGR

downWash

AWC

Connect

Trafo

Body

Engine

Aero

Environ

Systems

Examples

aeroTailplane

AWCtoATC

“drag & drop“

ATC

motivators

Figure 3: 2-point-aerodynamics object diagram with
respect to the aircraft geometric reference BGR
to the object model of Fig. 3 this is done by separately
describing the aerodynamics of wing/body (with respect to the Aerodynamic Wing Center AWC) and of
the tailplane (with respect to the Aerodynamic Tail
Center ATC). Between the aircraft body geometric
reference BGR and these two aerodynamic reference
points there are geometric offsets, which are explicitly made visible by the instances ’toAWC’ and ’AWCtoATC’ of a validated coordinate transformation class.
The advantage of this approach is that the influence of
aircraft rotation ∆V (P) and the effect of wind gradients
∆Vw (P) of above equation are automatically correctly
handled by generic transformation objects.
In the same way, using the Flight Dynamics Library,
all interactions between components of Fig. 1 can be
properly formulated. In order to make the understanding of all submodels easy, each component of the library is described in its own coordinate system. Gravity, wind, and atmosphere are conveniently described
in an earth related coordinate system, aerodynamics
in a wind coordinate system, and engines in a system
which is related to the body-fixed coordinate system.
Therefore, in addition to the basic aircraft components,
coordinate transformations are also detailed and handled as objects in the Flight Dynamics Library (see
upper part of Fig. 4). Except for aerodynamics and
engine objects all other objects are independent of a
specific aircraft type.
The objects that constitute the rigid-body flight dynamics are interconnected according the object diagram of the bottom part of Fig. 4. Center point of
the flight dynamics object model are the body geometric reference BGR and the center of gravity COG together with the body-object, which describes the mass
properties and equations of motion of an aircraft. The

The Modelica Association

277

aerodynamics

engine1
BGR

COG
toCOG
6-dof

engine2

body
sensors

gravity
wind
atmosphere

Figure 4: Interactive “drag & drop”-model building,
top: flight dynamics class library, bottom: flight dynamics object-diagram
connections between objects represent their interaction. The complete aircraft consists of a body (fuselage and wing), which is powered by one or more engines. The aerodynamics describes the effects of the
airflow over the aircraft. The aircraft is influenced by
gravity and the surrounding atmosphere and winds.
Additional dynamics is resulting from models of motivators and of sensors.
The connectors used to describe the interaction between flight dynamics objects, as specified by bold
solid lines in the object diagram of Fig. 4, are the
same as those used within the M ODELICA-Multibody
Library1 . The connector contains all variables which
specifies the orientation, position and the corresponding speeds and accelerations with respect to some inertia. For aircraft usually some point at the earth’s surface together with a ’north-east-down’ coordinate system is defined as inertial reference. Additional connector variables are the force and moment vector, acting
1 URL:

http://www.modelica.org/library/ModelicaAdditions/
docu/ModelicaAdditions MultiBody.html

Modelica 2002, March 18−19, 2002

The Modelica Flight Dynamics Library

Moormann D., Looye G.

at the origin of the point defined by the connector and
solved in the coordinate system of the connector.
Specific for aircraft are the models of gravity, atmosphere and wind/gust. For multi-point models it is essential to properly formulate these models as fields,
which usually vary with inertial position. For this purpose M ODELICA offers the concept of ’dynamic scoping’ [8]. Using this concept gravity fields, wind/gust
fields and atmospheric data depending on the inertial position of individual aircraft components can
be specified. Without any user effort the 2-pointaerodynamics of Fig. 3 is automatically handled correctly, because e.g. the wind field (and its gradients)
are inherited position dependent to the aerodynamics
models of wing/body and of the tailplane.
Flight Dynamics Library
Sublibrary: Body

6-dof
description

6-dof

longitudinal
description

longitud

Quaternion
description

Quat

Gyro
description

Gyro

or
or

aerodynamics

engine1
BGR

COG
toCOG
6-dof

engine2

body
sensors

gravity
wind
atmosphere

Figure 5: Local exchange of sub-components
In the Flight Dynamics Library different representations of one specific component can be found (see
Fig. 5). There is a class with six degrees of freedom
body, and another class with three degrees of freedom bodyLong that can be used to generate a nonlinear simulation model for the longitudinal motion only.
The ordinary formulation of the equations of motion
can be exchanged by a representation using quater-

Modelica 2002, March 18−19, 2002

An important aspect of object-oriented modeling is the
hierarchical structure and local encapsulation of objects. With the graphical user interface of DYMOLA,
it can be zoomed into objects to display their internal structure. Zooming into the engine-object in the
lower left part of Fig. 6 results in the engine model
as detailed in the top left of this figure. It shows that
the engine dynamics are described with respect to the
thrust application point TAP. This is the most natural point at the airframe to formulate propulsion effects. The thrust application point is connected to the
aircraft reference BGR via a transformation object toTAP, which details the offset in position and orientation from TAP with respect to BGR. Depending on
this offset the generic transformation object is instantiated with the particular parameter values (top right
of Fig. 6). As a result, the local engine forces and
moments with respect to BGR are automatically computed.
Zooming into the body-object in the lower left part of
Fig. 6 shows the equation layer of this component as
displayed in the lower right part of this figure. Objects, which form the physical model, contain declarative mathematical equations, not assignments as is
common in simulation languages. This makes the understanding and engineering reuse much easier as opposed to simulation code put in a form mainly for computational execution. A generic object with declarative
equations can fulfill different application tasks. For
example, the object toCOG which does the transformations between COG and BGR is used for transforming velocities with respect to COG to velocities
with respect to BGR, as required as an interim step for
aerodynamics and thrust calculations. The same object
is used for the transformation of forces and moments
from the BGR reference to the COG-reference, as required for solving the equations of motion within the
body-object.

or

motivators

nions. There are also wind, atmosphere and gravity
models of different complexity. Existing codes for
aerodynamics and engine models can easily be reused
by using templates.

278

When connecting objects, only the relation between
them is defined, and not the order in which the object equations are finally solved. Here the computer
is used to sort the object equations automatically by a
symbolic equation handler rather than performing this
process manually. This aspect is handled in the following section.

The Modelica Association

Moormann D., Looye G.

The Modelica Flight Dynamics Library

toTAP

TAP

toTAP

TrafoEngine

throttle

BGR
thrust application point

thrust

motivators

aerodynamics

// Transformation matrix between bodyfixed and geodetic axes,
// according to DIN 9300
bTg = [ cos(theta)*cos(psi),
cos(theta)*sin(psi),
-sin(theta);
sin(phi)*sin(theta)*cos(psi) - cos(phi)*sin(psi),
sin(phi)*sin(theta)*sin(psi) + cos(phi)*cos(psi),
sin(phi)*cos(theta);
cos(phi)*sin(theta)*cos(psi) + sin(phi)*sin(psi),
cos(phi)*sin(theta)*sin(psi) - sin(phi)*cos(psi),
cos(phi)*cos(theta)
];

engine1
BGR

COG
toCOG
6-dof

engine2

body
sensors

gravity
wind
atmosphere

// rotational equations of motion
Mb = I * zb + cross(wb,(I*wb));
// rotational acceleration
// = time derivative of rotational velocity
zb = [der(p), der(q), der(r)];
wb = [ p , q , r ];
// Time derivative of Euler Angles

Figure 6: Zoom into an hierarchical structured object-diagram

3

Equation-based model building
and efficient simulation code generation

extend. This allows to generate so called ’inverse
models’ which can be used for trim computations or
which become nonlinear Dynamic Inversion (DI) control code [5] within a flight computer. The inversion
according to the middle and right branch of Fig. 7 is
mainly done by exchanging the external inputs and
outputs while still using the same object model which
has already been used to generate code for the simulation model. The equation handler of DYMOLA is used
to solve all equations according to one of the above
specified tasks. The derivation of an highly accurate
and very efficient trim code is discussed in section 3.2,
the DI-code generation is detailed in [5] and not presented here.
All generated models can be simulated with DYMOLA
or with S IMULINK, using DYMOLAS S-function
model generator. Additionally, automatic code generation is possible for the real-time engineering flight
simulator AVDS (section 3.3).

From the model, that is graphically specified by a set
of object diagrams, simulation models and documentation of the flight dynamics and systems can be generated automatically.
In the modeling process the object model is composed
using different libraries and aircraft specific parameter
data (see Fig. 7). The equation handler of DYMOLA
solves the equations according to inputs and outputs of
the complete aircraft model for a particular task. Equations, that are formulated in an object, but not needed
for the specified configuration, are automatically removed in the following model building process. The
result is a nonlinear symbolic state space description
with a minimum number of equations for this task.
Models for efficient parametric nonlinear simulations
(section 3.1) can be automatically generated from object models of the Flight Dynamics Library, using the 3.1 Efficient parameterized simulation modleft branch of Fig. 7.
els
Due to M ODELICAs equation-based approach it is possible to invert the interacting flight dynamics and flight Generally a simulator requires that system models are
systems model symbolically to the highest possible transferred to a state space description:

The Modelica Association

279

Modelica 2002, March 18−19, 2002

The Modelica Flight Dynamics Library

Moormann D., Looye G.

phycial system model

physical modelling
(interactive)

system parameters
components libraries

u

input V
input gamma
input beta

...

output da
output de
output dr
output u
output v

output da
output de
output dr

y

...

8

y
8

input da
input de
input dr
...
output Vcas
output V
output Vground
output p
output q

u
specification
of model
inputs / outputs
for a particular task

u

...

...

input p_dot
input q_dot
input r_dot
input u
input v

.

y,y,...

...

mathematical
model building
(automatic)
sorted & solved
equations for
trimming

sorted & solved
equations for
simulation

sorted & solved
equations for
dynamic inversion (DI)

code generation
(automatic)
simulationcode
e.g. SimulinkS-funktion

(realtime)
flight simulator
e.g. AVDS

trim-code
e.g. SimulinkS-function

operational
DI Code
e.g. C, Ada

flight control laws

Figure 7: Equation based model building process

ẋ = f ( x, us , par,t )
ys = g ( x, us , par,t ) .
To achieve such a standard description from an object model it is only necessary to assign the aerodynamic and engine controls as simulation inputs us and
the measurement and evaluation signals as simulation
outputs ys . For the generation of simulation models
the state vector x, which consists of the 12 basic flight
dynamics states and of additional states of engine dynamics, actuator- and sensor dynamics, is automatically considered as known. Additional inputs are the
simulation time t and the parameter vector par (e.g.
mass, center of gravity position, wing area). Depend-

Modelica 2002, March 18−19, 2002

280

ing on all inputs time derivative of the state vector ẋ
and the output vector ys is computed. Fig. 8 defines a
typical set of inputs, outputs, and states of a flight dynamics model. A typical set of flight dynamics states
consist of the velocity (V ), the angle of attack (α),
the angle of sideslip (β), the angular velocities (p, q,
r), the attitude (φ, θ, ψ) and the inertial position (x,
y, z). Simulation model inputs are the aerodynamic
control surface deflections of tailplane (dt), elevator
(de), aileron (da) and rudder (dr), the engine controls (throttle1, throttle2) and, for example, additional
gust inputs (u gust, v gust, w gust). Typical simulation model outputs are the measurements signals such
as height, V , α, β and the roll angle φ and the evaluation signal such as the flight path angle γ and the load

The Modelica Association

Moormann D., Looye G.

The Modelica Flight Dynamics Library

states

der(states)

control inputs

outputs

V

der(V) = 0

dt

height

α

der(α) = 0

de = const

V

β

der(β) = 0

da

γ=0

p

der(p) = 0

dr

α

q

der(q) = 0

throttle1 = const

nz

r

der(r) = 0

throttle2 = const

β

φ

der(φ) = 0

u_gust = const

φ

θ

der(θ)

v_gust = const

ψ=0

der(ψ)

w_gust = const

x=0

der(x)

y=0

der(y)

z

der(z)

Simulation
environments,
such
as
M ATALB /S IMULINK, offer trim routines for this
task that use the simulation model to perform trim
calculations, which are driven by a numerical optimization algorithm. For this purpose the state
derivatives ẋ and outputs of the of the simulation
model ys are set equal to their desired trim values ẋtr
and ytr :
ẋ = ẋtr
ys = ytr
The trim values of states x and simulation inputs us are
calculated using the following constraint equation:
ẋtr − f ( x, us , par,t ) = 0
ytr − g ( x, us , par,t ) = 0

Figure 8: Inputs, outputs, and states of a flight dynam- The advantage of this numerical approach, using the
ics model (actuator, sensor models are omitted here)
complete simulation model, is that consistency between simulation model and trim computation is aufactor nz. For a detailed definition of these variables tomatically guaranteed by using the same model. The
disadvantage of this approach, which is achieved by a
see, e.g. [1].
Automatic code generation, for example for very high number of model evaluation of the simulaS IMULINK, is possible separately for subcompo- tion model, is its rather high calculation time and its
nents as specified in Fig. 9 as well as for the complete comparatively low accuracy (’miss-trim’). The inacaircraft model. The latter approach has the advan- curacy, which increases with the complexity and nontage that the transformation equations, which are linearity of the model, results from this procedure nein particular necessary for multi-point models, can glecting the fact that some of the states directly debe sorted (and eliminated) according the specified pend on each other. For example, actuator and sensor
task. Algebraic loops, which occur if, e.g., the states are treated as independent from the flight dyaerodynamic forces depend on accelerations, can be namics states and inputs even though they are directly
related to them.
solved automatically using tearing [3].
Before starting a simulation, the initial, stationary in- An alternative is to trim the subcomponents of the airputs and states for a desired point of the flight envelope craft model (see Fig. 9) separately. First the flight dyhave to be calculated by a trim procedure. This aspect namics submodel is trimmed. The trim values of this
submodel are taken to trim in three additional steps the
is dealt with in the following section.
actuator, engine and sensor dynamics models, again
using the same numerical trim approach. The trim
3.2 Accurate trim computation
computation is more accurate compared to the above
Trim calculations of complex flight system dynamics one-step-approach, but usually more time consuming.
models are a very challenging computational task, in- Computation time and accuracy can be improved, if
volving the numerical solution of a system of nonlin- actuator and sensor model variables are not trimmed
ear equations to calculate the stationary values of state by an optimizer but directly set by the user. For exand control variables. The difficulties mainly arise be- ample, actuator states and inputs can often be directly
cause of the lack of differentiability in aerodynamic related to flight dynamics inputs and sensor states and
and engine models due to the presence of various look- outputs to flight dynamics outputs. The disadvantage
up tables used for linear interpolations. These severe of this approach is, that the procedure takes more enginonlinearities as well as the presence of, e.g., control neer interaction and therefore increases the likeliness
surface deflection limiters make the numerical solution of errors, if submodels change during design.
of this high order system of equations very challeng- A third option for trim computations, which is base
on model inversion, is proposed here. The symbolic
ing.

The Modelica Association

281

Modelica 2002, March 18−19, 2002

The Modelica Flight Dynamics Library

dt_Cmd
de_Cmd
da_Cmd
dr_Cmd

Moormann D., Looye G.

dt
de
da
dr

actuators

height
V
alpha
beta
phi

actuator dynamics

1
u_s

m

throttle1_Cmd
throttle2_Cmd

engines

throttle1
throttle2

engine dynamic

Mu

flightdyn
flight dynamics
(12 states)

m

sensors

height_Meas
V_Meas
alpha_Meas
beta_Meas
phi_Meas

Mu

sensor dynamics

1
y_s

gamma
nz

u_gust
v_gust
w_gust

Figure 9: S IMULINK-block diagram of the flight system dynamics

engine of DYMOLA allows to generate C-code for an
’inverse model’ to serve for trimming. To serve this
purpose the inputs and outputs of the simulation model
are inverted. The states derivatives ẋ become known,
also the outputs of the simulation model ys , which are
now the inputs of the trim model ut . The unknown
variables are the the inputs of the simulation model us
= yt and the states x:
yt = us = h ( ut , ẋ, par,t )
x = j ( ut , ẋ, par,t ) .
One trim condition is specified in Fig. 8. In contrast to the simulation model code generation of section 3.1, where the variables are column-wise known
or unknown, the known variables of the trim model
(trim inputs) are shaded grey, whereas the unknown
variables (trim outputs) are not. For each variable
of the simulation model changed from known to unknown, one other variable is changed from unknown
to known. The balance of known to unknown variables is kept equal. The inputs of the trim model are
the desired trim conditions (such as velocity V and angle of attack α) and the outputs are the corresponding
equilibrium values of trimmed state and aerodynamic
and engine control vectors. DYMOLA generates essentially explicit equations for the inverse model by solving the high order nonlinear equation symbolically to
the highest possible extend. Even if it is not possible
to determine a symbolic solution, DYMOLA is still able
to reduce the burden of solving numerically a high order system of nonlinear equations to the solution of a
small core system of nonlinear equations which ultimately must be solved numerically.
The proposed trim approach based on model inversion
was compared to the traditional approach in the HIRM

Modelica 2002, March 18−19, 2002

282

benchmark flight dynamics model of the GARTEUR
Flight Mechanics Action Group on ”’New Analysis
Techniques for Clearance of Flight Control Laws”’
[4]. An optimization based clearance process for flight
control systems requires highly precise computations
of trim values, because these values are the base for the
following nonlinear or linear analysis. Even very small
inaccuracies in trim values can corrupt the optimization progress. Here the trim computation based on
an inverse model has proven its advantage compared
to a standard optimization based trim approach. Another advantage of the inverse model trim approach is
its computational time efficiency. Trimming the same,
highly nonlinear flight dynamics model took, depending on the trim point, between 15 and 65 seconds using
conventional trimming, just 50 to 70 milliseconds using the inverse model. Both trim computations were
done within M ATLAB /S IMULINK on a 400MHz personal computer [6].

3.3 Interactive Real-time Simulation using
the Engineering Flight Simulator AVDS
For the evaluation of critical flight conditions and for
the validation of flight control systems an aircraft animation tool can help the design engineer to analyze
the aircraft performance. The Aircraft Visual Design
Simulator (AVDS [7]) is such a tool to fill the gap between batch and motion-based simulation by allowing
the flight control design engineer to quickly test and
re-test response in a real-time environment on a lowcost PC (Fig. 10).
Fig. 11 illustrates the data flow within the interactive
mode of AVDS, which allows the design engineer to
virtually ’fly’ the aircraft. Using, e.g. the cockpit-view
together with the head-up display (HUD) of Fig. 10,

The Modelica Association

Moormann D., Looye G.

The Modelica Flight Dynamics Library

YWVCJWHX\X

YWVCJGWX\X

*7(
TEVEQIXIV

*'7
TEVEQIXIV

ZMWYEPMWEXMSR

*'7
JPMKLXTEXL
ZMWYEPMWEXMSR
,9(
(KVETLMGW


MRTYX
HIZMGI

GSQQERHW

GSRXVSPW

YWVCJWHHPP

YWVCJGWHPP

IRKMRIIV

*7(

JIIHFEGO

ERMQEXMSRHEXE
%:(7JSVQEX

*7(
WSYVGIGSHI

*'7
WSYVGIGSHI
YWVCJGWG

HEXEVIGSVHMRK

YWVCJWHG

Figure 11: AVDS data flow in interactive simulation
the engineer controls the aircraft via input devices
like mouse, keyboards and other control instruments.
These commands are transferred to the flight control
system (FCS) and result in the controls of the flight
system dynamics model (FSD). For the implementation of flight dynamics models AVDS offers an interface which consists of C-subroutines for controller and
flight dynamics with systems with its corresponding
set of parameters.
To avoid a manual re-implementation of these model
codes, we propose to automatically generate the
AVDS-codes and their parameter sets starting from the
same object model as used for the parametric simulation (section 3.1). The big advantage using the M OD ELICA -AVDS interface is the complete automation of
the code generation. The trim computation (as detailed
in section 3.2) is already included in the code. This
means that neither initial states of flight dynamics or
systems have to be directly assigned by the user nor
that an external, separate trim tool has to be used to
specify flight conditions in AVDS.
The strategy of interfacing M ODELICA flight dynamics models to AVDS can be transferred to any other
flight simulator. The symbolic equation handler of
DYMOLA guarantees a highly efficient model code.
Different levels of detail do not have any influence on
Figure 10: AVDS interactive real-time flight simulation the interface structure. The only limit is the computational power of the platform which is used to run the
flight simulator.

The Modelica Association

283

Modelica 2002, March 18−19, 2002

The Modelica Flight Dynamics Library

4

Moormann D., Looye G.

Conclusion

Complex aircraft models including actuator and sensor dynamics in addition to electronic flight control
systems, are aggregated from contributions of many
different disciplines involved. This paper shows that
complex models are best comprehended if each disciplinary contribution is described in its own specific
domain. For flight dynamics, the M ODELICA Flight
Dynamics Library serves this purpose.
For systematic and transparent modeling, it turned out
to be important to describe all aircraft components and
physical phenomena locally with respect to their intrinsic reference points, which usually have an offset
in position and orientation from the aircraft’s body geometric reference BGR.
The computer aided model building technique allows
the modeling of engineering systems such as flight dynamics on a physical level in the form of declarative
mathematical equations specifying energy exchange
and kinematic constraints.
The equation-based modeling language of M ODELICA
allows the generation of codes for an inverse model to
serve for trimming. Such a model has as inputs the
desired trim conditions and as outputs the corresponding equilibrium values of trimmed state and controls
vector. The equation handler of DYMOLA generates
essentially explicit equations for the inverse model by
solving the high order nonlinear equation to the highest possible extend symbolically. Thus, the trimming
procedure based on such an inverse model has proven
to be very accurate and fast compared to conventional
optimization based trim procedure.
The code generation facility of DYMOLA allows the use of different simulators, (e.g.,
M ATALB /S IMULINK, DYMOLA’s own simulation environment, the flight simulator AVDS) as a
run-time environment for model execution. Using the
Flight Dynamics Library offers the opportunity that
trim code is automatically included into the simulation
model and executed at simulation start. This means
that no separate trim tool has to be used.

[3] H. Elmqvist und M. Otter. Methods for Tearing
Systems of Equations in Object-Oriented Modeling. In Proceedings ESM’94 European Simulation Multiconference, pp. 326-332, Barcelona,
Spain, 1994.
[4] GARTEUR FM(AG11). Scope of a new GARTEUR Flight Mechanics Action Group on ”’New
Analysis Techniques for Clearance of Flight
Control Laws”’. Group for Aeronautical Research and Technology in Europe (GARTEUR),
Technical Report GARTEUR TP-119-1, 1999.
[5] G. Looye. Design of Autopilot Control Laws
with Nonlinear Dynamic Inversion at Automatisierungstechnik, pp. 523-531, No. 12, 2001.
[6] D. Moormann. Automatisierte Modellbildung
der Flugsystemdynamik. Dissertation, RWTH
Aachen.
VDI Fortschrittsberichte, Mess-,
Steuerungs- und Regelungstechnik, Reihe 8,
No. 931, 2002.
[7] S.J. Rasmussen and S.G. Breslin. AVDS: A
Flight Systems Design Tool for Visualization and
Engineer-in-the-Loop Simulation. AIAA Modeling and Simulation Technologies Conference,
No. AIAA-3467-97, 1997.
[8] M. Tiller. Introduction to Physical Modeling
with Modelica. The Kluwer International Series
in Engineering and Computer Sciences. ISBN
0792373677, 2001.

References
[1] R. Brockhaus. Flugregelung. Springer Verlag,
Berlin, 1994.
[2] R. Brockhaus. A Mathematical Multi-Point
Model for Aircraft Motion in Moving Air.
Zeitschrift für Flugwissenschaften und Weltraumforschung, pages. 187-184, 1987.

Modelica 2002, March 18−19, 2002

284

The Modelica Association

Aberger M., Otter M.

Modeling Friction in Modelica with the Lund−Grenoble Friction Model

0RGHOLQJ)ULFWLRQLQ0RGHOLFDZLWK
WKH/XQG*UHQREOH)ULFWLRQ0RGHO
0DUWLQ$EHUJHU
-RKDQQHV.HSOHU8QLYHUVLW\/LQ]
'HSDUWPHQWIRU'HVLJQDQG&RQWURORI
0HFKDWURQLFDO6\VWHPV
$/LQ]$XVWULD
PDUWLQDEHUJHU#VWXGHQWVMNXDW

0DUWLQ2WWHU
'/52EHUSIDIIHQKRIHQ
,QVWLWXWHRI5RERWLFVDQG0HFKDWURQLFV
':HVVOLQJ*HUPDQ\
0DUWLQ2WWHU#GOUGH

$EVWUDFW
7KHSURSHUWLHVRIWKH/XQG*UHQREOHIULFWLRQPRGHODUHVXPPDUL]HGDQGGLIIHUHQWW\SHVRIIULFWLRQHOHPHQWVEHDULQJ
IULFWLRQFOXWFKRQHZD\FOXWFKDUHLPSOHPHQWHGLQ0RGHOLFDXVLQJWKLVIULFWLRQIRUPXODWLRQ7KHG\QDPLFSURSHUWLHVRI
WKHVH FRPSRQHQWV DUH GHWHUPLQHG LQ VLPXODWLRQV DQG FRPSDUHG ZLWK WKH IULFWLRQ PRGHOV DYDLODEOH LQ WKH 0RGHOLFD
VWDQGDUGOLEUDU\7KLVLQFOXGHVDOVRDQDXWRPDWLFJHDUER[PRGHOZKHUHIULFWLRQHOHPHQWVDUHFRXSOHGG\QDPLFDOO\

s 

 7KHURWDWLRQDO/X*UH0RGHO
7KH /X*UH /XQG*UHQREOH PRGHO >@ LV D G\QDPLF
IULFWLRQ PRGHO ZLWK WKH UHODWLYH DQJXODU YHORFLW\
EHWZHHQWKHWZRVXUIDFHVLQFRQWDFWw DVLQSXWDQGWKH
IULFWLRQWRUTXHtDVRXWSXW,WDSSUR[LPDWHVIULFWLRQDVD
SKHQRPHQRQ FDXVHG E\ EULVWOHV LQ FRQWDFW 7KH PRGHO
FDQ EH VHHQ DV DQ H[WHQVLRQ RI WKH VLPSOLILHG 'DKO
PRGHO7KH/X*UHPRGHOLVGHVFULEHGLQVWDQGDUGIRUP
E\DILUVWRUGHUQRQOLQHDUGLIIHUHQWLDOHTXDWLRQVHH>@

J w  =

 Ë
-(w w ) Û
Ìt & + (t 6 - t & )H
Ü
Ý
s Í


V

)RU VWHDG\VWDWH PRWLRQ G]  GW =   WKH DYHUDJH EULVWOH
GHIOHFWLRQLVJLYHQE\VHH



] VV = VJQ(w )J (w )



+HQFHWKHUHODWLRQEHWZHHQDQJXODUYHORFLW\DQGIULFWLRQ
WRUTXHIRUVWHDG\VWDWHPRWLRQLV



G]
t = s  ] + s  (w ) + t Y w
GW

s (w ) = s H - (w w G ) 











 
= ËÌt & + (t 6 - t & )H - (w w ) ÛÜ VJQ(w ) + t Yw
Í
Ý



,I WKH DQJXODU YHORFLW\ LV QRW ]HUR ZKHQ LQWHJUDWLRQ
VWDUWV WKH LQLWLDO YDOXH RI ] VHH  VKDOO EH FRPSXWHG
VXFK WKDW G]  GW =   IRU W =   LQ RUGHU WR DYRLG QRQ
SK\VLFDOSHDNVLQWKH IULFWLRQ WRUTXH DW WKH VWDUW RI WKH
VLPXODWLRQ 6LPXODWLRQ H[SHULPHQWV ZLWK VWLFNVOLS
PRWLRQ VKRZ WKDW LQWHJUDWLRQ PHWKRGV ZLWK YDULDEOH
VWHSVL]H PD\ KDYH GLIILFXOWLHV WR FRPSXWH WKH EUHDN
DZD\ WRUTXH LQ FHUWDLQ FDVHV HVSHFLDOO\ LI WKH UHODWLYH
WROHUDQFH LV QRW VHW VWULFWO\ HQRXJK 7R LPSURYH WKH
UHOLDELOLW\ DQG DFFXUDF\ RI WKH VLPXODWLRQ DQ DX[LOLDU\
%RROHDQHTXDWLRQLVLQWURGXFHG



V

G]
Ñ
Ô WUXH LI  < 

]V QHJ = Ò
GW
ÔÓIDOVH RWKHUZLVH



:LWKDFRQVWDQWGDPSLQJ FRHIILFLHQW DQG (t 6 > t & )  WKH
PRGHOLVGLVVLSDWLYVHH>@LIDQGRQO\LI

The Modelica Association



t VV = s VJQ(w )J (w ) + t Yw

:KHUH]GHQRWHVWKHDYHUDJHEULVWOHGHIOHFWLRQsLVWKH
VWLIIQHVV RI WKH EULVWOHV sw LV WKH GDPSLQJ
FRHIILFLHQW wG GHVFULEHV WKH YHORFLW\ LQWHUYDO DURXQG
]HUR IRU ZKLFK WKH GDPSLQJ LV DFWLYH tY LV WKH OLQHDU
YLVFRXV IULFWLRQ FRHIILFLHQW t& LV WKH &RXORPE IULFWLRQ
OHYHOt6LVWKHVWDWLFIULFWLRQOHYHO (t 6  t & ) DQGw6LV
WKH6WULEHFNYHORFLW\7KHIXQFWLRQJwGHILQHVKRZWKH
DYHUDJH GHIOHFWLRQ GHSHQGV RQ WKH UHODWLYH YHORFLW\
EHWZHHQ WKH WZR VXUIDFHV 7KH VLPSOLILHG IRUP RI WKH
/X*UHPRGHOLVJLYHQE\DFRQVWDQWGDPSLQJFRHIILFLHQW

s  (w ) = s  



7KH YHORFLW\ GHSHQGHQW GDPSLQJ FRHIILFLHQW sw ZDV
QRW LPSOHPHQWHG LQ WKH 0RGHOLFD PRGHO EHFDXVH QR
LGHQWLILHG RU PHDVXUHG SDUDPHWHUV IRU wG KDYH EHHQ
IRXQG LQ WKH OLWHUDWXUH ,W LV DOUHDG\ UDWKHU GLIILFXOW WR
LGHQWLI\ WKH G\QDPLF SDUDPHWHUV s DQG s ZKLFK LV
DOVR VWDWHG LQ >@ :LWK DQ LQFUHDVLQJ QXPEHU RI
SDUDPHWHUV WKH FRPSOH[LW\ RI WKH LGHQWLILFDWLRQ SURFHVV
ULVHV

 0RGHO'HULYDWLRQ

w
G]
=w ]
GW
J w 

t &t Y

t 6 -t &



WKDW WULJJHUV D VWDWH HYHQW ZKHQ G]GW FKDQJHV VLJQ LQ
0RGHOLFD HYHU\ YDOXH FKDQJH RI D UHODWLRQ WULJJHUV DQ

285

Modelica 2002, March 18−19, 2002

Modeling Friction in Modelica with the Lund−Grenoble Friction Model

HYHQW $GGLWLRQDOO\ LW LV XVHIXO WR VFDOH WKH DYHUDJH
EULVWOHGHIOHFWLRQ]DVLWLVVPDOOFRPSDUHGWRRWKHUVWDWH
YDULDEOHV %RWK HIIHFWV  DUH GLVFXVVHG LQ PRUH GHWDLO
EHORZ$UHDVRQDEOHFKRLFHIRUWKHVFDOLQJSDUDPHWHU]1
LV

]1  



s

Aberger M., Otter M.

FRQWURO RI YDULDEOH VWHS LQWHJUDWRUV WUHDW YDULDEOHV DV
]HUR ZKHQ WKH\ DUH EHORZ D SUHGHILQHG DEVROXWH
WROHUDQFH ,I QR RWKHU LQIRUPDWLRQ LV DYDLODEOH WKLV
WROHUDQFHLVXVXDOO\VHOHFWHGDVDPXOWLSOHRIWKHUHODWLYH
WROHUDQFH 6LQFH ] LV LQ WKH RUGHU RI  WKH VWHSVL]H
FRQWURORQ]LVSUDFWLFDOO\VZLWFKHGRIIPRVWRIWKHWLPH



$V WR EH H[SHFWHG WKH VLPXODWLRQ UHVXOW LV LPSURYHG
ZKHQ D VFDOLQJ IRU VWDWH YDULDEOH ] LV LQWURGXFHG 7KH
RVFLOODWLRQV RI WKH IULFWLRQ WRUTXH GLVDSSHDU ZKLOH WKH
LQHUWLDLVURWDWLQJ7KHIULFWLRQWRUTXHRIWKHPRGHOZLWK
DQGZLWKRXWVFDOLQJXVLQJLQWHJUDWLRQDOJRULWKP'$66/
DQG D UHODWLYH WROHUDQFH RI 7RO  LV VKRZQ LQ
)LJXUH

7KH SDUDPHWHUV RI WKH /X*UH IULFWLRQ PRGHO GHSHQG
PRVWO\RQWKHDSSOLFDWLRQHVSHFLDOO\WKHIULFWLRQWRUTXH
OHYHOV t& t6 DQG tY PD\ YDU\ ZLGHO\ 5HDVRQDEOH
FKRLFHVIRUWKHRWKHUSDUDPHWHUVDUHJLYHQLQ>@

w 6 = 

,Q )LJXUH  WKH VFDOHG GHULYDWLYH RI WKH EULVWOH
GHIOHFWLRQG]GWLVSUHVHQW$VFDQEHVHHQYHU\ VKDUS
FKDQJHVRIWKLVYDULDEOHDSSHDUZKHQFKDQJLQJIURPWKH
VOLGLQJWRWKHVWXFNUHJLRQDQGYLFHYHUVD$QLQWHJUDWRU
KDV WR GHWHFW WKLV VKDUS FKDQJH WR FRPSXWH D FRUUHFW
VROXWLRQ ,Q RUGHU WR JLYH WKH LQWHJUDWRU D KLQW WR WKLV
VLWXDWLRQ D VWDWH HYHQW LV WULJJHUHG LQ WKH 0RGHOLFD
PRGHOZKHQHYHUG]GWFKDQJHVVLJQE\LQWURGXFLQJWKH
PHQWLRQHG DX[LOLDU\ %RROHDQ HTXDWLRQ 7KLV WHFKQLTXH
LPSURYHV WKH TXDOLW\ RI WKH /X*UH PRGHO VLPXODWLRQ
IXUWKHU DOWKRXJK VWLOO D FRQVLGHUDEOH GLIIHUHQFH LQ WKH
EHKDYLRU RI WKH IULFWLRQ PRGHO LV SUHVHQW ZKHQ
VLPXODWLQJ ZLWK GLIIHUHQW WROHUDQFHV ,Q )LJXUH  WKH
IULFWLRQWRUTXHLVVKRZQIRUUHODWLYHWROHUDQFHV7RO 
DQG 7RO  7KH GLIIHUHQFH EHWZHHQ WKHVH WZR
VLPXODWLRQVLVFDXVHGE\GLIIHUHQWEUHDNDZD\WRUTXHV

s  =  - 
s =  s ZKHUH-LVWKHLQHUWLDRIWKHERG\VXEMHFWWRIULFWLRQ7KH
WLPHIRULQWHJUDWLRQGHSHQGVKHDYLO\RQWKHFKRLFHRIWKH
G\QDPLF SDUDPHWHUV s DQG s EHFDXVH WKH\ GHWHUPLQH
HVVHQWLDOO\WKHVWLIIQHVVRIWKHGLIIHUHQWLDOHTXDWLRQ

 '\QDPLF0RGHO%HKDYLRXU
7R YHULI\ WKH G\QDPLF EHKDYLRXU RI WKH VLPSOLILHG
/X*UH PRGHO WKH VDPH VLPXODWLRQV DV LQ >@ DUH
SHUIRUPHGXVLQJ'\PRODDVVLPXODWLRQHQJLQH>@DQGD
0RGHOLFD FRGHG /X*UH PRGHO 7KH ILQDO UHVXOWV DJUHH
TXDOLWDWLYHO\ZLWKWKHUHVXOWVLQ>@6WLFNVOLSPRWLRQLV
DW\SLFDOEHKDYLRXURIV\VWHPVZLWKIULFWLRQ,WLVFDXVHG
E\WKHIDFWWKDWIULFWLRQLVODUJHUDWUHVWWKDQGXULQJVWDUW
RIVOLGLQJ

7KHEUHDNDZD\WRUTXHLVUHODWHGWRWKHGZHOOWLPHDQG
WKH UDWH RI LQFUHDVH RI WKH DSSOLHG WRUTXH 7KH GZHOO
WLPHLVWKHWLPHEHWZHHQVWLFNLQJDQGEUHDNDZD\6LQFH
WKH /X*UH PRGHO LV D G\QDPLF PRGHO D YDU\LQJ EUHDN
DZD\WRUTXHFDQEHH[SHFWHG7KHVLPXODWHGEUHDNDZD\
WRUTXH IRU D UHODWLYH WROHUDQFH 7RO  LV t%§ 1P
IRUDWROHUDQFH7RO LWLVt%§ 1P7KLVUHVXOWLV
DOVR DFKLHYHG ZLWK LQWHJUDWLRQ DOJRULWKPV ZLWK IL[HG
VWHSVL]H

7KH H[SHULPHQW LV VKRZQ LQ )LJXUH  $Q LQHUWLD ZLWK
-  NJP ZLWK IULFWLRQ WR WKH JURXQG LV FRQQHFWHG WR D
VSULQJZLWKVWLIIQHVVN  1PUDG7KHHQGRIWKHVSULQJ
LVURWDWLQJZLWKDVPDOOFRQVWDQWYHORFLW\RIw  UDGV
7KHLQHUWLDLVRULJLQDOO\DWUHVWDQGWKHWRUTXHIURP WKH
VSULQJLQFUHDVHVOLQHDUO\7KHIULFWLRQWRUTXHFRXQWHUDFWV
WKH VSULQJ WRUTXH DQG D VPDOO GLVSODFHPHQW IROORZV
:KHQWKHDSSOLHGWRUTXHUHDFKHVWKHEUHDNDZD\WRUTXH
LQ WKLV FDVH DSSUR[LPDWHO\ J ()s   WKH LQHUWLD VWDUWV WR
URWDWH DQG WKH IULFWLRQ GHFUHDVHV UDSLGO\ GXH WR WKH
6WULEHFN HIIHFW 7KH VSULQJ FRQWUDFWV DQG WKH VSULQJ
WRUTXH GHFUHDVHV 7KH LQHUWLD VORZV GRZQ DQG WKH
IULFWLRQ WRUTXH LQFUHDVHV GXH WR WKH 6WULEHFN HIIHFW DQG
WKH URWDWLRQ VWRSV 7KH SKHQRPHQRQ UHSHDWV LWVHOI 7KH
SDUDPHWHUVRIWKH IULFWLRQ PRGHODUHVKRZQ LQ 7DEOH 
8QIRUWXQDWHO\ WKH SDVVLYLW\ LQHTXDOLW\  LV QRW
VDWLVILHGZLWKWKHVHGDWD

)LJXUH6LPXODWLRQVHWXSIRUVWLFNVOLSPRWLRQZLWKWKH
/X*UHIULFWLRQPRGHO
s
s
tY
t&
t6
w6

6LPXODWLRQ RI D GLUHFW LPSOHPHQWDWLRQ RI WKH /X*UH
PRGHO XVLQJ WKH LQWHJUDWLRQ DOJRULWKP '$66/ ZLWK D
UHODWLYHWROHUDQFH7RO OHDGVWRZURQJUHVXOWV7KH
EUHDN DZD\ WRUTXH LV WRR KLJK DQG WKHUH DUH QRQ
SK\VLFDO RVFLOODWLRQV LQ WKH FRPSXWHG IULFWLRQ WRUTXH
7KLV UHVXOW LV XQGHUVWDQGDEOH EHFDXVH WKH VWHSVL]H








>1PUDG@
>1PVUDG@
>1PVUDG@
>1P@
>1P@
>UDGV@

7DEOH3DUDPHWHUYDOXHVRIWKH/X*UHIULFWLRQPRGHO



,Q'\PRVLPWKHDEVROXWHDQGUHODWLYHWROHUDQFHRIWKHVWDWH
YHFWRUDUHHTXDO>@

Modelica 2002, March 18−19, 2002

286

The Modelica Association

Aberger M., Otter M.

Modeling Friction in Modelica with the Lund−Grenoble Friction Model

,Q )LJXUH  WKH DQJXODU YHORFLW\ WKH URWDWLRQ DQJOH RI
WKH LQHUWLD DQG WKH URWDWLRQ DQJOH RI WKH VSULQJ DUH
VKRZQ 7KH VFDOHG DYHUDJH EULVWOH GHIOHFWLRQ ] DQG WKH
GHULYDWLYH RI WKH EULVWOH GHIOHFWLRQ DUH VKRZQ LQ
)LJXUH  7KH VFDOLQJ IDFWRU LV ]Q  7KHVH UHVXOWV
ZHUH REWDLQHG ZLWK WKH LQWHJUDWLRQ DOJRULWKP '$66/
DQGDWROHUDQFH7RO 7KH\ DJUHH TXDOLWDWLYHO\ ZLWK
WKHUHVXOWVLQ>@

Scaled derivative of
bristle deflection [rad/s]

Scaled average
bristle deflection [rad]

1 .5

0 .8

Friction torque [Nm]

0 .6

1
0 .5
0
0

5

1 0 T im e [s] 1 5

20

25

0

5

10

20

25

0

-2 0

-4 0
15
T im e [s]

)LJXUH6FDOHGDYHUDJHEULVWOHGHIOHFWLRQWRSDQG
VFDOHGGHULYDWLYHRIDYHUDJHEULVWOHGHIOHFWLRQERWWRP

0 .4

0 .2

 &RPSDULVRQRI/X*UHDQG
0RGHOLFD%HDULQJ)ULFWLRQ0RGHO

0
0

5

10

T im e [s]

15

20

25

,Q WKH 0RGHOLFD VWDQGDUG OLEUDU\ IULFWLRQ HOHPHQW
%HDULQJ)ULFWLRQLVSUHVHQW ZKLFKFRQVWUDLQVWKH UHODWLYH
DQJXODU DFFHOHUDWLRQ GwGW WR ]HUR ZKHQ WKH UHODWLYH
VSHHG w YDQLVKHV LH WKH UHODWLYH PRYHPHQW LV IRUFHG
WR VWD\ DW UHVW 7KLV LV LQ FRQWUDVW WR WKH PRUH GHWDLOOHG
/X*UH PRGHO ZKLFK GHVFULEHV DOVR WKH VPDOO UHODWLYH
PRYHPHQWVLQWKHVWXFNUHJLRQ

)LJXUH)ULFWLRQWRUTXHRIWKH/X*UHPRGHOZLWKRXW
VFDOLQJVROLGOLQHDQGZLWKVFDOLQJGDVKHGOLQH

Friction torque [Nm]

1 .5

7KH PRGHO RI )LJXUH  ZDV VLPXODWHG E\ UHSODFLQJ WKH
/X*UH PRGHO ZLWK FRPSRQHQW %HDULQJ)ULFWLRQ IURP
OLEUDU\0RGHOLFD0HFKDQLFV5RWDWLRQDO 7KH SDUDPHWHUV
RIWKH/X*UHPRGHODUHVKRZQLQ7DEOH7KH6WULEHFN
YHORFLW\ LV UDWKHU VPDOO ZKLFK FRUUHVSRQGV WR D VKDUS
GHFUHDVHLQWKHIULFWLRQWRUTXHZKHQWKHLQHUWLDVWDUWVWR
URWDWH 7KHUHIRUH D VLPSOLILHG SDUDPHWHUL]DWLRQ IRU WKH
FRPSRQHQW %HDULQJ)ULFWLRQ LV XVHG 7KH &RXORPE
IULFWLRQLVVHWWRt&  1PDQGWKHVWLFWLRQWRUTXHLVVHWWR
t6  1P 7KHUHIRUH WKH SDUDPHWHU VHWWLQJ LQ WKH
%HDULQJ)ULFWLRQ PRGHO LV WDXBSRV >    @ DQG
SHDN 

1

0 .5

0
0

5

10

T im e [s]

15

20

25

)LJXUH)ULFWLRQWRUTXHRIWKH/X*UHPRGHOZLWK
'$66/DQGWROHUDQFH7RO VROLGOLQHDQG
7RO GDVKHGOLQH

7R DFKLHYH DFFXUDWH UHVXOWV IRU VLPXODWLRQV ZLWK WKH
/X*UHPRGHODUHODWLYHWROHUDQFHRI7RO LVQHHGHG
7KHQXPEHURIRXWSXWLQWHUYDOVZDVVHWWR1 IRUD
VLPXODWLRQ WLPH RI 76  V )RU DOO VLPXODWLRQV WKLV
SDUDPHWHUVHWXSZDVNHSWFRQVWDQW7KHPRGHOZDVEXLOW
XS ZLWK '\PROD YHUVLRQ G  7R JHW
VLPLODU LQWHJUDWLRQ WLPHV IRU WZR VLPXODWLRQV WKH
H[HFXWDEOH '\PRVLP ILOH ZDV H[HFXWHG LQ WKH '26
ZLQGRZ 7KH VLPXODWLRQV ZHUH SHUIRUPHG RQ D
[3HQWLXP,,,ZLWK0+]DQG0%5$0

Angular velocity [rad/s]
Rotation angle [rad]

2

1 .5

1

0 .5

7KH PRGHO ZDV FRPSLOHG ZLWK WKH 0LFURVRIW 9LVXDO
&FRPSLOHUYHUVLRQ&RPSLOLQJ WKH PRGHO ZLWK
WKH *18 FRPSLOHU YHUVLRQ HJFV  DQG WKH
VWDQGDUGRSWLRQVHWWLQJLQ'\PRODUHTXLUHVDYHU\VPDOO
LQWHJUDWLRQ VWHS VL]H RI 7,  mV IRU WKH /X*UH PRGHO
ZKHQ XVLQJ WKH LQWHJUDWLRQ DOJRULWKP 5.),; 
5XQJH.XWWDPHWKRGRIRUGHUZLWKIL[HGVWHSVL]HWR
REWDLQ D FRQYHUJLQJ UHVXOW $ PXFK ODUJHU VWHS VL]H LV

0
0

5

10

T im e [s]

15

20

25

)LJXUH$QJXODUYHORFLW\VROLGOLQHURWDWLRQDQJOH
GDVKHGOLQHRIWKHLQHUWLDDQGURWDWLRQDQJOHRIWKH
VSULQJGRWWHGOLQH

The Modelica Association

287

Modelica 2002, March 18−19, 2002

Modeling Friction in Modelica with the Lund−Grenoble Friction Model

SRVVLEOH E\ WKH *18 FRPSLOHU RSWLRQV 2 PD[
RSWLPL]DWLRQRU2QRRSWLPL]DWLRQ7KH YHU\ VPDOO
LQWHJUDWLRQVWHSVL]HLVQHHGHGIRUFRPSLOHURSWLRQV2
'\PROD GHIDXOW 2 DQG 2V 7KH UHDVRQ IRU WKLV
VWUDQJHEHKDYLRXUFRXOGQRWEHGHWHUPLQHG

Aberger M., Otter M.

,QWHJUDWLRQ
0,;('
'$66/ 5.),; (8/(5
DOJRULWKP
02'(
&38WLPHIRU




LQWHJUDWLRQ>V@
&38WLPHIRU
RQH*5,'




LQWHUYDO>PV@
1RRIUHVXOW




SRLQWV
1RRIVWHSV




1RRI)

 

HYDOXDWLRQV
1RRI+




HYDOXDWLRQV
1RRI
-DFRELDQ




HYDOXDWLRQV
1RRIVWDWH




HYHQWV
0LQ
LQWHJUDWLRQ

¼
¼ ¼
VWHSVL]H>V@
0D[
LQWHJUDWLRQ


¼ ¼
VWHSVL]H>V@
0D[
LQWHJUDWLRQ




RUGHU

8VLQJWKH0LFURVRIW9LVXDO&FRPSLOHUZLWK'\PROD
GHIDXOWVDFRQYHUJLQJUHVXOWZLWKWKH/X*UHPRGHODQG
LQWHJUDWRU5.),;UHTXLUHVDPD[LPXPLQWHJUDWRUVWHS
VL]H RI 7,  PV DQG IRU WKH H[SOLFLW (XOHU PHWKRG ZLWK
IL[HG VWHS VL]H (8/(5 7,  PV 7R DFKLHYH D
FRQYHUJLQJ UHVXOW IRU PL[HG PRGH LQWHJUDWLRQ D
PD[LPXP LQWHJUDWRU VWHS VL]H RI 7,  PV LV UHTXLUHG
0L[HG PRGH LQWHJUDWLRQ LV D VSHFLDO '\PROD WHFKQLTXH
IRUUHDOWLPHVLPXODWLRQZKHUHIDVWVWDWHVDUHGLVFUHWL]HG
ZLWKWKHLPSOL]LWDQGVORZVWDWHVZLWKWKHH[SOLFLW(XOHU
PHWKRG 6WDWH YDULDEOH ] IURP WKH /X*UH PRGHO ZDV
XVHG DV ³IDVW6WDWH´ 6LPXODWLRQ VWDWLVWLFV DUH
VXPPDUL]HGLQ7DEOH
)RU WKH PRGHO ZLWK %HDULQJ)ULFWLRQ WKH PD[LPXP
LQWHJUDWRUVWHSVL]HLV7,  PVIRU5.),;DQG7,  PV
IRU (8/(5 UHVSHFWLYHO\ 9DULDWLRQV LQ WKH PD[LPXP
SRVVLEOHLQWHJUDWLRQVWHSVL]HIRUYDULRXV*18FRPSLOHU
RSWLRQV ZDV QRW REVHUYHG )RU WKH FRPSDULVLRQ WKH
VDPHVWHSVL]HVDVLQWKH/X*UHPRGHOZHUHXVHGIRUWKH
LQWHJUDWRUVZLWKIL[HGVWHSVL]H7KHVLPXODWLRQVWDWLVWLFV
DUHVXPPDUL]HGLQ7DEOH
7KH GLIIHUHQFH LQ WKH &38WLPH IRU LQWHJUDWLRQ RI WKH
/X*UH PRGHO DQG WKH %HDULQJ)ULFWLRQ PRGHO LV QRW
VLJQLILFDQWGXHWRWKHVLPSOHPRGHO)RU PRUHFRPSOH[
PRGHOV WKH &38WLPH IRU WKH YDULDEOH VWHSVL]H
LQWHJUDWRU '$66/ LV UHODWHG WR WKH QXPEHU RI IXQFWLRQ
DQG -DFRELDQ HYDOXDWLRQV ZKLFK DUH DERXW  WR  WLPHV
KLJKHUIRUWKH/X*UHPRGHODVZLWKWKH%HDULQJ)ULFWLRQ
PRGHO 7KH GLIIHUHQFHV LQ WKH QXPEHU RI -DFRELDQ
HYDOXDWLRQVDQGLQWKHPLQLPXPVWHSVL]HVFDQEHWUDFHG
EDFNWRWKHVWLIIQHVVRIWKHGLIIHUHQWLDOHTXDWLRQVRIWKH
/X*UHPRGHO

7DEOH6LPXODWLRQVWDWLVWLFVRIWKH/X*UHPRGHO
,QWHJUDWLRQDOJRULWKP
&38WLPHIRU
LQWHJUDWLRQ>V@
&38WLPHIRURQH
*5,'LQWHUYDO>PV@
1RRIUHVXOWSRLQWV
1RRIVWHSV
1RRI)HYDOXDWLRQV
1RRI+HYDOXDWLRQV
1RRI-DFRELDQ
HYDOXDWLRQV
1RRIVWDWHHYHQWV
0LQLQWHJUDWLRQVWHS
VL]H>V@
0D[LQWHJUDWLRQVWHS
VL]H>V@
0D[LQWHJUDWLRQRUGHU

$ FRPSDULVRQ RI WKH IULFWLRQ WRUTXH RI WKH
%HDULQJ)ULFWLRQ PRGHO DQG RI WKH /X*UH PRGHO LV
VKRZQ LQ )LJXUH  7KH GLIIHUHQFH RI WKHVH WZR
VLPXODWHG IULFWLRQ WRUTXHV LV D UHVXOW RI GLIIHUHQW EUHDN
DZD\ WRUTXHV RI WKH PRGHOV )RU WKH /X*UH PRGHO WKH
EUHDN DZD\ WRUTXH LV YDU\LQJ DQG LW LV DSSUR[LPDWHO\
t%  1P IRU WKH %HDULQJ)ULFWLRQ PRGHO WKH EUHDN
DZD\WRUTXHLVFRQVWDQWO\ t%  1P7KHSHDNVLQWKH
VLPXODWHG IULFWLRQ WRUTXH ZKHQ WKH LQHUWLD VWRSV GR QRW
DSSHDU LQ WKH %HDULQJ)ULFWLRQ PRGHO EHFDXVH RI WKH
VLPSOLILHG SDUDPHWHUL]DWLRQ DQG QHJOHFWLRQ RI WKH
6WULEHFNHIIHFW

'$66/

5.),; (8/(5








































¼



¼





¼







7DEOH6LPXODWLRQVWDWLVWLFVRIWKH%HDULQJ)ULFWLRQ
PRGHO

Modelica 2002, March 18−19, 2002

288

The Modelica Association

Aberger M., Otter M.

Modeling Friction in Modelica with the Lund−Grenoble Friction Model

FRPSDUHG WR RWKHU VWDWH YDULDEOHV DOVR D VFDOLQJ LV
LQWURGXFHGIRU]

Friction torque [Nm]

1 .5

 2QH:D\&OXWFKZLWK/X*UH)ULFWLRQ

1

$ RQHZD\FOXWFK LV DQ HOHPHQW ZKHUH D FOXWFK LV
FRQQHFWHG LQ SDUDOOHO WR D IUHH ZKHHO 7KLV VSHFLDO
HOHPHQW LV QHHGHG WR UHVROYH WKH DPELJXLW\ RI WKH
IULFWLRQ WRUTXH ZKLFK ZRXOG EH SUHVHQW LI D IUHH ZKHHO
ZRXOG EH H[SOLFLWO\ FRQQHFWHG LQ SDUDOOHO WR D FOXWFK
FRPSRQHQW,IWKHFOXWFKLVORFNHGWKHIULFWLRQWRUTXHLV
FRPSXWHGE\

0 .5

0
0

5

10

T im e [s]

15

20

25

)LJXUH)ULFWLRQWRUTXHRIWKH/X*UHPRGHOVROLGOLQH
DQGRIWKH%HDULQJ)ULFWLRQPRGHOGDVKHGOLQH

G]
Ë
Û
t = F PD[ Ì s  ] + s 
+ s w U Ü )QPD[
GW
Í
Ý

ZKHUH FPD[ KDV WR EH SURYLGHG DV SDUDPHWHU :LWK WKLV
SDUDPHWHUWKHPD[LPXPIULFWLRQWRUTXHLVGHILQHGZKHQ
WKHFOXWFKLVORFNHGDUHDVRQDEOHFKRLFHLV

 /X*UH&OXWFK0RGHOV
 0RGHO'HULYDWLRQ

F PD[ =  
7KHFOXWFKLVORFNHGZKHQWKHDYHUDJHEULVWOHGHIOHFWLRQ
] LV QHJDWLYH $OO RWKHU HTXDWLRQV DUH VLPLODU WR WKH
FOXWFKVKRZQLQWKHVHFWLRQDERYH

 &OXWFKZLWK/X*UH)ULFWLRQ
)ULFWLRQ WRUTXH t LQ FOXWFKHV LV XVXDOO\ GHVFULEHG DV D
IXQFWLRQ RI WKH IULFWLRQ FRHIILFLHQW m (w U )  ZKLFK LV LQ
WXUQDIXQFWLRQRIWKHUHODWLYHDQJXODUYHORFLW\wURIWKH
QRUPDOIRUFH)QDQGRIDJHRPHWU\FRQVWDQWFJHRZKLFK
WDNHV LQWR DFFRXQW WKH JHRPHWU\ RI WKH GHYLFH DQG WKH
DVVXPSWLRQVRQWKHIULFWLRQGLVWULEXWLRQV

t = m w U F JHR )Q

 &RPSDULVRQRI&OXWFK0RGHOV
7KH EHKDYLRXU RI WKH /X*UH PRGHOV IRU FOXWFKHV LV
FRPSDUHGWRWKHFOXWFKPRGHOVRIWKH0RGHOLFDVWDQGDUG
OLEUDU\



 6LPSOLILHGDXWRPDWLF*HDUER[

7KH /X*UH PRGHO >@ FDQ EH DGDSWHG WR VXFK D FOXWFK
GHVFULSWLRQ

wU
G]
=wU ]
GW
J w U 

J w U  =

$ VLPSOLILHG PRGHO RI D JHDU DXWRPDWLF JHDUER[ LV
VLPXODWHG 7KH PRGHO ZLWK FRPSRQHQWV IURP WKH
VWDQGDUG 0RGHOLFD URWDWLRQDO OLEUDU\ LV VKRZQ LQ
)LJXUH7KHSDUDPHWHUVRIWKHFOXWFKHVDQGEUDNHVDUH
VKRZQLQ7DEOHDQGWKHJHDUVKLIWWDEOHLQ7DEOH$
VZLWFKLQJVHTXHQFHIURPILUVWWRWKLUGJHDUZLWKLQ76 V
LV VLPXODWHG XVLQJ 1  RXWSXW LQWHUYDOV DQG
LQWHJUDWRU'$66/ZLWKDUHODWLYHWROHUDQFH7RO 



 Ë
-(w w ) Û
Ì m & + (m 6 - m & )H
Ü
Ý
s Í
U 

V





G]
Ë
Û
t = Ìs  ] + s 
+ s w U ÜF JHR )Q
GW
Ý
Í

7KH VDPH PRGHO ZLWK WKH /X*UH FOXWFK LV VKRZQ LQ
)LJXUH%UDNHVDUHUHSODFHGE\VHULHVFRQQHFWLRQRID
/X*UHFOXWFKZLWKDIL[HGIODQJH7KHSDUDPHWHUVRIWKH
/X*UH FOXWFKHV DUH VKRZQ LQ 7DEOH  7KH PRGHO ZLWK
/X*UH FOXWFKHV LV XQVWDEOH ZKHQ XVLQJ LQWHJUDWLRQ
DOJRULWKPVZLWKDIL[HGVWHSVL]HHYHQLIWKHVWHSVL]HLV
YHU\VPDOO



ZKHUH m& LV WKH &RXORPE IULFWLRQ FRHIILFLHQW DQG m6 LV
WKH VWDWLF IULFWLRQ FRHIILFLHQW 7KLV PRGHO LV UHODWHG WR
WKHOXPSHGG\QDPLFWLUHPRGHOLQ>@
,QWKH0RGHOLFDPRGHOWKHQRUPDOIRUFH)QLVSURYLGHG
DVLQSXWVLJQDOXLQDQRUPDOL]HGIRUP

)Q = )QPD[ ¼ X





ZKHUHWKH PD[LPXP QRUPDO IRUFH )QPD[ LV SURYLGHG DV
SDUDPHWHU
,I WKH UHODWLYH DQJXODU YHORFLW\ GRHV QRW YDQLVK DW
VLPXODWLRQ VWDUW WKH LQLWLDO YDOXH RI ] VHH  VKRXOG
EH FRPSXWHG VXFK WKDW G]  GW =   IRU W =   WR DYRLG
SHDNVLQWKHIULFWLRQWRUTXHDWWKHVWDUWRIWKHVLPXODWLRQ
$JDLQ D %RROHDQ DX[LOLDU\ HTXDWLRQ LV LQWURGXFHG WR
WULJJHU DQ HYHQW DW VKDUS FKDQJHV RI ] LH ZKHQ G]GW
FKDQJHV VLJQ $VWKHDYHUDJHEULVWOHGHIOHFWLRQLV VPDOO

The Modelica Association

)LJXUHJHDUDXWRPDWLFJHDUER[PRGHO

289

Modelica 2002, March 18−19, 2002

Modeling Friction in Modelica with the Lund−Grenoble Friction Model

>@







>1@

0 .5
Angular velocity [rad/s]

PXHBSRV
SHDN
FJHR
IQBPD[

7DEOH3DUDPHWHUVRIWKHVWDQGDUGFOXWFKHVDQGEUDNHV
JHDU





&
RQ
RQ
RQ

&

%

Aberger M., Otter M.

%

0 .4
0 .3
0 .2
0 .1

RQ

0
0

0 .5

1

1 .5

2
2 .5
T im e [s]

RQ

3

3 .5

4

)LJXUH$QJXODUYHORFLW\RIORDG

RQ
0

Friction torque
LuGre clutch C2 [Nm]

>PUDG@
>PVUDG@
>PVUDG@
>1P1@
>1P1@

>1@
>UDGV@

-5

-1 0
-1 5
0

7DEOH3DUDPHWHUVRIWKH/X*UHFOXWFKHV

1

2
3
T im e [s]

0
-1
-2
-3
-4
-5
0

1

2
3
T im e [s]

0
-1
-2
-3
-4
-5

4
Friction torque
standard clutch C2 [Nm]

Friction torque
standard clutch C1 [Nm]

s
s
s
m&
m6
FJHR
)QPD[
w6










Friction torque
LuGre clutch C1 [Nm]

7DEOH*HDUVKLIWWDEOHRIFOXWFKHVDQGEUDNHV

0

1

2
3
T im e [s]

4

0

1

2
3
T im e [s]

4

0
-1
-2
-3
-4
-5

4

Friction torque
LuGre clutch B2 [Nm]

0
-2
-4
-6

Friction torque brake B1 [Nm]

)LJXUHJHDUDXWRPDWLFJHDUER[PRGHOZLWK/X*UH
FOXWFKHV
7KHWZRGLIIHUHQWLPSOHPHQWDWLRQVRIWKHFOXWFKHVVKRZ
D VLPLODU EHKDYLRXU 7KH DQJXODU YHORFLW\ RI WKH ORDG
ZLWK VWDQGDUG FOXWFKHV LV VKRZQ LQ )LJXUH  LQ
FRPSDULVRQ WR WKH PRGHO ZLWK WKH /X*UH FOXWFK WKH
VZLWFKLQJIURPRQHJHDULQWRWKHQH[WLVVOLJKWO\VORZHU
7KH IULFWLRQ WRUTXHV RI WKH VWDQGDUG DQG WKH /X*UH
FOXWFKHVDUHVKRZQLQ)LJXUH7KHUHLVQRGLIIHUHQFH
LQ WKH IULFWLRQ WRUTXH IRU FOXWFK & )RU WKH /X*UH
FOXWFK & SHDNV DSSHDU DW WKH VZLWFKLQJ SRLQWV 7KH
IULFWLRQWRUTXHVRIWKHEUDNHVDQGWKH/X*UHFOXWFKHVDUH
VKRZQ LQ )LJXUH  7KH IULFWLRQ WRUTXH RI WKH /X*UH
FOXWFK%VKRZVSHDNVDWWKHVZLWFKLQJSRLQWVDQGZKHQ
WKH FOXWFK JHWV VWXFN 7KH IULFWLRQ WRUTXH RI WKH /X*UH
FOXWFK % VKRZV VRPH VPDOO RVFLOODWLRQV DIWHU WKH
VZLWFKLQJ SRLQW :LWK  DQG WKH DFWXDO
SDUDPHWHUL]DWLRQIRUWKHVWDQGDUGFOXWFKHVWKHPD[LPXP
IULFWLRQ WRUTXH RI WKH FOXWFK LV tPD[  1P 7KLV LV QRW
DOZD\VIXOILOOHGZLWKWKH/X*UHFOXWFKHV

Modelica 2002, March 18−19, 2002

2

0

1

2
3
T im e [s]

0
-1
-2
-3
-4
-5
0

1

2
3
T im e [s]

0
-1
-2
-3
-4
-5

4

4

Friction torque brake B2 [Nm]

Friction torque
LuGre clutch B1 [Nm]

)LJXUH)ULFWLRQWRUTXHVRI/X*UHDQGVWDQGDUG
FOXWFKHV

0

1

2
3
T im e [s]

4

0

1

2
3
T im e [s]

4

0
-1
-2
-3
-4
-5

)LJXUH)ULFWLRQWRUTXHVRI/X*UHFOXWFKHVDQG
EUDNHV
7KHHIIHFWRQWKHIULFWLRQWRUTXHRIDGHFUHDVHGVWLIIQHVV
RI WKH EULVWOHV RI s  LV VKRZQ LQ )LJXUH  WKH
GDPSLQJRIWKHEULVWOHVLVNHSWFRQVWDQWDWs 7KH
DPSOLWXGHRIWKHSHDNVRIWKH/X*UHFOXWFK&LVELJJHU
7KH SHDN ZKHQ FOXWFK % JHWV VWXFN LV VPDOOHU 7KH
FRPSDULVRQRIWKHDQJXODUYHORFLW\RIWKHORDGZLWKWKH
VWDQGDUG PRGHO VKRZV WKDW WKH WLPH IRU VZLWFKLQJ LV
GHFUHDVHG

290

The Modelica Association

Acceleration of load [rad/s]

Acceleration of load [rad/s]

7KHHIIHFWRQWKHIULFWLRQWRUTXHRIDGHFUHDVHGGDPSLQJ
RIWKHEULVWOHVs LVVKRZQLQ)LJXUHWKHVWLIIQHVV
LVNHSWFRQVWDQWs 7KHKHLJKWRIWKHSHDNVRIWKH
/X*UHFOXWFK&LVVPDOOHUZKHQWKHFOXWFKLVDFWLYDWHG
+RZHYHUWKHDPSOLWXGHVRIWKHSHDNVZKHQWKHFOXWFKHV
JHWVWXFNDUHLQFUHDVHGDQGWKHUHDUHVPDOORVFLOODWLRQV
7KHFRPSDULVRQRIWKHDQJXODUYHORFLW\RIWKHORDGZLWK
WKHVWDQGDUGPRGHOVKRZVWKDWWKHWLPHIRUVZLWFKLQJLV
DOPRVW LGHQWLFDO EXW WKHUH DUH VPDOO RVFLOODWLRQV LQ WKH
DQJXODUYHORFLW\DIWHUWKHVZLWFKLQJ

0

Friction torque
LuGre clutch C2 [Nm]

Friction torque
LuGre clutch C1 [Nm]

7KH DQJXODU DFFHOHUDWLRQ RI WKH ORDG ZLWK VWDQGDUG
FOXWFKHV DQG EUDNHV DQG ZLWK /X*UH FOXWFKHV ZLWK
GLIIHUHQW G\QDPLF SDUDPHWHUV LV VKRZQ LQ )LJXUH 
7KH PD[LPXP DFFHOHUDWLRQ ZLWK /X*UH FOXWFKHV LV
KLJKHU WKDQ ZLWK VWDQGDUG FOXWFKHV DQG EUDNHV
,QFUHDVLQJ WKH VWLIIQHVV RI WKH EULVWOHV LQ WKH /X*UH
FOXWFKHVUHVXOWVLQKLJKHUSHDNVDWWKHVZLWFKLQJSRLQWV
:KHQ WKH GDPSLQJ RI WKH EULVWOHV LV UHGXFHG
RVFLOODWLRQVRFFXUDQGWKHDFFHOHUDWLRQLVQHJDWLYH

-5
-1 0
-1 5
-2 0
1

2
3
T im e [s]

0
-2
-4
-6
1

2
3
T im e [s]

-3
-4
-5
0

1

2
3
T im e [s]

4

0

1

2
3
T im e [s]

4

0
-1
-2
-3
-4

Friction torque
LuGre clutch C2 [Nm]

Friction torque
LuGre clutch C1 [Nm]

)LJXUH)ULFWLRQWRUTXHRI/X*UHFOXWFKHV&&
%DQG%ZLWKG\QDPLFIULFWLRQSDUDPHWHUVs 
DQGs 
2
0
-2
-4
-6

0
-2
-4

2
3
T im e [s]

4

2

Friction torque
LuGre clutch B2 [Nm]

Friction torque
LuGre clutch B1 [Nm]

1

0
-2
-4
-6

0

1

0

1

2
3
T im e [s]

4

2
0
-2
-4
-6

0

1

2

3

T im e [s]

4

2

3

4

T im e [s]

)LJXUH)ULFWLRQWRUTXHRI/X*UHFOXWFKHV&&
%DQG%ZLWKG\QDPLFIULFWLRQSDUDPHWHUVs 
DQGs 

The Modelica Association

0
-0 .5
0

1

2

3

4

T im e [s]
2 .5
2
1 .5
1
0 .5
0
-0 .5
0

1

2
3
T im e [s]

4

1
0 .5
0
-0 .5
0

1

2

3

4

2
3
T im e [s]

4

T im e [s]
2 .5
2
1 .5
1
0 .5
0
-0 .5
0

1

7KHYHORFLW\RIWKHFDU ZLWKVWDQGDUGFOXWFKHVDQG ZLWK
/X*UHFOXWFKHVLVVKRZQLQ)LJXUH7KHUHLVKDUGO\
DQ\GLIIHUHQFHLQWKHYHORFLW\H[FHSWDWWKHJHDUVKLIWDW
W VZKHUHWKHYHORFLW\LVGHFUHDVLQJZLWKWKH/X*UH
FOXWFKHVZKLFKLVTXDOLWDWLYHO\ZURQJLQFRQWUDVWWRWKH
PRGHO ZLWK VWDQGDUG FOXWFKHV ZKHUH WKH YHORFLW\ LV QRW
GHFUHDVLQJ 7KH DFFHOHUDWLRQ RI WKH FDU ZLWK VWDQGDUG
FOXWFKHVDQGZLWK/X*UHFOXWFKHVLVVKRZQLQ)LJXUH
7KHUH DUH VPDOO GLIIHUHQFHV EHWZHHQ WKH WZR FXUYHV
HVSHFLDOO\ DW W  V ZKHUH WKH YHORFLW\ RI WKH FDU LV
GHFUHDVLQJ7KH PD[LPXPDFFHOHUDWLRQ ZLWK WKH /X*UH
FOXWFKHVLVDPD[§PVDFRPSOHWHO\XQUHDOLVWLFYDOXH
7KH DPSOLWXGH RI WKHVH SHDNV GHSHQGV RQ WKH G\QDPLF
SDUDPHWHUV :KHQ WKH GDPSLQJ RI WKH EULVWOHV LV
LQFUHDVHGRUWKHVWLIIQHVVRIWKHEULVWOHVLVGHFUHDVHGWKH
DPSOLWXGHRIWKHSHDNVLQFUHDVHV

2

-6
0

1
0 .5

2
1 .5

$ FRPSOHWH PRGHO RI D FDU SRZHU WUDLQ ZLWK DQ
DXWRPDWLF JHDUER[ ZDV VLPXODWHG 7KH PRGHO RI WKH
DXWRPDWLFJHDUER[LVVKRZQLQ)LJXUHIRUGHWDLOVVHH
>@$OOFOXWFKHVDUHEDVHGRQWKH/X*UHIULFWLRQPRGHO
7KH SDUDPHWHUV RI WKH /X*UH FOXWFKHV DUH VKRZQ LQ
7DEOH  7KH PD[LPXP QRUPDO IRUFH LV QRW VKRZQ
EHFDXVHLWLVGLIIHUHQWIRUHDFKFOXWFK)RUWKHVLPXODWLRQ
RI76 VLQWHJUDWRU'$66/ZDVXVHGZLWKDUHODWLYH
WROHUDQFH 7RO  DQG 1  RXWSXW LQWHUYDOV 7KH
PRGHO ZLWK /X*UH FOXWFKHV LV XQVWDEOH ZKHQ XVLQJ
LQWHJUDWLRQ DOJRULWKPV ZLWK D IL[HG VWHSVL]H HJ
5.),;HYHQZLWKYHU\VPDOOVWHSVL]HV7KHPRGHOLV
DOVR XQVWDEOH ZLWK LQWHJUDWLRQ DOJRULWKP '$66/ ZKHQ
WKHVWLIIQHVVRIWKHEULVWOHVLVUHGXFHGWRs DQGWKH
GDPSLQJ RI WKH EULVWOHV LV LQ WKH UDQJH   s  
:KHQ WKH VWLIIQHVV RI WKH EULVWOHV LV LQFUHDVHG WKH
VLPXODWLRQWLPHDOVRLQFUHDVHVDVWREHH[SHFWHG

-2

4

1 .5

2 .5

 &DU0RGHOZLWK$XWRPDWLF*HDU

0

-5
0

2

)LJXUH$FFHOHUDWLRQRIORDGZLWKVWDQGDUGFOXWFKHV
DQGEUDNHVWRSOHIW/X*UHFOXWFKHVDQGG\QDPLF
SDUDPHWHUVs DQGs WRSULJKWG\QDPLF
SDUDPHWHUVs DQGs ERWWRPOHIWDQG
G\QDPLFSDUDPHWHUVs DQGs ERWWRPULJKW

-1

4
Friction torque
LuGre clutch B2 [Nm]

Friction torque
LuGre clutch B1 [Nm]

0

2 .5

Acceleration of load [rad/s]

Modeling Friction in Modelica with the Lund−Grenoble Friction Model

Acceleration of load [rad/s]

Aberger M., Otter M.

291

Modelica 2002, March 18−19, 2002

Modeling Friction in Modelica with the Lund−Grenoble Friction Model

>PUDG@
>PVUDG@
>PVUDG@
>1P1@
>1P1@

>UDGV@

Acceleration
of car [m/s 2]

10
5
0
-5
-10
0

50

100
Time [s]

150

200

0

50

100
Time [s]

150

200

10
Acceleration
of car [m /s 2]









s
s
s
m&
m6
FJHR
w6

Aberger M., Otter M.

7DEOH3DUDPHWHUVRIWKH/X*UHFOXWFKHV

5
0
-5
-10

)LJXUH$FFHOHUDWLRQRIFDUZLWKVWDQGDUGFOXWFKHV
WRSDQG/X*UHFOXWFKHVERWWRP

&RQFOXVLRQV
0RGHOLFDPRGHOVIRUEHDULQJIULFWLRQFOXWFKHVDQGRQH
ZD\ FOXWFKHV KDYH EHHQ LPSOHPHQWHG EDVHG RQ WKH
UHFHQWO\GHYHORSHGQHZ /X*UHIULFWLRQ PRGHO>@ 7KLV
PRGHO KDV EHHQ XVHG VXFFHVVIXOO\ IRU FRQWUROOHU GHVLJQ
WR FRPSHQVDWH IULFWLRQ HIIHFWV >@ 7KH IULFWLRQ PRGHO
VHHPV WR EH ZHOO VXLWHG IRU WKLV SXUSRVH EHFDXVH WKH
VWLII GLIIHUHQWLDO HTXDWLRQ GHVFULSWLRQ DOORZV DQ HDVLHU
DSSOLFDWLRQRIVWDQGDUGWKHRU\
)LJXUH$XWRPDWLFJHDUER[PRGHO

,Q WKLV DUWLFOH LW ZDV LQYHVWLJDWHG ZKHWKHU WKH /X*UH
IULFWLRQ PRGHO KDV DOVR DGYDQWDJHV ZKHQ XVHG LQ
VLPXODWLRQV (VSHFLDOO\ WKH SRWHQWLDO IRU UHDOWLPH
VLPXODWLRQRIWKHVKLIWG\QDPLFVRIDXWRPDWLFJHDUER[HV
ZDVHYDOXDWHG,WWXUQVRXWWKDWUHDVRQDEOHUHVXOWVFDQEH
DFKLHYHGLIRQHIULFWLRQHOHPHQWLVFRQWDLQHGLQDPRGHO
$VWREHH[SHFWHGWKHVLPXODWLRQWLPHLVKLJKHUVLQFHD
VWLII GLIIHUHQWLDO HTXDWLRQ LV VROYHG $ SRWHQWLDO
DGYDQWDJH VHHPHG WR EH WKDW QR HYHQWV RFFXU LQ WKH
PRGHO EHFDXVH KDQGOLQJ RI VWDWH HYHQWV LV DOZD\V
SUREOHPDWLF LQ UHDOWLPH VLPXODWLRQ +RZHYHU LW VHHPV
WREHWKDWVWDWHHYHQWVRUVRPHWKLQJVLPLODUKDYHWREH
DUWLILFLDOO\LQWURGXFHGWRGHWHFWWKHVKDUSFKDQJHVLQ]LQ
RUGHUWRDUULYHDWUHOLDEOHVLPXODWLRQV

Velocity of car [km/h]

200
150
100
50
0
0

50

100

150

200

Time [s]
Velocity of car [km/h]

200
150
100

:KHQIULFWLRQHOHPHQWVDUHG\QDPLFDOO\FRXSOHGDVLWLV
WKH FDVH LQ DXWRPDWLF JHDUER[ PRGHOV /X*UH EDVHG
FOXWFK PRGHOV VHHP WR EH QRW VXLWHG )L[HG VWHS VL]H
LQWHJUDWRUV DV QHHGHG IRU UHDOWLPH VLPXODWLRQ FRXOG
QRWEHDSSOLHGLQWKHWZRWHVWFDVHVEHFDXVHLW ZDVQRW
SRVVLEOHWRJHWVWDELOLW\HYHQIRUYHU\VPDOOVWHSVL]HV
8VLQJWKHXVXDOO\YHU\UREXVWDQGUHOLDEOHYDULDEOHVWHS
VL]H LQWHJUDWRU '$66/ UHVXOWHG LQ VLPXODWLRQV ZKLFK
DUHTXLWHVHQVLWLYHRQWKHFKRLFHRIWKHG\QDPLF/X*UH
IULFWLRQ SDUDPHWHUV DQG HYHQ OHDGHG WR LQVWDELOLWLHV LQ
FHUWDLQSDUDPHWHUUDQJHV

50
0
0

50

100

150

200

Time [s]

)LJXUH9HORFLW\RIFDUZLWKVWDQGDUGFOXWFKHVWRS
DQG/X*UHFOXWFKHVERWWRP

Modelica 2002, March 18−19, 2002

292

The Modelica Association

Aberger M., Otter M.

Modeling Friction in Modelica with the Lund−Grenoble Friction Model

%LEOLRJUDSK\

6SHHGVDQGDFFHOHUDWLRQV
Z GHUSKL
D GHUZ

>@ 1 %DUDEDQRY DQG 5 2UWHJD ³1HFHVVDU\ DQG
6XIILFLHQW &RQGLWLRQV IRU 3DVVLYLW\ RI WKH /X*UH
)ULFWLRQ0RGHO´,(((7UDQVDFWLRQVRQ$XWRPDWLF
&RQWURO9RO

'HIOHFWLRQRIEULVWOHV
]V GHU]
]V Z]1DEVZ]J

>@ &&DQXGDVGH:LW+2OVVRQ.-cVWU|PDQG3
/LVFKLQVNL³$1HZ0RGHOIRU&RQWURORI6\VWHPV
ZLWK )ULFWLRQ´ ,((( 7UDQVDFWLRQV RQ $XWRPDWLF
&RQWURO9RO

)ULFWLRQWRUTXH
J VLJPDWDXBFWDXBVWDXBF
H[SZZVA
WDX VLJPD]]1VLJPD]V]1WDXBYZ

>@ & &DQXGDV GH :LW 3 7VLRWUDV ³'\QDPLF 7LUH
)ULFWLRQ 0RGHOV IRU 9HKLFOH 7UDFWLRQ
&RQWURO´ &RQIHUHQFH RQ 'HFLVLRQ DQG &RQWURO
3KRHQL[$UL]RQD'HF

(TXLOLEULXPRIWRUTXHV
IODQJHBDWDXIODQJHBEWDXWDX 

>@ '\PROD'\QDVLP$%/XQG6ZHGHQYHUVLRQ
KWWSZZZG\QDVLPVH

7ULJJHUHYHQWVZKHQG]GW 
]VQHJ ]V
HQG/X*UH5RW

>@ 0*lIYHUW³&RPSDULVRQRIWZR)ULFWLRQ0RGHOV´
0DVWHU WKHVLV /XQG ,QVWLWXWH RI 7HFKQRORJ\
8QLYHUVLW\RI/XQG

&OXWFKZLWK/X*UH)ULFWLRQ

>@ + 2OVVRQ ³&RQWURO RI 6\VWHPV ZLWK )ULFWLRQ´
3KG WKHVLV /XQG ,QVWLWXWH RI 7HFKQRORJ\
8QLYHUVLW\RI/XQG

PRGHO&OXWFK/X*UH/X*UH&OXWFKPRGHO
LPSRUW5 0RGHOLFD0HFKDQLFV5RWDWLRQDO
LPSRUW6, 0RGHOLFD6,XQLWV
LPSRUW% 0RGHOLFD%ORFNV,QWHUIDFHV
H[WHQGV5,QWHUIDFHV&RPSOLDQW

>@ 02WWHU&6FKOHJHODQG+(OPTYLVW³0RGHOLQJ
DQG5HDOWLPH6LPXODWLRQRIDQ$XWRPDWLF*HDUER[
XVLQJ 0RGHOLFD´ 3URF (66¶ (XURSHDQ
6LPXODWLRQ 6\PSRVLXP 3DVVDX *HUPDQ\ SS


SDUDPHWHU5HDOPXHBV 
SDUDPHWHU5HDOPXHBF 
SDUDPHWHU6,$QJXODU9HORFLW\ZV 
SDUDPHWHU5HDOVLJPD 
SDUDPHWHU5HDOVLJPD H
SDUDPHWHU5HDOVLJPD 
SDUDPHWHU5HDOVLJPD 
SDUDPHWHU5HDO]1 H1RPYDOXH
SDUDPHWHU5HDOFJHR *HRPFRQVW
SDUDPHWHU6,)RUFHIQBPD[ 

$SSHQGL[
6LPSOLILHGURWDWLRQDO/X*UH0RGHO
PRGHO/X*UH5RW/X*UHEHDULQJIULFWLRQ
LPSRUW5 0RGHOLFD0HFKDQLFV5RWDWLRQDO
LPSRUW6, 0RGHOLFD6,XQLWV
H[WHQGV5,QWHUIDFHV5LJLG

%,Q3RUWLQ3RUWILQDOQ 
6,$QJXODU9HORFLW\ZBUHO5HOVSHHG
6,$QJXODU$FFHOHUDWLRQDBUHO
6,$QJOH]VWDUW %ULVWOHGHIO
6,$QJXODU9HORFLW\]VVWDUW G]GW
6,7RUTXHWDX)ULFWLRQWRUTXH
6,)RUFHIQ1RUPDOIRUFH IQBPD[X

SDUDPHWHU6,7RUTXHWDXBV 
SDUDPHWHU6,7RUTXHWDXBF 
SDUDPHWHU5HDOWDXBY 1PVUDG
SDUDPHWHU6,$QJXODU9HORFLW\ZV 
SDUDPHWHU5HDOVLJPD H1PUDG
SDUDPHWHU5HDOVLJPD 1PVUDG
SDUDPHWHU5HDO]1 H1RPYDOXH

5HDOJVHH>@
6,$QJOH]6WDUW6WDUWYDOXHRI]
%RROHDQ]VQHJ7ULJJHUHYHQWV
%RROHDQIUHH
5HDOXQRUPDOL]HGIRUFHLQSXW>@
HTXDWLRQ
,QLWLDOFRQGLWLRQV
ZKHQLQLWLDOWKHQ
]6WDUW VLJQZBUHOJ]1
UHLQLW]]6WDUW
HQGZKHQ

6,$QJXODU9HORFLW\Z$EVVSHHG
6,$QJXODU$FFHOHUDWLRQDGZGW
6,$QJOH]VWDUW %ULVWOHGHIO
6,$QJXODU9HORFLW\]VVWDUW G]GW
6,7RUTXHWDX)ULFWLRQWRUTXH
5HDOJVHH>@
6,$QJOH]6WDUW6WDUWYDOXHRI]
%RROHDQ]VQHJ7ULJJHUHYHQWV
HTXDWLRQ
,QLWLDOFRQGLWLRQV
ZKHQLQLWLDOWKHQ
]6WDUW VLJQZJ]1
UHLQLW]]6WDUW
HQGZKHQ

The Modelica Association

5HODWLYHTXDQWLWLHV
ZBUHO GHUSKLBUHO
DBUHO GHUZBUHO

293

Modelica 2002, March 18−19, 2002

Modeling Friction in Modelica with the Lund−Grenoble Friction Model

Aberger M., Otter M.

1RUPDOIRUFHDQGIULFWIRUIQ 
X LQ3RUWVLJQDO>@
IUHH X 
IQ LIIUHHWKHQHOVHIQBPD[X
ORFNHG ]

1RUPDOIRUFHDQGIULFWIRUIQ 
X LQ3RUWVLJQDO>@
IUHH X 
IQ LIIUHHWKHQHOVHIQBPD[X
'HIOHFWLRQRIEULVWOHV
]V GHU]
]V LIIUHHWKHQHOVH
ZBUHO]1DEVZBUHO]J
J VLJPDPXHBFPXHBVPXHBF
H[SZBUHOZVA
)ULFWLRQWRUTXH
WDX LIIUHHWKHQHOVHFHRIQ
VLJPD]]1VLJPD]V]1
VLJPDZBUHO

'HIOHFWLRQRIEULVWOHV
]V GHU]
]V ZBUHO]1DEVZBUHO]J
)ULFWLRQWRUTXH
J VLJPDPXHBFPXHBVPXHBF
H[SZBUHOZVA
WDX LIORFNHGWKHQ
IQBPD[FPD[VLJPD]]1
VLJPD]V]1VLJPDZBUHO
HOVHLIIUHHWKHQHOVH
FJHRIQ
VLJPD]]1VLJPD]V]1
VLJPDZBUHO
HQG2QH:D\&OXWFK/X*UH

7ULJJHUHYHQWVZKHQG]GW 
]VQHJ ]V
HQG&OXWFK/X*UH

2QH:D\&OXWFKZLWK/X*UH)ULFWLRQ
PRGHO2QH:D\&OXWFK/X*UH
)UHHZKHHODQGFOXWFK
LPSRUW5 0RGHOLFD0HFKDQLFV5RWDWLRQDO
LPSRUW6, 0RGHOLFD6,XQLWV
LPSRUW% 0RGHOLFD%ORFNV,QWHUIDFHV
H[WHQGV5,QWHUIDFHV&RPSOLDQW
SDUDPHWHU5HDOPXHBV 
SDUDPHWHU5HDOPXHBF 
SDUDPHWHU6,$QJXODU9HORFLW\ZV 
SDUDPHWHU5HDOVLJPD 
SDUDPHWHU5HDOVLJPD H
SDUDPHWHU5HDOVLJPD 
SDUDPHWHU5HDOVLJPD 
SDUDPHWHU5HDO]1 H1RPYDOXH
SDUDPHWHU5HDOFJHR *HRFRQVW
SDUDPHWHU6,)RUFHIQBPD[ 
%,Q3RUWLQ3RUWILQDOQ 
6,$QJXODU9HORFLW\ZBUHO5HOVSHHG
6,$QJXODU$FFHOHUDWLRQDBUHO
6,$QJOH]VWDUW %ULVWOHGHIO
6,$QJXODU9HORFLW\]VVWDUW G]GW
6,7RUTXHWDX)ULFWLRQWRUTXH
6,)RUFHIQ1RUPDOIRUFHIQBPD[X
5HDOJVHH>@
6,$QJOH]6WDUW6WDUWYDOXHRI]
%RROHDQ]VQHJ7ULJJHUHYHQWV
%RROHDQIUHH
%RROHDQORFNHG
5HDOXQRUPDOL]HGIRUFHLQSXW>@
SURWHFWHG
FRQVWDQW5HDOFPD[ 
HTXDWLRQ
,QLWLDOFRQGLWLRQV
ZKHQLQLWLDOWKHQ
]6WDUW VLJQZBUHOJ]1
UHLQLW]]6WDUW
HQGZKHQ
5HODWLYHTXDQWLWLHV
ZBUHO GHUSKLBUHO
DBUHO GHUZBUHO

Modelica 2002, March 18−19, 2002

294

The Modelica Association

Session 9b

Special Methods and Tools

The Modelica Association

295

Modelica 2002, March 18−19, 2002

Modelica 2002, March 18−19, 2002

296

The Modelica Association

Fritzson P., Aronsson P., Bunus P., Engelson V., Saldamli L., Johansson H., Karström A.

Open Source ...

7KH2SHQ6RXUFH0RGHOLFD3URMHFW
3HWHU)ULW]VRQ3HWHU$URQVVRQ3HWHU%XQXV9DGLP(QJHOVRQ/HYRQ6DOGDPOL


+HQULN-RKDQVVRQ $QGUHDV.DUVWU|P
3(/$%3URJUDPPLQJ(QYLURQPHQW/DERUDWRU\'HSDUWPHQWRI&RPSXWHUDQG,QIRUPDWLRQ
6FLHQFH/LQN|SLQJ8QLYHUVLW\6(/LQN|SLQJ6ZHGHQ
^SHWEXSHWIU`#LGDOLXVH


0DWK&RUH$%
:DOOHQEHUJVJDWD
6(/LQN|SLQJ6ZHGHQ
^KHQULNDQGUHDV`#PDWKFRUHFRP

$EVWUDFW
7KH RSHQ VRXUFH VRIWZDUH PRYHPHQW KDV UHFHLYHG
HQRUPRXV DWWHQWLRQ LQ UHFHQW \HDUV ,W LV RIWHQ
FKDUDFWHUL]HG DV D IXQGDPHQWDOO\ QHZ ZD\ WR GHYHORS
VRIWZDUH 7KLV SDSHU GHVFULEHV DQ HIIRUW WR GHYHORS DQ
RSHQ VRXUFH 0RGHOLFD HQYLURQPHQW WR D ODUJH H[WHQW
EDVHG RQ D IRUPDO VSHFLILFDWLRQ RI 0RGHOLFD
FRRUGLQDWHG E\ 3(/$% 'HSDUWPHQW RI &RPSXWHU DQG
,QIRUPDWLRQ 6FLHQFH /LQN|SLQJ 8QLYHUVLW\ 6ZHGHQ
7KHFXUUHQWYHUVLRQRIWKH V\VWHP SURYLGHV DQ HIILFLHQW
LQWHUDFWLYH FRPSXWDWLRQDO HQYLURQPHQW IRU PRVW RI WKH
H[SUHVVLRQ DOJRULWKP DQG IXQFWLRQ SDUWV RI WKH
0RGHOLFDODQJXDJHDVZHOODVDQDOPRVWFRPSOHWHVWDWLF
VHPDQWLFVIRU0RGHOLFD
7KH ORQJHUWHUP JRDO LV WR SURYLGH UHDVRQDEOH
VLPXODWLRQ H[HFXWLRQ VXSSRUW DW OHDVW IRU OHVV FRPSOH[
PRGHOVDOVRIRUWKHHTXDWLRQSDUWRI0RGHOLFDZKLFKLV
WKH UHDO HVVHQFH RI WKH ODQJXDJH 3HRSOH DUH LQYLWHG WR
FRQWULEXWH WR WKLV RSHQ VRXUFH SURMHFW HJ WR SURYLGH
LPSOHPHQWDWLRQV RI QXPHULFDO DOJRULWKPV DV 0RGHOLFD
IXQFWLRQV DGGRQ WRROV WR WKH HQYLURQPHQW RU
FRQWULEXWLRQVWRFRPSLOHULWVHOI7KHVRXUFHFRGHRIWKH
WRRO FRPSRQHQWV RI WKH RSHQ VRXUFH 0RGHOLFD
HQYLURQPHQWLVDYDLODEOHXQGHUWKH*QX3XEOLF/LFHQVH
*3/ 7KH OLEUDU\ FRPSRQHQWV DUH DYDLODEOH XQGHU WKH
VDPH FRQGLWLRQV DV WKH VWDQGDUG 0RGHOLFD OLEUDU\ 7KH
V\VWHPFXUUHQWO\UXQVXQGHU0LFURVRIW:LQGRZV/LQX[
DQG 6XQ 6SDUF 6RODULV $ EHQFKPDUN H[DPSOH RI
UXQQLQJDVLPSOH[DOJRULWKPVKRZVWKDWWKHSHUIRUPDQFH
RI WKH FXUUHQW V\VWHP LV FORVH WR WKH SHUIRUPDQFH RI
KDQGZULWWHQ&FRGHIRUWKHVDPHDOJRULWKP





7KH ORQJWHUP UHVHDUFK UHODWHG JRDOV DQG LVVXHV RI WKH
RSHQVRXUFHLPSOHPHQWDWLRQRID0RGHOLFDHQYLURQPHQW
LQFOXGHEXWDUHQRWOLPLWHGWRWKHIROORZLQJ
 'HYHORSPHQWRIDFRPSOHWHIRUPDOVSHFLILFDWLRQRI
0RGHOLFD LQFOXGLQJ ERWK VWDWLF DQG G\QDPLF
VHPDQWLFV6XFKDVSHFLILFDWLRQFDQEHXVHGWRDVVLVW
FXUUHQW DQG IXWXUH 0RGHOLFD LPSOHPHQWHUV E\
SURYLGLQJ D VHPDQWLF UHIHUHQFH DV D NLQG RI
UHIHUHQFHLPSOHPHQWDWLRQ
 /DQJXDJHGHVLJQHJWRIXUWKHUH[WHQGWKHVFRSHRI
WKH ODQJXDJH HJ IRU XVH LQ GLDJQRVLV VWUXFWXUDO
DQDO\VLV V\VWHP LGHQWLILFDWLRQ HWF DV ZHOO DV
PRGHOLQJ SUREOHPV WKDW UHTXLUH SDUWLDO GLIIHUHQWLDO
HTXDWLRQV
 /DQJXDJH GHVLJQ WR LPSURYH DEVWUDFW SURSHUWLHV
VXFKDVH[SUHVVLYHQHVVRUWKRJRQDOLW\GHFODUDWLYLW\
UHXVHFRQILJXUDELOLW\DUFKLWHFWXUDOSURSHUWLHVHWF
 ,PSURYHG LPSOHPHQWDWLRQ WHFKQLTXHV HJ WR
HQKDQFH WKH SHUIRUPDQFH RI FRPSLOHG 0RGHOLFD
FRGHE\JHQHUDWLQJFRGHIRUSDUDOOHOKDUGZDUH

,QWURGXFWLRQDQG3URMHFW
*RDOV

7KHRSHQVRXUFH0RGHOLFDHIIRUWGHVFULEHGLQWKLVSDSHU
KDVERWKVKRUWWHUPDQGORQJWHUPJRDOV
 7KH VKRUWWHUP JRDO LV WR GHYHORS DQ HIILFLHQW
LQWHUDFWLYH FRPSXWDWLRQDO HQYLURQPHQW IRU PRVW RI
WKHH[SUHVVLRQDOJRULWKPDQGIXQFWLRQSDUWVRIWKH
0RGHOLFD ODQJXDJH DV ZHOO DV D FRPSOHWH IRUPDO

The Modelica Association

VWDWLF VHPDQWLF VSHFLILFDWLRQ RI WKH ODQJXDJH ,W
WXUQVRXWWKDWZLWKVXSSRUWRIDSSURSULDWHWRROVDQG
OLEUDULHV 0RGHOLFD LV YHU\ ZHOO VXLWHG DV D
FRPSXWDWLRQDO ODQJXDJH IRU GHYHORSPHQW DQG
H[HFXWLRQ RI ERWK ORZ OHYHO DQG KLJK OHYHO
QXPHULFDO DOJRULWKPV HJ IRU FRQWURO V\VWHP
GHVLJQ VROYLQJ QRQOLQHDU HTXDWLRQ V\VWHPV RU WR
GHYHORSRSWLPL]DWLRQDOJRULWKPVWKDWDUHDSSOLHGWR
FRPSOH[DSSOLFDWLRQV
7KH ORQJWHUP JRDO LV WR KDYH D UDWKHU FRPSOHWH
LPSOHPHQWDWLRQ RI WKH 0RGHOLFD ODQJXDJH
LQFOXGLQJVLPXODWLRQRIHTXDWLRQEDVHGPRGHOVDQG
DGGLWLRQDO IDFLOLWLHV LQ WKH SURJUDPPLQJ
HQYLURQPHQW DV ZHOO DV FRQYHQLHQW IDFLOLWLHV IRU
UHVHDUFKDQGH[SHULPHQWDWLRQLQODQJXDJHGHVLJQRU
RWKHU UHVHDUFK DFWLYLWLHV +RZHYHU RXU JRDO LV QRW
WR UHDFK WKH OHYHO RI SHUIRUPDQFH DQG TXDOLW\
SURYLGHG E\ FXUUHQW FRPPHUFLDO 0RGHOLFD
HQYLURQPHQWV WKDW FDQ KDQGOH ODUJH PRGHOV
UHTXLULQJDGYDQFHGDQDO\VLVDQGRSWLPL]DWLRQE\WKH
0RGHOLFDFRPSLOHU

297

Modelica 2002, March 18−19, 2002

Open Source ...





Fritzson P., Aronsson P., Bunus P., Engelson V., Saldamli L., Johansson H., Karström A.

,PSURYHG GHEXJJLQJ VXSSRUW IRU HTXDWLRQ EDVHG
ODQJXDJHV VXFK DV 0RGHOLFD WR PDNH WKHP HYHQ
HDVLHUWRXVH
(DV\WRXVH VSHFLDOL]HG KLJKOHYHO JUDSKLFDO XVHU
LQWHUIDFHVIRUFHUWDLQDSSOLFDWLRQGRPDLQV
9LVXDOL]DWLRQ DQG DQLPDWLRQ WHFKQLTXHV IRU
LQWHUSUHWDWLRQDQGSUHVHQWDWLRQRIUHVXOWV

7KH FRPSOHWH IRUPDO VSHFLILFDWLRQ IRU 0RGHOLFD LV
GHYHORSHGLQ1DWXUDO6HPDQWLFV ZKLFKLV FXUUHQWO\ WKH
PRVW SRSXODU DQG ZLGHO\ XVHG VHPDQWLFV VSHFLILFDWLRQ
IRUPDOLVP 7KLV VSHFLILFDWLRQ LV XVHG DV LQSXW IRU
DXWRPDWLF JHQHUDWLRQ RI 0RGHOLFD WUDQVODWRU
LPSOHPHQWDWLRQVEHLQJSDUWRIWKHRSHQVRXUFH0RGHOLFD
HQYLURQPHQW XVLQJ WKH 50/ FRPSLOHU JHQHUDWLRQ WRRO
GHYHORSHG DW 3(/$% 7KH DYDLODELOLW\ RI D IRUPDO
VSHFLILFDWLRQ IDFLOLWDWHV ODQJXDJH GHVLJQ UHVHDUFK RQ
QHZ ODQJXDJH FRQVWUXFWV WR ZLGHQ WKH VFRSH RI WKH
ODQJXDJHDVZHOODVLPSURYLQJLWVDEVWUDFWSURSHUWLHV
7KH RSHQ VRXUFH 0RGHOLFD HQYLURQPHQW WKXV
SURYLGHV D WHVW EHQFK IRU ODQJXDJH GHVLJQ LGHDV WKDW LI
VXFFHVVIXO FDQ EH VXEPLWWHG WR WKH 0RGHOLFD
$VVRFLDWLRQ IRU FRQVLGHUDWLRQ UHJDUGLQJ SRVVLEOH
LQFOXVLRQLQWKHRIILFLDO0RGHOLFDVWDQGDUG
7KH FXUUHQW YHUVLRQ RI WKH RSHQ VRXUFH 0RGHOLFD
HQYLURQPHQW DOORZV PRVW RI WKH H[SUHVVLRQ DOJRULWKP
DQG IXQFWLRQ SDUWV RI 0RGHOLFD WR EH H[HFXWHG
LQWHUDFWLYHO\ DQG 0RGHOLFD IXQFWLRQV WR EH FRPSLOHG
LQWRHIILFLHQW&FRGH7KHJHQHUDWHG&FRGHLVFRPELQHG
ZLWKDOLEUDU\RIXWLOLW\IXQFWLRQVDQGDUXQWLPHOLEUDU\
$Q H[WHUQDO IXQFWLRQ OLEUDU\ LQWHUIDFLQJ D /$3$&.
VXEVHW DQG RWKHU EDVLF DOJRULWKPV LV DOVR XQGHU
GHYHORSPHQW







,QWHUDFWLYH
VHVVLRQ

7H[WXDO
0RGHO(GLWRU

([HFXWLRQ

*UDSKLF
0RGHO(GLWRU









0RGHOLFD
&RPSLOHU


)LJXUH7KHDUFKLWHFWXUHRIWKHRSHQVRXUFH0RGHOLFD
HQYLURQPHQW$UURZVGHQRWHGDWDDQGFRQWUROIORZ7KH
LQWHUDFWLYH VHVVLRQ KDQGOHU UHFHLYHV FRPPDQGV DQG
VKRZV UHVXOWV IURP HYDOXDWLQJ H[SUHVVLRQV WKDW DUH
WUDQVODWHGDQGH[HFXWHG7KHJUDSKLFPRGHOHGLWRULVQRW
\HWLPSOHPHQWHG

 ,QWHUDFWLYH6HVVLRQZLWK
([DPSOHV

7KH2SHQ6RXUFH0RGHOLFD
(QYLURQPHQW

7KH IROORZLQJ LV DQ LQWHUDFWLYH VHVVLRQ ZLWK WKH RSHQ
VRXUFH 0RGHOLFD HQYLURQPHQW LQFOXGLQJ VRPH
FRPPDQGV DQG H[DPSOHV )LUVW ZH VWDUW WKH V\VWHP
ZKLFKUHVSRQGVZLWKDKHDGHUOLQH

7KH LQWHUDFWLYH RSHQ VRXUFH 0RGHOLFD HQYLURQPHQW
FXUUHQWO\FRQVLVWVRIWKHIROORZLQJFRPSRQHQWV
 $Q LQWHUDFWLYH VHVVLRQ KDQGOHU WKDW SDUVHV DQG
LQWHUSUHWVFRPPDQGVDQG0RGHOLFDH[SUHVVLRQV IRU
HYDOXDWLRQ 7KH VHVVLRQ KDQGOHU DOVR FRQWDLQV
VLPSOH KLVWRU\ IDFLOLWLHV DQG FRPSOHWLRQ RI ILOH
QDPHV DQG FHUWDLQ LGHQWLILHUV LQ FRPPDQGV ,W LV
EDVHGRQWKH5HDG/LQHOLEUDU\ZKLFKLVDYDLODEOHLQ
PRVW/LQX[DQG8QL[GLVWULEXWLRQV
 $ 0RGHOLFD FRPSLOHU WUDQVODWLQJ 0RGHOLFD WR &
FRGHZLWKDV\PEROWDEOHFRQWDLQLQJGHILQLWLRQVRI
FODVVHV IXQFWLRQV DQG YDULDEOHV 6XFK GHILQLWLRQV
FDQ EH SUHGHILQHG XVHUGHILQHG RU REWDLQHG IURP
OLEUDULHV
 $Q H[HFXWLRQ DQG UXQWLPH PRGXOH 7KLV PRGXOH
FXUUHQWO\ H[HFXWHV FRPSLOHG ELQDU\ FRGH IURP
WUDQVODWHGH[SUHVVLRQVDQGIXQFWLRQV,QWKHIXWXUHLW
ZLOO DOVR VXSSRUW VLPXODWLRQ RI HTXDWLRQ EDVHG
PRGHOV UHTXLULQJ QXPHULFDO VROYHUV DV ZHOO DV
HYHQWKDQGOLQJIDFLOLWLHVIRUWKHGLVFUHWHDQGK\EULG
SDUWVRIWKH0RGHOLFDODQJXDJH
 $WH[WXDOPRGHOHGLWRU$Q\WH[WHGLWRUFDQEHXVHG
:H KDYH VR IDU SULPDULO\ HPSOR\HG *QX (PDFV

Modelica 2002, March 18−19, 2002

ZKLFKKDVWKHDGYDQWDJHRIEHLQJSURJUDPPDEOHIRU
IXWXUHH[WHQVLRQV$*QX(PDFVPRGHIRU0RGHOLFD
DQG D 0RGHOLFD V\QWD[ KLJKOLJKWLQJ IRU WKH
8OWUD(GLWWH[WHGLWRUKDVSUHYLRXVO\EHHQGHYHORSHG
7KHUH LV DOVR D VSHFLDO 0RGHOLFD HGLWRU WKDW
UHFRJQL]HV WKH V\QWD[ WR VRPH H[WHQW DQG PDUNV
NH\ZRUGV DQG FRPPHQWV XVLQJ GLIIHUHQW FRORUV
>0RGHOLFD@ %RWK WKH (PDFV PRGH DQG WKH VSHFLDO
HGLWRUKLGHV0RGHOLFDJUDSKLFDODQQRWDWLRQV GXULQJ
HGLWLQJ ZKLFK RWKHUZLVH FOXWWHUV WKH FRGH DQG
PDNHVLWKDUGWRUHDG
$ JUDSKLFDO PRGHO HGLWRU 7KLV LV D JUDSKLFDO
FRQQHFWLRQ HGLWRU IRU FRPSRQHQW EDVHG PRGHO
GHVLJQE\FRQQHFWLQJLQVWDQFHVRI0RGHOLFDFODVVHV
7KLV SDUW RI WKH V\VWHP LV QRW \HW LPSOHPHQWHG $
-DYD EDVHG SURWRW\SH LV KRZHYHU XQGHU
GHYHORSPHQW

2SHQ6RXUFH0RGHOLFD

:HHQWHUDQDVVLJQPHQWRIDYHFWRUH[SUHVVLRQFUHDWHG
E\WKHUDQJHFRQVWUXFWLRQH[SUHVVLRQ  WR EH VWRUHG
LQ WKH YDULDEOH [ 7KH W\SH DQG WKH YDOXH RI WKH
H[SUHVVLRQLVUHWXUQHG
!![ 
,QWHJHU>@^
`

7KHIXQFWLRQ bubblesortLVFDOOHG WR VRUW WKLV YHFWRU
LQ GHVFHQGLQJ RUGHU 7KH VRUWHG UHVXOW LV UHWXUQHG
WRJHWKHU ZLWK LWV W\SH 1RWH WKDW WKH UHVXOW YHFWRU LV RI
W\SH Real[:]LQVWDQWLDWHGDV Real[12]VLQFHWKLVLV
WKH GHFODUHG W\SH RI WKH IXQFWLRQ UHVXOW 7KH LQSXW
Integer YHFWRU ZDV DXWRPDWLFDOO\ FRQYHUWHG WR D
Real YHFWRU DFFRUGLQJ WR WKH 0RGHOLFD W\SH FRHUFLRQ
UXOHV
!!EXEEOHVRUW[

298

The Modelica Association

Fritzson P., Aronsson P., Bunus P., Engelson V., Saldamli L., Johansson H., Karström A.

5HDO>@^
`

$QRWKHU EXLOWLQ FRPPDQG LV cd WKH FKDQJH FXUUHQW
GLUHFWRU\ FRPPDQG 7KH UHVXOWLQJ FXUUHQW GLUHFWRU\ LV
UHWXUQHGDVDVWULQJ

1RZZHZDQWWRWU\DQRWKHUVPDOODSSOLFDWLRQDVLPSOH[
DOJRULWKP IRURSWLPL]DWLRQ)LUVWUHDGLQDVPDOO PDWUL[
FRQWDLQLQJFRHIILFLHQWVWKDWGHILQHDVLPSOH[SUREOHPWR
EHVROYHG

!!FG

6WULQJKRPHSHWIUPRGHOLFD



!!D UHDGVLPSOH[BLQW[W
5HDO>@
^^`
^`
^`
^`
^`
^``

7KH0RGHOLFD7UDQVODWLRQ
3URFHVV

7KH0RGHOLFDWUDQVODWLRQSURFHVVLVGHSLFWHGLQ)LJXUH
EHORZ7KH0RGHOLFDVRXUFHFRGHLVILUVWWUDQVODWHGWRD
VRFDOOHGIODWPRGHO7KLVSKDVHLQFOXGHVW\SHFKHFNLQJ
SHUIRUPLQJ DOO REMHFWRULHQWHG RSHUDWLRQV VXFK DV
LQKHULWDQFH PRGLILFDWLRQV HWF DQG IL[LQJ SDFNDJH
LQFOXVLRQDQGORRNXSDVZHOODVLPSRUWVWDWHPHQWV7KH
IODW PRGHO LQFOXGHV D VHW RI HTXDWLRQV GHFODUDWLRQV DQG
IXQFWLRQV ZLWK DOO REMHFWRULHQWHG VWUXFWXUH UHPRYHG
DSDUWIURPGRWQRWDWLRQZLWKLQQDPHV7KLVSURFHVVLVD
SDUWLDOLQVWDQWLDWLRQRIWKHPRGHOFDOOHGHODERUDWLRQLQ
VXEVHTXHQWVHFWLRQV
7KH QH[W WZR SKDVHV WKH HTXDWLRQ DQDO\]HU DQG
HTXDWLRQRSWLPL]HUDUHQHFHVVDU\IRUFRPSLOLQJPRGHOV
FRQWDLQLQJ HTXDWLRQV 7KHVH SKDVHV DUH FXUUHQWO\
PLVVLQJEXW ZLOOEHVXSSOLHGLQ VRPH IXWXUHYHUVLRQRI
WKH RSHQ VRXUFH 0RGHOLFD V\VWHP )LQDOO\ & FRGH LV
JHQHUDWHGZKLFKLVIHGWKURXJKD&FRPSLOHUWRSURGXFH
H[HFXWDEOH FRGH ,Q WKH FXUUHQW SUHOLPLQDU\ YHUVLRQ RI
WKH V\VWHP WKLV FRGH FDQQRW EH DQ\ HTXDWLRQ EDVHG
VLPXODWLRQ FRGH RQO\ FRGH IRU FRPSXWLQJ H[SUHVVLRQV
DOJRULWKPVDQGIXQFWLRQV

7KHQ FDOO WKH VLPSOH[ DOJRULWKP LPSOHPHQWHG DV WKH
0RGHOLFD IXQFWLRQ simplex1 7KLV IXQFWLRQ UHWXUQV
IRXU UHVXOWV ZKLFK DUH UHSUHVHQWHG DV D WXSOH RI IRXU
UHWXUQYDOXHV
!!VLPSOH[D
7XSOH
5HDO>@^`
5HDO
,QWHJHU
,QWHJHU

,WLVSRVVLEOHWRFRPSXWHDQH[SUHVVLRQHJ 12:-1:1
DQGVWRUHWKHUHVXOWLQDILOHXVLQJWKHwriteFRPPDQG
!!ZULWHWHVWGDW

:HFDQUHDG EDFN WKH VWRUHG UHVXOW IURP WKH ILOH LQWR D
YDULDEOHy



!!\ UHDGWHVWGDW
,QWHJHU>@^
`

0RGHOLFD
6RXUFH&RGH




0RGHOLFDPRGHO



,W LV DOVR SRVVLEOH WR JLYH RSHUDWLQJ V\VWHP FRPPDQGV
YLD WKH system XWLOLW\ IXQFWLRQ $ FRPPDQG LV
SURYLGHG DV D VWULQJ DUJXPHQW 7KH H[DPSOH EHORZ
VKRZV system DSSOLHG WR WKH 81,; FRPPDQG cat
ZKLFK KHUH RXWSXWV WKH FRQWHQWV RI WKH ILOH
bubblesort.moWRWKHRXWSXWVWUHDP

7UDQVODWRU

!!V\VWHPFDWEXEEOHVRUWPR
IXQFWLRQEXEEOHVRUW
LQSXW5HDO>@[
RXWSXW5HDO>VL]H[@\
SURWHFWHG
5HDOW
DOJRULWKP
\ [
IRULLQVL]H[ORRS
IRUMLQVL]H[ORRS
LI\>L@!\>M@WKHQ
W \>L@
\>L@ \>M@
\>M@ W
HQGLI
HQGIRU
HQGIRU
HQGEXEEOHVRUW

2SWLPL]HU

The Modelica Association

Open Source ...



)ODW0RGHO



$QDO\]HU

&XUUHQWO\PLVVLQJ



6RUWHGHTXDWLRQV





2SWLPL]HGVRUWHG
HTXDWLRQV





&RGH
*HQHUDWRU




&&RGH



&&RPSLOHU



([HFXWDEOH



6LPXODWLRQ



)LJXUH  7UDQVODWLRQ VWDJHV IURP 0RGHOLFD FRGH WR
H[HFXWLQJ VLPXODWLRQ 7KH FXUUHQW YHUVLRQ RI WKH RSHQ
VRXUFH 0RGHOLFD FRPSLOHU JHQHUDWHV H[HFXWDEOH FRGH
RQO\ IRU IXQFWLRQV DQG H[SUHVVLRQV VLQFH WKH HTXDWLRQ
DQDO\]HUDQGRSWLPL]HUDUHVWLOOPLVVLQJ

299

Modelica 2002, March 18−19, 2002

Open Source ...



Fritzson P., Aronsson P., Bunus P., Engelson V., Saldamli L., Johansson H., Karström A.

:KDW WKH WUDQVODWRU DFWXDOO\ GRHV LV WUDQVODWLQJ
IURP WKH 0RGHOLFD VRXUFH FRGH WR DQ LQWHUQDO
UHSUHVHQWDWLRQ RI WKH UHVXOWLQJ VHW RI HTXDWLRQV 7KLV
LQWHUQDO UHSUHVHQWDWLRQ LV WKHQ IXUWKHU WUDQVODWHG WR &
FRGH )RU IXQFWLRQV GHFODUDWLRQV DQG LQWHUDFWLYHO\
HQWHUHGH[SUHVVLRQVWKH&FRGHFDQEHJHQHUDWHGIDLUO\
GLUHFWO\ ZKHUHDV IRU HTXDWLRQV VHYHUDO RSWLPL]DWLRQ
VWDJHVPXVWEHDSSOLHGEHIRUHJHQHUDWLQJWKH&FRGH

0RGHOLFD6WDWLFDQG'\QDPLF
6HPDQWLFV

7KHFRPSOHWHVHPDQWLFVLHPHDQLQJRIWKHFRQVWUXFWV
LQ DQ\ SURJUDPPLQJ ODQJXDJH DOVR LQFOXGLQJ WKH
0RGHOLFD ODQJXDJH LV XVXDOO\ GLYLGHG LQWR WZR PDMRU
SDUWV
 VWDWLFVHPDQWLFV
 G\QDPLFVHPDQWLFV

 0RGHO3DUDPHWHUL]DWLRQDQG
6WUXFWXUDO3DUDPHWHUV

7KHVWDWLFVHPDQWLFVVSHFLILHVFRPSLOHWLPHLVVXHVVXFK
DV W\SH FKHFNLQJ HTXLYDOHQFH EHWZHHQ GLIIHUHQW
UHSUHVHQWDWLRQV RI WKH SURJUDP VXFK DV D IRUP ZLWK
LQKHULWDQFH RSHUDWLRQV SUHVHQW DQG WKH FRUUHVSRQGLQJ
IRUP ZLWK LQKHULWDQFH DQG PRGLILFDWLRQV H[SDQGHG
HODERUDWLRQRIWKHREMHFWRULHQWHGPRGHOUHSUHVHQWDWLRQ
FRQYHUVLRQ EHWZHHQ GLIIHUHQW OHYHOV RI WKH LQWHUPHGLDWH
IRUPHWF6XFKDVWDWLFVHPDQWLFVLVFXUUHQWO\ JLYHQE\
RXUIRUPDOVSHFLILFDWLRQRI0RGHOLFD
,WVKRXOG EH QRWHG WKDW WKH VHPDQWLFV VSHFLILFDWLRQ
IRUDQHTXDWLRQEDVHGODQJXDJHVXFKDV0RGHOLFDGLIIHUV
IURPVHPDQWLFVVSHFLILFDWLRQVRIRUGLQDU\SURJUDPPLQJ
ODQJXDJHV VLQFH 0RGHOLFD HTXDWLRQ EDVHG PRGHOV DUH
QRW SURJUDPV LQ WKH XVXDO VHQVH ,QVWHDG 0RGHOLFD LV D
PRGHOLQJ ODQJXDJH XVHG WR VSHFLI\ UHODWLRQV EHWZHHQ
GLIIHUHQWREMHFWVLQWKHPRGHOHGV\VWHP
7KH G\QDPLF VHPDQWLFV VSHFLILHV WKH UXQWLPH
EHKDYLRU LQFOXGLQJ WKH HTXDWLRQ VROYLQJ SURFHVV GXULQJ
WKH VLPXODWLRQ H[HFXWLRQ RI DOJRULWKPLF FRGH DQG
DGGLWLRQDOUXQWLPHDVSHFWVRIWKHH[HFXWLRQSURFHVV:H
GR QRW FXUUHQWO\ KDYH D IRUPDO VSHFLILFDWLRQ RI WKH
0RGHOLFD G\QDPLF VHPDQWLFV EXW LQWHQG WR GHYHORS
VXFKDVSHFLILFDWLRQ LQ WKH IXWXUH 7KH FXUUHQW G\QDPLF
UXQWLPH EHKDYLRU LV LPSOHPHQWHG E\ KDQG LQ WKH &
SURJUDPPLQJODQJXDJH

,Q PDQ\ FDVHV PRGHO SDUDPHWHUV LQ D 0RGHOLFD PRGHO
DUHXQSUREOHPDWLFDQGWKHWUDQVODWRUFDQVLPSO\HPLWD
IODW PRGHO ZLWK WKH SDUDPHWHUV VWLOO DYDLODEOH DV
SDUDPHWHUV WKDW FDQ EH JLYHQ GLIIHUHQW YDOXHV GXULQJ
HTXDWLRQVROXWLRQ%XWLQVRPHFDVHVWKLVLV QRWVR:H
GLIIHUHQWLDWHEHWZHHQWZRW\SHVRISDUDPHWHUVVWUXFWXUDO
SDUDPHWHUVZKLFKDIIHFWWKHQXPEHUDQGFRQWHQWVRIWKH
HTXDWLRQVDQGYDOXHSDUDPHWHUVWKDWGRQRW
2QH VLPSOH H[DPSOH RI D VWUXFWXUDO SDUDPHWHU LV
ZKHQ D SDUDPHWHU LV XVHG LQ WKH VL]H RI DQ DUUD\
&RQVLGHUWKHIROORZLQJPRGHO
PRGHO$UUD\([
SDUDPHWHU5HDO1 
5HDOD>1@
HTXDWLRQ
D>@ 
IRULLQ1ORRS
D>L@ D>L@
HQGIRU
HQG$UUD\([

7KLVZLOOZLWKWKHSDUDPHWHU NXQPRGLILHGSURGXFHWKH
IROORZLQJHTXDWLRQV

 $Q([DPSOH7UDQVODWLRQRI
0RGHOVLQWR(TXDWLRQV

D>@ 
D>@ 
D>@ 

$V DQ H[DPSOH WKH 0RGHOLFD PRGHO B EHORZ LV
WUDQVODWHGLQWRHTXDWLRQV
PRGHO$
5HDO[\
HTXDWLRQ
[ \
HQG$

+RZHYHULIWKH SDUDPHWHU 1 LV PRGLILHG WR EH  ZKHQ
WKHPRGHOLVHODERUDWHGLHV\PEROLFDOO\H[SDQGHGWKH
VHWRIHTXDWLRQVZLOOEHGLIIHUHQW
D>@
D>@
D>@
D>@
D>@

PRGHO%
$D
5HDO[>@
HTXDWLRQ
[>@ D\
HQG%

$VWKHVHPDQWLFVSHFLILFDWLRQVSHFLILHVWKHVHPDQWLFVLQ
WHUPV RI WKH JHQHUDWHG HTXDWLRQV UHJDUGLQJ DOJRULWKPV
DQG IXQFWLRQV DV VSHFLDO FDVHV RI HTXDWLRQV WKLV PHDQV
WKDWWKHYDOXHVRIWKHSDUDPHWHUVQHHGWREHGHWHUPLQHG
DWFRPSLOHWLPHWRPDNHLWSRVVLEOHIRUWKHWUDQVODWRUWR
GRWKHWUDQVODWLRQ
$QRWKHU HYHQ PRUH VHULRXV FRPSOLFDWLRQ ZLWK
SDUDPHWHUV LV WKH FRPELQHG XVH RI SDUDPHWHUV DQG
FRQQHFW VWDWHPHQWV ,I D PRGHO FRQWDLQV HJ D FRQQHFW
VWDWHPHQWVWKDWORRNVOLNHconnect(a[N],c)ZKHUHD
LVDQDUUD\RIFRQQHFWRUVDQG NLVDSDUDPHWHUWKHQWKH
JHQHUDWHGHTXDWLRQV PD\ORRNYHU\GLIIHUHQW GHSHQGLQJ

7KHUHVXOWLQJHTXDWLRQVDSSHDUDVIROORZV
%D[ %D\
%[>@ %D\
7KH REMHFWRULHQWHG VWUXFWXUH LV PRVWO\ ORVW ZKLFK LV
ZK\ ZH WDON DERXW D IODW VHW RI HTXDWLRQV EXW WKH
YDULDEOH QDPHV LQ WKH HTXDWLRQV VWLOO JLYH D KLQW DERXW
WKHLURULJLQ

Modelica 2002, March 18−19, 2002







300

The Modelica Association

Fritzson P., Aronsson P., Bunus P., Engelson V., Saldamli L., Johansson H., Karström A.

RQ WKH YDOXH RI N 1RW RQO\ WKH QXPEHU RI HTXDWLRQV
PD\ FKDQJH EXW WKH HTXDWLRQV WKHPVHOYHV FDQ EH
DOWHUHG



 &RPSLOHU*HQHUDWLRQ
:ULWLQJ D JRRG FRPSLOHU LV QRW HDV\ 7KLV PDNHV
DXWRPDWLF FRPSLOHU JHQHUDWLRQ IURP ODQJXDJH
VSHFLILFDWLRQV YHU\ LQWHUHVWLQJ ,I D ODQJXDJH
VSHFLILFDWLRQ LV ZULWWHQ LQ D IRUPDO PDQQHU DOO WKH
LQIRUPDWLRQ QHHGHG WR EXLOG WKH FRPSLOHU LV DOUHDG\
DYDLODEOHLQDPDFKLQHXQGHUVWDQGDEOHIRUP:ULWLQJWKH
IRUPDOVHPDQWLFVIRUDODQJXDJHFDQHYHQEHUHJDUGHGDV
WKHKLJKOHYHOSURJUDPPLQJRIDFRPSLOHU
,Q )LJXUH  EHORZ WKH GLIIHUHQW SKDVHV RI WKH
FRPSLODWLRQ SURFHVV DUH VKRZQ 0RUH VSHFLILFDOO\ LW
VKRZV WKH WUDQVODWLRQ SURFHVV RI D 0RGHOLFD WUDQVODWRU
ZKLFK FRPSLOHV RU UDWKHU WUDQVODWHV WKH 0RGHOLFD
VRXUFH ILOH $OO WKH SDUWV RI WKH FRPSLOHU FDQ EH
VSHFLILHGLQDIRUPDOPDQQHUXVLQJGLIIHUHQWIRUPDOLVPV
VXFK DV UHJXODU H[SUHVVLRQV %1) JUDPPDUV DQG
1DWXUDO6HPDQWLFVVSHFLILFDWLRQV $WDOO VWDJHVWKHUHLV
D WRRO WR FRQYHUW WKH IRUPDOLVP LQWR DQ H[HFXWDEOH
FRPSLOHUPRGXOH

$XWRPDWLF*HQHUDWLRQDQG
)RUPDO6SHFLILFDWLRQRI
7UDQVODWRUV

7KH LPSOHPHQWDWLRQ RI FRPSLOHUV DQG LQWHUSUHWHUV IRU
QRQWULYLDO ODQJXDJHV LV D FRPSOH[ DQG HUURU SURQH
SURFHVV LI GRQH E\ KDQG 7KHUHIRUH IRUPDOLVPV DQG
JHQHUDWRU WRROV KDYH EHHQ GHYHORSHG WKDW DOORZ
DXWRPDWLFJHQHUDWLRQRIFRPSLOHUVDQGLQWHUSUHWHUVIURP
IRUPDOVSHFLILFDWLRQV7KLVRIIHUVWZRPDMRUDGYDQWDJHV
 +LJK OHYHO GHVFULSWLRQV RI ODQJXDJH SURSHUWLHV
UDWKHUWKDQGHWDLOHGSURJUDPPLQJRIWKHWUDQVODWLRQ
SURFHVV
 +LJK GHJUHH RI FRUUHFWQHVV RI JHQHUDWHG
LPSOHPHQWDWLRQV 7KH KLJK OHYHO VSHFLILFDWLRQV DUH
PRUH FRQFLVH DQG HDVLHU WR UHDG WKDQ D GHWDLOHG
LPSOHPHQWDWLRQLQVRPHSURJUDPPLQJODQJXDJH



7KHV\QWD[RIDSURJUDPPLQJODQJXDJHLVFRQYHQLHQWO\
GHVFULEHG E\ D JUDPPDU LQ D FRPPRQ IRUPDW VXFK DV
%1) DQG WKH VWUXFWXUH RI WKH OH[LFDO HQWLWLHV XVXDOO\
FDOOHG WRNHQV DUH HDVLO\ GHVFULEHG E\ UHJXODU
H[SUHVVLRQV +RZHYHU ZKHQ LW FRPHV WR WKH VHPDQWLFV
RI D SURJUDPPLQJ ODQJXDJH WKLQJV DUH QRW VR
VWUDLJKWIRUZDUG
7KHVHPDQWLFVRIWKHODQJXDJHGHVFULEHV ZKDW DQ\
SDUWLFXODUSURJUDPZULWWHQLQWKHODQJXDJH³PHDQV´LH
ZKDW VKRXOG KDSSHQ ZKHQ WKH SURJUDP LV H[HFXWHG RU
HYDOXDWHGLQVRPHIRUP
0DQ\ SURJUDPPLQJ ODQJXDJH VHPDQWLF GHILQLWLRQV
DUH JLYHQ E\ D VWDQGDUG WH[W ZULWWHQ LQ (QJOLVK ZKLFK
WULHVWRJLYHDFRPSOHWHDQGXQDPELJXRXVVSHFLILFDWLRQ
RIWKHODQJXDJH8QIRUWXQDWHO\WKLVLVRIWHQQRWHQRXJK
1DWXUDO ODQJXDJH LV LQKHUHQWO\ QRW YHU\ H[DFW DQG LW LV
KDUGWRPDNHVXUHWKDWDOOVSHFLDOFDVHVDUHFRYHUHG2QH
RI WKH PRVW LPSRUWDQW UHTXLUHPHQWV RI D ODQJXDJH
VSHFLILFDWLRQ LV WKDW WZR GLIIHUHQW ODQJXDJH
LPSOHPHQWHUV VKRXOG EH DEOH WR UHDG WKH VSHFLILFDWLRQ
DQG PDNH LPSOHPHQWDWLRQV WKDW LQWHUSUHW WKH
VSHFLILFDWLRQ LQ WKH VDPH ZD\ 7KLV LPSOLHV WKDW WKH
VSHFLILFDWLRQPXVWEHH[DFWDQGXQDPELJXRXV
)RU WKLV UHDVRQ IRUPDOLVPV IRU ZULWLQJ IRUPDO
VSHFLILFDWLRQV RI ODQJXDJHV KDYH EHHQ LQYHQWHG 3DJDQ
 7KHVH IRUPDOLVPV DOORZ IRU D PDWKHPDWLFDO
VHPDQWLF GHVFULSWLRQ ZKLFK DV D FRQVHTXHQFH LV H[DFW
XQDPELJXRXV DQG HDVLHU WR YHULI\ 2QH RI WKH PRVW
ZLGHO\ XVHG IRUPDOLVPV IRU VSHFLI\LQJ VHPDQWLFV LV
FDOOHG 1DWXUDO 6HPDQWLFV .DKQ  $ FRPSXWHU
SURFHVVDEOH 1DWXUDO 6HPDQWLF VSHFLILFDWLRQ ODQJXDJH
FDOOHG 50/ IRU 5HODWLRQDO 0HWD /DQJXDJH ZLWK D
FRPSLOHU JHQHUDWLRQ WRRO UPOF 3HWWHUVVRQ  KDV
SUHYLRXVO\ EHHQ GHYHORSHG DW 3(/$% DQG LV XVHG IRU
WKHIRUPDOVSHFLILFDWLRQRI0RGHOLFDLQWKHRSHQVRXUFH
0RGHOLFDSURMHFW

The Modelica Association

Open Source ...

6SHFLILFDWLRQ
)RUPDOLVP

*HQHUDWRU 7UDQVODWLRQ
3KDVH
7RRO

5HJXODU
H[SUHVVLRQV

$17/5V

%1)
JUDPPDU

$17/5S

1DWXUDO
VHPDQWLFV
VSHFLILFDWLRQ

UPOF

5HSUHVHQWDWLRQ

7H[WVRXUFH











6FDQQHU



7RNHQ
VHTXHQFH



3DUVHU



$EVWUDFW
V\QWD[


6HPDQWLFV





6HWRIHTXDWLRQV
DQGIXQFWLRQV


&FRGHJHQ



&FRGH



)LJXUH  3KDVHV LQ JHQHUDWLQJ 0RGHOLFD FRPSLOHU
PRGXOHV IURP GLIIHUHQW NLQGV RI VSHFLILFDWLRQV 7KH
VHPDQWLFV PRGXOH SHUIRUPV HODERUDWLRQ RI WKH PRGHOV
LQFOXGLQJ W\SH FKHFNLQJ DQG H[SDQVLRQ RI FODVV
VWUXFWXUHVUHVXOWLQJLQDVHWRIHTXDWLRQVDOJRULWKPVDQG
IXQFWLRQV



1DWXUDO6HPDQWLFVDQG50/

:H KDYH SUHYLRXVO\ PHQWLRQHG WKDW D FRPSLOHU
JHQHUDWLRQ V\VWHP FDOOHG 50/ LV XVHG WR SURGXFH WKH
0RGHOLFD WUDQVODWRU LQ WKH RSHQ VRXUFH SURMHFW IURP D
1DWXUDO 6HPDQWLFV ODQJXDJH VSHFLILFDWLRQ 7KH
JHQHUDWHG WUDQVODWRU LV SURGXFHG LQ $16, & ZLWK D
SHUIRUPDQFHFRPSDUDEOHWRKDQGZULWWHQWUDQVODWRUV
%HORZ ZH JLYH D VKRUW RYHUYLHZ RI WKH 1DWXUDO
6HPDQWLFV IRUPDOLVP DQG WKH FRUUHVSRQGLQJ 50/
VSHFLILFDWLRQODQJXDJHIRUH[SUHVVLQJ1DWXUDO6HPDQWLFV
LQDFRPSXWHUSURFHVVDEOHZD\

301

Modelica 2002, March 18−19, 2002

Open Source ...

Fritzson P., Aronsson P., Bunus P., Engelson V., Saldamli L., Johansson H., Karström A.

 1DWXUDO6HPDQWLFV

7KH FRUUHVSRQGLQJ WKUHH 50/ UXOHV DUH FROOHFWHG LQ D
UHODWLRQ FDOOHG typeof ZKLFK PDSV H[SUHVVLRQV WR
W\SHV

$1DWXUDO6HPDQWLFVVSHFLILFDWLRQFRQVLVWVRIDQXPEHU
RI UXOHV VLPLODU WR LQIHUHQFH UXOHV LQ IRUPDO ORJLF $
UXOH KDV D VWUXFWXUH FRQVLVWLQJ RI FODXVHV DERYH D
KRUL]RQWDO OLQH IROORZHG E\ D FODXVH XQGHU WKH OLQH $
FODXVHVXFKDV D Ã E PHDQVDJLYHVE

UHODWLRQW\SHRI([S !7\SH

UXOHW\SHRIH !5HDO	W\SHRIH !5HDO

W\SHRI$''HH !5HDO

FÃE¾HÃ I
DÃE

UXOHW\SHRIH !,QWHJHU	W\SHRIH !,QWHJHU


W\SHRI$''HH !,QWHJHU
D[LRP
HQG

$OO FODXVHV DERYH WKH OLQH DUH SUHPLVHV DQG WKH FODXVH
EHORZ WKH OLQH LV WKH FRQVHTXHQFH 7R SURYH WKH
FRQVHTXHQFH DOO WKH SUHPLVHV QHHG WR EH SURYHG $
VPDOO H[DPSOH RI KRZ UXOHV W\SLFDOO\ DSSHDU LV VKRZQ
EHORZ ZKHUH D UXOH VWDWLQJ WKDW WKH DGGLWLRQ RI D 5HDO
H[SUHVVLRQ ZLWK DQ ,QWHJHU H[SUHVVLRQ JLYHV D 5HDO
UHVXOW

 $6LPSOH,QWHUSUHWLYH6HPDQWLFV
$V D VLPSOH H[DPSOH RI WKH 50/ V\QWD[ ZH VKRZ D
VPDOO H[SUHVVLRQ HYDOXDWRU ZKLFK ³WUDQVODWHV´ D
PDWKHPDWLFDOH[SUHVVLRQWRWKHYDOXHRIWKHH[SUHVVLRQ
)LUVWDQH[SUHVVLRQGDWDW\SHLVGHFODUHG

W\SHRI  H Ã 5HDO ¾ W\SHRI  H Ã ,QWHJHU
HODERUDWH H + H Ã 5HDO

GDWDW\SH([S 180%(5RIUHDO
_$''RI([S([S
_08/RI([S([S

 50/

$Q H[SUHVVLRQ LV HLWKHU D QXPEHU D VXP RI WZR RWKHU
H[SUHVVLRQV RU D SURGXFW RI WZR RWKHU H[SUHVVLRQV $V
DQH[DPSOHWKHH[SUHVVLRQLVUHSUHVHQWHGDVWKHYDOXH

0RGHOLFD VHPDQWLFV LV VSHFLILHG XVLQJ WKH 50/
VSHFLILFDWLRQ ODQJXDJH 3HWWHUVVRQ   7KH
50/ODQJXDJHLVEDVHGRQ1DWXUDO6HPDQWLFVDQGXVHV
IHDWXUHV IURP ODQJXDJHV OLNH 60/ 0LOOHU HW DO 
WR DOORZ IRU VWURQJ W\SLQJ DQG GDWDW\SH FRQVWUXFWRUV
7KH 50/ VRXUFH HJ D 0RGHOLFD VSHFLILFDWLRQV LV
FRPSLOHG E\ DQ 50/ FRPSLOHU UPOF WR SURGXFH D
WUDQVODWRU IRU WKH GHVFULEHG ODQJXDJH 7KH 50/
FRPSLOHUJHQHUDWHVDQHIILFLHQW$16,&SURJUDPWKDWLV
VXEVHTXHQWO\FRPSLOHG E\ DQ RUGLQDU\ & FRPSLOHU HJ
SURGXFLQJDQH[HFXWDEOH0RGHOLFDWUDQVODWRU7KH50/
WRRO KDV DOVR EHHQ XVHG WR SURGXFH FRPSLOHUV IRU -DYD
3DVFDODQGDIHZRWKHUODQJXDJHV

08/180%(5$''180%(5180%(5

7KHQZHGHVFULEHWKHUHODWLRQ eval7KH evalUHODWLRQ
UHODWHV H[SUHVVLRQV WR WKHLU HYDOXDWHG YDOXHV VR WKDW
eval(x)=>y DOZD\V KROGV LI y LV WKH YDOXH UHVXOWLQJ
IURPWKHHYDOXDWLRQRI[
UHODWLRQHYDO
D[LRPHYDO180%(5[ ![
UXOHHYDO[ ![	HYDO\ !\	
UHDOBDGG[\ !VXP

HYDO$''[\ !VXP

 &RUUHVSRQGHQFHEHWZHHQ1DWXUDO
6HPDQWLFVDQG50/

UXOHHYDO[ ![	HYDO\ !\	
UHDOBPXO[\ !SURG

HYDO08/[\ !SURG
HQG

7KH FRUUHVSRQGHQFH EHWZHHQ 1DWXUDO 6HPDQWLFV DQG
50/LVSHUKDSVHDVLHVWWRXQGHUVWDQGXVLQJDQH[DPSOH
7KH IROORZLQJ WKUHH 1DWXUDO 6HPDQWLFV UXOHV VSHFLILHV
WKH W\SHV RI H[SUHVVLRQV FRQWDLQLQJ DGGLWLRQ RSHUDWRUV
DQGBooleanFRQVWDQWV

7KH ILUVW UXOH LV DQ D[LRP ZKLFK PHDQV WKDW WKH VHW RI
SUHPLVHV IRUWKH UXOH LV HPSW\ ,W FRXOG DOVR KDYH EHHQ
ZULWWHQDVDUXOHZLWKQRWKLQJDERYHWKHOLQH

W\SHRI  H Ã 5HDO ¾ W\SHRI  H Ã 5HDO
W\SHRI  H + H Ã 5HDO

UXOH
HYDO180%(5[ ![

W\SHRI  H Ã ,QWHJHUO ¾ W\SHRI  H Ã ,QWHJHU
W\SHRI  H + H Ã ,QWHJHU

7KH VHFRQG UXOH WHOOV KRZ WR HYDOXDWH VXPV RI WZR
H[SUHVVLRQV:KDWWKHUXOHVD\VLV³LI xHYDOXDWHVWR x2
y HYDOXDWHV WR y2 DQG WKH VXP RI x2 DQG y2 LV sum
WKHQ WKH UHVXOW RI HYDOXDWLQJ ADD(x,y) LV sum´ 7KH
UHODWLRQV real_add DQG real_mul DUH SUHGHILQHG LQ
50/

W\SHRI  )$/6(  Ã %RROHDQ

Modelica 2002, March 18−19, 2002

W\SHRI)$/6( !%RROHDQ

302

The Modelica Association

Fritzson P., Aronsson P., Bunus P., Engelson V., Saldamli L., Johansson H., Karström A.

:KHQDQ50/VSHFLILFDWLRQLVH[HFXWHGDUHODWLRQ
QDPHG main LV HYDOXDWHG DW WKH WRS OHYHO ,I RXU
SURJUDP KDV D main UHODWLRQ WKDW ORRNV OLNH WKH
IROORZLQJ WKH SURJUDP ZRXOG VLPSO\ SULQW WKH QXPEHU
DQGH[LW

 3DUVLQJDQG$EVWUDFW6\QWD[
7KH UHODWLRQ Parser.parse LV DFWXDOO\ ZULWWHQ LQ &
DQG FDOOV WKH SDUVHU JHQHUDWHG IURP D JUDPPDU E\ WKH
$17/5 SDUVHU JHQHUDWRU WRRO $17/5  7KLV
SDUVHU EXLOGV DQ DEVWUDFW V\QWD[ WUHH $67 IURP WKH
VRXUFHILOHXVLQJWKH$67GDWDW\SHVLQD50/PRGXOH
FDOOHGAbsyn7KHSDUVLQJVWDJHLVQRWUHDOO\SDUWRIWKH
VHPDQWLFGHVFULSWLRQEXWLVRIFRXUVHQHFHVVDU\WREXLOG
DUHDOWUDQVODWRU

UHODWLRQPDLQ
UXOHHYDO08/180%(5
$''180%(5
180%(5 ![	
UHDOBVWULQJ[ ![V	
SULQWFV

PDLQB
HQG

 5HZULWLQJWKH$67
7KH $67 FORVHO\ FRUUHVSRQGV WR WKH SDUVH WUHH DQG
NHHSV WKH VWUXFWXUH RI WKH VRXUFH ILOH 7KLV KDV VHYHUDO
GLVDGYDQWDJHVZKHQLWFRPHVWRWUDQVODWLQJWKHSURJUDP
DQGHVSHFLDOO\LIWKHWUDQVODWLRQUXOHVVKRXOGEHHDV\WR
UHDG IRU D KXPDQ )RU WKLV UHDVRQ D SUHSDUDWRU\
WUDQVODWLRQSDVVLVLQWURGXFHGZKLFK WUDQVODWHV WKH $67
LQWRDQLQWHUPHGLDWHIRUPFDOOHG SCode%HVLGHVVRPH
PLQRU VLPSOLILFDWLRQV WKH SCode VWUXFWXUH GLIIHUV IURP
WKH$67LQWKHIROORZLQJUHVSHFWV
 $OOYDULDEOHVDUHGHVFULEHGVHSDUDWHO\,QWKHVRXUFH
DQG LQ WKH $67 VHYHUDO YDULDEOHV LQ D FODVV
GHILQLWLRQ FDQ EH GHFODUHG DW RQFH DV LQ Real x,
y[17];  ,Q WKH 6&RGH WKLV LV UHSUHVHQWHG DV WZR
XQUHODWHG GHFODUDWLRQV DV LI LW KDG EHHQ ZULWWHQ
Realx;Realy[17];
 &ODVV GHFODUDWLRQ VHFWLRQV ,Q D 0RGHOLFD FODVV
GHFODUDWLRQ WKH SXEOLF SURWHFWHG HTXDWLRQ DQG
DOJRULWKPVHFWLRQV PD\EHLQFOXGHGLQDQ\QXPEHU
DQG LQ DQ\ RUGHU ZLWK DQ LPSOLFLW SXEOLF VHFWLRQ
ILUVW ,Q WKH SCode WKHVH VHFWLRQV DUH FROOHFWHG VR
WKDWDOOSXEOLFDQGSURWHFWHGVHFWLRQVDUHFRPELQHG
LQWR RQH VHFWLRQ ZKLOH NHHSLQJ WKH RUGHU RI WKH
HOHPHQWV 7KH LQIRUPDWLRQ DERXW ZKLFK HOHPHQWV
ZHUH LQ D SURWHFWHG VHFWLRQ LV VWRUHG ZLWK WKH
HOHPHQWLWVHOI

7KH 50/ ODQJXDJH KDV VRPH REYLRXV VLPLODULWLHV ZLWK
IXQFWLRQDO SURJUDPPLQJ ODQJXDJHV DQG ORJLF
SURJUDPPLQJODQJXDJHV:KLOHUHVROYLQJ RU ³SURYLQJ´
WKH SUHPLVHV LQ D UXOH D VLPSOH UHVROXWLRQ SURFHVV LV
FDUULHG RXW ZKLFK WULHV WR ILQG D UXOH LQ WKH UHODWLRQ
ZKLFK PDWFKHV WKH DUJXPHQWV DQG LI LW IDLOV D VLPSOH
UHWU\PHFKDQLVPLVXVHGWRILQGRWKHUSRVVLEOHVROXWLRQV
,I QRQH RI WKH UXOHV LQ D UHODWLRQ LV SRVVLEOH WR
SURYHWKHUHODWLRQIDLOVEXWWKHUHLVDOVRWKHSRVVLELOLW\
WR LQWURGXFH D UXOH WKDW H[SOLFLWO\ IDLOV E\ XVLQJ WKH
NH\ZRUGfailLQWKHFRUUHVSRQGLQJFODXVH
7KHUH DUH D IHZ RWKHU V\QWDFWLF IHDWXUHV RI 50/
WKDWVKRXOGEHNQRZQWRWKHUHDGHU,IDQDUJXPHQWLVQRW
XVHGLQDUXOHLWFDQEHZULWWHQDVDQXQGHUVFRUHZKLFK
PHDQV WKDW LW PDWFKHV DQ\WKLQJ EXW LV QRW XVHG ,I D
UHODWLRQ KDV WKH ULJKWKDQG VLGH UHVXOW W\SH () LW FDQ
EH RPLWWHG WRJHWKHU ZLWK WKH => V\PERO 7KH main
UHODWLRQ DERYH VKRZV DQ H[DPSOH RI ERWK RI WKHVH
IHDWXUHV



7KH)RUPDO6SHFLILFDWLRQRI
0RGHOLFD

7KHVSHFLILFDWLRQLVVHSDUDWHGLQWRDQXPEHURIPRGXOHV
WR VHSDUDWH GLIIHUHQW VWDJHV RI WKH WUDQVODWLRQ DQG WR
PDNH LW PRUH PDQDJHDEOH 7KLV VHFWLRQ ZLOO EULHIO\
FRYHU VRPH RI WKH PRVW LPSRUWDQW SDUWV RI WKH
VSHFLILFDWLRQ ,Q DOO WKH VSHFLILFDWLRQ FRQWDLQV VHYHUDO
WKRXVDQG OLQHV RI 50/ EXW LW VKRXOG EH NHSW LQ PLQG
WKDWWKH50/FRGHLVUDWKHUVSDUVHZLWKPDQ\HPSW\RU
VKRUWOLQHV
7KH WRS OHYHO UHODWLRQ LQ WKH VHPDQWLFV LV FDOOHG
mainDQGDSSHDUVDVIROORZV

2QHPLJKWKDYHWKRXJKWWKDWPRUHZRUNFRXOGEHGRQH
DW WKLV VWDJH OLNH DQDO\]LQJ H[SUHVVLRQ W\SHV DQG
UHVROYLQJQDPHV%XWGXHWRWKHQDWXUHRIWKH0RGHOLFD
ODQJXDJHWKHRQO\ZD\WRNQRZDQ\WKLQJDERXWKRZWKH
QDPHV ZLOO EH UHVROYHG GXULQJ HODERUDWLRQ LV WR GR D
PRUHRUOHVVIXOOHODERUDWLRQ,WLVSRVVLEOHWRDQDO\]HD
FODVV GHFODUDWLRQ DQG ILQG RXW ZKDW WKH SDUWV RI WKH
GHFODUDWLRQZRXOGPHDQLIWKHFODVVZDVWREHHODERUDWHG
DVLVEXWVLQFHLWLVSRVVLEOHWRPRGLI\PXFKRIWKHFODVV
ZKLOHHODERUDWLQJLWWKDWDQDO\VLVZRXOGQRWEHRIPXFK
XVH

UHODWLRQPDLQ

UXOH3DUVHUSDUVHI !S	
6&RGHHODERUDWHS !S	
,QVWHODERUDWHS !G	
'$(GXPSG	

PDLQ>I@
HQG

The Modelica Association

Open Source ...

 (ODERUDWLRQDQG,QVWDQWLDWLRQ




303

7R EH H[HFXWHG FODVVHV LQ D  PRGHO QHHG WR EH
LQVWDQWLDWHG LH GDWD REMHFWV DUH FUHDWHG DFFRUGLQJ
WR WKH FODVV GHFODUDWLRQ 7KHUH DUH WZR SKDVHV RI
LQVWDQWLDWLRQ
7KH V\PEROLF RU FRPSLOH WLPH SKDVH RI
LQVWDQWLDWLRQ LV XVXDOO\ FDOOHG HODERUDWLRQ 1R GDWD
REMHFWV DUH FUHDWHG GXULQJ WKLV SKDVH ,QVWHDG WKH

Modelica 2002, March 18−19, 2002

Open Source ...



Fritzson P., Aronsson P., Bunus P., Engelson V., Saldamli L., Johansson H., Karström A.

V\PEROLFLQWHUQDOUHSUHVHQWDWLRQRIWKHPRGHOWREH
H[HFXWHGVLPXODWHG LV WUDQVIRUPHG E\ SHUIRUPLQJ
LQKHULWDQFH RSHUDWLRQV PRGLILFDWLRQ RSHUDWLRQV
DJJUHJDWLRQRSHUDWLRQVHWF
7KH FUHDWLRQ RI WKH GDWD REMHFW XVXDOO\ FDOOHG
LQVWDQWLDWLRQ
LQ
RUGLQDU\
REMHFWRULHQWHG
WHUPLQRORJ\ 7KLV FDQ EH GRQH HLWKHU DW FRPSLOH
WLPHRUDWUXQWLPHGHSHQGLQJRQWKHFLUFXPVWDQFHV
DQGFKRLFHRILPSOHPHQWDWLRQ

,Q WKH H[DPSOH DERYH HODERUDWLQJ WKH PRGHO M PHDQV
HODERUDWLQJ LWV VXEFRPSRQHQW I ZKLFK LV RI W\SH Foo
:KLOH HODERUDWLQJ f WKH FXUUHQW HQYLURQPHQW LV WKH
SDUHQWHQYLURQPHQWZKLFKLQFOXGHVWKHFRQVWDQW c7KH
FXUUHQWVHWRIPRGLILFDWLRQVLVp = 17ZKLFKPHDQV
WKDW WKH SDUDPHWHU p LQ WKH FRPSRQHQW f ZLOO EH 
UDWKHUWKDQ
7KHUH DUH PDQ\ VHPDQWLF UXOHV WKDW WDNHV FDUH RI
WKLV EXW RQO\ D IHZ DUH VKRZQ EHORZ 7KH\ DUH DOVR
VRPHZKDWVLPSOLILHGWRIRFXVRQWKHFHQWUDODVSHFWV

7KHFHQWUDOSDUWRI WKH WUDQVODWLRQ LV WKH HODERUDWLRQ RI
WKHPRGHO7KHFRQYHQWLRQLVWKDWWKHODVW PRGHOLQWKH
VRXUFHILOHLVHODERUDWHGZKLFKPHDQVWKDWWKHHTXDWLRQV
LQWKDWPRGHOGHFODUDWLRQDQGDOOLWVVXEFRPSRQHQWVDUH
FRPSXWHGDQGFROOHFWHG
7KHHODERUDWLRQRIDFODVVLVGRQHE\ORRNLQJDWWKH
FODVV GHILQLWLRQ HODERUDWLQJ DOO VXEFRPSRQHQWV DQG
FROOHFWLQJ DOO HTXDWLRQV IXQFWLRQV DQG DOJRULWKPV 7R
DFFRPSOLVKWKLVWKHWUDQVODWRUQHHGVWRNHHSWUDFNRIWKH
FODVVFRQWH[W7KHFRQWH[WLQFOXGHVWKHOH[LFDOVFRSHRI
WKH FODVV GHILQLWLRQ 7KLV FRQVWLWXWHV WKH HQYLURQPHQW
ZKLFK LQFOXGHV WKH YDULDEOHV DQG FODVVHV GHFODUHG
SUHYLRXVO\LQWKHVDPHVFRSHDVWKHFXUUHQWFODVVDQGLWV
SDUHQW VFRSH DQG DOO HQFORVLQJ VFRSHV 7KH RWKHU SDUW
RI WKH FRQWH[W LV WKH FXUUHQW VHW RI PRGLILHUV ZKLFK
PRGLI\ WKLQJV OLNH SDUDPHWHU YDOXHV RU UHGHFODUH
VXEFRPSRQHQWV
PRGHO0
FRQVWDQW5HDOF 
PRGHO)RR
SDUDPHWHU5HDOS 
5HDO[
HTXDWLRQ
[ SVLQWLPHF
HQG)RR

 7KHHODEBFODVVDQG
HODEBHOHPHQW5HODWLRQV
7KH UHODWLRQ elab_class HODERUDWHV D FODVV ,W WDNHV
ILYH DUJXPHQWV WKH HQYLURQPHQW env WKH VHW RI PRG
LILFDWLRQV modWKHSUHIL[ preZKLFKLV XVHGWREXLOGD
JOREDOO\XQLTXHQDPHRIWKHFRPSRQHQWLQDKLHUDUFKLFDO
IDVKLRQDFROOHFWLRQRIFRQQHFWLRQVHWV csetsDQGWKH
FODVV GHILQLWLRQ c ,W RSHQV D QHZ VFRSH LQ WKH
HQYLURQPHQW ZKHUH DOO WKH QDPHV LQ WKLV FODVV ZLOO EH
VWRUHGDQGWKHQXVHVDUHODWLRQFDOOHGelab_class_in
WR GR PRVW RI WKH ZRUN )LQDOO\ LW JHQHUDWHV HTXDWLRQV
IURPWKHFRQQHFWLRQVHWVFROOHFWHGZKLOHHODERUDWLQJWKLV
FODVV 7KH ³UHVXOW´ RI WKH UHODWLRQ DUH WKH HODERUDWHG
HTXDWLRQV DQG VRPH LQIRUPDWLRQ DERXW ZKDW ZDV LQ WKH
FODVV,QWKHFDVHRIDIXQFWLRQUHJDUGHGDVDUHVWULFWHG
FODVVWKHUHVXOWLVDQDOJRULWKPVHFWLRQ
2QH RI WKH PRVW LPSRUWDQW UHODWLRQV LV
elab_elementWKDWHODERUDWHVDQ HOHPHQW RI D FODVV
$QHOHPHQWFDQW\SLFDOO\EHDFODVVGHILQLWLRQDYDULDEOH
RU FRQVWDQW GHFODUDWLRQ RU DQ H[WHQGV FODXVH %HORZ LV
VKRZQRQO\WKHUXOHIRUHODERUDWLQJYDULDEOHGHFODUDWLRQV

)RRIS 
HQG0
UHODWLRQHODEBFODVV(QY0RG3UHIL[&RQQHFW6HWV6FRGH&ODVV !
'$((OHPHQWOLVW&RQQHFW6HWV7\SHV7\SH
UXOH(QYRSHQBVFRSHHQY !HQY¶	
HODEBFODVVBLQHQY¶PRGSUHFVHWVF !GDHBFVHWV¶FLBVWDWH¶W\V	
&RQQHFWHTXDWLRQVFVHWV¶ !GDH	OLVWBDSSHQGGDHGDH !GDH	
PNW\SHFLBVWDWH¶W\V !W\


HODEBFODVVHQYPRGSUHFVHWVFDV6&RGH&/$66QBUB !GDH>@W\
HQG

Modelica 2002, March 18−19, 2002

304

The Modelica Association

Fritzson P., Aronsson P., Bunus P., Engelson V., Saldamli L., Johansson H., Karström A.

Open Source ...

UHODWLRQHODEBHOHPHQW(QY0RG3UHIL[&RQQHFW6HWV6FRGH(OHPHQW !
'$((OHPHQWOLVW(QY&RQQHFW6HWV7\SHV9DUOLVW

UXOH3UHIL[SUHIL[BFUHISUH([S&5()B,'(17Q>@ !YQ	
/RRNXSORRNXSBFODVVHQYW !FOFODVVPRG	)LQGWKHFODVVGHILQLWLRQ
0RGORRNXSBPRGLILFDWLRQPRGVQ !PP	
0RGPHUJHFODVVPRGPP !PRG	 
0HUJHWKHPRGLILFDWLRQV
0RGPHUJHPRGP !PRG¶	
3UHIL[SUHIL[BDGGQ>@SUH !SUH¶	
([WHQGWKHSUHIL[
HODEBFODVVHQYPRG¶SUH¶FVHWVFO
 (ODERUDWHWKHYDULDEOH
 !GDHFVHWV¶W\VW	
0RGPRGBHTXDWLRQPRG¶ !HT	 ,IWKHYDULDEOHLVGHFODUHGZLWKDGHIDXOWHTXDWLRQ
PDNHBELQGLQJHQYDWWUHTFODGGLWWRWKHHQYLURQPHQWZLWKWKHYDULDEOH
 !ELQGLQJ	
$GGWKHYDULDEOHELQGLQJWRWKHHQYLURQPHQW
(QYH[WHQGBIUDPHBYHQY
(QY)5$0(9$5QDWWUW\ELQGLQJ
 !HQY¶	
HODEBPRGBHTXDWLRQHQYSUHQPRG¶
)HWFKWKHHTXDWLRQLIVXSSOLHG
 !GDH	
OLVWBDSSHQGGDHGDH !GDH

&RQFDWHQDWHWKHHTXDWLRQOLVWV

HODEBHOHPHQWHQYPRGVSUHFVHWV
6&RGH&20321(17QILQDOSURWDWWUWP
 !GDHHQY¶FVHWV¶>QDWWUW\@

HQG

 2XWSXW



7KH HTXDWLRQV IXQFWLRQV DQG YDULDEOHV IRXQG GXULQJ
HODERUDWLRQ DUH FROOHFWHG LQ D OLVW RI REMHFWV RI W\SH
DAEcomp:
GDWDW\SH'$(FRPS 9$5RI
([S&RPSRQHQW5HI9DU.LQG
_(48$7,21RI([S([S


:HKDYHGHYHORSHGWKHILUVWYHUVLRQRIDQRSHQVRXUFH
0RGHOLFD HQYLURQPHQW WR D ODUJH H[WHQW EDVHG RQ D
0RGHOLFD FRPSLOHU DXWRPDWLFDOO\ JHQHUDWHG IURP D
IRUPDO 1DWXUDO 6HPDQWLFV VSHFLILFDWLRQ RI 0RGHOLFD
7KLV IRUPDO VSHFLILFDWLRQ LV LQWHQGHG WR EHFRPH D
UHIHUHQFH VSHFLILFDWLRQ IRU UHVHDUFK SXUSRVHV DQG IRU
IXWXUH0RGHOLFDLPSOHPHQWHUV
$QLPSRUWDQWVKRUWWHUPJRDOIRUWKLVRSHQVRXUFH
SURMHFW LV WR SURYLGH DQ LQWHUDFWLYH DQG HIILFLHQW
FRPSXWDWLRQDO HQYLURQPHQW IRU XVLQJ 0RGHOLFD DV D
KLJK OHYHO VWURQJO\ W\SHG SURJUDPPLQJ ODQJXDJH IRU
FRPSXWDWLRQDODSSOLFDWLRQV
,QWKHORQJHUWHUPSHUVSHFWLYHZHH[SHFWWRH[WHQG
WKHV\VWHPWRDOVRSURYLGHVLPXODWLRQRIHTXDWLRQEDVHG
PRGHOVLQ0RGHOLFDKRZHYHUZLWKORZHU SHUIRUPDQFH
DQG KDQGOLQJ PRGHOV RI OHVV FRPSOH[LW\ WKDQ ZKDW LV
FXUUHQWO\PDQDJHGE\FRPPHUFLDOLPSOHPHQWDWLRQVXFK
DV'\PRODDQG0DWK0RGHOLFD

$VWKHILQDOVWDJHRIWUDQVODWLRQLQWKHFXUUHQWYHUVLRQ
RI WKH WUDQVODWRU IXQFWLRQV DQG H[SUHVVLRQV LQ WKLV OLVW
DUHFRQYHUWHGWR&FRGH



$6PDOO%HQFKPDUN

:H KDYH HYDOXDWHG WKH FXUUHQW LPSOHPHQWDWLRQ RI WKH
RSHQVRXUFH0RGHOLFDFRPSLOHURQDVPDOOEHQFKPDUN
FRQVLVWLQJ RI VROYLQJ D VLPSOH[ RSWLPL]DWLRQ SUREOHP
FRQVLVWLQJ RI  YDULDEOHV DQG  FRQGLWLRQV 7KH
PHDVXUHG H[HFXWLRQ WLPH ZDV DYHUDJHG RYHU 
H[HFXWLRQV RQ D 6XQ 8OWUD6SDUFVWDWLRQ  7KH
0RGHOLFDFRGHRIWKHVLPSOH[DOJRULWKPLVDYDLODEOHLQ
$SSHQGL[$:HIRXQGWKDWWKHH[HFXWLRQWLPHIRUWKH
0RGHOLFD FRGH ZDV D IDFWRU RI  VORZHU WKDQ
KDQGZULWWHQ & FRGH IRU WKH VDPH DOJRULWKP 7KLV LV D
SUHOLPLQDU\ UHVXOW REWDLQHG DW WKH WLPH RI ZULWLQJ WKLV
SDSHUDQGZHH[SHFWWREHDEOHWRJHWHYHQFORVHUWR&
FRGH H[HFXWLRQ SHUIRUPDQFH E\ WXQLQJ WKH
LPSOHPHQWDWLRQ

The Modelica Association

305

&RQFOXVLRQV

Modelica 2002, March 18−19, 2002

Open Source ...

Fritzson P., Aronsson P., Bunus P., Engelson V., Saldamli L., Johansson H., Karström A.

S S
HQGZKLOH
IRULLQS1ORRS
LID>LT@!WKHQ
LID>L0@D>LT@
D>S0@D>ST@WKHQ
S L
HQGLI
HQGLI
HQGIRU
LIT0DQGS1WKHQ
D SLYRWDST
HQGLI
HQGZKLOH
IRULLQ0ORRS
[>L@ 
IRUMLQ1ORRS
LI[>L@DQGD>ML@!
DQGD>ML@ WKHQ
[>L@ D>M0@
HOVHLID>ML@RUD>ML@!
WKHQ
[>L@ 
HQGLI
HQGIRU
HQGIRU
] D>0@
HQGVLPSOH[

$SSHQGL[±7KH6LPSOH[
$OJRULWKP
IXQFWLRQSLYRW
LQSXW5HDOE>@
LQSXW,QWHJHUS
LQSXW,QWHJHUT
RXWSXW5HDOD>VL]HEVL]HE@
SURWHFWHG
,QWHJHU0
,QWHJHU1
DOJRULWKP
D E
1 VL]HD
0 VL]HD
IRUMLQ1ORRS
IRUNLQ0ORRS
LIM!SDQGN!TWKHQ
D>MN@ D>MN@
D>SN@D>MT@D>ST@
HQGLI
HQGIRU
HQGIRU
IRUMLQ1ORRS
LIM!SWKHQ
D>MT@ 
HQGLI
HQGIRU
IRUNLQ0ORRS
LIN!TWKHQ

5HIHUHQFHV
Abadi Martin and Cardelli Luca. A Theory of Objects.
Springer Verlag, ISBN 0-387-94775-2, 1996.

D>SN@ D>SN@D>ST@
HQGLI
HQGIRU
D>ST@ 
HQGSLYRW

Elmqvist Hilding, Dag Brück, and Martin Otter, Dymola User’s Manual. Dynasim AB, Research Park Ideon, Lund,
Sweden, 1996
Kågedal, D., Fritzson, P. Generating a Modelica Compiler
from Natural Semantics Specifications. Summer Computer
Simulation Conference '98, Reno, Nevada, USA, July 19-22,
1998.

IXQFWLRQVLPSOH[
LQSXW5HDOPDWU>@
RXWSXW5HDO[>VL]HPDWU@
RXWSXW5HDO]
RXWSXW,QWHJHUT
RXWSXW,QWHJHUS
SURWHFWHG
5HDOD>VL]HPDWUVL]HPDWU@
,QWHJHU0
,QWHJHU1
DOJRULWKP
1 VL]HD
0 VL]HD
D PDWU
S T 
ZKLOHQRWT 0RUS 1ORRS
T 
ZKLOHQRWT 0RU
D>T@ORRS
T T
HQGZKLOH
S 
ZKLOHQRWS 1RU
D>ST@!ORRS

Modelica 2002, March 18−19, 2002

Modelica Home Page http://www.Modelica.org
Dymola Home Page: http://www.Dynasim.se
MathModelica Home Page: http://www.MathCore.com
Mikael Pettersson. Compiling Natural Semantics, Linköping
Studies in Science and Technology. Dissertation No. 413,
1995.
Mikael Pettersson. Compiling Natural Semantics. LNCS
1549, Springer-Verlag, 1999.
Miller Robin, Tofte Mads, Harper Robert. Commentary on
Standard ML. The MIT Press, 1991.
ANTLR home page: http://www.ANTLR.org/
Frank Pagan. Formal Specification of Programming Languages: A Panoramic Primer, Prentice-Hall, ISBN 0-13329052-2, 1981.
Gilles Kahn. Natural Semantics. In Proc. of the Symposium
on Theoretical Aspects on Computer Science, STACS'87,
LNCS 247, pp 22-39. Springer-Verlag, 1987.

306

The Modelica Association

Saldamli L., Fritzson P., Bachmann B.

Extending Modelica for Partial Differential Equations

Extending Modelica for Partial Diﬀerential Equations
Levon Saldamli∗ , Peter Fritzson∗ and Bernhard Bachmann†

Abstract
Currently, Modelica only supports models containing constants, time-dependent variables, and
time-derivatives of variables, i.e. ordinary diﬀerential and algebraic equations. In this article, we
present how the Modelica language can be extended to support object-oriented modeling with
partial diﬀerential equations (PDEs), in order to
solve initial and boundary value problems. The
techniques we present have fairly general applicability to 1D, 2D or 3D domains, although we focus
mostly on 2D domains in this paper. We also describe the architecture of a prototype implementation where the PDE problem is translated and
passed to an external mesh generator and a PDE
solver for solution using the ﬁnite element method.
An example of a stationary heat conduction problem is included together with execution results.

1

Introduction

The modeling language Modelica [4, 5, 7, 10] is
currently used for modeling and simulation of systems with ordinary diﬀerential equations containing time-dependent variables and derivatives of
such variables with respect to time. It is desirable to also specify models where variables vary
with position in space and where partial diﬀerential equations (PDEs) occur. Therefore, there is a
need to extend Modelica to support such models.
A PDE problem is solved in order to ﬁnd an
unknown, spatially distributed function u, that is
implicitly deﬁned by a partial diﬀerential equation. For a unique solution boundary conditions
at the boundary of the geometric region of the
problem is needed, and also the initial conditions
if the problem is time-dependent. There can be
∗

Department of Computer and Information Science, Linköpings universitet, Linköping, Sweden.
{levsa,petfr}@ida.liu.se
†
Fachbereich Mathematik und Technik, Fachhochschule
Bielefeld, Bielefeld, Germany.
bernhard.bachmann@fhbielefeld.de

The Modelica Association

307

diﬀerent boundary conditions for diﬀerent parts
of the boundary, and the conditions can be known
values of the unknown function or its derivatives.
Initial conditions can consist of values of the unknown function or its derivatives.
Modelica is an object-oriented language, supporting inheritance and component-based modeling. Extensions to support PDEs should be done
with these concepts in mind in order for a PDE
problem to be speciﬁed in a convenient way similar to other models written in Modelica. Previously, some basic extensions needed in Modelica
were presented [14]. The domains were described
by deﬁning the limits of the space variables using
constants or expressions containing other space
variables in order to allow fairly general domains.
In this paper, we support a more convenient domain deﬁnition, using parametric expressions for
describing the boundary of the domain. We also
describe how a problem can be speciﬁed with the
PDE, the boundary conditions, the domain and
its boundary deﬁned as components.
This paper is organized as follows: Section 2
contains an overview of related work, Section 3
presents the problem speciﬁcation and new language syntax, Section 4 describes the implementation environments, Section 5 illustrates an example problem and its solution, and Section 6 contains some conclusions and future work.

2

Related Work

There are diﬀerent categories of packages for solving PDEs. Some of them are code libraries, where
the PDE is not separately speciﬁed but a numerical solver is written using a programming language
and components from these libraries in order to
solve the speciﬁc PDE problem. PETSc [2], Diﬀpack [3] and Overture [12] are some packages in
this category. Compose [17] is a similar package,
written as a framework built upon Overture, with
an object-oriented design that separates the equation deﬁnitions and numerical solver implemen-

Modelica 2002, March 18−19, 2002

Extending Modelica for Partial Differential Equations

Saldamli L., Fritzson P., Bachmann B.

tation. Equations in Compose are deﬁned using
the C++ classes in the framework or by adding
new classes to deﬁne new equations and numerical solvers.
There are also problem solving environments,
that contain integrated tools for the diﬀerent steps
of the modeling and simulation process, such as
graphical tools for deﬁning the domain, tools for
specifying or selecting a numerical solver among
several solvers, and tools for visualization of the
simulation results. PELLPACK [9] is such a
problem solving environment that contains several PDE solvers and has a high level language for
the PDE problem deﬁnition. FEMLAB [6] which
is a package for MATLAB, is another simulation
tool, with graphical user interface where the user
can choose a model among many predeﬁned PDE
models, modify its parameters, graphically deﬁne
the problem domain and assign boundary conditions, simulate the model and visualize the results.
An environment that is more language oriented,
analogous to Modelica, is gPROMS [11]. This environment has a high level language for specifying PDE models on rectangular domains, where
complex partial diﬀerential and algebraic equations and mixed systems of integral, partial and
ordinary diﬀerential and algebraic equations can
be solved.
The approach taken in our present work to extend Modelica with PDEs, called PDE-Modelica,
combines the usage of a high level language,
object-oriented and component-based modeling,
and the possibility to use diﬀerent solvers and automatic solver generation for a given PDE problem.

3

Domain and PDE deﬁnition

ary of the region, which is a suﬃciently general
way of stating the geometry of the domain. The
curve should be closed and non self-intersecting
for the parameter range speciﬁed. In the twodimensional case, the XY-plane is divided into two
regions by the curve, with the intended domain
being the region at the left side of the curve.
The boundary deﬁned in this way is used to
generate a mesh for the numerical PDE solver. An
external mesh generator is used to generate the
mesh.
From the boundary deﬁnition, an external mesh
generator is called to generate a triangular mesh
which is passed to the numerical solver.
A domain class is deﬁned by introducing a new
kind of restricted class in Modelica called domain, where the independent space variables to
be used are declared using the space keyword,
and the boundary is described in a special section called boundary. The boundary section can
contain three diﬀerent constructs that deﬁne the
boundary: lines(), curve() or composite(),
described in the following sections.

3.1.1

The lines() Boundary Construct

In case of single lines or a number of connected
lines, a special construct lines() is used, for efﬁciency reasons. A line segment is deﬁned as follows:
domain Line2D "A line segment"
extends Cartesian2D;
parameter Real x0=0, y0=0, x1=1, y1=1;
boundary
lines({{x0,y0},{x1,y1}});
end Line2D;

In this section, we describe how to deﬁne the probThe lines() construct contains an expression
lem domain using lines and parametric curves. which is an array of points, deﬁning the starting
Also, a hierarchical PDE model deﬁnition using point, the intermediate points and the end point
coeﬃcient-based PDEs similar to FEMLAB’s co- of the connected lines (see Figure 1).
eﬃcient form is described.
(x0 , y0 )
(xn , yn )
3.1 Domain Description
(xn−1 , yn−1 )
(x1 , y1 ) (x2 , y2 )
The domain of the PDE problem is D ⊂ Rn .
In this paper we consider the two-dimensional
case, n = 2. In most practical cases it is suﬃ- Figure 1: Connected lines that is described by the
cient to deﬁne the domain by a parametric curve construct lines({{x0,y0},{x1,y1},...,{xn,yn}})
{(xs , ys ) | s ∈ [sstart , send ]} describing the bound-

Modelica 2002, March 18−19, 2002

308

The Modelica Association

Saldamli L., Fritzson P., Bachmann B.

3.1.2

Extending Modelica for Partial Differential Equations

The curve() Boundary Construct

There are several alternative ways to specify the
parametric expression that deﬁnes the boundary
as a curve. Using the where...in... construct
which already has been used to specify domains
for expressions [14], the curve can be deﬁned as
follows:
domain Cartesian2D "For all 2D-domains"
space Real x,y;
end Cartesian2D;
domain Circle2D "Circular with r=1"
extends Cartesian2D;
boundary
curve(cos(2*PI*u),
sin(2*PI*u)) where u in (0,1);
end Circle2D;

The boundary of this domain is deﬁned by the
curve generated by varying the value of the temporary variable u from 0 to 1. The comma-separated
list of expressions in the curve()-construct are
used to calculate the Cartesian coordinates of the
points on the curve. In order for the curve to
be closed, the resulting points in the XY-plane at
u = 0 and u = 1 should have the same coordinates. Other requirements might be needed for
the curve depending on the mesh generator used
by the numerical solution stage.
3.1.3

The composite() Boundary Construct

In many cases, the boundary of the problem domain is diﬃcult to deﬁne as a single parametric
curve, but is rather deﬁned by a number of connected lines and curves. Also, the boundary conditions for the PDE problem are often diﬀerent on
diﬀerent parts of the boundary. Therefore, when
the boundary curve is speciﬁed, there must be a
way to refer to diﬀerent parts of the curve when
assigning boundary conditions. One solution to
these problems is to have a boundary description
that consists of several components, each of which
are curves. The boundary components can be declared in the declaration part of the domain description. For example, a rectangular boundary
can be deﬁned using four line segments right,
top, bottom, and left (see Figure 2). These parts
of the boundary can be instantiated in the declaration part of the domain class Rectangle2D as
follows:

The Modelica Association

309

domain Rectangle2D "A 6 by 4 rectangle"
extends Cartesian2D;
parameter Real cx=0, cy=0, w=3, h=2;
Line2D right(x0=cx+w, y0=cy-h,
x1=cx+w ,y1=cy+h);
Line2D top(x0=cx+w, y0=cy+h,
x1=cx-w, y1=cy+h);
Line2D left(x0=cx-w, y0=cy+h,
x1=cx-w, y1=cy-h);
Line2D bottom(x0=cx-w, y0=cy-h,
x1=cx+w, y1=cy-h);
boundary
composite(right, top, left, bottom);
end Rectangle2D;

The domain Rectangle2D can be seen in Figure 2. The composite operator is used to combine
several curve segments into a complete boundary.
The setting of the start and end points of the line
segments and the order of the arguments to the
composite operator must be consistent, and the
direction of the resulting curve must be correct in
order that the correct region is deﬁned. Some of
these requirements can be automatically fulﬁlled
if the composite operator is allowed to translate
each given curve segment so that the starting point
of that curve matches the end point of the previous curve segment.
Although both Line2D and Rectangle2D are deﬁned as domains, they represent diﬀerent kinds of
objects. The Line2D domain is not intended to be
used as a domain by itself, but rather as a boundary component of another domain. This diﬀerence
could be expressed in the deﬁnition by for example using the partial keyword in the deﬁnition of
Line2D:
partial domain Line2D
"Defines a part of a boundary"
...

Another alternative is to use a diﬀerent keyword
than domain for classes that represent only parts
of a boundary.
top
h
left

w
cx,cy

right

bottom

Figure 2: A rectangular domain Rectangle2D, deﬁned using line segments. Note that the direction of
the lines must be consistent.

Modelica 2002, March 18−19, 2002

Extending Modelica for Partial Differential Equations

3.2

Saldamli L., Fritzson P., Bachmann B.

Hierarchical Deﬁnition of PDEs perfect conductor nor a perfect insulator, can be
written by ﬁrst writing a general Robin boundary
and Boundary Conditions

condition:
In order to simplify PDE model deﬁnition, a genmodel Robin "Robin boundary condition"
eral PDE model can be written as a base model
extends PDE2D;
in PDE-Modelica with the coeﬃcients as paramparameter Real c = 1;
parameter Real q = 1;
eters. This model can either be instantiated diparameter Real g = 0;
rectly with appropriate modiﬁcations to the paequation
rameters or used as a base class to deﬁne a more
nder((c*grad(u))) + q*u = g;
speciﬁc PDE model with some parameters set
end Robin;
which subsequently can be instantiated and used
In mathematical notation, this equation is writwhen needed. Similarly, boundary conditions can
be deﬁned using base models and inheritance. A ten as follows:
coeﬃcient-based PDE base model can be deﬁned
∂
(c∇u) + qu = g
as follows:
∂n

The operator nder() is a special operator that
represents the derivative in the outward normal
direction with respect to the associated domain
boundary.
Other types of boundary conditions, e.g. Dirichlet and Neumann conditions, describing a perfect
heat conductor and a perfect insulator, respectively, can be deﬁned by extending the Robin class
and setting the appropriate parameters to zero, as
follows:

model PDE2D
space Real x,y;
Real u(x,y);
end PDE2D;
model PDECoeff2D
extends PDE2D;
parameter Real da = 0;
parameter Real c = 0;
parameter Real a = 0;
parameter Real f = 0;
equation
da*der(u) - div(c*grad(u)) + a*u = f;
end PDECoeff2D;

The variable u represents the unknown variable,
a function of time and the space variables. All parameters can be constants or functions of the space
variables. However, in this example, the coeﬃcients da, c, a and f are restricted to be constants
only, for clarity. The der operator is an operator
in Modelica and deﬁnes the ﬁrst time-derivative of
a variable. The div and grad operators can be additional operators in PDE-Modelica corresponding
to the partial diﬀerential operators divergence
and gradient that are often used in mathematical literature. The equation above written with
mathematical notation follows:
da

∂u
− ∇ · (c∇u) + au = f
∂t

Using PDECoeff2D as the base model, a simple,
steady-state heat transfer model can now be written as:
model HeatTransfer
extends PDECoeff2D(c=1);
end HeatTransfer;

model Neumann
extends Robin(q=0);
end Neumann;
model Dirichlet
extends Robin(c=0);
end Dirichlet;

For heat transfer problems, a more speciﬁc version of the Robin boundary condition can be deﬁned by inheriting the Robin class and adding application speciﬁc parameters and mapping them
to the general parameters:
model HeatRobin "For heat transfer"
extends Robin(c=k,
q=hh,
g = qh+hh*Tinf);
parameter Real k=1;
parameter Real qh=0;
parameter Real hh=1;
parameter Real Tinf=25;
end HeatRobin;

The corresponding mathematical equation with
these parameters is as follows:
∂
(k∇u) = qh + hh(Tinf − u)
∂n

A Robin boundary condition, used in a heat where qh is the source term, hh is the heat transfer
problem to describe a boundary that is neither a coeﬃcient and Tinf is the external temperature.

Modelica 2002, March 18−19, 2002

310

The Modelica Association

Saldamli L., Fritzson P., Bachmann B.

3.3

Extending Modelica for Partial Differential Equations

Problem deﬁnition

4.1

Once the models for the PDE and the boundary
conditions are stated and the domain is deﬁned,
the problem can be put together by instantiating the PDE model, the boundary conditions, and
the domain and associating the boundary conditions with the boundary parts. In order to associate boundary conditions and boundary elements,
an implicit variable bc (short for boundary condition) is introduced in the restricted class domain.
For each domain instance this variable is assigned
the desired boundary condition. Similarly, a PDE
is associated with a domain by instantiating the
PDE model and assigning the instance to the variable eq (short for equation), also a builtin variable
in the restricted class domain. The complete problem statement is then:

Example

A stationary heat conduction problem is considered. The problem is described by Poisson’s equation:
−∇ · (c∇u) = g
where c is the heat conductivity coeﬃcient, and g
is the source term. In this example, c is set to 1
and g is set to 0.

top

left
model PDEModel
Neumann h_iso;
Dirichlet h_heated(g=50);
HeatRobin h_glass(hh=30000);
HeatTransfer ht;
Rectangle2D dom;
equation
dom.eq = ht;
dom.left.bc = h_glass;
dom.right.bc = h_heated;
dom.top.bc = h_iso;
dom.bottom.bc = h_iso;
end PDEModel;

bottom1

Results

The PDE extensions discussed in Section 3 were
implemented in the prototype Modelica translator generated from a Natural Semantics speciﬁcation of Modelica (see Section 4.2). A heat transfer
example is solved in the following section in order to demonstrate the PDE extensions and the
prototype. In this example, a stationary problem is solved, because the PDE solver currently
used with the prototype does not handle timedependent problems.

The Modelica Association

bottom2

bottom3

Figure 3: The problem domain with its diﬀerent
boundary sections.

Here, a Dirichlet condition with a constant value
of 50◦ for u is used to emulate a heat source on the
right side of the domain, Robin condition is used
for a non-isolating glass layer on the left side, and
Neumann condition is used for the isolated top
and bottom sides. The PDE model HeatTransfer is instantiated as ht, and used in the interior
of the domain dom, which is an instance of the
Rectangle2D class.

4

right

311

The equation is solved on the domain shown
in Figure 3. The left side of the domain is deﬁned
by a 90◦ arc, using an instance of a more general version of the domain class Circle2D deﬁned
in Section 3.1.2. The right side is deﬁned by a Beziér curve with six control points, as the instance
right of type Bezier2D deﬁned below. The PDEModelica code for deﬁning Beziér curves using De
Casteljau’s Algorithm follows:
function bezier
constant Integer n=6;
input Real px[n];
input Real u;
output Real res;
Real qx[n];
algorithm
for i in 1:n loop
qx[i] := px[i];
end for;
for k in 1:n-1 loop
for i in 1:(n-k) loop
qx[i] := (1-u)*qx[i] + u*qx[i+1];
end for;
end for;
res := qx[1];
end bezier;
domain Bezier2D
constant Integer n=6;
parameter Real px[n];
parameter Real py[n];
space Real u;

Modelica 2002, March 18−19, 2002

Extending Modelica for Partial Differential Equations

Saldamli L., Fritzson P., Bachmann B.

BoundaryCondition bc;
boundary
curve(bezier(px,u), bezier(py,u));
end Bezier2D;

The complete description of the domain for the
heat transfer example in PDE-Modelica is:
domain HeatExampleDomain
extends Domain2D;
Circle2D left(x0=-1, y0=-2, ra=4,
a=PI/2, b=PI/2);
Bezier2D right(px={1.0, 1.3, -4.0,
-4.0, 1.3, 1.0},
py={-2.0, 0.0, -3.0,
3.0, 0.0, 2.0});
Line2D top(x0=1, y0=2, x1=-1, y1=2);
Line2D bottom1(x0=-5, y0=-2,
x1=-3, y1=-2);
Line2D bottom2(x0=-3, y0=-2,
x1=-1, y1=-2);
Line2D bottom3(x0=-1, y0=-2,
x1=1, y1=-2);
boundary
composite(right, top, left,
bottom1, bottom2, bottom3);
end HeatExampledomain;

Figure 4: A stationary heat transfer example. The
middle section of the bottom border is a heat source
with u = 50◦ , the curved right border is noninsulated with outside temperature 20◦ , and the
other borders are insulated.

element solver in C++. The advantages of this
environment is the access to symbolic manipulation in Mathematica, and the MathModelica input
At the right border, the Robin boundary condi- format that is easy to extend in order to test new
tion is used, in order to model heat ﬂow through language syntax extensions.
the boundary that is proportional to the temperUser input
ature diﬀerence. The temperature outside the domain is set to 20◦ . The middle part of the bottom
Parser
PDE-Modelica
border is used as a heat source, with a Dirichlet
Mathematica
boundary condition u = 50. The other parts of
PDE-Modelica
External
the bottom border as well as the left and the top
borders are perfectly insulated, using the homogeDomain
Domain analyzer
info
neous Neumann boundary conditions.
Mesh
A plot of the solution can be seen in Figure 4.
PDE Analyzer
Generator
This example was solved using the ﬁnite element
Solver
solver rheolef [15], and bamg [1] was used as the
input
generator
mesh generator.
Equations
Solver package

4.2

Implementation

Mesh

We are working with two prototype environments
where the ideas described in Section 3 are being
tested. The prototype written in Mathematica
uses MathModelica [8] as the Modelica implementation and a numerical PDE solver generator [16]
for solving the PDEs. The diﬀerent modules of
this environment can be seen in Figure 5. Here,
the models are written in a Mathematica style
Modelica syntax, and the domain analyzer generates domain information that is sent to an external mesh generator. The PDE analyzer collects the PDEs and the boundary conditions and
calls the solver generator that generates a ﬁnite

Modelica 2002, March 18−19, 2002

312

Solver
Generator

Mesh
importer

Solver

Figure 5: The PDE-Modelica prototype in the MathModelica environment
The other prototype environment consists of
a Modelica parser, a compiler generated by the
RML [13] system from a Natural Semantics description of Modelica, an external mesh generator
and a PDE solver. The structure of this environ-

The Modelica Association

Saldamli L., Fritzson P., Bachmann B.

Extending Modelica for Partial Differential Equations

ment can be seen in Figure 6. The compiler generates C++ code from the PDE-Modelica description. The resulting code generates the discretized
boundary at runtime, calls the mesh generator to
triangulate the domain and ﬁnally calls the ﬁnite
element solver.
User input

Modeq

PDE-Modelica

Parser

Domain analyzer

for the equation parts of the PDE and boundary condition models, instead of having predeﬁned
equations. Also, modeling with both PDE models and the current Modelica models with DAEs
and the interaction between these diﬀerent kinds
of models needs to be considered. Support for
combination of domains using set operations such
as union, intersection, etc., and composition of
domains into bigger domains using connect statements with diﬀerent PDE models on each partial
domain is another possible future extension.

PDE Analyzer

References

Solver
parameter
generator

[1] BAMG home page.
http://www-rocq.
inria.fr/gamma/cdrom/www/bamg/eng.
htm.

Domain
info

Equation
info

External
Wrapper code

Solver package

Solver
Generator

Mesh
Generator

PDE Solver

[2] Satish Balay, Kris Buschelman, William D.
Gropp, Dinesh Kaushik, Lois Curfman
McInnes, and Barry F. Smith. PETSc home
page.
http://www.mcs.anl.gov/petsc/,
2001.

Mesh

Generated
Solver

[3] Diﬀpack home page. http://www.diffpack.
com/.

Figure 6: The PDE-Modelica prototype using the
Modelica translator generated from Natural Semantics speciﬁcation of Modelica in RML.
The current version of the prototype ignores the
equation parts of the PDE and boundary condition models and assumes a certain structure of
the PDE. A speciﬁc solver adapted to the problem is called automatically with the parameters
extracted from the models. This can be done because the base model approach is used when writing the PDE models, i.e. the solver needs only to
be associated with the base model, and parameters
of the base model are transferred to the solver.

5

Conclusions and Future Work

We have presented a design for specifying PDE
problem domains in Modelica by expressing the
boundary of the domain using lines and parametric curves. We have also shown a simple example
of hierarchically deﬁned PDE model and boundary
conditions and how these can be used in a problem
speciﬁcation together with a domain deﬁnition.
Our future work will consist of adding support

The Modelica Association

313

[4] H. Elmqvist, S. E. Mattsson, and M. Otter.
A language for physical system modeling, visualization and interaction. In Proceedings
of the 1999 IEEE Symposium on ComputerAided Control System Design, Hawaii, Aug.
1999.
[5] H. Elmqvist and S.E. Mattsson. Modelica –
the next generation modeling language – an
international design eﬀort. In Proceedings of
the First World Congress on System Simulation, Singapore, Sept. 1–3 1997.
[6] FEMLAB home page. http://www.femlab.
com/.
[7] P. Fritzson and V. Engelson. Modelica—A
uniﬁed object-oriented language for system
modeling and simulation. In Eric Jul, editor,
ECOOP ’98—Object-Oriented Programming,
volume 1445 of Lecture Notes in Computer
Science, pages 67–90. Springer, 1998.
[8] P. Fritzson, J. Gunnarsson, and M. Jirstrand.
MathModelica - An Extensible Modeling
and Simulation Environment with Integrated
Graphics and Literate Programming. In Proc.

Modelica 2002, March 18−19, 2002

Extending Modelica for Partial Differential Equations

Saldamli L., Fritzson P., Bachmann B.

of the 2nd International Modelica Conference, Munich, March 2002.
[9] E. N. Houstis, J. R. Rice, S. Weerawarana, A. C. Catlin, P. Papachiou, K.Y. Wang, and M. Gaitatzes. PELLPACK:
a problem-solving environment for PDEbased applications on multicomputer platforms. ACM Transactions on Mathematical
Software, 24(1):30–73, March 1998.
[10] Modelica Association. Modelica – A Uniﬁed
Object-Oriented Language for Physical Systems Modeling - Language Speciﬁcation Version 1.4, Dec 2000. http://www.modelica.
org.
[11] M. Oh. Modelling and Simulation of Combined Lumped and Distributed Processes.
PhD thesis, University of London, 1995.
[12] Overture home page.
gov/CASC/Overture/.

http://www.llnl.

[13] M. Pettersson. Compiling Natural Semantics.
volume 1549 of LNCS. Springer-Verlag, 1999.
[14] L. Saldamli and P. Fritzson. A Modelicabased Language for Object-Oriented Modeling with Partial Diﬀerential Equations. In
A. Heemink, L. Dekker, H. de Swaan Arons,
I. Smith, and T. van Stijn, editors, Proc.
of the 4th International EUROSIM Congress,
Delft, The Netherlands, June 2001.
[15] Pierre Saramito and Nicolas Roquet. Rheolef home page.
http://www-lmc.imag.
fr/lmc-edp/Pierre.Saramito/rheolef/,
2002.
[16] K. Sheshadri and P. Fritzson. A General
Symbolic PDE-Solver Generator: Explicit
Schemes. Accepted for publication in Scientiﬁc Programming, 2001.
[17] K. Åhlander. An Object-Oriented Framework
for PDE Solvers. PhD thesis, Uppsala University, 1999.

Modelica 2002, March 18−19, 2002

314

The Modelica Association

Franke R.

Formulation of dynamic optimization problems using Modelica

Formulation of dynamic optimization problems using Modelica
and their efficient solution
Rüdiger Franke
ABB Corporate Research
Wallstadter Str. 59
68526 Ladenburg, Germany
E-Mail: Ruediger.Franke@de.abb.com

Abstract
Dynamic optimization problems often arise in advanced model based control. For example in model
based predictive control and in the estimation of process parameters or not measured process signals, the
underlying problems can be treated with optimization.

fluenced so that a cost criterion is minimized subject to constraints. They are playing an increasingly
important role in control engineering and in process
engineering. Typical applications involving dynamic
optimization are e.g. nonlinear model predictive control (NMPC), data reconciliation, and integrated design and control of technical processes.

Higher requirements on the efficiency of industrial
processes, together with the availability of new modeling and solution technologies, are causing a trend
towards the treatment of dynamic optimization problems for rigorous physical models. Unfortunately a
substantial effort is generally needed to formulate an
The paper discusses, how different types of dynamic optimization model fulfilling both: high model accuoptimization problems can be formulated based on a racy and high solution efficiency.
nonlinear dynamic system model. Furthermore, the
efficient numerical solution of dynamic optimization This paper discusses the use of Modelica to formuproblems as large-scale nonlinear programming prob- late dynamic system models for optimization. A sublems is outlined. The treatment of state constraints is stantial reduction of the effort for model building is
emphasized in this context. Possibilities for obtain- achieved by reusing available simulation models for
ing model sensitivities as required by an optimization optimization and by exploiting features of Modelica
for application specific model adaptation. The solusolver are discussed.
tion of dynamic optimization problems applying largeHowever, the class of models that can be used for op- scale nonlinear programming is outlined and requiretimization in this way is limited, compared to all mod- ments of state-of-the-art optimization solvers on the
els that can be formulated in Modelica and used for model are discussed.
initial-value simulation. Specific requirements by optimization solvers are discussed together with features
of the Modelica language supporting their considera- 2 Dynamic optimization problems
tion in model formulations.
A process model formulated in Modelica [10] can be
used as a core part in the formulation of dynamic optimization problems. This allows an efficient engineering of advanced control applications as simulation
models are reused for optimization.

The optimal startup of a power plant serves as a prac- 2.1
tical example.

Nonlinear Dynamic System Model

Modelica allows the object oriented modeling of dynamic systems by differential and algebraic equations.
1 Introduction
The object oriented Modelica model is typically translated to a mathematical system of differential and alDynamic optimization problems occur if parameters gebraic equations prior to its treatment with numerical
and control inputs of a dynamic system shall be in- solvers. Here it is assumed that the result of the model

The Modelica Association

315

Modelica 2002, March 18−19, 2002

Formulation of dynamic optimization problems using Modelica

Franke R.

translation is a system of ordinary differential equa- 2.4 Optimal Control Problem
tions of the form
The control inputs ut  t  t0  t f  might be free to be
(1) chosen so that a criterion
ẋt   fxt  ut  zt  p t 
f : IRnx  IRm  IRnz  IRn p  IRnx
 tf
F0 t f  xt f  
f0 t  xt  ut  dt  min  (5)
yt   gxt  ut  zt  p t 
(2)
g : IRnx  IRm  IRnz  IRn p

 IRn

y

F0 : IR  IR

x0 ut 

t0

nx

 IR

 IRn  IR


u
Model variables are internal continuous-time states
f0 : IR  IRnx

nx
m
x  IR , control inputs u  IR , disturbance inputs
z  IRnz , constant parameters p  IRn p , and model out- is minimized subject to constraints on model inputs
puts y  IRny .
umin t  	 ut  	 umax t  and outputs ymin t  	 yt  	
The model behavior is completely determined by the ymax t  t  t0  t f .

system equations f and the output equations g, if initial
states x0  xt0 , external inputs ut  zt  t  t0  t f ,
2.5 Discrete-Time Optimal Control Problem
and parameters p are given. The outputs yt  t  t0  t f 
can then be obtained by solving the system of differ- In order to use a digital computer to solve dynamic opential equations using initial-value simulation.
timization problems, continuous-time functions have
However, often some of the required information is not to be discretized. Here multistage control parameterexplicitly known, but can be obtained by minimizing ization is applied to formulate dynamic optimization
a cost function. In many of those cases, a feasible so- problems as discrete-time optimal control problems.
lution can be further specified by constraining model
The time horizon t0  t f  is divided into K stages with
variables. Optimization is a universal tool for treating
t0  t 0  t 1      t K  t f . The controls ut  are dethose inverse problems.
scribed in each interval tk  t k1  k  0     K  1 as
function of the discrete-time input variables uk  IRm .
The unknown parameters p are converted to state vari2.2 Estimation Problem
ables with the state equation ṗ  0 and with unknown
An example for an inverse problem is the estimation of initial values p0  pt0 . They are described together
unknown parameters p and/or initial states x0 based on with the continuous-time model states xt  with the
measured inputs and outputs. The estimation problem discrete-time state variables xk  IRn  n  nx  n p . The
can be solved by minimizing a least squares criterion state equation (1) is solved for the stage k with the initial values xk and the controls uk using a numerical
nȳ
integration formula.
(3)
∑ yti   ȳti 2  min
x0 p
i1
This results in the multistage optimization problem:


for the set of measurement data ȳti  ti
1     nȳ .

2.3

 t0 t f  i 




Some model parameters might be free or given within
useful ranges, instead of with fixed values. Optimization can be used to determine values for those unknown parameters that minimize a criterion F p :
IRn p  IR1
p

(4)

subject to parameter bounds pmin 	 p 	 pmax and required system outputs, e.g. yt  
 ymin t  t  t0  t f .

Modelica 2002, March 18−19, 2002



∑ f0k xk



uk 

k

Design Parameter Optimization Problem

F p  min

F K xK 

316



min

(6)

uk x0

F K : IRn  IR1  f0k : IRn  IRm  IR1
with respect to the discrete-time system equations
xk1
k


n

f : IR

fk xk  uk 

(7)

 IR  IR
m

n

and the additional constraints
ckmin

cKmin
k

	
	
n

c : IR

ck xk  uk 
cK xK 

	

 IR  IR
m

	

ckmax 

cKmax 

mk



K

n

c : IR

 IR

mK

(8)


The Modelica Association

Franke R.

Formulation of dynamic optimization problems using Modelica

Note that initial conditions of the system model are
formulated as general constraints (8) as well. Discretization formulae, known parameter values, and
predetermined disturbances are included into the
discrete-time functions FK , f0k , fk , ck , and cK . The
discrete-time functions are assumed to be two times
continuously differentiable with respect to their variables.

2.6

Large-Scale
Problem

Nonlinear

3 Solving nonlinear dynamic system
models for optimization

Sequential Quadratic Programming (SQP) is generally considered as the most efficient numerical method
available nowadays to solve nonlinear optimization
problems [12]. This quasi Newton method treats nonlinear optimization problems by solving a sequence
of local linear-quadratic approximations. The Lagrangian of the optimization problem is approximated
Programming quadratically, typically by applying a numerical update formula. Constraints are approximated linearly.

Discrete-time optimal control problems can be treated
as structured large-scale nonlinear optimization problems. This has the main advantage that recently developed methods for large-scale nonlinear optimization
can be applied to their efficient solution [11, 4].

The differential equations (1) used to model a dynamic
system together with the integration formulae determine the equality constraints (7) of the discrete-time
optimal control problem. Accordingly the initial value
problem
ẋt   fxt  uuk  t  zt  pxk  t 

(10)
k k1
k
k k
The discrete-time control and state variables for all
t ¾ t  t  xt   I x 
stages k are collected to one large vector of optimizahas to be solved for each stage k  0     K   1
tion variables
in each nonlinear optimization iteration to evaluate the discrete-time system functions fk xk  uk  k 
x0
0     K   1.
u0
Furthermore the discrete-time sensitivities
x1
1
u
dfk xk  uk 
(9)
v

(11)
..
d xk  uk 
.






 xK
 K
u







1 

1 

are needed to obtain local linear approximations of the
nonlinear system model. Often it turns out that the dexK
termination of these sensitivities is the most time consuming part when solving dynamic optimization probOne specific feature of the optimization approach dis- lems.
cussed here is that the discrete-time state variables at A straightforward approach for obtaining the sensitivall stages are treated as optimization variables as well, ities is to numerically differentiate the system model
even though they are determined by initial conditions together with the integration formula. This is norand the control parameters. This leads to a signifi- mally done by performing multiple initial value simucant increase of the size of the optimization problem. lations for perturbed control variables uk and discreteHowever, the consideration of states as constrained time states xk (e.g. when using Matlab optimization
optimization variables generally improves robustness routines together with a Simulink model). However,
and efficiency of the solution. For instance trajectory major drawbacks of this approach are low numerical
constraints can be formulated directly on the discrete- efficiency and accuracy.
time state variables. Furthermore the separation of the
More robust and efficient results can be obtained when
overall problem into multiple stages often leads to a
solving continuous-time sensitivity equations together
reduction of the required number of nonlinear iterawith the differential model equations. In approach
tions. The computational overhead is relatively low if
discussed here the continuous-time sensitivities are
the number of state variables nx is not too high, comneeded with respect to the optimization variables
pared to the number of control variables nu and and if
the sparse multistage structure of the large-scale nonxk

(12)

q
linear optimization problem is exploited appropriately.
uk



The Modelica Association

317



Modelica 2002, March 18−19, 2002

Formulation of dynamic optimization problems using Modelica

The required sensitivities are
si t  

dxt 

dqi

i  1     n  m

(13)

They are defined by the sensitivity equations
ṡi t  

∂f
∂f
si t  

∂xt 
∂qi

t ¾ t k  t k1 

(14)

with the initial conditions
si t k  

dIk xk 

dqi

(15)

See e.g. [9] for an extension of the famous DASSL
integration algorithm with sensitivities.
The remaining task is to provide the partial derivatives of the model equations (10) as required by the
sensitivity equations (14). They can be obtained with
the help of algorithmic, or automatic, differentiation
of the model equations [6]. Alternatively the model
equations can also be differentiated numerically. This
leads to a comparable simpler implementation at the
cost of less accuracy and robustness. Good experiences have been made with both: application of algorithmic differentiation using ADOL-C and numerical
differentiation of a model implemented as Simulink Sfunction. It turns out that numeric differentiation of
the model equations alone gives more robust results
than differentiating the model together with the integration formula numerically. This is especially true
for a variable step size integration algorithm that takes
different steps in subsequent runs when differentiating
model equations and integration formula together numerically.

Franke R.

an efficient solution of dynamic optimization problems. However, both techniques do also imply requirements on the optimized model.
The main advantage of the exploitation of sensitivities is that the superior performance of state-of-theart nonlinear optimization algorithms can be utilized.
This is especially important for problems with a high
number of unknown parameters, e.g. to describe a
complex control trajectory. However, the model must
be smooth with respect to the optimization variables.
This means that the values of model variables or their
derivatives may not jump (e.g. caused by a state event
or by discontinuous functions like absolute value, respectively). From the point of view of optimization,
state events have to be formulated as integer variables. This leads to mixed integer nonlinear optimization problems that require a significantly higher solution effort than smooth nonlinear optimization problems. Fortunately in many cases discrete events can
be circumvented, e.g. a diode can be modeled ideally
utilizing a state event or approximately with a smooth
non-linear function. Furthermore it might be sufficient
to formulate an optimization problem for a restricted
range of the validity of the overall model by introducing constraints on optimization variables. For instance a flow model expressing flow reversal with a
state event might be restricted to only exhibit flow into
one direction when used in a dynamic optimization.
It is important to note that the model must not be
smooth with respect to time. This means that time
events, or more generally speaking a sequence of
events with fixed switching structure, can easily be incorporated into the dynamic optimization problem. In
fact mixed integer nonlinear optimization solvers often exploit this feature and treat a problem with state
events on two levels: integer variables are modified
on an upper level, while for each set of fixed integer
variables the resulting nonlinear optimization problem
with fixed switching structure is solved on a lower
level.

As the simulation code is generated by a model translation tool from a Modelica specification, one would
wish for the future that a Modelica translator like Dymola generates required sensitivity equations together
with the model equations. This would considerably Besides the exploitation of sensitivities, the treatment
simplify the treatment of dynamic optimization prob- as multistage problem offers following advantages:
lems.
¯ improved treatment of state trajectory constraints,
because sampled values of the state variables are
4 Requirements on dynamic system
optimization variables,

models used for optimization

¯

Especially the exploitation of model sensitivities and
the treatment as multistage problem are important for

Modelica 2002, March 18−19, 2002

318

non-linearities do only occur within stages involving only discrete-time variables at specific
discrete time points (often leading to a reduction
of non-linear iterations),

The Modelica Association

Franke R.

Formulation of dynamic optimization problems using Modelica

¯ the time consuming sensitivity analysis can be model IdealModel
extends ShellModel;
performed in parallel for all stages because the
// implementation using
initial states for each stage are optimization vari// state events
ables.
end IdealModel;

The price that has to be paid for these features is that
not only sensitivities with respect to the free parameters are required, but also with respect to the initial
states of each stage. That is why the number of unconstrained state variables should not be too high, compared to the number of optimized control inputs or
model parameters, as otherwise the expensive calculation of sensitivities for these states does not pay off.
Fortunately this practical requirement of low model
complexity is not specific to dynamic optimization, but
is generally known from control applications. If for
instance the dynamic optimization shall be performed
on-line starting at a transient initial state, the availability of measurement data for estimating the initial state
often restricts the allowed model complexity too.

5

Modelica features supporting the
formulation of optimization models

One mathematical model can hardly fulfill all requirements that are caused by different applications. That
is why it is considered important that a modeling language supports a flexible model management allowing
to build different mathematical models describing the
same dynamic system depending on requirements by
specific applications.

5.1

Separation of model interface and model
implementation

A well known object-oriented technique is to separate
interface definition and implementation. This technique is also well supported by the object oriented
modeling language Modelica. An interface can be defined as partial model:

and alternatively a smooth model:
model SmoothModel
extends ShellModel;
// alternative
// implementation using
// smooth non-linear function
end SmoothModel;

Further implementations can for instance provide
models of different complexity, e.g. introducing different numbers of state variables.
Modelica supports the redeclaration of submodels.
Exploiting this features, a system model defined for
one application, say a real-time simulation, can be
adapted to fulfill the requirements of an other application, say a dynamic optimization.

5.2 Model containing multiple implementations
Alternatively to defining different models for different
formulations, one model can also provide multiple implementations. One possibility is to use the Modelica
built-in operator analysisType():
model UniversalModel
// interface definitions
equation
if analysisType() == "dynamic"
// implementation using
// state events
else if analysisType() == "linear"
// implementation using
// smooth non-linear function
end;
end UniversalModel;

The model translation tool picks out the appropriate
implementation depending on the analysis type. Analysis type linear means that the continuous part of the
model shall be transformed in a linear system. This
Different implementations can be based on the same implies that the model should be formulated in an apinterface, e.g. an ideal model with exact switching be- propriate way allowing linearization at given operating
havior:
points.
partial model ShellModel
// interface definitions
end ShellModel;

The Modelica Association

319

Modelica 2002, March 18−19, 2002

Formulation of dynamic optimization problems using Modelica

Franke R.

Furnace

Header 1

Pump

Drum

Superheater 1

Spray Water

Header 2

Superheater 2

Pipe

Valve

Condense Water

Figure 1: Flowsheet of a boiler model describing the generation of superheated steam.

5.3

6 Example

Attributes of predefined types

The predefined Modelica type Real defines several The optimal startup of a boiler for the generation of suattributes that are important for the formulation of op- perheated steam in a coal fired power plant is discussed
timization models. These are:
as example. The optimal control problem is to obtain
a new operating point as fast and efficient as possible
nominal The nominal attribute should be used to
considering constraints on the thermal stress on thick
scale optimization variables (control inputs, unwalled parts, see [8]. Main new challenges, compared
known parameters, model states).
to approaches known so far, e.g. [7], are to formulate
stateSelect This attribute is useful to guide the a nonlinear dynamic process model that is capable to
model translator to select specific states that will accurately predict the behaviour over a wide range of
operation, including cold start, to be open for flexible
become optimization variables.
adaptation of the model to specific power plants, and
Furthermore the attributes min and max could be uti- to solve the optimal control problem considering conlized to formulate bounds on model variables and con- straints on multiple thermal stresses that may become
straints. However, it should be noted that Modelica is active in different situations.
not intended to be an optimization modeling language. The process model is formulated in the object-oriented
The primary intention of the attributes min and max is modeling language Modelica. This allows the flexible
to restrict the range a model is valid for, not to define composition of a process model from sub-models for
constraints like operational bounds.
typical components. Figure 1 shows an example flowGenerally Modelica should not be seen as a modeling
language to define a whole optimization problem, including optimization criterion and constraints. Instead
Modelica is considered a powerful language to define
the dynamic system model in a dynamic optimization
problem.

Modelica 2002, March 18−19, 2002

320

sheet. Submodels are a feedwater pump, an evaporator, two superheaters, a long pipe, and a high pressure
bypass valve. Further submodels cover the furnace.
The phenomenon of condense water is modeled in a
separate submodel that is attached to the first superheater. A spray water inlet is placed between the two

The Modelica Association

Franke R.

Formulation of dynamic optimization problems using Modelica

superheaters. Thick walled parts are outlet headers of
the superheaters and the boiler drum. The model components are based on the ThermoFluid model library
[15]. The ThermoFluid library implements, besides
others, the IAPWS Industrial Formulation IF 97 standard for the thermodynamic properties of water and
steam, enabling accurate and efficient models. The
reuse of this model library is considered crucial for an
effortable model development concentrating on application specific phenomena.
The implementation of water and steam properties in
the ThermoFluid library is accomplished by partial
derivatives allowing the flexible selection of state variables, see also the model development in [1]. In the
example discussed here, mainly temperatures are selected as state variables, besides pressures and mass
flow rates. This simplifies the treatment of constraints
on thermal stresses.
Controlled inputs are the fuel flow rate, the amount of
spray water, and the position of the outlet valve. Model
outputs are pressure, temperature and mass flow rate
of generated steam as well as three observed thermal
stresses.
The Dymola tool is applied to generate a mathematical system of differential and algebraic equations
as required for an efficient numerical solution. After collecting all submodels from the used model libraries, the overall differential-algebraic equation system (DAE) contains 636 variables and equations. This
DAE is converted to a system of ordinary differential
equations (ODE) with 11 dynamic state variables and
is compiled to a Simulink S-function.

Figure 2 shows optimization results. The optimization
solver has to obtain three trajectories for the controlled
inputs so that the optimization criterion is minimized
subject to the constraints on thermal stresses and the
required new operating point. It can be seen that
first the constraints on thermal stress of superheater 2
(dTSH2 ) and drum (dTD ) are active. Later on, when
the condense water has been evaporated, the thermal
stress of superheater 1 (dTSH1 ) is becoming active between 750 s and 1900 s. Generally the constraints are
limiting the amount of fuel (qm F ) that can be fed into
the boiler. Starting from 1500 s, spray water (qm AW )
is utilized to reduce the thermal stress on superheater
2. The thermal stress of the drum is becoming active
again. The high pressure bypass valve (YHPB ) is primarily used to control the steam flow rate (qm Steam ),
but it influences other process variables like steam
pressure (pSteam ) and steam temperatures (TSteam ) as
well. The required new operating point is reached after about 2500 s.






Such an optimization can be used as core routine of
a nonlinear model based controller (NMPC). In this
way startup cost savings of about 10% can be reached,
compared to a traditional control strategy.

7 Conclusions

The general principle of Modelica of separating
the model specification from the numerical solution
method allows the reuse of simulation models for optimization. Furthermore, the object-oriented features of
the Modelica language and the availability of model
Note that the dynamic optimization method discussed libraries greatly simplify the development of rigorous
here requires the mathematical model in the same form physical models for complex dynamic systems.
as simulation solvers do. This means that no optimiza- Nonlinear dynamic optimization problems can be
tion specific extensions are required to the Dymola treated efficiently as discrete-time optimal control
model translator. The S-function is directly used to problems and solved numerically by applying largetreat dynamic optimization problems, in our case the scale nonlinear optimization methods, see also [3].
estimation of model parameters and the optimal boiler This is especially true for problems with state constartup. Sensitivities are obtained by numerical differ- straints. The HQP dynamic optimization solver has
entiation of the model.
been integrated with the Dymola modeling and simulation software using Matlab and Simulink as integraThe optimal boiler startup problem is formulated for
tion platform [13, 14, 2, 5].
60 time intervals. The control trajectories are parameterized piecewise linear. The resulting large-scale The optimal startup of a power plant is discussed as
nonlinear optimization problem has 1034 optimization example. The system model is formulated based on the
variables, 854 equality constraints, and 1212 inequal- ThermoFluid model library [15]. The reuse of model
ity constraints. Its solution with the HQP solver takes libraries is considered crucial for an effortable model
about 3 minutes on a PC with Pentium III 850 MHz development concentrating on specific phenomena of
an application.
processor.

The Modelica Association

321

Modelica 2002, March 18−19, 2002

Formulation of dynamic optimization problems using Modelica

The example demonstrates the main strengths of
model based predictive control: the treatment of multiinput multi-output problems and the consideration of
state constraints. For reasons of efficiency, it is important to carefully select state variables during the modeling process. The treatment of state variables as optimization variables simplifies the consideration of state
trajectory constraints and allows a more robust and efficient solution of the dynamic optimization problem,
even though the problem size increases.

Franke R.

[8] Klaus Krüger, Manfred Rode, and Rüdiger
Franke. Optimal control for fast boiler start-up
based on a nonlinear model and considering the
thermal stress on thick-walled components. In
Proceedings of the IEEE Conference on Control
Applications. Mexico City, September 2001.
[9] T. Maly and L.R. Petzold. Numerical methods and software for sensitivity analysis of
differential-algebraic systems. Applied Numerical Mathematics, 20:57–79, 1996.

For the future it appears desirable that a model transModelica: Modlation tool generates required sensitivity equations in [10] Modelica Association.
eling
of
Complex
Physical
Systems.
addition to the model differential equations. Model
http://www.modelica.org.
libraries might provide alternative sub-models for specific phenomena, e.g. description of sudden changes
Sequential quadratic prowith discrete events or with an approximate non-linear [11] Walter Murray.
gramming
methods
for large-scale problems.
function. These sub-models could then be exchanged
Computational Optimization and Applications,
with each other depending on the intended application
7(1):127–142, 1997.
and requirements by the solution method.
[12] P. Spellucci. Numerische Verfahren der nichtlinearen Optimierung. Birkhäuser Verlag, Basel,
1993.

References

Inc.
MATLAB:
[1] K.J. Åström and R.D. Bell. Drum-boiler dynam- [13] The MathWorks,
the
language
of
technical
computing.
ics. Automatica, 36:363–378, 2000.
http://www.mathworks.com.
[2] Dynasim AB. Dymola: Dynamic Modeling Lab[14] The MathWorks, Inc.
Simulink:
for
oratory. http://www.dynasim.se.
model-based and system level design.
[3] R. Franke. Integrated dynamic modeling and ophttp://www.mathworks.com.
timization of systems with seasonal heat storage,
volume 394 of Fortschritt-Berichte VDI, Reihe 6 [15] Hubertus Tummescheit, Jonas Eborn, and
(in German). VDI-Verlag, Düsseldorf, 1998.
Falko Jens Wagner. Development of a Modelica base library for modeling of thermo-hydraulic
[4] R. Franke and E. Arnold. Applying new numersystems. In Proceedings of the 1st Modelica
ical algorithms to the solution of discrete-time
Workshop 2000. Lund, Sweden, 2000.
optimal control problems. In K. Warwick and
M. Kárný, editors, Computer-Intensive Methods
in Control and Signal Processing: The Curse of
Dimensionality, pages 105–118. Birkhäuser Verlag, Basel, 1997.
[5] R. Franke, E. Arnold, and H. Linke. HQP: a
solver for nonlinearly constrained large-scale optimization. http://hqp.sourceforge.net.
[6] A. Griewank. Evaluating Derivatives: Principles and Techniques of Algorithmic Differentiation, volume 19 of Frontiers in Applied Mathematics. SIAM, Philadelphia, 1992.
[7] P. Kallappa, Michael S. Holmes, and Asok
Ray. Life-extending control of fossil fuel power
plants. Automatica, 33(6):1101–1118, 1997.

Modelica 2002, March 18−19, 2002

322

The Modelica Association

Franke R.

Formulation of dynamic optimization problems using Modelica

Figure 2: Results for the optimal boiler startup problem. The upper plots show the controlled inputs fuel
flow rate qm F %, flow rate of spray water qm AW kgs, and position of high pressure bypass valve YHPB .
Below process variables characterizing the generated steam are plotted: qm Steam /kg/s, pSteam /MPa, Tm Steam  ÆC.
Furthermore three thermal stresses dT /K are shown.






The Modelica Association

323



Modelica 2002, March 18−19, 2002

Modelica 2002, March 18−19, 2002

324

The Modelica Association

Sjöberg J., Fyhr F., Grönstedt T.

Estimating parameters in physical models using MathModelica

Estimating parameters in physical models using MathModelica 
Jonas Sjöberg, Fredrik Fyhr and Tomas Grönstedt
Department of Machine- and Vehicle Systems
Chalmers University of Technology
412 96 Gothenburg, Sweden
Phone +46-31-772 1855, Fax: +46-31-772 3690
Email: jonas.sjoberg@me.chalmers.se

Abstract

follows.

This paper describes a program which extends MathModelica so that model parameters can be estimated
using measured data. Given initial values of the
parameters, the parameter estimates are iteratively
changed so that the sum of squared errors of the difference between the model output and the data is minimized. In each iteration an extended differential equation has to be simulated. The developed program imports the Modelica model into Mathematica and derives a symbolic expression for this extended differential equation. The extended model i converted to Modelica format and MathModelica is used to simulate it
efficiently.

1

¯ Some parameters are maybe only approximately
known.
¯ The change of the parameters in the estimation
can be used as a way to validate the original
model.
¯ The system might need to be re-tuned after age
and wear.
¯ An online version of the program could be used
for monitoring and failure detection of plants in
continuous use.

The current program builds on MathModelica. The
rational for this is that when the user has obtained a
model for simulation, no extra effort is needed to estimate its parameters. This is in opposite to most existing identification tools of today where you have to
transform the model into their special format. It is also
a question of flexibility, thanks to the great generality
of Modelica you can specify almost any type of model.
This can either by done by using the Modelica syntax
in a Mathematica notebook or by using the graphical
user interface, Figure 1, where you build a model by
combining sub models from different libraries.
The following example illustrates the idea of the program.
Example: Consider the electric circuit in Figure 2. It
is easy to build this model with the model editor. The
only non-standard part is the resistor which is nonlinear and described by

Introduction

A mathematical model of a plant can be based on wellknown physical laws. These physical laws often contains parameters which numerical values might not be
exactly known. There might be, for example, spring
constants, masses, resistances and other basic parameters. The program described here has been developed
to estimate such parameters using measured signals
from the system.
Estimating models of dynamic systems is called system identification. It is a well established engineering
research field. Introductory books are, for examples,
[5, 3], and more advanced ones [4, 6]. These books,
and available software tools, deal with either linear
models or discrete time models. For many real world
problems there is a need of nonlinear continuous-time
models.
uR  R1 i  R2 i5
There are many reasons to estimate parameters in
models built on physical principles. Some examples where u is the voltage, i the current, and R and R
R
1
2
 Financial support from Volvo Aero Corporation AB is grate- are parameters. There are also parameters describing
the inductance, L and the capacitor, C.
fully acknowledged.

The Modelica Association

325

Modelica 2002, March 18−19, 2002

Estimating parameters in physical models using MathModelica

Sjöberg J., Fyhr F., Grönstedt T.

Data was obtained by simulating the model with “true”
parameter values and with a step voltage of 10 Volt at
t  0. The obtained current is displayed in Figure 3.
The sampled data values used in the parameter estimation are indicated with dots. The model was initialized

Inductor1it
1.5
1
0.5

2

4

6

8

10

12

14

t

Figure 3: Current through the inductor of the circuit in
Figure (2). The marked values are data samples used
to estimate the parameters.

Figure 1: MathModelica model building editor.

with parameter values different from the ones used to
obtain the data, as indicated in Table 1. From the initialization the parameters where iteratively improved
using the developed program. In Figure 4 the simulated current is shown after each iteration. As seen in
the figure, the simulated values coincide with the data
after some 6-7 iterations.
C

Parameter
R1
R2
C
L

vt 
R1 , R 2

True value
0.5
1
0.5
1

Initial estimates
2
2
2
2

Table 1: True parameters used to obtain the data and
initial parameter values used in the optimization.

L

¾

Figure 2: A nonlinear circuit with unknown parame- The rest of the paper is organized in the following way.
ters C, L, and R1 and R2 . Voltage over the resistor is Section 2 gives the mathematical description of the
described by R1 i  R2 i5
considered system identification problem. How this
theory is solved by the program is described in Section 3. Another example is given in Section 4 which is
followed by a discussion on possibilities and problems
with the current approach in Section 5. The paper is
then concluded in Section 6.

Modelica 2002, March 18−19, 2002

326

The Modelica Association

Sjöberg J., Fyhr F., Grönstedt T.

Estimating parameters in physical models using MathModelica

a gradient based algorithm
T̂i1  T̂i  µR
2.5

1.5
1
0.5

4

6

8

10

dVN T 
dT TT̂i

(5)

where R is a positive definite matrix approximating
the Hessian, and µ is a step length to assure descent
steps. Different standard minimization algorithms, for
example Gauss-Newton, Levenberg-Marquardt and
steepest-descent, are covered by (5) and they differ on
the choice of R. See, eg, [1, 2].
A key part in the iterative minimization (5) is the computation of the derivative of the criterion. It becomes

2

2



1

12

2 N
d ŷt  T
yt   ŷt  T
¦
N t 1
dT

(6)

whxt  T whxt  T dxt 

wT
wxt 
dT

(7)

dVN T
dT



d ŷt  T
dT



Figure 4: Simulated current after consecutive parameter estimate updates.
This leads us to the derivative of the model output

2

The equations describing the calculations

Assume that we are interested of a specific system and
consider a model of it, described by a differential equation, DAE or ODE

which cannot be obtained without the signal
x̃t  

dxt 
dT

(8)

f ẋt  xt  ut  T



0

To obtain this signal we have to take the derivative of
(1) the original state space equation in (1). This gives us

ŷt  T



hxt  T

(2)

where xt  are the states of the model, ut  is the input
signal, yt  is the output signal. The differential equation is then specified by the functions f and h which
also depend on the parameters which are stored in a
parameter vector T.
Assume further that a data set of N samples has been
collected from the system, yt  ut tN1 . The goal
is then to tune T so that the simulated output ŷt  resembles yt  when the model is simulated with the input ut tN1 . This is obtained by introducing a criterion of fit. It can be almost any arbitrary differential
function, but to keep things easy we choose the mean
squared error
VN T 

1 N
2
yt   ŷt  T
N t¦
1

T

which is a new differential equation. Since it contains
xt  it is coupled with the original differential equation
(1) describing the model.
By introducing


zt  
(3)

Then the estimate is defined as
T̂  arg min VN T

w f ẋt  xt  ut  T d ẋt 

wẋt 
dT
w f ẋt  xt  ut  T dxt  w f ẋt  xt  ut  T


wxt 
dT
wT
w f ẋt  xt  ut  T ˙
w f ẋt  xt  ut  T
x̃t 
x̃t  
wẋt 
wxt 
w f ẋt  xt  ut  T
 0 (9)
wT

(4)

xt 
x̃t 



(10)

the two coupled differential equations (1) and (9) can
be described as
F żt  zt  ut  T  0

(11)

where the definition of F follows from (1) and (9).
It is generally not possible to find a closed form ex- Hence, to perform the iterative minimization (5) the
pression for T̂. Instead, starting with an initial param- differential equation (11) has to be simulated in each
eter guess T̂0 the estimate is iteratively computed by iteration using the current value of T.

The Modelica Association

327

Modelica 2002, March 18−19, 2002

Estimating parameters in physical models using MathModelica

3

Sjöberg J., Fyhr F., Grönstedt T.

v

The program

R

The different parts of the Mathematica program can
now be described in more detail:
1. Given a Modelica model, describing (1), with initial parameter values and data from the true system.

d

i

2. A subset of the parameters are selected for estimation.
3. The extended differential equation (11) is sym- Figure 6: Description of the dead zone parameterizabolically computed from the original model (1) tion.
and transformed into Modelica standard.
4. The extended differential equation (11) is simu- voltage over the resistor and one can clearly see the
cut-off due to the dead zone.
lated with the current parameter values.
5. The selected parameters are updated (5).
6. Until convergence, go to 4.
The main part of the program is the derivation of the
extended model. The other steps consists of interface
issues or well-known algorithms which have to be included into the program.

4

1.5
1
0.5

Example

10

20

30

40

-0.5
A first example was given already in the introduction.
Here follows a second one where we have a different
type of nonlinear resistor. The system is described in
Figure 5. The input to the system is the voltage at
the voltage source and the output is the current. The Figure 7: Simulation of the true system, the voltage
over the resistor versus time.
C
The model was initialized with parameter values as indicated in Table 2. The simulation of the initial model
vt 
together with the estimation data are depicted in FigR, d
ure 8.

Parameter
R
d
C
L

L

True value
0.5
0.4
0.8
1

Initial value
0.7
0.35
1.1
1.1

Final value
0.503
0.402
0.805
0.993

Figure 5: Nonlinear circuit with a parameterized dead
Table 2: Parameter values for the circuit with a dead
zone.
zone in the resistance.
resistor is described by an unknown resistance, R, and
a dead zone, d, see Figure 6.
The result of the tuning is illustrated in Figure 9 where
Estimation data was obtained by selecting a set of the simulated current is depicted after each iteration
“true” parameters, given in Table 2 and simulating the together with the estimation data. Table 2 gives the
model with a step input of 5 Volt. Figure 7 depicts the final parameter values. From the figure it is clear that

Modelica 2002, March 18−19, 2002

328

The Modelica Association

Sjöberg J., Fyhr F., Grönstedt T.

Estimating parameters in physical models using MathModelica

the parameters converge within some 10 iterations.

5 Discussion
Although the program is far from ready the following
functionality is supported, or can easily be supported
by making smaller changes.

Inductor1it
1.5

¯ Data can be sampled at irregular sampling instances. Different signals can be sampled individually.

1
0.5
10

20

30

40

¯ Systems described by DAE can be handled in the
same (automatic) way as ODE systems. The example in the introduction was actually a DAE example.

t

-0.5

Figure 8: Simulation of the model with the initial parameters together with estimation data.

¯ Discontinuous (but piecewise smooth) differential equations can be handled, at least a formal
result can be obtained.
¯ Multiple input multiple output systems are handled.
¯ Criterion of fit can be changed.

There are also potential problems.
¯ The gradient search can only guarantee convergence to a local minimum. Hence, a good initial parameter guess is necessary to obtain convergence to the global minimum.
¯ The order of the extended differential equation is
often high, it becomes the number of parameters
times the number of states in the original differential equation. This gives a high computational
burden which might limit the applicability of the
program.

4
3
2
1
10

20

30

40

¯ Stability problems may occur. Depending on the
parameter values the differential equations might
be stable or unstable. In the general case, where
the model is nonlinear, it is not possible to monitor stability.

-1
-2
-3

Figure 9: Simulated current after consecutive parameter estimate updates.

6 Conclusions
A Mathematica program has been developed which
extends MathModelica so that parameters can be estimated using measured data. The program builds on
the following principles.

The Modelica Association

329

Modelica 2002, March 18−19, 2002

Estimating parameters in physical models using MathModelica

Sjöberg J., Fyhr F., Grönstedt T.

¯ An existing modeling tool, the MathModelica
graphical user interface, is used to describe the
model.
¯ Mathematica is used to create the to the model
specific extended differential equation which
needs to be simulated in the estimation process.
¯ Existing, efficient numerical differential equation
solver is used to simulate the extended differential equation.

So far only preliminary studies have been carried out.
More experience is needed and the program has to be
developed further before it becomes as easy to use, as
it is supposed to be.

References
[1] J.E. Dennis and R.B. Schnabel. Numerical Methods for Unconstrained Optimization and Nonlinear Equations. Prentice-Hall, Englewood Cliffs,
New Jersey, 1983.
[2] R. Fletcher. Practical Methods of Optimization.
John Wiley & Sons, 1987.
[3] R. Johansson. System Modeling & Identification.
Prentice-Hall, Inc., Englewood Cliffs, New Jersey
07632, 1993.
[4] L. Ljung. System Identification: Theory for the
User. Prentice-Hall, Englewood Cliffs, NJ, 2nd
edition, 1999.
[5] L. Ljung and T. Glad. Modeling of Dynamic Systems. Prentice Hall, Englewood Cliffs, N.J., 1994.
[6] T. Söderström and P. Stoica. System Identification. Prentice-Hall International, Hemel Hempstead, Hertfordshire, 1989.

Modelica 2002, March 18−19, 2002

330

The Modelica Association

Aronsson P., Fritzson P.

Multiprocessor Scheduling of Simulation Code From Modelica Models

Multiprocessor Scheduling of Simulation Code
From Modelica Models
Peter Aronsson, Peter Fritzson
PELAB, The Programming Environment lab
Department of Computer and Information Science
Linköping University
SE-581 83 Linköping, Sweden
{petar,petfr}@ida.liu.se

Abstract
Modern object oriented modeling techniques, such as
the Modelica modeling language, are increasing the
capability to model and simulate systems of large size
and complexity. Simulation of such large and complex
systems is computationally very expensive. The use of
parallel computers for simulation of Modelica models
is one approach of handling simulation of such large
and complex systems within reasonable time limits.
This paper presents an automatic parallelization tool
that translates the sequential simulation code generated from a Modelica compiler, Dymola, into a parallel version that can be executed on a parallel computer. The paper also presents several scheduling and
clustering techniques used by the tool to partition the
simulation code onto several processors. One of these
techniques, called FTDT-Full Task Duplication Technique, gives a measured speedup of 2.5 on an 8 processor PC-cluster. However, future work includes developing better scheduling and clustering algorithms
to further improve the results.

1

Summary

Object oriented equation based modeling languages
such as Modelica enable simulation of large complex
systems. However, with growing complexity of modeled systems, the need for parallelization becomes increasingly important in order to keep simulation time
within reasonable limits.
The first step in a Modelica compilation results in
a system of differential and algebraic equations. The
Modelica compiler typically performs optimizations
on this system of equations to reduce its size. Other
optimizations on the equation system are also performed to for instance reduce the index of the system

The Modelica Association

331

to make it easier to solve numerically, and break algebraic loops to enable generation of more efficient
code. Finally, sequential C code is generated from
the optimized set of equations, containing assignment
statements with arithmetic expressions, function calls,
and subsystems of equations that are solved using a
variety of solution techniques. This simulation code is
then combined with a numerical solver to simulate the
model.
This paper presents an automatic parallelization
method and tool that builds a task graph from the optimized sequential code produced by the Dymola commercial Modelica compiler. Earlier work indicated
that the task graph should be built at the expression
level, resulting in a large fine grained task graph. The
reason for building the task graph at the lowest level
is to reveal all possible parallelism in the task graph.
The fine granularity of the task graph means that the
communication costs between tasks in the graph are
typically much larger than the execution costs of the
tasks. Hence, the scheduling algorithms need to take
this into consideration to be able to produce an efficient parallel schedule of the task graph.
Several scheduling algorithms have been studied
and implemented for this problem, like the TDS algorithm, which is a task duplication based scheduling
algorithm. We have also investigated clustering algorithms which have the goal of clustering nodes for better computation/communication tradeoff. However the
standard algorithms found in the literature gave poor
result due to the special properties of the tasks graphs
generated from the optimized equations converted to
C-code emitted by the Dymola Modelica compiler.
There are some scheduling algorithms, specially designed for targeting simulation code, like for instance
the algorithm presented in [21]. However, that algorithm is not suitable for our purposes since it is mainly

Modelica 2002, March 18−19, 2002

Multiprocessor Scheduling of Simulation Code From Modelica Models

designed for coarse grained task graphs and can not
handle fine grained task graphs well. The reason for
obtaining good speedup in that case is that the used
architecture had a reasonable fast communication network compared to the slow processor speed. However,
this relation between communication speed and processor speed is not valid today, and is in fact degrading
in the future, since the processor speed is increasing
much faster than the communication speed.
Yet another approach, where task duplication is always used, FTDT - Full Task Duplication Technique,
shows speedup results for some examples, including
a thermofluid pipe model which gives a speedup of
about 2.5 on 8 processors running on a PC-cluster.
Future work include designing and developing better clustering and scheduling algorithms well suited
for the simulation code generated from optimized systems of equations.

2

Introduction

Modelica is an acausal, object-oriented, equation
based modeling language for modeling and simulation
of large and complex multi-domain systems [14, 8].
Modelica was designed by an international team of
researchers, whose joint effort has resulted in a general language for design of models of physical multidomain systems. Modelica has influences from a number of earlier object oriented modeling languages, for
instance Dymola [7] and ObjectMath [9].
A Modelica compiler flattens the object oriented
structure of the model into a system of differential algebraic equations (DAE) which during simulation is
solved using a standard DAE solver. This code is often
very time consuming to execute, and there is a great
need for parallel execution, especially for demanding
applications like hardware-in-the-loop simulation.
The flat set of equations produced by a Modelica
compiler is typically sparse, and there is a large opportunity for optimization. A simulation tool with support for the Modelica language would typically perform optimizations on the equation set to reduce the
number of equations. One such tool is Dymola [6],
another is MathModelica [13].
The problem presented in this paper is to parallelize
the calculation of the states (the state variables and
their derivatives) in each time step of the solver. The
code for this calculation consists of assignments of numerical expressions, e.g. addition or multiplication operations, to different variables. But it can also contain
function calls, for instance to solve an equation system

Modelica 2002, March 18−19, 2002

332

Aronsson P., Fritzson P.

or to compute sin(x) for a value x, which are computationally more heavy tasks. The Dymola simulation tool produces this kind of code. Hence we can use
Dymola as a front end for our automatic parallelization
tool.
To parallelize the simulation we first build a task
graph, G = (V, E) where each task v ∈ V corresponds
to a simple binary operation, or a function call. A data
dependency edge (e ∈ E) is present between two task
nodes v1 , v2 iff v2 uses the result from v1 . This is represented in the task graph by the edge e = (v1 , v2 ). Each
task is assigned an execution cost which corresponds
to a normalized execution time of the task, and each
edge is assigned a communication cost corresponding
to a normalized communication time between the tasks
if they execute on different processors. Figure 1 illustrates how a task graph can be represented graphically.
Each node is divided by a horizontal line. Above the
line a unique task label/number is given and below the
line is the execution cost of the task. Near each edge is
the communication cost for the edge given. The goal
of a scheduling or clustering algorithm is to minimize
the execution time of the parallel program. This often means that the communication between processors
must be kept low, since interprocessor communication
is very expensive. When two tasks execute on the same
processor, the communication cost between them is reduced to zero.
1
2
10

5

3
2

2
1
5

5

4
1

5
5
2

6
2
5

10
7
1

10
8
1

Figure 1: Task graph with communication and execution costs.
Scheduling and partitioning of task graphs of the
kind described above have been studied thoroughly
in the past three decades. There exist a plethora of
different scheduling and partitioning algorithms in the
literature for different kinds of task graphs, considering different aspects of the scheduling problem. The

The Modelica Association

Aronsson P., Fritzson P.

Multiprocessor Scheduling of Simulation Code From Modelica Models

sends all the resulting data to other tasks after the computational work has been performed.
Due to the merging property of a task merging algorithm, the resulting task graph will have a higher granularity value, i.e. the communication to computation
ratio will increase. Thus, after a task merging algorithm has been applied any standard scheduling algorithm that works better for coarse grained task graphs
can successfully be applied.
An orthogonal feature in scheduling algorithms is
task duplication. Task duplication scheduling algo3 Related Work
rithms rely on task duplication as a mean of reducing
communication cost. However, the decision if a task
A large number of scheduling and partitioning algo- should be duplicated or not introduces additional comrithms have been presented in the literature. Some plexity to the algorithm, pushing the complexity up in
of them use list scheduling techniques and heuris- the range O(n3 ) to O(n4 ) for task graphs with n nodes.
tics [3, 11, 5, 2, 10, 22]. A list scheduler keeps a list
of tasks that are ready to be scheduled, i.e. all its predecessors have already been scheduled. In each step it 4 Scheduling of Simulation Code
selects one of the tasks in the list, by some heuristic,
and assigns it to a suitable processor, and updates the An overview of the automatic parallelization tool presented in this paper is given in Figure 2. The figure
list.
Another technique is called critical path schedul- illustrates both how the sequential executable and the
ing [17]. The critical path of a task graph (DAG) is the parallel executable that are built.
path having the largest sum of communication and exModel
(.mo)
ecution cost. The algorithm calculates the critical path,
Modelica
extracts it from the task graph and assign it to a procesCompiler
sor. After this operation, a new critical path is found in
sequential
the remaining task graph, which is then scheduled to
C code
the next processor, and so on. One property of critical
Parallelizer
path scheduling algorithms is that the number of availMPI
Solver
lib
lib
able processors is assumed to be unbounded, because
Parallel
C code
of the nature of the algorithm.
Yet another approach to scheduling of task graphs is
C compiler
C compiler
to first apply a task clustering algorithm and thereafter
schedule the clusters for a fixed number of processors.
sequential
parallel
executable
executable
A task clustering algorithm results in a cluster partition
of the task graph. A cluster is a set of nodes designated
to execute on the same processor. Thus, the communi- Figure 2: An overview of the parallelization tool and
cation costs for edges between nodes belonging to the its environment.
same cluster are reduced to zero. A low complexity
task clustering algorithm is the DSC algorithm [19]. It
Simulation code generated from Modelica mostly
has a complexity of O(n · log(n)).
consists of a large number of assignments of expresAn alternative approach to task clustering is to ap- sions with arithmetic operations to variables. Some of
ply task merging algorithms [12]. The difference be- the variables are needed by the DAE solver to calculate
tween a task clustering algorithm and a task merging the next state, hence they must be sent to the processor
algorithm is that in the task clustering case, tasks are running the solver. Other variables are merely temponot merged, i.e. the communication of data is still per- rary variables whose value can be discarded after the
formed for each individual task in the cluster. But for final use.
the task merging case, the tasks are merged such that
The simulation code is parsed, and a fine grained
the new task resulting from the merge receives all its task graph is built, see the structure of the tool in Figdata before the computational work of the task, and ure 3. The generated graph, which has the properties
general problem of scheduling task graphs for a multiprocessor system has been proven to be NP complete [15].
The rest of the paper is organized as follows: Section 3 gives a short summary of related work. Section
4 presents our contribution to parallelizing simulation
code. In section 5 we give some results of our contribution, followed by a discussion and future work in
section 6.

The Modelica Association

333

Modelica 2002, March 18−19, 2002

Multiprocessor Scheduling of Simulation Code From Modelica Models

of a DAG (Directed Acyclic Graph), can be very large.
A typical application (e.g. a thermo-fluid model of a
pipe, discretized to 100 pieces), with an integration
time of around 10 milli seconds, has a task graph with
30000 nodes. The size of each node can also vary a
lot. For instance, when the simulation code originates
from a DAE, certain nodes represent an equation system that have to be solved in each iteration if they can
not be solved statically at compile time. These equation systems can be linear or non-linear. In the linear
case, any standard equation solver could be used, even
parallel solvers. In the non-linear case, fixed point iteration is used. In both cases, the solving of each equation system is represented as a single node in the task
graph. Such a node can have a large execution time in
comparison to other nodes (like an addition or a multiplication of two scalar floating point values).
Parser

Symbol
Table

Task Graph
Builder

Aronsson P., Fritzson P.

A second problem with the task graphs generated
is that in order to keep the task graph small, the implementation does not allow a task to contain several
operations. For instance, a task can not contain both a
multiplication and a function call. The simulation code
can also contain Modelica when statements, which are
equivalent to a special form of if statements without
else branch. These need to be considered as one
task, since if the condition of the when statement is
true, all statements included in the when statement
should be executed. An alternative would be to replicate the guard for each statement in the when statement. This is however not implemented yet, since usually the when statements are small in size and the need
of splitting them up is low.
To solve the problems above, a second task graph is
built, with references into the original task graph. The
implementation of the second task graph makes it possible to cluster tasks into larger ones, thus increasing
the granularity of the task graph. The first task graph is
kept, since it is needed later for generating code. The
two task graphs are illustrated in Figure 4.

Scheduler

Code
Generator

Debug &
Statistics

Figure 3: The internal architecture of the parallelization tool.
The task graph generated directly from the simulation code is not suitable for scheduling to multiprocessors. There are several reasons for this, the major reason is that the task graph is too fine grained
for applying a standard scheduling algorithm. Many
scheduling algorithms are designed for coarse grained
task graphs. The granularity of a task graph is the relation between the communication cost between tasks
and the execution cost of the tasks. There are several scheduling algorithms that can handle fine grained
task graphs as well as coarse grained task graphs. One
such category of algorithms is non-linear clustering algorithms [19, 20]. These algorithms consider putting
siblings1 into the same cluster to reduce communication cost. A problem with some of these algorithms is
that the complexity is too high for the large task graphs
generated by our tool.

Figure 4: The two task graphs built from the simulation code.

The second level task graph can also be used to cluster tasks together using a task clustering or task merging algorithm. An algorithm for merging task similar
to the algorithm found in [16] has been implemented
in our tool, except that our algorithm deals with removing cycles. The algorithm constructs a cluster incrementally, starting with a single node n, taken from
a list l of all nodes sorted by level in descending order.
The algorithms first examine the children of the
node n. When all children have been clustered, the
1 A sibling s, to a task n is defined as a node where n and s has algorithm continues searching for a node that has a
child (not in the cluster) with in-degree one and ina common predecessor.

Modelica 2002, March 18−19, 2002

334

The Modelica Association

Aronsson P., Fritzson P.

Multiprocessor Scheduling of Simulation Code From Modelica Models

cludes them as well, see figure 5. The next choice of
including nodes is the set of parent nodes to the node
n. After that, siblings to n are chosen, followed by an
arbitrary node in the list of nodes.

a

Figure 5: Node a with in-degree one is included in the
cluster
To prevent the algorithm from producing cycles in
the clustered task graph, a function that detects cycles
is called, which includes all nodes forming a cycle
from a cluster. Such a cycle is illustrated in Figure
6. The figure shows that by clustering nodes a and
b together and not including c in the same task, the
resulting task graph will be cyclic, thus removing the
property of a DAG making it impossible to schedule.
When a cycle is detected several approaches can be
taken. Either the complete cycle is added to the cluster, which can in the worst case make a cluster too
large. Another alternative is to remove the node from
the cluster causing the cycle, and begin a new cluster.
This on the other hand might cause some clusters to be
too small.

a

b

c

Figure 6: A cluster that forms a cycle in the resulting
task graph.
Once the coarse grained task graph is built we can
use standard scheduling algorithms found in the literature. In our implementation we have used a schedul-

The Modelica Association

335

ing algorithm called TDS [1], which is a critical path
scheduling algorithm with task duplication. For coarse
grained graphs it produces the optimal solution. However, the number of processors needed by the algorithm is not fixed. Thus, to use the algorithm in practice a phase following the TDS algorithm has to be introduced. This phase limits the number of processors
by merging task lists of different processors.
Finally, a simple method called Full Task Duplication Technique (FTDT) is implemented in the parallelization tool. It collects clusters by collecting all parents for each exit node (i.e. a node without any successor) into clusters. These clusters are then merged
in a load balancing manner until the number of clusters match the required number of processors. This
method is only useful if the task granularity (communication to execution time ratio) is very high, i.e. the
average cost of communication is much larger than the
average cost of execution in the task graph. However,
since it applies full duplication it represents an upper
limit on the possible speedup for task graph with very
high communication costs and can thus be useful in
some specific cases.

5

Results

The first results without the pre-clustering (or task
merging) phase implemented showed that the TDS algorithm did not work well on fine grained tasks, even
with an unlimited number of processors. Most examples did not produce speedups at all. The major reason
was that the early implementation did not optimize the
sending of messages between tasks, by sending and receiving larger chunks of data. In practice, each scalar
produced its own MPI send and receive call.
But also the limitations of the TDS algorithm on fine
grained task graphs (i.e. task graphs with high communication costs) had an effect on the result. The TDS algorithm is a linear critical path scheduling algorithm,
i.e. it never schedules two siblings onto the same processor. This means that the TDS algorithm exploits all
available parallelism, even if the communication cost
is very high. Thus it does not work well on graphs with
high granularity.
When using the modified task merging algorithm
described above, the results were also not showing a
speedup > 1. The main reason for not giving good results in this case was that the task merging algorithm
did not succeed in both merging the tasks to increase
the granularity and still reveal enough parallelism in
the task graph such that speedup > 1 could be ob-

Modelica 2002, March 18−19, 2002

Multiprocessor Scheduling of Simulation Code From Modelica Models

tained. Thus, the resulting task graph contained too
many dependencies such that the only possible partition was a sequential partition for one processor.
The Full Task Duplication Technique did however
produce reasonable results. Figure 7 gives computed
speedup values from the task graphs generated from
the simulation code for a thermofluid pipe model with
three different discretization values. Figure 8 gives
the measured speedup results for the same models
when the parallelized simulation code is executed on
a parallel PC-cluster with a SCI communication network [18].
Figure 9 presents computed speedup values from
the task graph for the robot example (the r3 robot)
found in the Modelica Standard Library.

Aronsson P., Fritzson P.

Speedup
8

c=5000

6
c=1000

4
2

c=100

12

4

8

# Proc
16

(a) Thermofluid pipe with 50 discretization points.

Speedup
8

c=5000

6
c=1000

4
2

6

Discussion and Future Work

12

It is clear that the simulation code emitted from compilers of equation based simulation languages can be
highly optimized and very irregular code. Hence, this
code is not trivial to parallelize. The scheduling algorithms found in the literature are not suitable for
fine grained task graphs of the magnitude produced by
our tool. Therefore, a pre-clustering phase is needed.
Also, the increasingly gap between processor speed
and communication speed will demand better clustering and task merging algorithms in order to provide
good speedup results in the future.
Due to the large task graphs, caused by the large
simulation code files, the clustering algorithm must be
of low complexity but still use for instance task duplication to reduce communication cost.
The results could be further improved by applying
task duplication to the pre-cluster algorithm. Since
each task can be very small, extensive task duplication could be used to reduce the communication in the
clustered task graph. However, the demand for a low
complexity algorithm does not allow an advanced task
duplication scheme. Future work is to investigate what
kind of task duplication could be considered in the preclustering phase. Clearly, it could improve the results
significantly.
The results from the robot example did not produce
good speedup. However, when using mixed mode
and inline integration the amount of parallelism in the
task graph increased. Therefore, future work includes
a deeper investigation on larger models both using
mixed mode and inline integration and without those
optimizations. Future work also includes an investigation on the effects of different optimizations performed

Modelica 2002, March 18−19, 2002

c=100

336

4

8

# Proc
16

(b) Thermofluid pipe with 100 discretization points.

Speedup
10
8

c=5000

6
c=1000

4
2

c=100

12

4

8

# Proc
16

(c) Thermofluid pipe with 150 discretization points.

Figure 7: Computed speedup figures for different communication costs c using the FTD method on the Thermofluid pipe.

on the system of equations regarding the amount of
parallelism in the simulation code.
Future work on the scheduling and clustering problem for fine grained task graphs is also needed.
Perhaps a more accurate parallel machine model is
needed, like for instance the Logp parallel programming model [4].This would make the model more accurate, giving better estimates of the gained speedup.
However, such an extension of the computational
model would also increase the complexity of the
scheduling and clustering algorithms.

The Modelica Association

Aronsson P., Fritzson P.

Multiprocessor Scheduling of Simulation Code From Modelica Models

Speedup
2

Speedup
2
1.75
1.5
1.25
1
0.75
0.5
0.25

1.75
1.5
1.25
1
0.75

c=1000

c=100

c=10

0.5

# Proc
1

0.25

2

# Proc
1

2

4

8

16

(a) Mechanical robot model
(a) Thermofluid pipe with 50 discretization points.
Speedup
2
1.75
1.5
1.25
1
0.75
0.5
0.25

Speedup
3
2.5
2
1.5

c=1000

c=100

c=10

# Proc
1

1

2

4

9

0.5

(b) Mechanical robot model with mixed mode and inline
integration

# Proc
1

2

4

8

16

(b) Thermofluid pipe with 100 discretization points.

Figure 9: Computed speedup figures for different communication costs, c, using the FTD method on the
robot example.

Speedup
3
2.5
2

References

1.5
1

[1] S. Darbha, D. P. Agrawal. Optimal Scheduling
Algorithm for Distributed-Memory Machines.
IEEE Transactions on Parallel and Distributed
Systems, vol. 9(no. 1):87–94, January 1998.

0.5
# Proc
1

2

4

8

16

(c) Thermofluid pipe with 150 discretization points.

Figure 8: Measured speedup figures when executing
on a PC-cluster with SCI network interface using the
FTD method on Thermofluid pipe.

7

[3] C. Hanen, A. Munier. An approximation algorithm for scheduling dependent tasks on m processors with small communication delays. Technical report, Laboratoire Informatique Theorique
Et Programmation, Institut Blaise Pascal, Universite P.et M. Curie, 1999.

Acknowledgments

This has been supported by the Modelica Tools project
in the Complex Systems framework supported by
NUTEK (Swedish Board for Technical Development),
and the EU-IST project RealSim.

The Modelica Association

[2] Andrei Radulescu, A. J.C. van Gemund.
FLB:Fast Load Balancing for DistributedMemory Machines. Technical report, Faculty
of Information Technology and Systems, Delft
University of Technology, 1999.

337

[4] David E. Culler, Richard M. Karp, David A. Patterson, Abhijit Sahay, Klaus E. Schauser, Eunice
Santos, Ramesh Subramonian, and Thorsten von
Eicken. Logp: Towards a realistic model of par-

Modelica 2002, March 18−19, 2002

Multiprocessor Scheduling of Simulation Code From Modelica Models

allel computation. In Principles Practice of Parallel Programming, pages 1–12, 1993.

Aronsson P., Fritzson P.

IEEE Computer, 1999. 12-16 April, San Juan,
Puerto Rico.

[5] C.Y. Lee, J.J. Hwang, Y.C. Chow, F.D Anger. [17] S. Darbha, D. P. Agrawal. Optimal Scheduling
Multiprocessor Scheduling with Interprocessor
Algorithm for Distributed-Memory Machines.
Communication Delays. Operations Research
Transactions on Parallel and Distributed SysLetters, vol.7(no. 3), 1988.
tems, vol. 9(no. 1), 1998.
[6] Dymola, http://www.dynasim.se.

[18] Scali
Scalable
http://www.scali.com.

Linux

Systems,

[7] H. Elmqvist. A Structured Model Language for
Large Continuous Systems. PhD thesis, Depart- [19] T. Yang, A. Gerasoulis. DSC: Scheduling Parment of Automatic Control, Lund Institute of
allel Tasks on an Unbounded Number of ProcesTechnology, Lund, Sweden, 1978.
sors. Transactions on Parallel and Distributed
Systems, vol. 5(no. 9), 1994.
[8] P. Fritzson, V. Engelson. Modelica - A Unified
Object-Oriented Language for System Modeling [20] V. Sarkar. Partitioning and Scheduling Parallel
and Simulation. In Proceedings of the 12th EuPrograms for Multiprocessors. MIT Press, Camropean conference on Object-Oriented Programbridge, MA, 1989.
ming, LNCS. Springer Verlag, 1998.
[21] B. E. Wells. A Hard Real-Time Static Task
[9] P. Fritzson, L. Viklund, J. Herber, and D. FritzAllocation Methodology for Highly-Constrained
son. High-level mathematical modeling and proMessage-Passing Environments. The Internagramming. IEEE Software, vol. 12(no. 4):77–87,
tional Journal of Computers and Their ApplicaJuly 1995.
tions, II(3), December 1995.
[10] G. Sih and E. Lee. A Compile-Time Schedul- [22] Wu, M. Y. and Gajski, D. D. Hypertool: A
ing Heuristic for Interconnection-Constrained
Programming Aid for Message-Passing Systems.
Heterogeneous Processor Architectures. IEEE
Transactions on Parallel and Distributed SysTransactions on Parallel and Distributed Systems, vol. 1(no. 3), 1990.
tems, vol. 4(no. 2), 1993.
[11] J.J. Hwang, Y.C. Chow, F.D. Anger, C.Y. Lee.
Scheduling Precedence Graphs in Systems with
Interprocessor Communication Times. Journal
on Computing, vol. 18(vol. 2), 1989.
[12] M. Ayed, J-L Gaudiot. An efficient heuristic for
code partitioning. Parallel Computing, 26:399–
426, 2000.
[13] MathModelica, http://www.mathcore.com.
[14] The Modelica Language,
http://www.modelica.org.
[15] R.L. Graham, L.E. Lawler, J.K. Lenstra and A.H.
Kan. Optimization an Approximation in Deterministic Sequencing and Scheduling: A Survey.
Annals of Discrete Mathematics, pages 287–326,
1979.
[16] S. Chingchit, M. Kumar, L.N. Bhuyan. A flexible Clustering and Scheduling Scheme for Efficient Parallel Computation. In Proceedings, Parallel and Distributed Processing, pages 500–505.

Modelica 2002, March 18−19, 2002

338

The Modelica Association

